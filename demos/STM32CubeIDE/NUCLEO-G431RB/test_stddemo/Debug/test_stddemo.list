
test_stddemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004324  08004324  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800432c  0800432c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800432c  0800432c  0001432c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004330  08004330  00014330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  080043a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080043a4  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec37  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a3  00000000  00000000  0002ecd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00031180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  00031e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e75e  00000000  00000000  00032988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d502  00000000  00000000  000510e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba08d  00000000  00000000  0005e5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118675  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b8  00000000  00000000  001186c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080041a0 	.word	0x080041a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080041a0 	.word	0x080041a0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fb0d 	bl	8000bda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f80b 	bl	80005da <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f8ea 	bl	800079c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005c8:	f000 f89e 	bl	8000708 <MX_LPUART1_UART_Init>
  MX_LPTIM1_Init();
 80005cc:	f000 f870 	bl	80006b0 <MX_LPTIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  test_stddemo_init();
 80005d0:	f002 fd3e 	bl	8003050 <test_stddemo_init>
  while (1)
  {
    /* USER CODE END WHILE */
    test_stddemo_step();
 80005d4:	f002 fd84 	bl	80030e0 <test_stddemo_step>
 80005d8:	e7fc      	b.n	80005d4 <main+0x1c>

080005da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b0a4      	sub	sp, #144	; 0x90
 80005de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005e4:	2238      	movs	r2, #56	; 0x38
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fe05 	bl	80031f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005fe:	463b      	mov	r3, r7
 8000600:	2244      	movs	r2, #68	; 0x44
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fdf7 	bl	80031f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fecc 	bl	80013a8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000610:	230a      	movs	r3, #10
 8000612:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000618:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061a:	2340      	movs	r3, #64	; 0x40
 800061c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800061e:	2301      	movs	r3, #1
 8000620:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000626:	2302      	movs	r3, #2
 8000628:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800062a:	2304      	movs	r3, #4
 800062c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800062e:	2355      	movs	r3, #85	; 0x55
 8000630:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800064a:	4618      	mov	r0, r3
 800064c:	f000 ff60 	bl	8001510 <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000656:	f000 f923 	bl	80008a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2303      	movs	r3, #3
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000672:	2104      	movs	r1, #4
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fa63 	bl	8001b40 <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000680:	f000 f90e 	bl	80008a0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_LPTIM1;
 8000684:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000688:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 800068e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fc6e 	bl	8001f78 <HAL_RCCEx_PeriphCLKConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006a2:	f000 f8fd 	bl	80008a0 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3790      	adds	r7, #144	; 0x90
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_LPTIM1_Init+0x50>)
 80006b6:	4a13      	ldr	r2, [pc, #76]	; (8000704 <MX_LPTIM1_Init+0x54>)
 80006b8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_LPTIM1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_LPTIM1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_LPTIM1_Init+0x50>)
 80006c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006cc:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_LPTIM1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_LPTIM1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_LPTIM1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_LPTIM1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_LPTIM1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_LPTIM1_Init+0x50>)
 80006ee:	f000 fdbf 	bl	8001270 <HAL_LPTIM_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 80006f8:	f000 f8d2 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000130 	.word	0x20000130
 8000704:	40007c00 	.word	0x40007c00

08000708 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800070e:	4a22      	ldr	r2, [pc, #136]	; (8000798 <MX_LPUART1_UART_Init+0x90>)
 8000710:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800074a:	4812      	ldr	r0, [pc, #72]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800074c:	f001 fe04 	bl	8002358 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000756:	f000 f8a3 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075a:	2100      	movs	r1, #0
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800075e:	f002 fb25 	bl	8002dac <HAL_UARTEx_SetTxFifoThreshold>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000768:	f000 f89a 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076c:	2100      	movs	r1, #0
 800076e:	4809      	ldr	r0, [pc, #36]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000770:	f002 fb5a 	bl	8002e28 <HAL_UARTEx_SetRxFifoThreshold>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800077a:	f000 f891 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000780:	f002 fadb 	bl	8002d3a <HAL_UARTEx_DisableFifoMode>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800078a:	f000 f889 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000a0 	.word	0x200000a0
 8000798:	40008000 	.word	0x40008000

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b2f      	ldr	r3, [pc, #188]	; (8000870 <MX_GPIO_Init+0xd4>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a2e      	ldr	r2, [pc, #184]	; (8000870 <MX_GPIO_Init+0xd4>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <MX_GPIO_Init+0xd4>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ca:	4b29      	ldr	r3, [pc, #164]	; (8000870 <MX_GPIO_Init+0xd4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a28      	ldr	r2, [pc, #160]	; (8000870 <MX_GPIO_Init+0xd4>)
 80007d0:	f043 0320 	orr.w	r3, r3, #32
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b26      	ldr	r3, [pc, #152]	; (8000870 <MX_GPIO_Init+0xd4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0320 	and.w	r3, r3, #32
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b23      	ldr	r3, [pc, #140]	; (8000870 <MX_GPIO_Init+0xd4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a22      	ldr	r2, [pc, #136]	; (8000870 <MX_GPIO_Init+0xd4>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b20      	ldr	r3, [pc, #128]	; (8000870 <MX_GPIO_Init+0xd4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_GPIO_Init+0xd4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <MX_GPIO_Init+0xd4>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_GPIO_Init+0xd4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2120      	movs	r1, #32
 8000816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081a:	f000 fcf9 	bl	8001210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800081e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_GPIO_Init+0xd8>)
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	4811      	ldr	r0, [pc, #68]	; (8000878 <MX_GPIO_Init+0xdc>)
 8000834:	f000 fb52 	bl	8000edc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000838:	2320      	movs	r3, #32
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000852:	f000 fb43 	bl	8000edc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2028      	movs	r0, #40	; 0x28
 800085c:	f000 fb09 	bl	8000e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000860:	2028      	movs	r0, #40	; 0x28
 8000862:	f000 fb20 	bl	8000ea6 <HAL_NVIC_EnableIRQ>

}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000
 8000874:	10110000 	.word	0x10110000
 8000878:	48000800 	.word	0x48000800

0800087c <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the LPUART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000884:	1d39      	adds	r1, r7, #4
 8000886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800088a:	2201      	movs	r2, #1
 800088c:	4803      	ldr	r0, [pc, #12]	; (800089c <__io_putchar+0x20>)
 800088e:	f001 fdb3 	bl	80023f8 <HAL_UART_Transmit>

	return ch;
 8000892:	687b      	ldr	r3, [r7, #4]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000a0 	.word	0x200000a0

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <Error_Handler+0x8>
	...

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_MspInit+0x44>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_MspInit+0x44>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6613      	str	r3, [r2, #96]	; 0x60
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <HAL_MspInit+0x44>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <HAL_MspInit+0x44>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <HAL_MspInit+0x44>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	6593      	str	r3, [r2, #88]	; 0x58
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_MspInit+0x44>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008e2:	f000 fe05 	bl	80014f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_LPTIM_MspInit+0x38>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d10b      	bne.n	800091e <HAL_LPTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <HAL_LPTIM_MspInit+0x3c>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	4a09      	ldr	r2, [pc, #36]	; (8000930 <HAL_LPTIM_MspInit+0x3c>)
 800090c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000910:	6593      	str	r3, [r2, #88]	; 0x58
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <HAL_LPTIM_MspInit+0x3c>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000916:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40007c00 	.word	0x40007c00
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <HAL_UART_MspInit+0x7c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d128      	bne.n	80009a8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <HAL_UART_MspInit+0x80>)
 8000958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800095a:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <HAL_UART_MspInit+0x80>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <HAL_UART_MspInit+0x80>)
 8000964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_UART_MspInit+0x80>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <HAL_UART_MspInit+0x80>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_UART_MspInit+0x80>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000986:	230c      	movs	r3, #12
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000996:	230c      	movs	r3, #12
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a4:	f000 fa9a 	bl	8000edc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	; 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40008000 	.word	0x40008000
 80009b4:	40021000 	.word	0x40021000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f93c 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a10:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a14:	f000 fc14 	bl	8001240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	e00a      	b.n	8000a44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a2e:	f3af 8000 	nop.w
 8000a32:	4601      	mov	r1, r0
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	60ba      	str	r2, [r7, #8]
 8000a3a:	b2ca      	uxtb	r2, r1
 8000a3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	3301      	adds	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dbf0      	blt.n	8000a2e <_read+0x12>
	}

return len;
 8000a4c:	687b      	ldr	r3, [r7, #4]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	e009      	b.n	8000a7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	60ba      	str	r2, [r7, #8]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff03 	bl	800087c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dbf1      	blt.n	8000a68 <_write+0x12>
	}
	return len;
 8000a84:	687b      	ldr	r3, [r7, #4]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <_close>:

int _close(int file)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
	return -1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ab6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_isatty>:

int _isatty(int file)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b00:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <_sbrk+0x5c>)
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <_sbrk+0x60>)
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <_sbrk+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d102      	bne.n	8000b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <_sbrk+0x64>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <_sbrk+0x68>)
 8000b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d207      	bcs.n	8000b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b28:	f002 fb3c 	bl	80031a4 <__errno>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	220c      	movs	r2, #12
 8000b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b36:	e009      	b.n	8000b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <_sbrk+0x64>)
 8000b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20008000 	.word	0x20008000
 8000b58:	00000400 	.word	0x00000400
 8000b5c:	2000008c 	.word	0x2000008c
 8000b60:	20000180 	.word	0x20000180

08000b64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <SystemInit+0x20>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <SystemInit+0x20>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8e:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba4:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bb2:	f7ff ffd7 	bl	8000b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f002 fafb 	bl	80031b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bba:	f7ff fcfd 	bl	80005b8 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   r0, =_estack
 8000bc0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bcc:	08004334 	.word	0x08004334
  ldr r2, =_sbss
 8000bd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bd4:	2000017c 	.word	0x2000017c

08000bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_2_IRQHandler>

08000bda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f939 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 f80e 	bl	8000c0c <HAL_InitTick>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	e001      	b.n	8000c00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bfc:	f7ff fe56 	bl	80008ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c00:	79fb      	ldrb	r3, [r7, #7]

}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <HAL_InitTick+0x68>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d022      	beq.n	8000c66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_InitTick+0x6c>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <HAL_InitTick+0x68>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f944 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d10f      	bne.n	8000c60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b0f      	cmp	r3, #15
 8000c44:	d809      	bhi.n	8000c5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c46:	2200      	movs	r2, #0
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c4e:	f000 f910 	bl	8000e72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_InitTick+0x70>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	e007      	b.n	8000c6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
 8000c5e:	e004      	b.n	8000c6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e001      	b.n	8000c6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <HAL_IncTick+0x1c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a03      	ldr	r2, [pc, #12]	; (8000c9c <HAL_IncTick+0x1c>)
 8000c90:	6013      	str	r3, [r2, #0]
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	20000168 	.word	0x20000168
 8000ca0:	20000008 	.word	0x20000008

08000ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <HAL_GetTick+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000168 	.word	0x20000168

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db0b      	blt.n	8000d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 021f 	and.w	r2, r3, #31
 8000d38:	4907      	ldr	r1, [pc, #28]	; (8000d58 <__NVIC_EnableIRQ+0x38>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000e100 	.word	0xe000e100

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	; (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	; (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e3c:	f7ff ff8e 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff29 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e80:	f7ff ff40 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff ff90 	bl	8000db0 <NVIC_EncodePriority>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff5f 	bl	8000d5c <__NVIC_SetPriority>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff33 	bl	8000d20 <__NVIC_EnableIRQ>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffa4 	bl	8000e18 <SysTick_Config>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000eea:	e15a      	b.n	80011a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 814c 	beq.w	800119c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d00b      	beq.n	8000f24 <HAL_GPIO_Init+0x48>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d007      	beq.n	8000f24 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f18:	2b11      	cmp	r3, #17
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b12      	cmp	r3, #18
 8000f22:	d130      	bne.n	8000f86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	f003 0201 	and.w	r2, r3, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0xea>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b12      	cmp	r3, #18
 8000fc4:	d123      	bne.n	800100e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	08da      	lsrs	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3208      	adds	r2, #8
 8000fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	6939      	ldr	r1, [r7, #16]
 800100a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0203 	and.w	r2, r3, #3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 80a6 	beq.w	800119c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001050:	4b5b      	ldr	r3, [pc, #364]	; (80011c0 <HAL_GPIO_Init+0x2e4>)
 8001052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001054:	4a5a      	ldr	r2, [pc, #360]	; (80011c0 <HAL_GPIO_Init+0x2e4>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6613      	str	r3, [r2, #96]	; 0x60
 800105c:	4b58      	ldr	r3, [pc, #352]	; (80011c0 <HAL_GPIO_Init+0x2e4>)
 800105e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001068:	4a56      	ldr	r2, [pc, #344]	; (80011c4 <HAL_GPIO_Init+0x2e8>)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001092:	d01f      	beq.n	80010d4 <HAL_GPIO_Init+0x1f8>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a4c      	ldr	r2, [pc, #304]	; (80011c8 <HAL_GPIO_Init+0x2ec>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d019      	beq.n	80010d0 <HAL_GPIO_Init+0x1f4>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a4b      	ldr	r2, [pc, #300]	; (80011cc <HAL_GPIO_Init+0x2f0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d013      	beq.n	80010cc <HAL_GPIO_Init+0x1f0>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a4a      	ldr	r2, [pc, #296]	; (80011d0 <HAL_GPIO_Init+0x2f4>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d00d      	beq.n	80010c8 <HAL_GPIO_Init+0x1ec>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a49      	ldr	r2, [pc, #292]	; (80011d4 <HAL_GPIO_Init+0x2f8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d007      	beq.n	80010c4 <HAL_GPIO_Init+0x1e8>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a48      	ldr	r2, [pc, #288]	; (80011d8 <HAL_GPIO_Init+0x2fc>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d101      	bne.n	80010c0 <HAL_GPIO_Init+0x1e4>
 80010bc:	2305      	movs	r3, #5
 80010be:	e00a      	b.n	80010d6 <HAL_GPIO_Init+0x1fa>
 80010c0:	2306      	movs	r3, #6
 80010c2:	e008      	b.n	80010d6 <HAL_GPIO_Init+0x1fa>
 80010c4:	2304      	movs	r3, #4
 80010c6:	e006      	b.n	80010d6 <HAL_GPIO_Init+0x1fa>
 80010c8:	2303      	movs	r3, #3
 80010ca:	e004      	b.n	80010d6 <HAL_GPIO_Init+0x1fa>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e002      	b.n	80010d6 <HAL_GPIO_Init+0x1fa>
 80010d0:	2301      	movs	r3, #1
 80010d2:	e000      	b.n	80010d6 <HAL_GPIO_Init+0x1fa>
 80010d4:	2300      	movs	r3, #0
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	f002 0203 	and.w	r2, r2, #3
 80010dc:	0092      	lsls	r2, r2, #2
 80010de:	4093      	lsls	r3, r2
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e6:	4937      	ldr	r1, [pc, #220]	; (80011c4 <HAL_GPIO_Init+0x2e8>)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010f4:	4b39      	ldr	r3, [pc, #228]	; (80011dc <HAL_GPIO_Init+0x300>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001118:	4a30      	ldr	r2, [pc, #192]	; (80011dc <HAL_GPIO_Init+0x300>)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800111e:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <HAL_GPIO_Init+0x300>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001142:	4a26      	ldr	r2, [pc, #152]	; (80011dc <HAL_GPIO_Init+0x300>)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <HAL_GPIO_Init+0x300>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800116c:	4a1b      	ldr	r2, [pc, #108]	; (80011dc <HAL_GPIO_Init+0x300>)
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <HAL_GPIO_Init+0x300>)
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	43db      	mvns	r3, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001196:	4a11      	ldr	r2, [pc, #68]	; (80011dc <HAL_GPIO_Init+0x300>)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3301      	adds	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f47f ae9d 	bne.w	8000eec <HAL_GPIO_Init+0x10>
  }
}
 80011b2:	bf00      	nop
 80011b4:	bf00      	nop
 80011b6:	371c      	adds	r7, #28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010000 	.word	0x40010000
 80011c8:	48000400 	.word	0x48000400
 80011cc:	48000800 	.word	0x48000800
 80011d0:	48000c00 	.word	0x48000c00
 80011d4:	48001000 	.word	0x48001000
 80011d8:	48001400 	.word	0x48001400
 80011dc:	40010400 	.word	0x40010400

080011e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691a      	ldr	r2, [r3, #16]
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011f8:	2301      	movs	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	e001      	b.n	8001202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
 800121c:	4613      	mov	r3, r2
 800121e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001220:	787b      	ldrb	r3, [r7, #1]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001226:	887a      	ldrh	r2, [r7, #2]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800122c:	e002      	b.n	8001234 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800124c:	695a      	ldr	r2, [r3, #20]
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	4013      	ands	r3, r2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d006      	beq.n	8001264 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	4618      	mov	r0, r3
 8001260:	f001 feb4 	bl	8002fcc <HAL_GPIO_EXTI_Callback>
  }
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40010400 	.word	0x40010400

08001270 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e087      	b.n	8001392 <HAL_LPTIM_Init+0x122>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d106      	bne.n	80012a2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff fb29 	bl	80008f4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2202      	movs	r2, #2
 80012a6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d004      	beq.n	80012c4 <HAL_LPTIM_Init+0x54>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80012c2:	d103      	bne.n	80012cc <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f023 031e 	bic.w	r3, r3, #30
 80012ca:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d003      	beq.n	80012e0 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <HAL_LPTIM_Init+0x12c>)
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <HAL_LPTIM_Init+0x130>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80012f0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80012f6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80012fc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001302:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d107      	bne.n	8001322 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800131a:	4313      	orrs	r3, r2
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d004      	beq.n	8001334 <HAL_LPTIM_Init+0xc4>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001332:	d107      	bne.n	8001344 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800133c:	4313      	orrs	r3, r2
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	4313      	orrs	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800134c:	4293      	cmp	r3, r2
 800134e:	d00a      	beq.n	8001366 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001358:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800135e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4313      	orrs	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <HAL_LPTIM_Init+0x134>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d107      	bne.n	8001388 <HAL_LPTIM_Init+0x118>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	430a      	orrs	r2, r1
 8001386:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	dfff1f3f 	.word	0xdfff1f3f
 80013a0:	ff19f1fe 	.word	0xff19f1fe
 80013a4:	40007c00 	.word	0x40007c00

080013a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d141      	bne.n	800143a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013b6:	4b4b      	ldr	r3, [pc, #300]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c2:	d131      	bne.n	8001428 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013c4:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013ca:	4a46      	ldr	r2, [pc, #280]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d4:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013dc:	4a41      	ldr	r2, [pc, #260]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013e4:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2232      	movs	r2, #50	; 0x32
 80013ea:	fb02 f303 	mul.w	r3, r2, r3
 80013ee:	4a3f      	ldr	r2, [pc, #252]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	0c9b      	lsrs	r3, r3, #18
 80013f6:	3301      	adds	r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013fa:	e002      	b.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3b01      	subs	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001402:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800140e:	d102      	bne.n	8001416 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f2      	bne.n	80013fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001416:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800141e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001422:	d158      	bne.n	80014d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e057      	b.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001428:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800142e:	4a2d      	ldr	r2, [pc, #180]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001434:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001438:	e04d      	b.n	80014d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001440:	d141      	bne.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800144a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144e:	d131      	bne.n	80014b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001456:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001460:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001468:	4a1e      	ldr	r2, [pc, #120]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2232      	movs	r2, #50	; 0x32
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800147c:	fba2 2303 	umull	r2, r3, r2, r3
 8001480:	0c9b      	lsrs	r3, r3, #18
 8001482:	3301      	adds	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001486:	e002      	b.n	800148e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3b01      	subs	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800149a:	d102      	bne.n	80014a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f2      	bne.n	8001488 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ae:	d112      	bne.n	80014d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e011      	b.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014c4:	e007      	b.n	80014d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40007000 	.word	0x40007000
 80014e8:	20000000 	.word	0x20000000
 80014ec:	431bde83 	.word	0x431bde83

080014f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	4a04      	ldr	r2, [pc, #16]	; (800150c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fe:	6093      	str	r3, [r2, #8]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40007000 	.word	0x40007000

08001510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e308      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d075      	beq.n	800161a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800152e:	4ba3      	ldr	r3, [pc, #652]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001538:	4ba0      	ldr	r3, [pc, #640]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2b0c      	cmp	r3, #12
 8001546:	d102      	bne.n	800154e <HAL_RCC_OscConfig+0x3e>
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2b03      	cmp	r3, #3
 800154c:	d002      	beq.n	8001554 <HAL_RCC_OscConfig+0x44>
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b08      	cmp	r3, #8
 8001552:	d10b      	bne.n	800156c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001554:	4b99      	ldr	r3, [pc, #612]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d05b      	beq.n	8001618 <HAL_RCC_OscConfig+0x108>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d157      	bne.n	8001618 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e2e3      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001574:	d106      	bne.n	8001584 <HAL_RCC_OscConfig+0x74>
 8001576:	4b91      	ldr	r3, [pc, #580]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a90      	ldr	r2, [pc, #576]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e01d      	b.n	80015c0 <HAL_RCC_OscConfig+0xb0>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800158c:	d10c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x98>
 800158e:	4b8b      	ldr	r3, [pc, #556]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a8a      	ldr	r2, [pc, #552]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 8001594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4b88      	ldr	r3, [pc, #544]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a87      	ldr	r2, [pc, #540]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e00b      	b.n	80015c0 <HAL_RCC_OscConfig+0xb0>
 80015a8:	4b84      	ldr	r3, [pc, #528]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a83      	ldr	r2, [pc, #524]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 80015ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b81      	ldr	r3, [pc, #516]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a80      	ldr	r2, [pc, #512]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 80015ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d013      	beq.n	80015f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff fb6c 	bl	8000ca4 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d0:	f7ff fb68 	bl	8000ca4 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b64      	cmp	r3, #100	; 0x64
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e2a8      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e2:	4b76      	ldr	r3, [pc, #472]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0xc0>
 80015ee:	e014      	b.n	800161a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb58 	bl	8000ca4 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fb54 	bl	8000ca4 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e294      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800160a:	4b6c      	ldr	r3, [pc, #432]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0xe8>
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d075      	beq.n	8001712 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001626:	4b65      	ldr	r3, [pc, #404]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001630:	4b62      	ldr	r3, [pc, #392]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	2b0c      	cmp	r3, #12
 800163e:	d102      	bne.n	8001646 <HAL_RCC_OscConfig+0x136>
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d002      	beq.n	800164c <HAL_RCC_OscConfig+0x13c>
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b04      	cmp	r3, #4
 800164a:	d11f      	bne.n	800168c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800164c:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_OscConfig+0x154>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e267      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b55      	ldr	r3, [pc, #340]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	061b      	lsls	r3, r3, #24
 8001672:	4952      	ldr	r1, [pc, #328]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001678:	4b51      	ldr	r3, [pc, #324]	; (80017c0 <HAL_RCC_OscConfig+0x2b0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fac5 	bl	8000c0c <HAL_InitTick>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d043      	beq.n	8001710 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e253      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d023      	beq.n	80016dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001694:	4b49      	ldr	r3, [pc, #292]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a48      	ldr	r2, [pc, #288]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 800169a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff fb00 	bl	8000ca4 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a8:	f7ff fafc 	bl	8000ca4 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e23c      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ba:	4b40      	ldr	r3, [pc, #256]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c6:	4b3d      	ldr	r3, [pc, #244]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	061b      	lsls	r3, r3, #24
 80016d4:	4939      	ldr	r1, [pc, #228]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
 80016da:	e01a      	b.n	8001712 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016dc:	4b37      	ldr	r3, [pc, #220]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a36      	ldr	r2, [pc, #216]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 80016e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fadc 	bl	8000ca4 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f0:	f7ff fad8 	bl	8000ca4 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e218      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001702:	4b2e      	ldr	r3, [pc, #184]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x1e0>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001710:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d03c      	beq.n	8001798 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d01c      	beq.n	8001760 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001726:	4b25      	ldr	r3, [pc, #148]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 8001728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800172c:	4a23      	ldr	r2, [pc, #140]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001736:	f7ff fab5 	bl	8000ca4 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173e:	f7ff fab1 	bl	8000ca4 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e1f1      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 8001752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0ef      	beq.n	800173e <HAL_RCC_OscConfig+0x22e>
 800175e:	e01b      	b.n	8001798 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001760:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 8001762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001766:	4a15      	ldr	r2, [pc, #84]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 8001768:	f023 0301 	bic.w	r3, r3, #1
 800176c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001770:	f7ff fa98 	bl	8000ca4 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001778:	f7ff fa94 	bl	8000ca4 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e1d4      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 800178c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1ef      	bne.n	8001778 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 80ab 	beq.w	80018fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <HAL_RCC_OscConfig+0x2ac>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <HAL_RCC_OscConfig+0x2b4>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e005      	b.n	80017c6 <HAL_RCC_OscConfig+0x2b6>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	20000004 	.word	0x20000004
 80017c4:	2300      	movs	r3, #0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00d      	beq.n	80017e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	4baf      	ldr	r3, [pc, #700]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	4aae      	ldr	r2, [pc, #696]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	6593      	str	r3, [r2, #88]	; 0x58
 80017d6:	4bac      	ldr	r3, [pc, #688]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017e2:	2301      	movs	r3, #1
 80017e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e6:	4ba9      	ldr	r3, [pc, #676]	; (8001a8c <HAL_RCC_OscConfig+0x57c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d118      	bne.n	8001824 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017f2:	4ba6      	ldr	r3, [pc, #664]	; (8001a8c <HAL_RCC_OscConfig+0x57c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4aa5      	ldr	r2, [pc, #660]	; (8001a8c <HAL_RCC_OscConfig+0x57c>)
 80017f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fe:	f7ff fa51 	bl	8000ca4 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001806:	f7ff fa4d 	bl	8000ca4 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e18d      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001818:	4b9c      	ldr	r3, [pc, #624]	; (8001a8c <HAL_RCC_OscConfig+0x57c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d108      	bne.n	800183e <HAL_RCC_OscConfig+0x32e>
 800182c:	4b96      	ldr	r3, [pc, #600]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 800182e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001832:	4a95      	ldr	r2, [pc, #596]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800183c:	e024      	b.n	8001888 <HAL_RCC_OscConfig+0x378>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b05      	cmp	r3, #5
 8001844:	d110      	bne.n	8001868 <HAL_RCC_OscConfig+0x358>
 8001846:	4b90      	ldr	r3, [pc, #576]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184c:	4a8e      	ldr	r2, [pc, #568]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001856:	4b8c      	ldr	r3, [pc, #560]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185c:	4a8a      	ldr	r2, [pc, #552]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001866:	e00f      	b.n	8001888 <HAL_RCC_OscConfig+0x378>
 8001868:	4b87      	ldr	r3, [pc, #540]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 800186a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186e:	4a86      	ldr	r2, [pc, #536]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001878:	4b83      	ldr	r3, [pc, #524]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 800187a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187e:	4a82      	ldr	r2, [pc, #520]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001880:	f023 0304 	bic.w	r3, r3, #4
 8001884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d016      	beq.n	80018be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001890:	f7ff fa08 	bl	8000ca4 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001896:	e00a      	b.n	80018ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f7ff fa04 	bl	8000ca4 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e142      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ae:	4b76      	ldr	r3, [pc, #472]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 80018b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0ed      	beq.n	8001898 <HAL_RCC_OscConfig+0x388>
 80018bc:	e015      	b.n	80018ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018be:	f7ff f9f1 	bl	8000ca4 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c4:	e00a      	b.n	80018dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f7ff f9ed 	bl	8000ca4 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e12b      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018dc:	4b6a      	ldr	r3, [pc, #424]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 80018de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1ed      	bne.n	80018c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018ea:	7ffb      	ldrb	r3, [r7, #31]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d105      	bne.n	80018fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f0:	4b65      	ldr	r3, [pc, #404]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f4:	4a64      	ldr	r2, [pc, #400]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 80018f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	2b00      	cmp	r3, #0
 8001906:	d03c      	beq.n	8001982 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d01c      	beq.n	800194a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001910:	4b5d      	ldr	r3, [pc, #372]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001912:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001916:	4a5c      	ldr	r2, [pc, #368]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001920:	f7ff f9c0 	bl	8000ca4 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001928:	f7ff f9bc 	bl	8000ca4 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e0fc      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800193a:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 800193c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0ef      	beq.n	8001928 <HAL_RCC_OscConfig+0x418>
 8001948:	e01b      	b.n	8001982 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800194a:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 800194c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001950:	4a4d      	ldr	r2, [pc, #308]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001952:	f023 0301 	bic.w	r3, r3, #1
 8001956:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195a:	f7ff f9a3 	bl	8000ca4 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001962:	f7ff f99f 	bl	8000ca4 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e0df      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001974:	4b44      	ldr	r3, [pc, #272]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1ef      	bne.n	8001962 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 80d3 	beq.w	8001b32 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800198c:	4b3e      	ldr	r3, [pc, #248]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b0c      	cmp	r3, #12
 8001996:	f000 808d 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d15a      	bne.n	8001a58 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a38      	ldr	r2, [pc, #224]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 80019a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff f979 	bl	8000ca4 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b6:	f7ff f975 	bl	8000ca4 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0b5      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c8:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f0      	bne.n	80019b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d4:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_RCC_OscConfig+0x580>)
 80019da:	4013      	ands	r3, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6a11      	ldr	r1, [r2, #32]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019e4:	3a01      	subs	r2, #1
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	4311      	orrs	r1, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80019ee:	0212      	lsls	r2, r2, #8
 80019f0:	4311      	orrs	r1, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019f6:	0852      	lsrs	r2, r2, #1
 80019f8:	3a01      	subs	r2, #1
 80019fa:	0552      	lsls	r2, r2, #21
 80019fc:	4311      	orrs	r1, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a02:	0852      	lsrs	r2, r2, #1
 8001a04:	3a01      	subs	r2, #1
 8001a06:	0652      	lsls	r2, r2, #25
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a0e:	06d2      	lsls	r2, r2, #27
 8001a10:	430a      	orrs	r2, r1
 8001a12:	491d      	ldr	r1, [pc, #116]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1a      	ldr	r2, [pc, #104]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001a1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	4a17      	ldr	r2, [pc, #92]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff f938 	bl	8000ca4 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a38:	f7ff f934 	bl	8000ca4 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e074      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x528>
 8001a56:	e06c      	b.n	8001b32 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a62:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001a6a:	f023 0303 	bic.w	r3, r3, #3
 8001a6e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <HAL_RCC_OscConfig+0x578>)
 8001a76:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a80:	f7ff f910 	bl	8000ca4 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a86:	e00e      	b.n	8001aa6 <HAL_RCC_OscConfig+0x596>
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40007000 	.word	0x40007000
 8001a90:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff f906 	bl	8000ca4 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e046      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa6:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x584>
 8001ab2:	e03e      	b.n	8001b32 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e039      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d12c      	bne.n	8001b2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d123      	bne.n	8001b2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d11b      	bne.n	8001b2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d113      	bne.n	8001b2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	085b      	lsrs	r3, r3, #1
 8001b12:	3b01      	subs	r3, #1
 8001b14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d109      	bne.n	8001b2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b24:	085b      	lsrs	r3, r3, #1
 8001b26:	3b01      	subs	r3, #1
 8001b28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3720      	adds	r7, #32
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000

08001b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e11e      	b.n	8001d96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b58:	4b91      	ldr	r3, [pc, #580]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d910      	bls.n	8001b88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b8e      	ldr	r3, [pc, #568]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 020f 	bic.w	r2, r3, #15
 8001b6e:	498c      	ldr	r1, [pc, #560]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b8a      	ldr	r3, [pc, #552]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e106      	b.n	8001d96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d073      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d129      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9c:	4b81      	ldr	r3, [pc, #516]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0f4      	b.n	8001d96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001bac:	f000 f99e 	bl	8001eec <RCC_GetSysClockFreqFromPLLSource>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4a7c      	ldr	r2, [pc, #496]	; (8001da8 <HAL_RCC_ClockConfig+0x268>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d93f      	bls.n	8001c3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bba:	4b7a      	ldr	r3, [pc, #488]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d033      	beq.n	8001c3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d12f      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bda:	4b72      	ldr	r3, [pc, #456]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001be2:	4a70      	ldr	r2, [pc, #448]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e024      	b.n	8001c3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d107      	bne.n	8001c08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bf8:	4b6a      	ldr	r3, [pc, #424]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0c6      	b.n	8001d96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c08:	4b66      	ldr	r3, [pc, #408]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0be      	b.n	8001d96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c18:	f000 f8ce 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4a61      	ldr	r2, [pc, #388]	; (8001da8 <HAL_RCC_ClockConfig+0x268>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d909      	bls.n	8001c3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c26:	4b5f      	ldr	r3, [pc, #380]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c2e:	4a5d      	ldr	r2, [pc, #372]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c3a:	4b5a      	ldr	r3, [pc, #360]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f023 0203 	bic.w	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4957      	ldr	r1, [pc, #348]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c4c:	f7ff f82a 	bl	8000ca4 <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c54:	f7ff f826 	bl	8000ca4 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e095      	b.n	8001d96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	4b4e      	ldr	r3, [pc, #312]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 020c 	and.w	r2, r3, #12
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d1eb      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d023      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c94:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4a42      	ldr	r2, [pc, #264]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001c9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d007      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001cac:	4b3d      	ldr	r3, [pc, #244]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001cb4:	4a3b      	ldr	r2, [pc, #236]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001cb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbc:	4b39      	ldr	r3, [pc, #228]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4936      	ldr	r1, [pc, #216]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2b80      	cmp	r3, #128	; 0x80
 8001cd4:	d105      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001cd6:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	4a32      	ldr	r2, [pc, #200]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ce0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d21d      	bcs.n	8001d2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf0:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 020f 	bic.w	r2, r3, #15
 8001cf8:	4929      	ldr	r1, [pc, #164]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d00:	f7fe ffd0 	bl	8000ca4 <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d08:	f7fe ffcc 	bl	8000ca4 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e03b      	b.n	8001d96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1ed      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d38:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4917      	ldr	r1, [pc, #92]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d56:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	490f      	ldr	r1, [pc, #60]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d6a:	f000 f825 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	490c      	ldr	r1, [pc, #48]	; (8001dac <HAL_RCC_ClockConfig+0x26c>)
 8001d7c:	5ccb      	ldrb	r3, [r1, r3]
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	fa22 f303 	lsr.w	r3, r2, r3
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <HAL_RCC_ClockConfig+0x270>)
 8001d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_RCC_ClockConfig+0x274>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe ff3c 	bl	8000c0c <HAL_InitTick>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40022000 	.word	0x40022000
 8001da4:	40021000 	.word	0x40021000
 8001da8:	04c4b400 	.word	0x04c4b400
 8001dac:	0800424c 	.word	0x0800424c
 8001db0:	20000000 	.word	0x20000000
 8001db4:	20000004 	.word	0x20000004

08001db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001dbe:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d102      	bne.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dca:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	e047      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001dd0:	4b27      	ldr	r3, [pc, #156]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d102      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ddc:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	e03e      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001de2:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b0c      	cmp	r3, #12
 8001dec:	d136      	bne.n	8001e5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001df8:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3301      	adds	r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d10c      	bne.n	8001e26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e0c:	4a1a      	ldr	r2, [pc, #104]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	4a16      	ldr	r2, [pc, #88]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e16:	68d2      	ldr	r2, [r2, #12]
 8001e18:	0a12      	lsrs	r2, r2, #8
 8001e1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	617b      	str	r3, [r7, #20]
      break;
 8001e24:	e00c      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e26:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	4a10      	ldr	r2, [pc, #64]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e30:	68d2      	ldr	r2, [r2, #12]
 8001e32:	0a12      	lsrs	r2, r2, #8
 8001e34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
      break;
 8001e3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0e5b      	lsrs	r3, r3, #25
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	e001      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e60:	693b      	ldr	r3, [r7, #16]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	016e3600 	.word	0x016e3600

08001e7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000000 	.word	0x20000000

08001e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e98:	f7ff fff0 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4904      	ldr	r1, [pc, #16]	; (8001ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	0800425c 	.word	0x0800425c

08001ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ec4:	f7ff ffda 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0adb      	lsrs	r3, r3, #11
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4904      	ldr	r1, [pc, #16]	; (8001ee8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	0800425c 	.word	0x0800425c

08001eec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	3301      	adds	r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d10c      	bne.n	8001f2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f10:	4a17      	ldr	r2, [pc, #92]	; (8001f70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f1a:	68d2      	ldr	r2, [r2, #12]
 8001f1c:	0a12      	lsrs	r2, r2, #8
 8001f1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	617b      	str	r3, [r7, #20]
    break;
 8001f28:	e00c      	b.n	8001f44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f34:	68d2      	ldr	r2, [r2, #12]
 8001f36:	0a12      	lsrs	r2, r2, #8
 8001f38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f3c:	fb02 f303 	mul.w	r3, r2, r3
 8001f40:	617b      	str	r3, [r7, #20]
    break;
 8001f42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0e5b      	lsrs	r3, r3, #25
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	3301      	adds	r3, #1
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f5e:	687b      	ldr	r3, [r7, #4]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	371c      	adds	r7, #28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	016e3600 	.word	0x016e3600
 8001f74:	00f42400 	.word	0x00f42400

08001f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f80:	2300      	movs	r3, #0
 8001f82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f84:	2300      	movs	r3, #0
 8001f86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 8098 	beq.w	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9a:	4b43      	ldr	r3, [pc, #268]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10d      	bne.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	4a3f      	ldr	r2, [pc, #252]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc2:	4b3a      	ldr	r3, [pc, #232]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a39      	ldr	r2, [pc, #228]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fce:	f7fe fe69 	bl	8000ca4 <HAL_GetTick>
 8001fd2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fd4:	e009      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd6:	f7fe fe65 	bl	8000ca4 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d902      	bls.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	74fb      	strb	r3, [r7, #19]
        break;
 8001fe8:	e005      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fea:	4b30      	ldr	r3, [pc, #192]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0ef      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001ff6:	7cfb      	ldrb	r3, [r7, #19]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d159      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ffc:	4b2a      	ldr	r3, [pc, #168]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002006:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d01e      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	429a      	cmp	r2, r3
 8002016:	d019      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002018:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002022:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002024:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202a:	4a1f      	ldr	r2, [pc, #124]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002034:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	4a1b      	ldr	r2, [pc, #108]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800203c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002044:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d016      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002056:	f7fe fe25 	bl	8000ca4 <HAL_GetTick>
 800205a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800205c:	e00b      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7fe fe21 	bl	8000ca4 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	; 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d902      	bls.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	74fb      	strb	r3, [r7, #19]
            break;
 8002074:	e006      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0ec      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10b      	bne.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	4903      	ldr	r1, [pc, #12]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020a0:	e008      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020a2:	7cfb      	ldrb	r3, [r7, #19]
 80020a4:	74bb      	strb	r3, [r7, #18]
 80020a6:	e005      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020b4:	7c7b      	ldrb	r3, [r7, #17]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d105      	bne.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ba:	4ba6      	ldr	r3, [pc, #664]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020be:	4aa5      	ldr	r2, [pc, #660]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020d2:	4ba0      	ldr	r3, [pc, #640]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d8:	f023 0203 	bic.w	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	499c      	ldr	r1, [pc, #624]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020f4:	4b97      	ldr	r3, [pc, #604]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fa:	f023 020c 	bic.w	r2, r3, #12
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	4994      	ldr	r1, [pc, #592]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002116:	4b8f      	ldr	r3, [pc, #572]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	498b      	ldr	r1, [pc, #556]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00a      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002138:	4b86      	ldr	r3, [pc, #536]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	4983      	ldr	r1, [pc, #524]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800215a:	4b7e      	ldr	r3, [pc, #504]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002160:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	497a      	ldr	r1, [pc, #488]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800217c:	4b75      	ldr	r3, [pc, #468]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002182:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	4972      	ldr	r1, [pc, #456]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800219e:	4b6d      	ldr	r3, [pc, #436]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	4969      	ldr	r1, [pc, #420]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021c0:	4b64      	ldr	r3, [pc, #400]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4961      	ldr	r1, [pc, #388]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021e2:	4b5c      	ldr	r3, [pc, #368]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	4958      	ldr	r1, [pc, #352]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	2b00      	cmp	r3, #0
 8002202:	d015      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002204:	4b53      	ldr	r3, [pc, #332]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	4950      	ldr	r1, [pc, #320]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002222:	d105      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002224:	4b4b      	ldr	r3, [pc, #300]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4a4a      	ldr	r2, [pc, #296]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800222a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800222e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002238:	2b00      	cmp	r3, #0
 800223a:	d015      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800223c:	4b45      	ldr	r3, [pc, #276]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	4942      	ldr	r1, [pc, #264]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800225a:	d105      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800225c:	4b3d      	ldr	r3, [pc, #244]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4a3c      	ldr	r2, [pc, #240]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002266:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d015      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002274:	4b37      	ldr	r3, [pc, #220]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4934      	ldr	r1, [pc, #208]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002292:	d105      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002294:	4b2f      	ldr	r3, [pc, #188]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4a2e      	ldr	r2, [pc, #184]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800229e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d015      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022ac:	4b29      	ldr	r3, [pc, #164]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ba:	4926      	ldr	r1, [pc, #152]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ca:	d105      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022cc:	4b21      	ldr	r3, [pc, #132]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a20      	ldr	r2, [pc, #128]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d015      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022e4:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f2:	4918      	ldr	r1, [pc, #96]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002302:	d105      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4a12      	ldr	r2, [pc, #72]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800230e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d015      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800231c:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232a:	490a      	ldr	r1, [pc, #40]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800233a:	d105      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002346:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002348:	7cbb      	ldrb	r3, [r7, #18]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000

08002358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e042      	b.n	80023f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002370:	2b00      	cmp	r3, #0
 8002372:	d106      	bne.n	8002382 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7fe fad9 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2224      	movs	r2, #36	; 0x24
 8002386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0201 	bic.w	r2, r2, #1
 8002398:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f8c2 	bl	8002524 <UART_SetConfig>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e022      	b.n	80023f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fb54 	bl	8002a60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 fbdb 	bl	8002ba4 <UART_CheckIdleState>
 80023ee:	4603      	mov	r3, r0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800240e:	2b20      	cmp	r3, #32
 8002410:	f040 8083 	bne.w	800251a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <HAL_UART_Transmit+0x28>
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e07b      	b.n	800251c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_UART_Transmit+0x3a>
 800242e:	2302      	movs	r3, #2
 8002430:	e074      	b.n	800251c <HAL_UART_Transmit+0x124>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2221      	movs	r2, #33	; 0x21
 8002446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800244a:	f7fe fc2b 	bl	8000ca4 <HAL_GetTick>
 800244e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	88fa      	ldrh	r2, [r7, #6]
 8002454:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	88fa      	ldrh	r2, [r7, #6]
 800245c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002468:	d108      	bne.n	800247c <HAL_UART_Transmit+0x84>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d104      	bne.n	800247c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	e003      	b.n	8002484 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800248c:	e02c      	b.n	80024e8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2200      	movs	r2, #0
 8002496:	2180      	movs	r1, #128	; 0x80
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 fbce 	bl	8002c3a <UART_WaitOnFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e039      	b.n	800251c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10b      	bne.n	80024c6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	3302      	adds	r3, #2
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	e007      	b.n	80024d6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	781a      	ldrb	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	3301      	adds	r3, #1
 80024d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1cc      	bne.n	800248e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2200      	movs	r2, #0
 80024fc:	2140      	movs	r1, #64	; 0x40
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fb9b 	bl	8002c3a <UART_WaitOnFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e006      	b.n	800251c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2220      	movs	r2, #32
 8002512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e000      	b.n	800251c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800251a:	2302      	movs	r3, #2
  }
}
 800251c:	4618      	mov	r0, r3
 800251e:	3720      	adds	r7, #32
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002524:	b5b0      	push	{r4, r5, r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	4313      	orrs	r3, r2
 8002546:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4baf      	ldr	r3, [pc, #700]	; (800280c <UART_SetConfig+0x2e8>)
 8002550:	4013      	ands	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	69f9      	ldr	r1, [r7, #28]
 8002558:	430b      	orrs	r3, r1
 800255a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4aa4      	ldr	r2, [pc, #656]	; (8002810 <UART_SetConfig+0x2ec>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d004      	beq.n	800258c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	4313      	orrs	r3, r2
 800258a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002596:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	69f9      	ldr	r1, [r7, #28]
 80025a0:	430b      	orrs	r3, r1
 80025a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	f023 010f 	bic.w	r1, r3, #15
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a95      	ldr	r2, [pc, #596]	; (8002814 <UART_SetConfig+0x2f0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d120      	bne.n	8002606 <UART_SetConfig+0xe2>
 80025c4:	4b94      	ldr	r3, [pc, #592]	; (8002818 <UART_SetConfig+0x2f4>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d816      	bhi.n	8002600 <UART_SetConfig+0xdc>
 80025d2:	a201      	add	r2, pc, #4	; (adr r2, 80025d8 <UART_SetConfig+0xb4>)
 80025d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d8:	080025e9 	.word	0x080025e9
 80025dc:	080025f5 	.word	0x080025f5
 80025e0:	080025ef 	.word	0x080025ef
 80025e4:	080025fb 	.word	0x080025fb
 80025e8:	2301      	movs	r3, #1
 80025ea:	76fb      	strb	r3, [r7, #27]
 80025ec:	e0bc      	b.n	8002768 <UART_SetConfig+0x244>
 80025ee:	2302      	movs	r3, #2
 80025f0:	76fb      	strb	r3, [r7, #27]
 80025f2:	e0b9      	b.n	8002768 <UART_SetConfig+0x244>
 80025f4:	2304      	movs	r3, #4
 80025f6:	76fb      	strb	r3, [r7, #27]
 80025f8:	e0b6      	b.n	8002768 <UART_SetConfig+0x244>
 80025fa:	2308      	movs	r3, #8
 80025fc:	76fb      	strb	r3, [r7, #27]
 80025fe:	e0b3      	b.n	8002768 <UART_SetConfig+0x244>
 8002600:	2310      	movs	r3, #16
 8002602:	76fb      	strb	r3, [r7, #27]
 8002604:	e0b0      	b.n	8002768 <UART_SetConfig+0x244>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a84      	ldr	r2, [pc, #528]	; (800281c <UART_SetConfig+0x2f8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d132      	bne.n	8002676 <UART_SetConfig+0x152>
 8002610:	4b81      	ldr	r3, [pc, #516]	; (8002818 <UART_SetConfig+0x2f4>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d828      	bhi.n	8002670 <UART_SetConfig+0x14c>
 800261e:	a201      	add	r2, pc, #4	; (adr r2, 8002624 <UART_SetConfig+0x100>)
 8002620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002624:	08002659 	.word	0x08002659
 8002628:	08002671 	.word	0x08002671
 800262c:	08002671 	.word	0x08002671
 8002630:	08002671 	.word	0x08002671
 8002634:	08002665 	.word	0x08002665
 8002638:	08002671 	.word	0x08002671
 800263c:	08002671 	.word	0x08002671
 8002640:	08002671 	.word	0x08002671
 8002644:	0800265f 	.word	0x0800265f
 8002648:	08002671 	.word	0x08002671
 800264c:	08002671 	.word	0x08002671
 8002650:	08002671 	.word	0x08002671
 8002654:	0800266b 	.word	0x0800266b
 8002658:	2300      	movs	r3, #0
 800265a:	76fb      	strb	r3, [r7, #27]
 800265c:	e084      	b.n	8002768 <UART_SetConfig+0x244>
 800265e:	2302      	movs	r3, #2
 8002660:	76fb      	strb	r3, [r7, #27]
 8002662:	e081      	b.n	8002768 <UART_SetConfig+0x244>
 8002664:	2304      	movs	r3, #4
 8002666:	76fb      	strb	r3, [r7, #27]
 8002668:	e07e      	b.n	8002768 <UART_SetConfig+0x244>
 800266a:	2308      	movs	r3, #8
 800266c:	76fb      	strb	r3, [r7, #27]
 800266e:	e07b      	b.n	8002768 <UART_SetConfig+0x244>
 8002670:	2310      	movs	r3, #16
 8002672:	76fb      	strb	r3, [r7, #27]
 8002674:	e078      	b.n	8002768 <UART_SetConfig+0x244>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a69      	ldr	r2, [pc, #420]	; (8002820 <UART_SetConfig+0x2fc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d120      	bne.n	80026c2 <UART_SetConfig+0x19e>
 8002680:	4b65      	ldr	r3, [pc, #404]	; (8002818 <UART_SetConfig+0x2f4>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002686:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800268a:	2b30      	cmp	r3, #48	; 0x30
 800268c:	d013      	beq.n	80026b6 <UART_SetConfig+0x192>
 800268e:	2b30      	cmp	r3, #48	; 0x30
 8002690:	d814      	bhi.n	80026bc <UART_SetConfig+0x198>
 8002692:	2b20      	cmp	r3, #32
 8002694:	d009      	beq.n	80026aa <UART_SetConfig+0x186>
 8002696:	2b20      	cmp	r3, #32
 8002698:	d810      	bhi.n	80026bc <UART_SetConfig+0x198>
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <UART_SetConfig+0x180>
 800269e:	2b10      	cmp	r3, #16
 80026a0:	d006      	beq.n	80026b0 <UART_SetConfig+0x18c>
 80026a2:	e00b      	b.n	80026bc <UART_SetConfig+0x198>
 80026a4:	2300      	movs	r3, #0
 80026a6:	76fb      	strb	r3, [r7, #27]
 80026a8:	e05e      	b.n	8002768 <UART_SetConfig+0x244>
 80026aa:	2302      	movs	r3, #2
 80026ac:	76fb      	strb	r3, [r7, #27]
 80026ae:	e05b      	b.n	8002768 <UART_SetConfig+0x244>
 80026b0:	2304      	movs	r3, #4
 80026b2:	76fb      	strb	r3, [r7, #27]
 80026b4:	e058      	b.n	8002768 <UART_SetConfig+0x244>
 80026b6:	2308      	movs	r3, #8
 80026b8:	76fb      	strb	r3, [r7, #27]
 80026ba:	e055      	b.n	8002768 <UART_SetConfig+0x244>
 80026bc:	2310      	movs	r3, #16
 80026be:	76fb      	strb	r3, [r7, #27]
 80026c0:	e052      	b.n	8002768 <UART_SetConfig+0x244>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a57      	ldr	r2, [pc, #348]	; (8002824 <UART_SetConfig+0x300>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d120      	bne.n	800270e <UART_SetConfig+0x1ea>
 80026cc:	4b52      	ldr	r3, [pc, #328]	; (8002818 <UART_SetConfig+0x2f4>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80026d6:	2bc0      	cmp	r3, #192	; 0xc0
 80026d8:	d013      	beq.n	8002702 <UART_SetConfig+0x1de>
 80026da:	2bc0      	cmp	r3, #192	; 0xc0
 80026dc:	d814      	bhi.n	8002708 <UART_SetConfig+0x1e4>
 80026de:	2b80      	cmp	r3, #128	; 0x80
 80026e0:	d009      	beq.n	80026f6 <UART_SetConfig+0x1d2>
 80026e2:	2b80      	cmp	r3, #128	; 0x80
 80026e4:	d810      	bhi.n	8002708 <UART_SetConfig+0x1e4>
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <UART_SetConfig+0x1cc>
 80026ea:	2b40      	cmp	r3, #64	; 0x40
 80026ec:	d006      	beq.n	80026fc <UART_SetConfig+0x1d8>
 80026ee:	e00b      	b.n	8002708 <UART_SetConfig+0x1e4>
 80026f0:	2300      	movs	r3, #0
 80026f2:	76fb      	strb	r3, [r7, #27]
 80026f4:	e038      	b.n	8002768 <UART_SetConfig+0x244>
 80026f6:	2302      	movs	r3, #2
 80026f8:	76fb      	strb	r3, [r7, #27]
 80026fa:	e035      	b.n	8002768 <UART_SetConfig+0x244>
 80026fc:	2304      	movs	r3, #4
 80026fe:	76fb      	strb	r3, [r7, #27]
 8002700:	e032      	b.n	8002768 <UART_SetConfig+0x244>
 8002702:	2308      	movs	r3, #8
 8002704:	76fb      	strb	r3, [r7, #27]
 8002706:	e02f      	b.n	8002768 <UART_SetConfig+0x244>
 8002708:	2310      	movs	r3, #16
 800270a:	76fb      	strb	r3, [r7, #27]
 800270c:	e02c      	b.n	8002768 <UART_SetConfig+0x244>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a3f      	ldr	r2, [pc, #252]	; (8002810 <UART_SetConfig+0x2ec>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d125      	bne.n	8002764 <UART_SetConfig+0x240>
 8002718:	4b3f      	ldr	r3, [pc, #252]	; (8002818 <UART_SetConfig+0x2f4>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002722:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002726:	d017      	beq.n	8002758 <UART_SetConfig+0x234>
 8002728:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800272c:	d817      	bhi.n	800275e <UART_SetConfig+0x23a>
 800272e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002732:	d00b      	beq.n	800274c <UART_SetConfig+0x228>
 8002734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002738:	d811      	bhi.n	800275e <UART_SetConfig+0x23a>
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <UART_SetConfig+0x222>
 800273e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002742:	d006      	beq.n	8002752 <UART_SetConfig+0x22e>
 8002744:	e00b      	b.n	800275e <UART_SetConfig+0x23a>
 8002746:	2300      	movs	r3, #0
 8002748:	76fb      	strb	r3, [r7, #27]
 800274a:	e00d      	b.n	8002768 <UART_SetConfig+0x244>
 800274c:	2302      	movs	r3, #2
 800274e:	76fb      	strb	r3, [r7, #27]
 8002750:	e00a      	b.n	8002768 <UART_SetConfig+0x244>
 8002752:	2304      	movs	r3, #4
 8002754:	76fb      	strb	r3, [r7, #27]
 8002756:	e007      	b.n	8002768 <UART_SetConfig+0x244>
 8002758:	2308      	movs	r3, #8
 800275a:	76fb      	strb	r3, [r7, #27]
 800275c:	e004      	b.n	8002768 <UART_SetConfig+0x244>
 800275e:	2310      	movs	r3, #16
 8002760:	76fb      	strb	r3, [r7, #27]
 8002762:	e001      	b.n	8002768 <UART_SetConfig+0x244>
 8002764:	2310      	movs	r3, #16
 8002766:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a28      	ldr	r2, [pc, #160]	; (8002810 <UART_SetConfig+0x2ec>)
 800276e:	4293      	cmp	r3, r2
 8002770:	f040 809e 	bne.w	80028b0 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002774:	7efb      	ldrb	r3, [r7, #27]
 8002776:	2b08      	cmp	r3, #8
 8002778:	d823      	bhi.n	80027c2 <UART_SetConfig+0x29e>
 800277a:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <UART_SetConfig+0x25c>)
 800277c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002780:	080027a5 	.word	0x080027a5
 8002784:	080027c3 	.word	0x080027c3
 8002788:	080027ad 	.word	0x080027ad
 800278c:	080027c3 	.word	0x080027c3
 8002790:	080027b3 	.word	0x080027b3
 8002794:	080027c3 	.word	0x080027c3
 8002798:	080027c3 	.word	0x080027c3
 800279c:	080027c3 	.word	0x080027c3
 80027a0:	080027bb 	.word	0x080027bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027a4:	f7ff fb76 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 80027a8:	6178      	str	r0, [r7, #20]
        break;
 80027aa:	e00f      	b.n	80027cc <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027ac:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <UART_SetConfig+0x304>)
 80027ae:	617b      	str	r3, [r7, #20]
        break;
 80027b0:	e00c      	b.n	80027cc <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027b2:	f7ff fb01 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 80027b6:	6178      	str	r0, [r7, #20]
        break;
 80027b8:	e008      	b.n	80027cc <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027be:	617b      	str	r3, [r7, #20]
        break;
 80027c0:	e004      	b.n	80027cc <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	76bb      	strb	r3, [r7, #26]
        break;
 80027ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 812e 	beq.w	8002a30 <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	4a14      	ldr	r2, [pc, #80]	; (800282c <UART_SetConfig+0x308>)
 80027da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027de:	461a      	mov	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80027e6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4413      	add	r3, r2
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d305      	bcc.n	8002804 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	429a      	cmp	r2, r3
 8002802:	d915      	bls.n	8002830 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	76bb      	strb	r3, [r7, #26]
 8002808:	e112      	b.n	8002a30 <UART_SetConfig+0x50c>
 800280a:	bf00      	nop
 800280c:	cfff69f3 	.word	0xcfff69f3
 8002810:	40008000 	.word	0x40008000
 8002814:	40013800 	.word	0x40013800
 8002818:	40021000 	.word	0x40021000
 800281c:	40004400 	.word	0x40004400
 8002820:	40004800 	.word	0x40004800
 8002824:	40004c00 	.word	0x40004c00
 8002828:	00f42400 	.word	0x00f42400
 800282c:	08004264 	.word	0x08004264
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	4618      	mov	r0, r3
 8002834:	f04f 0100 	mov.w	r1, #0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	4a86      	ldr	r2, [pc, #536]	; (8002a58 <UART_SetConfig+0x534>)
 800283e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002842:	b29a      	uxth	r2, r3
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	f7fd fd3a 	bl	80002c0 <__aeabi_uldivmod>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	020b      	lsls	r3, r1, #8
 800285e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002862:	0202      	lsls	r2, r0, #8
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	6849      	ldr	r1, [r1, #4]
 8002868:	0849      	lsrs	r1, r1, #1
 800286a:	4608      	mov	r0, r1
 800286c:	f04f 0100 	mov.w	r1, #0
 8002870:	1814      	adds	r4, r2, r0
 8002872:	eb43 0501 	adc.w	r5, r3, r1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	461a      	mov	r2, r3
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	4620      	mov	r0, r4
 8002882:	4629      	mov	r1, r5
 8002884:	f7fd fd1c 	bl	80002c0 <__aeabi_uldivmod>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4613      	mov	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002896:	d308      	bcc.n	80028aa <UART_SetConfig+0x386>
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800289e:	d204      	bcs.n	80028aa <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	e0c2      	b.n	8002a30 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	76bb      	strb	r3, [r7, #26]
 80028ae:	e0bf      	b.n	8002a30 <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b8:	d165      	bne.n	8002986 <UART_SetConfig+0x462>
  {
    switch (clocksource)
 80028ba:	7efb      	ldrb	r3, [r7, #27]
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d828      	bhi.n	8002912 <UART_SetConfig+0x3ee>
 80028c0:	a201      	add	r2, pc, #4	; (adr r2, 80028c8 <UART_SetConfig+0x3a4>)
 80028c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c6:	bf00      	nop
 80028c8:	080028ed 	.word	0x080028ed
 80028cc:	080028f5 	.word	0x080028f5
 80028d0:	080028fd 	.word	0x080028fd
 80028d4:	08002913 	.word	0x08002913
 80028d8:	08002903 	.word	0x08002903
 80028dc:	08002913 	.word	0x08002913
 80028e0:	08002913 	.word	0x08002913
 80028e4:	08002913 	.word	0x08002913
 80028e8:	0800290b 	.word	0x0800290b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028ec:	f7ff fad2 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 80028f0:	6178      	str	r0, [r7, #20]
        break;
 80028f2:	e013      	b.n	800291c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028f4:	f7ff fae4 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 80028f8:	6178      	str	r0, [r7, #20]
        break;
 80028fa:	e00f      	b.n	800291c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028fc:	4b57      	ldr	r3, [pc, #348]	; (8002a5c <UART_SetConfig+0x538>)
 80028fe:	617b      	str	r3, [r7, #20]
        break;
 8002900:	e00c      	b.n	800291c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002902:	f7ff fa59 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8002906:	6178      	str	r0, [r7, #20]
        break;
 8002908:	e008      	b.n	800291c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800290a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800290e:	617b      	str	r3, [r7, #20]
        break;
 8002910:	e004      	b.n	800291c <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	76bb      	strb	r3, [r7, #26]
        break;
 800291a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8086 	beq.w	8002a30 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	4a4b      	ldr	r2, [pc, #300]	; (8002a58 <UART_SetConfig+0x534>)
 800292a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800292e:	461a      	mov	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	fbb3 f3f2 	udiv	r3, r3, r2
 8002936:	005a      	lsls	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	085b      	lsrs	r3, r3, #1
 800293e:	441a      	add	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	b29b      	uxth	r3, r3
 800294a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	2b0f      	cmp	r3, #15
 8002950:	d916      	bls.n	8002980 <UART_SetConfig+0x45c>
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002958:	d212      	bcs.n	8002980 <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	b29b      	uxth	r3, r3
 800295e:	f023 030f 	bic.w	r3, r3, #15
 8002962:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	085b      	lsrs	r3, r3, #1
 8002968:	b29b      	uxth	r3, r3
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	b29a      	uxth	r2, r3
 8002970:	89fb      	ldrh	r3, [r7, #14]
 8002972:	4313      	orrs	r3, r2
 8002974:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	89fa      	ldrh	r2, [r7, #14]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	e057      	b.n	8002a30 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	76bb      	strb	r3, [r7, #26]
 8002984:	e054      	b.n	8002a30 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002986:	7efb      	ldrb	r3, [r7, #27]
 8002988:	2b08      	cmp	r3, #8
 800298a:	d828      	bhi.n	80029de <UART_SetConfig+0x4ba>
 800298c:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <UART_SetConfig+0x470>)
 800298e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002992:	bf00      	nop
 8002994:	080029b9 	.word	0x080029b9
 8002998:	080029c1 	.word	0x080029c1
 800299c:	080029c9 	.word	0x080029c9
 80029a0:	080029df 	.word	0x080029df
 80029a4:	080029cf 	.word	0x080029cf
 80029a8:	080029df 	.word	0x080029df
 80029ac:	080029df 	.word	0x080029df
 80029b0:	080029df 	.word	0x080029df
 80029b4:	080029d7 	.word	0x080029d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029b8:	f7ff fa6c 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 80029bc:	6178      	str	r0, [r7, #20]
        break;
 80029be:	e013      	b.n	80029e8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029c0:	f7ff fa7e 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 80029c4:	6178      	str	r0, [r7, #20]
        break;
 80029c6:	e00f      	b.n	80029e8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029c8:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <UART_SetConfig+0x538>)
 80029ca:	617b      	str	r3, [r7, #20]
        break;
 80029cc:	e00c      	b.n	80029e8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029ce:	f7ff f9f3 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 80029d2:	6178      	str	r0, [r7, #20]
        break;
 80029d4:	e008      	b.n	80029e8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029da:	617b      	str	r3, [r7, #20]
        break;
 80029dc:	e004      	b.n	80029e8 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	76bb      	strb	r3, [r7, #26]
        break;
 80029e6:	bf00      	nop
    }

    if (pclk != 0U)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d020      	beq.n	8002a30 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	4a19      	ldr	r2, [pc, #100]	; (8002a58 <UART_SetConfig+0x534>)
 80029f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029f8:	461a      	mov	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	441a      	add	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	2b0f      	cmp	r3, #15
 8002a18:	d908      	bls.n	8002a2c <UART_SetConfig+0x508>
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a20:	d204      	bcs.n	8002a2c <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	e001      	b.n	8002a30 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002a4c:	7ebb      	ldrb	r3, [r7, #26]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bdb0      	pop	{r4, r5, r7, pc}
 8002a56:	bf00      	nop
 8002a58:	08004264 	.word	0x08004264
 8002a5c:	00f42400 	.word	0x00f42400

08002a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01a      	beq.n	8002b76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b5e:	d10a      	bne.n	8002b76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	605a      	str	r2, [r3, #4]
  }
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bb4:	f7fe f876 	bl	8000ca4 <HAL_GetTick>
 8002bb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d10e      	bne.n	8002be6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f82f 	bl	8002c3a <UART_WaitOnFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e025      	b.n	8002c32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d10e      	bne.n	8002c12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f819 	bl	8002c3a <UART_WaitOnFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e00f      	b.n	8002c32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c4a:	e062      	b.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c52:	d05e      	beq.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c54:	f7fe f826 	bl	8000ca4 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d302      	bcc.n	8002c6a <UART_WaitOnFlagUntilTimeout+0x30>
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d11d      	bne.n	8002ca6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0201 	bic.w	r2, r2, #1
 8002c88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e045      	b.n	8002d32 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d02e      	beq.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cc2:	d126      	bne.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ccc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002cdc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e00f      	b.n	8002d32 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69da      	ldr	r2, [r3, #28]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d08d      	beq.n	8002c4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_UARTEx_DisableFifoMode+0x16>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e027      	b.n	8002da0 <HAL_UARTEx_DisableFifoMode+0x66>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2224      	movs	r2, #36	; 0x24
 8002d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002d7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e02d      	b.n	8002e20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0201 	bic.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f84f 	bl	8002ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e02d      	b.n	8002e9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2224      	movs	r2, #36	; 0x24
 8002e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f811 	bl	8002ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d108      	bne.n	8002ec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002ec4:	e031      	b.n	8002f2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002eca:	2308      	movs	r3, #8
 8002ecc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	0e5b      	lsrs	r3, r3, #25
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	0f5b      	lsrs	r3, r3, #29
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002eee:	7bbb      	ldrb	r3, [r7, #14]
 8002ef0:	7b3a      	ldrb	r2, [r7, #12]
 8002ef2:	4911      	ldr	r1, [pc, #68]	; (8002f38 <UARTEx_SetNbDataToProcess+0x94>)
 8002ef4:	5c8a      	ldrb	r2, [r1, r2]
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002efa:	7b3a      	ldrb	r2, [r7, #12]
 8002efc:	490f      	ldr	r1, [pc, #60]	; (8002f3c <UARTEx_SetNbDataToProcess+0x98>)
 8002efe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f00:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	7b7a      	ldrb	r2, [r7, #13]
 8002f10:	4909      	ldr	r1, [pc, #36]	; (8002f38 <UARTEx_SetNbDataToProcess+0x94>)
 8002f12:	5c8a      	ldrb	r2, [r1, r2]
 8002f14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002f18:	7b7a      	ldrb	r2, [r7, #13]
 8002f1a:	4908      	ldr	r1, [pc, #32]	; (8002f3c <UARTEx_SetNbDataToProcess+0x98>)
 8002f1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002f2a:	bf00      	nop
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	0800427c 	.word	0x0800427c
 8002f3c:	08004284 	.word	0x08004284

08002f40 <mu_stddemo_init>:
static mu_stddemo_button_cb s_button_cb;

// =============================================================================
// Public code

void mu_stddemo_init(mu_stddemo_button_cb button_cb) {
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  s_button_cb = button_cb;
 8002f48:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <mu_stddemo_init+0x1c>)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6013      	str	r3, [r2, #0]
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000090 	.word	0x20000090

08002f60 <mu_stddemo_led_set>:
#define mu_stddemo_printf(fmt, ...) printf(fmt, ##__VA_ARGS__)

/**
 * @brief Set the demo LED on or off.
 */
void mu_stddemo_led_set(bool on) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	2120      	movs	r1, #32
 8002f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f74:	f7fe f94c 	bl	8001210 <HAL_GPIO_WritePin>
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <mu_stddemo_button_is_pressed>:
 * @brief Return true if the demo button is currently pressed.
 *
 * Note that the state of the button can change between the time the button
 * callback is triggered and the button state is read.
 */
bool mu_stddemo_button_is_pressed(void) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
      return HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET;
 8002f84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f88:	4805      	ldr	r0, [pc, #20]	; (8002fa0 <mu_stddemo_button_is_pressed+0x20>)
 8002f8a:	f7fe f929 	bl	80011e0 <HAL_GPIO_ReadPin>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	48000800 	.word	0x48000800

08002fa4 <mu_stddemo_sleep_until>:

/**
 * @brief Put the processor into low power mode until the Real Time Clock matches `at`
 * or until an interrupt occurs, whichever comes first.
 */
void mu_stddemo_sleep_until(mu_time_t at) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  while (mu_time_precedes(mu_time_now(), at)) {
 8002fac:	bf00      	nop
 8002fae:	f000 f827 	bl	8003000 <mu_time_now>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f837 	bl	800302a <mu_time_precedes>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f5      	bne.n	8002fae <mu_stddemo_sleep_until+0xa>
    // buzz
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_GPIO_EXTI_Callback>:
/**
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002fcc:	b590      	push	{r4, r7, lr}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	80fb      	strh	r3, [r7, #6]
  if ((s_button_cb != NULL) && (GPIO_Pin == USER_BUTTON_Pin)) {
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <HAL_GPIO_EXTI_Callback+0x30>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_GPIO_EXTI_Callback+0x28>
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe4:	d106      	bne.n	8002ff4 <HAL_GPIO_EXTI_Callback+0x28>
    s_button_cb(mu_stddemo_button_is_pressed());
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_GPIO_EXTI_Callback+0x30>)
 8002fe8:	681c      	ldr	r4, [r3, #0]
 8002fea:	f7ff ffc9 	bl	8002f80 <mu_stddemo_button_is_pressed>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	47a0      	blx	r4
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd90      	pop	{r4, r7, pc}
 8002ffc:	20000090 	.word	0x20000090

08003000 <mu_time_now>:
/**
 * @brief Get the current system time.
 *
 * @return A value representing the current time.
 */
mu_time_t mu_time_now() {
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8003004:	f7fd fe4e 	bl	8000ca4 <HAL_GetTick>
 8003008:	4603      	mov	r3, r0
}
 800300a:	4618      	mov	r0, r3
 800300c:	bd80      	pop	{r7, pc}

0800300e <mu_time_offset>:
 *
 * @param t1 a time object
 * @param dt a duration object
 * @return t1 offset by dt
 */
mu_time_t mu_time_offset(mu_time_t t1, mu_time_dt dt) {
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	6039      	str	r1, [r7, #0]
  return t1 + dt;
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4413      	add	r3, r2
}
 800301e:	4618      	mov	r0, r3
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <mu_time_precedes>:
 *
 * @param t1 A time object
 * @param t2 A time object
 * @return true if t1 is strictly before t2, false otherwise.
 */
bool mu_time_precedes(mu_time_t t1, mu_time_t t2) {
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	6039      	str	r1, [r7, #0]
  return t1 < t2;
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	bf34      	ite	cc
 800303c:	2301      	movcc	r3, #1
 800303e:	2300      	movcs	r3, #0
 8003040:	b2db      	uxtb	r3, r3
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <test_stddemo_init>:
static bool s_led_state;

// =============================================================================
// Public code

void test_stddemo_init(void) {
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
	mu_stddemo_init(button_cb);
 8003054:	481a      	ldr	r0, [pc, #104]	; (80030c0 <test_stddemo_init+0x70>)
 8003056:	f7ff ff73 	bl	8002f40 <mu_stddemo_init>

	printf("\n\rmulib stddemo test v%s.\n", VERSION);
 800305a:	491a      	ldr	r1, [pc, #104]	; (80030c4 <test_stddemo_init+0x74>)
 800305c:	481a      	ldr	r0, [pc, #104]	; (80030c8 <test_stddemo_init+0x78>)
 800305e:	f000 f8d3 	bl	8003208 <iprintf>
	s_button_was_pressed = false;
 8003062:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <test_stddemo_init+0x7c>)
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
	s_led_state = false;
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <test_stddemo_init+0x80>)
 800306a:	2200      	movs	r2, #0
 800306c:	701a      	strb	r2, [r3, #0]

	set_led(true);
 800306e:	2001      	movs	r0, #1
 8003070:	f000 f87a 	bl	8003168 <set_led>
	printf("LED should be on for 5 seconds:\n");
 8003074:	4817      	ldr	r0, [pc, #92]	; (80030d4 <test_stddemo_init+0x84>)
 8003076:	f000 f94d 	bl	8003314 <puts>
	mu_stddemo_sleep_until(mu_time_offset(mu_time_now(), MU_TIME_MS_TO_DURATION(5000)));
 800307a:	f7ff ffc1 	bl	8003000 <mu_time_now>
 800307e:	4603      	mov	r3, r0
 8003080:	f241 3188 	movw	r1, #5000	; 0x1388
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ffc2 	bl	800300e <mu_time_offset>
 800308a:	4603      	mov	r3, r0
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff89 	bl	8002fa4 <mu_stddemo_sleep_until>

	set_led(false);
 8003092:	2000      	movs	r0, #0
 8003094:	f000 f868 	bl	8003168 <set_led>
	printf("LED should be off for 5 seconds:\n");
 8003098:	480f      	ldr	r0, [pc, #60]	; (80030d8 <test_stddemo_init+0x88>)
 800309a:	f000 f93b 	bl	8003314 <puts>
	mu_stddemo_sleep_until(mu_time_offset(mu_time_now(), MU_TIME_MS_TO_DURATION(5000)));
 800309e:	f7ff ffaf 	bl	8003000 <mu_time_now>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f241 3188 	movw	r1, #5000	; 0x1388
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ffb0 	bl	800300e <mu_time_offset>
 80030ae:	4603      	mov	r3, r0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff77 	bl	8002fa4 <mu_stddemo_sleep_until>

	printf("Press button to toggle LED:\n");
 80030b6:	4809      	ldr	r0, [pc, #36]	; (80030dc <test_stddemo_init+0x8c>)
 80030b8:	f000 f92c 	bl	8003314 <puts>
}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	08003149 	.word	0x08003149
 80030c4:	080041b8 	.word	0x080041b8
 80030c8:	080041bc 	.word	0x080041bc
 80030cc:	20000094 	.word	0x20000094
 80030d0:	20000095 	.word	0x20000095
 80030d4:	080041d8 	.word	0x080041d8
 80030d8:	080041f8 	.word	0x080041f8
 80030dc:	0800421c 	.word	0x0800421c

080030e0 <test_stddemo_step>:

void test_stddemo_step(void) {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
	if (s_button_was_pressed == true) {
 80030e6:	4b14      	ldr	r3, [pc, #80]	; (8003138 <test_stddemo_step+0x58>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d020      	beq.n	8003130 <test_stddemo_step+0x50>
		s_button_was_pressed = false;
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <test_stddemo_step+0x58>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]
		bool led_state = !get_led();
 80030f4:	f000 f84a 	bl	800318c <get_led>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	bf14      	ite	ne
 80030fe:	2301      	movne	r3, #1
 8003100:	2300      	moveq	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f083 0301 	eor.w	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	71fb      	strb	r3, [r7, #7]
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	71fb      	strb	r3, [r7, #7]
		set_led(led_state);
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f826 	bl	8003168 <set_led>
		printf("LED is %s\n", led_state ? "on" : "off");
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <test_stddemo_step+0x46>
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <test_stddemo_step+0x5c>)
 8003124:	e000      	b.n	8003128 <test_stddemo_step+0x48>
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <test_stddemo_step+0x60>)
 8003128:	4619      	mov	r1, r3
 800312a:	4806      	ldr	r0, [pc, #24]	; (8003144 <test_stddemo_step+0x64>)
 800312c:	f000 f86c 	bl	8003208 <iprintf>
	}
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000094 	.word	0x20000094
 800313c:	08004238 	.word	0x08004238
 8003140:	0800423c 	.word	0x0800423c
 8003144:	08004240 	.word	0x08004240

08003148 <button_cb>:

// =============================================================================
// Local (private) code

static void button_cb(bool button_is_pressed) {
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
	(void)button_is_pressed;
	s_button_was_pressed = true;
 8003152:	4b04      	ldr	r3, [pc, #16]	; (8003164 <button_cb+0x1c>)
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	20000094 	.word	0x20000094

08003168 <set_led>:


static void set_led(bool on) {
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	71fb      	strb	r3, [r7, #7]
	s_led_state = on;
 8003172:	4a05      	ldr	r2, [pc, #20]	; (8003188 <set_led+0x20>)
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	7013      	strb	r3, [r2, #0]
	mu_stddemo_led_set(on);
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fef0 	bl	8002f60 <mu_stddemo_led_set>
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000095 	.word	0x20000095

0800318c <get_led>:

static bool get_led(void) {
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
	return s_led_state;
 8003190:	4b03      	ldr	r3, [pc, #12]	; (80031a0 <get_led+0x14>)
 8003192:	781b      	ldrb	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000095 	.word	0x20000095

080031a4 <__errno>:
 80031a4:	4b01      	ldr	r3, [pc, #4]	; (80031ac <__errno+0x8>)
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	2000000c 	.word	0x2000000c

080031b0 <__libc_init_array>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	4d0d      	ldr	r5, [pc, #52]	; (80031e8 <__libc_init_array+0x38>)
 80031b4:	4c0d      	ldr	r4, [pc, #52]	; (80031ec <__libc_init_array+0x3c>)
 80031b6:	1b64      	subs	r4, r4, r5
 80031b8:	10a4      	asrs	r4, r4, #2
 80031ba:	2600      	movs	r6, #0
 80031bc:	42a6      	cmp	r6, r4
 80031be:	d109      	bne.n	80031d4 <__libc_init_array+0x24>
 80031c0:	4d0b      	ldr	r5, [pc, #44]	; (80031f0 <__libc_init_array+0x40>)
 80031c2:	4c0c      	ldr	r4, [pc, #48]	; (80031f4 <__libc_init_array+0x44>)
 80031c4:	f000 ffec 	bl	80041a0 <_init>
 80031c8:	1b64      	subs	r4, r4, r5
 80031ca:	10a4      	asrs	r4, r4, #2
 80031cc:	2600      	movs	r6, #0
 80031ce:	42a6      	cmp	r6, r4
 80031d0:	d105      	bne.n	80031de <__libc_init_array+0x2e>
 80031d2:	bd70      	pop	{r4, r5, r6, pc}
 80031d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d8:	4798      	blx	r3
 80031da:	3601      	adds	r6, #1
 80031dc:	e7ee      	b.n	80031bc <__libc_init_array+0xc>
 80031de:	f855 3b04 	ldr.w	r3, [r5], #4
 80031e2:	4798      	blx	r3
 80031e4:	3601      	adds	r6, #1
 80031e6:	e7f2      	b.n	80031ce <__libc_init_array+0x1e>
 80031e8:	0800432c 	.word	0x0800432c
 80031ec:	0800432c 	.word	0x0800432c
 80031f0:	0800432c 	.word	0x0800432c
 80031f4:	08004330 	.word	0x08004330

080031f8 <memset>:
 80031f8:	4402      	add	r2, r0
 80031fa:	4603      	mov	r3, r0
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d100      	bne.n	8003202 <memset+0xa>
 8003200:	4770      	bx	lr
 8003202:	f803 1b01 	strb.w	r1, [r3], #1
 8003206:	e7f9      	b.n	80031fc <memset+0x4>

08003208 <iprintf>:
 8003208:	b40f      	push	{r0, r1, r2, r3}
 800320a:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <iprintf+0x2c>)
 800320c:	b513      	push	{r0, r1, r4, lr}
 800320e:	681c      	ldr	r4, [r3, #0]
 8003210:	b124      	cbz	r4, 800321c <iprintf+0x14>
 8003212:	69a3      	ldr	r3, [r4, #24]
 8003214:	b913      	cbnz	r3, 800321c <iprintf+0x14>
 8003216:	4620      	mov	r0, r4
 8003218:	f000 fa5e 	bl	80036d8 <__sinit>
 800321c:	ab05      	add	r3, sp, #20
 800321e:	9a04      	ldr	r2, [sp, #16]
 8003220:	68a1      	ldr	r1, [r4, #8]
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	4620      	mov	r0, r4
 8003226:	f000 fc2f 	bl	8003a88 <_vfiprintf_r>
 800322a:	b002      	add	sp, #8
 800322c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003230:	b004      	add	sp, #16
 8003232:	4770      	bx	lr
 8003234:	2000000c 	.word	0x2000000c

08003238 <_puts_r>:
 8003238:	b570      	push	{r4, r5, r6, lr}
 800323a:	460e      	mov	r6, r1
 800323c:	4605      	mov	r5, r0
 800323e:	b118      	cbz	r0, 8003248 <_puts_r+0x10>
 8003240:	6983      	ldr	r3, [r0, #24]
 8003242:	b90b      	cbnz	r3, 8003248 <_puts_r+0x10>
 8003244:	f000 fa48 	bl	80036d8 <__sinit>
 8003248:	69ab      	ldr	r3, [r5, #24]
 800324a:	68ac      	ldr	r4, [r5, #8]
 800324c:	b913      	cbnz	r3, 8003254 <_puts_r+0x1c>
 800324e:	4628      	mov	r0, r5
 8003250:	f000 fa42 	bl	80036d8 <__sinit>
 8003254:	4b2c      	ldr	r3, [pc, #176]	; (8003308 <_puts_r+0xd0>)
 8003256:	429c      	cmp	r4, r3
 8003258:	d120      	bne.n	800329c <_puts_r+0x64>
 800325a:	686c      	ldr	r4, [r5, #4]
 800325c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800325e:	07db      	lsls	r3, r3, #31
 8003260:	d405      	bmi.n	800326e <_puts_r+0x36>
 8003262:	89a3      	ldrh	r3, [r4, #12]
 8003264:	0598      	lsls	r0, r3, #22
 8003266:	d402      	bmi.n	800326e <_puts_r+0x36>
 8003268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800326a:	f000 fad3 	bl	8003814 <__retarget_lock_acquire_recursive>
 800326e:	89a3      	ldrh	r3, [r4, #12]
 8003270:	0719      	lsls	r1, r3, #28
 8003272:	d51d      	bpl.n	80032b0 <_puts_r+0x78>
 8003274:	6923      	ldr	r3, [r4, #16]
 8003276:	b1db      	cbz	r3, 80032b0 <_puts_r+0x78>
 8003278:	3e01      	subs	r6, #1
 800327a:	68a3      	ldr	r3, [r4, #8]
 800327c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003280:	3b01      	subs	r3, #1
 8003282:	60a3      	str	r3, [r4, #8]
 8003284:	bb39      	cbnz	r1, 80032d6 <_puts_r+0x9e>
 8003286:	2b00      	cmp	r3, #0
 8003288:	da38      	bge.n	80032fc <_puts_r+0xc4>
 800328a:	4622      	mov	r2, r4
 800328c:	210a      	movs	r1, #10
 800328e:	4628      	mov	r0, r5
 8003290:	f000 f848 	bl	8003324 <__swbuf_r>
 8003294:	3001      	adds	r0, #1
 8003296:	d011      	beq.n	80032bc <_puts_r+0x84>
 8003298:	250a      	movs	r5, #10
 800329a:	e011      	b.n	80032c0 <_puts_r+0x88>
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <_puts_r+0xd4>)
 800329e:	429c      	cmp	r4, r3
 80032a0:	d101      	bne.n	80032a6 <_puts_r+0x6e>
 80032a2:	68ac      	ldr	r4, [r5, #8]
 80032a4:	e7da      	b.n	800325c <_puts_r+0x24>
 80032a6:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <_puts_r+0xd8>)
 80032a8:	429c      	cmp	r4, r3
 80032aa:	bf08      	it	eq
 80032ac:	68ec      	ldreq	r4, [r5, #12]
 80032ae:	e7d5      	b.n	800325c <_puts_r+0x24>
 80032b0:	4621      	mov	r1, r4
 80032b2:	4628      	mov	r0, r5
 80032b4:	f000 f888 	bl	80033c8 <__swsetup_r>
 80032b8:	2800      	cmp	r0, #0
 80032ba:	d0dd      	beq.n	8003278 <_puts_r+0x40>
 80032bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80032c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032c2:	07da      	lsls	r2, r3, #31
 80032c4:	d405      	bmi.n	80032d2 <_puts_r+0x9a>
 80032c6:	89a3      	ldrh	r3, [r4, #12]
 80032c8:	059b      	lsls	r3, r3, #22
 80032ca:	d402      	bmi.n	80032d2 <_puts_r+0x9a>
 80032cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032ce:	f000 faa2 	bl	8003816 <__retarget_lock_release_recursive>
 80032d2:	4628      	mov	r0, r5
 80032d4:	bd70      	pop	{r4, r5, r6, pc}
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	da04      	bge.n	80032e4 <_puts_r+0xac>
 80032da:	69a2      	ldr	r2, [r4, #24]
 80032dc:	429a      	cmp	r2, r3
 80032de:	dc06      	bgt.n	80032ee <_puts_r+0xb6>
 80032e0:	290a      	cmp	r1, #10
 80032e2:	d004      	beq.n	80032ee <_puts_r+0xb6>
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	6022      	str	r2, [r4, #0]
 80032ea:	7019      	strb	r1, [r3, #0]
 80032ec:	e7c5      	b.n	800327a <_puts_r+0x42>
 80032ee:	4622      	mov	r2, r4
 80032f0:	4628      	mov	r0, r5
 80032f2:	f000 f817 	bl	8003324 <__swbuf_r>
 80032f6:	3001      	adds	r0, #1
 80032f8:	d1bf      	bne.n	800327a <_puts_r+0x42>
 80032fa:	e7df      	b.n	80032bc <_puts_r+0x84>
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	250a      	movs	r5, #10
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	6022      	str	r2, [r4, #0]
 8003304:	701d      	strb	r5, [r3, #0]
 8003306:	e7db      	b.n	80032c0 <_puts_r+0x88>
 8003308:	080042b0 	.word	0x080042b0
 800330c:	080042d0 	.word	0x080042d0
 8003310:	08004290 	.word	0x08004290

08003314 <puts>:
 8003314:	4b02      	ldr	r3, [pc, #8]	; (8003320 <puts+0xc>)
 8003316:	4601      	mov	r1, r0
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	f7ff bf8d 	b.w	8003238 <_puts_r>
 800331e:	bf00      	nop
 8003320:	2000000c 	.word	0x2000000c

08003324 <__swbuf_r>:
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003326:	460e      	mov	r6, r1
 8003328:	4614      	mov	r4, r2
 800332a:	4605      	mov	r5, r0
 800332c:	b118      	cbz	r0, 8003336 <__swbuf_r+0x12>
 800332e:	6983      	ldr	r3, [r0, #24]
 8003330:	b90b      	cbnz	r3, 8003336 <__swbuf_r+0x12>
 8003332:	f000 f9d1 	bl	80036d8 <__sinit>
 8003336:	4b21      	ldr	r3, [pc, #132]	; (80033bc <__swbuf_r+0x98>)
 8003338:	429c      	cmp	r4, r3
 800333a:	d12b      	bne.n	8003394 <__swbuf_r+0x70>
 800333c:	686c      	ldr	r4, [r5, #4]
 800333e:	69a3      	ldr	r3, [r4, #24]
 8003340:	60a3      	str	r3, [r4, #8]
 8003342:	89a3      	ldrh	r3, [r4, #12]
 8003344:	071a      	lsls	r2, r3, #28
 8003346:	d52f      	bpl.n	80033a8 <__swbuf_r+0x84>
 8003348:	6923      	ldr	r3, [r4, #16]
 800334a:	b36b      	cbz	r3, 80033a8 <__swbuf_r+0x84>
 800334c:	6923      	ldr	r3, [r4, #16]
 800334e:	6820      	ldr	r0, [r4, #0]
 8003350:	1ac0      	subs	r0, r0, r3
 8003352:	6963      	ldr	r3, [r4, #20]
 8003354:	b2f6      	uxtb	r6, r6
 8003356:	4283      	cmp	r3, r0
 8003358:	4637      	mov	r7, r6
 800335a:	dc04      	bgt.n	8003366 <__swbuf_r+0x42>
 800335c:	4621      	mov	r1, r4
 800335e:	4628      	mov	r0, r5
 8003360:	f000 f926 	bl	80035b0 <_fflush_r>
 8003364:	bb30      	cbnz	r0, 80033b4 <__swbuf_r+0x90>
 8003366:	68a3      	ldr	r3, [r4, #8]
 8003368:	3b01      	subs	r3, #1
 800336a:	60a3      	str	r3, [r4, #8]
 800336c:	6823      	ldr	r3, [r4, #0]
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	6022      	str	r2, [r4, #0]
 8003372:	701e      	strb	r6, [r3, #0]
 8003374:	6963      	ldr	r3, [r4, #20]
 8003376:	3001      	adds	r0, #1
 8003378:	4283      	cmp	r3, r0
 800337a:	d004      	beq.n	8003386 <__swbuf_r+0x62>
 800337c:	89a3      	ldrh	r3, [r4, #12]
 800337e:	07db      	lsls	r3, r3, #31
 8003380:	d506      	bpl.n	8003390 <__swbuf_r+0x6c>
 8003382:	2e0a      	cmp	r6, #10
 8003384:	d104      	bne.n	8003390 <__swbuf_r+0x6c>
 8003386:	4621      	mov	r1, r4
 8003388:	4628      	mov	r0, r5
 800338a:	f000 f911 	bl	80035b0 <_fflush_r>
 800338e:	b988      	cbnz	r0, 80033b4 <__swbuf_r+0x90>
 8003390:	4638      	mov	r0, r7
 8003392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <__swbuf_r+0x9c>)
 8003396:	429c      	cmp	r4, r3
 8003398:	d101      	bne.n	800339e <__swbuf_r+0x7a>
 800339a:	68ac      	ldr	r4, [r5, #8]
 800339c:	e7cf      	b.n	800333e <__swbuf_r+0x1a>
 800339e:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <__swbuf_r+0xa0>)
 80033a0:	429c      	cmp	r4, r3
 80033a2:	bf08      	it	eq
 80033a4:	68ec      	ldreq	r4, [r5, #12]
 80033a6:	e7ca      	b.n	800333e <__swbuf_r+0x1a>
 80033a8:	4621      	mov	r1, r4
 80033aa:	4628      	mov	r0, r5
 80033ac:	f000 f80c 	bl	80033c8 <__swsetup_r>
 80033b0:	2800      	cmp	r0, #0
 80033b2:	d0cb      	beq.n	800334c <__swbuf_r+0x28>
 80033b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80033b8:	e7ea      	b.n	8003390 <__swbuf_r+0x6c>
 80033ba:	bf00      	nop
 80033bc:	080042b0 	.word	0x080042b0
 80033c0:	080042d0 	.word	0x080042d0
 80033c4:	08004290 	.word	0x08004290

080033c8 <__swsetup_r>:
 80033c8:	4b32      	ldr	r3, [pc, #200]	; (8003494 <__swsetup_r+0xcc>)
 80033ca:	b570      	push	{r4, r5, r6, lr}
 80033cc:	681d      	ldr	r5, [r3, #0]
 80033ce:	4606      	mov	r6, r0
 80033d0:	460c      	mov	r4, r1
 80033d2:	b125      	cbz	r5, 80033de <__swsetup_r+0x16>
 80033d4:	69ab      	ldr	r3, [r5, #24]
 80033d6:	b913      	cbnz	r3, 80033de <__swsetup_r+0x16>
 80033d8:	4628      	mov	r0, r5
 80033da:	f000 f97d 	bl	80036d8 <__sinit>
 80033de:	4b2e      	ldr	r3, [pc, #184]	; (8003498 <__swsetup_r+0xd0>)
 80033e0:	429c      	cmp	r4, r3
 80033e2:	d10f      	bne.n	8003404 <__swsetup_r+0x3c>
 80033e4:	686c      	ldr	r4, [r5, #4]
 80033e6:	89a3      	ldrh	r3, [r4, #12]
 80033e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033ec:	0719      	lsls	r1, r3, #28
 80033ee:	d42c      	bmi.n	800344a <__swsetup_r+0x82>
 80033f0:	06dd      	lsls	r5, r3, #27
 80033f2:	d411      	bmi.n	8003418 <__swsetup_r+0x50>
 80033f4:	2309      	movs	r3, #9
 80033f6:	6033      	str	r3, [r6, #0]
 80033f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80033fc:	81a3      	strh	r3, [r4, #12]
 80033fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003402:	e03e      	b.n	8003482 <__swsetup_r+0xba>
 8003404:	4b25      	ldr	r3, [pc, #148]	; (800349c <__swsetup_r+0xd4>)
 8003406:	429c      	cmp	r4, r3
 8003408:	d101      	bne.n	800340e <__swsetup_r+0x46>
 800340a:	68ac      	ldr	r4, [r5, #8]
 800340c:	e7eb      	b.n	80033e6 <__swsetup_r+0x1e>
 800340e:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <__swsetup_r+0xd8>)
 8003410:	429c      	cmp	r4, r3
 8003412:	bf08      	it	eq
 8003414:	68ec      	ldreq	r4, [r5, #12]
 8003416:	e7e6      	b.n	80033e6 <__swsetup_r+0x1e>
 8003418:	0758      	lsls	r0, r3, #29
 800341a:	d512      	bpl.n	8003442 <__swsetup_r+0x7a>
 800341c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800341e:	b141      	cbz	r1, 8003432 <__swsetup_r+0x6a>
 8003420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003424:	4299      	cmp	r1, r3
 8003426:	d002      	beq.n	800342e <__swsetup_r+0x66>
 8003428:	4630      	mov	r0, r6
 800342a:	f000 fa59 	bl	80038e0 <_free_r>
 800342e:	2300      	movs	r3, #0
 8003430:	6363      	str	r3, [r4, #52]	; 0x34
 8003432:	89a3      	ldrh	r3, [r4, #12]
 8003434:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003438:	81a3      	strh	r3, [r4, #12]
 800343a:	2300      	movs	r3, #0
 800343c:	6063      	str	r3, [r4, #4]
 800343e:	6923      	ldr	r3, [r4, #16]
 8003440:	6023      	str	r3, [r4, #0]
 8003442:	89a3      	ldrh	r3, [r4, #12]
 8003444:	f043 0308 	orr.w	r3, r3, #8
 8003448:	81a3      	strh	r3, [r4, #12]
 800344a:	6923      	ldr	r3, [r4, #16]
 800344c:	b94b      	cbnz	r3, 8003462 <__swsetup_r+0x9a>
 800344e:	89a3      	ldrh	r3, [r4, #12]
 8003450:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003458:	d003      	beq.n	8003462 <__swsetup_r+0x9a>
 800345a:	4621      	mov	r1, r4
 800345c:	4630      	mov	r0, r6
 800345e:	f000 f9ff 	bl	8003860 <__smakebuf_r>
 8003462:	89a0      	ldrh	r0, [r4, #12]
 8003464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003468:	f010 0301 	ands.w	r3, r0, #1
 800346c:	d00a      	beq.n	8003484 <__swsetup_r+0xbc>
 800346e:	2300      	movs	r3, #0
 8003470:	60a3      	str	r3, [r4, #8]
 8003472:	6963      	ldr	r3, [r4, #20]
 8003474:	425b      	negs	r3, r3
 8003476:	61a3      	str	r3, [r4, #24]
 8003478:	6923      	ldr	r3, [r4, #16]
 800347a:	b943      	cbnz	r3, 800348e <__swsetup_r+0xc6>
 800347c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003480:	d1ba      	bne.n	80033f8 <__swsetup_r+0x30>
 8003482:	bd70      	pop	{r4, r5, r6, pc}
 8003484:	0781      	lsls	r1, r0, #30
 8003486:	bf58      	it	pl
 8003488:	6963      	ldrpl	r3, [r4, #20]
 800348a:	60a3      	str	r3, [r4, #8]
 800348c:	e7f4      	b.n	8003478 <__swsetup_r+0xb0>
 800348e:	2000      	movs	r0, #0
 8003490:	e7f7      	b.n	8003482 <__swsetup_r+0xba>
 8003492:	bf00      	nop
 8003494:	2000000c 	.word	0x2000000c
 8003498:	080042b0 	.word	0x080042b0
 800349c:	080042d0 	.word	0x080042d0
 80034a0:	08004290 	.word	0x08004290

080034a4 <__sflush_r>:
 80034a4:	898a      	ldrh	r2, [r1, #12]
 80034a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034aa:	4605      	mov	r5, r0
 80034ac:	0710      	lsls	r0, r2, #28
 80034ae:	460c      	mov	r4, r1
 80034b0:	d458      	bmi.n	8003564 <__sflush_r+0xc0>
 80034b2:	684b      	ldr	r3, [r1, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	dc05      	bgt.n	80034c4 <__sflush_r+0x20>
 80034b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	dc02      	bgt.n	80034c4 <__sflush_r+0x20>
 80034be:	2000      	movs	r0, #0
 80034c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034c6:	2e00      	cmp	r6, #0
 80034c8:	d0f9      	beq.n	80034be <__sflush_r+0x1a>
 80034ca:	2300      	movs	r3, #0
 80034cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034d0:	682f      	ldr	r7, [r5, #0]
 80034d2:	602b      	str	r3, [r5, #0]
 80034d4:	d032      	beq.n	800353c <__sflush_r+0x98>
 80034d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034d8:	89a3      	ldrh	r3, [r4, #12]
 80034da:	075a      	lsls	r2, r3, #29
 80034dc:	d505      	bpl.n	80034ea <__sflush_r+0x46>
 80034de:	6863      	ldr	r3, [r4, #4]
 80034e0:	1ac0      	subs	r0, r0, r3
 80034e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034e4:	b10b      	cbz	r3, 80034ea <__sflush_r+0x46>
 80034e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034e8:	1ac0      	subs	r0, r0, r3
 80034ea:	2300      	movs	r3, #0
 80034ec:	4602      	mov	r2, r0
 80034ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034f0:	6a21      	ldr	r1, [r4, #32]
 80034f2:	4628      	mov	r0, r5
 80034f4:	47b0      	blx	r6
 80034f6:	1c43      	adds	r3, r0, #1
 80034f8:	89a3      	ldrh	r3, [r4, #12]
 80034fa:	d106      	bne.n	800350a <__sflush_r+0x66>
 80034fc:	6829      	ldr	r1, [r5, #0]
 80034fe:	291d      	cmp	r1, #29
 8003500:	d82c      	bhi.n	800355c <__sflush_r+0xb8>
 8003502:	4a2a      	ldr	r2, [pc, #168]	; (80035ac <__sflush_r+0x108>)
 8003504:	40ca      	lsrs	r2, r1
 8003506:	07d6      	lsls	r6, r2, #31
 8003508:	d528      	bpl.n	800355c <__sflush_r+0xb8>
 800350a:	2200      	movs	r2, #0
 800350c:	6062      	str	r2, [r4, #4]
 800350e:	04d9      	lsls	r1, r3, #19
 8003510:	6922      	ldr	r2, [r4, #16]
 8003512:	6022      	str	r2, [r4, #0]
 8003514:	d504      	bpl.n	8003520 <__sflush_r+0x7c>
 8003516:	1c42      	adds	r2, r0, #1
 8003518:	d101      	bne.n	800351e <__sflush_r+0x7a>
 800351a:	682b      	ldr	r3, [r5, #0]
 800351c:	b903      	cbnz	r3, 8003520 <__sflush_r+0x7c>
 800351e:	6560      	str	r0, [r4, #84]	; 0x54
 8003520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003522:	602f      	str	r7, [r5, #0]
 8003524:	2900      	cmp	r1, #0
 8003526:	d0ca      	beq.n	80034be <__sflush_r+0x1a>
 8003528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800352c:	4299      	cmp	r1, r3
 800352e:	d002      	beq.n	8003536 <__sflush_r+0x92>
 8003530:	4628      	mov	r0, r5
 8003532:	f000 f9d5 	bl	80038e0 <_free_r>
 8003536:	2000      	movs	r0, #0
 8003538:	6360      	str	r0, [r4, #52]	; 0x34
 800353a:	e7c1      	b.n	80034c0 <__sflush_r+0x1c>
 800353c:	6a21      	ldr	r1, [r4, #32]
 800353e:	2301      	movs	r3, #1
 8003540:	4628      	mov	r0, r5
 8003542:	47b0      	blx	r6
 8003544:	1c41      	adds	r1, r0, #1
 8003546:	d1c7      	bne.n	80034d8 <__sflush_r+0x34>
 8003548:	682b      	ldr	r3, [r5, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0c4      	beq.n	80034d8 <__sflush_r+0x34>
 800354e:	2b1d      	cmp	r3, #29
 8003550:	d001      	beq.n	8003556 <__sflush_r+0xb2>
 8003552:	2b16      	cmp	r3, #22
 8003554:	d101      	bne.n	800355a <__sflush_r+0xb6>
 8003556:	602f      	str	r7, [r5, #0]
 8003558:	e7b1      	b.n	80034be <__sflush_r+0x1a>
 800355a:	89a3      	ldrh	r3, [r4, #12]
 800355c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003560:	81a3      	strh	r3, [r4, #12]
 8003562:	e7ad      	b.n	80034c0 <__sflush_r+0x1c>
 8003564:	690f      	ldr	r7, [r1, #16]
 8003566:	2f00      	cmp	r7, #0
 8003568:	d0a9      	beq.n	80034be <__sflush_r+0x1a>
 800356a:	0793      	lsls	r3, r2, #30
 800356c:	680e      	ldr	r6, [r1, #0]
 800356e:	bf08      	it	eq
 8003570:	694b      	ldreq	r3, [r1, #20]
 8003572:	600f      	str	r7, [r1, #0]
 8003574:	bf18      	it	ne
 8003576:	2300      	movne	r3, #0
 8003578:	eba6 0807 	sub.w	r8, r6, r7
 800357c:	608b      	str	r3, [r1, #8]
 800357e:	f1b8 0f00 	cmp.w	r8, #0
 8003582:	dd9c      	ble.n	80034be <__sflush_r+0x1a>
 8003584:	6a21      	ldr	r1, [r4, #32]
 8003586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003588:	4643      	mov	r3, r8
 800358a:	463a      	mov	r2, r7
 800358c:	4628      	mov	r0, r5
 800358e:	47b0      	blx	r6
 8003590:	2800      	cmp	r0, #0
 8003592:	dc06      	bgt.n	80035a2 <__sflush_r+0xfe>
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800359a:	81a3      	strh	r3, [r4, #12]
 800359c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035a0:	e78e      	b.n	80034c0 <__sflush_r+0x1c>
 80035a2:	4407      	add	r7, r0
 80035a4:	eba8 0800 	sub.w	r8, r8, r0
 80035a8:	e7e9      	b.n	800357e <__sflush_r+0xda>
 80035aa:	bf00      	nop
 80035ac:	20400001 	.word	0x20400001

080035b0 <_fflush_r>:
 80035b0:	b538      	push	{r3, r4, r5, lr}
 80035b2:	690b      	ldr	r3, [r1, #16]
 80035b4:	4605      	mov	r5, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	b913      	cbnz	r3, 80035c0 <_fflush_r+0x10>
 80035ba:	2500      	movs	r5, #0
 80035bc:	4628      	mov	r0, r5
 80035be:	bd38      	pop	{r3, r4, r5, pc}
 80035c0:	b118      	cbz	r0, 80035ca <_fflush_r+0x1a>
 80035c2:	6983      	ldr	r3, [r0, #24]
 80035c4:	b90b      	cbnz	r3, 80035ca <_fflush_r+0x1a>
 80035c6:	f000 f887 	bl	80036d8 <__sinit>
 80035ca:	4b14      	ldr	r3, [pc, #80]	; (800361c <_fflush_r+0x6c>)
 80035cc:	429c      	cmp	r4, r3
 80035ce:	d11b      	bne.n	8003608 <_fflush_r+0x58>
 80035d0:	686c      	ldr	r4, [r5, #4]
 80035d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0ef      	beq.n	80035ba <_fflush_r+0xa>
 80035da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035dc:	07d0      	lsls	r0, r2, #31
 80035de:	d404      	bmi.n	80035ea <_fflush_r+0x3a>
 80035e0:	0599      	lsls	r1, r3, #22
 80035e2:	d402      	bmi.n	80035ea <_fflush_r+0x3a>
 80035e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035e6:	f000 f915 	bl	8003814 <__retarget_lock_acquire_recursive>
 80035ea:	4628      	mov	r0, r5
 80035ec:	4621      	mov	r1, r4
 80035ee:	f7ff ff59 	bl	80034a4 <__sflush_r>
 80035f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035f4:	07da      	lsls	r2, r3, #31
 80035f6:	4605      	mov	r5, r0
 80035f8:	d4e0      	bmi.n	80035bc <_fflush_r+0xc>
 80035fa:	89a3      	ldrh	r3, [r4, #12]
 80035fc:	059b      	lsls	r3, r3, #22
 80035fe:	d4dd      	bmi.n	80035bc <_fflush_r+0xc>
 8003600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003602:	f000 f908 	bl	8003816 <__retarget_lock_release_recursive>
 8003606:	e7d9      	b.n	80035bc <_fflush_r+0xc>
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <_fflush_r+0x70>)
 800360a:	429c      	cmp	r4, r3
 800360c:	d101      	bne.n	8003612 <_fflush_r+0x62>
 800360e:	68ac      	ldr	r4, [r5, #8]
 8003610:	e7df      	b.n	80035d2 <_fflush_r+0x22>
 8003612:	4b04      	ldr	r3, [pc, #16]	; (8003624 <_fflush_r+0x74>)
 8003614:	429c      	cmp	r4, r3
 8003616:	bf08      	it	eq
 8003618:	68ec      	ldreq	r4, [r5, #12]
 800361a:	e7da      	b.n	80035d2 <_fflush_r+0x22>
 800361c:	080042b0 	.word	0x080042b0
 8003620:	080042d0 	.word	0x080042d0
 8003624:	08004290 	.word	0x08004290

08003628 <std>:
 8003628:	2300      	movs	r3, #0
 800362a:	b510      	push	{r4, lr}
 800362c:	4604      	mov	r4, r0
 800362e:	e9c0 3300 	strd	r3, r3, [r0]
 8003632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003636:	6083      	str	r3, [r0, #8]
 8003638:	8181      	strh	r1, [r0, #12]
 800363a:	6643      	str	r3, [r0, #100]	; 0x64
 800363c:	81c2      	strh	r2, [r0, #14]
 800363e:	6183      	str	r3, [r0, #24]
 8003640:	4619      	mov	r1, r3
 8003642:	2208      	movs	r2, #8
 8003644:	305c      	adds	r0, #92	; 0x5c
 8003646:	f7ff fdd7 	bl	80031f8 <memset>
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <std+0x38>)
 800364c:	6263      	str	r3, [r4, #36]	; 0x24
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <std+0x3c>)
 8003650:	62a3      	str	r3, [r4, #40]	; 0x28
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <std+0x40>)
 8003654:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <std+0x44>)
 8003658:	6224      	str	r4, [r4, #32]
 800365a:	6323      	str	r3, [r4, #48]	; 0x30
 800365c:	bd10      	pop	{r4, pc}
 800365e:	bf00      	nop
 8003660:	08004031 	.word	0x08004031
 8003664:	08004053 	.word	0x08004053
 8003668:	0800408b 	.word	0x0800408b
 800366c:	080040af 	.word	0x080040af

08003670 <_cleanup_r>:
 8003670:	4901      	ldr	r1, [pc, #4]	; (8003678 <_cleanup_r+0x8>)
 8003672:	f000 b8af 	b.w	80037d4 <_fwalk_reent>
 8003676:	bf00      	nop
 8003678:	080035b1 	.word	0x080035b1

0800367c <__sfmoreglue>:
 800367c:	b570      	push	{r4, r5, r6, lr}
 800367e:	1e4a      	subs	r2, r1, #1
 8003680:	2568      	movs	r5, #104	; 0x68
 8003682:	4355      	muls	r5, r2
 8003684:	460e      	mov	r6, r1
 8003686:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800368a:	f000 f979 	bl	8003980 <_malloc_r>
 800368e:	4604      	mov	r4, r0
 8003690:	b140      	cbz	r0, 80036a4 <__sfmoreglue+0x28>
 8003692:	2100      	movs	r1, #0
 8003694:	e9c0 1600 	strd	r1, r6, [r0]
 8003698:	300c      	adds	r0, #12
 800369a:	60a0      	str	r0, [r4, #8]
 800369c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80036a0:	f7ff fdaa 	bl	80031f8 <memset>
 80036a4:	4620      	mov	r0, r4
 80036a6:	bd70      	pop	{r4, r5, r6, pc}

080036a8 <__sfp_lock_acquire>:
 80036a8:	4801      	ldr	r0, [pc, #4]	; (80036b0 <__sfp_lock_acquire+0x8>)
 80036aa:	f000 b8b3 	b.w	8003814 <__retarget_lock_acquire_recursive>
 80036ae:	bf00      	nop
 80036b0:	20000174 	.word	0x20000174

080036b4 <__sfp_lock_release>:
 80036b4:	4801      	ldr	r0, [pc, #4]	; (80036bc <__sfp_lock_release+0x8>)
 80036b6:	f000 b8ae 	b.w	8003816 <__retarget_lock_release_recursive>
 80036ba:	bf00      	nop
 80036bc:	20000174 	.word	0x20000174

080036c0 <__sinit_lock_acquire>:
 80036c0:	4801      	ldr	r0, [pc, #4]	; (80036c8 <__sinit_lock_acquire+0x8>)
 80036c2:	f000 b8a7 	b.w	8003814 <__retarget_lock_acquire_recursive>
 80036c6:	bf00      	nop
 80036c8:	2000016f 	.word	0x2000016f

080036cc <__sinit_lock_release>:
 80036cc:	4801      	ldr	r0, [pc, #4]	; (80036d4 <__sinit_lock_release+0x8>)
 80036ce:	f000 b8a2 	b.w	8003816 <__retarget_lock_release_recursive>
 80036d2:	bf00      	nop
 80036d4:	2000016f 	.word	0x2000016f

080036d8 <__sinit>:
 80036d8:	b510      	push	{r4, lr}
 80036da:	4604      	mov	r4, r0
 80036dc:	f7ff fff0 	bl	80036c0 <__sinit_lock_acquire>
 80036e0:	69a3      	ldr	r3, [r4, #24]
 80036e2:	b11b      	cbz	r3, 80036ec <__sinit+0x14>
 80036e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036e8:	f7ff bff0 	b.w	80036cc <__sinit_lock_release>
 80036ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80036f0:	6523      	str	r3, [r4, #80]	; 0x50
 80036f2:	4b13      	ldr	r3, [pc, #76]	; (8003740 <__sinit+0x68>)
 80036f4:	4a13      	ldr	r2, [pc, #76]	; (8003744 <__sinit+0x6c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80036fa:	42a3      	cmp	r3, r4
 80036fc:	bf04      	itt	eq
 80036fe:	2301      	moveq	r3, #1
 8003700:	61a3      	streq	r3, [r4, #24]
 8003702:	4620      	mov	r0, r4
 8003704:	f000 f820 	bl	8003748 <__sfp>
 8003708:	6060      	str	r0, [r4, #4]
 800370a:	4620      	mov	r0, r4
 800370c:	f000 f81c 	bl	8003748 <__sfp>
 8003710:	60a0      	str	r0, [r4, #8]
 8003712:	4620      	mov	r0, r4
 8003714:	f000 f818 	bl	8003748 <__sfp>
 8003718:	2200      	movs	r2, #0
 800371a:	60e0      	str	r0, [r4, #12]
 800371c:	2104      	movs	r1, #4
 800371e:	6860      	ldr	r0, [r4, #4]
 8003720:	f7ff ff82 	bl	8003628 <std>
 8003724:	68a0      	ldr	r0, [r4, #8]
 8003726:	2201      	movs	r2, #1
 8003728:	2109      	movs	r1, #9
 800372a:	f7ff ff7d 	bl	8003628 <std>
 800372e:	68e0      	ldr	r0, [r4, #12]
 8003730:	2202      	movs	r2, #2
 8003732:	2112      	movs	r1, #18
 8003734:	f7ff ff78 	bl	8003628 <std>
 8003738:	2301      	movs	r3, #1
 800373a:	61a3      	str	r3, [r4, #24]
 800373c:	e7d2      	b.n	80036e4 <__sinit+0xc>
 800373e:	bf00      	nop
 8003740:	0800428c 	.word	0x0800428c
 8003744:	08003671 	.word	0x08003671

08003748 <__sfp>:
 8003748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374a:	4607      	mov	r7, r0
 800374c:	f7ff ffac 	bl	80036a8 <__sfp_lock_acquire>
 8003750:	4b1e      	ldr	r3, [pc, #120]	; (80037cc <__sfp+0x84>)
 8003752:	681e      	ldr	r6, [r3, #0]
 8003754:	69b3      	ldr	r3, [r6, #24]
 8003756:	b913      	cbnz	r3, 800375e <__sfp+0x16>
 8003758:	4630      	mov	r0, r6
 800375a:	f7ff ffbd 	bl	80036d8 <__sinit>
 800375e:	3648      	adds	r6, #72	; 0x48
 8003760:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003764:	3b01      	subs	r3, #1
 8003766:	d503      	bpl.n	8003770 <__sfp+0x28>
 8003768:	6833      	ldr	r3, [r6, #0]
 800376a:	b30b      	cbz	r3, 80037b0 <__sfp+0x68>
 800376c:	6836      	ldr	r6, [r6, #0]
 800376e:	e7f7      	b.n	8003760 <__sfp+0x18>
 8003770:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003774:	b9d5      	cbnz	r5, 80037ac <__sfp+0x64>
 8003776:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <__sfp+0x88>)
 8003778:	60e3      	str	r3, [r4, #12]
 800377a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800377e:	6665      	str	r5, [r4, #100]	; 0x64
 8003780:	f000 f847 	bl	8003812 <__retarget_lock_init_recursive>
 8003784:	f7ff ff96 	bl	80036b4 <__sfp_lock_release>
 8003788:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800378c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003790:	6025      	str	r5, [r4, #0]
 8003792:	61a5      	str	r5, [r4, #24]
 8003794:	2208      	movs	r2, #8
 8003796:	4629      	mov	r1, r5
 8003798:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800379c:	f7ff fd2c 	bl	80031f8 <memset>
 80037a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80037a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80037a8:	4620      	mov	r0, r4
 80037aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037ac:	3468      	adds	r4, #104	; 0x68
 80037ae:	e7d9      	b.n	8003764 <__sfp+0x1c>
 80037b0:	2104      	movs	r1, #4
 80037b2:	4638      	mov	r0, r7
 80037b4:	f7ff ff62 	bl	800367c <__sfmoreglue>
 80037b8:	4604      	mov	r4, r0
 80037ba:	6030      	str	r0, [r6, #0]
 80037bc:	2800      	cmp	r0, #0
 80037be:	d1d5      	bne.n	800376c <__sfp+0x24>
 80037c0:	f7ff ff78 	bl	80036b4 <__sfp_lock_release>
 80037c4:	230c      	movs	r3, #12
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	e7ee      	b.n	80037a8 <__sfp+0x60>
 80037ca:	bf00      	nop
 80037cc:	0800428c 	.word	0x0800428c
 80037d0:	ffff0001 	.word	0xffff0001

080037d4 <_fwalk_reent>:
 80037d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037d8:	4606      	mov	r6, r0
 80037da:	4688      	mov	r8, r1
 80037dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037e0:	2700      	movs	r7, #0
 80037e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037e6:	f1b9 0901 	subs.w	r9, r9, #1
 80037ea:	d505      	bpl.n	80037f8 <_fwalk_reent+0x24>
 80037ec:	6824      	ldr	r4, [r4, #0]
 80037ee:	2c00      	cmp	r4, #0
 80037f0:	d1f7      	bne.n	80037e2 <_fwalk_reent+0xe>
 80037f2:	4638      	mov	r0, r7
 80037f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037f8:	89ab      	ldrh	r3, [r5, #12]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d907      	bls.n	800380e <_fwalk_reent+0x3a>
 80037fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003802:	3301      	adds	r3, #1
 8003804:	d003      	beq.n	800380e <_fwalk_reent+0x3a>
 8003806:	4629      	mov	r1, r5
 8003808:	4630      	mov	r0, r6
 800380a:	47c0      	blx	r8
 800380c:	4307      	orrs	r7, r0
 800380e:	3568      	adds	r5, #104	; 0x68
 8003810:	e7e9      	b.n	80037e6 <_fwalk_reent+0x12>

08003812 <__retarget_lock_init_recursive>:
 8003812:	4770      	bx	lr

08003814 <__retarget_lock_acquire_recursive>:
 8003814:	4770      	bx	lr

08003816 <__retarget_lock_release_recursive>:
 8003816:	4770      	bx	lr

08003818 <__swhatbuf_r>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	460e      	mov	r6, r1
 800381c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003820:	2900      	cmp	r1, #0
 8003822:	b096      	sub	sp, #88	; 0x58
 8003824:	4614      	mov	r4, r2
 8003826:	461d      	mov	r5, r3
 8003828:	da07      	bge.n	800383a <__swhatbuf_r+0x22>
 800382a:	2300      	movs	r3, #0
 800382c:	602b      	str	r3, [r5, #0]
 800382e:	89b3      	ldrh	r3, [r6, #12]
 8003830:	061a      	lsls	r2, r3, #24
 8003832:	d410      	bmi.n	8003856 <__swhatbuf_r+0x3e>
 8003834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003838:	e00e      	b.n	8003858 <__swhatbuf_r+0x40>
 800383a:	466a      	mov	r2, sp
 800383c:	f000 fc5e 	bl	80040fc <_fstat_r>
 8003840:	2800      	cmp	r0, #0
 8003842:	dbf2      	blt.n	800382a <__swhatbuf_r+0x12>
 8003844:	9a01      	ldr	r2, [sp, #4]
 8003846:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800384a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800384e:	425a      	negs	r2, r3
 8003850:	415a      	adcs	r2, r3
 8003852:	602a      	str	r2, [r5, #0]
 8003854:	e7ee      	b.n	8003834 <__swhatbuf_r+0x1c>
 8003856:	2340      	movs	r3, #64	; 0x40
 8003858:	2000      	movs	r0, #0
 800385a:	6023      	str	r3, [r4, #0]
 800385c:	b016      	add	sp, #88	; 0x58
 800385e:	bd70      	pop	{r4, r5, r6, pc}

08003860 <__smakebuf_r>:
 8003860:	898b      	ldrh	r3, [r1, #12]
 8003862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003864:	079d      	lsls	r5, r3, #30
 8003866:	4606      	mov	r6, r0
 8003868:	460c      	mov	r4, r1
 800386a:	d507      	bpl.n	800387c <__smakebuf_r+0x1c>
 800386c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003870:	6023      	str	r3, [r4, #0]
 8003872:	6123      	str	r3, [r4, #16]
 8003874:	2301      	movs	r3, #1
 8003876:	6163      	str	r3, [r4, #20]
 8003878:	b002      	add	sp, #8
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	ab01      	add	r3, sp, #4
 800387e:	466a      	mov	r2, sp
 8003880:	f7ff ffca 	bl	8003818 <__swhatbuf_r>
 8003884:	9900      	ldr	r1, [sp, #0]
 8003886:	4605      	mov	r5, r0
 8003888:	4630      	mov	r0, r6
 800388a:	f000 f879 	bl	8003980 <_malloc_r>
 800388e:	b948      	cbnz	r0, 80038a4 <__smakebuf_r+0x44>
 8003890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003894:	059a      	lsls	r2, r3, #22
 8003896:	d4ef      	bmi.n	8003878 <__smakebuf_r+0x18>
 8003898:	f023 0303 	bic.w	r3, r3, #3
 800389c:	f043 0302 	orr.w	r3, r3, #2
 80038a0:	81a3      	strh	r3, [r4, #12]
 80038a2:	e7e3      	b.n	800386c <__smakebuf_r+0xc>
 80038a4:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <__smakebuf_r+0x7c>)
 80038a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80038a8:	89a3      	ldrh	r3, [r4, #12]
 80038aa:	6020      	str	r0, [r4, #0]
 80038ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b0:	81a3      	strh	r3, [r4, #12]
 80038b2:	9b00      	ldr	r3, [sp, #0]
 80038b4:	6163      	str	r3, [r4, #20]
 80038b6:	9b01      	ldr	r3, [sp, #4]
 80038b8:	6120      	str	r0, [r4, #16]
 80038ba:	b15b      	cbz	r3, 80038d4 <__smakebuf_r+0x74>
 80038bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038c0:	4630      	mov	r0, r6
 80038c2:	f000 fc2d 	bl	8004120 <_isatty_r>
 80038c6:	b128      	cbz	r0, 80038d4 <__smakebuf_r+0x74>
 80038c8:	89a3      	ldrh	r3, [r4, #12]
 80038ca:	f023 0303 	bic.w	r3, r3, #3
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	81a3      	strh	r3, [r4, #12]
 80038d4:	89a0      	ldrh	r0, [r4, #12]
 80038d6:	4305      	orrs	r5, r0
 80038d8:	81a5      	strh	r5, [r4, #12]
 80038da:	e7cd      	b.n	8003878 <__smakebuf_r+0x18>
 80038dc:	08003671 	.word	0x08003671

080038e0 <_free_r>:
 80038e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038e2:	2900      	cmp	r1, #0
 80038e4:	d048      	beq.n	8003978 <_free_r+0x98>
 80038e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038ea:	9001      	str	r0, [sp, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f1a1 0404 	sub.w	r4, r1, #4
 80038f2:	bfb8      	it	lt
 80038f4:	18e4      	addlt	r4, r4, r3
 80038f6:	f000 fc35 	bl	8004164 <__malloc_lock>
 80038fa:	4a20      	ldr	r2, [pc, #128]	; (800397c <_free_r+0x9c>)
 80038fc:	9801      	ldr	r0, [sp, #4]
 80038fe:	6813      	ldr	r3, [r2, #0]
 8003900:	4615      	mov	r5, r2
 8003902:	b933      	cbnz	r3, 8003912 <_free_r+0x32>
 8003904:	6063      	str	r3, [r4, #4]
 8003906:	6014      	str	r4, [r2, #0]
 8003908:	b003      	add	sp, #12
 800390a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800390e:	f000 bc2f 	b.w	8004170 <__malloc_unlock>
 8003912:	42a3      	cmp	r3, r4
 8003914:	d90b      	bls.n	800392e <_free_r+0x4e>
 8003916:	6821      	ldr	r1, [r4, #0]
 8003918:	1862      	adds	r2, r4, r1
 800391a:	4293      	cmp	r3, r2
 800391c:	bf04      	itt	eq
 800391e:	681a      	ldreq	r2, [r3, #0]
 8003920:	685b      	ldreq	r3, [r3, #4]
 8003922:	6063      	str	r3, [r4, #4]
 8003924:	bf04      	itt	eq
 8003926:	1852      	addeq	r2, r2, r1
 8003928:	6022      	streq	r2, [r4, #0]
 800392a:	602c      	str	r4, [r5, #0]
 800392c:	e7ec      	b.n	8003908 <_free_r+0x28>
 800392e:	461a      	mov	r2, r3
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	b10b      	cbz	r3, 8003938 <_free_r+0x58>
 8003934:	42a3      	cmp	r3, r4
 8003936:	d9fa      	bls.n	800392e <_free_r+0x4e>
 8003938:	6811      	ldr	r1, [r2, #0]
 800393a:	1855      	adds	r5, r2, r1
 800393c:	42a5      	cmp	r5, r4
 800393e:	d10b      	bne.n	8003958 <_free_r+0x78>
 8003940:	6824      	ldr	r4, [r4, #0]
 8003942:	4421      	add	r1, r4
 8003944:	1854      	adds	r4, r2, r1
 8003946:	42a3      	cmp	r3, r4
 8003948:	6011      	str	r1, [r2, #0]
 800394a:	d1dd      	bne.n	8003908 <_free_r+0x28>
 800394c:	681c      	ldr	r4, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	6053      	str	r3, [r2, #4]
 8003952:	4421      	add	r1, r4
 8003954:	6011      	str	r1, [r2, #0]
 8003956:	e7d7      	b.n	8003908 <_free_r+0x28>
 8003958:	d902      	bls.n	8003960 <_free_r+0x80>
 800395a:	230c      	movs	r3, #12
 800395c:	6003      	str	r3, [r0, #0]
 800395e:	e7d3      	b.n	8003908 <_free_r+0x28>
 8003960:	6825      	ldr	r5, [r4, #0]
 8003962:	1961      	adds	r1, r4, r5
 8003964:	428b      	cmp	r3, r1
 8003966:	bf04      	itt	eq
 8003968:	6819      	ldreq	r1, [r3, #0]
 800396a:	685b      	ldreq	r3, [r3, #4]
 800396c:	6063      	str	r3, [r4, #4]
 800396e:	bf04      	itt	eq
 8003970:	1949      	addeq	r1, r1, r5
 8003972:	6021      	streq	r1, [r4, #0]
 8003974:	6054      	str	r4, [r2, #4]
 8003976:	e7c7      	b.n	8003908 <_free_r+0x28>
 8003978:	b003      	add	sp, #12
 800397a:	bd30      	pop	{r4, r5, pc}
 800397c:	20000098 	.word	0x20000098

08003980 <_malloc_r>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	1ccd      	adds	r5, r1, #3
 8003984:	f025 0503 	bic.w	r5, r5, #3
 8003988:	3508      	adds	r5, #8
 800398a:	2d0c      	cmp	r5, #12
 800398c:	bf38      	it	cc
 800398e:	250c      	movcc	r5, #12
 8003990:	2d00      	cmp	r5, #0
 8003992:	4606      	mov	r6, r0
 8003994:	db01      	blt.n	800399a <_malloc_r+0x1a>
 8003996:	42a9      	cmp	r1, r5
 8003998:	d903      	bls.n	80039a2 <_malloc_r+0x22>
 800399a:	230c      	movs	r3, #12
 800399c:	6033      	str	r3, [r6, #0]
 800399e:	2000      	movs	r0, #0
 80039a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039a2:	f000 fbdf 	bl	8004164 <__malloc_lock>
 80039a6:	4921      	ldr	r1, [pc, #132]	; (8003a2c <_malloc_r+0xac>)
 80039a8:	680a      	ldr	r2, [r1, #0]
 80039aa:	4614      	mov	r4, r2
 80039ac:	b99c      	cbnz	r4, 80039d6 <_malloc_r+0x56>
 80039ae:	4f20      	ldr	r7, [pc, #128]	; (8003a30 <_malloc_r+0xb0>)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	b923      	cbnz	r3, 80039be <_malloc_r+0x3e>
 80039b4:	4621      	mov	r1, r4
 80039b6:	4630      	mov	r0, r6
 80039b8:	f000 fb2a 	bl	8004010 <_sbrk_r>
 80039bc:	6038      	str	r0, [r7, #0]
 80039be:	4629      	mov	r1, r5
 80039c0:	4630      	mov	r0, r6
 80039c2:	f000 fb25 	bl	8004010 <_sbrk_r>
 80039c6:	1c43      	adds	r3, r0, #1
 80039c8:	d123      	bne.n	8003a12 <_malloc_r+0x92>
 80039ca:	230c      	movs	r3, #12
 80039cc:	6033      	str	r3, [r6, #0]
 80039ce:	4630      	mov	r0, r6
 80039d0:	f000 fbce 	bl	8004170 <__malloc_unlock>
 80039d4:	e7e3      	b.n	800399e <_malloc_r+0x1e>
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	1b5b      	subs	r3, r3, r5
 80039da:	d417      	bmi.n	8003a0c <_malloc_r+0x8c>
 80039dc:	2b0b      	cmp	r3, #11
 80039de:	d903      	bls.n	80039e8 <_malloc_r+0x68>
 80039e0:	6023      	str	r3, [r4, #0]
 80039e2:	441c      	add	r4, r3
 80039e4:	6025      	str	r5, [r4, #0]
 80039e6:	e004      	b.n	80039f2 <_malloc_r+0x72>
 80039e8:	6863      	ldr	r3, [r4, #4]
 80039ea:	42a2      	cmp	r2, r4
 80039ec:	bf0c      	ite	eq
 80039ee:	600b      	streq	r3, [r1, #0]
 80039f0:	6053      	strne	r3, [r2, #4]
 80039f2:	4630      	mov	r0, r6
 80039f4:	f000 fbbc 	bl	8004170 <__malloc_unlock>
 80039f8:	f104 000b 	add.w	r0, r4, #11
 80039fc:	1d23      	adds	r3, r4, #4
 80039fe:	f020 0007 	bic.w	r0, r0, #7
 8003a02:	1ac2      	subs	r2, r0, r3
 8003a04:	d0cc      	beq.n	80039a0 <_malloc_r+0x20>
 8003a06:	1a1b      	subs	r3, r3, r0
 8003a08:	50a3      	str	r3, [r4, r2]
 8003a0a:	e7c9      	b.n	80039a0 <_malloc_r+0x20>
 8003a0c:	4622      	mov	r2, r4
 8003a0e:	6864      	ldr	r4, [r4, #4]
 8003a10:	e7cc      	b.n	80039ac <_malloc_r+0x2c>
 8003a12:	1cc4      	adds	r4, r0, #3
 8003a14:	f024 0403 	bic.w	r4, r4, #3
 8003a18:	42a0      	cmp	r0, r4
 8003a1a:	d0e3      	beq.n	80039e4 <_malloc_r+0x64>
 8003a1c:	1a21      	subs	r1, r4, r0
 8003a1e:	4630      	mov	r0, r6
 8003a20:	f000 faf6 	bl	8004010 <_sbrk_r>
 8003a24:	3001      	adds	r0, #1
 8003a26:	d1dd      	bne.n	80039e4 <_malloc_r+0x64>
 8003a28:	e7cf      	b.n	80039ca <_malloc_r+0x4a>
 8003a2a:	bf00      	nop
 8003a2c:	20000098 	.word	0x20000098
 8003a30:	2000009c 	.word	0x2000009c

08003a34 <__sfputc_r>:
 8003a34:	6893      	ldr	r3, [r2, #8]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	b410      	push	{r4}
 8003a3c:	6093      	str	r3, [r2, #8]
 8003a3e:	da08      	bge.n	8003a52 <__sfputc_r+0x1e>
 8003a40:	6994      	ldr	r4, [r2, #24]
 8003a42:	42a3      	cmp	r3, r4
 8003a44:	db01      	blt.n	8003a4a <__sfputc_r+0x16>
 8003a46:	290a      	cmp	r1, #10
 8003a48:	d103      	bne.n	8003a52 <__sfputc_r+0x1e>
 8003a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a4e:	f7ff bc69 	b.w	8003324 <__swbuf_r>
 8003a52:	6813      	ldr	r3, [r2, #0]
 8003a54:	1c58      	adds	r0, r3, #1
 8003a56:	6010      	str	r0, [r2, #0]
 8003a58:	7019      	strb	r1, [r3, #0]
 8003a5a:	4608      	mov	r0, r1
 8003a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <__sfputs_r>:
 8003a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a64:	4606      	mov	r6, r0
 8003a66:	460f      	mov	r7, r1
 8003a68:	4614      	mov	r4, r2
 8003a6a:	18d5      	adds	r5, r2, r3
 8003a6c:	42ac      	cmp	r4, r5
 8003a6e:	d101      	bne.n	8003a74 <__sfputs_r+0x12>
 8003a70:	2000      	movs	r0, #0
 8003a72:	e007      	b.n	8003a84 <__sfputs_r+0x22>
 8003a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a78:	463a      	mov	r2, r7
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	f7ff ffda 	bl	8003a34 <__sfputc_r>
 8003a80:	1c43      	adds	r3, r0, #1
 8003a82:	d1f3      	bne.n	8003a6c <__sfputs_r+0xa>
 8003a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a88 <_vfiprintf_r>:
 8003a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a8c:	460d      	mov	r5, r1
 8003a8e:	b09d      	sub	sp, #116	; 0x74
 8003a90:	4614      	mov	r4, r2
 8003a92:	4698      	mov	r8, r3
 8003a94:	4606      	mov	r6, r0
 8003a96:	b118      	cbz	r0, 8003aa0 <_vfiprintf_r+0x18>
 8003a98:	6983      	ldr	r3, [r0, #24]
 8003a9a:	b90b      	cbnz	r3, 8003aa0 <_vfiprintf_r+0x18>
 8003a9c:	f7ff fe1c 	bl	80036d8 <__sinit>
 8003aa0:	4b89      	ldr	r3, [pc, #548]	; (8003cc8 <_vfiprintf_r+0x240>)
 8003aa2:	429d      	cmp	r5, r3
 8003aa4:	d11b      	bne.n	8003ade <_vfiprintf_r+0x56>
 8003aa6:	6875      	ldr	r5, [r6, #4]
 8003aa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003aaa:	07d9      	lsls	r1, r3, #31
 8003aac:	d405      	bmi.n	8003aba <_vfiprintf_r+0x32>
 8003aae:	89ab      	ldrh	r3, [r5, #12]
 8003ab0:	059a      	lsls	r2, r3, #22
 8003ab2:	d402      	bmi.n	8003aba <_vfiprintf_r+0x32>
 8003ab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ab6:	f7ff fead 	bl	8003814 <__retarget_lock_acquire_recursive>
 8003aba:	89ab      	ldrh	r3, [r5, #12]
 8003abc:	071b      	lsls	r3, r3, #28
 8003abe:	d501      	bpl.n	8003ac4 <_vfiprintf_r+0x3c>
 8003ac0:	692b      	ldr	r3, [r5, #16]
 8003ac2:	b9eb      	cbnz	r3, 8003b00 <_vfiprintf_r+0x78>
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	f7ff fc7e 	bl	80033c8 <__swsetup_r>
 8003acc:	b1c0      	cbz	r0, 8003b00 <_vfiprintf_r+0x78>
 8003ace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ad0:	07dc      	lsls	r4, r3, #31
 8003ad2:	d50e      	bpl.n	8003af2 <_vfiprintf_r+0x6a>
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ad8:	b01d      	add	sp, #116	; 0x74
 8003ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ade:	4b7b      	ldr	r3, [pc, #492]	; (8003ccc <_vfiprintf_r+0x244>)
 8003ae0:	429d      	cmp	r5, r3
 8003ae2:	d101      	bne.n	8003ae8 <_vfiprintf_r+0x60>
 8003ae4:	68b5      	ldr	r5, [r6, #8]
 8003ae6:	e7df      	b.n	8003aa8 <_vfiprintf_r+0x20>
 8003ae8:	4b79      	ldr	r3, [pc, #484]	; (8003cd0 <_vfiprintf_r+0x248>)
 8003aea:	429d      	cmp	r5, r3
 8003aec:	bf08      	it	eq
 8003aee:	68f5      	ldreq	r5, [r6, #12]
 8003af0:	e7da      	b.n	8003aa8 <_vfiprintf_r+0x20>
 8003af2:	89ab      	ldrh	r3, [r5, #12]
 8003af4:	0598      	lsls	r0, r3, #22
 8003af6:	d4ed      	bmi.n	8003ad4 <_vfiprintf_r+0x4c>
 8003af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003afa:	f7ff fe8c 	bl	8003816 <__retarget_lock_release_recursive>
 8003afe:	e7e9      	b.n	8003ad4 <_vfiprintf_r+0x4c>
 8003b00:	2300      	movs	r3, #0
 8003b02:	9309      	str	r3, [sp, #36]	; 0x24
 8003b04:	2320      	movs	r3, #32
 8003b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b0e:	2330      	movs	r3, #48	; 0x30
 8003b10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003cd4 <_vfiprintf_r+0x24c>
 8003b14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b18:	f04f 0901 	mov.w	r9, #1
 8003b1c:	4623      	mov	r3, r4
 8003b1e:	469a      	mov	sl, r3
 8003b20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b24:	b10a      	cbz	r2, 8003b2a <_vfiprintf_r+0xa2>
 8003b26:	2a25      	cmp	r2, #37	; 0x25
 8003b28:	d1f9      	bne.n	8003b1e <_vfiprintf_r+0x96>
 8003b2a:	ebba 0b04 	subs.w	fp, sl, r4
 8003b2e:	d00b      	beq.n	8003b48 <_vfiprintf_r+0xc0>
 8003b30:	465b      	mov	r3, fp
 8003b32:	4622      	mov	r2, r4
 8003b34:	4629      	mov	r1, r5
 8003b36:	4630      	mov	r0, r6
 8003b38:	f7ff ff93 	bl	8003a62 <__sfputs_r>
 8003b3c:	3001      	adds	r0, #1
 8003b3e:	f000 80aa 	beq.w	8003c96 <_vfiprintf_r+0x20e>
 8003b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b44:	445a      	add	r2, fp
 8003b46:	9209      	str	r2, [sp, #36]	; 0x24
 8003b48:	f89a 3000 	ldrb.w	r3, [sl]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 80a2 	beq.w	8003c96 <_vfiprintf_r+0x20e>
 8003b52:	2300      	movs	r3, #0
 8003b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b5c:	f10a 0a01 	add.w	sl, sl, #1
 8003b60:	9304      	str	r3, [sp, #16]
 8003b62:	9307      	str	r3, [sp, #28]
 8003b64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b68:	931a      	str	r3, [sp, #104]	; 0x68
 8003b6a:	4654      	mov	r4, sl
 8003b6c:	2205      	movs	r2, #5
 8003b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b72:	4858      	ldr	r0, [pc, #352]	; (8003cd4 <_vfiprintf_r+0x24c>)
 8003b74:	f7fc fb54 	bl	8000220 <memchr>
 8003b78:	9a04      	ldr	r2, [sp, #16]
 8003b7a:	b9d8      	cbnz	r0, 8003bb4 <_vfiprintf_r+0x12c>
 8003b7c:	06d1      	lsls	r1, r2, #27
 8003b7e:	bf44      	itt	mi
 8003b80:	2320      	movmi	r3, #32
 8003b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b86:	0713      	lsls	r3, r2, #28
 8003b88:	bf44      	itt	mi
 8003b8a:	232b      	movmi	r3, #43	; 0x2b
 8003b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b90:	f89a 3000 	ldrb.w	r3, [sl]
 8003b94:	2b2a      	cmp	r3, #42	; 0x2a
 8003b96:	d015      	beq.n	8003bc4 <_vfiprintf_r+0x13c>
 8003b98:	9a07      	ldr	r2, [sp, #28]
 8003b9a:	4654      	mov	r4, sl
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	f04f 0c0a 	mov.w	ip, #10
 8003ba2:	4621      	mov	r1, r4
 8003ba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ba8:	3b30      	subs	r3, #48	; 0x30
 8003baa:	2b09      	cmp	r3, #9
 8003bac:	d94e      	bls.n	8003c4c <_vfiprintf_r+0x1c4>
 8003bae:	b1b0      	cbz	r0, 8003bde <_vfiprintf_r+0x156>
 8003bb0:	9207      	str	r2, [sp, #28]
 8003bb2:	e014      	b.n	8003bde <_vfiprintf_r+0x156>
 8003bb4:	eba0 0308 	sub.w	r3, r0, r8
 8003bb8:	fa09 f303 	lsl.w	r3, r9, r3
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	9304      	str	r3, [sp, #16]
 8003bc0:	46a2      	mov	sl, r4
 8003bc2:	e7d2      	b.n	8003b6a <_vfiprintf_r+0xe2>
 8003bc4:	9b03      	ldr	r3, [sp, #12]
 8003bc6:	1d19      	adds	r1, r3, #4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	9103      	str	r1, [sp, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bfbb      	ittet	lt
 8003bd0:	425b      	neglt	r3, r3
 8003bd2:	f042 0202 	orrlt.w	r2, r2, #2
 8003bd6:	9307      	strge	r3, [sp, #28]
 8003bd8:	9307      	strlt	r3, [sp, #28]
 8003bda:	bfb8      	it	lt
 8003bdc:	9204      	strlt	r2, [sp, #16]
 8003bde:	7823      	ldrb	r3, [r4, #0]
 8003be0:	2b2e      	cmp	r3, #46	; 0x2e
 8003be2:	d10c      	bne.n	8003bfe <_vfiprintf_r+0x176>
 8003be4:	7863      	ldrb	r3, [r4, #1]
 8003be6:	2b2a      	cmp	r3, #42	; 0x2a
 8003be8:	d135      	bne.n	8003c56 <_vfiprintf_r+0x1ce>
 8003bea:	9b03      	ldr	r3, [sp, #12]
 8003bec:	1d1a      	adds	r2, r3, #4
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	9203      	str	r2, [sp, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	bfb8      	it	lt
 8003bf6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003bfa:	3402      	adds	r4, #2
 8003bfc:	9305      	str	r3, [sp, #20]
 8003bfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003ce4 <_vfiprintf_r+0x25c>
 8003c02:	7821      	ldrb	r1, [r4, #0]
 8003c04:	2203      	movs	r2, #3
 8003c06:	4650      	mov	r0, sl
 8003c08:	f7fc fb0a 	bl	8000220 <memchr>
 8003c0c:	b140      	cbz	r0, 8003c20 <_vfiprintf_r+0x198>
 8003c0e:	2340      	movs	r3, #64	; 0x40
 8003c10:	eba0 000a 	sub.w	r0, r0, sl
 8003c14:	fa03 f000 	lsl.w	r0, r3, r0
 8003c18:	9b04      	ldr	r3, [sp, #16]
 8003c1a:	4303      	orrs	r3, r0
 8003c1c:	3401      	adds	r4, #1
 8003c1e:	9304      	str	r3, [sp, #16]
 8003c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c24:	482c      	ldr	r0, [pc, #176]	; (8003cd8 <_vfiprintf_r+0x250>)
 8003c26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c2a:	2206      	movs	r2, #6
 8003c2c:	f7fc faf8 	bl	8000220 <memchr>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	d03f      	beq.n	8003cb4 <_vfiprintf_r+0x22c>
 8003c34:	4b29      	ldr	r3, [pc, #164]	; (8003cdc <_vfiprintf_r+0x254>)
 8003c36:	bb1b      	cbnz	r3, 8003c80 <_vfiprintf_r+0x1f8>
 8003c38:	9b03      	ldr	r3, [sp, #12]
 8003c3a:	3307      	adds	r3, #7
 8003c3c:	f023 0307 	bic.w	r3, r3, #7
 8003c40:	3308      	adds	r3, #8
 8003c42:	9303      	str	r3, [sp, #12]
 8003c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c46:	443b      	add	r3, r7
 8003c48:	9309      	str	r3, [sp, #36]	; 0x24
 8003c4a:	e767      	b.n	8003b1c <_vfiprintf_r+0x94>
 8003c4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c50:	460c      	mov	r4, r1
 8003c52:	2001      	movs	r0, #1
 8003c54:	e7a5      	b.n	8003ba2 <_vfiprintf_r+0x11a>
 8003c56:	2300      	movs	r3, #0
 8003c58:	3401      	adds	r4, #1
 8003c5a:	9305      	str	r3, [sp, #20]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f04f 0c0a 	mov.w	ip, #10
 8003c62:	4620      	mov	r0, r4
 8003c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c68:	3a30      	subs	r2, #48	; 0x30
 8003c6a:	2a09      	cmp	r2, #9
 8003c6c:	d903      	bls.n	8003c76 <_vfiprintf_r+0x1ee>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0c5      	beq.n	8003bfe <_vfiprintf_r+0x176>
 8003c72:	9105      	str	r1, [sp, #20]
 8003c74:	e7c3      	b.n	8003bfe <_vfiprintf_r+0x176>
 8003c76:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e7f0      	b.n	8003c62 <_vfiprintf_r+0x1da>
 8003c80:	ab03      	add	r3, sp, #12
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	462a      	mov	r2, r5
 8003c86:	4b16      	ldr	r3, [pc, #88]	; (8003ce0 <_vfiprintf_r+0x258>)
 8003c88:	a904      	add	r1, sp, #16
 8003c8a:	4630      	mov	r0, r6
 8003c8c:	f3af 8000 	nop.w
 8003c90:	4607      	mov	r7, r0
 8003c92:	1c78      	adds	r0, r7, #1
 8003c94:	d1d6      	bne.n	8003c44 <_vfiprintf_r+0x1bc>
 8003c96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c98:	07d9      	lsls	r1, r3, #31
 8003c9a:	d405      	bmi.n	8003ca8 <_vfiprintf_r+0x220>
 8003c9c:	89ab      	ldrh	r3, [r5, #12]
 8003c9e:	059a      	lsls	r2, r3, #22
 8003ca0:	d402      	bmi.n	8003ca8 <_vfiprintf_r+0x220>
 8003ca2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ca4:	f7ff fdb7 	bl	8003816 <__retarget_lock_release_recursive>
 8003ca8:	89ab      	ldrh	r3, [r5, #12]
 8003caa:	065b      	lsls	r3, r3, #25
 8003cac:	f53f af12 	bmi.w	8003ad4 <_vfiprintf_r+0x4c>
 8003cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cb2:	e711      	b.n	8003ad8 <_vfiprintf_r+0x50>
 8003cb4:	ab03      	add	r3, sp, #12
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	462a      	mov	r2, r5
 8003cba:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <_vfiprintf_r+0x258>)
 8003cbc:	a904      	add	r1, sp, #16
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	f000 f880 	bl	8003dc4 <_printf_i>
 8003cc4:	e7e4      	b.n	8003c90 <_vfiprintf_r+0x208>
 8003cc6:	bf00      	nop
 8003cc8:	080042b0 	.word	0x080042b0
 8003ccc:	080042d0 	.word	0x080042d0
 8003cd0:	08004290 	.word	0x08004290
 8003cd4:	080042f0 	.word	0x080042f0
 8003cd8:	080042fa 	.word	0x080042fa
 8003cdc:	00000000 	.word	0x00000000
 8003ce0:	08003a63 	.word	0x08003a63
 8003ce4:	080042f6 	.word	0x080042f6

08003ce8 <_printf_common>:
 8003ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cec:	4616      	mov	r6, r2
 8003cee:	4699      	mov	r9, r3
 8003cf0:	688a      	ldr	r2, [r1, #8]
 8003cf2:	690b      	ldr	r3, [r1, #16]
 8003cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	bfb8      	it	lt
 8003cfc:	4613      	movlt	r3, r2
 8003cfe:	6033      	str	r3, [r6, #0]
 8003d00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d04:	4607      	mov	r7, r0
 8003d06:	460c      	mov	r4, r1
 8003d08:	b10a      	cbz	r2, 8003d0e <_printf_common+0x26>
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	6033      	str	r3, [r6, #0]
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	0699      	lsls	r1, r3, #26
 8003d12:	bf42      	ittt	mi
 8003d14:	6833      	ldrmi	r3, [r6, #0]
 8003d16:	3302      	addmi	r3, #2
 8003d18:	6033      	strmi	r3, [r6, #0]
 8003d1a:	6825      	ldr	r5, [r4, #0]
 8003d1c:	f015 0506 	ands.w	r5, r5, #6
 8003d20:	d106      	bne.n	8003d30 <_printf_common+0x48>
 8003d22:	f104 0a19 	add.w	sl, r4, #25
 8003d26:	68e3      	ldr	r3, [r4, #12]
 8003d28:	6832      	ldr	r2, [r6, #0]
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	42ab      	cmp	r3, r5
 8003d2e:	dc26      	bgt.n	8003d7e <_printf_common+0x96>
 8003d30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d34:	1e13      	subs	r3, r2, #0
 8003d36:	6822      	ldr	r2, [r4, #0]
 8003d38:	bf18      	it	ne
 8003d3a:	2301      	movne	r3, #1
 8003d3c:	0692      	lsls	r2, r2, #26
 8003d3e:	d42b      	bmi.n	8003d98 <_printf_common+0xb0>
 8003d40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d44:	4649      	mov	r1, r9
 8003d46:	4638      	mov	r0, r7
 8003d48:	47c0      	blx	r8
 8003d4a:	3001      	adds	r0, #1
 8003d4c:	d01e      	beq.n	8003d8c <_printf_common+0xa4>
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	68e5      	ldr	r5, [r4, #12]
 8003d52:	6832      	ldr	r2, [r6, #0]
 8003d54:	f003 0306 	and.w	r3, r3, #6
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	bf08      	it	eq
 8003d5c:	1aad      	subeq	r5, r5, r2
 8003d5e:	68a3      	ldr	r3, [r4, #8]
 8003d60:	6922      	ldr	r2, [r4, #16]
 8003d62:	bf0c      	ite	eq
 8003d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d68:	2500      	movne	r5, #0
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	bfc4      	itt	gt
 8003d6e:	1a9b      	subgt	r3, r3, r2
 8003d70:	18ed      	addgt	r5, r5, r3
 8003d72:	2600      	movs	r6, #0
 8003d74:	341a      	adds	r4, #26
 8003d76:	42b5      	cmp	r5, r6
 8003d78:	d11a      	bne.n	8003db0 <_printf_common+0xc8>
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	e008      	b.n	8003d90 <_printf_common+0xa8>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	4652      	mov	r2, sl
 8003d82:	4649      	mov	r1, r9
 8003d84:	4638      	mov	r0, r7
 8003d86:	47c0      	blx	r8
 8003d88:	3001      	adds	r0, #1
 8003d8a:	d103      	bne.n	8003d94 <_printf_common+0xac>
 8003d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d94:	3501      	adds	r5, #1
 8003d96:	e7c6      	b.n	8003d26 <_printf_common+0x3e>
 8003d98:	18e1      	adds	r1, r4, r3
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	2030      	movs	r0, #48	; 0x30
 8003d9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003da2:	4422      	add	r2, r4
 8003da4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003da8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dac:	3302      	adds	r3, #2
 8003dae:	e7c7      	b.n	8003d40 <_printf_common+0x58>
 8003db0:	2301      	movs	r3, #1
 8003db2:	4622      	mov	r2, r4
 8003db4:	4649      	mov	r1, r9
 8003db6:	4638      	mov	r0, r7
 8003db8:	47c0      	blx	r8
 8003dba:	3001      	adds	r0, #1
 8003dbc:	d0e6      	beq.n	8003d8c <_printf_common+0xa4>
 8003dbe:	3601      	adds	r6, #1
 8003dc0:	e7d9      	b.n	8003d76 <_printf_common+0x8e>
	...

08003dc4 <_printf_i>:
 8003dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc8:	460c      	mov	r4, r1
 8003dca:	4691      	mov	r9, r2
 8003dcc:	7e27      	ldrb	r7, [r4, #24]
 8003dce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003dd0:	2f78      	cmp	r7, #120	; 0x78
 8003dd2:	4680      	mov	r8, r0
 8003dd4:	469a      	mov	sl, r3
 8003dd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dda:	d807      	bhi.n	8003dec <_printf_i+0x28>
 8003ddc:	2f62      	cmp	r7, #98	; 0x62
 8003dde:	d80a      	bhi.n	8003df6 <_printf_i+0x32>
 8003de0:	2f00      	cmp	r7, #0
 8003de2:	f000 80d8 	beq.w	8003f96 <_printf_i+0x1d2>
 8003de6:	2f58      	cmp	r7, #88	; 0x58
 8003de8:	f000 80a3 	beq.w	8003f32 <_printf_i+0x16e>
 8003dec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003df0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003df4:	e03a      	b.n	8003e6c <_printf_i+0xa8>
 8003df6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dfa:	2b15      	cmp	r3, #21
 8003dfc:	d8f6      	bhi.n	8003dec <_printf_i+0x28>
 8003dfe:	a001      	add	r0, pc, #4	; (adr r0, 8003e04 <_printf_i+0x40>)
 8003e00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003e04:	08003e5d 	.word	0x08003e5d
 8003e08:	08003e71 	.word	0x08003e71
 8003e0c:	08003ded 	.word	0x08003ded
 8003e10:	08003ded 	.word	0x08003ded
 8003e14:	08003ded 	.word	0x08003ded
 8003e18:	08003ded 	.word	0x08003ded
 8003e1c:	08003e71 	.word	0x08003e71
 8003e20:	08003ded 	.word	0x08003ded
 8003e24:	08003ded 	.word	0x08003ded
 8003e28:	08003ded 	.word	0x08003ded
 8003e2c:	08003ded 	.word	0x08003ded
 8003e30:	08003f7d 	.word	0x08003f7d
 8003e34:	08003ea1 	.word	0x08003ea1
 8003e38:	08003f5f 	.word	0x08003f5f
 8003e3c:	08003ded 	.word	0x08003ded
 8003e40:	08003ded 	.word	0x08003ded
 8003e44:	08003f9f 	.word	0x08003f9f
 8003e48:	08003ded 	.word	0x08003ded
 8003e4c:	08003ea1 	.word	0x08003ea1
 8003e50:	08003ded 	.word	0x08003ded
 8003e54:	08003ded 	.word	0x08003ded
 8003e58:	08003f67 	.word	0x08003f67
 8003e5c:	680b      	ldr	r3, [r1, #0]
 8003e5e:	1d1a      	adds	r2, r3, #4
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	600a      	str	r2, [r1, #0]
 8003e64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0a3      	b.n	8003fb8 <_printf_i+0x1f4>
 8003e70:	6825      	ldr	r5, [r4, #0]
 8003e72:	6808      	ldr	r0, [r1, #0]
 8003e74:	062e      	lsls	r6, r5, #24
 8003e76:	f100 0304 	add.w	r3, r0, #4
 8003e7a:	d50a      	bpl.n	8003e92 <_printf_i+0xce>
 8003e7c:	6805      	ldr	r5, [r0, #0]
 8003e7e:	600b      	str	r3, [r1, #0]
 8003e80:	2d00      	cmp	r5, #0
 8003e82:	da03      	bge.n	8003e8c <_printf_i+0xc8>
 8003e84:	232d      	movs	r3, #45	; 0x2d
 8003e86:	426d      	negs	r5, r5
 8003e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e8c:	485e      	ldr	r0, [pc, #376]	; (8004008 <_printf_i+0x244>)
 8003e8e:	230a      	movs	r3, #10
 8003e90:	e019      	b.n	8003ec6 <_printf_i+0x102>
 8003e92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003e96:	6805      	ldr	r5, [r0, #0]
 8003e98:	600b      	str	r3, [r1, #0]
 8003e9a:	bf18      	it	ne
 8003e9c:	b22d      	sxthne	r5, r5
 8003e9e:	e7ef      	b.n	8003e80 <_printf_i+0xbc>
 8003ea0:	680b      	ldr	r3, [r1, #0]
 8003ea2:	6825      	ldr	r5, [r4, #0]
 8003ea4:	1d18      	adds	r0, r3, #4
 8003ea6:	6008      	str	r0, [r1, #0]
 8003ea8:	0628      	lsls	r0, r5, #24
 8003eaa:	d501      	bpl.n	8003eb0 <_printf_i+0xec>
 8003eac:	681d      	ldr	r5, [r3, #0]
 8003eae:	e002      	b.n	8003eb6 <_printf_i+0xf2>
 8003eb0:	0669      	lsls	r1, r5, #25
 8003eb2:	d5fb      	bpl.n	8003eac <_printf_i+0xe8>
 8003eb4:	881d      	ldrh	r5, [r3, #0]
 8003eb6:	4854      	ldr	r0, [pc, #336]	; (8004008 <_printf_i+0x244>)
 8003eb8:	2f6f      	cmp	r7, #111	; 0x6f
 8003eba:	bf0c      	ite	eq
 8003ebc:	2308      	moveq	r3, #8
 8003ebe:	230a      	movne	r3, #10
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ec6:	6866      	ldr	r6, [r4, #4]
 8003ec8:	60a6      	str	r6, [r4, #8]
 8003eca:	2e00      	cmp	r6, #0
 8003ecc:	bfa2      	ittt	ge
 8003ece:	6821      	ldrge	r1, [r4, #0]
 8003ed0:	f021 0104 	bicge.w	r1, r1, #4
 8003ed4:	6021      	strge	r1, [r4, #0]
 8003ed6:	b90d      	cbnz	r5, 8003edc <_printf_i+0x118>
 8003ed8:	2e00      	cmp	r6, #0
 8003eda:	d04d      	beq.n	8003f78 <_printf_i+0x1b4>
 8003edc:	4616      	mov	r6, r2
 8003ede:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ee2:	fb03 5711 	mls	r7, r3, r1, r5
 8003ee6:	5dc7      	ldrb	r7, [r0, r7]
 8003ee8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003eec:	462f      	mov	r7, r5
 8003eee:	42bb      	cmp	r3, r7
 8003ef0:	460d      	mov	r5, r1
 8003ef2:	d9f4      	bls.n	8003ede <_printf_i+0x11a>
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d10b      	bne.n	8003f10 <_printf_i+0x14c>
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	07df      	lsls	r7, r3, #31
 8003efc:	d508      	bpl.n	8003f10 <_printf_i+0x14c>
 8003efe:	6923      	ldr	r3, [r4, #16]
 8003f00:	6861      	ldr	r1, [r4, #4]
 8003f02:	4299      	cmp	r1, r3
 8003f04:	bfde      	ittt	le
 8003f06:	2330      	movle	r3, #48	; 0x30
 8003f08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f0c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003f10:	1b92      	subs	r2, r2, r6
 8003f12:	6122      	str	r2, [r4, #16]
 8003f14:	f8cd a000 	str.w	sl, [sp]
 8003f18:	464b      	mov	r3, r9
 8003f1a:	aa03      	add	r2, sp, #12
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	4640      	mov	r0, r8
 8003f20:	f7ff fee2 	bl	8003ce8 <_printf_common>
 8003f24:	3001      	adds	r0, #1
 8003f26:	d14c      	bne.n	8003fc2 <_printf_i+0x1fe>
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f2c:	b004      	add	sp, #16
 8003f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f32:	4835      	ldr	r0, [pc, #212]	; (8004008 <_printf_i+0x244>)
 8003f34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	680e      	ldr	r6, [r1, #0]
 8003f3c:	061f      	lsls	r7, r3, #24
 8003f3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003f42:	600e      	str	r6, [r1, #0]
 8003f44:	d514      	bpl.n	8003f70 <_printf_i+0x1ac>
 8003f46:	07d9      	lsls	r1, r3, #31
 8003f48:	bf44      	itt	mi
 8003f4a:	f043 0320 	orrmi.w	r3, r3, #32
 8003f4e:	6023      	strmi	r3, [r4, #0]
 8003f50:	b91d      	cbnz	r5, 8003f5a <_printf_i+0x196>
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	f023 0320 	bic.w	r3, r3, #32
 8003f58:	6023      	str	r3, [r4, #0]
 8003f5a:	2310      	movs	r3, #16
 8003f5c:	e7b0      	b.n	8003ec0 <_printf_i+0xfc>
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	f043 0320 	orr.w	r3, r3, #32
 8003f64:	6023      	str	r3, [r4, #0]
 8003f66:	2378      	movs	r3, #120	; 0x78
 8003f68:	4828      	ldr	r0, [pc, #160]	; (800400c <_printf_i+0x248>)
 8003f6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f6e:	e7e3      	b.n	8003f38 <_printf_i+0x174>
 8003f70:	065e      	lsls	r6, r3, #25
 8003f72:	bf48      	it	mi
 8003f74:	b2ad      	uxthmi	r5, r5
 8003f76:	e7e6      	b.n	8003f46 <_printf_i+0x182>
 8003f78:	4616      	mov	r6, r2
 8003f7a:	e7bb      	b.n	8003ef4 <_printf_i+0x130>
 8003f7c:	680b      	ldr	r3, [r1, #0]
 8003f7e:	6826      	ldr	r6, [r4, #0]
 8003f80:	6960      	ldr	r0, [r4, #20]
 8003f82:	1d1d      	adds	r5, r3, #4
 8003f84:	600d      	str	r5, [r1, #0]
 8003f86:	0635      	lsls	r5, r6, #24
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	d501      	bpl.n	8003f90 <_printf_i+0x1cc>
 8003f8c:	6018      	str	r0, [r3, #0]
 8003f8e:	e002      	b.n	8003f96 <_printf_i+0x1d2>
 8003f90:	0671      	lsls	r1, r6, #25
 8003f92:	d5fb      	bpl.n	8003f8c <_printf_i+0x1c8>
 8003f94:	8018      	strh	r0, [r3, #0]
 8003f96:	2300      	movs	r3, #0
 8003f98:	6123      	str	r3, [r4, #16]
 8003f9a:	4616      	mov	r6, r2
 8003f9c:	e7ba      	b.n	8003f14 <_printf_i+0x150>
 8003f9e:	680b      	ldr	r3, [r1, #0]
 8003fa0:	1d1a      	adds	r2, r3, #4
 8003fa2:	600a      	str	r2, [r1, #0]
 8003fa4:	681e      	ldr	r6, [r3, #0]
 8003fa6:	6862      	ldr	r2, [r4, #4]
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4630      	mov	r0, r6
 8003fac:	f7fc f938 	bl	8000220 <memchr>
 8003fb0:	b108      	cbz	r0, 8003fb6 <_printf_i+0x1f2>
 8003fb2:	1b80      	subs	r0, r0, r6
 8003fb4:	6060      	str	r0, [r4, #4]
 8003fb6:	6863      	ldr	r3, [r4, #4]
 8003fb8:	6123      	str	r3, [r4, #16]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fc0:	e7a8      	b.n	8003f14 <_printf_i+0x150>
 8003fc2:	6923      	ldr	r3, [r4, #16]
 8003fc4:	4632      	mov	r2, r6
 8003fc6:	4649      	mov	r1, r9
 8003fc8:	4640      	mov	r0, r8
 8003fca:	47d0      	blx	sl
 8003fcc:	3001      	adds	r0, #1
 8003fce:	d0ab      	beq.n	8003f28 <_printf_i+0x164>
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	079b      	lsls	r3, r3, #30
 8003fd4:	d413      	bmi.n	8003ffe <_printf_i+0x23a>
 8003fd6:	68e0      	ldr	r0, [r4, #12]
 8003fd8:	9b03      	ldr	r3, [sp, #12]
 8003fda:	4298      	cmp	r0, r3
 8003fdc:	bfb8      	it	lt
 8003fde:	4618      	movlt	r0, r3
 8003fe0:	e7a4      	b.n	8003f2c <_printf_i+0x168>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	4632      	mov	r2, r6
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	4640      	mov	r0, r8
 8003fea:	47d0      	blx	sl
 8003fec:	3001      	adds	r0, #1
 8003fee:	d09b      	beq.n	8003f28 <_printf_i+0x164>
 8003ff0:	3501      	adds	r5, #1
 8003ff2:	68e3      	ldr	r3, [r4, #12]
 8003ff4:	9903      	ldr	r1, [sp, #12]
 8003ff6:	1a5b      	subs	r3, r3, r1
 8003ff8:	42ab      	cmp	r3, r5
 8003ffa:	dcf2      	bgt.n	8003fe2 <_printf_i+0x21e>
 8003ffc:	e7eb      	b.n	8003fd6 <_printf_i+0x212>
 8003ffe:	2500      	movs	r5, #0
 8004000:	f104 0619 	add.w	r6, r4, #25
 8004004:	e7f5      	b.n	8003ff2 <_printf_i+0x22e>
 8004006:	bf00      	nop
 8004008:	08004301 	.word	0x08004301
 800400c:	08004312 	.word	0x08004312

08004010 <_sbrk_r>:
 8004010:	b538      	push	{r3, r4, r5, lr}
 8004012:	4d06      	ldr	r5, [pc, #24]	; (800402c <_sbrk_r+0x1c>)
 8004014:	2300      	movs	r3, #0
 8004016:	4604      	mov	r4, r0
 8004018:	4608      	mov	r0, r1
 800401a:	602b      	str	r3, [r5, #0]
 800401c:	f7fc fd6c 	bl	8000af8 <_sbrk>
 8004020:	1c43      	adds	r3, r0, #1
 8004022:	d102      	bne.n	800402a <_sbrk_r+0x1a>
 8004024:	682b      	ldr	r3, [r5, #0]
 8004026:	b103      	cbz	r3, 800402a <_sbrk_r+0x1a>
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	bd38      	pop	{r3, r4, r5, pc}
 800402c:	20000178 	.word	0x20000178

08004030 <__sread>:
 8004030:	b510      	push	{r4, lr}
 8004032:	460c      	mov	r4, r1
 8004034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004038:	f000 f8a0 	bl	800417c <_read_r>
 800403c:	2800      	cmp	r0, #0
 800403e:	bfab      	itete	ge
 8004040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004042:	89a3      	ldrhlt	r3, [r4, #12]
 8004044:	181b      	addge	r3, r3, r0
 8004046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800404a:	bfac      	ite	ge
 800404c:	6563      	strge	r3, [r4, #84]	; 0x54
 800404e:	81a3      	strhlt	r3, [r4, #12]
 8004050:	bd10      	pop	{r4, pc}

08004052 <__swrite>:
 8004052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004056:	461f      	mov	r7, r3
 8004058:	898b      	ldrh	r3, [r1, #12]
 800405a:	05db      	lsls	r3, r3, #23
 800405c:	4605      	mov	r5, r0
 800405e:	460c      	mov	r4, r1
 8004060:	4616      	mov	r6, r2
 8004062:	d505      	bpl.n	8004070 <__swrite+0x1e>
 8004064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004068:	2302      	movs	r3, #2
 800406a:	2200      	movs	r2, #0
 800406c:	f000 f868 	bl	8004140 <_lseek_r>
 8004070:	89a3      	ldrh	r3, [r4, #12]
 8004072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800407a:	81a3      	strh	r3, [r4, #12]
 800407c:	4632      	mov	r2, r6
 800407e:	463b      	mov	r3, r7
 8004080:	4628      	mov	r0, r5
 8004082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004086:	f000 b817 	b.w	80040b8 <_write_r>

0800408a <__sseek>:
 800408a:	b510      	push	{r4, lr}
 800408c:	460c      	mov	r4, r1
 800408e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004092:	f000 f855 	bl	8004140 <_lseek_r>
 8004096:	1c43      	adds	r3, r0, #1
 8004098:	89a3      	ldrh	r3, [r4, #12]
 800409a:	bf15      	itete	ne
 800409c:	6560      	strne	r0, [r4, #84]	; 0x54
 800409e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80040a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80040a6:	81a3      	strheq	r3, [r4, #12]
 80040a8:	bf18      	it	ne
 80040aa:	81a3      	strhne	r3, [r4, #12]
 80040ac:	bd10      	pop	{r4, pc}

080040ae <__sclose>:
 80040ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040b2:	f000 b813 	b.w	80040dc <_close_r>
	...

080040b8 <_write_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	4d07      	ldr	r5, [pc, #28]	; (80040d8 <_write_r+0x20>)
 80040bc:	4604      	mov	r4, r0
 80040be:	4608      	mov	r0, r1
 80040c0:	4611      	mov	r1, r2
 80040c2:	2200      	movs	r2, #0
 80040c4:	602a      	str	r2, [r5, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	f7fc fcc5 	bl	8000a56 <_write>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d102      	bne.n	80040d6 <_write_r+0x1e>
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	b103      	cbz	r3, 80040d6 <_write_r+0x1e>
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
 80040d8:	20000178 	.word	0x20000178

080040dc <_close_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	4d06      	ldr	r5, [pc, #24]	; (80040f8 <_close_r+0x1c>)
 80040e0:	2300      	movs	r3, #0
 80040e2:	4604      	mov	r4, r0
 80040e4:	4608      	mov	r0, r1
 80040e6:	602b      	str	r3, [r5, #0]
 80040e8:	f7fc fcd1 	bl	8000a8e <_close>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d102      	bne.n	80040f6 <_close_r+0x1a>
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	b103      	cbz	r3, 80040f6 <_close_r+0x1a>
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	20000178 	.word	0x20000178

080040fc <_fstat_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4d07      	ldr	r5, [pc, #28]	; (800411c <_fstat_r+0x20>)
 8004100:	2300      	movs	r3, #0
 8004102:	4604      	mov	r4, r0
 8004104:	4608      	mov	r0, r1
 8004106:	4611      	mov	r1, r2
 8004108:	602b      	str	r3, [r5, #0]
 800410a:	f7fc fccc 	bl	8000aa6 <_fstat>
 800410e:	1c43      	adds	r3, r0, #1
 8004110:	d102      	bne.n	8004118 <_fstat_r+0x1c>
 8004112:	682b      	ldr	r3, [r5, #0]
 8004114:	b103      	cbz	r3, 8004118 <_fstat_r+0x1c>
 8004116:	6023      	str	r3, [r4, #0]
 8004118:	bd38      	pop	{r3, r4, r5, pc}
 800411a:	bf00      	nop
 800411c:	20000178 	.word	0x20000178

08004120 <_isatty_r>:
 8004120:	b538      	push	{r3, r4, r5, lr}
 8004122:	4d06      	ldr	r5, [pc, #24]	; (800413c <_isatty_r+0x1c>)
 8004124:	2300      	movs	r3, #0
 8004126:	4604      	mov	r4, r0
 8004128:	4608      	mov	r0, r1
 800412a:	602b      	str	r3, [r5, #0]
 800412c:	f7fc fccb 	bl	8000ac6 <_isatty>
 8004130:	1c43      	adds	r3, r0, #1
 8004132:	d102      	bne.n	800413a <_isatty_r+0x1a>
 8004134:	682b      	ldr	r3, [r5, #0]
 8004136:	b103      	cbz	r3, 800413a <_isatty_r+0x1a>
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	bd38      	pop	{r3, r4, r5, pc}
 800413c:	20000178 	.word	0x20000178

08004140 <_lseek_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	4d07      	ldr	r5, [pc, #28]	; (8004160 <_lseek_r+0x20>)
 8004144:	4604      	mov	r4, r0
 8004146:	4608      	mov	r0, r1
 8004148:	4611      	mov	r1, r2
 800414a:	2200      	movs	r2, #0
 800414c:	602a      	str	r2, [r5, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	f7fc fcc4 	bl	8000adc <_lseek>
 8004154:	1c43      	adds	r3, r0, #1
 8004156:	d102      	bne.n	800415e <_lseek_r+0x1e>
 8004158:	682b      	ldr	r3, [r5, #0]
 800415a:	b103      	cbz	r3, 800415e <_lseek_r+0x1e>
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	bd38      	pop	{r3, r4, r5, pc}
 8004160:	20000178 	.word	0x20000178

08004164 <__malloc_lock>:
 8004164:	4801      	ldr	r0, [pc, #4]	; (800416c <__malloc_lock+0x8>)
 8004166:	f7ff bb55 	b.w	8003814 <__retarget_lock_acquire_recursive>
 800416a:	bf00      	nop
 800416c:	20000170 	.word	0x20000170

08004170 <__malloc_unlock>:
 8004170:	4801      	ldr	r0, [pc, #4]	; (8004178 <__malloc_unlock+0x8>)
 8004172:	f7ff bb50 	b.w	8003816 <__retarget_lock_release_recursive>
 8004176:	bf00      	nop
 8004178:	20000170 	.word	0x20000170

0800417c <_read_r>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4d07      	ldr	r5, [pc, #28]	; (800419c <_read_r+0x20>)
 8004180:	4604      	mov	r4, r0
 8004182:	4608      	mov	r0, r1
 8004184:	4611      	mov	r1, r2
 8004186:	2200      	movs	r2, #0
 8004188:	602a      	str	r2, [r5, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	f7fc fc46 	bl	8000a1c <_read>
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	d102      	bne.n	800419a <_read_r+0x1e>
 8004194:	682b      	ldr	r3, [r5, #0]
 8004196:	b103      	cbz	r3, 800419a <_read_r+0x1e>
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	bd38      	pop	{r3, r4, r5, pc}
 800419c:	20000178 	.word	0x20000178

080041a0 <_init>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	bf00      	nop
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr

080041ac <_fini>:
 80041ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ae:	bf00      	nop
 80041b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b2:	bc08      	pop	{r3}
 80041b4:	469e      	mov	lr, r3
 80041b6:	4770      	bx	lr
