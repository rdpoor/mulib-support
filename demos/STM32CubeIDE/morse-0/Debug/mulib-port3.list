
morse-0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e68  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001040  08001040  00011040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001058  08001058  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001058  08001058  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001058  08001058  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001058  08001058  00011058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800105c  0800105c  0001105c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  0800106c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  0800106c  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c40  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a42  00000000  00000000  00028c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0002a6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  0002ae88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cffa  00000000  00000000  0002b590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086e2  00000000  00000000  0004858a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b02d0  00000000  00000000  00050c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100f3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf8  00000000  00000000  00100f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001028 	.word	0x08001028

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08001028 	.word	0x08001028

08000218 <counting_task_fn>:

typedef struct {
	mu_task_t task;
} idle_task_t;

static void counting_task_fn(void *ctx, void *arg) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	//counting_task_t *counting_task = (counting_task_t *)ctx;

	//increment_call_count(counting_task);
	//ASSERT(&counting_task->task == mu_sched_get_current_task());
	//ASSERT(mu_sched_get_task_status(&counting_task->task) == MU_SCHED_TASK_STATUS_ACTIVE);
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000222:	2120      	movs	r1, #32
 8000224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000228:	f000 feb0 	bl	8000f8c <HAL_GPIO_TogglePin>
}
 800022c:	bf00      	nop
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}

08000234 <counting_task_init>:

static counting_task_t* counting_task_init(counting_task_t *counting_task,
		char *name) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
	mu_task_init(&counting_task->task, counting_task_fn, counting_task, name);
 800023e:	6878      	ldr	r0, [r7, #4]
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	4903      	ldr	r1, [pc, #12]	; (8000254 <counting_task_init+0x20>)
 8000246:	f000 fabb 	bl	80007c0 <mu_task_init>
	//reset_call_count(counting_task);

	return counting_task;
 800024a:	687b      	ldr	r3, [r7, #4]
}
 800024c:	4618      	mov	r0, r3
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	08000219 	.word	0x08000219

08000258 <main>:
static idle_task_t* idle_task_init(idle_task_t *idle_task, char *name) {
	mu_task_init(&idle_task->task, idle_task_fn, idle_task, name);
	return idle_task;
}

int main(void) {
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	static idle_task_t s_idle_task;
	static counting_task_t s_counting_task1;


	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800025c:	f000 fb85 	bl	800096a <HAL_Init>

	// SystemClock_Config();

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000260:	f000 f818 	bl	8000294 <MX_GPIO_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//printf("sdfsdsfds\n");

	  mu_time_init();   // initialize the timer functions
 8000264:	f000 fb25 	bl	80008b2 <mu_time_init>
	  mu_sched_init();  // set up the scheduler
 8000268:	f000 f998 	bl	800059c <mu_sched_init>


	// idle_task_init(&s_idle_task, "Idle Task");
	// mu_sched_set_idle_task(&s_idle_task.task);

	HAL_Delay(500);
 800026c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000270:	f000 fbec 	bl	8000a4c <HAL_Delay>

	counting_task_init(&s_counting_task1, "Counting Task 1");
 8000274:	4905      	ldr	r1, [pc, #20]	; (800028c <main+0x34>)
 8000276:	4806      	ldr	r0, [pc, #24]	; (8000290 <main+0x38>)
 8000278:	f7ff ffdc 	bl	8000234 <counting_task_init>
	// mu_sched_task_now(&s_counting_task1.task);
	mu_sched_task_at(&s_counting_task1.task, 3000);
 800027c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000280:	4803      	ldr	r0, [pc, #12]	; (8000290 <main+0x38>)
 8000282:	f000 f9f3 	bl	800066c <mu_sched_task_at>
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	while (1) {
	//	HAL_Delay(500);
		//counting_task_fn(1, 1);
		mu_sched_step();
 8000286:	f000 f9bf 	bl	8000608 <mu_sched_step>
 800028a:	e7fc      	b.n	8000286 <main+0x2e>
 800028c:	08001040 	.word	0x08001040
 8000290:	20000028 	.word	0x20000028

08000294 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b08a      	sub	sp, #40	; 0x28
 8000298:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800029a:	f107 0314 	add.w	r3, r7, #20
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80002aa:	4b33      	ldr	r3, [pc, #204]	; (8000378 <MX_GPIO_Init+0xe4>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ae:	4a32      	ldr	r2, [pc, #200]	; (8000378 <MX_GPIO_Init+0xe4>)
 80002b0:	f043 0304 	orr.w	r3, r3, #4
 80002b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002b6:	4b30      	ldr	r3, [pc, #192]	; (8000378 <MX_GPIO_Init+0xe4>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	f003 0304 	and.w	r3, r3, #4
 80002be:	613b      	str	r3, [r7, #16]
 80002c0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80002c2:	4b2d      	ldr	r3, [pc, #180]	; (8000378 <MX_GPIO_Init+0xe4>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	4a2c      	ldr	r2, [pc, #176]	; (8000378 <MX_GPIO_Init+0xe4>)
 80002c8:	f043 0320 	orr.w	r3, r3, #32
 80002cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ce:	4b2a      	ldr	r3, [pc, #168]	; (8000378 <MX_GPIO_Init+0xe4>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	f003 0320 	and.w	r3, r3, #32
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002da:	4b27      	ldr	r3, [pc, #156]	; (8000378 <MX_GPIO_Init+0xe4>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	4a26      	ldr	r2, [pc, #152]	; (8000378 <MX_GPIO_Init+0xe4>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e6:	4b24      	ldr	r3, [pc, #144]	; (8000378 <MX_GPIO_Init+0xe4>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	60bb      	str	r3, [r7, #8]
 80002f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80002f2:	4b21      	ldr	r3, [pc, #132]	; (8000378 <MX_GPIO_Init+0xe4>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f6:	4a20      	ldr	r2, [pc, #128]	; (8000378 <MX_GPIO_Init+0xe4>)
 80002f8:	f043 0302 	orr.w	r3, r3, #2
 80002fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002fe:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <MX_GPIO_Init+0xe4>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000302:	f003 0302 	and.w	r3, r3, #2
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	2120      	movs	r1, #32
 800030e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000312:	f000 fe23 	bl	8000f5c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800031c:	4b17      	ldr	r3, [pc, #92]	; (800037c <MX_GPIO_Init+0xe8>)
 800031e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	2300      	movs	r3, #0
 8000322:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000324:	f107 0314 	add.w	r3, r7, #20
 8000328:	4619      	mov	r1, r3
 800032a:	4815      	ldr	r0, [pc, #84]	; (8000380 <MX_GPIO_Init+0xec>)
 800032c:	f000 fc94 	bl	8000c58 <HAL_GPIO_Init>

	/*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
	GPIO_InitStruct.Pin = LPUART1_TX_Pin | LPUART1_RX_Pin;
 8000330:	230c      	movs	r3, #12
 8000332:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000334:	2302      	movs	r3, #2
 8000336:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000338:	2300      	movs	r3, #0
 800033a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033c:	2300      	movs	r3, #0
 800033e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000340:	230c      	movs	r3, #12
 8000342:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000344:	f107 0314 	add.w	r3, r7, #20
 8000348:	4619      	mov	r1, r3
 800034a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034e:	f000 fc83 	bl	8000c58 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000352:	2320      	movs	r3, #32
 8000354:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000356:	2301      	movs	r3, #1
 8000358:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035e:	2300      	movs	r3, #0
 8000360:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000362:	f107 0314 	add.w	r3, r7, #20
 8000366:	4619      	mov	r1, r3
 8000368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036c:	f000 fc74 	bl	8000c58 <HAL_GPIO_Init>

}
 8000370:	bf00      	nop
 8000372:	3728      	adds	r7, #40	; 0x28
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40021000 	.word	0x40021000
 800037c:	10110000 	.word	0x10110000
 8000380:	48000800 	.word	0x48000800

08000384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <HAL_MspInit+0x44>)
 800038c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800038e:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <HAL_MspInit+0x44>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6613      	str	r3, [r2, #96]	; 0x60
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <HAL_MspInit+0x44>)
 8000398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <HAL_MspInit+0x44>)
 80003a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003a6:	4a08      	ldr	r2, [pc, #32]	; (80003c8 <HAL_MspInit+0x44>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ac:	6593      	str	r3, [r2, #88]	; 0x58
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <HAL_MspInit+0x44>)
 80003b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80003ba:	f000 fe01 	bl	8000fc0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000

080003cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <NMI_Handler+0x4>

080003d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d6:	e7fe      	b.n	80003d6 <HardFault_Handler+0x4>

080003d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <MemManage_Handler+0x4>

080003de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <BusFault_Handler+0x4>

080003e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <UsageFault_Handler+0x4>

080003ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr

080003f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000418:	f000 fafa 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}

08000420 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <SystemInit+0x20>)
 8000426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800042a:	4a05      	ldr	r2, [pc, #20]	; (8000440 <SystemInit+0x20>)
 800042c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	e000ed00 	.word	0xe000ed00

08000444 <mu_dlist_init>:
// public code

// =============================================================================
// operations on individual list elements

mu_dlist_t *mu_dlist_init(mu_dlist_t *e) {
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  e->next = e->prev = e;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	605a      	str	r2, [r3, #4]
  return e;
 800045a:	687b      	ldr	r3, [r7, #4]
}
 800045c:	4618      	mov	r0, r3
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr

08000468 <mu_dlist_is_empty>:

bool mu_dlist_is_empty(mu_dlist_t *e) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  return mu_dlist_next(e) == e;
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f000 f80b 	bl	800048c <mu_dlist_next>
 8000476:	4602      	mov	r2, r0
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4293      	cmp	r3, r2
 800047c:	bf0c      	ite	eq
 800047e:	2301      	moveq	r3, #1
 8000480:	2300      	movne	r3, #0
 8000482:	b2db      	uxtb	r3, r3
}
 8000484:	4618      	mov	r0, r3
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <mu_dlist_next>:

mu_dlist_t *mu_dlist_next(mu_dlist_t *element) {
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  return element->next;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	685b      	ldr	r3, [r3, #4]
}
 8000498:	4618      	mov	r0, r3
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <mu_dlist_insert_prev>:
  list->next->prev = e;
  list->next = e;
  return e;
}

mu_dlist_t *mu_dlist_insert_prev(mu_dlist_t *list, mu_dlist_t *e) {
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
  e->next = list;
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	605a      	str	r2, [r3, #4]
  e->prev = list->prev;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	601a      	str	r2, [r3, #0]
  list->prev->next = e;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	683a      	ldr	r2, [r7, #0]
 80004c2:	605a      	str	r2, [r3, #4]
  list->prev = e;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	683a      	ldr	r2, [r7, #0]
 80004c8:	601a      	str	r2, [r3, #0]
  return e;
 80004ca:	683b      	ldr	r3, [r7, #0]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr

080004d8 <mu_dlist_is_linked>:

bool mu_dlist_is_linked(mu_dlist_t *e) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  return !mu_dlist_is_empty(e);
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f7ff ffc1 	bl	8000468 <mu_dlist_is_empty>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	bf14      	ite	ne
 80004ec:	2301      	movne	r3, #1
 80004ee:	2300      	moveq	r3, #0
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	f083 0301 	eor.w	r3, r3, #1
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	f003 0301 	and.w	r3, r3, #1
 80004fc:	b2db      	uxtb	r3, r3
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <mu_dlist_unlink>:

mu_dlist_t *mu_dlist_unlink(mu_dlist_t *e) {
 8000506:	b580      	push	{r7, lr}
 8000508:	b082      	sub	sp, #8
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
  if (mu_dlist_is_linked(e)) {
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f7ff ffe2 	bl	80004d8 <mu_dlist_is_linked>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d00e      	beq.n	8000538 <mu_dlist_unlink+0x32>
    e->prev->next = e->next;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	6852      	ldr	r2, [r2, #4]
 8000522:	605a      	str	r2, [r3, #4]
    e->next->prev = e->prev;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	6812      	ldr	r2, [r2, #0]
 800052c:	601a      	str	r2, [r3, #0]
    return mu_dlist_init(e);
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f7ff ff88 	bl	8000444 <mu_dlist_init>
 8000534:	4603      	mov	r3, r0
 8000536:	e000      	b.n	800053a <mu_dlist_unlink+0x34>
  } else {
    return NULL;
 8000538:	2300      	movs	r3, #0
  }
}
 800053a:	4618      	mov	r0, r3
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <mu_dlist_first>:

// =============================================================================
// operations on a list head

mu_dlist_t *mu_dlist_first(mu_dlist_t *head) {
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
  if (mu_dlist_is_empty(head)) {
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff ff8c 	bl	8000468 <mu_dlist_is_empty>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <mu_dlist_first+0x18>
    return NULL;
 8000556:	2300      	movs	r3, #0
 8000558:	e003      	b.n	8000562 <mu_dlist_first+0x20>
  } else {
    return mu_dlist_next(head);
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f7ff ff96 	bl	800048c <mu_dlist_next>
 8000560:	4603      	mov	r3, r0
  }
}
 8000562:	4618      	mov	r0, r3
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <mu_dlist_pop>:
mu_dlist_t *mu_dlist_push_prev(mu_dlist_t *head, mu_dlist_t *e) {
  mu_dlist_insert_prev(head, e);
  return head;
}

mu_dlist_t *mu_dlist_pop(mu_dlist_t *head) {
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  if (mu_dlist_is_empty(head)) {
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f7ff ff78 	bl	8000468 <mu_dlist_is_empty>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <mu_dlist_pop+0x18>
    return NULL;
 800057e:	2300      	movs	r3, #0
 8000580:	e007      	b.n	8000592 <mu_dlist_pop+0x28>
  } else {
    return mu_dlist_unlink(mu_dlist_next(head));
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f7ff ff82 	bl	800048c <mu_dlist_next>
 8000588:	4603      	mov	r3, r0
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ffbb 	bl	8000506 <mu_dlist_unlink>
 8000590:	4603      	mov	r3, r0
  }
}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <mu_sched_init>:
static mu_task_t s_default_idle_task;

// =============================================================================
// public code

void mu_sched_init() {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  s_sched.clock_fn = mu_time_now;
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <mu_sched_init+0x2c>)
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <mu_sched_init+0x30>)
 80005a4:	611a      	str	r2, [r3, #16]
  s_sched.idle_task = &s_default_idle_task;
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <mu_sched_init+0x2c>)
 80005a8:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <mu_sched_init+0x34>)
 80005aa:	615a      	str	r2, [r3, #20]
  mu_task_init(&s_default_idle_task, default_idle_fn, NULL, "Idle");
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <mu_sched_init+0x38>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	4909      	ldr	r1, [pc, #36]	; (80005d8 <mu_sched_init+0x3c>)
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <mu_sched_init+0x34>)
 80005b4:	f000 f904 	bl	80007c0 <mu_task_init>

  mu_dlist_init(&s_sched.task_list);
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <mu_sched_init+0x2c>)
 80005ba:	f7ff ff43 	bl	8000444 <mu_dlist_init>
  mu_sched_reset();
 80005be:	f000 f80d 	bl	80005dc <mu_sched_reset>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000040 	.word	0x20000040
 80005cc:	080008c1 	.word	0x080008c1
 80005d0:	2000005c 	.word	0x2000005c
 80005d4:	08001050 	.word	0x08001050
 80005d8:	0800068f 	.word	0x0800068f

080005dc <mu_sched_reset>:

void mu_sched_reset(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  while (!mu_dlist_is_empty(&s_sched.task_list)) {
 80005e0:	e002      	b.n	80005e8 <mu_sched_reset+0xc>
    mu_dlist_pop(&s_sched.task_list);
 80005e2:	4808      	ldr	r0, [pc, #32]	; (8000604 <mu_sched_reset+0x28>)
 80005e4:	f7ff ffc1 	bl	800056a <mu_dlist_pop>
  while (!mu_dlist_is_empty(&s_sched.task_list)) {
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <mu_sched_reset+0x28>)
 80005ea:	f7ff ff3d 	bl	8000468 <mu_dlist_is_empty>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f083 0301 	eor.w	r3, r3, #1
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f3      	bne.n	80005e2 <mu_sched_reset+0x6>
  }
  s_sched.current_task = NULL;
 80005fa:	4b02      	ldr	r3, [pc, #8]	; (8000604 <mu_sched_reset+0x28>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000040 	.word	0x20000040

08000608 <mu_sched_step>:

mu_sched_err_t mu_sched_step(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  mu_time_t now = mu_sched_get_current_time();
 800060e:	f000 f823 	bl	8000658 <mu_sched_get_current_time>
 8000612:	6078      	str	r0, [r7, #4]
  //while ((irq_task = pop_irq_task()) != NULL) {
  //  sched_task(irq_task);
  //}

  // process one task in the main queue
  if ((s_sched.current_task = get_runnable_task(now)) != NULL) {
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f859 	bl	80006cc <get_runnable_task>
 800061a:	4603      	mov	r3, r0
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <mu_sched_step+0x4c>)
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <mu_sched_step+0x4c>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d009      	beq.n	800063c <mu_sched_step+0x34>
    mu_task_call(s_sched.current_task, NULL);
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <mu_sched_step+0x4c>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f905 	bl	800083e <mu_task_call>
    s_sched.current_task = NULL;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <mu_sched_step+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
 800063a:	e005      	b.n	8000648 <mu_sched_step+0x40>
  } else {
    mu_task_call(s_sched.idle_task, NULL);
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <mu_sched_step+0x4c>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f8fb 	bl	800083e <mu_task_call>
  }
  return MU_SCHED_ERR_NONE;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000040 	.word	0x20000040

08000658 <mu_sched_get_current_time>:

void mu_sched_set_clock_source(mu_clock_fn clock_fn) {
  s_sched.clock_fn = clock_fn;
}

mu_time_t mu_sched_get_current_time(void) { return s_sched.clock_fn(); }
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
 800065c:	4b02      	ldr	r3, [pc, #8]	; (8000668 <mu_sched_get_current_time+0x10>)
 800065e:	691b      	ldr	r3, [r3, #16]
 8000660:	4798      	blx	r3
 8000662:	4603      	mov	r3, r0
 8000664:	4618      	mov	r0, r3
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000040 	.word	0x20000040

0800066c <mu_sched_task_at>:
mu_sched_err_t mu_sched_task_now(mu_task_t *task) {
  mu_task_set_time(task, mu_sched_get_current_time());
  return sched_task(task);
}

mu_sched_err_t mu_sched_task_at(mu_task_t *task, mu_time_t at) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
  mu_task_set_time(task, at);
 8000676:	6839      	ldr	r1, [r7, #0]
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f000 f8d2 	bl	8000822 <mu_task_set_time>
  return sched_task(task);
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f000 f84c 	bl	800071c <sched_task>
 8000684:	4603      	mov	r3, r0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <default_idle_fn>:
}

// =============================================================================
// local (static) code

static void default_idle_fn(void *self, void *arg) {
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]
  (void)(self);
  (void)(arg);
  // the default idle task doesn't do much...
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <get_next_task>:

static mu_task_t *get_next_task(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
  mu_dlist_t *link = mu_dlist_first(&s_sched.task_list);
 80006aa:	4807      	ldr	r0, [pc, #28]	; (80006c8 <get_next_task+0x24>)
 80006ac:	f7ff ff49 	bl	8000542 <mu_dlist_first>
 80006b0:	6078      	str	r0, [r7, #4]
  if (link != NULL) {
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <get_next_task+0x18>
    return MU_DLIST_CONTAINER(link, mu_task_t, link);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	e000      	b.n	80006be <get_next_task+0x1a>
  } else {
    return NULL;
 80006bc:	2300      	movs	r3, #0
  }
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000040 	.word	0x20000040

080006cc <get_runnable_task>:

static mu_task_t *get_runnable_task(mu_time_t now) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  mu_task_t *task = NULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]

  task = get_next_task(); // peek at next task.
 80006d8:	f7ff ffe4 	bl	80006a4 <get_next_task>
 80006dc:	60f8      	str	r0, [r7, #12]
  if ((task != NULL) && !mu_time_follows(mu_task_get_time(task), now)) {
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d011      	beq.n	8000708 <get_runnable_task+0x3c>
 80006e4:	68f8      	ldr	r0, [r7, #12]
 80006e6:	f000 f890 	bl	800080a <mu_task_get_time>
 80006ea:	4603      	mov	r3, r0
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f8ff 	bl	80008f2 <mu_time_follows>
 80006f4:	4603      	mov	r3, r0
 80006f6:	f083 0301 	eor.w	r3, r3, #1
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d003      	beq.n	8000708 <get_runnable_task+0x3c>
    // time to run the task: pop from queue
    mu_dlist_pop(&s_sched.task_list);
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <get_runnable_task+0x4c>)
 8000702:	f7ff ff32 	bl	800056a <mu_dlist_pop>
 8000706:	e001      	b.n	800070c <get_runnable_task+0x40>
  } else {
    task = NULL;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
  }
  return task;
 800070c:	68fb      	ldr	r3, [r7, #12]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000040 	.word	0x20000040

0800071c <sched_task>:

static mu_sched_err_t sched_task(mu_task_t *task) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  mu_time_t time = mu_task_get_time(task);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 f870 	bl	800080a <mu_task_get_time>
 800072a:	60f8      	str	r0, [r7, #12]
  mu_dlist_unlink(mu_task_link(task));
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f000 f861 	bl	80007f4 <mu_task_link>
 8000732:	4603      	mov	r3, r0
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fee6 	bl	8000506 <mu_dlist_unlink>
  mu_dlist_t *list = find_insertion_point(&s_sched.task_list, time);
 800073a:	68f9      	ldr	r1, [r7, #12]
 800073c:	4808      	ldr	r0, [pc, #32]	; (8000760 <sched_task+0x44>)
 800073e:	f000 f811 	bl	8000764 <find_insertion_point>
 8000742:	60b8      	str	r0, [r7, #8]
  mu_dlist_insert_prev(list, mu_task_link(task));
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f855 	bl	80007f4 <mu_task_link>
 800074a:	4603      	mov	r3, r0
 800074c:	4619      	mov	r1, r3
 800074e:	68b8      	ldr	r0, [r7, #8]
 8000750:	f7ff fea8 	bl	80004a4 <mu_dlist_insert_prev>
  return MU_SCHED_ERR_NONE;
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000040 	.word	0x20000040

08000764 <find_insertion_point>:
 * The list head is considered older than all times, so the task can
 * always be inserted before it.  And because a dlist is essentially
 * circular, this function is guaranteed to always return a non-null
 * list element.
 */
static mu_dlist_t *find_insertion_point(mu_dlist_t *head, mu_time_t time) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
  if (mu_dlist_is_empty(head)) {
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff fe7a 	bl	8000468 <mu_dlist_is_empty>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <find_insertion_point+0x1a>
    return head;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	e01c      	b.n	80007b8 <find_insertion_point+0x54>
  } else {
    mu_dlist_t *list = mu_dlist_next(head);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fe84 	bl	800048c <mu_dlist_next>
 8000784:	60f8      	str	r0, [r7, #12]
    while (list != head) {
 8000786:	e010      	b.n	80007aa <find_insertion_point+0x46>
      mu_task_t *incumbent = MU_DLIST_CONTAINER(list, mu_task_t, link);
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	60bb      	str	r3, [r7, #8]
      if (mu_time_precedes(time, mu_task_get_time(incumbent))) {
 800078c:	68b8      	ldr	r0, [r7, #8]
 800078e:	f000 f83c 	bl	800080a <mu_task_get_time>
 8000792:	4603      	mov	r3, r0
 8000794:	4619      	mov	r1, r3
 8000796:	6838      	ldr	r0, [r7, #0]
 8000798:	f000 f899 	bl	80008ce <mu_time_precedes>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d108      	bne.n	80007b4 <find_insertion_point+0x50>
        break;
      }
      list = mu_dlist_next(list);
 80007a2:	68f8      	ldr	r0, [r7, #12]
 80007a4:	f7ff fe72 	bl	800048c <mu_dlist_next>
 80007a8:	60f8      	str	r0, [r7, #12]
    while (list != head) {
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d1ea      	bne.n	8000788 <find_insertion_point+0x24>
 80007b2:	e000      	b.n	80007b6 <find_insertion_point+0x52>
        break;
 80007b4:	bf00      	nop
    }
    return list;
 80007b6:	68fb      	ldr	r3, [r7, #12]
  }
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <mu_task_init>:
// public code

mu_task_t *mu_task_init(mu_task_t *task,
                        mu_thunk_fn fn,
                        void *ctx,
                        const char *name) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	603b      	str	r3, [r7, #0]
  mu_dlist_init(&task->link);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fe37 	bl	8000444 <mu_dlist_init>
  task->time = 0;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  mu_thunk_init(&task->thunk, fn, ctx);
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	330c      	adds	r3, #12
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f83d 	bl	8000864 <mu_thunk_init>
  task->name = name;
  task->call_count = 0;
  task->runtime = 0;
  task->max_duration = 0;
#endif
  return task;
 80007ea:	68fb      	ldr	r3, [r7, #12]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <mu_task_link>:

mu_dlist_t *mu_task_link(mu_task_t *task) {
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  return &task->link;
 80007fc:	687b      	ldr	r3, [r7, #4]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <mu_task_get_time>:

mu_time_t mu_task_get_time(mu_task_t *task) {
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  return task->time;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	689b      	ldr	r3, [r3, #8]
}
 8000816:	4618      	mov	r0, r3
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <mu_task_set_time>:

void mu_task_set_time(mu_task_t *task, mu_time_t time) {
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	6039      	str	r1, [r7, #0]
  task->time = time;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	683a      	ldr	r2, [r7, #0]
 8000830:	609a      	str	r2, [r3, #8]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <mu_task_call>:
#else
  return "";
#endif
}

void mu_task_call(mu_task_t *task, void *arg) {
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	6039      	str	r1, [r7, #0]
  if (task == NULL) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d006      	beq.n	800085c <mu_task_call+0x1e>
  }

#if (MU_TASK_PROFILING)
  mu_time_t called_at = mu_time_now();
#endif
  mu_thunk_call(&task->thunk, arg);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	330c      	adds	r3, #12
 8000852:	6839      	ldr	r1, [r7, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f818 	bl	800088a <mu_thunk_call>
 800085a:	e000      	b.n	800085e <mu_task_call+0x20>
    return;
 800085c:	bf00      	nop
  task->call_count += 1;
  mu_time_dt duration = mu_time_difference(mu_time_now(), called_at);
  task->runtime += duration;
  if (duration > task->max_duration) task->max_duration = duration;
#endif
}
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <mu_thunk_init>:
// Local storage

// =============================================================================
// Public code

mu_thunk_t *mu_thunk_init(mu_thunk_t *thunk, mu_thunk_fn fn, void *ctx) {
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  thunk->fn = fn;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	601a      	str	r2, [r3, #0]
  thunk->ctx = ctx;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	605a      	str	r2, [r3, #4]
  return thunk;
 800087c:	68fb      	ldr	r3, [r7, #12]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <mu_thunk_call>:

mu_thunk_fn mu_thunk_get_fn(mu_thunk_t *thunk) { return thunk->fn; }

void *mu_thunk_get_ctx(mu_thunk_t *thunk) { return thunk->ctx; }

void mu_thunk_call(mu_thunk_t *thunk, void *arg) {
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	6039      	str	r1, [r7, #0]
  if (thunk == NULL) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d007      	beq.n	80008aa <mu_thunk_call+0x20>
    // allow null thunk arg => no-op
    return;
  }
  thunk->fn(thunk->ctx, arg);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	6852      	ldr	r2, [r2, #4]
 80008a2:	6839      	ldr	r1, [r7, #0]
 80008a4:	4610      	mov	r0, r2
 80008a6:	4798      	blx	r3
 80008a8:	e000      	b.n	80008ac <mu_thunk_call+0x22>
    return;
 80008aa:	bf00      	nop
}
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <mu_time_init>:

#include <stm32g4xx.h>



mu_time_init(void) {
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  // no initialization required

}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <mu_time_now>:
/**
 * @brief Get the current system time.
 *
 * @return A value representing the current time.
 */
mu_time_t mu_time_now() {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  //struct timespec now;
  //clock_gettime(CLOCK_REALTIME, &now);
  //return now.tv_sec + now.tv_nsec / 1000000000.0;
	return HAL_GetTick();
 80008c4:	f000 f8b6 	bl	8000a34 <HAL_GetTick>
 80008c8:	4603      	mov	r3, r0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}

080008ce <mu_time_precedes>:
 *
 * @param t1 A time object
 * @param t2 A time object
 * @return true if t1 is strictly before t2, false otherwise.
 */
bool mu_time_precedes(mu_time_t t1, mu_time_t t2) {
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	6039      	str	r1, [r7, #0]
  return t1 < t2;
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	429a      	cmp	r2, r3
 80008de:	bf34      	ite	cc
 80008e0:	2301      	movcc	r3, #1
 80008e2:	2300      	movcs	r3, #0
 80008e4:	b2db      	uxtb	r3, r3
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <mu_time_follows>:
 *
 * @param t1 A time object
 * @param t2 A time object
 * @return true if t1 is strictly after t2, false otherwise.
 */
bool mu_time_follows(mu_time_t t1, mu_time_t t2) {
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	6039      	str	r1, [r7, #0]
  return t1 > t2;
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	429a      	cmp	r2, r3
 8000902:	bf8c      	ite	hi
 8000904:	2301      	movhi	r3, #1
 8000906:	2300      	movls	r3, #0
 8000908:	b2db      	uxtb	r3, r3
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800091a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800091c:	480d      	ldr	r0, [pc, #52]	; (8000954 <LoopForever+0x6>)
  ldr r1, =_edata
 800091e:	490e      	ldr	r1, [pc, #56]	; (8000958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000920:	4a0e      	ldr	r2, [pc, #56]	; (800095c <LoopForever+0xe>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000934:	4c0b      	ldr	r4, [pc, #44]	; (8000964 <LoopForever+0x16>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000942:	f7ff fd6d 	bl	8000420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000946:	f000 fb4b 	bl	8000fe0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800094a:	f7ff fc85 	bl	8000258 <main>

0800094e <LoopForever>:

LoopForever:
    b LoopForever
 800094e:	e7fe      	b.n	800094e <LoopForever>
  ldr   r0, =_estack
 8000950:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800095c:	08001060 	.word	0x08001060
  ldr r2, =_sbss
 8000960:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000964:	20000074 	.word	0x20000074

08000968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC1_2_IRQHandler>

0800096a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000970:	2300      	movs	r3, #0
 8000972:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f93d 	bl	8000bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800097a:	2000      	movs	r0, #0
 800097c:	f000 f80e 	bl	800099c <HAL_InitTick>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	71fb      	strb	r3, [r7, #7]
 800098a:	e001      	b.n	8000990 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800098c:	f7ff fcfa 	bl	8000384 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000990:	79fb      	ldrb	r3, [r7, #7]

}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <HAL_InitTick+0x68>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d022      	beq.n	80009f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_InitTick+0x6c>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <HAL_InitTick+0x68>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80009c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f93a 	bl	8000c3e <HAL_SYSTICK_Config>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d10f      	bne.n	80009f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b0f      	cmp	r3, #15
 80009d4:	d809      	bhi.n	80009ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d6:	2200      	movs	r2, #0
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009de:	f000 f914 	bl	8000c0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_InitTick+0x70>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	e007      	b.n	80009fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	e004      	b.n	80009fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
 80009f4:	e001      	b.n	80009fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x1c>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_IncTick+0x20>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a03      	ldr	r2, [pc, #12]	; (8000a2c <HAL_IncTick+0x1c>)
 8000a20:	6013      	str	r3, [r2, #0]
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	20000070 	.word	0x20000070
 8000a30:	20000008 	.word	0x20000008

08000a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <HAL_GetTick+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000070 	.word	0x20000070

08000a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a54:	f7ff ffee 	bl	8000a34 <HAL_GetTick>
 8000a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a64:	d004      	beq.n	8000a70 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_Delay+0x40>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a70:	bf00      	nop
 8000a72:	f7ff ffdf 	bl	8000a34 <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d8f7      	bhi.n	8000a72 <HAL_Delay+0x26>
  {
  }
}
 8000a82:	bf00      	nop
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000008 	.word	0x20000008

08000a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	60d3      	str	r3, [r2, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	f003 0307 	and.w	r3, r3, #7
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db0a      	blt.n	8000b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	490c      	ldr	r1, [pc, #48]	; (8000b40 <__NVIC_SetPriority+0x4c>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b1c:	e00a      	b.n	8000b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4908      	ldr	r1, [pc, #32]	; (8000b44 <__NVIC_SetPriority+0x50>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	440b      	add	r3, r1
 8000b32:	761a      	strb	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f1c3 0307 	rsb	r3, r3, #7
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	bf28      	it	cs
 8000b66:	2304      	movcs	r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d902      	bls.n	8000b78 <NVIC_EncodePriority+0x30>
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3b03      	subs	r3, #3
 8000b76:	e000      	b.n	8000b7a <NVIC_EncodePriority+0x32>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43da      	mvns	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43d9      	mvns	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	4313      	orrs	r3, r2
         );
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3724      	adds	r7, #36	; 0x24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc0:	d301      	bcc.n	8000bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00f      	b.n	8000be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <SysTick_Config+0x40>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bce:	210f      	movs	r1, #15
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd4:	f7ff ff8e 	bl	8000af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <SysTick_Config+0x40>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SysTick_Config+0x40>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff47 	bl	8000a90 <__NVIC_SetPriorityGrouping>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c18:	f7ff ff5e 	bl	8000ad8 <__NVIC_GetPriorityGrouping>
 8000c1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff90 	bl	8000b48 <NVIC_EncodePriority>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff5f 	bl	8000af4 <__NVIC_SetPriority>
}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffb2 	bl	8000bb0 <SysTick_Config>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c66:	e15a      	b.n	8000f1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	4013      	ands	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 814c 	beq.w	8000f18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d00b      	beq.n	8000ca0 <HAL_GPIO_Init+0x48>
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d007      	beq.n	8000ca0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c94:	2b11      	cmp	r3, #17
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b12      	cmp	r3, #18
 8000c9e:	d130      	bne.n	8000d02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	091b      	lsrs	r3, r3, #4
 8000cec:	f003 0201 	and.w	r2, r3, #1
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d003      	beq.n	8000d42 <HAL_GPIO_Init+0xea>
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b12      	cmp	r3, #18
 8000d40:	d123      	bne.n	8000d8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	220f      	movs	r2, #15
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	691a      	ldr	r2, [r3, #16]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	08da      	lsrs	r2, r3, #3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3208      	adds	r2, #8
 8000d84:	6939      	ldr	r1, [r7, #16]
 8000d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2203      	movs	r2, #3
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 0203 	and.w	r2, r3, #3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 80a6 	beq.w	8000f18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dcc:	4b5b      	ldr	r3, [pc, #364]	; (8000f3c <HAL_GPIO_Init+0x2e4>)
 8000dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd0:	4a5a      	ldr	r2, [pc, #360]	; (8000f3c <HAL_GPIO_Init+0x2e4>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd8:	4b58      	ldr	r3, [pc, #352]	; (8000f3c <HAL_GPIO_Init+0x2e4>)
 8000dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000de4:	4a56      	ldr	r2, [pc, #344]	; (8000f40 <HAL_GPIO_Init+0x2e8>)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	220f      	movs	r2, #15
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e0e:	d01f      	beq.n	8000e50 <HAL_GPIO_Init+0x1f8>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a4c      	ldr	r2, [pc, #304]	; (8000f44 <HAL_GPIO_Init+0x2ec>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d019      	beq.n	8000e4c <HAL_GPIO_Init+0x1f4>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a4b      	ldr	r2, [pc, #300]	; (8000f48 <HAL_GPIO_Init+0x2f0>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d013      	beq.n	8000e48 <HAL_GPIO_Init+0x1f0>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a4a      	ldr	r2, [pc, #296]	; (8000f4c <HAL_GPIO_Init+0x2f4>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d00d      	beq.n	8000e44 <HAL_GPIO_Init+0x1ec>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a49      	ldr	r2, [pc, #292]	; (8000f50 <HAL_GPIO_Init+0x2f8>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d007      	beq.n	8000e40 <HAL_GPIO_Init+0x1e8>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a48      	ldr	r2, [pc, #288]	; (8000f54 <HAL_GPIO_Init+0x2fc>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d101      	bne.n	8000e3c <HAL_GPIO_Init+0x1e4>
 8000e38:	2305      	movs	r3, #5
 8000e3a:	e00a      	b.n	8000e52 <HAL_GPIO_Init+0x1fa>
 8000e3c:	2306      	movs	r3, #6
 8000e3e:	e008      	b.n	8000e52 <HAL_GPIO_Init+0x1fa>
 8000e40:	2304      	movs	r3, #4
 8000e42:	e006      	b.n	8000e52 <HAL_GPIO_Init+0x1fa>
 8000e44:	2303      	movs	r3, #3
 8000e46:	e004      	b.n	8000e52 <HAL_GPIO_Init+0x1fa>
 8000e48:	2302      	movs	r3, #2
 8000e4a:	e002      	b.n	8000e52 <HAL_GPIO_Init+0x1fa>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e000      	b.n	8000e52 <HAL_GPIO_Init+0x1fa>
 8000e50:	2300      	movs	r3, #0
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	f002 0203 	and.w	r2, r2, #3
 8000e58:	0092      	lsls	r2, r2, #2
 8000e5a:	4093      	lsls	r3, r2
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e62:	4937      	ldr	r1, [pc, #220]	; (8000f40 <HAL_GPIO_Init+0x2e8>)
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e70:	4b39      	ldr	r3, [pc, #228]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e94:	4a30      	ldr	r2, [pc, #192]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ebe:	4a26      	ldr	r2, [pc, #152]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ee8:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f12:	4a11      	ldr	r2, [pc, #68]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	fa22 f303 	lsr.w	r3, r2, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f47f ae9d 	bne.w	8000c68 <HAL_GPIO_Init+0x10>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	371c      	adds	r7, #28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010000 	.word	0x40010000
 8000f44:	48000400 	.word	0x48000400
 8000f48:	48000800 	.word	0x48000800
 8000f4c:	48000c00 	.word	0x48000c00
 8000f50:	48001000 	.word	0x48001000
 8000f54:	48001400 	.word	0x48001400
 8000f58:	40010400 	.word	0x40010400

08000f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f6c:	787b      	ldrb	r3, [r7, #1]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f78:	e002      	b.n	8000f80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f7a:	887a      	ldrh	r2, [r7, #2]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	041a      	lsls	r2, r3, #16
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	43d9      	mvns	r1, r3
 8000faa:	887b      	ldrh	r3, [r7, #2]
 8000fac:	400b      	ands	r3, r1
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	619a      	str	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fce:	6093      	str	r3, [r2, #8]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40007000 	.word	0x40007000

08000fe0 <__libc_init_array>:
 8000fe0:	b570      	push	{r4, r5, r6, lr}
 8000fe2:	4d0d      	ldr	r5, [pc, #52]	; (8001018 <__libc_init_array+0x38>)
 8000fe4:	4c0d      	ldr	r4, [pc, #52]	; (800101c <__libc_init_array+0x3c>)
 8000fe6:	1b64      	subs	r4, r4, r5
 8000fe8:	10a4      	asrs	r4, r4, #2
 8000fea:	2600      	movs	r6, #0
 8000fec:	42a6      	cmp	r6, r4
 8000fee:	d109      	bne.n	8001004 <__libc_init_array+0x24>
 8000ff0:	4d0b      	ldr	r5, [pc, #44]	; (8001020 <__libc_init_array+0x40>)
 8000ff2:	4c0c      	ldr	r4, [pc, #48]	; (8001024 <__libc_init_array+0x44>)
 8000ff4:	f000 f818 	bl	8001028 <_init>
 8000ff8:	1b64      	subs	r4, r4, r5
 8000ffa:	10a4      	asrs	r4, r4, #2
 8000ffc:	2600      	movs	r6, #0
 8000ffe:	42a6      	cmp	r6, r4
 8001000:	d105      	bne.n	800100e <__libc_init_array+0x2e>
 8001002:	bd70      	pop	{r4, r5, r6, pc}
 8001004:	f855 3b04 	ldr.w	r3, [r5], #4
 8001008:	4798      	blx	r3
 800100a:	3601      	adds	r6, #1
 800100c:	e7ee      	b.n	8000fec <__libc_init_array+0xc>
 800100e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001012:	4798      	blx	r3
 8001014:	3601      	adds	r6, #1
 8001016:	e7f2      	b.n	8000ffe <__libc_init_array+0x1e>
 8001018:	08001058 	.word	0x08001058
 800101c:	08001058 	.word	0x08001058
 8001020:	08001058 	.word	0x08001058
 8001024:	0800105c 	.word	0x0800105c

08001028 <_init>:
 8001028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800102a:	bf00      	nop
 800102c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800102e:	bc08      	pop	{r3}
 8001030:	469e      	mov	lr, r3
 8001032:	4770      	bx	lr

08001034 <_fini>:
 8001034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001036:	bf00      	nop
 8001038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800103a:	bc08      	pop	{r3}
 800103c:	469e      	mov	lr, r3
 800103e:	4770      	bx	lr
