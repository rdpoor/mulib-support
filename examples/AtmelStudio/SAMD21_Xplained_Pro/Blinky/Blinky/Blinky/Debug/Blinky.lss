
Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027f8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  000027f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000184  20000064  0000285c  00020064  2**2
                  ALLOC
  3 .stack        00002000  200001e8  000029e0  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00030276  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004c15  00000000  00000000  0005035b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000dd0b  00000000  00000000  00054f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000db8  00000000  00000000  00062c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000011e8  00000000  00000000  00063a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c667  00000000  00000000  00064c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015e69  00000000  00000000  00081282  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008af95  00000000  00000000  000970eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002920  00000000  00000000  00122080  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 21 00 20 8d 05 00 00 89 05 00 00 89 05 00 00     .!. ............
	...
      2c:	89 05 00 00 00 00 00 00 00 00 00 00 89 05 00 00     ................
      3c:	89 05 00 00 89 05 00 00 89 05 00 00 89 05 00 00     ................
      4c:	75 0e 00 00 ad 0c 00 00 89 05 00 00 89 05 00 00     u...............
      5c:	89 05 00 00 89 05 00 00 89 05 00 00 89 05 00 00     ................
      6c:	89 05 00 00 89 05 00 00 89 05 00 00 89 05 00 00     ................
      7c:	89 05 00 00 89 05 00 00 89 05 00 00 89 05 00 00     ................
      8c:	89 05 00 00 89 05 00 00 89 05 00 00 89 05 00 00     ................
      9c:	89 05 00 00 89 05 00 00 89 05 00 00 89 05 00 00     ................
      ac:	89 05 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	000027f8 	.word	0x000027f8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	000027f8 	.word	0x000027f8
     10c:	000027f8 	.word	0x000027f8
     110:	00000000 	.word	0x00000000

00000114 <mu_event_init>:

// =============================================================================
// public code

mu_event_t *mu_event_init(mu_event_t *event, mu_task_t *task, mu_time_t time) {
  event->task = task;
     114:	6041      	str	r1, [r0, #4]
  event->time = time;
     116:	6002      	str	r2, [r0, #0]
  return event;
}
     118:	4770      	bx	lr

0000011a <mu_event_get_task>:

mu_task_t *mu_event_get_task(mu_event_t *event) {
  return event->task;
     11a:	6840      	ldr	r0, [r0, #4]
}
     11c:	4770      	bx	lr

0000011e <mu_event_get_time>:

mu_time_t mu_event_get_time(mu_event_t *event) {
  return event->time;
     11e:	6800      	ldr	r0, [r0, #0]
}
     120:	4770      	bx	lr

00000122 <default_idle_fn>:
// local (static) code

static void *default_idle_fn(void *self, void *arg) {
  // the default idle task doesn't do much...
  return self;
}
     122:	4770      	bx	lr

00000124 <sched_task_at>:
    memmove(dst, src, sizeof(mu_event_t) * to_move);
  }
  sched->event_queue_count -= 1;
}

static mu_sched_err_t sched_task_at(mu_sched_t *sched, mu_task_t *task, mu_time_t time) {
     124:	b5f0      	push	{r4, r5, r6, r7, lr}
     126:	b083      	sub	sp, #12
     128:	0004      	movs	r4, r0
     12a:	9101      	str	r1, [sp, #4]
     12c:	9200      	str	r2, [sp, #0]
  mu_event_t *event;
  size_t index;

  if (sched->event_queue_count >= sched->event_queue_capacity) {
     12e:	6885      	ldr	r5, [r0, #8]
    return MU_SCHED_ERR_FULL;
     130:	2002      	movs	r0, #2
  if (sched->event_queue_count >= sched->event_queue_capacity) {
     132:	6863      	ldr	r3, [r4, #4]
     134:	429d      	cmp	r5, r3
     136:	d301      	bcc.n	13c <sched_task_at+0x18>
  // fill in the event
  event = &sched->event_queue[index];
  mu_event_init(event, task, time);
  sched->event_queue_count += 1;
  return MU_SCHED_ERR_NONE;
}
     138:	b003      	add	sp, #12
     13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (sched->event_queue_count == 0) {
     13c:	2d00      	cmp	r5, #0
     13e:	d10b      	bne.n	158 <sched_task_at+0x34>
  event = &sched->event_queue[index];
     140:	00ed      	lsls	r5, r5, #3
     142:	6823      	ldr	r3, [r4, #0]
     144:	1958      	adds	r0, r3, r5
  mu_event_init(event, task, time);
     146:	9a00      	ldr	r2, [sp, #0]
     148:	9901      	ldr	r1, [sp, #4]
     14a:	4b16      	ldr	r3, [pc, #88]	; (1a4 <sched_task_at+0x80>)
     14c:	4798      	blx	r3
  sched->event_queue_count += 1;
     14e:	68a3      	ldr	r3, [r4, #8]
     150:	3301      	adds	r3, #1
     152:	60a3      	str	r3, [r4, #8]
  return MU_SCHED_ERR_NONE;
     154:	2000      	movs	r0, #0
     156:	e7ef      	b.n	138 <sched_task_at+0x14>
#else
// linear search for insertion point
static size_t find_insertion_index(mu_sched_t *sched, mu_time_t time) {
  mu_event_t *events = sched->event_queue;

  for (size_t i = sched->event_queue_count - 1; i >= 0; i--) {
     158:	1e6f      	subs	r7, r5, #1
     15a:	4b13      	ldr	r3, [pc, #76]	; (1a8 <sched_task_at+0x84>)
     15c:	469c      	mov	ip, r3
     15e:	4465      	add	r5, ip
     160:	00ed      	lsls	r5, r5, #3
     162:	6823      	ldr	r3, [r4, #0]
     164:	469c      	mov	ip, r3
     166:	4465      	add	r5, ip
    if (mu_time_precedes(time, events[i].time)) {
     168:	4e10      	ldr	r6, [pc, #64]	; (1ac <sched_task_at+0x88>)
     16a:	6829      	ldr	r1, [r5, #0]
     16c:	9800      	ldr	r0, [sp, #0]
     16e:	47b0      	blx	r6
     170:	2800      	cmp	r0, #0
     172:	d104      	bne.n	17e <sched_task_at+0x5a>
     174:	3d08      	subs	r5, #8
      return i+1;    // precedes incumbent
    } else if (i == 0) {
     176:	2f00      	cmp	r7, #0
     178:	d012      	beq.n	1a0 <sched_task_at+0x7c>
  for (size_t i = sched->event_queue_count - 1; i >= 0; i--) {
     17a:	3f01      	subs	r7, #1
     17c:	e7f5      	b.n	16a <sched_task_at+0x46>
      return i+1;    // precedes incumbent
     17e:	1c7d      	adds	r5, r7, #1
  int to_move = sched->event_queue_count - index;
     180:	68a3      	ldr	r3, [r4, #8]
     182:	1b5a      	subs	r2, r3, r5
  if (to_move > 0) {
     184:	2a00      	cmp	r2, #0
     186:	dddb      	ble.n	140 <sched_task_at+0x1c>
    mu_event_t *src = &sched->event_queue[index];
     188:	00eb      	lsls	r3, r5, #3
    memmove(dst, src, sizeof(mu_event_t) * to_move);
     18a:	00d2      	lsls	r2, r2, #3
    mu_event_t *src = &sched->event_queue[index];
     18c:	6821      	ldr	r1, [r4, #0]
     18e:	18c9      	adds	r1, r1, r3
    mu_event_t *dst = &sched->event_queue[index + 1];
     190:	3308      	adds	r3, #8
     192:	0018      	movs	r0, r3
     194:	6823      	ldr	r3, [r4, #0]
     196:	469c      	mov	ip, r3
     198:	4460      	add	r0, ip
    memmove(dst, src, sizeof(mu_event_t) * to_move);
     19a:	4b05      	ldr	r3, [pc, #20]	; (1b0 <sched_task_at+0x8c>)
     19c:	4798      	blx	r3
     19e:	e7cf      	b.n	140 <sched_task_at+0x1c>
      return 0;      // follows all
     1a0:	003d      	movs	r5, r7
     1a2:	e7ed      	b.n	180 <sched_task_at+0x5c>
     1a4:	00000115 	.word	0x00000115
     1a8:	1fffffff 	.word	0x1fffffff
     1ac:	0000042d 	.word	0x0000042d
     1b0:	000014cb 	.word	0x000014cb

000001b4 <mu_sched_reset>:
mu_sched_t *mu_sched_reset(mu_sched_t *sched) {
     1b4:	b570      	push	{r4, r5, r6, lr}
     1b6:	0004      	movs	r4, r0
  sched->event_queue_count = 0;
     1b8:	2500      	movs	r5, #0
     1ba:	6085      	str	r5, [r0, #8]
  mu_spscq_reset(sched->isr_queue);
     1bc:	68c0      	ldr	r0, [r0, #12]
     1be:	4b02      	ldr	r3, [pc, #8]	; (1c8 <mu_sched_reset+0x14>)
     1c0:	4798      	blx	r3
  sched->current_event.task = NULL;
     1c2:	61e5      	str	r5, [r4, #28]
}
     1c4:	0020      	movs	r0, r4
     1c6:	bd70      	pop	{r4, r5, r6, pc}
     1c8:	0000034b 	.word	0x0000034b

000001cc <mu_sched_init>:
                          mu_spscq_t *isr_queue) {
     1cc:	b570      	push	{r4, r5, r6, lr}
     1ce:	0004      	movs	r4, r0
  sched->event_queue = event_queue;
     1d0:	6001      	str	r1, [r0, #0]
  sched->event_queue_capacity = event_queue_capacity;
     1d2:	6042      	str	r2, [r0, #4]
  sched->isr_queue = isr_queue;
     1d4:	60c3      	str	r3, [r0, #12]
  sched->clock_fn = mu_time_now;
     1d6:	4b06      	ldr	r3, [pc, #24]	; (1f0 <mu_sched_init+0x24>)
     1d8:	6103      	str	r3, [r0, #16]
  sched->idle_task = &s_default_idle_task;
     1da:	4806      	ldr	r0, [pc, #24]	; (1f4 <mu_sched_init+0x28>)
     1dc:	6160      	str	r0, [r4, #20]
  mu_task_init(&s_default_idle_task, default_idle_fn, NULL, "Idle");
     1de:	4b06      	ldr	r3, [pc, #24]	; (1f8 <mu_sched_init+0x2c>)
     1e0:	2200      	movs	r2, #0
     1e2:	4906      	ldr	r1, [pc, #24]	; (1fc <mu_sched_init+0x30>)
     1e4:	4d06      	ldr	r5, [pc, #24]	; (200 <mu_sched_init+0x34>)
     1e6:	47a8      	blx	r5
  return mu_sched_reset(sched);
     1e8:	0020      	movs	r0, r4
     1ea:	4b06      	ldr	r3, [pc, #24]	; (204 <mu_sched_init+0x38>)
     1ec:	4798      	blx	r3
}
     1ee:	bd70      	pop	{r4, r5, r6, pc}
     1f0:	0000044d 	.word	0x0000044d
     1f4:	20000080 	.word	0x20000080
     1f8:	000025b8 	.word	0x000025b8
     1fc:	00000123 	.word	0x00000123
     200:	000003c3 	.word	0x000003c3
     204:	000001b5 	.word	0x000001b5

00000208 <mu_sched_get_current_time>:
mu_time_t mu_sched_get_current_time(mu_sched_t *sched) {
     208:	b510      	push	{r4, lr}
  return sched->clock_fn();
     20a:	6903      	ldr	r3, [r0, #16]
     20c:	4798      	blx	r3
}
     20e:	bd10      	pop	{r4, pc}

00000210 <mu_sched_step>:
mu_sched_err_t mu_sched_step(mu_sched_t *sched) {
     210:	b5f0      	push	{r4, r5, r6, r7, lr}
     212:	b083      	sub	sp, #12
     214:	0004      	movs	r4, r0
  mu_time_t now = mu_sched_get_current_time(sched);
     216:	4b1d      	ldr	r3, [pc, #116]	; (28c <mu_sched_step+0x7c>)
     218:	4798      	blx	r3
     21a:	0005      	movs	r5, r0
  while (mu_spscq_get(sched->isr_queue, (void **)&task) != MU_CQUEUE_ERR_EMPTY) {
     21c:	4e1c      	ldr	r6, [pc, #112]	; (290 <mu_sched_step+0x80>)
  return sched_task_at(sched, task, at);
     21e:	4f1d      	ldr	r7, [pc, #116]	; (294 <mu_sched_step+0x84>)
  while (mu_spscq_get(sched->isr_queue, (void **)&task) != MU_CQUEUE_ERR_EMPTY) {
     220:	a901      	add	r1, sp, #4
     222:	68e0      	ldr	r0, [r4, #12]
     224:	47b0      	blx	r6
     226:	2801      	cmp	r0, #1
     228:	d007      	beq.n	23a <mu_sched_step+0x2a>
  return sched_task_at(sched, task, at);
     22a:	002a      	movs	r2, r5
     22c:	9901      	ldr	r1, [sp, #4]
     22e:	0020      	movs	r0, r4
     230:	47b8      	blx	r7
    if (err != MU_SCHED_ERR_NONE) {
     232:	2800      	cmp	r0, #0
     234:	d0f4      	beq.n	220 <mu_sched_step+0x10>
}
     236:	b003      	add	sp, #12
     238:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (sched->event_queue_count > 0) {
     23a:	68a3      	ldr	r3, [r4, #8]
     23c:	2b00      	cmp	r3, #0
     23e:	d00d      	beq.n	25c <mu_sched_step+0x4c>
    return &sched->event_queue[sched->event_queue_count - 1];
     240:	4a15      	ldr	r2, [pc, #84]	; (298 <mu_sched_step+0x88>)
     242:	4694      	mov	ip, r2
     244:	4463      	add	r3, ip
     246:	00db      	lsls	r3, r3, #3
     248:	6822      	ldr	r2, [r4, #0]
     24a:	18d6      	adds	r6, r2, r3
  if (event != NULL) {
     24c:	2e00      	cmp	r6, #0
     24e:	d005      	beq.n	25c <mu_sched_step+0x4c>
    if (!mu_time_follows(event->time, now)) {
     250:	0029      	movs	r1, r5
     252:	6830      	ldr	r0, [r6, #0]
     254:	4b11      	ldr	r3, [pc, #68]	; (29c <mu_sched_step+0x8c>)
     256:	4798      	blx	r3
     258:	2800      	cmp	r0, #0
     25a:	d005      	beq.n	268 <mu_sched_step+0x58>
  mu_task_call(sched->idle_task, sched);
     25c:	6960      	ldr	r0, [r4, #20]
     25e:	0021      	movs	r1, r4
     260:	4b0f      	ldr	r3, [pc, #60]	; (2a0 <mu_sched_step+0x90>)
     262:	4798      	blx	r3
  return MU_SCHED_ERR_NONE;
     264:	2000      	movs	r0, #0
     266:	e7e6      	b.n	236 <mu_sched_step+0x26>
      memcpy(&(sched->current_event), event, sizeof(mu_event_t));
     268:	0020      	movs	r0, r4
     26a:	3018      	adds	r0, #24
     26c:	2208      	movs	r2, #8
     26e:	0031      	movs	r1, r6
     270:	4b0c      	ldr	r3, [pc, #48]	; (2a4 <mu_sched_step+0x94>)
     272:	4798      	blx	r3
  return &sched->event_queue[--sched->event_queue_count];
     274:	68a3      	ldr	r3, [r4, #8]
     276:	3b01      	subs	r3, #1
     278:	60a3      	str	r3, [r4, #8]
      mu_task_call(sched->current_event.task, sched);
     27a:	0021      	movs	r1, r4
     27c:	69e0      	ldr	r0, [r4, #28]
     27e:	4b08      	ldr	r3, [pc, #32]	; (2a0 <mu_sched_step+0x90>)
     280:	4798      	blx	r3
      sched->current_event.task = NULL;
     282:	2300      	movs	r3, #0
     284:	61e3      	str	r3, [r4, #28]
      return MU_SCHED_ERR_NONE;
     286:	2000      	movs	r0, #0
     288:	e7d5      	b.n	236 <mu_sched_step+0x26>
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	00000209 	.word	0x00000209
     290:	00000399 	.word	0x00000399
     294:	00000125 	.word	0x00000125
     298:	1fffffff 	.word	0x1fffffff
     29c:	00000439 	.word	0x00000439
     2a0:	000003d5 	.word	0x000003d5
     2a4:	000014b9 	.word	0x000014b9

000002a8 <mu_sched_task_now>:
mu_sched_err_t mu_sched_task_now(mu_sched_t *sched, mu_task_t *task) {
     2a8:	b570      	push	{r4, r5, r6, lr}
     2aa:	0004      	movs	r4, r0
     2ac:	000d      	movs	r5, r1
  return sched_task_at(sched, task, mu_sched_get_current_time(sched));
     2ae:	4b04      	ldr	r3, [pc, #16]	; (2c0 <mu_sched_task_now+0x18>)
     2b0:	4798      	blx	r3
     2b2:	0002      	movs	r2, r0
     2b4:	0029      	movs	r1, r5
     2b6:	0020      	movs	r0, r4
     2b8:	4b02      	ldr	r3, [pc, #8]	; (2c4 <mu_sched_task_now+0x1c>)
     2ba:	4798      	blx	r3
}
     2bc:	bd70      	pop	{r4, r5, r6, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	00000209 	.word	0x00000209
     2c4:	00000125 	.word	0x00000125

000002c8 <mu_sched_reschedule_in>:
mu_sched_err_t mu_sched_reschedule_in(mu_sched_t *sched, mu_time_dt in) {
     2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     2ca:	0004      	movs	r4, r0
     2cc:	000e      	movs	r6, r1
  if (sched->current_event.task == NULL) {
     2ce:	69c3      	ldr	r3, [r0, #28]
     2d0:	2b00      	cmp	r3, #0
     2d2:	d014      	beq.n	2fe <mu_sched_reschedule_in+0x36>
    return &sched->current_event;
     2d4:	0005      	movs	r5, r0
     2d6:	3518      	adds	r5, #24
    return MU_SCHED_ERR_NOT_FOUND;
     2d8:	2003      	movs	r0, #3
  if (!event) {
     2da:	2d00      	cmp	r5, #0
     2dc:	d00e      	beq.n	2fc <mu_sched_reschedule_in+0x34>
  mu_task_t *task = mu_event_get_task(event);
     2de:	0028      	movs	r0, r5
     2e0:	4b08      	ldr	r3, [pc, #32]	; (304 <mu_sched_reschedule_in+0x3c>)
     2e2:	4798      	blx	r3
     2e4:	0007      	movs	r7, r0
  mu_time_t prev_time = mu_event_get_time(event);
     2e6:	0028      	movs	r0, r5
     2e8:	4b07      	ldr	r3, [pc, #28]	; (308 <mu_sched_reschedule_in+0x40>)
     2ea:	4798      	blx	r3
  return sched_task_at(sched, task, mu_time_offset(prev_time, in));
     2ec:	0031      	movs	r1, r6
     2ee:	4b07      	ldr	r3, [pc, #28]	; (30c <mu_sched_reschedule_in+0x44>)
     2f0:	4798      	blx	r3
     2f2:	0002      	movs	r2, r0
     2f4:	0039      	movs	r1, r7
     2f6:	0020      	movs	r0, r4
     2f8:	4b05      	ldr	r3, [pc, #20]	; (310 <mu_sched_reschedule_in+0x48>)
     2fa:	4798      	blx	r3
}
     2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return MU_SCHED_ERR_NOT_FOUND;
     2fe:	2003      	movs	r0, #3
     300:	e7fc      	b.n	2fc <mu_sched_reschedule_in+0x34>
     302:	46c0      	nop			; (mov r8, r8)
     304:	0000011b 	.word	0x0000011b
     308:	0000011f 	.word	0x0000011f
     30c:	00000415 	.word	0x00000415
     310:	00000125 	.word	0x00000125

00000314 <mu_sched_task_from_isr>:
mu_sched_err_t mu_sched_task_from_isr(mu_sched_t *sched, mu_task_t *task) {
     314:	b510      	push	{r4, lr}
  if (mu_spscq_put(sched->isr_queue, task) == MU_CQUEUE_ERR_FULL) {
     316:	68c0      	ldr	r0, [r0, #12]
     318:	4b03      	ldr	r3, [pc, #12]	; (328 <mu_sched_task_from_isr+0x14>)
     31a:	4798      	blx	r3
    return MU_SCHED_ERR_NONE;
     31c:	3802      	subs	r0, #2
     31e:	4243      	negs	r3, r0
     320:	4158      	adcs	r0, r3
     322:	0040      	lsls	r0, r0, #1
}
     324:	bd10      	pop	{r4, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	00000369 	.word	0x00000369

0000032c <mu_spscq_init>:
// =============================================================================
// public code

mu_spscq_err_t mu_spscq_init(mu_spscq_t *q,
                               mu_spscq_item_t *store,
                               uint16_t capacity) {
     32c:	b510      	push	{r4, lr}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
    return MU_CQUEUE_ERR_SIZE;
     32e:	2303      	movs	r3, #3
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     330:	2a00      	cmp	r2, #0
     332:	d101      	bne.n	338 <mu_spscq_init+0xc>
  }
  q->mask = capacity - 1;
  q->store = store;
  return mu_spscq_reset(q);
}
     334:	0018      	movs	r0, r3
     336:	bd10      	pop	{r4, pc}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     338:	1e54      	subs	r4, r2, #1
     33a:	4222      	tst	r2, r4
     33c:	d1fa      	bne.n	334 <mu_spscq_init+0x8>
  q->mask = capacity - 1;
     33e:	8004      	strh	r4, [r0, #0]
  q->store = store;
     340:	6081      	str	r1, [r0, #8]

mu_spscq_err_t mu_spscq_reset(mu_spscq_t *q) {
  q->head = 0;
     342:	2300      	movs	r3, #0
     344:	8043      	strh	r3, [r0, #2]
  q->tail = 0;
     346:	8083      	strh	r3, [r0, #4]
  return mu_spscq_reset(q);
     348:	e7f4      	b.n	334 <mu_spscq_init+0x8>

0000034a <mu_spscq_reset>:
  q->head = 0;
     34a:	2300      	movs	r3, #0
     34c:	8043      	strh	r3, [r0, #2]
  q->tail = 0;
     34e:	8083      	strh	r3, [r0, #4]
  return MU_CQUEUE_ERR_NONE;
}
     350:	2000      	movs	r0, #0
     352:	4770      	bx	lr

00000354 <mu_spscq_is_full>:

bool mu_spscq_is_empty(mu_spscq_t *q) { return q->head == q->tail; }

bool mu_spscq_is_full(mu_spscq_t *q) {
  // would advancing tail by 1 make it catch up with head?
  return ((q->tail + 1) & q->mask) == q->head;
     354:	8883      	ldrh	r3, [r0, #4]
     356:	8842      	ldrh	r2, [r0, #2]
     358:	3301      	adds	r3, #1
     35a:	8800      	ldrh	r0, [r0, #0]
     35c:	4018      	ands	r0, r3
     35e:	1a80      	subs	r0, r0, r2
     360:	4243      	negs	r3, r0
     362:	4158      	adcs	r0, r3
     364:	b2c0      	uxtb	r0, r0
}
     366:	4770      	bx	lr

00000368 <mu_spscq_put>:

mu_spscq_err_t mu_spscq_put(mu_spscq_t *q, mu_spscq_item_t item) {
     368:	b570      	push	{r4, r5, r6, lr}
     36a:	0004      	movs	r4, r0
     36c:	000d      	movs	r5, r1
  if (mu_spscq_is_full(q)) {
     36e:	4b09      	ldr	r3, [pc, #36]	; (394 <mu_spscq_put+0x2c>)
     370:	4798      	blx	r3
    return MU_CQUEUE_ERR_FULL;
     372:	2302      	movs	r3, #2
  if (mu_spscq_is_full(q)) {
     374:	2800      	cmp	r0, #0
     376:	d001      	beq.n	37c <mu_spscq_put+0x14>
  }
  q->store[q->tail] = item;
  q->tail = (q->tail + 1) & q->mask;
  return MU_CQUEUE_ERR_NONE;
}
     378:	0018      	movs	r0, r3
     37a:	bd70      	pop	{r4, r5, r6, pc}
  q->store[q->tail] = item;
     37c:	88a3      	ldrh	r3, [r4, #4]
     37e:	009b      	lsls	r3, r3, #2
     380:	68a2      	ldr	r2, [r4, #8]
     382:	509d      	str	r5, [r3, r2]
  q->tail = (q->tail + 1) & q->mask;
     384:	88a2      	ldrh	r2, [r4, #4]
     386:	3201      	adds	r2, #1
     388:	8823      	ldrh	r3, [r4, #0]
     38a:	4013      	ands	r3, r2
     38c:	80a3      	strh	r3, [r4, #4]
  return MU_CQUEUE_ERR_NONE;
     38e:	2300      	movs	r3, #0
     390:	e7f2      	b.n	378 <mu_spscq_put+0x10>
     392:	46c0      	nop			; (mov r8, r8)
     394:	00000355 	.word	0x00000355

00000398 <mu_spscq_get>:
bool mu_spscq_is_empty(mu_spscq_t *q) { return q->head == q->tail; }
     398:	8843      	ldrh	r3, [r0, #2]
     39a:	8882      	ldrh	r2, [r0, #4]
     39c:	b29b      	uxth	r3, r3

mu_spscq_err_t mu_spscq_get(mu_spscq_t *q, mu_spscq_item_t *item) {
  if (mu_spscq_is_empty(q)) {
     39e:	4293      	cmp	r3, r2
     3a0:	d00b      	beq.n	3ba <mu_spscq_get+0x22>
    *item = NULL;
    return MU_CQUEUE_ERR_EMPTY;
  }
  *item = q->store[q->head];
     3a2:	8843      	ldrh	r3, [r0, #2]
     3a4:	6882      	ldr	r2, [r0, #8]
     3a6:	009b      	lsls	r3, r3, #2
     3a8:	589b      	ldr	r3, [r3, r2]
     3aa:	600b      	str	r3, [r1, #0]
  q->head = (q->head + 1) & q->mask;
     3ac:	8842      	ldrh	r2, [r0, #2]
     3ae:	3201      	adds	r2, #1
     3b0:	8803      	ldrh	r3, [r0, #0]
     3b2:	4013      	ands	r3, r2
     3b4:	8043      	strh	r3, [r0, #2]
  return MU_CQUEUE_ERR_NONE;
     3b6:	2000      	movs	r0, #0
}
     3b8:	4770      	bx	lr
    *item = NULL;
     3ba:	2300      	movs	r3, #0
     3bc:	600b      	str	r3, [r1, #0]
    return MU_CQUEUE_ERR_EMPTY;
     3be:	2001      	movs	r0, #1
     3c0:	e7fa      	b.n	3b8 <mu_spscq_get+0x20>

000003c2 <mu_task_init>:

mu_task_t *mu_task_init(mu_task_t *task,
                        mu_task_fn fn,
                        void *ctx,
                        const char *name) {
  task->fn = fn;
     3c2:	6001      	str	r1, [r0, #0]
  task->ctx = ctx;
     3c4:	6042      	str	r2, [r0, #4]
#if (MU_TASK_PROFILING)
  task->name = name;
     3c6:	6083      	str	r3, [r0, #8]
  task->call_count = 0;
     3c8:	2300      	movs	r3, #0
     3ca:	60c3      	str	r3, [r0, #12]
  task->runtime = 0;
     3cc:	6103      	str	r3, [r0, #16]
  task->max_duration = 0;
     3ce:	6143      	str	r3, [r0, #20]
#endif
  return task;
}
     3d0:	4770      	bx	lr
	...

000003d4 <mu_task_call>:
#else
  return "";
#endif
}

void *mu_task_call(mu_task_t *task, void *arg) {
     3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3d6:	0004      	movs	r4, r0
     3d8:	000d      	movs	r5, r1

#if (MU_TASK_PROFILING)
  mu_time_t called_at = mu_time_now();
     3da:	4f0c      	ldr	r7, [pc, #48]	; (40c <mu_task_call+0x38>)
     3dc:	47b8      	blx	r7
     3de:	0006      	movs	r6, r0
#endif
  void *result = task->fn(task->ctx, arg);
     3e0:	0029      	movs	r1, r5
     3e2:	6860      	ldr	r0, [r4, #4]
     3e4:	6823      	ldr	r3, [r4, #0]
     3e6:	4798      	blx	r3
     3e8:	0005      	movs	r5, r0
#if (MU_TASK_PROFILING)
  task->call_count += 1;
     3ea:	68e3      	ldr	r3, [r4, #12]
     3ec:	3301      	adds	r3, #1
     3ee:	60e3      	str	r3, [r4, #12]
  mu_time_dt duration = mu_time_difference(mu_time_now(), called_at);
     3f0:	47b8      	blx	r7
     3f2:	0031      	movs	r1, r6
     3f4:	4b06      	ldr	r3, [pc, #24]	; (410 <mu_task_call+0x3c>)
     3f6:	4798      	blx	r3
  task->runtime += duration;
     3f8:	6923      	ldr	r3, [r4, #16]
     3fa:	181b      	adds	r3, r3, r0
     3fc:	6123      	str	r3, [r4, #16]
  if (duration > task->max_duration) task->max_duration = duration;
     3fe:	6963      	ldr	r3, [r4, #20]
     400:	4298      	cmp	r0, r3
     402:	dd00      	ble.n	406 <mu_task_call+0x32>
     404:	6160      	str	r0, [r4, #20]
#endif
  return result;
}
     406:	0028      	movs	r0, r5
     408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	0000044d 	.word	0x0000044d
     410:	00000421 	.word	0x00000421

00000414 <mu_time_offset>:

void mu_time_init(void) {
  // mu_port_init() must be called separately
}

mu_time_t mu_time_offset(mu_time_t t1, mu_time_dt dt) {
     414:	b510      	push	{r4, lr}
  return mu_port_time_offset(t1, dt);
     416:	4b01      	ldr	r3, [pc, #4]	; (41c <mu_time_offset+0x8>)
     418:	4798      	blx	r3
}
     41a:	bd10      	pop	{r4, pc}
     41c:	00001105 	.word	0x00001105

00000420 <mu_time_difference>:

mu_time_dt mu_time_difference(mu_time_t t1, mu_time_t t2) {
     420:	b510      	push	{r4, lr}
  return mu_port_time_difference(t1, t2);
     422:	4b01      	ldr	r3, [pc, #4]	; (428 <mu_time_difference+0x8>)
     424:	4798      	blx	r3
}
     426:	bd10      	pop	{r4, pc}
     428:	00001109 	.word	0x00001109

0000042c <mu_time_precedes>:

bool mu_time_precedes(mu_time_t t1, mu_time_t t2) {
     42c:	b510      	push	{r4, lr}
  return mu_port_time_precedes(t1, t2);
     42e:	4b01      	ldr	r3, [pc, #4]	; (434 <mu_time_precedes+0x8>)
     430:	4798      	blx	r3
}
     432:	bd10      	pop	{r4, pc}
     434:	0000110d 	.word	0x0000110d

00000438 <mu_time_follows>:

bool mu_time_is_equal(mu_time_t t1, mu_time_t t2) {
  return mu_port_time_is_equal(t1, t2);
}

bool mu_time_follows(mu_time_t t1, mu_time_t t2) {
     438:	b510      	push	{r4, lr}
     43a:	000b      	movs	r3, r1
  return mu_port_time_precedes(t2, t1);
     43c:	0001      	movs	r1, r0
     43e:	0018      	movs	r0, r3
     440:	4b01      	ldr	r3, [pc, #4]	; (448 <mu_time_follows+0x10>)
     442:	4798      	blx	r3
}
     444:	bd10      	pop	{r4, pc}
     446:	46c0      	nop			; (mov r8, r8)
     448:	0000110d 	.word	0x0000110d

0000044c <mu_time_now>:

mu_time_dt mu_time_seconds_to_duration(mu_time_seconds_dt s) {
  return mu_port_time_seconds_to_duration(s);
}

mu_time_t mu_time_now() {
     44c:	b510      	push	{r4, lr}
  return mu_port_time_now();
     44e:	4b01      	ldr	r3, [pc, #4]	; (454 <mu_time_now+0x8>)
     450:	4798      	blx	r3
}
     452:	bd10      	pop	{r4, pc}
     454:	00001115 	.word	0x00001115

00000458 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     458:	b510      	push	{r4, lr}
	system_init();
     45a:	4b03      	ldr	r3, [pc, #12]	; (468 <atmel_start_init+0x10>)
     45c:	4798      	blx	r3
	sleep_manager_init();
     45e:	4b03      	ldr	r3, [pc, #12]	; (46c <atmel_start_init+0x14>)
     460:	4798      	blx	r3
	stdio_redirect_init();
     462:	4b03      	ldr	r3, [pc, #12]	; (470 <atmel_start_init+0x18>)
     464:	4798      	blx	r3
}
     466:	bd10      	pop	{r4, pc}
     468:	0000079d 	.word	0x0000079d
     46c:	000011fd 	.word	0x000011fd
     470:	000012e5 	.word	0x000012e5

00000474 <blinky_init>:
static mu_task_t s_button_task;

// =============================================================================
// public code

void blinky_init() {
     474:	b570      	push	{r4, r5, r6, lr}
  printf("\n\n# ===========\n");
     476:	4815      	ldr	r0, [pc, #84]	; (4cc <blinky_init+0x58>)
     478:	4b15      	ldr	r3, [pc, #84]	; (4d0 <blinky_init+0x5c>)
     47a:	4798      	blx	r3
  printf("# blinky %s: see https://github.com/rdpoor/mulib\n", BLINKY_VERSION);
     47c:	4915      	ldr	r1, [pc, #84]	; (4d4 <blinky_init+0x60>)
     47e:	4816      	ldr	r0, [pc, #88]	; (4d8 <blinky_init+0x64>)
     480:	4b16      	ldr	r3, [pc, #88]	; (4dc <blinky_init+0x68>)
     482:	4798      	blx	r3

  // initialize the port-specific interface
  mu_port_init();
     484:	4b16      	ldr	r3, [pc, #88]	; (4e0 <blinky_init+0x6c>)
     486:	4798      	blx	r3

  // set up the isr queue and the scheduler
  mu_spscq_init(&s_isr_queue, s_isr_queue_items, ISR_Q_CAPACITY);
     488:	4d16      	ldr	r5, [pc, #88]	; (4e4 <blinky_init+0x70>)
     48a:	002e      	movs	r6, r5
     48c:	3620      	adds	r6, #32
     48e:	2208      	movs	r2, #8
     490:	0029      	movs	r1, r5
     492:	0030      	movs	r0, r6
     494:	4b14      	ldr	r3, [pc, #80]	; (4e8 <blinky_init+0x74>)
     496:	4798      	blx	r3
  mu_sched_init(&s_sched, s_event_queue, EVENT_QUEUE_CAPACITY, &s_isr_queue);
     498:	0029      	movs	r1, r5
     49a:	312c      	adds	r1, #44	; 0x2c
     49c:	357c      	adds	r5, #124	; 0x7c
     49e:	0033      	movs	r3, r6
     4a0:	220a      	movs	r2, #10
     4a2:	0028      	movs	r0, r5
     4a4:	4c11      	ldr	r4, [pc, #68]	; (4ec <blinky_init+0x78>)
     4a6:	47a0      	blx	r4

  // initialize tasks
  led_task_init(&s_led_task, &s_led_ctx);
     4a8:	4c11      	ldr	r4, [pc, #68]	; (4f0 <blinky_init+0x7c>)
     4aa:	0021      	movs	r1, r4
     4ac:	311c      	adds	r1, #28
     4ae:	0026      	movs	r6, r4
     4b0:	3620      	adds	r6, #32
     4b2:	0030      	movs	r0, r6
     4b4:	4b0f      	ldr	r3, [pc, #60]	; (4f4 <blinky_init+0x80>)
     4b6:	4798      	blx	r3
  button_task_init(&s_button_task, &s_sched);
     4b8:	0020      	movs	r0, r4
     4ba:	3038      	adds	r0, #56	; 0x38
     4bc:	0029      	movs	r1, r5
     4be:	4b0e      	ldr	r3, [pc, #56]	; (4f8 <blinky_init+0x84>)
     4c0:	4798      	blx	r3

  // schedule the initial call to the LED task
  mu_sched_task_now(&s_sched, &s_led_task);
     4c2:	0031      	movs	r1, r6
     4c4:	0028      	movs	r0, r5
     4c6:	4b0d      	ldr	r3, [pc, #52]	; (4fc <blinky_init+0x88>)
     4c8:	4798      	blx	r3
}
     4ca:	bd70      	pop	{r4, r5, r6, pc}
     4cc:	000025c0 	.word	0x000025c0
     4d0:	000015f5 	.word	0x000015f5
     4d4:	000025d0 	.word	0x000025d0
     4d8:	000025d8 	.word	0x000025d8
     4dc:	00001501 	.word	0x00001501
     4e0:	00001081 	.word	0x00001081
     4e4:	20000098 	.word	0x20000098
     4e8:	0000032d 	.word	0x0000032d
     4ec:	000001cd 	.word	0x000001cd
     4f0:	20000118 	.word	0x20000118
     4f4:	00001041 	.word	0x00001041
     4f8:	0000054d 	.word	0x0000054d
     4fc:	000002a9 	.word	0x000002a9

00000500 <blinky_step>:

void blinky_step() {
     500:	b510      	push	{r4, lr}
  // called repeatedly from main(): run the scheduler
  mu_sched_step(&s_sched);
     502:	4802      	ldr	r0, [pc, #8]	; (50c <blinky_step+0xc>)
     504:	307c      	adds	r0, #124	; 0x7c
     506:	4b02      	ldr	r3, [pc, #8]	; (510 <blinky_step+0x10>)
     508:	4798      	blx	r3
}
     50a:	bd10      	pop	{r4, pc}
     50c:	20000098 	.word	0x20000098
     510:	00000211 	.word	0x00000211

00000514 <button_task_fn>:
}

// =============================================================================
// local (static) code

static void *button_task_fn(void *ctx, void *arg) {
     514:	b510      	push	{r4, lr}
  // "context" is unused in button task
  // scheduler is passed as the second argument.
  mu_sched_t *sched = (mu_sched_t *)arg;
  mu_time_t now = mu_sched_get_current_time(sched);
     516:	0008      	movs	r0, r1
     518:	4b03      	ldr	r3, [pc, #12]	; (528 <button_task_fn+0x14>)
     51a:	4798      	blx	r3
     51c:	0001      	movs	r1, r0

  printf("button pressed at %lu\r\n", now);
     51e:	4803      	ldr	r0, [pc, #12]	; (52c <button_task_fn+0x18>)
     520:	4b03      	ldr	r3, [pc, #12]	; (530 <button_task_fn+0x1c>)
     522:	4798      	blx	r3
  return NULL;
}
     524:	2000      	movs	r0, #0
     526:	bd10      	pop	{r4, pc}
     528:	00000209 	.word	0x00000209
     52c:	0000260c 	.word	0x0000260c
     530:	00001501 	.word	0x00001501

00000534 <button_cb>:

// button_cb is triggered when a button press generates an interrupt.
// From interrupt level, schedule the button task upon leaving interrupt level.
static void button_cb() {
     534:	b510      	push	{r4, lr}
  mu_sched_task_from_isr(s_button_ctx.sched, s_button_ctx.task);
     536:	4b03      	ldr	r3, [pc, #12]	; (544 <button_cb+0x10>)
     538:	6819      	ldr	r1, [r3, #0]
     53a:	6858      	ldr	r0, [r3, #4]
     53c:	4b02      	ldr	r3, [pc, #8]	; (548 <button_cb+0x14>)
     53e:	4798      	blx	r3
}
     540:	bd10      	pop	{r4, pc}
     542:	46c0      	nop			; (mov r8, r8)
     544:	20000168 	.word	0x20000168
     548:	00000315 	.word	0x00000315

0000054c <button_task_init>:
                            mu_sched_t *sched) {
     54c:	b570      	push	{r4, r5, r6, lr}
     54e:	0004      	movs	r4, r0
  s_button_ctx.task = button_task;
     550:	4b07      	ldr	r3, [pc, #28]	; (570 <button_task_init+0x24>)
     552:	6018      	str	r0, [r3, #0]
  s_button_ctx.sched = sched;
     554:	6059      	str	r1, [r3, #4]
  ext_irq_register(PIN_PA15, button_cb);
     556:	4907      	ldr	r1, [pc, #28]	; (574 <button_task_init+0x28>)
     558:	200f      	movs	r0, #15
     55a:	4b07      	ldr	r3, [pc, #28]	; (578 <button_task_init+0x2c>)
     55c:	4798      	blx	r3
  mu_task_init(button_task, button_task_fn, NULL, "Button Interrupt");
     55e:	4b07      	ldr	r3, [pc, #28]	; (57c <button_task_init+0x30>)
     560:	2200      	movs	r2, #0
     562:	4907      	ldr	r1, [pc, #28]	; (580 <button_task_init+0x34>)
     564:	0020      	movs	r0, r4
     566:	4d07      	ldr	r5, [pc, #28]	; (584 <button_task_init+0x38>)
     568:	47a8      	blx	r5
}
     56a:	0020      	movs	r0, r4
     56c:	bd70      	pop	{r4, r5, r6, pc}
     56e:	46c0      	nop			; (mov r8, r8)
     570:	20000168 	.word	0x20000168
     574:	00000535 	.word	0x00000535
     578:	00000891 	.word	0x00000891
     57c:	00002624 	.word	0x00002624
     580:	00000515 	.word	0x00000515
     584:	000003c3 	.word	0x000003c3

00000588 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     588:	e7fe      	b.n	588 <Dummy_Handler>
	...

0000058c <Reset_Handler>:
{
     58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     58e:	4a2a      	ldr	r2, [pc, #168]	; (638 <Reset_Handler+0xac>)
     590:	4b2a      	ldr	r3, [pc, #168]	; (63c <Reset_Handler+0xb0>)
     592:	429a      	cmp	r2, r3
     594:	d011      	beq.n	5ba <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     596:	001a      	movs	r2, r3
     598:	4b29      	ldr	r3, [pc, #164]	; (640 <Reset_Handler+0xb4>)
     59a:	429a      	cmp	r2, r3
     59c:	d20d      	bcs.n	5ba <Reset_Handler+0x2e>
     59e:	4a29      	ldr	r2, [pc, #164]	; (644 <Reset_Handler+0xb8>)
     5a0:	3303      	adds	r3, #3
     5a2:	1a9b      	subs	r3, r3, r2
     5a4:	089b      	lsrs	r3, r3, #2
     5a6:	3301      	adds	r3, #1
     5a8:	009b      	lsls	r3, r3, #2
     5aa:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     5ac:	4823      	ldr	r0, [pc, #140]	; (63c <Reset_Handler+0xb0>)
     5ae:	4922      	ldr	r1, [pc, #136]	; (638 <Reset_Handler+0xac>)
     5b0:	588c      	ldr	r4, [r1, r2]
     5b2:	5084      	str	r4, [r0, r2]
     5b4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     5b6:	429a      	cmp	r2, r3
     5b8:	d1fa      	bne.n	5b0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     5ba:	4a23      	ldr	r2, [pc, #140]	; (648 <Reset_Handler+0xbc>)
     5bc:	4b23      	ldr	r3, [pc, #140]	; (64c <Reset_Handler+0xc0>)
     5be:	429a      	cmp	r2, r3
     5c0:	d20a      	bcs.n	5d8 <Reset_Handler+0x4c>
     5c2:	43d3      	mvns	r3, r2
     5c4:	4921      	ldr	r1, [pc, #132]	; (64c <Reset_Handler+0xc0>)
     5c6:	185b      	adds	r3, r3, r1
     5c8:	2103      	movs	r1, #3
     5ca:	438b      	bics	r3, r1
     5cc:	3304      	adds	r3, #4
     5ce:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     5d0:	2100      	movs	r1, #0
     5d2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     5d4:	4293      	cmp	r3, r2
     5d6:	d1fc      	bne.n	5d2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     5d8:	4a1d      	ldr	r2, [pc, #116]	; (650 <Reset_Handler+0xc4>)
     5da:	21ff      	movs	r1, #255	; 0xff
     5dc:	4b1d      	ldr	r3, [pc, #116]	; (654 <Reset_Handler+0xc8>)
     5de:	438b      	bics	r3, r1
     5e0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     5e2:	39fd      	subs	r1, #253	; 0xfd
     5e4:	2390      	movs	r3, #144	; 0x90
     5e6:	005b      	lsls	r3, r3, #1
     5e8:	4a1b      	ldr	r2, [pc, #108]	; (658 <Reset_Handler+0xcc>)
     5ea:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     5ec:	4a1b      	ldr	r2, [pc, #108]	; (65c <Reset_Handler+0xd0>)
     5ee:	78d3      	ldrb	r3, [r2, #3]
     5f0:	2503      	movs	r5, #3
     5f2:	43ab      	bics	r3, r5
     5f4:	2402      	movs	r4, #2
     5f6:	4323      	orrs	r3, r4
     5f8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     5fa:	78d3      	ldrb	r3, [r2, #3]
     5fc:	270c      	movs	r7, #12
     5fe:	43bb      	bics	r3, r7
     600:	2608      	movs	r6, #8
     602:	4333      	orrs	r3, r6
     604:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     606:	4b16      	ldr	r3, [pc, #88]	; (660 <Reset_Handler+0xd4>)
     608:	7b98      	ldrb	r0, [r3, #14]
     60a:	2230      	movs	r2, #48	; 0x30
     60c:	4390      	bics	r0, r2
     60e:	2220      	movs	r2, #32
     610:	4310      	orrs	r0, r2
     612:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     614:	7b99      	ldrb	r1, [r3, #14]
     616:	43b9      	bics	r1, r7
     618:	4331      	orrs	r1, r6
     61a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     61c:	7b9a      	ldrb	r2, [r3, #14]
     61e:	43aa      	bics	r2, r5
     620:	4322      	orrs	r2, r4
     622:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     624:	4a0f      	ldr	r2, [pc, #60]	; (664 <Reset_Handler+0xd8>)
     626:	6853      	ldr	r3, [r2, #4]
     628:	2180      	movs	r1, #128	; 0x80
     62a:	430b      	orrs	r3, r1
     62c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     62e:	4b0e      	ldr	r3, [pc, #56]	; (668 <Reset_Handler+0xdc>)
     630:	4798      	blx	r3
        main();
     632:	4b0e      	ldr	r3, [pc, #56]	; (66c <Reset_Handler+0xe0>)
     634:	4798      	blx	r3
     636:	e7fe      	b.n	636 <Reset_Handler+0xaa>
     638:	000027f8 	.word	0x000027f8
     63c:	20000000 	.word	0x20000000
     640:	20000064 	.word	0x20000064
     644:	20000004 	.word	0x20000004
     648:	20000064 	.word	0x20000064
     64c:	200001e8 	.word	0x200001e8
     650:	e000ed00 	.word	0xe000ed00
     654:	00000000 	.word	0x00000000
     658:	41007000 	.word	0x41007000
     65c:	41005000 	.word	0x41005000
     660:	41004800 	.word	0x41004800
     664:	41004000 	.word	0x41004000
     668:	00001471 	.word	0x00001471
     66c:	00001065 	.word	0x00001065

00000670 <EXTERNAL_IRQ_0_init>:
struct usart_sync_descriptor TARGET_IO;

struct calendar_descriptor CALENDAR_0;

void EXTERNAL_IRQ_0_init(void)
{
     670:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     672:	4a11      	ldr	r2, [pc, #68]	; (6b8 <EXTERNAL_IRQ_0_init+0x48>)
     674:	4b11      	ldr	r3, [pc, #68]	; (6bc <EXTERNAL_IRQ_0_init+0x4c>)
     676:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     678:	22c0      	movs	r2, #192	; 0xc0
     67a:	05d2      	lsls	r2, r2, #23
     67c:	2080      	movs	r0, #128	; 0x80
     67e:	0200      	lsls	r0, r0, #8
     680:	6050      	str	r0, [r2, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     682:	4b0f      	ldr	r3, [pc, #60]	; (6c0 <EXTERNAL_IRQ_0_init+0x50>)
     684:	490f      	ldr	r1, [pc, #60]	; (6c4 <EXTERNAL_IRQ_0_init+0x54>)
     686:	6299      	str	r1, [r3, #40]	; 0x28
     688:	490f      	ldr	r1, [pc, #60]	; (6c8 <EXTERNAL_IRQ_0_init+0x58>)
     68a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     68c:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     68e:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     690:	214f      	movs	r1, #79	; 0x4f
     692:	5c5c      	ldrb	r4, [r3, r1]
     694:	2504      	movs	r5, #4
     696:	432c      	orrs	r4, r5
     698:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     69a:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     69c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     69e:	2001      	movs	r0, #1
     6a0:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6a2:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a4:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6a6:	3918      	subs	r1, #24
     6a8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6aa:	300e      	adds	r0, #14
     6ac:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6ae:	545a      	strb	r2, [r3, r1]
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA15A_EIC_EXTINT15);

	ext_irq_init();
     6b0:	4b06      	ldr	r3, [pc, #24]	; (6cc <EXTERNAL_IRQ_0_init+0x5c>)
     6b2:	4798      	blx	r3
}
     6b4:	bd70      	pop	{r4, r5, r6, pc}
     6b6:	46c0      	nop			; (mov r8, r8)
     6b8:	00004005 	.word	0x00004005
     6bc:	40000c00 	.word	0x40000c00
     6c0:	41004400 	.word	0x41004400
     6c4:	40028000 	.word	0x40028000
     6c8:	c0020000 	.word	0xc0020000
     6cc:	0000086d 	.word	0x0000086d

000006d0 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     6d0:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6d2:	4b0e      	ldr	r3, [pc, #56]	; (70c <TARGET_IO_PORT_init+0x3c>)
     6d4:	2256      	movs	r2, #86	; 0x56
     6d6:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6d8:	2501      	movs	r5, #1
     6da:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6dc:	2401      	movs	r4, #1
     6de:	4321      	orrs	r1, r4
     6e0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6e2:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6e4:	203b      	movs	r0, #59	; 0x3b
     6e6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6e8:	3a47      	subs	r2, #71	; 0x47
     6ea:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     6ec:	3a0d      	subs	r2, #13
     6ee:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6f0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6f2:	2157      	movs	r1, #87	; 0x57
     6f4:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6f6:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6f8:	4322      	orrs	r2, r4
     6fa:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6fc:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6fe:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     700:	3948      	subs	r1, #72	; 0x48
     702:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     704:	3111      	adds	r1, #17
     706:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     708:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     70a:	bd30      	pop	{r4, r5, pc}
     70c:	41004400 	.word	0x41004400

00000710 <TARGET_IO_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     710:	4a04      	ldr	r2, [pc, #16]	; (724 <TARGET_IO_CLOCK_init+0x14>)
     712:	6a13      	ldr	r3, [r2, #32]
     714:	2120      	movs	r1, #32
     716:	430b      	orrs	r3, r1
     718:	6213      	str	r3, [r2, #32]
     71a:	4a03      	ldr	r2, [pc, #12]	; (728 <TARGET_IO_CLOCK_init+0x18>)
     71c:	4b03      	ldr	r3, [pc, #12]	; (72c <TARGET_IO_CLOCK_init+0x1c>)
     71e:	805a      	strh	r2, [r3, #2]

void TARGET_IO_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     720:	4770      	bx	lr
     722:	46c0      	nop			; (mov r8, r8)
     724:	40000400 	.word	0x40000400
     728:	00004017 	.word	0x00004017
     72c:	40000c00 	.word	0x40000c00

00000730 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     730:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     732:	4b05      	ldr	r3, [pc, #20]	; (748 <TARGET_IO_init+0x18>)
     734:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM3, (void *)NULL);
     736:	2200      	movs	r2, #0
     738:	4904      	ldr	r1, [pc, #16]	; (74c <TARGET_IO_init+0x1c>)
     73a:	4805      	ldr	r0, [pc, #20]	; (750 <TARGET_IO_init+0x20>)
     73c:	4b05      	ldr	r3, [pc, #20]	; (754 <TARGET_IO_init+0x24>)
     73e:	4798      	blx	r3
	TARGET_IO_PORT_init();
     740:	4b05      	ldr	r3, [pc, #20]	; (758 <TARGET_IO_init+0x28>)
     742:	4798      	blx	r3
}
     744:	bd10      	pop	{r4, pc}
     746:	46c0      	nop			; (mov r8, r8)
     748:	00000711 	.word	0x00000711
     74c:	42001400 	.word	0x42001400
     750:	200001bc 	.word	0x200001bc
     754:	00000a25 	.word	0x00000a25
     758:	000006d1 	.word	0x000006d1

0000075c <CALENDAR_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     75c:	4a04      	ldr	r2, [pc, #16]	; (770 <CALENDAR_0_CLOCK_init+0x14>)
     75e:	6993      	ldr	r3, [r2, #24]
     760:	2120      	movs	r1, #32
     762:	430b      	orrs	r3, r1
     764:	6193      	str	r3, [r2, #24]
     766:	4a03      	ldr	r2, [pc, #12]	; (774 <CALENDAR_0_CLOCK_init+0x18>)
     768:	4b03      	ldr	r3, [pc, #12]	; (778 <CALENDAR_0_CLOCK_init+0x1c>)
     76a:	805a      	strh	r2, [r3, #2]

void CALENDAR_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
     76c:	4770      	bx	lr
     76e:	46c0      	nop			; (mov r8, r8)
     770:	40000400 	.word	0x40000400
     774:	00004304 	.word	0x00004304
     778:	40000c00 	.word	0x40000c00

0000077c <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     77c:	b510      	push	{r4, lr}
	CALENDAR_0_CLOCK_init();
     77e:	4b03      	ldr	r3, [pc, #12]	; (78c <CALENDAR_0_init+0x10>)
     780:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     782:	4903      	ldr	r1, [pc, #12]	; (790 <CALENDAR_0_init+0x14>)
     784:	4803      	ldr	r0, [pc, #12]	; (794 <CALENDAR_0_init+0x18>)
     786:	4b04      	ldr	r3, [pc, #16]	; (798 <CALENDAR_0_init+0x1c>)
     788:	4798      	blx	r3
}
     78a:	bd10      	pop	{r4, pc}
     78c:	0000075d 	.word	0x0000075d
     790:	40001400 	.word	0x40001400
     794:	200001c8 	.word	0x200001c8
     798:	000007ed 	.word	0x000007ed

0000079c <system_init>:

void system_init(void)
{
     79c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     79e:	4b0d      	ldr	r3, [pc, #52]	; (7d4 <system_init+0x38>)
     7a0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7a2:	23c0      	movs	r3, #192	; 0xc0
     7a4:	05db      	lsls	r3, r3, #23
     7a6:	2280      	movs	r2, #128	; 0x80
     7a8:	05d2      	lsls	r2, r2, #23
     7aa:	2198      	movs	r1, #152	; 0x98
     7ac:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7ae:	3910      	subs	r1, #16
     7b0:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7b2:	4b09      	ldr	r3, [pc, #36]	; (7d8 <system_init+0x3c>)
     7b4:	3120      	adds	r1, #32
     7b6:	505a      	str	r2, [r3, r1]
     7b8:	4a08      	ldr	r2, [pc, #32]	; (7dc <system_init+0x40>)
     7ba:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7bc:	3136      	adds	r1, #54	; 0x36
     7be:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7c0:	2001      	movs	r0, #1
     7c2:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7c4:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(USER_LED_, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(USER_LED_, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     7c6:	4b06      	ldr	r3, [pc, #24]	; (7e0 <system_init+0x44>)
     7c8:	4798      	blx	r3

	TARGET_IO_init();
     7ca:	4b06      	ldr	r3, [pc, #24]	; (7e4 <system_init+0x48>)
     7cc:	4798      	blx	r3

	CALENDAR_0_init();
     7ce:	4b06      	ldr	r3, [pc, #24]	; (7e8 <system_init+0x4c>)
     7d0:	4798      	blx	r3
}
     7d2:	bd10      	pop	{r4, pc}
     7d4:	00000bb9 	.word	0x00000bb9
     7d8:	41004400 	.word	0x41004400
     7dc:	c0004000 	.word	0xc0004000
     7e0:	00000671 	.word	0x00000671
     7e4:	00000731 	.word	0x00000731
     7e8:	0000077d 	.word	0x0000077d

000007ec <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
     7ec:	b570      	push	{r4, r5, r6, lr}
     7ee:	0004      	movs	r4, r0
     7f0:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
     7f2:	1e43      	subs	r3, r0, #1
     7f4:	4198      	sbcs	r0, r3
     7f6:	b2c0      	uxtb	r0, r0
     7f8:	22e0      	movs	r2, #224	; 0xe0
     7fa:	0052      	lsls	r2, r2, #1
     7fc:	4909      	ldr	r1, [pc, #36]	; (824 <calendar_init+0x38>)
     7fe:	4b0a      	ldr	r3, [pc, #40]	; (828 <calendar_init+0x3c>)
     800:	4798      	blx	r3

	if (calendar->device.hw == hw) {
     802:	6823      	ldr	r3, [r4, #0]
     804:	42ab      	cmp	r3, r5
     806:	d008      	beq.n	81a <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
     808:	2b00      	cmp	r3, #0
     80a:	d108      	bne.n	81e <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
     80c:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
     80e:	0020      	movs	r0, r4
     810:	4b06      	ldr	r3, [pc, #24]	; (82c <calendar_init+0x40>)
     812:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
     814:	4b06      	ldr	r3, [pc, #24]	; (830 <calendar_init+0x44>)
     816:	6163      	str	r3, [r4, #20]

	return ret;
}
     818:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
     81a:	2000      	movs	r0, #0
     81c:	e7fc      	b.n	818 <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
     81e:	2012      	movs	r0, #18
     820:	4240      	negs	r0, r0
     822:	e7f9      	b.n	818 <calendar_init+0x2c>
     824:	00002638 	.word	0x00002638
     828:	00000a9d 	.word	0x00000a9d
     82c:	00000df1 	.word	0x00000df1
     830:	000007b2 	.word	0x000007b2

00000834 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     834:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     836:	4b0c      	ldr	r3, [pc, #48]	; (868 <process_ext_irq+0x34>)
     838:	685c      	ldr	r4, [r3, #4]
     83a:	42a0      	cmp	r0, r4
     83c:	d00e      	beq.n	85c <process_ext_irq+0x28>
     83e:	2201      	movs	r2, #1
     840:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     842:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     844:	25ff      	movs	r5, #255	; 0xff
     846:	e003      	b.n	850 <process_ext_irq+0x1c>
     848:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     84a:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     84c:	085b      	lsrs	r3, r3, #1
     84e:	d10a      	bne.n	866 <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     850:	42a0      	cmp	r0, r4
     852:	d9f9      	bls.n	848 <process_ext_irq+0x14>
	while (upper >= lower) {
     854:	2a00      	cmp	r2, #0
     856:	d006      	beq.n	866 <process_ext_irq+0x32>
			lower = middle + 1;
     858:	0031      	movs	r1, r6
     85a:	e7f6      	b.n	84a <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     85c:	4b02      	ldr	r3, [pc, #8]	; (868 <process_ext_irq+0x34>)
     85e:	681b      	ldr	r3, [r3, #0]
     860:	2b00      	cmp	r3, #0
     862:	d000      	beq.n	866 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     864:	4798      	blx	r3
		}
	}
}
     866:	bd70      	pop	{r4, r5, r6, pc}
     868:	20000170 	.word	0x20000170

0000086c <ext_irq_init>:
{
     86c:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     86e:	4b05      	ldr	r3, [pc, #20]	; (884 <ext_irq_init+0x18>)
     870:	2201      	movs	r2, #1
     872:	4252      	negs	r2, r2
     874:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     876:	2200      	movs	r2, #0
     878:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     87a:	4803      	ldr	r0, [pc, #12]	; (888 <ext_irq_init+0x1c>)
     87c:	4b03      	ldr	r3, [pc, #12]	; (88c <ext_irq_init+0x20>)
     87e:	4798      	blx	r3
}
     880:	bd10      	pop	{r4, pc}
     882:	46c0      	nop			; (mov r8, r8)
     884:	20000170 	.word	0x20000170
     888:	00000835 	.word	0x00000835
     88c:	00000be9 	.word	0x00000be9

00000890 <ext_irq_register>:
{
     890:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     892:	4b0f      	ldr	r3, [pc, #60]	; (8d0 <ext_irq_register+0x40>)
     894:	685b      	ldr	r3, [r3, #4]
     896:	4298      	cmp	r0, r3
     898:	d008      	beq.n	8ac <ext_irq_register+0x1c>
	if (NULL == cb) {
     89a:	2900      	cmp	r1, #0
     89c:	d014      	beq.n	8c8 <ext_irq_register+0x38>
			if (NULL == ext_irqs[i].cb) {
     89e:	4b0c      	ldr	r3, [pc, #48]	; (8d0 <ext_irq_register+0x40>)
     8a0:	681b      	ldr	r3, [r3, #0]
     8a2:	2b00      	cmp	r3, #0
     8a4:	d009      	beq.n	8ba <ext_irq_register+0x2a>
		return ERR_INVALID_ARG;
     8a6:	200d      	movs	r0, #13
     8a8:	4240      	negs	r0, r0
     8aa:	e00c      	b.n	8c6 <ext_irq_register+0x36>
			ext_irqs[i].cb = cb;
     8ac:	4b08      	ldr	r3, [pc, #32]	; (8d0 <ext_irq_register+0x40>)
     8ae:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     8b0:	2900      	cmp	r1, #0
     8b2:	d105      	bne.n	8c0 <ext_irq_register+0x30>
		return _ext_irq_enable(pin, false);
     8b4:	4b07      	ldr	r3, [pc, #28]	; (8d4 <ext_irq_register+0x44>)
     8b6:	4798      	blx	r3
     8b8:	e005      	b.n	8c6 <ext_irq_register+0x36>
				ext_irqs[i].cb  = cb;
     8ba:	4b05      	ldr	r3, [pc, #20]	; (8d0 <ext_irq_register+0x40>)
     8bc:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     8be:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     8c0:	2101      	movs	r1, #1
     8c2:	4b04      	ldr	r3, [pc, #16]	; (8d4 <ext_irq_register+0x44>)
     8c4:	4798      	blx	r3
}
     8c6:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     8c8:	200d      	movs	r0, #13
     8ca:	4240      	negs	r0, r0
     8cc:	e7fb      	b.n	8c6 <ext_irq_register+0x36>
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	20000170 	.word	0x20000170
     8d4:	00000c81 	.word	0x00000c81

000008d8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     8d8:	b570      	push	{r4, r5, r6, lr}
     8da:	0006      	movs	r6, r0
     8dc:	000c      	movs	r4, r1
     8de:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     8e0:	2800      	cmp	r0, #0
     8e2:	d00d      	beq.n	900 <io_write+0x28>
     8e4:	0008      	movs	r0, r1
     8e6:	1e43      	subs	r3, r0, #1
     8e8:	4198      	sbcs	r0, r3
     8ea:	b2c0      	uxtb	r0, r0
     8ec:	2234      	movs	r2, #52	; 0x34
     8ee:	4905      	ldr	r1, [pc, #20]	; (904 <io_write+0x2c>)
     8f0:	4b05      	ldr	r3, [pc, #20]	; (908 <io_write+0x30>)
     8f2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     8f4:	6833      	ldr	r3, [r6, #0]
     8f6:	002a      	movs	r2, r5
     8f8:	0021      	movs	r1, r4
     8fa:	0030      	movs	r0, r6
     8fc:	4798      	blx	r3
}
     8fe:	bd70      	pop	{r4, r5, r6, pc}
     900:	2000      	movs	r0, #0
     902:	e7f3      	b.n	8ec <io_write+0x14>
     904:	00002654 	.word	0x00002654
     908:	00000a9d 	.word	0x00000a9d

0000090c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     90c:	b570      	push	{r4, r5, r6, lr}
     90e:	0006      	movs	r6, r0
     910:	000c      	movs	r4, r1
     912:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     914:	2800      	cmp	r0, #0
     916:	d00d      	beq.n	934 <io_read+0x28>
     918:	0008      	movs	r0, r1
     91a:	1e43      	subs	r3, r0, #1
     91c:	4198      	sbcs	r0, r3
     91e:	b2c0      	uxtb	r0, r0
     920:	223d      	movs	r2, #61	; 0x3d
     922:	4905      	ldr	r1, [pc, #20]	; (938 <io_read+0x2c>)
     924:	4b05      	ldr	r3, [pc, #20]	; (93c <io_read+0x30>)
     926:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     928:	6873      	ldr	r3, [r6, #4]
     92a:	002a      	movs	r2, r5
     92c:	0021      	movs	r1, r4
     92e:	0030      	movs	r0, r6
     930:	4798      	blx	r3
}
     932:	bd70      	pop	{r4, r5, r6, pc}
     934:	2000      	movs	r0, #0
     936:	e7f3      	b.n	920 <io_read+0x14>
     938:	00002654 	.word	0x00002654
     93c:	00000a9d 	.word	0x00000a9d

00000940 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     942:	46ce      	mov	lr, r9
     944:	4647      	mov	r7, r8
     946:	b580      	push	{r7, lr}
     948:	0004      	movs	r4, r0
     94a:	000f      	movs	r7, r1
     94c:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     94e:	2800      	cmp	r0, #0
     950:	d026      	beq.n	9a0 <usart_sync_write+0x60>
     952:	2900      	cmp	r1, #0
     954:	d026      	beq.n	9a4 <usart_sync_write+0x64>
     956:	0010      	movs	r0, r2
     958:	1e43      	subs	r3, r0, #1
     95a:	4198      	sbcs	r0, r3
     95c:	22f1      	movs	r2, #241	; 0xf1
     95e:	4912      	ldr	r1, [pc, #72]	; (9a8 <usart_sync_write+0x68>)
     960:	4b12      	ldr	r3, [pc, #72]	; (9ac <usart_sync_write+0x6c>)
     962:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     964:	3408      	adds	r4, #8
     966:	4d12      	ldr	r5, [pc, #72]	; (9b0 <usart_sync_write+0x70>)
     968:	0020      	movs	r0, r4
     96a:	47a8      	blx	r5
     96c:	2800      	cmp	r0, #0
     96e:	d0fb      	beq.n	968 <usart_sync_write+0x28>
     970:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     972:	4b10      	ldr	r3, [pc, #64]	; (9b4 <usart_sync_write+0x74>)
     974:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     976:	4d0e      	ldr	r5, [pc, #56]	; (9b0 <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     978:	5db9      	ldrb	r1, [r7, r6]
     97a:	0020      	movs	r0, r4
     97c:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     97e:	0020      	movs	r0, r4
     980:	47a8      	blx	r5
     982:	2800      	cmp	r0, #0
     984:	d0fb      	beq.n	97e <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     986:	3601      	adds	r6, #1
     988:	4546      	cmp	r6, r8
     98a:	d3f5      	bcc.n	978 <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
     98c:	4d0a      	ldr	r5, [pc, #40]	; (9b8 <usart_sync_write+0x78>)
     98e:	0020      	movs	r0, r4
     990:	47a8      	blx	r5
     992:	2800      	cmp	r0, #0
     994:	d0fb      	beq.n	98e <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
     996:	0030      	movs	r0, r6
     998:	bc0c      	pop	{r2, r3}
     99a:	4690      	mov	r8, r2
     99c:	4699      	mov	r9, r3
     99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     9a0:	2000      	movs	r0, #0
     9a2:	e7db      	b.n	95c <usart_sync_write+0x1c>
     9a4:	2000      	movs	r0, #0
     9a6:	e7d9      	b.n	95c <usart_sync_write+0x1c>
     9a8:	00002668 	.word	0x00002668
     9ac:	00000a9d 	.word	0x00000a9d
     9b0:	00000f85 	.word	0x00000f85
     9b4:	00000f75 	.word	0x00000f75
     9b8:	00000f8f 	.word	0x00000f8f

000009bc <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9be:	46ce      	mov	lr, r9
     9c0:	4647      	mov	r7, r8
     9c2:	b580      	push	{r7, lr}
     9c4:	0004      	movs	r4, r0
     9c6:	000f      	movs	r7, r1
     9c8:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     9ca:	2800      	cmp	r0, #0
     9cc:	d01d      	beq.n	a0a <usart_sync_read+0x4e>
     9ce:	2900      	cmp	r1, #0
     9d0:	d01d      	beq.n	a0e <usart_sync_read+0x52>
     9d2:	0010      	movs	r0, r2
     9d4:	1e43      	subs	r3, r0, #1
     9d6:	4198      	sbcs	r0, r3
     9d8:	2286      	movs	r2, #134	; 0x86
     9da:	0052      	lsls	r2, r2, #1
     9dc:	490d      	ldr	r1, [pc, #52]	; (a14 <usart_sync_read+0x58>)
     9de:	4b0e      	ldr	r3, [pc, #56]	; (a18 <usart_sync_read+0x5c>)
     9e0:	4798      	blx	r3
	uint32_t                      offset = 0;
     9e2:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     9e4:	3408      	adds	r4, #8
     9e6:	4d0d      	ldr	r5, [pc, #52]	; (a1c <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     9e8:	4b0d      	ldr	r3, [pc, #52]	; (a20 <usart_sync_read+0x64>)
     9ea:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     9ec:	0020      	movs	r0, r4
     9ee:	47a8      	blx	r5
     9f0:	2800      	cmp	r0, #0
     9f2:	d0fb      	beq.n	9ec <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     9f4:	0020      	movs	r0, r4
     9f6:	47c8      	blx	r9
     9f8:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     9fa:	3601      	adds	r6, #1
     9fc:	4546      	cmp	r6, r8
     9fe:	d3f5      	bcc.n	9ec <usart_sync_read+0x30>

	return (int32_t)offset;
}
     a00:	0030      	movs	r0, r6
     a02:	bc0c      	pop	{r2, r3}
     a04:	4690      	mov	r8, r2
     a06:	4699      	mov	r9, r3
     a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     a0a:	2000      	movs	r0, #0
     a0c:	e7e4      	b.n	9d8 <usart_sync_read+0x1c>
     a0e:	2000      	movs	r0, #0
     a10:	e7e2      	b.n	9d8 <usart_sync_read+0x1c>
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	00002668 	.word	0x00002668
     a18:	00000a9d 	.word	0x00000a9d
     a1c:	00000f99 	.word	0x00000f99
     a20:	00000f7d 	.word	0x00000f7d

00000a24 <usart_sync_init>:
{
     a24:	b570      	push	{r4, r5, r6, lr}
     a26:	0005      	movs	r5, r0
     a28:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     a2a:	2800      	cmp	r0, #0
     a2c:	d013      	beq.n	a56 <usart_sync_init+0x32>
     a2e:	0008      	movs	r0, r1
     a30:	1e43      	subs	r3, r0, #1
     a32:	4198      	sbcs	r0, r3
     a34:	b2c0      	uxtb	r0, r0
     a36:	2234      	movs	r2, #52	; 0x34
     a38:	4908      	ldr	r1, [pc, #32]	; (a5c <usart_sync_init+0x38>)
     a3a:	4b09      	ldr	r3, [pc, #36]	; (a60 <usart_sync_init+0x3c>)
     a3c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     a3e:	0028      	movs	r0, r5
     a40:	3008      	adds	r0, #8
     a42:	0021      	movs	r1, r4
     a44:	4b07      	ldr	r3, [pc, #28]	; (a64 <usart_sync_init+0x40>)
     a46:	4798      	blx	r3
	if (init_status) {
     a48:	2800      	cmp	r0, #0
     a4a:	d103      	bne.n	a54 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     a4c:	4b06      	ldr	r3, [pc, #24]	; (a68 <usart_sync_init+0x44>)
     a4e:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     a50:	4b06      	ldr	r3, [pc, #24]	; (a6c <usart_sync_init+0x48>)
     a52:	602b      	str	r3, [r5, #0]
}
     a54:	bd70      	pop	{r4, r5, r6, pc}
     a56:	2000      	movs	r0, #0
     a58:	e7ed      	b.n	a36 <usart_sync_init+0x12>
     a5a:	46c0      	nop			; (mov r8, r8)
     a5c:	00002668 	.word	0x00002668
     a60:	00000a9d 	.word	0x00000a9d
     a64:	00000f35 	.word	0x00000f35
     a68:	000009bd 	.word	0x000009bd
     a6c:	00000941 	.word	0x00000941

00000a70 <usart_sync_enable>:
{
     a70:	b510      	push	{r4, lr}
     a72:	0004      	movs	r4, r0
	ASSERT(descr);
     a74:	1e43      	subs	r3, r0, #1
     a76:	4198      	sbcs	r0, r3
     a78:	b2c0      	uxtb	r0, r0
     a7a:	2253      	movs	r2, #83	; 0x53
     a7c:	4904      	ldr	r1, [pc, #16]	; (a90 <usart_sync_enable+0x20>)
     a7e:	4b05      	ldr	r3, [pc, #20]	; (a94 <usart_sync_enable+0x24>)
     a80:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     a82:	0020      	movs	r0, r4
     a84:	3008      	adds	r0, #8
     a86:	4b04      	ldr	r3, [pc, #16]	; (a98 <usart_sync_enable+0x28>)
     a88:	4798      	blx	r3
}
     a8a:	2000      	movs	r0, #0
     a8c:	bd10      	pop	{r4, pc}
     a8e:	46c0      	nop			; (mov r8, r8)
     a90:	00002668 	.word	0x00002668
     a94:	00000a9d 	.word	0x00000a9d
     a98:	00000f61 	.word	0x00000f61

00000a9c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     a9c:	2800      	cmp	r0, #0
     a9e:	d100      	bne.n	aa2 <assert+0x6>
		__asm("BKPT #0");
     aa0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     aa2:	4770      	bx	lr

00000aa4 <event_subscribe>:

static struct list_descriptor events;
static uint8_t                subscribed[EVENT_MASK_SIZE];

int32_t event_subscribe(struct event *const event, const event_id_t id, event_cb_t cb)
{
     aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     aa6:	0005      	movs	r5, r0
     aa8:	0017      	movs	r7, r2
	/* get byte and bit number of the given event in the event mask */
	const uint8_t position = id >> 3;
     aaa:	08ce      	lsrs	r6, r1, #3
	const uint8_t mask     = 1 << (id & 0x7);
     aac:	2307      	movs	r3, #7
     aae:	400b      	ands	r3, r1
     ab0:	2401      	movs	r4, #1
     ab2:	409c      	lsls	r4, r3
     ab4:	b2e4      	uxtb	r4, r4

	ASSERT(event && cb && (id < EVENT_MAX_AMOUNT));
     ab6:	2800      	cmp	r0, #0
     ab8:	d01f      	beq.n	afa <event_subscribe+0x56>
     aba:	2a00      	cmp	r2, #0
     abc:	d01f      	beq.n	afe <event_subscribe+0x5a>
     abe:	2000      	movs	r0, #0
     ac0:	2307      	movs	r3, #7
     ac2:	428b      	cmp	r3, r1
     ac4:	4140      	adcs	r0, r0
     ac6:	2231      	movs	r2, #49	; 0x31
     ac8:	4913      	ldr	r1, [pc, #76]	; (b18 <event_subscribe+0x74>)
     aca:	4b14      	ldr	r3, [pc, #80]	; (b1c <event_subscribe+0x78>)
     acc:	4798      	blx	r3

	if (event->mask[position] & mask) {
     ace:	19ab      	adds	r3, r5, r6
     ad0:	791b      	ldrb	r3, [r3, #4]
     ad2:	4223      	tst	r3, r4
     ad4:	d11c      	bne.n	b10 <event_subscribe+0x6c>
		return ERR_NO_CHANGE; /* Already subscribed */
	}

	if (!is_list_element(&events, event)) {
     ad6:	0029      	movs	r1, r5
     ad8:	4811      	ldr	r0, [pc, #68]	; (b20 <event_subscribe+0x7c>)
     ada:	4b12      	ldr	r3, [pc, #72]	; (b24 <event_subscribe+0x80>)
     adc:	4798      	blx	r3
     ade:	2800      	cmp	r0, #0
     ae0:	d00f      	beq.n	b02 <event_subscribe+0x5e>
		memset(event->mask, 0, EVENT_MASK_SIZE);
		list_insert_as_head(&events, event);
	}
	event->cb = cb;
     ae2:	60af      	str	r7, [r5, #8]
	event->mask[position] |= mask;
     ae4:	19ad      	adds	r5, r5, r6
     ae6:	792b      	ldrb	r3, [r5, #4]
     ae8:	4323      	orrs	r3, r4
     aea:	712b      	strb	r3, [r5, #4]

	subscribed[position] |= mask;
     aec:	4b0c      	ldr	r3, [pc, #48]	; (b20 <event_subscribe+0x7c>)
     aee:	199b      	adds	r3, r3, r6
     af0:	791a      	ldrb	r2, [r3, #4]
     af2:	4314      	orrs	r4, r2
     af4:	711c      	strb	r4, [r3, #4]

	return ERR_NONE;
     af6:	2000      	movs	r0, #0
}
     af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(event && cb && (id < EVENT_MAX_AMOUNT));
     afa:	2000      	movs	r0, #0
     afc:	e7e3      	b.n	ac6 <event_subscribe+0x22>
     afe:	2000      	movs	r0, #0
     b00:	e7e1      	b.n	ac6 <event_subscribe+0x22>
		memset(event->mask, 0, EVENT_MASK_SIZE);
     b02:	2300      	movs	r3, #0
     b04:	712b      	strb	r3, [r5, #4]
		list_insert_as_head(&events, event);
     b06:	0029      	movs	r1, r5
     b08:	4805      	ldr	r0, [pc, #20]	; (b20 <event_subscribe+0x7c>)
     b0a:	4b07      	ldr	r3, [pc, #28]	; (b28 <event_subscribe+0x84>)
     b0c:	4798      	blx	r3
     b0e:	e7e8      	b.n	ae2 <event_subscribe+0x3e>
		return ERR_NO_CHANGE; /* Already subscribed */
     b10:	2002      	movs	r0, #2
     b12:	4240      	negs	r0, r0
     b14:	e7f0      	b.n	af8 <event_subscribe+0x54>
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	00002684 	.word	0x00002684
     b1c:	00000a9d 	.word	0x00000a9d
     b20:	20000178 	.word	0x20000178
     b24:	00000b2d 	.word	0x00000b2d
     b28:	00000b51 	.word	0x00000b51

00000b2c <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     b2c:	6803      	ldr	r3, [r0, #0]
     b2e:	2b00      	cmp	r3, #0
     b30:	d00a      	beq.n	b48 <is_list_element+0x1c>
		if (it == element) {
     b32:	428b      	cmp	r3, r1
     b34:	d00a      	beq.n	b4c <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     b36:	681b      	ldr	r3, [r3, #0]
     b38:	2b00      	cmp	r3, #0
     b3a:	d003      	beq.n	b44 <is_list_element+0x18>
		if (it == element) {
     b3c:	4299      	cmp	r1, r3
     b3e:	d1fa      	bne.n	b36 <is_list_element+0xa>
			return true;
     b40:	2001      	movs	r0, #1
     b42:	e000      	b.n	b46 <is_list_element+0x1a>
		}
	}

	return false;
     b44:	2000      	movs	r0, #0
}
     b46:	4770      	bx	lr
	return false;
     b48:	2000      	movs	r0, #0
     b4a:	e7fc      	b.n	b46 <is_list_element+0x1a>
			return true;
     b4c:	2001      	movs	r0, #1
     b4e:	e7fa      	b.n	b46 <is_list_element+0x1a>

00000b50 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     b50:	b570      	push	{r4, r5, r6, lr}
     b52:	0004      	movs	r4, r0
     b54:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     b56:	4b06      	ldr	r3, [pc, #24]	; (b70 <list_insert_as_head+0x20>)
     b58:	4798      	blx	r3
     b5a:	2301      	movs	r3, #1
     b5c:	4058      	eors	r0, r3
     b5e:	b2c0      	uxtb	r0, r0
     b60:	2239      	movs	r2, #57	; 0x39
     b62:	4904      	ldr	r1, [pc, #16]	; (b74 <list_insert_as_head+0x24>)
     b64:	4b04      	ldr	r3, [pc, #16]	; (b78 <list_insert_as_head+0x28>)
     b66:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     b68:	6823      	ldr	r3, [r4, #0]
     b6a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     b6c:	6025      	str	r5, [r4, #0]
}
     b6e:	bd70      	pop	{r4, r5, r6, pc}
     b70:	00000b2d 	.word	0x00000b2d
     b74:	000026a4 	.word	0x000026a4
     b78:	00000a9d 	.word	0x00000a9d

00000b7c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     b7c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     b7e:	4a06      	ldr	r2, [pc, #24]	; (b98 <_sbrk+0x1c>)
     b80:	6812      	ldr	r2, [r2, #0]
     b82:	2a00      	cmp	r2, #0
     b84:	d004      	beq.n	b90 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     b86:	4a04      	ldr	r2, [pc, #16]	; (b98 <_sbrk+0x1c>)
     b88:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     b8a:	18c3      	adds	r3, r0, r3
     b8c:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     b8e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     b90:	4902      	ldr	r1, [pc, #8]	; (b9c <_sbrk+0x20>)
     b92:	4a01      	ldr	r2, [pc, #4]	; (b98 <_sbrk+0x1c>)
     b94:	6011      	str	r1, [r2, #0]
     b96:	e7f6      	b.n	b86 <_sbrk+0xa>
     b98:	20000180 	.word	0x20000180
     b9c:	200021e8 	.word	0x200021e8

00000ba0 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     ba0:	2001      	movs	r0, #1
     ba2:	4240      	negs	r0, r0
     ba4:	4770      	bx	lr

00000ba6 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     ba6:	2380      	movs	r3, #128	; 0x80
     ba8:	019b      	lsls	r3, r3, #6
     baa:	604b      	str	r3, [r1, #4]

	return 0;
}
     bac:	2000      	movs	r0, #0
     bae:	4770      	bx	lr

00000bb0 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     bb0:	2001      	movs	r0, #1
     bb2:	4770      	bx	lr

00000bb4 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     bb4:	2000      	movs	r0, #0
     bb6:	4770      	bx	lr

00000bb8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     bb8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     bba:	4b06      	ldr	r3, [pc, #24]	; (bd4 <_init_chip+0x1c>)
     bbc:	685a      	ldr	r2, [r3, #4]
     bbe:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     bc0:	4b05      	ldr	r3, [pc, #20]	; (bd8 <_init_chip+0x20>)
     bc2:	4798      	blx	r3
	_sysctrl_init_sources();
     bc4:	4b05      	ldr	r3, [pc, #20]	; (bdc <_init_chip+0x24>)
     bc6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     bc8:	4b05      	ldr	r3, [pc, #20]	; (be0 <_init_chip+0x28>)
     bca:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     bcc:	20ff      	movs	r0, #255	; 0xff
     bce:	4b05      	ldr	r3, [pc, #20]	; (be4 <_init_chip+0x2c>)
     bd0:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     bd2:	bd10      	pop	{r4, pc}
     bd4:	41004000 	.word	0x41004000
     bd8:	00000dd1 	.word	0x00000dd1
     bdc:	00000fa5 	.word	0x00000fa5
     be0:	00000fe9 	.word	0x00000fe9
     be4:	00000d95 	.word	0x00000d95

00000be8 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     be8:	4a22      	ldr	r2, [pc, #136]	; (c74 <_ext_irq_init+0x8c>)
     bea:	7853      	ldrb	r3, [r2, #1]
     bec:	09db      	lsrs	r3, r3, #7
     bee:	d1fc      	bne.n	bea <_ext_irq_init+0x2>
     bf0:	4a20      	ldr	r2, [pc, #128]	; (c74 <_ext_irq_init+0x8c>)
     bf2:	7853      	ldrb	r3, [r2, #1]
     bf4:	09db      	lsrs	r3, r3, #7
     bf6:	d1fc      	bne.n	bf2 <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     bf8:	4b1e      	ldr	r3, [pc, #120]	; (c74 <_ext_irq_init+0x8c>)
     bfa:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     bfc:	079b      	lsls	r3, r3, #30
     bfe:	d50a      	bpl.n	c16 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     c00:	2200      	movs	r2, #0
     c02:	4b1c      	ldr	r3, [pc, #112]	; (c74 <_ext_irq_init+0x8c>)
     c04:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c06:	001a      	movs	r2, r3
     c08:	7853      	ldrb	r3, [r2, #1]
     c0a:	09db      	lsrs	r3, r3, #7
     c0c:	d1fc      	bne.n	c08 <_ext_irq_init+0x20>
     c0e:	4a19      	ldr	r2, [pc, #100]	; (c74 <_ext_irq_init+0x8c>)
     c10:	7853      	ldrb	r3, [r2, #1]
     c12:	09db      	lsrs	r3, r3, #7
     c14:	d1fc      	bne.n	c10 <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
     c16:	2201      	movs	r2, #1
     c18:	4b16      	ldr	r3, [pc, #88]	; (c74 <_ext_irq_init+0x8c>)
     c1a:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c1c:	001a      	movs	r2, r3
     c1e:	7853      	ldrb	r3, [r2, #1]
     c20:	09db      	lsrs	r3, r3, #7
     c22:	d1fc      	bne.n	c1e <_ext_irq_init+0x36>
     c24:	4a13      	ldr	r2, [pc, #76]	; (c74 <_ext_irq_init+0x8c>)
     c26:	7853      	ldrb	r3, [r2, #1]
     c28:	09db      	lsrs	r3, r3, #7
     c2a:	d1fc      	bne.n	c26 <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     c2c:	4b11      	ldr	r3, [pc, #68]	; (c74 <_ext_irq_init+0x8c>)
     c2e:	2200      	movs	r2, #0
     c30:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     c32:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     c34:	2180      	movs	r1, #128	; 0x80
     c36:	0209      	lsls	r1, r1, #8
     c38:	6159      	str	r1, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     c3a:	619a      	str	r2, [r3, #24]
     c3c:	2280      	movs	r2, #128	; 0x80
     c3e:	0592      	lsls	r2, r2, #22
     c40:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     c42:	781a      	ldrb	r2, [r3, #0]
     c44:	2102      	movs	r1, #2
     c46:	430a      	orrs	r2, r1
     c48:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c4a:	001a      	movs	r2, r3
     c4c:	7853      	ldrb	r3, [r2, #1]
     c4e:	09db      	lsrs	r3, r3, #7
     c50:	d1fc      	bne.n	c4c <_ext_irq_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c52:	4b09      	ldr	r3, [pc, #36]	; (c78 <_ext_irq_init+0x90>)
     c54:	2210      	movs	r2, #16
     c56:	2180      	movs	r1, #128	; 0x80
     c58:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     c5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c5e:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c62:	3101      	adds	r1, #1
     c64:	31ff      	adds	r1, #255	; 0xff
     c66:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c68:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     c6a:	4b04      	ldr	r3, [pc, #16]	; (c7c <_ext_irq_init+0x94>)
     c6c:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     c6e:	2000      	movs	r0, #0
     c70:	4770      	bx	lr
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	40001800 	.word	0x40001800
     c78:	e000e100 	.word	0xe000e100
     c7c:	20000184 	.word	0x20000184

00000c80 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
     c80:	280f      	cmp	r0, #15
     c82:	d002      	beq.n	c8a <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
     c84:	200d      	movs	r0, #13
     c86:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
     c88:	4770      	bx	lr
	if (enable) {
     c8a:	2900      	cmp	r1, #0
     c8c:	d106      	bne.n	c9c <_ext_irq_enable+0x1c>
	((Eic *)hw)->INTENCLR.reg = mask;
     c8e:	4b06      	ldr	r3, [pc, #24]	; (ca8 <_ext_irq_enable+0x28>)
     c90:	2280      	movs	r2, #128	; 0x80
     c92:	0212      	lsls	r2, r2, #8
     c94:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     c96:	611a      	str	r2, [r3, #16]
	return ERR_NONE;
     c98:	2000      	movs	r0, #0
     c9a:	e7f5      	b.n	c88 <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
     c9c:	2280      	movs	r2, #128	; 0x80
     c9e:	0212      	lsls	r2, r2, #8
     ca0:	4b01      	ldr	r3, [pc, #4]	; (ca8 <_ext_irq_enable+0x28>)
     ca2:	60da      	str	r2, [r3, #12]
     ca4:	2000      	movs	r0, #0
     ca6:	e7ef      	b.n	c88 <_ext_irq_enable+0x8>
     ca8:	40001800 	.word	0x40001800

00000cac <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     cac:	b5f0      	push	{r4, r5, r6, r7, lr}
     cae:	46ce      	mov	lr, r9
     cb0:	4647      	mov	r7, r8
     cb2:	b580      	push	{r7, lr}
     cb4:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
     cb6:	4b31      	ldr	r3, [pc, #196]	; (d7c <EIC_Handler+0xd0>)
     cb8:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     cba:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     cbc:	400a      	ands	r2, r1
     cbe:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     cc0:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     cc2:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     cc4:	4b2e      	ldr	r3, [pc, #184]	; (d80 <EIC_Handler+0xd4>)
     cc6:	6818      	ldr	r0, [r3, #0]
     cc8:	1e43      	subs	r3, r0, #1
     cca:	4198      	sbcs	r0, r3
     ccc:	b2c0      	uxtb	r0, r0
     cce:	22d2      	movs	r2, #210	; 0xd2
     cd0:	492c      	ldr	r1, [pc, #176]	; (d84 <EIC_Handler+0xd8>)
     cd2:	4b2d      	ldr	r3, [pc, #180]	; (d88 <EIC_Handler+0xdc>)
     cd4:	4798      	blx	r3

	while (flags) {
     cd6:	9b01      	ldr	r3, [sp, #4]
     cd8:	2b00      	cmp	r3, #0
     cda:	d049      	beq.n	d70 <EIC_Handler+0xc4>
     cdc:	2301      	movs	r3, #1
     cde:	425b      	negs	r3, r3
     ce0:	4699      	mov	r9, r3
		pos = ffs(flags) - 1;
     ce2:	4b2a      	ldr	r3, [pc, #168]	; (d8c <EIC_Handler+0xe0>)
     ce4:	4698      	mov	r8, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
     ce6:	4f26      	ldr	r7, [pc, #152]	; (d80 <EIC_Handler+0xd4>)
				if (_map[middle].extint == pos) {
     ce8:	4d29      	ldr	r5, [pc, #164]	; (d90 <EIC_Handler+0xe4>)
     cea:	e03a      	b.n	d62 <EIC_Handler+0xb6>
					upper = middle - 1;
     cec:	3a01      	subs	r2, #1
     cee:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
     cf0:	42b1      	cmp	r1, r6
     cf2:	d80c      	bhi.n	d0e <EIC_Handler+0x62>
				middle = (upper + lower) >> 1;
     cf4:	1873      	adds	r3, r6, r1
     cf6:	105b      	asrs	r3, r3, #1
     cf8:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
     cfa:	4003      	ands	r3, r0
     cfc:	00db      	lsls	r3, r3, #3
     cfe:	5d5b      	ldrb	r3, [r3, r5]
     d00:	42a3      	cmp	r3, r4
     d02:	d008      	beq.n	d16 <EIC_Handler+0x6a>
				if (_map[middle].extint < pos) {
     d04:	429c      	cmp	r4, r3
     d06:	ddf1      	ble.n	cec <EIC_Handler+0x40>
					lower = middle + 1;
     d08:	3201      	adds	r2, #1
     d0a:	b2d1      	uxtb	r1, r2
     d0c:	e7f0      	b.n	cf0 <EIC_Handler+0x44>
			if (INVALID_PIN_NUMBER != pin) {
     d0e:	464b      	mov	r3, r9
     d10:	3301      	adds	r3, #1
     d12:	d005      	beq.n	d20 <EIC_Handler+0x74>
     d14:	e001      	b.n	d1a <EIC_Handler+0x6e>
     d16:	230f      	movs	r3, #15
     d18:	4699      	mov	r9, r3
				callback(pin);
     d1a:	4648      	mov	r0, r9
     d1c:	683b      	ldr	r3, [r7, #0]
     d1e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     d20:	9b01      	ldr	r3, [sp, #4]
     d22:	2201      	movs	r2, #1
     d24:	40a2      	lsls	r2, r4
     d26:	4393      	bics	r3, r2
     d28:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     d2a:	9801      	ldr	r0, [sp, #4]
     d2c:	4b17      	ldr	r3, [pc, #92]	; (d8c <EIC_Handler+0xe0>)
     d2e:	4798      	blx	r3
     d30:	3801      	subs	r0, #1
     d32:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     d34:	1c63      	adds	r3, r4, #1
     d36:	d00a      	beq.n	d4e <EIC_Handler+0xa2>
				if (_map[middle].extint == pos) {
     d38:	2c0f      	cmp	r4, #15
     d3a:	d005      	beq.n	d48 <EIC_Handler+0x9c>
     d3c:	230f      	movs	r3, #15
     d3e:	2200      	movs	r2, #0
     d40:	2601      	movs	r6, #1
     d42:	2100      	movs	r1, #0
     d44:	20ff      	movs	r0, #255	; 0xff
     d46:	e7dd      	b.n	d04 <EIC_Handler+0x58>
     d48:	230f      	movs	r3, #15
     d4a:	4699      	mov	r9, r3
     d4c:	e7e5      	b.n	d1a <EIC_Handler+0x6e>
	return ((Eic *)hw)->INTFLAG.reg;
     d4e:	4b0b      	ldr	r3, [pc, #44]	; (d7c <EIC_Handler+0xd0>)
     d50:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     d52:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     d54:	400a      	ands	r2, r1
     d56:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     d58:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     d5a:	611a      	str	r2, [r3, #16]
	while (flags) {
     d5c:	9b01      	ldr	r3, [sp, #4]
     d5e:	2b00      	cmp	r3, #0
     d60:	d006      	beq.n	d70 <EIC_Handler+0xc4>
		pos = ffs(flags) - 1;
     d62:	9801      	ldr	r0, [sp, #4]
     d64:	47c0      	blx	r8
     d66:	3801      	subs	r0, #1
     d68:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     d6a:	1c63      	adds	r3, r4, #1
     d6c:	d1e4      	bne.n	d38 <EIC_Handler+0x8c>
     d6e:	e7ee      	b.n	d4e <EIC_Handler+0xa2>
	}
}
     d70:	b003      	add	sp, #12
     d72:	bc0c      	pop	{r2, r3}
     d74:	4690      	mov	r8, r2
     d76:	4699      	mov	r9, r3
     d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d7a:	46c0      	nop			; (mov r8, r8)
     d7c:	40001800 	.word	0x40001800
     d80:	20000184 	.word	0x20000184
     d84:	000026cc 	.word	0x000026cc
     d88:	00000a9d 	.word	0x00000a9d
     d8c:	0000141d 	.word	0x0000141d
     d90:	000026c4 	.word	0x000026c4

00000d94 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     d94:	07c3      	lsls	r3, r0, #31
     d96:	d50a      	bpl.n	dae <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     d98:	4b0b      	ldr	r3, [pc, #44]	; (dc8 <_gclk_init_generators_by_fref+0x34>)
     d9a:	2280      	movs	r2, #128	; 0x80
     d9c:	0052      	lsls	r2, r2, #1
     d9e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     da0:	2283      	movs	r2, #131	; 0x83
     da2:	0252      	lsls	r2, r2, #9
     da4:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     da6:	001a      	movs	r2, r3
     da8:	7853      	ldrb	r3, [r2, #1]
     daa:	09db      	lsrs	r3, r3, #7
     dac:	d1fc      	bne.n	da8 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     dae:	0703      	lsls	r3, r0, #28
     db0:	d509      	bpl.n	dc6 <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
     db2:	4b05      	ldr	r3, [pc, #20]	; (dc8 <_gclk_init_generators_by_fref+0x34>)
     db4:	2204      	movs	r2, #4
     db6:	32ff      	adds	r2, #255	; 0xff
     db8:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     dba:	4a04      	ldr	r2, [pc, #16]	; (dcc <_gclk_init_generators_by_fref+0x38>)
     dbc:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     dbe:	001a      	movs	r2, r3
     dc0:	7853      	ldrb	r3, [r2, #1]
     dc2:	09db      	lsrs	r3, r3, #7
     dc4:	d1fc      	bne.n	dc0 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     dc6:	4770      	bx	lr
     dc8:	40000c00 	.word	0x40000c00
     dcc:	00210303 	.word	0x00210303

00000dd0 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     dd0:	4b06      	ldr	r3, [pc, #24]	; (dec <_pm_init+0x1c>)
     dd2:	7a1a      	ldrb	r2, [r3, #8]
     dd4:	b2d2      	uxtb	r2, r2
     dd6:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     dd8:	7a5a      	ldrb	r2, [r3, #9]
     dda:	b2d2      	uxtb	r2, r2
     ddc:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     dde:	7a9a      	ldrb	r2, [r3, #10]
     de0:	b2d2      	uxtb	r2, r2
     de2:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     de4:	7ada      	ldrb	r2, [r3, #11]
     de6:	b2d2      	uxtb	r2, r2
     de8:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     dea:	4770      	bx	lr
     dec:	40000400 	.word	0x40000400

00000df0 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
     df0:	b510      	push	{r4, lr}
     df2:	1e04      	subs	r4, r0, #0
	uint16_t register_value;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     df4:	d036      	beq.n	e64 <_calendar_init+0x74>
     df6:	6800      	ldr	r0, [r0, #0]
     df8:	1e43      	subs	r3, r0, #1
     dfa:	4198      	sbcs	r0, r3
     dfc:	b2c0      	uxtb	r0, r0
     dfe:	2278      	movs	r2, #120	; 0x78
     e00:	4919      	ldr	r1, [pc, #100]	; (e68 <_calendar_init+0x78>)
     e02:	4b1a      	ldr	r3, [pc, #104]	; (e6c <_calendar_init+0x7c>)
     e04:	4798      	blx	r3

	_rtc_dev = dev;
     e06:	4b1a      	ldr	r3, [pc, #104]	; (e70 <_calendar_init+0x80>)
     e08:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw);
     e0a:	6822      	ldr	r2, [r4, #0]
typedef uint8_t  hri_rtcmode2_intflag_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtc_wait_for_sync(const void *const hw)
{
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     e0c:	7a93      	ldrb	r3, [r2, #10]
     e0e:	09db      	lsrs	r3, r3, #7
     e10:	d1fc      	bne.n	e0c <_calendar_init+0x1c>
     e12:	7a93      	ldrb	r3, [r2, #10]
     e14:	09db      	lsrs	r3, r3, #7
     e16:	d1fc      	bne.n	e12 <_calendar_init+0x22>

static inline bool hri_rtcmode0_get_CTRL_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
     e18:	8813      	ldrh	r3, [r2, #0]
	if (hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw)) {
     e1a:	079b      	lsls	r3, r3, #30
     e1c:	d50a      	bpl.n	e34 <_calendar_init+0x44>
}

static inline void hri_rtcmode0_clear_CTRL_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     e1e:	8813      	ldrh	r3, [r2, #0]
     e20:	2102      	movs	r1, #2
     e22:	438b      	bics	r3, r1
     e24:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     e26:	7a93      	ldrb	r3, [r2, #10]
     e28:	09db      	lsrs	r3, r3, #7
     e2a:	d1fc      	bne.n	e26 <_calendar_init+0x36>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw);
     e2c:	6822      	ldr	r2, [r4, #0]
     e2e:	7a93      	ldrb	r3, [r2, #10]
     e30:	09db      	lsrs	r3, r3, #7
     e32:	d1fc      	bne.n	e2e <_calendar_init+0x3e>
#endif
	}
	hri_rtcmode0_set_CTRL_SWRST_bit(dev->hw);
     e34:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     e36:	8813      	ldrh	r3, [r2, #0]
     e38:	2101      	movs	r1, #1
     e3a:	430b      	orrs	r3, r1
     e3c:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     e3e:	7a93      	ldrb	r3, [r2, #10]
     e40:	09db      	lsrs	r3, r3, #7
     e42:	d1fc      	bne.n	e3e <_calendar_init+0x4e>
	hri_rtcmode0_wait_for_sync(dev->hw);
     e44:	6822      	ldr	r2, [r4, #0]
     e46:	7a93      	ldrb	r3, [r2, #10]
     e48:	09db      	lsrs	r3, r3, #7
     e4a:	d1fc      	bne.n	e46 <_calendar_init+0x56>
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     e4c:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     e4e:	7a93      	ldrb	r3, [r2, #10]
     e50:	09db      	lsrs	r3, r3, #7
     e52:	d1fc      	bne.n	e4e <_calendar_init+0x5e>
	register_value &= (~RTC_MODE0_CTRL_MATCHCLR);

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	/* set continuously clock read update mode */
	hri_rtcmode0_set_READREQ_RCONT_bit(dev->hw);
     e54:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_rtc_set_READREQ_RCONT_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     e56:	8853      	ldrh	r3, [r2, #2]
     e58:	2180      	movs	r1, #128	; 0x80
     e5a:	01c9      	lsls	r1, r1, #7
     e5c:	430b      	orrs	r3, r1
     e5e:	8053      	strh	r3, [r2, #2]
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	return ERR_NONE;
}
     e60:	2000      	movs	r0, #0
     e62:	bd10      	pop	{r4, pc}
     e64:	2000      	movs	r0, #0
     e66:	e7ca      	b.n	dfe <_calendar_init+0xe>
     e68:	000026e4 	.word	0x000026e4
     e6c:	00000a9d 	.word	0x00000a9d
     e70:	20000188 	.word	0x20000188

00000e74 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     e74:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
     e76:	4b07      	ldr	r3, [pc, #28]	; (e94 <RTC_Handler+0x20>)
     e78:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     e7a:	6823      	ldr	r3, [r4, #0]
     e7c:	7a1b      	ldrb	r3, [r3, #8]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
     e7e:	07db      	lsls	r3, r3, #31
     e80:	d400      	bmi.n	e84 <RTC_Handler+0x10>
}
     e82:	bd10      	pop	{r4, pc}
		dev->callback(dev);
     e84:	0020      	movs	r0, r4
     e86:	6863      	ldr	r3, [r4, #4]
     e88:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     e8a:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     e8c:	2201      	movs	r2, #1
     e8e:	721a      	strb	r2, [r3, #8]
}
     e90:	e7f7      	b.n	e82 <RTC_Handler+0xe>
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	20000188 	.word	0x20000188

00000e98 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     e98:	b510      	push	{r4, lr}
     e9a:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     e9c:	4b1f      	ldr	r3, [pc, #124]	; (f1c <_usart_init+0x84>)
     e9e:	18c3      	adds	r3, r0, r3
     ea0:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
     ea2:	b2db      	uxtb	r3, r3
     ea4:	2b03      	cmp	r3, #3
     ea6:	d004      	beq.n	eb2 <_usart_init+0x1a>
	ASSERT(false);
     ea8:	4a1d      	ldr	r2, [pc, #116]	; (f20 <_usart_init+0x88>)
     eaa:	491e      	ldr	r1, [pc, #120]	; (f24 <_usart_init+0x8c>)
     eac:	2000      	movs	r0, #0
     eae:	4b1e      	ldr	r3, [pc, #120]	; (f28 <_usart_init+0x90>)
     eb0:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     eb2:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     eb4:	07db      	lsls	r3, r3, #31
     eb6:	d418      	bmi.n	eea <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     eb8:	2203      	movs	r2, #3
     eba:	69e3      	ldr	r3, [r4, #28]
     ebc:	421a      	tst	r2, r3
     ebe:	d1fc      	bne.n	eba <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     ec0:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     ec2:	079b      	lsls	r3, r3, #30
     ec4:	d50b      	bpl.n	ede <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     ec6:	6823      	ldr	r3, [r4, #0]
     ec8:	2202      	movs	r2, #2
     eca:	4393      	bics	r3, r2
     ecc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ece:	3201      	adds	r2, #1
     ed0:	69e3      	ldr	r3, [r4, #28]
     ed2:	421a      	tst	r2, r3
     ed4:	d1fc      	bne.n	ed0 <_usart_init+0x38>
     ed6:	2202      	movs	r2, #2
     ed8:	69e3      	ldr	r3, [r4, #28]
     eda:	421a      	tst	r2, r3
     edc:	d1fc      	bne.n	ed8 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     ede:	2305      	movs	r3, #5
     ee0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ee2:	2203      	movs	r2, #3
     ee4:	69e3      	ldr	r3, [r4, #28]
     ee6:	421a      	tst	r2, r3
     ee8:	d1fc      	bne.n	ee4 <_usart_init+0x4c>
     eea:	2201      	movs	r2, #1
     eec:	69e3      	ldr	r3, [r4, #28]
     eee:	421a      	tst	r2, r3
     ef0:	d1fc      	bne.n	eec <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     ef2:	4b0e      	ldr	r3, [pc, #56]	; (f2c <_usart_init+0x94>)
     ef4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ef6:	2203      	movs	r2, #3
     ef8:	69e3      	ldr	r3, [r4, #28]
     efa:	421a      	tst	r2, r3
     efc:	d1fc      	bne.n	ef8 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     efe:	23c0      	movs	r3, #192	; 0xc0
     f00:	029b      	lsls	r3, r3, #10
     f02:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     f04:	2207      	movs	r2, #7
     f06:	69e3      	ldr	r3, [r4, #28]
     f08:	421a      	tst	r2, r3
     f0a:	d1fc      	bne.n	f06 <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     f0c:	4b08      	ldr	r3, [pc, #32]	; (f30 <_usart_init+0x98>)
     f0e:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     f10:	2300      	movs	r3, #0
     f12:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     f14:	2230      	movs	r2, #48	; 0x30
     f16:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     f18:	2000      	movs	r0, #0
     f1a:	bd10      	pop	{r4, pc}
     f1c:	bdfff800 	.word	0xbdfff800
     f20:	0000023a 	.word	0x0000023a
     f24:	000026fc 	.word	0x000026fc
     f28:	00000a9d 	.word	0x00000a9d
     f2c:	40100004 	.word	0x40100004
     f30:	ffffc504 	.word	0xffffc504

00000f34 <_usart_sync_init>:
{
     f34:	b570      	push	{r4, r5, r6, lr}
     f36:	0005      	movs	r5, r0
     f38:	000c      	movs	r4, r1
	ASSERT(device);
     f3a:	1e43      	subs	r3, r0, #1
     f3c:	4198      	sbcs	r0, r3
     f3e:	b2c0      	uxtb	r0, r0
     f40:	22b4      	movs	r2, #180	; 0xb4
     f42:	4904      	ldr	r1, [pc, #16]	; (f54 <_usart_sync_init+0x20>)
     f44:	4b04      	ldr	r3, [pc, #16]	; (f58 <_usart_sync_init+0x24>)
     f46:	4798      	blx	r3
	device->hw = hw;
     f48:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     f4a:	0020      	movs	r0, r4
     f4c:	4b03      	ldr	r3, [pc, #12]	; (f5c <_usart_sync_init+0x28>)
     f4e:	4798      	blx	r3
}
     f50:	bd70      	pop	{r4, r5, r6, pc}
     f52:	46c0      	nop			; (mov r8, r8)
     f54:	000026fc 	.word	0x000026fc
     f58:	00000a9d 	.word	0x00000a9d
     f5c:	00000e99 	.word	0x00000e99

00000f60 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     f60:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     f62:	6813      	ldr	r3, [r2, #0]
     f64:	2102      	movs	r1, #2
     f66:	430b      	orrs	r3, r1
     f68:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     f6a:	3101      	adds	r1, #1
     f6c:	69d3      	ldr	r3, [r2, #28]
     f6e:	4219      	tst	r1, r3
     f70:	d1fc      	bne.n	f6c <_usart_sync_enable+0xc>
}
     f72:	4770      	bx	lr

00000f74 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     f74:	6803      	ldr	r3, [r0, #0]
     f76:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     f78:	8519      	strh	r1, [r3, #40]	; 0x28
}
     f7a:	4770      	bx	lr

00000f7c <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     f7c:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     f7e:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     f80:	b2c0      	uxtb	r0, r0
}
     f82:	4770      	bx	lr

00000f84 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     f84:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     f86:	7e18      	ldrb	r0, [r3, #24]
     f88:	2301      	movs	r3, #1
     f8a:	4018      	ands	r0, r3
}
     f8c:	4770      	bx	lr

00000f8e <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     f8e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     f90:	7e18      	ldrb	r0, [r3, #24]
     f92:	0780      	lsls	r0, r0, #30
     f94:	0fc0      	lsrs	r0, r0, #31
}
     f96:	4770      	bx	lr

00000f98 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     f98:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     f9a:	7e18      	ldrb	r0, [r3, #24]
     f9c:	0740      	lsls	r0, r0, #29
     f9e:	0fc0      	lsrs	r0, r0, #31
}
     fa0:	4770      	bx	lr
	...

00000fa4 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     fa4:	4b0e      	ldr	r3, [pc, #56]	; (fe0 <_sysctrl_init_sources+0x3c>)
     fa6:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     fa8:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     faa:	480e      	ldr	r0, [pc, #56]	; (fe4 <_sysctrl_init_sources+0x40>)
     fac:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     fae:	0f92      	lsrs	r2, r2, #30
     fb0:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
     fb2:	2002      	movs	r0, #2
     fb4:	4302      	orrs	r2, r0
     fb6:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     fb8:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     fba:	699a      	ldr	r2, [r3, #24]
     fbc:	4302      	orrs	r2, r0
     fbe:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     fc0:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     fc2:	211f      	movs	r1, #31
     fc4:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     fc6:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
     fc8:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     fca:	2208      	movs	r2, #8
     fcc:	68cb      	ldr	r3, [r1, #12]
     fce:	421a      	tst	r2, r3
     fd0:	d0fc      	beq.n	fcc <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
     fd2:	4a03      	ldr	r2, [pc, #12]	; (fe0 <_sysctrl_init_sources+0x3c>)
     fd4:	6a13      	ldr	r3, [r2, #32]
     fd6:	2180      	movs	r1, #128	; 0x80
     fd8:	430b      	orrs	r3, r1
     fda:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     fdc:	4770      	bx	lr
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	40000800 	.word	0x40000800
     fe4:	0fff0000 	.word	0x0fff0000

00000fe8 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
     fe8:	4a02      	ldr	r2, [pc, #8]	; (ff4 <_sysctrl_init_referenced_generators+0xc>)
     fea:	6993      	ldr	r3, [r2, #24]
     fec:	2102      	movs	r1, #2
     fee:	438b      	bics	r3, r1
     ff0:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     ff2:	4770      	bx	lr
     ff4:	40000800 	.word	0x40000800

00000ff8 <led_task_fn>:
}

// =============================================================================
// local (static) code

static void *led_task_fn(void *ctx, void *arg) {
     ff8:	b510      	push	{r4, lr}
     ffa:	000b      	movs	r3, r1
  // "context" is passed as the first argument, scheduler is second
  led_ctx_t *led_ctx = (led_ctx_t *)ctx;
  mu_sched_t *sched = (mu_sched_t *)arg;

  if (led_ctx->state == LED_OFF) {
     ffc:	7802      	ldrb	r2, [r0, #0]
     ffe:	2a00      	cmp	r2, #0
    1000:	d00d      	beq.n	101e <led_task_fn+0x26>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1002:	2480      	movs	r4, #128	; 0x80
    1004:	05e4      	lsls	r4, r4, #23
    1006:	2298      	movs	r2, #152	; 0x98
    1008:	21c0      	movs	r1, #192	; 0xc0
    100a:	05c9      	lsls	r1, r1, #23
    100c:	508c      	str	r4, [r1, r2]
    led_ctx->state = LED_ON;
    mu_sched_reschedule_in(sched, MU_TIME_MS_TO_DURATION(LED_ON_TIME_MS));

  } else {
    LED_Off();
    led_ctx->state = LED_OFF;
    100e:	2200      	movs	r2, #0
    1010:	7002      	strb	r2, [r0, #0]
    mu_sched_reschedule_in(sched, MU_TIME_MS_TO_DURATION(LED_OFF_TIME_MS));
    1012:	4909      	ldr	r1, [pc, #36]	; (1038 <led_task_fn+0x40>)
    1014:	0018      	movs	r0, r3
    1016:	4b09      	ldr	r3, [pc, #36]	; (103c <led_task_fn+0x44>)
    1018:	4798      	blx	r3
  }

  return NULL;
}
    101a:	2000      	movs	r0, #0
    101c:	bd10      	pop	{r4, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    101e:	2480      	movs	r4, #128	; 0x80
    1020:	05e4      	lsls	r4, r4, #23
    1022:	3294      	adds	r2, #148	; 0x94
    1024:	21c0      	movs	r1, #192	; 0xc0
    1026:	05c9      	lsls	r1, r1, #23
    1028:	508c      	str	r4, [r1, r2]
    led_ctx->state = LED_ON;
    102a:	3a93      	subs	r2, #147	; 0x93
    102c:	7002      	strb	r2, [r0, #0]
    mu_sched_reschedule_in(sched, MU_TIME_MS_TO_DURATION(LED_ON_TIME_MS));
    102e:	21a3      	movs	r1, #163	; 0xa3
    1030:	0018      	movs	r0, r3
    1032:	4b02      	ldr	r3, [pc, #8]	; (103c <led_task_fn+0x44>)
    1034:	4798      	blx	r3
    1036:	e7f0      	b.n	101a <led_task_fn+0x22>
    1038:	00007f5c 	.word	0x00007f5c
    103c:	000002c9 	.word	0x000002c9

00001040 <led_task_init>:
mu_task_t *led_task_init(mu_task_t *led_task, led_ctx_t *led_ctx) {
    1040:	b570      	push	{r4, r5, r6, lr}
    1042:	0004      	movs	r4, r0
    1044:	000a      	movs	r2, r1
  led_ctx->state = LED_OFF;
    1046:	2300      	movs	r3, #0
    1048:	700b      	strb	r3, [r1, #0]
  mu_task_init(led_task, led_task_fn, led_ctx, "LED");
    104a:	4b03      	ldr	r3, [pc, #12]	; (1058 <led_task_init+0x18>)
    104c:	4903      	ldr	r1, [pc, #12]	; (105c <led_task_init+0x1c>)
    104e:	4d04      	ldr	r5, [pc, #16]	; (1060 <led_task_init+0x20>)
    1050:	47a8      	blx	r5
}
    1052:	0020      	movs	r0, r4
    1054:	bd70      	pop	{r4, r5, r6, pc}
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	00002718 	.word	0x00002718
    105c:	00000ff9 	.word	0x00000ff9
    1060:	000003c3 	.word	0x000003c3

00001064 <main>:
#include <atmel_start.h>
#include "blinky.h"

int main(void)
{
    1064:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1066:	4b03      	ldr	r3, [pc, #12]	; (1074 <main+0x10>)
    1068:	4798      	blx	r3
  blinky_init();
    106a:	4b03      	ldr	r3, [pc, #12]	; (1078 <main+0x14>)
    106c:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {
    blinky_step();
    106e:	4c03      	ldr	r4, [pc, #12]	; (107c <main+0x18>)
    1070:	47a0      	blx	r4
    1072:	e7fd      	b.n	1070 <main+0xc>
    1074:	00000459 	.word	0x00000459
    1078:	00000475 	.word	0x00000475
    107c:	00000501 	.word	0x00000501

00001080 <mu_port_init>:
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1080:	4a1e      	ldr	r2, [pc, #120]	; (10fc <mu_port_init+0x7c>)
    1082:	7a93      	ldrb	r3, [r2, #10]
    1084:	09db      	lsrs	r3, r3, #7
    1086:	d1fc      	bne.n	1082 <mu_port_init+0x2>
    1088:	4a1c      	ldr	r2, [pc, #112]	; (10fc <mu_port_init+0x7c>)
    108a:	7a93      	ldrb	r3, [r2, #10]
    108c:	09db      	lsrs	r3, r3, #7
    108e:	d1fc      	bne.n	108a <mu_port_init+0xa>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
    1090:	4b1a      	ldr	r3, [pc, #104]	; (10fc <mu_port_init+0x7c>)
    1092:	881b      	ldrh	r3, [r3, #0]
static void RTC_Initialize(void) {
	uint16_t register_value;

	hri_rtcmode0_wait_for_sync(RTC);

	if (hri_rtcmode0_get_CTRL_ENABLE_bit(RTC)) {
    1094:	079b      	lsls	r3, r3, #30
    1096:	d50b      	bpl.n	10b0 <mu_port_init+0x30>
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    1098:	4a18      	ldr	r2, [pc, #96]	; (10fc <mu_port_init+0x7c>)
    109a:	8813      	ldrh	r3, [r2, #0]
    109c:	2102      	movs	r1, #2
    109e:	438b      	bics	r3, r1
    10a0:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    10a2:	7a93      	ldrb	r3, [r2, #10]
    10a4:	09db      	lsrs	r3, r3, #7
    10a6:	d1fc      	bne.n	10a2 <mu_port_init+0x22>
    10a8:	4a14      	ldr	r2, [pc, #80]	; (10fc <mu_port_init+0x7c>)
    10aa:	7a93      	ldrb	r3, [r2, #10]
    10ac:	09db      	lsrs	r3, r3, #7
    10ae:	d1fc      	bne.n	10aa <mu_port_init+0x2a>
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    10b0:	4a12      	ldr	r2, [pc, #72]	; (10fc <mu_port_init+0x7c>)
    10b2:	8813      	ldrh	r3, [r2, #0]
    10b4:	2101      	movs	r1, #1
    10b6:	430b      	orrs	r3, r1
    10b8:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    10ba:	7a93      	ldrb	r3, [r2, #10]
    10bc:	09db      	lsrs	r3, r3, #7
    10be:	d1fc      	bne.n	10ba <mu_port_init+0x3a>
    10c0:	4a0e      	ldr	r2, [pc, #56]	; (10fc <mu_port_init+0x7c>)
    10c2:	7a93      	ldrb	r3, [r2, #10]
    10c4:	09db      	lsrs	r3, r3, #7
    10c6:	d1fc      	bne.n	10c2 <mu_port_init+0x42>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    10c8:	2200      	movs	r2, #0
    10ca:	4b0c      	ldr	r3, [pc, #48]	; (10fc <mu_port_init+0x7c>)
    10cc:	801a      	strh	r2, [r3, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    10ce:	001a      	movs	r2, r3
    10d0:	7a93      	ldrb	r3, [r2, #10]
    10d2:	09db      	lsrs	r3, r3, #7
    10d4:	d1fc      	bne.n	10d0 <mu_port_init+0x50>
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    10d6:	4b09      	ldr	r3, [pc, #36]	; (10fc <mu_port_init+0x7c>)
    10d8:	885a      	ldrh	r2, [r3, #2]
    10da:	2180      	movs	r1, #128	; 0x80
    10dc:	01c9      	lsls	r1, r1, #7
    10de:	430a      	orrs	r2, r1
    10e0:	805a      	strh	r2, [r3, #2]
  s_rtc_period = 1.0/(mu_port_time_seconds_dt)RTC_Timer32FrequencyGet();
    10e2:	21e0      	movs	r1, #224	; 0xe0
    10e4:	0589      	lsls	r1, r1, #22
    10e6:	4a06      	ldr	r2, [pc, #24]	; (1100 <mu_port_init+0x80>)
    10e8:	6011      	str	r1, [r2, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    10ea:	881a      	ldrh	r2, [r3, #0]
    10ec:	2102      	movs	r1, #2
    10ee:	430a      	orrs	r2, r1
    10f0:	801a      	strh	r2, [r3, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    10f2:	001a      	movs	r2, r3
    10f4:	7a93      	ldrb	r3, [r2, #10]
    10f6:	09db      	lsrs	r3, r3, #7
    10f8:	d1fc      	bne.n	10f4 <mu_port_init+0x74>
}
    10fa:	4770      	bx	lr
    10fc:	40001400 	.word	0x40001400
    1100:	2000018c 	.word	0x2000018c

00001104 <mu_port_time_offset>:
  return t + dt;
    1104:	1808      	adds	r0, r1, r0
}
    1106:	4770      	bx	lr

00001108 <mu_port_time_difference>:
  return t1 - t2;
    1108:	1a40      	subs	r0, r0, r1
}
    110a:	4770      	bx	lr

0000110c <mu_port_time_precedes>:
  return t1 - t2;
    110c:	1a40      	subs	r0, r0, r1
  return mu_port_time_difference(t1, t2) > MAX_DURATION;
    110e:	0fc0      	lsrs	r0, r0, #31
}
    1110:	4770      	bx	lr
	...

00001114 <mu_port_time_now>:
    1114:	4a03      	ldr	r2, [pc, #12]	; (1124 <mu_port_time_now+0x10>)
    1116:	7a93      	ldrb	r3, [r2, #10]
    1118:	09db      	lsrs	r3, r3, #7
    111a:	d1fc      	bne.n	1116 <mu_port_time_now+0x2>

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_COUNT_bf(const void *const hw)
{
	uint32_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
    111c:	4b01      	ldr	r3, [pc, #4]	; (1124 <mu_port_time_now+0x10>)
    111e:	6918      	ldr	r0, [r3, #16]
}
    1120:	4770      	bx	lr
    1122:	46c0      	nop			; (mov r8, r8)
    1124:	40001400 	.word	0x40001400

00001128 <sleepmgr_event_callback>:
 *
 * \param[in] id The event ID to process
 * \param[in] data Not used
 */
static void sleepmgr_event_callback(event_id_t id, event_data_t data)
{
    1128:	b5f0      	push	{r4, r5, r6, r7, lr}
    112a:	b083      	sub	sp, #12
	if (EVENT_IS_READY_TO_SLEEP_ID == id) {
    112c:	2800      	cmp	r0, #0
    112e:	d115      	bne.n	115c <sleepmgr_event_callback+0x34>
		struct sleepmgr_ready_to_sleep_cb *cur;
		struct sleepmgr_ready_to_sleep *   ret_val = (struct sleepmgr_ready_to_sleep *)data;
    1130:	000e      	movs	r6, r1
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1132:	4b18      	ldr	r3, [pc, #96]	; (1194 <sleepmgr_event_callback+0x6c>)
    1134:	681c      	ldr	r4, [r3, #0]
		struct sleepmgr_ready_to_sleep     ready;

		for (cur = (struct sleepmgr_ready_to_sleep_cb *)list_get_head(&ready_to_sleep_cbs); cur;
    1136:	2c00      	cmp	r4, #0
    1138:	d00e      	beq.n	1158 <sleepmgr_event_callback+0x30>
		     cur = (struct sleepmgr_ready_to_sleep_cb *)list_get_next_element(cur)) {
			ready.mode  = ret_val->mode;
    113a:	ad01      	add	r5, sp, #4
			ready.ready = true;
    113c:	2701      	movs	r7, #1
			ready.mode  = ret_val->mode;
    113e:	7873      	ldrb	r3, [r6, #1]
    1140:	706b      	strb	r3, [r5, #1]
			ready.ready = true;
    1142:	702f      	strb	r7, [r5, #0]
			cur->cb(&ready);
    1144:	0028      	movs	r0, r5
    1146:	6863      	ldr	r3, [r4, #4]
    1148:	4798      	blx	r3
			ret_val->ready &= ready.ready;
    114a:	7832      	ldrb	r2, [r6, #0]
    114c:	782b      	ldrb	r3, [r5, #0]
    114e:	4013      	ands	r3, r2
    1150:	7033      	strb	r3, [r6, #0]
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1152:	6824      	ldr	r4, [r4, #0]
		for (cur = (struct sleepmgr_ready_to_sleep_cb *)list_get_head(&ready_to_sleep_cbs); cur;
    1154:	2c00      	cmp	r4, #0
    1156:	d1f2      	bne.n	113e <sleepmgr_event_callback+0x16>
		for (cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_head(&prepare_to_sleep_cbs); cur;
		     cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_next_element(cur)) {
			cur->cb(data);
		}
	}
}
    1158:	b003      	add	sp, #12
    115a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (EVENT_WOKEN_UP_ID == id) {
    115c:	2802      	cmp	r0, #2
    115e:	d00d      	beq.n	117c <sleepmgr_event_callback+0x54>
	} else if (EVENT_PREPARE_TO_SLEEP_ID == id) {
    1160:	2801      	cmp	r0, #1
    1162:	d1f9      	bne.n	1158 <sleepmgr_event_callback+0x30>
	return (void *)list->head;
    1164:	4b0b      	ldr	r3, [pc, #44]	; (1194 <sleepmgr_event_callback+0x6c>)
    1166:	689c      	ldr	r4, [r3, #8]
		for (cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_head(&prepare_to_sleep_cbs); cur;
    1168:	2c00      	cmp	r4, #0
    116a:	d0f5      	beq.n	1158 <sleepmgr_event_callback+0x30>
			cur->cb(data);
    116c:	b2ce      	uxtb	r6, r1
    116e:	0030      	movs	r0, r6
    1170:	6863      	ldr	r3, [r4, #4]
    1172:	4798      	blx	r3
	return element ? ((struct list_element *)element)->next : NULL;
    1174:	6824      	ldr	r4, [r4, #0]
		for (cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_head(&prepare_to_sleep_cbs); cur;
    1176:	2c00      	cmp	r4, #0
    1178:	d1f9      	bne.n	116e <sleepmgr_event_callback+0x46>
    117a:	e7ed      	b.n	1158 <sleepmgr_event_callback+0x30>
	return (void *)list->head;
    117c:	4b05      	ldr	r3, [pc, #20]	; (1194 <sleepmgr_event_callback+0x6c>)
    117e:	685c      	ldr	r4, [r3, #4]
		for (cur = (struct sleepmgr_wake_up_cb *)list_get_head(&wake_up_cbs); cur;
    1180:	2c00      	cmp	r4, #0
    1182:	d0e9      	beq.n	1158 <sleepmgr_event_callback+0x30>
			cur->cb((const enum sleepmgr_wakeup_source)data);
    1184:	b2ce      	uxtb	r6, r1
    1186:	0030      	movs	r0, r6
    1188:	6863      	ldr	r3, [r4, #4]
    118a:	4798      	blx	r3
	return element ? ((struct list_element *)element)->next : NULL;
    118c:	6824      	ldr	r4, [r4, #0]
		for (cur = (struct sleepmgr_wake_up_cb *)list_get_head(&wake_up_cbs); cur;
    118e:	2c00      	cmp	r4, #0
    1190:	d1f9      	bne.n	1186 <sleepmgr_event_callback+0x5e>
    1192:	e7e1      	b.n	1158 <sleepmgr_event_callback+0x30>
    1194:	20000190 	.word	0x20000190

00001198 <sleepmgr_init>:
{
    1198:	b570      	push	{r4, r5, r6, lr}
	event_subscribe(&sleepmgr_event, EVENT_PREPARE_TO_SLEEP_ID, sleepmgr_event_callback);
    119a:	4e08      	ldr	r6, [pc, #32]	; (11bc <sleepmgr_init+0x24>)
    119c:	4c08      	ldr	r4, [pc, #32]	; (11c0 <sleepmgr_init+0x28>)
    119e:	340c      	adds	r4, #12
    11a0:	0032      	movs	r2, r6
    11a2:	2101      	movs	r1, #1
    11a4:	0020      	movs	r0, r4
    11a6:	4d07      	ldr	r5, [pc, #28]	; (11c4 <sleepmgr_init+0x2c>)
    11a8:	47a8      	blx	r5
	event_subscribe(&sleepmgr_event, EVENT_IS_READY_TO_SLEEP_ID, sleepmgr_event_callback);
    11aa:	0032      	movs	r2, r6
    11ac:	2100      	movs	r1, #0
    11ae:	0020      	movs	r0, r4
    11b0:	47a8      	blx	r5
	event_subscribe(&sleepmgr_event, EVENT_WOKEN_UP_ID, sleepmgr_event_callback);
    11b2:	0032      	movs	r2, r6
    11b4:	2102      	movs	r1, #2
    11b6:	0020      	movs	r0, r4
    11b8:	47a8      	blx	r5
}
    11ba:	bd70      	pop	{r4, r5, r6, pc}
    11bc:	00001129 	.word	0x00001129
    11c0:	20000190 	.word	0x20000190
    11c4:	00000aa5 	.word	0x00000aa5

000011c8 <sleepmgr_register_ready_to_sleep_callback>:
{
    11c8:	b510      	push	{r4, lr}
    11ca:	0004      	movs	r4, r0
	ASSERT(cb);
    11cc:	1e43      	subs	r3, r0, #1
    11ce:	4198      	sbcs	r0, r3
    11d0:	b2c0      	uxtb	r0, r0
    11d2:	2240      	movs	r2, #64	; 0x40
    11d4:	4903      	ldr	r1, [pc, #12]	; (11e4 <sleepmgr_register_ready_to_sleep_callback+0x1c>)
    11d6:	4b04      	ldr	r3, [pc, #16]	; (11e8 <sleepmgr_register_ready_to_sleep_callback+0x20>)
    11d8:	4798      	blx	r3
	list_insert_as_head(&ready_to_sleep_cbs, cb);
    11da:	0021      	movs	r1, r4
    11dc:	4803      	ldr	r0, [pc, #12]	; (11ec <sleepmgr_register_ready_to_sleep_callback+0x24>)
    11de:	4b04      	ldr	r3, [pc, #16]	; (11f0 <sleepmgr_register_ready_to_sleep_callback+0x28>)
    11e0:	4798      	blx	r3
}
    11e2:	bd10      	pop	{r4, pc}
    11e4:	0000271c 	.word	0x0000271c
    11e8:	00000a9d 	.word	0x00000a9d
    11ec:	20000190 	.word	0x20000190
    11f0:	00000b51 	.word	0x00000b51

000011f4 <sleep_cb>:

static struct sleepmgr_ready_to_sleep_cb sleepmgr_cb;

static void sleep_cb(struct sleepmgr_ready_to_sleep *const ready)
{
	ready->ready = false;
    11f4:	2300      	movs	r3, #0
    11f6:	7003      	strb	r3, [r0, #0]
}
    11f8:	4770      	bx	lr
	...

000011fc <sleep_manager_init>:

void sleep_manager_init(void)
{
    11fc:	b510      	push	{r4, lr}
	sleepmgr_init();
    11fe:	4b04      	ldr	r3, [pc, #16]	; (1210 <sleep_manager_init+0x14>)
    1200:	4798      	blx	r3

	sleepmgr_cb.cb = sleep_cb;
    1202:	4804      	ldr	r0, [pc, #16]	; (1214 <sleep_manager_init+0x18>)
    1204:	4b04      	ldr	r3, [pc, #16]	; (1218 <sleep_manager_init+0x1c>)
    1206:	6043      	str	r3, [r0, #4]
	sleepmgr_register_ready_to_sleep_callback(&sleepmgr_cb);
    1208:	4b04      	ldr	r3, [pc, #16]	; (121c <sleep_manager_init+0x20>)
    120a:	4798      	blx	r3
}
    120c:	bd10      	pop	{r4, pc}
    120e:	46c0      	nop			; (mov r8, r8)
    1210:	00001199 	.word	0x00001199
    1214:	200001a8 	.word	0x200001a8
    1218:	000011f5 	.word	0x000011f5
    121c:	000011c9 	.word	0x000011c9

00001220 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    1220:	b510      	push	{r4, lr}
    1222:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    1224:	2800      	cmp	r0, #0
    1226:	d109      	bne.n	123c <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    1228:	0011      	movs	r1, r2
    122a:	0018      	movs	r0, r3
    122c:	4b05      	ldr	r3, [pc, #20]	; (1244 <_read+0x24>)
    122e:	4798      	blx	r3
    1230:	2800      	cmp	r0, #0
    1232:	db00      	blt.n	1236 <_read+0x16>
	if (n < 0) {
		return -1;
	}

	return n;
}
    1234:	bd10      	pop	{r4, pc}
    1236:	2001      	movs	r0, #1
    1238:	4240      	negs	r0, r0
    123a:	e7fb      	b.n	1234 <_read+0x14>
		return -1;
    123c:	2001      	movs	r0, #1
    123e:	4240      	negs	r0, r0
    1240:	e7f8      	b.n	1234 <_read+0x14>
    1242:	46c0      	nop			; (mov r8, r8)
    1244:	0000129d 	.word	0x0000129d

00001248 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    1248:	b510      	push	{r4, lr}
    124a:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    124c:	3801      	subs	r0, #1
    124e:	2802      	cmp	r0, #2
    1250:	d809      	bhi.n	1266 <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    1252:	0011      	movs	r1, r2
    1254:	0018      	movs	r0, r3
    1256:	4b05      	ldr	r3, [pc, #20]	; (126c <_write+0x24>)
    1258:	4798      	blx	r3
    125a:	2800      	cmp	r0, #0
    125c:	db00      	blt.n	1260 <_write+0x18>
	if (n < 0) {
		return -1;
	}

	return n;
}
    125e:	bd10      	pop	{r4, pc}
    1260:	2001      	movs	r0, #1
    1262:	4240      	negs	r0, r0
    1264:	e7fb      	b.n	125e <_write+0x16>
		return -1;
    1266:	2001      	movs	r0, #1
    1268:	4240      	negs	r0, r0
    126a:	e7f8      	b.n	125e <_write+0x16>
    126c:	000012c1 	.word	0x000012c1

00001270 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    1270:	b570      	push	{r4, r5, r6, lr}
    1272:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    1274:	4d06      	ldr	r5, [pc, #24]	; (1290 <stdio_io_init+0x20>)
    1276:	682b      	ldr	r3, [r5, #0]
    1278:	6898      	ldr	r0, [r3, #8]
    127a:	2100      	movs	r1, #0
    127c:	4c05      	ldr	r4, [pc, #20]	; (1294 <stdio_io_init+0x24>)
    127e:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1280:	682b      	ldr	r3, [r5, #0]
    1282:	6858      	ldr	r0, [r3, #4]
    1284:	2100      	movs	r1, #0
    1286:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    1288:	4b03      	ldr	r3, [pc, #12]	; (1298 <stdio_io_init+0x28>)
    128a:	601e      	str	r6, [r3, #0]
}
    128c:	bd70      	pop	{r4, r5, r6, pc}
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	20000000 	.word	0x20000000
    1294:	00001609 	.word	0x00001609
    1298:	200001b0 	.word	0x200001b0

0000129c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    129c:	b510      	push	{r4, lr}
    129e:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    12a0:	4b05      	ldr	r3, [pc, #20]	; (12b8 <stdio_io_read+0x1c>)
    12a2:	6818      	ldr	r0, [r3, #0]
    12a4:	2800      	cmp	r0, #0
    12a6:	d004      	beq.n	12b2 <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    12a8:	b28a      	uxth	r2, r1
    12aa:	0021      	movs	r1, r4
    12ac:	4b03      	ldr	r3, [pc, #12]	; (12bc <stdio_io_read+0x20>)
    12ae:	4798      	blx	r3
}
    12b0:	bd10      	pop	{r4, pc}
		return 0;
    12b2:	2000      	movs	r0, #0
    12b4:	e7fc      	b.n	12b0 <stdio_io_read+0x14>
    12b6:	46c0      	nop			; (mov r8, r8)
    12b8:	200001b0 	.word	0x200001b0
    12bc:	0000090d 	.word	0x0000090d

000012c0 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    12c0:	b510      	push	{r4, lr}
    12c2:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    12c4:	4b05      	ldr	r3, [pc, #20]	; (12dc <stdio_io_write+0x1c>)
    12c6:	6818      	ldr	r0, [r3, #0]
    12c8:	2800      	cmp	r0, #0
    12ca:	d004      	beq.n	12d6 <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    12cc:	b28a      	uxth	r2, r1
    12ce:	0021      	movs	r1, r4
    12d0:	4b03      	ldr	r3, [pc, #12]	; (12e0 <stdio_io_write+0x20>)
    12d2:	4798      	blx	r3
}
    12d4:	bd10      	pop	{r4, pc}
		return 0;
    12d6:	2000      	movs	r0, #0
    12d8:	e7fc      	b.n	12d4 <stdio_io_write+0x14>
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	200001b0 	.word	0x200001b0
    12e0:	000008d9 	.word	0x000008d9

000012e4 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    12e4:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    12e6:	4c04      	ldr	r4, [pc, #16]	; (12f8 <stdio_redirect_init+0x14>)
    12e8:	0020      	movs	r0, r4
    12ea:	4b04      	ldr	r3, [pc, #16]	; (12fc <stdio_redirect_init+0x18>)
    12ec:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    12ee:	0020      	movs	r0, r4
    12f0:	4b03      	ldr	r3, [pc, #12]	; (1300 <stdio_redirect_init+0x1c>)
    12f2:	4798      	blx	r3
}
    12f4:	bd10      	pop	{r4, pc}
    12f6:	46c0      	nop			; (mov r8, r8)
    12f8:	200001bc 	.word	0x200001bc
    12fc:	00000a71 	.word	0x00000a71
    1300:	00001271 	.word	0x00001271

00001304 <__udivsi3>:
    1304:	2200      	movs	r2, #0
    1306:	0843      	lsrs	r3, r0, #1
    1308:	428b      	cmp	r3, r1
    130a:	d374      	bcc.n	13f6 <__udivsi3+0xf2>
    130c:	0903      	lsrs	r3, r0, #4
    130e:	428b      	cmp	r3, r1
    1310:	d35f      	bcc.n	13d2 <__udivsi3+0xce>
    1312:	0a03      	lsrs	r3, r0, #8
    1314:	428b      	cmp	r3, r1
    1316:	d344      	bcc.n	13a2 <__udivsi3+0x9e>
    1318:	0b03      	lsrs	r3, r0, #12
    131a:	428b      	cmp	r3, r1
    131c:	d328      	bcc.n	1370 <__udivsi3+0x6c>
    131e:	0c03      	lsrs	r3, r0, #16
    1320:	428b      	cmp	r3, r1
    1322:	d30d      	bcc.n	1340 <__udivsi3+0x3c>
    1324:	22ff      	movs	r2, #255	; 0xff
    1326:	0209      	lsls	r1, r1, #8
    1328:	ba12      	rev	r2, r2
    132a:	0c03      	lsrs	r3, r0, #16
    132c:	428b      	cmp	r3, r1
    132e:	d302      	bcc.n	1336 <__udivsi3+0x32>
    1330:	1212      	asrs	r2, r2, #8
    1332:	0209      	lsls	r1, r1, #8
    1334:	d065      	beq.n	1402 <__udivsi3+0xfe>
    1336:	0b03      	lsrs	r3, r0, #12
    1338:	428b      	cmp	r3, r1
    133a:	d319      	bcc.n	1370 <__udivsi3+0x6c>
    133c:	e000      	b.n	1340 <__udivsi3+0x3c>
    133e:	0a09      	lsrs	r1, r1, #8
    1340:	0bc3      	lsrs	r3, r0, #15
    1342:	428b      	cmp	r3, r1
    1344:	d301      	bcc.n	134a <__udivsi3+0x46>
    1346:	03cb      	lsls	r3, r1, #15
    1348:	1ac0      	subs	r0, r0, r3
    134a:	4152      	adcs	r2, r2
    134c:	0b83      	lsrs	r3, r0, #14
    134e:	428b      	cmp	r3, r1
    1350:	d301      	bcc.n	1356 <__udivsi3+0x52>
    1352:	038b      	lsls	r3, r1, #14
    1354:	1ac0      	subs	r0, r0, r3
    1356:	4152      	adcs	r2, r2
    1358:	0b43      	lsrs	r3, r0, #13
    135a:	428b      	cmp	r3, r1
    135c:	d301      	bcc.n	1362 <__udivsi3+0x5e>
    135e:	034b      	lsls	r3, r1, #13
    1360:	1ac0      	subs	r0, r0, r3
    1362:	4152      	adcs	r2, r2
    1364:	0b03      	lsrs	r3, r0, #12
    1366:	428b      	cmp	r3, r1
    1368:	d301      	bcc.n	136e <__udivsi3+0x6a>
    136a:	030b      	lsls	r3, r1, #12
    136c:	1ac0      	subs	r0, r0, r3
    136e:	4152      	adcs	r2, r2
    1370:	0ac3      	lsrs	r3, r0, #11
    1372:	428b      	cmp	r3, r1
    1374:	d301      	bcc.n	137a <__udivsi3+0x76>
    1376:	02cb      	lsls	r3, r1, #11
    1378:	1ac0      	subs	r0, r0, r3
    137a:	4152      	adcs	r2, r2
    137c:	0a83      	lsrs	r3, r0, #10
    137e:	428b      	cmp	r3, r1
    1380:	d301      	bcc.n	1386 <__udivsi3+0x82>
    1382:	028b      	lsls	r3, r1, #10
    1384:	1ac0      	subs	r0, r0, r3
    1386:	4152      	adcs	r2, r2
    1388:	0a43      	lsrs	r3, r0, #9
    138a:	428b      	cmp	r3, r1
    138c:	d301      	bcc.n	1392 <__udivsi3+0x8e>
    138e:	024b      	lsls	r3, r1, #9
    1390:	1ac0      	subs	r0, r0, r3
    1392:	4152      	adcs	r2, r2
    1394:	0a03      	lsrs	r3, r0, #8
    1396:	428b      	cmp	r3, r1
    1398:	d301      	bcc.n	139e <__udivsi3+0x9a>
    139a:	020b      	lsls	r3, r1, #8
    139c:	1ac0      	subs	r0, r0, r3
    139e:	4152      	adcs	r2, r2
    13a0:	d2cd      	bcs.n	133e <__udivsi3+0x3a>
    13a2:	09c3      	lsrs	r3, r0, #7
    13a4:	428b      	cmp	r3, r1
    13a6:	d301      	bcc.n	13ac <__udivsi3+0xa8>
    13a8:	01cb      	lsls	r3, r1, #7
    13aa:	1ac0      	subs	r0, r0, r3
    13ac:	4152      	adcs	r2, r2
    13ae:	0983      	lsrs	r3, r0, #6
    13b0:	428b      	cmp	r3, r1
    13b2:	d301      	bcc.n	13b8 <__udivsi3+0xb4>
    13b4:	018b      	lsls	r3, r1, #6
    13b6:	1ac0      	subs	r0, r0, r3
    13b8:	4152      	adcs	r2, r2
    13ba:	0943      	lsrs	r3, r0, #5
    13bc:	428b      	cmp	r3, r1
    13be:	d301      	bcc.n	13c4 <__udivsi3+0xc0>
    13c0:	014b      	lsls	r3, r1, #5
    13c2:	1ac0      	subs	r0, r0, r3
    13c4:	4152      	adcs	r2, r2
    13c6:	0903      	lsrs	r3, r0, #4
    13c8:	428b      	cmp	r3, r1
    13ca:	d301      	bcc.n	13d0 <__udivsi3+0xcc>
    13cc:	010b      	lsls	r3, r1, #4
    13ce:	1ac0      	subs	r0, r0, r3
    13d0:	4152      	adcs	r2, r2
    13d2:	08c3      	lsrs	r3, r0, #3
    13d4:	428b      	cmp	r3, r1
    13d6:	d301      	bcc.n	13dc <__udivsi3+0xd8>
    13d8:	00cb      	lsls	r3, r1, #3
    13da:	1ac0      	subs	r0, r0, r3
    13dc:	4152      	adcs	r2, r2
    13de:	0883      	lsrs	r3, r0, #2
    13e0:	428b      	cmp	r3, r1
    13e2:	d301      	bcc.n	13e8 <__udivsi3+0xe4>
    13e4:	008b      	lsls	r3, r1, #2
    13e6:	1ac0      	subs	r0, r0, r3
    13e8:	4152      	adcs	r2, r2
    13ea:	0843      	lsrs	r3, r0, #1
    13ec:	428b      	cmp	r3, r1
    13ee:	d301      	bcc.n	13f4 <__udivsi3+0xf0>
    13f0:	004b      	lsls	r3, r1, #1
    13f2:	1ac0      	subs	r0, r0, r3
    13f4:	4152      	adcs	r2, r2
    13f6:	1a41      	subs	r1, r0, r1
    13f8:	d200      	bcs.n	13fc <__udivsi3+0xf8>
    13fa:	4601      	mov	r1, r0
    13fc:	4152      	adcs	r2, r2
    13fe:	4610      	mov	r0, r2
    1400:	4770      	bx	lr
    1402:	e7ff      	b.n	1404 <__udivsi3+0x100>
    1404:	b501      	push	{r0, lr}
    1406:	2000      	movs	r0, #0
    1408:	f000 f806 	bl	1418 <__aeabi_idiv0>
    140c:	bd02      	pop	{r1, pc}
    140e:	46c0      	nop			; (mov r8, r8)

00001410 <__aeabi_uidivmod>:
    1410:	2900      	cmp	r1, #0
    1412:	d0f7      	beq.n	1404 <__udivsi3+0x100>
    1414:	e776      	b.n	1304 <__udivsi3>
    1416:	4770      	bx	lr

00001418 <__aeabi_idiv0>:
    1418:	4770      	bx	lr
    141a:	46c0      	nop			; (mov r8, r8)

0000141c <__ffssi2>:
    141c:	b510      	push	{r4, lr}
    141e:	2300      	movs	r3, #0
    1420:	2800      	cmp	r0, #0
    1422:	d002      	beq.n	142a <__ffssi2+0xe>
    1424:	f000 f804 	bl	1430 <__ctzsi2>
    1428:	1c43      	adds	r3, r0, #1
    142a:	0018      	movs	r0, r3
    142c:	bd10      	pop	{r4, pc}
    142e:	46c0      	nop			; (mov r8, r8)

00001430 <__ctzsi2>:
    1430:	4241      	negs	r1, r0
    1432:	4008      	ands	r0, r1
    1434:	211c      	movs	r1, #28
    1436:	2301      	movs	r3, #1
    1438:	041b      	lsls	r3, r3, #16
    143a:	4298      	cmp	r0, r3
    143c:	d301      	bcc.n	1442 <__ctzsi2+0x12>
    143e:	0c00      	lsrs	r0, r0, #16
    1440:	3910      	subs	r1, #16
    1442:	0a1b      	lsrs	r3, r3, #8
    1444:	4298      	cmp	r0, r3
    1446:	d301      	bcc.n	144c <__ctzsi2+0x1c>
    1448:	0a00      	lsrs	r0, r0, #8
    144a:	3908      	subs	r1, #8
    144c:	091b      	lsrs	r3, r3, #4
    144e:	4298      	cmp	r0, r3
    1450:	d301      	bcc.n	1456 <__ctzsi2+0x26>
    1452:	0900      	lsrs	r0, r0, #4
    1454:	3904      	subs	r1, #4
    1456:	a202      	add	r2, pc, #8	; (adr r2, 1460 <__ctzsi2+0x30>)
    1458:	5c10      	ldrb	r0, [r2, r0]
    145a:	1a40      	subs	r0, r0, r1
    145c:	4770      	bx	lr
    145e:	46c0      	nop			; (mov r8, r8)
    1460:	1d1d1c1b 	.word	0x1d1d1c1b
    1464:	1e1e1e1e 	.word	0x1e1e1e1e
    1468:	1f1f1f1f 	.word	0x1f1f1f1f
    146c:	1f1f1f1f 	.word	0x1f1f1f1f

00001470 <__libc_init_array>:
    1470:	b570      	push	{r4, r5, r6, lr}
    1472:	2600      	movs	r6, #0
    1474:	4d0c      	ldr	r5, [pc, #48]	; (14a8 <__libc_init_array+0x38>)
    1476:	4c0d      	ldr	r4, [pc, #52]	; (14ac <__libc_init_array+0x3c>)
    1478:	1b64      	subs	r4, r4, r5
    147a:	10a4      	asrs	r4, r4, #2
    147c:	42a6      	cmp	r6, r4
    147e:	d109      	bne.n	1494 <__libc_init_array+0x24>
    1480:	2600      	movs	r6, #0
    1482:	f001 f9a9 	bl	27d8 <_init>
    1486:	4d0a      	ldr	r5, [pc, #40]	; (14b0 <__libc_init_array+0x40>)
    1488:	4c0a      	ldr	r4, [pc, #40]	; (14b4 <__libc_init_array+0x44>)
    148a:	1b64      	subs	r4, r4, r5
    148c:	10a4      	asrs	r4, r4, #2
    148e:	42a6      	cmp	r6, r4
    1490:	d105      	bne.n	149e <__libc_init_array+0x2e>
    1492:	bd70      	pop	{r4, r5, r6, pc}
    1494:	00b3      	lsls	r3, r6, #2
    1496:	58eb      	ldr	r3, [r5, r3]
    1498:	4798      	blx	r3
    149a:	3601      	adds	r6, #1
    149c:	e7ee      	b.n	147c <__libc_init_array+0xc>
    149e:	00b3      	lsls	r3, r6, #2
    14a0:	58eb      	ldr	r3, [r5, r3]
    14a2:	4798      	blx	r3
    14a4:	3601      	adds	r6, #1
    14a6:	e7f2      	b.n	148e <__libc_init_array+0x1e>
    14a8:	000027e4 	.word	0x000027e4
    14ac:	000027e4 	.word	0x000027e4
    14b0:	000027e4 	.word	0x000027e4
    14b4:	000027e8 	.word	0x000027e8

000014b8 <memcpy>:
    14b8:	2300      	movs	r3, #0
    14ba:	b510      	push	{r4, lr}
    14bc:	429a      	cmp	r2, r3
    14be:	d100      	bne.n	14c2 <memcpy+0xa>
    14c0:	bd10      	pop	{r4, pc}
    14c2:	5ccc      	ldrb	r4, [r1, r3]
    14c4:	54c4      	strb	r4, [r0, r3]
    14c6:	3301      	adds	r3, #1
    14c8:	e7f8      	b.n	14bc <memcpy+0x4>

000014ca <memmove>:
    14ca:	b510      	push	{r4, lr}
    14cc:	4288      	cmp	r0, r1
    14ce:	d902      	bls.n	14d6 <memmove+0xc>
    14d0:	188b      	adds	r3, r1, r2
    14d2:	4298      	cmp	r0, r3
    14d4:	d308      	bcc.n	14e8 <memmove+0x1e>
    14d6:	2300      	movs	r3, #0
    14d8:	429a      	cmp	r2, r3
    14da:	d007      	beq.n	14ec <memmove+0x22>
    14dc:	5ccc      	ldrb	r4, [r1, r3]
    14de:	54c4      	strb	r4, [r0, r3]
    14e0:	3301      	adds	r3, #1
    14e2:	e7f9      	b.n	14d8 <memmove+0xe>
    14e4:	5c8b      	ldrb	r3, [r1, r2]
    14e6:	5483      	strb	r3, [r0, r2]
    14e8:	3a01      	subs	r2, #1
    14ea:	d2fb      	bcs.n	14e4 <memmove+0x1a>
    14ec:	bd10      	pop	{r4, pc}

000014ee <memset>:
    14ee:	0003      	movs	r3, r0
    14f0:	1882      	adds	r2, r0, r2
    14f2:	4293      	cmp	r3, r2
    14f4:	d100      	bne.n	14f8 <memset+0xa>
    14f6:	4770      	bx	lr
    14f8:	7019      	strb	r1, [r3, #0]
    14fa:	3301      	adds	r3, #1
    14fc:	e7f9      	b.n	14f2 <memset+0x4>
	...

00001500 <iprintf>:
    1500:	b40f      	push	{r0, r1, r2, r3}
    1502:	4b0b      	ldr	r3, [pc, #44]	; (1530 <iprintf+0x30>)
    1504:	b513      	push	{r0, r1, r4, lr}
    1506:	681c      	ldr	r4, [r3, #0]
    1508:	2c00      	cmp	r4, #0
    150a:	d005      	beq.n	1518 <iprintf+0x18>
    150c:	69a3      	ldr	r3, [r4, #24]
    150e:	2b00      	cmp	r3, #0
    1510:	d102      	bne.n	1518 <iprintf+0x18>
    1512:	0020      	movs	r0, r4
    1514:	f000 faf2 	bl	1afc <__sinit>
    1518:	ab05      	add	r3, sp, #20
    151a:	9a04      	ldr	r2, [sp, #16]
    151c:	68a1      	ldr	r1, [r4, #8]
    151e:	0020      	movs	r0, r4
    1520:	9301      	str	r3, [sp, #4]
    1522:	f000 fcc7 	bl	1eb4 <_vfiprintf_r>
    1526:	bc16      	pop	{r1, r2, r4}
    1528:	bc08      	pop	{r3}
    152a:	b004      	add	sp, #16
    152c:	4718      	bx	r3
    152e:	46c0      	nop			; (mov r8, r8)
    1530:	20000000 	.word	0x20000000

00001534 <_puts_r>:
    1534:	b570      	push	{r4, r5, r6, lr}
    1536:	0005      	movs	r5, r0
    1538:	000e      	movs	r6, r1
    153a:	2800      	cmp	r0, #0
    153c:	d004      	beq.n	1548 <_puts_r+0x14>
    153e:	6983      	ldr	r3, [r0, #24]
    1540:	2b00      	cmp	r3, #0
    1542:	d101      	bne.n	1548 <_puts_r+0x14>
    1544:	f000 fada 	bl	1afc <__sinit>
    1548:	69ab      	ldr	r3, [r5, #24]
    154a:	68ac      	ldr	r4, [r5, #8]
    154c:	2b00      	cmp	r3, #0
    154e:	d102      	bne.n	1556 <_puts_r+0x22>
    1550:	0028      	movs	r0, r5
    1552:	f000 fad3 	bl	1afc <__sinit>
    1556:	4b24      	ldr	r3, [pc, #144]	; (15e8 <_puts_r+0xb4>)
    1558:	429c      	cmp	r4, r3
    155a:	d10f      	bne.n	157c <_puts_r+0x48>
    155c:	686c      	ldr	r4, [r5, #4]
    155e:	89a3      	ldrh	r3, [r4, #12]
    1560:	071b      	lsls	r3, r3, #28
    1562:	d502      	bpl.n	156a <_puts_r+0x36>
    1564:	6923      	ldr	r3, [r4, #16]
    1566:	2b00      	cmp	r3, #0
    1568:	d120      	bne.n	15ac <_puts_r+0x78>
    156a:	0021      	movs	r1, r4
    156c:	0028      	movs	r0, r5
    156e:	f000 f957 	bl	1820 <__swsetup_r>
    1572:	2800      	cmp	r0, #0
    1574:	d01a      	beq.n	15ac <_puts_r+0x78>
    1576:	2001      	movs	r0, #1
    1578:	4240      	negs	r0, r0
    157a:	bd70      	pop	{r4, r5, r6, pc}
    157c:	4b1b      	ldr	r3, [pc, #108]	; (15ec <_puts_r+0xb8>)
    157e:	429c      	cmp	r4, r3
    1580:	d101      	bne.n	1586 <_puts_r+0x52>
    1582:	68ac      	ldr	r4, [r5, #8]
    1584:	e7eb      	b.n	155e <_puts_r+0x2a>
    1586:	4b1a      	ldr	r3, [pc, #104]	; (15f0 <_puts_r+0xbc>)
    1588:	429c      	cmp	r4, r3
    158a:	d1e8      	bne.n	155e <_puts_r+0x2a>
    158c:	68ec      	ldr	r4, [r5, #12]
    158e:	e7e6      	b.n	155e <_puts_r+0x2a>
    1590:	3b01      	subs	r3, #1
    1592:	3601      	adds	r6, #1
    1594:	60a3      	str	r3, [r4, #8]
    1596:	2b00      	cmp	r3, #0
    1598:	da04      	bge.n	15a4 <_puts_r+0x70>
    159a:	69a2      	ldr	r2, [r4, #24]
    159c:	4293      	cmp	r3, r2
    159e:	db16      	blt.n	15ce <_puts_r+0x9a>
    15a0:	290a      	cmp	r1, #10
    15a2:	d014      	beq.n	15ce <_puts_r+0x9a>
    15a4:	6823      	ldr	r3, [r4, #0]
    15a6:	1c5a      	adds	r2, r3, #1
    15a8:	6022      	str	r2, [r4, #0]
    15aa:	7019      	strb	r1, [r3, #0]
    15ac:	7831      	ldrb	r1, [r6, #0]
    15ae:	68a3      	ldr	r3, [r4, #8]
    15b0:	2900      	cmp	r1, #0
    15b2:	d1ed      	bne.n	1590 <_puts_r+0x5c>
    15b4:	3b01      	subs	r3, #1
    15b6:	60a3      	str	r3, [r4, #8]
    15b8:	2b00      	cmp	r3, #0
    15ba:	da0f      	bge.n	15dc <_puts_r+0xa8>
    15bc:	0022      	movs	r2, r4
    15be:	310a      	adds	r1, #10
    15c0:	0028      	movs	r0, r5
    15c2:	f000 f8d7 	bl	1774 <__swbuf_r>
    15c6:	1c43      	adds	r3, r0, #1
    15c8:	d0d5      	beq.n	1576 <_puts_r+0x42>
    15ca:	200a      	movs	r0, #10
    15cc:	e7d5      	b.n	157a <_puts_r+0x46>
    15ce:	0022      	movs	r2, r4
    15d0:	0028      	movs	r0, r5
    15d2:	f000 f8cf 	bl	1774 <__swbuf_r>
    15d6:	1c43      	adds	r3, r0, #1
    15d8:	d1e8      	bne.n	15ac <_puts_r+0x78>
    15da:	e7cc      	b.n	1576 <_puts_r+0x42>
    15dc:	200a      	movs	r0, #10
    15de:	6823      	ldr	r3, [r4, #0]
    15e0:	1c5a      	adds	r2, r3, #1
    15e2:	6022      	str	r2, [r4, #0]
    15e4:	7018      	strb	r0, [r3, #0]
    15e6:	e7c8      	b.n	157a <_puts_r+0x46>
    15e8:	00002764 	.word	0x00002764
    15ec:	00002784 	.word	0x00002784
    15f0:	00002744 	.word	0x00002744

000015f4 <puts>:
    15f4:	b510      	push	{r4, lr}
    15f6:	4b03      	ldr	r3, [pc, #12]	; (1604 <puts+0x10>)
    15f8:	0001      	movs	r1, r0
    15fa:	6818      	ldr	r0, [r3, #0]
    15fc:	f7ff ff9a 	bl	1534 <_puts_r>
    1600:	bd10      	pop	{r4, pc}
    1602:	46c0      	nop			; (mov r8, r8)
    1604:	20000000 	.word	0x20000000

00001608 <setbuf>:
    1608:	424a      	negs	r2, r1
    160a:	414a      	adcs	r2, r1
    160c:	2380      	movs	r3, #128	; 0x80
    160e:	b510      	push	{r4, lr}
    1610:	0052      	lsls	r2, r2, #1
    1612:	00db      	lsls	r3, r3, #3
    1614:	f000 f802 	bl	161c <setvbuf>
    1618:	bd10      	pop	{r4, pc}
	...

0000161c <setvbuf>:
    161c:	b5f0      	push	{r4, r5, r6, r7, lr}
    161e:	001d      	movs	r5, r3
    1620:	4b4f      	ldr	r3, [pc, #316]	; (1760 <setvbuf+0x144>)
    1622:	b085      	sub	sp, #20
    1624:	681e      	ldr	r6, [r3, #0]
    1626:	0004      	movs	r4, r0
    1628:	000f      	movs	r7, r1
    162a:	9200      	str	r2, [sp, #0]
    162c:	2e00      	cmp	r6, #0
    162e:	d005      	beq.n	163c <setvbuf+0x20>
    1630:	69b3      	ldr	r3, [r6, #24]
    1632:	2b00      	cmp	r3, #0
    1634:	d102      	bne.n	163c <setvbuf+0x20>
    1636:	0030      	movs	r0, r6
    1638:	f000 fa60 	bl	1afc <__sinit>
    163c:	4b49      	ldr	r3, [pc, #292]	; (1764 <setvbuf+0x148>)
    163e:	429c      	cmp	r4, r3
    1640:	d150      	bne.n	16e4 <setvbuf+0xc8>
    1642:	6874      	ldr	r4, [r6, #4]
    1644:	9b00      	ldr	r3, [sp, #0]
    1646:	2b02      	cmp	r3, #2
    1648:	d005      	beq.n	1656 <setvbuf+0x3a>
    164a:	2b01      	cmp	r3, #1
    164c:	d900      	bls.n	1650 <setvbuf+0x34>
    164e:	e084      	b.n	175a <setvbuf+0x13e>
    1650:	2d00      	cmp	r5, #0
    1652:	da00      	bge.n	1656 <setvbuf+0x3a>
    1654:	e081      	b.n	175a <setvbuf+0x13e>
    1656:	0021      	movs	r1, r4
    1658:	0030      	movs	r0, r6
    165a:	f000 f9e1 	bl	1a20 <_fflush_r>
    165e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1660:	2900      	cmp	r1, #0
    1662:	d008      	beq.n	1676 <setvbuf+0x5a>
    1664:	0023      	movs	r3, r4
    1666:	3344      	adds	r3, #68	; 0x44
    1668:	4299      	cmp	r1, r3
    166a:	d002      	beq.n	1672 <setvbuf+0x56>
    166c:	0030      	movs	r0, r6
    166e:	f000 fb51 	bl	1d14 <_free_r>
    1672:	2300      	movs	r3, #0
    1674:	6363      	str	r3, [r4, #52]	; 0x34
    1676:	2300      	movs	r3, #0
    1678:	61a3      	str	r3, [r4, #24]
    167a:	6063      	str	r3, [r4, #4]
    167c:	89a3      	ldrh	r3, [r4, #12]
    167e:	061b      	lsls	r3, r3, #24
    1680:	d503      	bpl.n	168a <setvbuf+0x6e>
    1682:	6921      	ldr	r1, [r4, #16]
    1684:	0030      	movs	r0, r6
    1686:	f000 fb45 	bl	1d14 <_free_r>
    168a:	89a3      	ldrh	r3, [r4, #12]
    168c:	4a36      	ldr	r2, [pc, #216]	; (1768 <setvbuf+0x14c>)
    168e:	4013      	ands	r3, r2
    1690:	81a3      	strh	r3, [r4, #12]
    1692:	9b00      	ldr	r3, [sp, #0]
    1694:	2b02      	cmp	r3, #2
    1696:	d05a      	beq.n	174e <setvbuf+0x132>
    1698:	ab03      	add	r3, sp, #12
    169a:	aa02      	add	r2, sp, #8
    169c:	0021      	movs	r1, r4
    169e:	0030      	movs	r0, r6
    16a0:	f000 fac2 	bl	1c28 <__swhatbuf_r>
    16a4:	89a3      	ldrh	r3, [r4, #12]
    16a6:	4318      	orrs	r0, r3
    16a8:	81a0      	strh	r0, [r4, #12]
    16aa:	2d00      	cmp	r5, #0
    16ac:	d124      	bne.n	16f8 <setvbuf+0xdc>
    16ae:	9d02      	ldr	r5, [sp, #8]
    16b0:	0028      	movs	r0, r5
    16b2:	f000 fb25 	bl	1d00 <malloc>
    16b6:	9501      	str	r5, [sp, #4]
    16b8:	1e07      	subs	r7, r0, #0
    16ba:	d142      	bne.n	1742 <setvbuf+0x126>
    16bc:	9b02      	ldr	r3, [sp, #8]
    16be:	9301      	str	r3, [sp, #4]
    16c0:	42ab      	cmp	r3, r5
    16c2:	d139      	bne.n	1738 <setvbuf+0x11c>
    16c4:	2001      	movs	r0, #1
    16c6:	4240      	negs	r0, r0
    16c8:	2302      	movs	r3, #2
    16ca:	89a2      	ldrh	r2, [r4, #12]
    16cc:	4313      	orrs	r3, r2
    16ce:	81a3      	strh	r3, [r4, #12]
    16d0:	2300      	movs	r3, #0
    16d2:	60a3      	str	r3, [r4, #8]
    16d4:	0023      	movs	r3, r4
    16d6:	3347      	adds	r3, #71	; 0x47
    16d8:	6023      	str	r3, [r4, #0]
    16da:	6123      	str	r3, [r4, #16]
    16dc:	2301      	movs	r3, #1
    16de:	6163      	str	r3, [r4, #20]
    16e0:	b005      	add	sp, #20
    16e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16e4:	4b21      	ldr	r3, [pc, #132]	; (176c <setvbuf+0x150>)
    16e6:	429c      	cmp	r4, r3
    16e8:	d101      	bne.n	16ee <setvbuf+0xd2>
    16ea:	68b4      	ldr	r4, [r6, #8]
    16ec:	e7aa      	b.n	1644 <setvbuf+0x28>
    16ee:	4b20      	ldr	r3, [pc, #128]	; (1770 <setvbuf+0x154>)
    16f0:	429c      	cmp	r4, r3
    16f2:	d1a7      	bne.n	1644 <setvbuf+0x28>
    16f4:	68f4      	ldr	r4, [r6, #12]
    16f6:	e7a5      	b.n	1644 <setvbuf+0x28>
    16f8:	2f00      	cmp	r7, #0
    16fa:	d0d9      	beq.n	16b0 <setvbuf+0x94>
    16fc:	69b3      	ldr	r3, [r6, #24]
    16fe:	2b00      	cmp	r3, #0
    1700:	d102      	bne.n	1708 <setvbuf+0xec>
    1702:	0030      	movs	r0, r6
    1704:	f000 f9fa 	bl	1afc <__sinit>
    1708:	9b00      	ldr	r3, [sp, #0]
    170a:	2b01      	cmp	r3, #1
    170c:	d103      	bne.n	1716 <setvbuf+0xfa>
    170e:	89a3      	ldrh	r3, [r4, #12]
    1710:	9a00      	ldr	r2, [sp, #0]
    1712:	431a      	orrs	r2, r3
    1714:	81a2      	strh	r2, [r4, #12]
    1716:	2008      	movs	r0, #8
    1718:	89a3      	ldrh	r3, [r4, #12]
    171a:	6027      	str	r7, [r4, #0]
    171c:	6127      	str	r7, [r4, #16]
    171e:	6165      	str	r5, [r4, #20]
    1720:	4018      	ands	r0, r3
    1722:	d018      	beq.n	1756 <setvbuf+0x13a>
    1724:	2001      	movs	r0, #1
    1726:	4018      	ands	r0, r3
    1728:	2300      	movs	r3, #0
    172a:	4298      	cmp	r0, r3
    172c:	d011      	beq.n	1752 <setvbuf+0x136>
    172e:	426d      	negs	r5, r5
    1730:	60a3      	str	r3, [r4, #8]
    1732:	61a5      	str	r5, [r4, #24]
    1734:	0018      	movs	r0, r3
    1736:	e7d3      	b.n	16e0 <setvbuf+0xc4>
    1738:	9801      	ldr	r0, [sp, #4]
    173a:	f000 fae1 	bl	1d00 <malloc>
    173e:	1e07      	subs	r7, r0, #0
    1740:	d0c0      	beq.n	16c4 <setvbuf+0xa8>
    1742:	2380      	movs	r3, #128	; 0x80
    1744:	89a2      	ldrh	r2, [r4, #12]
    1746:	9d01      	ldr	r5, [sp, #4]
    1748:	4313      	orrs	r3, r2
    174a:	81a3      	strh	r3, [r4, #12]
    174c:	e7d6      	b.n	16fc <setvbuf+0xe0>
    174e:	2000      	movs	r0, #0
    1750:	e7ba      	b.n	16c8 <setvbuf+0xac>
    1752:	60a5      	str	r5, [r4, #8]
    1754:	e7c4      	b.n	16e0 <setvbuf+0xc4>
    1756:	60a0      	str	r0, [r4, #8]
    1758:	e7c2      	b.n	16e0 <setvbuf+0xc4>
    175a:	2001      	movs	r0, #1
    175c:	4240      	negs	r0, r0
    175e:	e7bf      	b.n	16e0 <setvbuf+0xc4>
    1760:	20000000 	.word	0x20000000
    1764:	00002764 	.word	0x00002764
    1768:	fffff35c 	.word	0xfffff35c
    176c:	00002784 	.word	0x00002784
    1770:	00002744 	.word	0x00002744

00001774 <__swbuf_r>:
    1774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1776:	0005      	movs	r5, r0
    1778:	000e      	movs	r6, r1
    177a:	0014      	movs	r4, r2
    177c:	2800      	cmp	r0, #0
    177e:	d004      	beq.n	178a <__swbuf_r+0x16>
    1780:	6983      	ldr	r3, [r0, #24]
    1782:	2b00      	cmp	r3, #0
    1784:	d101      	bne.n	178a <__swbuf_r+0x16>
    1786:	f000 f9b9 	bl	1afc <__sinit>
    178a:	4b22      	ldr	r3, [pc, #136]	; (1814 <__swbuf_r+0xa0>)
    178c:	429c      	cmp	r4, r3
    178e:	d12d      	bne.n	17ec <__swbuf_r+0x78>
    1790:	686c      	ldr	r4, [r5, #4]
    1792:	69a3      	ldr	r3, [r4, #24]
    1794:	60a3      	str	r3, [r4, #8]
    1796:	89a3      	ldrh	r3, [r4, #12]
    1798:	071b      	lsls	r3, r3, #28
    179a:	d531      	bpl.n	1800 <__swbuf_r+0x8c>
    179c:	6923      	ldr	r3, [r4, #16]
    179e:	2b00      	cmp	r3, #0
    17a0:	d02e      	beq.n	1800 <__swbuf_r+0x8c>
    17a2:	6823      	ldr	r3, [r4, #0]
    17a4:	6922      	ldr	r2, [r4, #16]
    17a6:	b2f7      	uxtb	r7, r6
    17a8:	1a98      	subs	r0, r3, r2
    17aa:	6963      	ldr	r3, [r4, #20]
    17ac:	b2f6      	uxtb	r6, r6
    17ae:	4298      	cmp	r0, r3
    17b0:	db05      	blt.n	17be <__swbuf_r+0x4a>
    17b2:	0021      	movs	r1, r4
    17b4:	0028      	movs	r0, r5
    17b6:	f000 f933 	bl	1a20 <_fflush_r>
    17ba:	2800      	cmp	r0, #0
    17bc:	d126      	bne.n	180c <__swbuf_r+0x98>
    17be:	68a3      	ldr	r3, [r4, #8]
    17c0:	3001      	adds	r0, #1
    17c2:	3b01      	subs	r3, #1
    17c4:	60a3      	str	r3, [r4, #8]
    17c6:	6823      	ldr	r3, [r4, #0]
    17c8:	1c5a      	adds	r2, r3, #1
    17ca:	6022      	str	r2, [r4, #0]
    17cc:	701f      	strb	r7, [r3, #0]
    17ce:	6963      	ldr	r3, [r4, #20]
    17d0:	4298      	cmp	r0, r3
    17d2:	d004      	beq.n	17de <__swbuf_r+0x6a>
    17d4:	89a3      	ldrh	r3, [r4, #12]
    17d6:	07db      	lsls	r3, r3, #31
    17d8:	d51a      	bpl.n	1810 <__swbuf_r+0x9c>
    17da:	2e0a      	cmp	r6, #10
    17dc:	d118      	bne.n	1810 <__swbuf_r+0x9c>
    17de:	0021      	movs	r1, r4
    17e0:	0028      	movs	r0, r5
    17e2:	f000 f91d 	bl	1a20 <_fflush_r>
    17e6:	2800      	cmp	r0, #0
    17e8:	d012      	beq.n	1810 <__swbuf_r+0x9c>
    17ea:	e00f      	b.n	180c <__swbuf_r+0x98>
    17ec:	4b0a      	ldr	r3, [pc, #40]	; (1818 <__swbuf_r+0xa4>)
    17ee:	429c      	cmp	r4, r3
    17f0:	d101      	bne.n	17f6 <__swbuf_r+0x82>
    17f2:	68ac      	ldr	r4, [r5, #8]
    17f4:	e7cd      	b.n	1792 <__swbuf_r+0x1e>
    17f6:	4b09      	ldr	r3, [pc, #36]	; (181c <__swbuf_r+0xa8>)
    17f8:	429c      	cmp	r4, r3
    17fa:	d1ca      	bne.n	1792 <__swbuf_r+0x1e>
    17fc:	68ec      	ldr	r4, [r5, #12]
    17fe:	e7c8      	b.n	1792 <__swbuf_r+0x1e>
    1800:	0021      	movs	r1, r4
    1802:	0028      	movs	r0, r5
    1804:	f000 f80c 	bl	1820 <__swsetup_r>
    1808:	2800      	cmp	r0, #0
    180a:	d0ca      	beq.n	17a2 <__swbuf_r+0x2e>
    180c:	2601      	movs	r6, #1
    180e:	4276      	negs	r6, r6
    1810:	0030      	movs	r0, r6
    1812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1814:	00002764 	.word	0x00002764
    1818:	00002784 	.word	0x00002784
    181c:	00002744 	.word	0x00002744

00001820 <__swsetup_r>:
    1820:	4b36      	ldr	r3, [pc, #216]	; (18fc <__swsetup_r+0xdc>)
    1822:	b570      	push	{r4, r5, r6, lr}
    1824:	681d      	ldr	r5, [r3, #0]
    1826:	0006      	movs	r6, r0
    1828:	000c      	movs	r4, r1
    182a:	2d00      	cmp	r5, #0
    182c:	d005      	beq.n	183a <__swsetup_r+0x1a>
    182e:	69ab      	ldr	r3, [r5, #24]
    1830:	2b00      	cmp	r3, #0
    1832:	d102      	bne.n	183a <__swsetup_r+0x1a>
    1834:	0028      	movs	r0, r5
    1836:	f000 f961 	bl	1afc <__sinit>
    183a:	4b31      	ldr	r3, [pc, #196]	; (1900 <__swsetup_r+0xe0>)
    183c:	429c      	cmp	r4, r3
    183e:	d10f      	bne.n	1860 <__swsetup_r+0x40>
    1840:	686c      	ldr	r4, [r5, #4]
    1842:	230c      	movs	r3, #12
    1844:	5ee2      	ldrsh	r2, [r4, r3]
    1846:	b293      	uxth	r3, r2
    1848:	0719      	lsls	r1, r3, #28
    184a:	d42d      	bmi.n	18a8 <__swsetup_r+0x88>
    184c:	06d9      	lsls	r1, r3, #27
    184e:	d411      	bmi.n	1874 <__swsetup_r+0x54>
    1850:	2309      	movs	r3, #9
    1852:	2001      	movs	r0, #1
    1854:	6033      	str	r3, [r6, #0]
    1856:	3337      	adds	r3, #55	; 0x37
    1858:	4313      	orrs	r3, r2
    185a:	81a3      	strh	r3, [r4, #12]
    185c:	4240      	negs	r0, r0
    185e:	bd70      	pop	{r4, r5, r6, pc}
    1860:	4b28      	ldr	r3, [pc, #160]	; (1904 <__swsetup_r+0xe4>)
    1862:	429c      	cmp	r4, r3
    1864:	d101      	bne.n	186a <__swsetup_r+0x4a>
    1866:	68ac      	ldr	r4, [r5, #8]
    1868:	e7eb      	b.n	1842 <__swsetup_r+0x22>
    186a:	4b27      	ldr	r3, [pc, #156]	; (1908 <__swsetup_r+0xe8>)
    186c:	429c      	cmp	r4, r3
    186e:	d1e8      	bne.n	1842 <__swsetup_r+0x22>
    1870:	68ec      	ldr	r4, [r5, #12]
    1872:	e7e6      	b.n	1842 <__swsetup_r+0x22>
    1874:	075b      	lsls	r3, r3, #29
    1876:	d513      	bpl.n	18a0 <__swsetup_r+0x80>
    1878:	6b61      	ldr	r1, [r4, #52]	; 0x34
    187a:	2900      	cmp	r1, #0
    187c:	d008      	beq.n	1890 <__swsetup_r+0x70>
    187e:	0023      	movs	r3, r4
    1880:	3344      	adds	r3, #68	; 0x44
    1882:	4299      	cmp	r1, r3
    1884:	d002      	beq.n	188c <__swsetup_r+0x6c>
    1886:	0030      	movs	r0, r6
    1888:	f000 fa44 	bl	1d14 <_free_r>
    188c:	2300      	movs	r3, #0
    188e:	6363      	str	r3, [r4, #52]	; 0x34
    1890:	2224      	movs	r2, #36	; 0x24
    1892:	89a3      	ldrh	r3, [r4, #12]
    1894:	4393      	bics	r3, r2
    1896:	81a3      	strh	r3, [r4, #12]
    1898:	2300      	movs	r3, #0
    189a:	6063      	str	r3, [r4, #4]
    189c:	6923      	ldr	r3, [r4, #16]
    189e:	6023      	str	r3, [r4, #0]
    18a0:	2308      	movs	r3, #8
    18a2:	89a2      	ldrh	r2, [r4, #12]
    18a4:	4313      	orrs	r3, r2
    18a6:	81a3      	strh	r3, [r4, #12]
    18a8:	6923      	ldr	r3, [r4, #16]
    18aa:	2b00      	cmp	r3, #0
    18ac:	d10b      	bne.n	18c6 <__swsetup_r+0xa6>
    18ae:	21a0      	movs	r1, #160	; 0xa0
    18b0:	2280      	movs	r2, #128	; 0x80
    18b2:	89a3      	ldrh	r3, [r4, #12]
    18b4:	0089      	lsls	r1, r1, #2
    18b6:	0092      	lsls	r2, r2, #2
    18b8:	400b      	ands	r3, r1
    18ba:	4293      	cmp	r3, r2
    18bc:	d003      	beq.n	18c6 <__swsetup_r+0xa6>
    18be:	0021      	movs	r1, r4
    18c0:	0030      	movs	r0, r6
    18c2:	f000 f9d9 	bl	1c78 <__smakebuf_r>
    18c6:	2301      	movs	r3, #1
    18c8:	89a2      	ldrh	r2, [r4, #12]
    18ca:	4013      	ands	r3, r2
    18cc:	d011      	beq.n	18f2 <__swsetup_r+0xd2>
    18ce:	2300      	movs	r3, #0
    18d0:	60a3      	str	r3, [r4, #8]
    18d2:	6963      	ldr	r3, [r4, #20]
    18d4:	425b      	negs	r3, r3
    18d6:	61a3      	str	r3, [r4, #24]
    18d8:	2000      	movs	r0, #0
    18da:	6923      	ldr	r3, [r4, #16]
    18dc:	4283      	cmp	r3, r0
    18de:	d1be      	bne.n	185e <__swsetup_r+0x3e>
    18e0:	230c      	movs	r3, #12
    18e2:	5ee2      	ldrsh	r2, [r4, r3]
    18e4:	0613      	lsls	r3, r2, #24
    18e6:	d5ba      	bpl.n	185e <__swsetup_r+0x3e>
    18e8:	2340      	movs	r3, #64	; 0x40
    18ea:	4313      	orrs	r3, r2
    18ec:	81a3      	strh	r3, [r4, #12]
    18ee:	3801      	subs	r0, #1
    18f0:	e7b5      	b.n	185e <__swsetup_r+0x3e>
    18f2:	0792      	lsls	r2, r2, #30
    18f4:	d400      	bmi.n	18f8 <__swsetup_r+0xd8>
    18f6:	6963      	ldr	r3, [r4, #20]
    18f8:	60a3      	str	r3, [r4, #8]
    18fa:	e7ed      	b.n	18d8 <__swsetup_r+0xb8>
    18fc:	20000000 	.word	0x20000000
    1900:	00002764 	.word	0x00002764
    1904:	00002784 	.word	0x00002784
    1908:	00002744 	.word	0x00002744

0000190c <__sflush_r>:
    190c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    190e:	898a      	ldrh	r2, [r1, #12]
    1910:	0005      	movs	r5, r0
    1912:	000c      	movs	r4, r1
    1914:	0713      	lsls	r3, r2, #28
    1916:	d460      	bmi.n	19da <__sflush_r+0xce>
    1918:	684b      	ldr	r3, [r1, #4]
    191a:	2b00      	cmp	r3, #0
    191c:	dc04      	bgt.n	1928 <__sflush_r+0x1c>
    191e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1920:	2b00      	cmp	r3, #0
    1922:	dc01      	bgt.n	1928 <__sflush_r+0x1c>
    1924:	2000      	movs	r0, #0
    1926:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1928:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    192a:	2f00      	cmp	r7, #0
    192c:	d0fa      	beq.n	1924 <__sflush_r+0x18>
    192e:	2300      	movs	r3, #0
    1930:	682e      	ldr	r6, [r5, #0]
    1932:	602b      	str	r3, [r5, #0]
    1934:	2380      	movs	r3, #128	; 0x80
    1936:	015b      	lsls	r3, r3, #5
    1938:	401a      	ands	r2, r3
    193a:	d034      	beq.n	19a6 <__sflush_r+0x9a>
    193c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    193e:	89a3      	ldrh	r3, [r4, #12]
    1940:	075b      	lsls	r3, r3, #29
    1942:	d506      	bpl.n	1952 <__sflush_r+0x46>
    1944:	6863      	ldr	r3, [r4, #4]
    1946:	1ac0      	subs	r0, r0, r3
    1948:	6b63      	ldr	r3, [r4, #52]	; 0x34
    194a:	2b00      	cmp	r3, #0
    194c:	d001      	beq.n	1952 <__sflush_r+0x46>
    194e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1950:	1ac0      	subs	r0, r0, r3
    1952:	0002      	movs	r2, r0
    1954:	6a21      	ldr	r1, [r4, #32]
    1956:	2300      	movs	r3, #0
    1958:	0028      	movs	r0, r5
    195a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    195c:	47b8      	blx	r7
    195e:	89a1      	ldrh	r1, [r4, #12]
    1960:	1c43      	adds	r3, r0, #1
    1962:	d106      	bne.n	1972 <__sflush_r+0x66>
    1964:	682b      	ldr	r3, [r5, #0]
    1966:	2b1d      	cmp	r3, #29
    1968:	d831      	bhi.n	19ce <__sflush_r+0xc2>
    196a:	4a2c      	ldr	r2, [pc, #176]	; (1a1c <__sflush_r+0x110>)
    196c:	40da      	lsrs	r2, r3
    196e:	07d3      	lsls	r3, r2, #31
    1970:	d52d      	bpl.n	19ce <__sflush_r+0xc2>
    1972:	2300      	movs	r3, #0
    1974:	6063      	str	r3, [r4, #4]
    1976:	6923      	ldr	r3, [r4, #16]
    1978:	6023      	str	r3, [r4, #0]
    197a:	04cb      	lsls	r3, r1, #19
    197c:	d505      	bpl.n	198a <__sflush_r+0x7e>
    197e:	1c43      	adds	r3, r0, #1
    1980:	d102      	bne.n	1988 <__sflush_r+0x7c>
    1982:	682b      	ldr	r3, [r5, #0]
    1984:	2b00      	cmp	r3, #0
    1986:	d100      	bne.n	198a <__sflush_r+0x7e>
    1988:	6560      	str	r0, [r4, #84]	; 0x54
    198a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    198c:	602e      	str	r6, [r5, #0]
    198e:	2900      	cmp	r1, #0
    1990:	d0c8      	beq.n	1924 <__sflush_r+0x18>
    1992:	0023      	movs	r3, r4
    1994:	3344      	adds	r3, #68	; 0x44
    1996:	4299      	cmp	r1, r3
    1998:	d002      	beq.n	19a0 <__sflush_r+0x94>
    199a:	0028      	movs	r0, r5
    199c:	f000 f9ba 	bl	1d14 <_free_r>
    19a0:	2000      	movs	r0, #0
    19a2:	6360      	str	r0, [r4, #52]	; 0x34
    19a4:	e7bf      	b.n	1926 <__sflush_r+0x1a>
    19a6:	2301      	movs	r3, #1
    19a8:	6a21      	ldr	r1, [r4, #32]
    19aa:	0028      	movs	r0, r5
    19ac:	47b8      	blx	r7
    19ae:	1c43      	adds	r3, r0, #1
    19b0:	d1c5      	bne.n	193e <__sflush_r+0x32>
    19b2:	682b      	ldr	r3, [r5, #0]
    19b4:	2b00      	cmp	r3, #0
    19b6:	d0c2      	beq.n	193e <__sflush_r+0x32>
    19b8:	2b1d      	cmp	r3, #29
    19ba:	d001      	beq.n	19c0 <__sflush_r+0xb4>
    19bc:	2b16      	cmp	r3, #22
    19be:	d101      	bne.n	19c4 <__sflush_r+0xb8>
    19c0:	602e      	str	r6, [r5, #0]
    19c2:	e7af      	b.n	1924 <__sflush_r+0x18>
    19c4:	2340      	movs	r3, #64	; 0x40
    19c6:	89a2      	ldrh	r2, [r4, #12]
    19c8:	4313      	orrs	r3, r2
    19ca:	81a3      	strh	r3, [r4, #12]
    19cc:	e7ab      	b.n	1926 <__sflush_r+0x1a>
    19ce:	2340      	movs	r3, #64	; 0x40
    19d0:	430b      	orrs	r3, r1
    19d2:	2001      	movs	r0, #1
    19d4:	81a3      	strh	r3, [r4, #12]
    19d6:	4240      	negs	r0, r0
    19d8:	e7a5      	b.n	1926 <__sflush_r+0x1a>
    19da:	690f      	ldr	r7, [r1, #16]
    19dc:	2f00      	cmp	r7, #0
    19de:	d0a1      	beq.n	1924 <__sflush_r+0x18>
    19e0:	680b      	ldr	r3, [r1, #0]
    19e2:	600f      	str	r7, [r1, #0]
    19e4:	1bdb      	subs	r3, r3, r7
    19e6:	9301      	str	r3, [sp, #4]
    19e8:	2300      	movs	r3, #0
    19ea:	0792      	lsls	r2, r2, #30
    19ec:	d100      	bne.n	19f0 <__sflush_r+0xe4>
    19ee:	694b      	ldr	r3, [r1, #20]
    19f0:	60a3      	str	r3, [r4, #8]
    19f2:	9b01      	ldr	r3, [sp, #4]
    19f4:	2b00      	cmp	r3, #0
    19f6:	dc00      	bgt.n	19fa <__sflush_r+0xee>
    19f8:	e794      	b.n	1924 <__sflush_r+0x18>
    19fa:	9b01      	ldr	r3, [sp, #4]
    19fc:	003a      	movs	r2, r7
    19fe:	6a21      	ldr	r1, [r4, #32]
    1a00:	0028      	movs	r0, r5
    1a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1a04:	47b0      	blx	r6
    1a06:	2800      	cmp	r0, #0
    1a08:	dc03      	bgt.n	1a12 <__sflush_r+0x106>
    1a0a:	2340      	movs	r3, #64	; 0x40
    1a0c:	89a2      	ldrh	r2, [r4, #12]
    1a0e:	4313      	orrs	r3, r2
    1a10:	e7df      	b.n	19d2 <__sflush_r+0xc6>
    1a12:	9b01      	ldr	r3, [sp, #4]
    1a14:	183f      	adds	r7, r7, r0
    1a16:	1a1b      	subs	r3, r3, r0
    1a18:	9301      	str	r3, [sp, #4]
    1a1a:	e7ea      	b.n	19f2 <__sflush_r+0xe6>
    1a1c:	20400001 	.word	0x20400001

00001a20 <_fflush_r>:
    1a20:	690b      	ldr	r3, [r1, #16]
    1a22:	b570      	push	{r4, r5, r6, lr}
    1a24:	0005      	movs	r5, r0
    1a26:	000c      	movs	r4, r1
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d101      	bne.n	1a30 <_fflush_r+0x10>
    1a2c:	2000      	movs	r0, #0
    1a2e:	bd70      	pop	{r4, r5, r6, pc}
    1a30:	2800      	cmp	r0, #0
    1a32:	d004      	beq.n	1a3e <_fflush_r+0x1e>
    1a34:	6983      	ldr	r3, [r0, #24]
    1a36:	2b00      	cmp	r3, #0
    1a38:	d101      	bne.n	1a3e <_fflush_r+0x1e>
    1a3a:	f000 f85f 	bl	1afc <__sinit>
    1a3e:	4b0b      	ldr	r3, [pc, #44]	; (1a6c <_fflush_r+0x4c>)
    1a40:	429c      	cmp	r4, r3
    1a42:	d109      	bne.n	1a58 <_fflush_r+0x38>
    1a44:	686c      	ldr	r4, [r5, #4]
    1a46:	220c      	movs	r2, #12
    1a48:	5ea3      	ldrsh	r3, [r4, r2]
    1a4a:	2b00      	cmp	r3, #0
    1a4c:	d0ee      	beq.n	1a2c <_fflush_r+0xc>
    1a4e:	0021      	movs	r1, r4
    1a50:	0028      	movs	r0, r5
    1a52:	f7ff ff5b 	bl	190c <__sflush_r>
    1a56:	e7ea      	b.n	1a2e <_fflush_r+0xe>
    1a58:	4b05      	ldr	r3, [pc, #20]	; (1a70 <_fflush_r+0x50>)
    1a5a:	429c      	cmp	r4, r3
    1a5c:	d101      	bne.n	1a62 <_fflush_r+0x42>
    1a5e:	68ac      	ldr	r4, [r5, #8]
    1a60:	e7f1      	b.n	1a46 <_fflush_r+0x26>
    1a62:	4b04      	ldr	r3, [pc, #16]	; (1a74 <_fflush_r+0x54>)
    1a64:	429c      	cmp	r4, r3
    1a66:	d1ee      	bne.n	1a46 <_fflush_r+0x26>
    1a68:	68ec      	ldr	r4, [r5, #12]
    1a6a:	e7ec      	b.n	1a46 <_fflush_r+0x26>
    1a6c:	00002764 	.word	0x00002764
    1a70:	00002784 	.word	0x00002784
    1a74:	00002744 	.word	0x00002744

00001a78 <_cleanup_r>:
    1a78:	b510      	push	{r4, lr}
    1a7a:	4902      	ldr	r1, [pc, #8]	; (1a84 <_cleanup_r+0xc>)
    1a7c:	f000 f8b2 	bl	1be4 <_fwalk_reent>
    1a80:	bd10      	pop	{r4, pc}
    1a82:	46c0      	nop			; (mov r8, r8)
    1a84:	00001a21 	.word	0x00001a21

00001a88 <std.isra.0>:
    1a88:	2300      	movs	r3, #0
    1a8a:	b510      	push	{r4, lr}
    1a8c:	0004      	movs	r4, r0
    1a8e:	6003      	str	r3, [r0, #0]
    1a90:	6043      	str	r3, [r0, #4]
    1a92:	6083      	str	r3, [r0, #8]
    1a94:	8181      	strh	r1, [r0, #12]
    1a96:	6643      	str	r3, [r0, #100]	; 0x64
    1a98:	81c2      	strh	r2, [r0, #14]
    1a9a:	6103      	str	r3, [r0, #16]
    1a9c:	6143      	str	r3, [r0, #20]
    1a9e:	6183      	str	r3, [r0, #24]
    1aa0:	0019      	movs	r1, r3
    1aa2:	2208      	movs	r2, #8
    1aa4:	305c      	adds	r0, #92	; 0x5c
    1aa6:	f7ff fd22 	bl	14ee <memset>
    1aaa:	4b05      	ldr	r3, [pc, #20]	; (1ac0 <std.isra.0+0x38>)
    1aac:	6224      	str	r4, [r4, #32]
    1aae:	6263      	str	r3, [r4, #36]	; 0x24
    1ab0:	4b04      	ldr	r3, [pc, #16]	; (1ac4 <std.isra.0+0x3c>)
    1ab2:	62a3      	str	r3, [r4, #40]	; 0x28
    1ab4:	4b04      	ldr	r3, [pc, #16]	; (1ac8 <std.isra.0+0x40>)
    1ab6:	62e3      	str	r3, [r4, #44]	; 0x2c
    1ab8:	4b04      	ldr	r3, [pc, #16]	; (1acc <std.isra.0+0x44>)
    1aba:	6323      	str	r3, [r4, #48]	; 0x30
    1abc:	bd10      	pop	{r4, pc}
    1abe:	46c0      	nop			; (mov r8, r8)
    1ac0:	00002421 	.word	0x00002421
    1ac4:	00002449 	.word	0x00002449
    1ac8:	00002481 	.word	0x00002481
    1acc:	000024ad 	.word	0x000024ad

00001ad0 <__sfmoreglue>:
    1ad0:	b570      	push	{r4, r5, r6, lr}
    1ad2:	2568      	movs	r5, #104	; 0x68
    1ad4:	1e4a      	subs	r2, r1, #1
    1ad6:	4355      	muls	r5, r2
    1ad8:	000e      	movs	r6, r1
    1ada:	0029      	movs	r1, r5
    1adc:	3174      	adds	r1, #116	; 0x74
    1ade:	f000 f963 	bl	1da8 <_malloc_r>
    1ae2:	1e04      	subs	r4, r0, #0
    1ae4:	d008      	beq.n	1af8 <__sfmoreglue+0x28>
    1ae6:	2100      	movs	r1, #0
    1ae8:	002a      	movs	r2, r5
    1aea:	6001      	str	r1, [r0, #0]
    1aec:	6046      	str	r6, [r0, #4]
    1aee:	300c      	adds	r0, #12
    1af0:	60a0      	str	r0, [r4, #8]
    1af2:	3268      	adds	r2, #104	; 0x68
    1af4:	f7ff fcfb 	bl	14ee <memset>
    1af8:	0020      	movs	r0, r4
    1afa:	bd70      	pop	{r4, r5, r6, pc}

00001afc <__sinit>:
    1afc:	6983      	ldr	r3, [r0, #24]
    1afe:	b513      	push	{r0, r1, r4, lr}
    1b00:	0004      	movs	r4, r0
    1b02:	2b00      	cmp	r3, #0
    1b04:	d128      	bne.n	1b58 <__sinit+0x5c>
    1b06:	6483      	str	r3, [r0, #72]	; 0x48
    1b08:	64c3      	str	r3, [r0, #76]	; 0x4c
    1b0a:	6503      	str	r3, [r0, #80]	; 0x50
    1b0c:	4b13      	ldr	r3, [pc, #76]	; (1b5c <__sinit+0x60>)
    1b0e:	4a14      	ldr	r2, [pc, #80]	; (1b60 <__sinit+0x64>)
    1b10:	681b      	ldr	r3, [r3, #0]
    1b12:	6282      	str	r2, [r0, #40]	; 0x28
    1b14:	9301      	str	r3, [sp, #4]
    1b16:	4298      	cmp	r0, r3
    1b18:	d101      	bne.n	1b1e <__sinit+0x22>
    1b1a:	2301      	movs	r3, #1
    1b1c:	6183      	str	r3, [r0, #24]
    1b1e:	0020      	movs	r0, r4
    1b20:	f000 f820 	bl	1b64 <__sfp>
    1b24:	6060      	str	r0, [r4, #4]
    1b26:	0020      	movs	r0, r4
    1b28:	f000 f81c 	bl	1b64 <__sfp>
    1b2c:	60a0      	str	r0, [r4, #8]
    1b2e:	0020      	movs	r0, r4
    1b30:	f000 f818 	bl	1b64 <__sfp>
    1b34:	2200      	movs	r2, #0
    1b36:	60e0      	str	r0, [r4, #12]
    1b38:	2104      	movs	r1, #4
    1b3a:	6860      	ldr	r0, [r4, #4]
    1b3c:	f7ff ffa4 	bl	1a88 <std.isra.0>
    1b40:	2201      	movs	r2, #1
    1b42:	2109      	movs	r1, #9
    1b44:	68a0      	ldr	r0, [r4, #8]
    1b46:	f7ff ff9f 	bl	1a88 <std.isra.0>
    1b4a:	2202      	movs	r2, #2
    1b4c:	2112      	movs	r1, #18
    1b4e:	68e0      	ldr	r0, [r4, #12]
    1b50:	f7ff ff9a 	bl	1a88 <std.isra.0>
    1b54:	2301      	movs	r3, #1
    1b56:	61a3      	str	r3, [r4, #24]
    1b58:	bd13      	pop	{r0, r1, r4, pc}
    1b5a:	46c0      	nop			; (mov r8, r8)
    1b5c:	00002740 	.word	0x00002740
    1b60:	00001a79 	.word	0x00001a79

00001b64 <__sfp>:
    1b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b66:	4b1e      	ldr	r3, [pc, #120]	; (1be0 <__sfp+0x7c>)
    1b68:	0007      	movs	r7, r0
    1b6a:	681e      	ldr	r6, [r3, #0]
    1b6c:	69b3      	ldr	r3, [r6, #24]
    1b6e:	2b00      	cmp	r3, #0
    1b70:	d102      	bne.n	1b78 <__sfp+0x14>
    1b72:	0030      	movs	r0, r6
    1b74:	f7ff ffc2 	bl	1afc <__sinit>
    1b78:	3648      	adds	r6, #72	; 0x48
    1b7a:	68b4      	ldr	r4, [r6, #8]
    1b7c:	6873      	ldr	r3, [r6, #4]
    1b7e:	3b01      	subs	r3, #1
    1b80:	d504      	bpl.n	1b8c <__sfp+0x28>
    1b82:	6833      	ldr	r3, [r6, #0]
    1b84:	2b00      	cmp	r3, #0
    1b86:	d007      	beq.n	1b98 <__sfp+0x34>
    1b88:	6836      	ldr	r6, [r6, #0]
    1b8a:	e7f6      	b.n	1b7a <__sfp+0x16>
    1b8c:	220c      	movs	r2, #12
    1b8e:	5ea5      	ldrsh	r5, [r4, r2]
    1b90:	2d00      	cmp	r5, #0
    1b92:	d00d      	beq.n	1bb0 <__sfp+0x4c>
    1b94:	3468      	adds	r4, #104	; 0x68
    1b96:	e7f2      	b.n	1b7e <__sfp+0x1a>
    1b98:	2104      	movs	r1, #4
    1b9a:	0038      	movs	r0, r7
    1b9c:	f7ff ff98 	bl	1ad0 <__sfmoreglue>
    1ba0:	6030      	str	r0, [r6, #0]
    1ba2:	2800      	cmp	r0, #0
    1ba4:	d1f0      	bne.n	1b88 <__sfp+0x24>
    1ba6:	230c      	movs	r3, #12
    1ba8:	0004      	movs	r4, r0
    1baa:	603b      	str	r3, [r7, #0]
    1bac:	0020      	movs	r0, r4
    1bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bb0:	2301      	movs	r3, #1
    1bb2:	0020      	movs	r0, r4
    1bb4:	425b      	negs	r3, r3
    1bb6:	81e3      	strh	r3, [r4, #14]
    1bb8:	3302      	adds	r3, #2
    1bba:	81a3      	strh	r3, [r4, #12]
    1bbc:	6665      	str	r5, [r4, #100]	; 0x64
    1bbe:	6025      	str	r5, [r4, #0]
    1bc0:	60a5      	str	r5, [r4, #8]
    1bc2:	6065      	str	r5, [r4, #4]
    1bc4:	6125      	str	r5, [r4, #16]
    1bc6:	6165      	str	r5, [r4, #20]
    1bc8:	61a5      	str	r5, [r4, #24]
    1bca:	2208      	movs	r2, #8
    1bcc:	0029      	movs	r1, r5
    1bce:	305c      	adds	r0, #92	; 0x5c
    1bd0:	f7ff fc8d 	bl	14ee <memset>
    1bd4:	6365      	str	r5, [r4, #52]	; 0x34
    1bd6:	63a5      	str	r5, [r4, #56]	; 0x38
    1bd8:	64a5      	str	r5, [r4, #72]	; 0x48
    1bda:	64e5      	str	r5, [r4, #76]	; 0x4c
    1bdc:	e7e6      	b.n	1bac <__sfp+0x48>
    1bde:	46c0      	nop			; (mov r8, r8)
    1be0:	00002740 	.word	0x00002740

00001be4 <_fwalk_reent>:
    1be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1be6:	0004      	movs	r4, r0
    1be8:	0007      	movs	r7, r0
    1bea:	2600      	movs	r6, #0
    1bec:	9101      	str	r1, [sp, #4]
    1bee:	3448      	adds	r4, #72	; 0x48
    1bf0:	2c00      	cmp	r4, #0
    1bf2:	d101      	bne.n	1bf8 <_fwalk_reent+0x14>
    1bf4:	0030      	movs	r0, r6
    1bf6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1bf8:	6863      	ldr	r3, [r4, #4]
    1bfa:	68a5      	ldr	r5, [r4, #8]
    1bfc:	9300      	str	r3, [sp, #0]
    1bfe:	9b00      	ldr	r3, [sp, #0]
    1c00:	3b01      	subs	r3, #1
    1c02:	9300      	str	r3, [sp, #0]
    1c04:	d501      	bpl.n	1c0a <_fwalk_reent+0x26>
    1c06:	6824      	ldr	r4, [r4, #0]
    1c08:	e7f2      	b.n	1bf0 <_fwalk_reent+0xc>
    1c0a:	89ab      	ldrh	r3, [r5, #12]
    1c0c:	2b01      	cmp	r3, #1
    1c0e:	d908      	bls.n	1c22 <_fwalk_reent+0x3e>
    1c10:	220e      	movs	r2, #14
    1c12:	5eab      	ldrsh	r3, [r5, r2]
    1c14:	3301      	adds	r3, #1
    1c16:	d004      	beq.n	1c22 <_fwalk_reent+0x3e>
    1c18:	0029      	movs	r1, r5
    1c1a:	0038      	movs	r0, r7
    1c1c:	9b01      	ldr	r3, [sp, #4]
    1c1e:	4798      	blx	r3
    1c20:	4306      	orrs	r6, r0
    1c22:	3568      	adds	r5, #104	; 0x68
    1c24:	e7eb      	b.n	1bfe <_fwalk_reent+0x1a>
	...

00001c28 <__swhatbuf_r>:
    1c28:	b570      	push	{r4, r5, r6, lr}
    1c2a:	000e      	movs	r6, r1
    1c2c:	001d      	movs	r5, r3
    1c2e:	230e      	movs	r3, #14
    1c30:	5ec9      	ldrsh	r1, [r1, r3]
    1c32:	b090      	sub	sp, #64	; 0x40
    1c34:	0014      	movs	r4, r2
    1c36:	2900      	cmp	r1, #0
    1c38:	da07      	bge.n	1c4a <__swhatbuf_r+0x22>
    1c3a:	2300      	movs	r3, #0
    1c3c:	602b      	str	r3, [r5, #0]
    1c3e:	89b3      	ldrh	r3, [r6, #12]
    1c40:	061b      	lsls	r3, r3, #24
    1c42:	d411      	bmi.n	1c68 <__swhatbuf_r+0x40>
    1c44:	2380      	movs	r3, #128	; 0x80
    1c46:	00db      	lsls	r3, r3, #3
    1c48:	e00f      	b.n	1c6a <__swhatbuf_r+0x42>
    1c4a:	aa01      	add	r2, sp, #4
    1c4c:	f000 fc5a 	bl	2504 <_fstat_r>
    1c50:	2800      	cmp	r0, #0
    1c52:	dbf2      	blt.n	1c3a <__swhatbuf_r+0x12>
    1c54:	22f0      	movs	r2, #240	; 0xf0
    1c56:	9b02      	ldr	r3, [sp, #8]
    1c58:	0212      	lsls	r2, r2, #8
    1c5a:	4013      	ands	r3, r2
    1c5c:	4a05      	ldr	r2, [pc, #20]	; (1c74 <__swhatbuf_r+0x4c>)
    1c5e:	189b      	adds	r3, r3, r2
    1c60:	425a      	negs	r2, r3
    1c62:	4153      	adcs	r3, r2
    1c64:	602b      	str	r3, [r5, #0]
    1c66:	e7ed      	b.n	1c44 <__swhatbuf_r+0x1c>
    1c68:	2340      	movs	r3, #64	; 0x40
    1c6a:	2000      	movs	r0, #0
    1c6c:	6023      	str	r3, [r4, #0]
    1c6e:	b010      	add	sp, #64	; 0x40
    1c70:	bd70      	pop	{r4, r5, r6, pc}
    1c72:	46c0      	nop			; (mov r8, r8)
    1c74:	ffffe000 	.word	0xffffe000

00001c78 <__smakebuf_r>:
    1c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1c7a:	2602      	movs	r6, #2
    1c7c:	898b      	ldrh	r3, [r1, #12]
    1c7e:	0005      	movs	r5, r0
    1c80:	000c      	movs	r4, r1
    1c82:	4233      	tst	r3, r6
    1c84:	d006      	beq.n	1c94 <__smakebuf_r+0x1c>
    1c86:	0023      	movs	r3, r4
    1c88:	3347      	adds	r3, #71	; 0x47
    1c8a:	6023      	str	r3, [r4, #0]
    1c8c:	6123      	str	r3, [r4, #16]
    1c8e:	2301      	movs	r3, #1
    1c90:	6163      	str	r3, [r4, #20]
    1c92:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1c94:	ab01      	add	r3, sp, #4
    1c96:	466a      	mov	r2, sp
    1c98:	f7ff ffc6 	bl	1c28 <__swhatbuf_r>
    1c9c:	9900      	ldr	r1, [sp, #0]
    1c9e:	0007      	movs	r7, r0
    1ca0:	0028      	movs	r0, r5
    1ca2:	f000 f881 	bl	1da8 <_malloc_r>
    1ca6:	2800      	cmp	r0, #0
    1ca8:	d108      	bne.n	1cbc <__smakebuf_r+0x44>
    1caa:	220c      	movs	r2, #12
    1cac:	5ea3      	ldrsh	r3, [r4, r2]
    1cae:	059a      	lsls	r2, r3, #22
    1cb0:	d4ef      	bmi.n	1c92 <__smakebuf_r+0x1a>
    1cb2:	2203      	movs	r2, #3
    1cb4:	4393      	bics	r3, r2
    1cb6:	431e      	orrs	r6, r3
    1cb8:	81a6      	strh	r6, [r4, #12]
    1cba:	e7e4      	b.n	1c86 <__smakebuf_r+0xe>
    1cbc:	4b0f      	ldr	r3, [pc, #60]	; (1cfc <__smakebuf_r+0x84>)
    1cbe:	62ab      	str	r3, [r5, #40]	; 0x28
    1cc0:	2380      	movs	r3, #128	; 0x80
    1cc2:	89a2      	ldrh	r2, [r4, #12]
    1cc4:	6020      	str	r0, [r4, #0]
    1cc6:	4313      	orrs	r3, r2
    1cc8:	81a3      	strh	r3, [r4, #12]
    1cca:	9b00      	ldr	r3, [sp, #0]
    1ccc:	6120      	str	r0, [r4, #16]
    1cce:	6163      	str	r3, [r4, #20]
    1cd0:	9b01      	ldr	r3, [sp, #4]
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	d00d      	beq.n	1cf2 <__smakebuf_r+0x7a>
    1cd6:	230e      	movs	r3, #14
    1cd8:	5ee1      	ldrsh	r1, [r4, r3]
    1cda:	0028      	movs	r0, r5
    1cdc:	f000 fc24 	bl	2528 <_isatty_r>
    1ce0:	2800      	cmp	r0, #0
    1ce2:	d006      	beq.n	1cf2 <__smakebuf_r+0x7a>
    1ce4:	2203      	movs	r2, #3
    1ce6:	89a3      	ldrh	r3, [r4, #12]
    1ce8:	4393      	bics	r3, r2
    1cea:	001a      	movs	r2, r3
    1cec:	2301      	movs	r3, #1
    1cee:	4313      	orrs	r3, r2
    1cf0:	81a3      	strh	r3, [r4, #12]
    1cf2:	89a0      	ldrh	r0, [r4, #12]
    1cf4:	4338      	orrs	r0, r7
    1cf6:	81a0      	strh	r0, [r4, #12]
    1cf8:	e7cb      	b.n	1c92 <__smakebuf_r+0x1a>
    1cfa:	46c0      	nop			; (mov r8, r8)
    1cfc:	00001a79 	.word	0x00001a79

00001d00 <malloc>:
    1d00:	b510      	push	{r4, lr}
    1d02:	4b03      	ldr	r3, [pc, #12]	; (1d10 <malloc+0x10>)
    1d04:	0001      	movs	r1, r0
    1d06:	6818      	ldr	r0, [r3, #0]
    1d08:	f000 f84e 	bl	1da8 <_malloc_r>
    1d0c:	bd10      	pop	{r4, pc}
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	20000000 	.word	0x20000000

00001d14 <_free_r>:
    1d14:	b570      	push	{r4, r5, r6, lr}
    1d16:	0005      	movs	r5, r0
    1d18:	2900      	cmp	r1, #0
    1d1a:	d010      	beq.n	1d3e <_free_r+0x2a>
    1d1c:	1f0c      	subs	r4, r1, #4
    1d1e:	6823      	ldr	r3, [r4, #0]
    1d20:	2b00      	cmp	r3, #0
    1d22:	da00      	bge.n	1d26 <_free_r+0x12>
    1d24:	18e4      	adds	r4, r4, r3
    1d26:	0028      	movs	r0, r5
    1d28:	f000 fc2f 	bl	258a <__malloc_lock>
    1d2c:	4a1d      	ldr	r2, [pc, #116]	; (1da4 <_free_r+0x90>)
    1d2e:	6813      	ldr	r3, [r2, #0]
    1d30:	2b00      	cmp	r3, #0
    1d32:	d105      	bne.n	1d40 <_free_r+0x2c>
    1d34:	6063      	str	r3, [r4, #4]
    1d36:	6014      	str	r4, [r2, #0]
    1d38:	0028      	movs	r0, r5
    1d3a:	f000 fc27 	bl	258c <__malloc_unlock>
    1d3e:	bd70      	pop	{r4, r5, r6, pc}
    1d40:	42a3      	cmp	r3, r4
    1d42:	d909      	bls.n	1d58 <_free_r+0x44>
    1d44:	6821      	ldr	r1, [r4, #0]
    1d46:	1860      	adds	r0, r4, r1
    1d48:	4283      	cmp	r3, r0
    1d4a:	d1f3      	bne.n	1d34 <_free_r+0x20>
    1d4c:	6818      	ldr	r0, [r3, #0]
    1d4e:	685b      	ldr	r3, [r3, #4]
    1d50:	1841      	adds	r1, r0, r1
    1d52:	6021      	str	r1, [r4, #0]
    1d54:	e7ee      	b.n	1d34 <_free_r+0x20>
    1d56:	0013      	movs	r3, r2
    1d58:	685a      	ldr	r2, [r3, #4]
    1d5a:	2a00      	cmp	r2, #0
    1d5c:	d001      	beq.n	1d62 <_free_r+0x4e>
    1d5e:	42a2      	cmp	r2, r4
    1d60:	d9f9      	bls.n	1d56 <_free_r+0x42>
    1d62:	6819      	ldr	r1, [r3, #0]
    1d64:	1858      	adds	r0, r3, r1
    1d66:	42a0      	cmp	r0, r4
    1d68:	d10b      	bne.n	1d82 <_free_r+0x6e>
    1d6a:	6820      	ldr	r0, [r4, #0]
    1d6c:	1809      	adds	r1, r1, r0
    1d6e:	1858      	adds	r0, r3, r1
    1d70:	6019      	str	r1, [r3, #0]
    1d72:	4282      	cmp	r2, r0
    1d74:	d1e0      	bne.n	1d38 <_free_r+0x24>
    1d76:	6810      	ldr	r0, [r2, #0]
    1d78:	6852      	ldr	r2, [r2, #4]
    1d7a:	1841      	adds	r1, r0, r1
    1d7c:	6019      	str	r1, [r3, #0]
    1d7e:	605a      	str	r2, [r3, #4]
    1d80:	e7da      	b.n	1d38 <_free_r+0x24>
    1d82:	42a0      	cmp	r0, r4
    1d84:	d902      	bls.n	1d8c <_free_r+0x78>
    1d86:	230c      	movs	r3, #12
    1d88:	602b      	str	r3, [r5, #0]
    1d8a:	e7d5      	b.n	1d38 <_free_r+0x24>
    1d8c:	6821      	ldr	r1, [r4, #0]
    1d8e:	1860      	adds	r0, r4, r1
    1d90:	4282      	cmp	r2, r0
    1d92:	d103      	bne.n	1d9c <_free_r+0x88>
    1d94:	6810      	ldr	r0, [r2, #0]
    1d96:	6852      	ldr	r2, [r2, #4]
    1d98:	1841      	adds	r1, r0, r1
    1d9a:	6021      	str	r1, [r4, #0]
    1d9c:	6062      	str	r2, [r4, #4]
    1d9e:	605c      	str	r4, [r3, #4]
    1da0:	e7ca      	b.n	1d38 <_free_r+0x24>
    1da2:	46c0      	nop			; (mov r8, r8)
    1da4:	200001b4 	.word	0x200001b4

00001da8 <_malloc_r>:
    1da8:	2303      	movs	r3, #3
    1daa:	b570      	push	{r4, r5, r6, lr}
    1dac:	1ccd      	adds	r5, r1, #3
    1dae:	439d      	bics	r5, r3
    1db0:	3508      	adds	r5, #8
    1db2:	0006      	movs	r6, r0
    1db4:	2d0c      	cmp	r5, #12
    1db6:	d21e      	bcs.n	1df6 <_malloc_r+0x4e>
    1db8:	250c      	movs	r5, #12
    1dba:	42a9      	cmp	r1, r5
    1dbc:	d81d      	bhi.n	1dfa <_malloc_r+0x52>
    1dbe:	0030      	movs	r0, r6
    1dc0:	f000 fbe3 	bl	258a <__malloc_lock>
    1dc4:	4a25      	ldr	r2, [pc, #148]	; (1e5c <_malloc_r+0xb4>)
    1dc6:	6814      	ldr	r4, [r2, #0]
    1dc8:	0021      	movs	r1, r4
    1dca:	2900      	cmp	r1, #0
    1dcc:	d119      	bne.n	1e02 <_malloc_r+0x5a>
    1dce:	4c24      	ldr	r4, [pc, #144]	; (1e60 <_malloc_r+0xb8>)
    1dd0:	6823      	ldr	r3, [r4, #0]
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d103      	bne.n	1dde <_malloc_r+0x36>
    1dd6:	0030      	movs	r0, r6
    1dd8:	f000 fb10 	bl	23fc <_sbrk_r>
    1ddc:	6020      	str	r0, [r4, #0]
    1dde:	0029      	movs	r1, r5
    1de0:	0030      	movs	r0, r6
    1de2:	f000 fb0b 	bl	23fc <_sbrk_r>
    1de6:	1c43      	adds	r3, r0, #1
    1de8:	d12c      	bne.n	1e44 <_malloc_r+0x9c>
    1dea:	230c      	movs	r3, #12
    1dec:	0030      	movs	r0, r6
    1dee:	6033      	str	r3, [r6, #0]
    1df0:	f000 fbcc 	bl	258c <__malloc_unlock>
    1df4:	e003      	b.n	1dfe <_malloc_r+0x56>
    1df6:	2d00      	cmp	r5, #0
    1df8:	dadf      	bge.n	1dba <_malloc_r+0x12>
    1dfa:	230c      	movs	r3, #12
    1dfc:	6033      	str	r3, [r6, #0]
    1dfe:	2000      	movs	r0, #0
    1e00:	bd70      	pop	{r4, r5, r6, pc}
    1e02:	680b      	ldr	r3, [r1, #0]
    1e04:	1b5b      	subs	r3, r3, r5
    1e06:	d41a      	bmi.n	1e3e <_malloc_r+0x96>
    1e08:	2b0b      	cmp	r3, #11
    1e0a:	d903      	bls.n	1e14 <_malloc_r+0x6c>
    1e0c:	600b      	str	r3, [r1, #0]
    1e0e:	18cc      	adds	r4, r1, r3
    1e10:	6025      	str	r5, [r4, #0]
    1e12:	e003      	b.n	1e1c <_malloc_r+0x74>
    1e14:	428c      	cmp	r4, r1
    1e16:	d10e      	bne.n	1e36 <_malloc_r+0x8e>
    1e18:	6863      	ldr	r3, [r4, #4]
    1e1a:	6013      	str	r3, [r2, #0]
    1e1c:	0030      	movs	r0, r6
    1e1e:	f000 fbb5 	bl	258c <__malloc_unlock>
    1e22:	0020      	movs	r0, r4
    1e24:	2207      	movs	r2, #7
    1e26:	300b      	adds	r0, #11
    1e28:	1d23      	adds	r3, r4, #4
    1e2a:	4390      	bics	r0, r2
    1e2c:	1ac3      	subs	r3, r0, r3
    1e2e:	d0e7      	beq.n	1e00 <_malloc_r+0x58>
    1e30:	425a      	negs	r2, r3
    1e32:	50e2      	str	r2, [r4, r3]
    1e34:	e7e4      	b.n	1e00 <_malloc_r+0x58>
    1e36:	684b      	ldr	r3, [r1, #4]
    1e38:	6063      	str	r3, [r4, #4]
    1e3a:	000c      	movs	r4, r1
    1e3c:	e7ee      	b.n	1e1c <_malloc_r+0x74>
    1e3e:	000c      	movs	r4, r1
    1e40:	6849      	ldr	r1, [r1, #4]
    1e42:	e7c2      	b.n	1dca <_malloc_r+0x22>
    1e44:	2303      	movs	r3, #3
    1e46:	1cc4      	adds	r4, r0, #3
    1e48:	439c      	bics	r4, r3
    1e4a:	42a0      	cmp	r0, r4
    1e4c:	d0e0      	beq.n	1e10 <_malloc_r+0x68>
    1e4e:	1a21      	subs	r1, r4, r0
    1e50:	0030      	movs	r0, r6
    1e52:	f000 fad3 	bl	23fc <_sbrk_r>
    1e56:	1c43      	adds	r3, r0, #1
    1e58:	d1da      	bne.n	1e10 <_malloc_r+0x68>
    1e5a:	e7c6      	b.n	1dea <_malloc_r+0x42>
    1e5c:	200001b4 	.word	0x200001b4
    1e60:	200001b8 	.word	0x200001b8

00001e64 <__sfputc_r>:
    1e64:	6893      	ldr	r3, [r2, #8]
    1e66:	b510      	push	{r4, lr}
    1e68:	3b01      	subs	r3, #1
    1e6a:	6093      	str	r3, [r2, #8]
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	da05      	bge.n	1e7c <__sfputc_r+0x18>
    1e70:	6994      	ldr	r4, [r2, #24]
    1e72:	42a3      	cmp	r3, r4
    1e74:	db08      	blt.n	1e88 <__sfputc_r+0x24>
    1e76:	b2cb      	uxtb	r3, r1
    1e78:	2b0a      	cmp	r3, #10
    1e7a:	d005      	beq.n	1e88 <__sfputc_r+0x24>
    1e7c:	6813      	ldr	r3, [r2, #0]
    1e7e:	1c58      	adds	r0, r3, #1
    1e80:	6010      	str	r0, [r2, #0]
    1e82:	7019      	strb	r1, [r3, #0]
    1e84:	b2c8      	uxtb	r0, r1
    1e86:	bd10      	pop	{r4, pc}
    1e88:	f7ff fc74 	bl	1774 <__swbuf_r>
    1e8c:	e7fb      	b.n	1e86 <__sfputc_r+0x22>

00001e8e <__sfputs_r>:
    1e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e90:	0006      	movs	r6, r0
    1e92:	000f      	movs	r7, r1
    1e94:	0014      	movs	r4, r2
    1e96:	18d5      	adds	r5, r2, r3
    1e98:	42ac      	cmp	r4, r5
    1e9a:	d101      	bne.n	1ea0 <__sfputs_r+0x12>
    1e9c:	2000      	movs	r0, #0
    1e9e:	e007      	b.n	1eb0 <__sfputs_r+0x22>
    1ea0:	7821      	ldrb	r1, [r4, #0]
    1ea2:	003a      	movs	r2, r7
    1ea4:	0030      	movs	r0, r6
    1ea6:	f7ff ffdd 	bl	1e64 <__sfputc_r>
    1eaa:	3401      	adds	r4, #1
    1eac:	1c43      	adds	r3, r0, #1
    1eae:	d1f3      	bne.n	1e98 <__sfputs_r+0xa>
    1eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001eb4 <_vfiprintf_r>:
    1eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eb6:	b09f      	sub	sp, #124	; 0x7c
    1eb8:	0006      	movs	r6, r0
    1eba:	000f      	movs	r7, r1
    1ebc:	0014      	movs	r4, r2
    1ebe:	9305      	str	r3, [sp, #20]
    1ec0:	2800      	cmp	r0, #0
    1ec2:	d004      	beq.n	1ece <_vfiprintf_r+0x1a>
    1ec4:	6983      	ldr	r3, [r0, #24]
    1ec6:	2b00      	cmp	r3, #0
    1ec8:	d101      	bne.n	1ece <_vfiprintf_r+0x1a>
    1eca:	f7ff fe17 	bl	1afc <__sinit>
    1ece:	4b7f      	ldr	r3, [pc, #508]	; (20cc <STACK_SIZE+0xcc>)
    1ed0:	429f      	cmp	r7, r3
    1ed2:	d15c      	bne.n	1f8e <_vfiprintf_r+0xda>
    1ed4:	6877      	ldr	r7, [r6, #4]
    1ed6:	89bb      	ldrh	r3, [r7, #12]
    1ed8:	071b      	lsls	r3, r3, #28
    1eda:	d562      	bpl.n	1fa2 <_vfiprintf_r+0xee>
    1edc:	693b      	ldr	r3, [r7, #16]
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d05f      	beq.n	1fa2 <_vfiprintf_r+0xee>
    1ee2:	2300      	movs	r3, #0
    1ee4:	ad06      	add	r5, sp, #24
    1ee6:	616b      	str	r3, [r5, #20]
    1ee8:	3320      	adds	r3, #32
    1eea:	766b      	strb	r3, [r5, #25]
    1eec:	3310      	adds	r3, #16
    1eee:	76ab      	strb	r3, [r5, #26]
    1ef0:	9402      	str	r4, [sp, #8]
    1ef2:	9c02      	ldr	r4, [sp, #8]
    1ef4:	7823      	ldrb	r3, [r4, #0]
    1ef6:	2b00      	cmp	r3, #0
    1ef8:	d15d      	bne.n	1fb6 <_vfiprintf_r+0x102>
    1efa:	9b02      	ldr	r3, [sp, #8]
    1efc:	1ae3      	subs	r3, r4, r3
    1efe:	9304      	str	r3, [sp, #16]
    1f00:	d00d      	beq.n	1f1e <_vfiprintf_r+0x6a>
    1f02:	9b04      	ldr	r3, [sp, #16]
    1f04:	9a02      	ldr	r2, [sp, #8]
    1f06:	0039      	movs	r1, r7
    1f08:	0030      	movs	r0, r6
    1f0a:	f7ff ffc0 	bl	1e8e <__sfputs_r>
    1f0e:	1c43      	adds	r3, r0, #1
    1f10:	d100      	bne.n	1f14 <_vfiprintf_r+0x60>
    1f12:	e0cc      	b.n	20ae <STACK_SIZE+0xae>
    1f14:	696a      	ldr	r2, [r5, #20]
    1f16:	9b04      	ldr	r3, [sp, #16]
    1f18:	4694      	mov	ip, r2
    1f1a:	4463      	add	r3, ip
    1f1c:	616b      	str	r3, [r5, #20]
    1f1e:	7823      	ldrb	r3, [r4, #0]
    1f20:	2b00      	cmp	r3, #0
    1f22:	d100      	bne.n	1f26 <_vfiprintf_r+0x72>
    1f24:	e0c3      	b.n	20ae <STACK_SIZE+0xae>
    1f26:	2201      	movs	r2, #1
    1f28:	2300      	movs	r3, #0
    1f2a:	4252      	negs	r2, r2
    1f2c:	606a      	str	r2, [r5, #4]
    1f2e:	a902      	add	r1, sp, #8
    1f30:	3254      	adds	r2, #84	; 0x54
    1f32:	1852      	adds	r2, r2, r1
    1f34:	3401      	adds	r4, #1
    1f36:	602b      	str	r3, [r5, #0]
    1f38:	60eb      	str	r3, [r5, #12]
    1f3a:	60ab      	str	r3, [r5, #8]
    1f3c:	7013      	strb	r3, [r2, #0]
    1f3e:	65ab      	str	r3, [r5, #88]	; 0x58
    1f40:	7821      	ldrb	r1, [r4, #0]
    1f42:	2205      	movs	r2, #5
    1f44:	4862      	ldr	r0, [pc, #392]	; (20d0 <STACK_SIZE+0xd0>)
    1f46:	f000 fb15 	bl	2574 <memchr>
    1f4a:	1c63      	adds	r3, r4, #1
    1f4c:	469c      	mov	ip, r3
    1f4e:	2800      	cmp	r0, #0
    1f50:	d135      	bne.n	1fbe <_vfiprintf_r+0x10a>
    1f52:	6829      	ldr	r1, [r5, #0]
    1f54:	06cb      	lsls	r3, r1, #27
    1f56:	d504      	bpl.n	1f62 <_vfiprintf_r+0xae>
    1f58:	2353      	movs	r3, #83	; 0x53
    1f5a:	aa02      	add	r2, sp, #8
    1f5c:	3020      	adds	r0, #32
    1f5e:	189b      	adds	r3, r3, r2
    1f60:	7018      	strb	r0, [r3, #0]
    1f62:	070b      	lsls	r3, r1, #28
    1f64:	d504      	bpl.n	1f70 <_vfiprintf_r+0xbc>
    1f66:	2353      	movs	r3, #83	; 0x53
    1f68:	202b      	movs	r0, #43	; 0x2b
    1f6a:	aa02      	add	r2, sp, #8
    1f6c:	189b      	adds	r3, r3, r2
    1f6e:	7018      	strb	r0, [r3, #0]
    1f70:	7823      	ldrb	r3, [r4, #0]
    1f72:	2b2a      	cmp	r3, #42	; 0x2a
    1f74:	d02c      	beq.n	1fd0 <_vfiprintf_r+0x11c>
    1f76:	2000      	movs	r0, #0
    1f78:	210a      	movs	r1, #10
    1f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1f7c:	7822      	ldrb	r2, [r4, #0]
    1f7e:	3a30      	subs	r2, #48	; 0x30
    1f80:	2a09      	cmp	r2, #9
    1f82:	d800      	bhi.n	1f86 <_vfiprintf_r+0xd2>
    1f84:	e06b      	b.n	205e <STACK_SIZE+0x5e>
    1f86:	2800      	cmp	r0, #0
    1f88:	d02a      	beq.n	1fe0 <_vfiprintf_r+0x12c>
    1f8a:	9309      	str	r3, [sp, #36]	; 0x24
    1f8c:	e028      	b.n	1fe0 <_vfiprintf_r+0x12c>
    1f8e:	4b51      	ldr	r3, [pc, #324]	; (20d4 <STACK_SIZE+0xd4>)
    1f90:	429f      	cmp	r7, r3
    1f92:	d101      	bne.n	1f98 <_vfiprintf_r+0xe4>
    1f94:	68b7      	ldr	r7, [r6, #8]
    1f96:	e79e      	b.n	1ed6 <_vfiprintf_r+0x22>
    1f98:	4b4f      	ldr	r3, [pc, #316]	; (20d8 <STACK_SIZE+0xd8>)
    1f9a:	429f      	cmp	r7, r3
    1f9c:	d19b      	bne.n	1ed6 <_vfiprintf_r+0x22>
    1f9e:	68f7      	ldr	r7, [r6, #12]
    1fa0:	e799      	b.n	1ed6 <_vfiprintf_r+0x22>
    1fa2:	0039      	movs	r1, r7
    1fa4:	0030      	movs	r0, r6
    1fa6:	f7ff fc3b 	bl	1820 <__swsetup_r>
    1faa:	2800      	cmp	r0, #0
    1fac:	d099      	beq.n	1ee2 <_vfiprintf_r+0x2e>
    1fae:	2001      	movs	r0, #1
    1fb0:	4240      	negs	r0, r0
    1fb2:	b01f      	add	sp, #124	; 0x7c
    1fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fb6:	2b25      	cmp	r3, #37	; 0x25
    1fb8:	d09f      	beq.n	1efa <_vfiprintf_r+0x46>
    1fba:	3401      	adds	r4, #1
    1fbc:	e79a      	b.n	1ef4 <_vfiprintf_r+0x40>
    1fbe:	4b44      	ldr	r3, [pc, #272]	; (20d0 <STACK_SIZE+0xd0>)
    1fc0:	6829      	ldr	r1, [r5, #0]
    1fc2:	1ac0      	subs	r0, r0, r3
    1fc4:	2301      	movs	r3, #1
    1fc6:	4083      	lsls	r3, r0
    1fc8:	430b      	orrs	r3, r1
    1fca:	602b      	str	r3, [r5, #0]
    1fcc:	4664      	mov	r4, ip
    1fce:	e7b7      	b.n	1f40 <_vfiprintf_r+0x8c>
    1fd0:	9b05      	ldr	r3, [sp, #20]
    1fd2:	1d18      	adds	r0, r3, #4
    1fd4:	681b      	ldr	r3, [r3, #0]
    1fd6:	9005      	str	r0, [sp, #20]
    1fd8:	2b00      	cmp	r3, #0
    1fda:	db3a      	blt.n	2052 <STACK_SIZE+0x52>
    1fdc:	9309      	str	r3, [sp, #36]	; 0x24
    1fde:	4664      	mov	r4, ip
    1fe0:	7823      	ldrb	r3, [r4, #0]
    1fe2:	2b2e      	cmp	r3, #46	; 0x2e
    1fe4:	d10b      	bne.n	1ffe <_vfiprintf_r+0x14a>
    1fe6:	7863      	ldrb	r3, [r4, #1]
    1fe8:	1c62      	adds	r2, r4, #1
    1fea:	2b2a      	cmp	r3, #42	; 0x2a
    1fec:	d13f      	bne.n	206e <STACK_SIZE+0x6e>
    1fee:	9b05      	ldr	r3, [sp, #20]
    1ff0:	3402      	adds	r4, #2
    1ff2:	1d1a      	adds	r2, r3, #4
    1ff4:	681b      	ldr	r3, [r3, #0]
    1ff6:	9205      	str	r2, [sp, #20]
    1ff8:	2b00      	cmp	r3, #0
    1ffa:	db35      	blt.n	2068 <STACK_SIZE+0x68>
    1ffc:	9307      	str	r3, [sp, #28]
    1ffe:	7821      	ldrb	r1, [r4, #0]
    2000:	2203      	movs	r2, #3
    2002:	4836      	ldr	r0, [pc, #216]	; (20dc <STACK_SIZE+0xdc>)
    2004:	f000 fab6 	bl	2574 <memchr>
    2008:	2800      	cmp	r0, #0
    200a:	d007      	beq.n	201c <STACK_SIZE+0x1c>
    200c:	4b33      	ldr	r3, [pc, #204]	; (20dc <STACK_SIZE+0xdc>)
    200e:	682a      	ldr	r2, [r5, #0]
    2010:	1ac0      	subs	r0, r0, r3
    2012:	2340      	movs	r3, #64	; 0x40
    2014:	4083      	lsls	r3, r0
    2016:	4313      	orrs	r3, r2
    2018:	602b      	str	r3, [r5, #0]
    201a:	3401      	adds	r4, #1
    201c:	7821      	ldrb	r1, [r4, #0]
    201e:	1c63      	adds	r3, r4, #1
    2020:	2206      	movs	r2, #6
    2022:	482f      	ldr	r0, [pc, #188]	; (20e0 <STACK_SIZE+0xe0>)
    2024:	9302      	str	r3, [sp, #8]
    2026:	7629      	strb	r1, [r5, #24]
    2028:	f000 faa4 	bl	2574 <memchr>
    202c:	2800      	cmp	r0, #0
    202e:	d044      	beq.n	20ba <STACK_SIZE+0xba>
    2030:	4b2c      	ldr	r3, [pc, #176]	; (20e4 <STACK_SIZE+0xe4>)
    2032:	2b00      	cmp	r3, #0
    2034:	d12f      	bne.n	2096 <STACK_SIZE+0x96>
    2036:	6829      	ldr	r1, [r5, #0]
    2038:	9b05      	ldr	r3, [sp, #20]
    203a:	2207      	movs	r2, #7
    203c:	05c9      	lsls	r1, r1, #23
    203e:	d528      	bpl.n	2092 <STACK_SIZE+0x92>
    2040:	189b      	adds	r3, r3, r2
    2042:	4393      	bics	r3, r2
    2044:	3308      	adds	r3, #8
    2046:	9305      	str	r3, [sp, #20]
    2048:	696b      	ldr	r3, [r5, #20]
    204a:	9a03      	ldr	r2, [sp, #12]
    204c:	189b      	adds	r3, r3, r2
    204e:	616b      	str	r3, [r5, #20]
    2050:	e74f      	b.n	1ef2 <_vfiprintf_r+0x3e>
    2052:	425b      	negs	r3, r3
    2054:	60eb      	str	r3, [r5, #12]
    2056:	2302      	movs	r3, #2
    2058:	430b      	orrs	r3, r1
    205a:	602b      	str	r3, [r5, #0]
    205c:	e7bf      	b.n	1fde <_vfiprintf_r+0x12a>
    205e:	434b      	muls	r3, r1
    2060:	3401      	adds	r4, #1
    2062:	189b      	adds	r3, r3, r2
    2064:	2001      	movs	r0, #1
    2066:	e789      	b.n	1f7c <_vfiprintf_r+0xc8>
    2068:	2301      	movs	r3, #1
    206a:	425b      	negs	r3, r3
    206c:	e7c6      	b.n	1ffc <_vfiprintf_r+0x148>
    206e:	2300      	movs	r3, #0
    2070:	0014      	movs	r4, r2
    2072:	200a      	movs	r0, #10
    2074:	001a      	movs	r2, r3
    2076:	606b      	str	r3, [r5, #4]
    2078:	7821      	ldrb	r1, [r4, #0]
    207a:	3930      	subs	r1, #48	; 0x30
    207c:	2909      	cmp	r1, #9
    207e:	d903      	bls.n	2088 <STACK_SIZE+0x88>
    2080:	2b00      	cmp	r3, #0
    2082:	d0bc      	beq.n	1ffe <_vfiprintf_r+0x14a>
    2084:	9207      	str	r2, [sp, #28]
    2086:	e7ba      	b.n	1ffe <_vfiprintf_r+0x14a>
    2088:	4342      	muls	r2, r0
    208a:	3401      	adds	r4, #1
    208c:	1852      	adds	r2, r2, r1
    208e:	2301      	movs	r3, #1
    2090:	e7f2      	b.n	2078 <STACK_SIZE+0x78>
    2092:	3307      	adds	r3, #7
    2094:	e7d5      	b.n	2042 <STACK_SIZE+0x42>
    2096:	ab05      	add	r3, sp, #20
    2098:	9300      	str	r3, [sp, #0]
    209a:	003a      	movs	r2, r7
    209c:	4b12      	ldr	r3, [pc, #72]	; (20e8 <STACK_SIZE+0xe8>)
    209e:	0029      	movs	r1, r5
    20a0:	0030      	movs	r0, r6
    20a2:	e000      	b.n	20a6 <STACK_SIZE+0xa6>
    20a4:	bf00      	nop
    20a6:	9003      	str	r0, [sp, #12]
    20a8:	9b03      	ldr	r3, [sp, #12]
    20aa:	3301      	adds	r3, #1
    20ac:	d1cc      	bne.n	2048 <STACK_SIZE+0x48>
    20ae:	89bb      	ldrh	r3, [r7, #12]
    20b0:	065b      	lsls	r3, r3, #25
    20b2:	d500      	bpl.n	20b6 <STACK_SIZE+0xb6>
    20b4:	e77b      	b.n	1fae <_vfiprintf_r+0xfa>
    20b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    20b8:	e77b      	b.n	1fb2 <_vfiprintf_r+0xfe>
    20ba:	ab05      	add	r3, sp, #20
    20bc:	9300      	str	r3, [sp, #0]
    20be:	003a      	movs	r2, r7
    20c0:	4b09      	ldr	r3, [pc, #36]	; (20e8 <STACK_SIZE+0xe8>)
    20c2:	0029      	movs	r1, r5
    20c4:	0030      	movs	r0, r6
    20c6:	f000 f87f 	bl	21c8 <_printf_i>
    20ca:	e7ec      	b.n	20a6 <STACK_SIZE+0xa6>
    20cc:	00002764 	.word	0x00002764
    20d0:	000027a4 	.word	0x000027a4
    20d4:	00002784 	.word	0x00002784
    20d8:	00002744 	.word	0x00002744
    20dc:	000027aa 	.word	0x000027aa
    20e0:	000027ae 	.word	0x000027ae
    20e4:	00000000 	.word	0x00000000
    20e8:	00001e8f 	.word	0x00001e8f

000020ec <_printf_common>:
    20ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    20ee:	0015      	movs	r5, r2
    20f0:	9301      	str	r3, [sp, #4]
    20f2:	688a      	ldr	r2, [r1, #8]
    20f4:	690b      	ldr	r3, [r1, #16]
    20f6:	9000      	str	r0, [sp, #0]
    20f8:	000c      	movs	r4, r1
    20fa:	4293      	cmp	r3, r2
    20fc:	da00      	bge.n	2100 <_printf_common+0x14>
    20fe:	0013      	movs	r3, r2
    2100:	0022      	movs	r2, r4
    2102:	602b      	str	r3, [r5, #0]
    2104:	3243      	adds	r2, #67	; 0x43
    2106:	7812      	ldrb	r2, [r2, #0]
    2108:	2a00      	cmp	r2, #0
    210a:	d001      	beq.n	2110 <_printf_common+0x24>
    210c:	3301      	adds	r3, #1
    210e:	602b      	str	r3, [r5, #0]
    2110:	6823      	ldr	r3, [r4, #0]
    2112:	069b      	lsls	r3, r3, #26
    2114:	d502      	bpl.n	211c <_printf_common+0x30>
    2116:	682b      	ldr	r3, [r5, #0]
    2118:	3302      	adds	r3, #2
    211a:	602b      	str	r3, [r5, #0]
    211c:	2706      	movs	r7, #6
    211e:	6823      	ldr	r3, [r4, #0]
    2120:	401f      	ands	r7, r3
    2122:	d027      	beq.n	2174 <_printf_common+0x88>
    2124:	0023      	movs	r3, r4
    2126:	3343      	adds	r3, #67	; 0x43
    2128:	781b      	ldrb	r3, [r3, #0]
    212a:	1e5a      	subs	r2, r3, #1
    212c:	4193      	sbcs	r3, r2
    212e:	6822      	ldr	r2, [r4, #0]
    2130:	0692      	lsls	r2, r2, #26
    2132:	d430      	bmi.n	2196 <_printf_common+0xaa>
    2134:	0022      	movs	r2, r4
    2136:	9901      	ldr	r1, [sp, #4]
    2138:	3243      	adds	r2, #67	; 0x43
    213a:	9800      	ldr	r0, [sp, #0]
    213c:	9e08      	ldr	r6, [sp, #32]
    213e:	47b0      	blx	r6
    2140:	1c43      	adds	r3, r0, #1
    2142:	d025      	beq.n	2190 <_printf_common+0xa4>
    2144:	2306      	movs	r3, #6
    2146:	6820      	ldr	r0, [r4, #0]
    2148:	682a      	ldr	r2, [r5, #0]
    214a:	68e1      	ldr	r1, [r4, #12]
    214c:	4003      	ands	r3, r0
    214e:	2500      	movs	r5, #0
    2150:	2b04      	cmp	r3, #4
    2152:	d103      	bne.n	215c <_printf_common+0x70>
    2154:	1a8d      	subs	r5, r1, r2
    2156:	43eb      	mvns	r3, r5
    2158:	17db      	asrs	r3, r3, #31
    215a:	401d      	ands	r5, r3
    215c:	68a3      	ldr	r3, [r4, #8]
    215e:	6922      	ldr	r2, [r4, #16]
    2160:	4293      	cmp	r3, r2
    2162:	dd01      	ble.n	2168 <_printf_common+0x7c>
    2164:	1a9b      	subs	r3, r3, r2
    2166:	18ed      	adds	r5, r5, r3
    2168:	2700      	movs	r7, #0
    216a:	42bd      	cmp	r5, r7
    216c:	d120      	bne.n	21b0 <_printf_common+0xc4>
    216e:	2000      	movs	r0, #0
    2170:	e010      	b.n	2194 <_printf_common+0xa8>
    2172:	3701      	adds	r7, #1
    2174:	68e3      	ldr	r3, [r4, #12]
    2176:	682a      	ldr	r2, [r5, #0]
    2178:	1a9b      	subs	r3, r3, r2
    217a:	429f      	cmp	r7, r3
    217c:	dad2      	bge.n	2124 <_printf_common+0x38>
    217e:	0022      	movs	r2, r4
    2180:	2301      	movs	r3, #1
    2182:	3219      	adds	r2, #25
    2184:	9901      	ldr	r1, [sp, #4]
    2186:	9800      	ldr	r0, [sp, #0]
    2188:	9e08      	ldr	r6, [sp, #32]
    218a:	47b0      	blx	r6
    218c:	1c43      	adds	r3, r0, #1
    218e:	d1f0      	bne.n	2172 <_printf_common+0x86>
    2190:	2001      	movs	r0, #1
    2192:	4240      	negs	r0, r0
    2194:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2196:	2030      	movs	r0, #48	; 0x30
    2198:	18e1      	adds	r1, r4, r3
    219a:	3143      	adds	r1, #67	; 0x43
    219c:	7008      	strb	r0, [r1, #0]
    219e:	0021      	movs	r1, r4
    21a0:	1c5a      	adds	r2, r3, #1
    21a2:	3145      	adds	r1, #69	; 0x45
    21a4:	7809      	ldrb	r1, [r1, #0]
    21a6:	18a2      	adds	r2, r4, r2
    21a8:	3243      	adds	r2, #67	; 0x43
    21aa:	3302      	adds	r3, #2
    21ac:	7011      	strb	r1, [r2, #0]
    21ae:	e7c1      	b.n	2134 <_printf_common+0x48>
    21b0:	0022      	movs	r2, r4
    21b2:	2301      	movs	r3, #1
    21b4:	321a      	adds	r2, #26
    21b6:	9901      	ldr	r1, [sp, #4]
    21b8:	9800      	ldr	r0, [sp, #0]
    21ba:	9e08      	ldr	r6, [sp, #32]
    21bc:	47b0      	blx	r6
    21be:	1c43      	adds	r3, r0, #1
    21c0:	d0e6      	beq.n	2190 <_printf_common+0xa4>
    21c2:	3701      	adds	r7, #1
    21c4:	e7d1      	b.n	216a <_printf_common+0x7e>
	...

000021c8 <_printf_i>:
    21c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ca:	b08b      	sub	sp, #44	; 0x2c
    21cc:	9206      	str	r2, [sp, #24]
    21ce:	000a      	movs	r2, r1
    21d0:	3243      	adds	r2, #67	; 0x43
    21d2:	9307      	str	r3, [sp, #28]
    21d4:	9005      	str	r0, [sp, #20]
    21d6:	9204      	str	r2, [sp, #16]
    21d8:	7e0a      	ldrb	r2, [r1, #24]
    21da:	000c      	movs	r4, r1
    21dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    21de:	2a6e      	cmp	r2, #110	; 0x6e
    21e0:	d100      	bne.n	21e4 <_printf_i+0x1c>
    21e2:	e08f      	b.n	2304 <_printf_i+0x13c>
    21e4:	d817      	bhi.n	2216 <_printf_i+0x4e>
    21e6:	2a63      	cmp	r2, #99	; 0x63
    21e8:	d02c      	beq.n	2244 <_printf_i+0x7c>
    21ea:	d808      	bhi.n	21fe <_printf_i+0x36>
    21ec:	2a00      	cmp	r2, #0
    21ee:	d100      	bne.n	21f2 <_printf_i+0x2a>
    21f0:	e099      	b.n	2326 <_printf_i+0x15e>
    21f2:	2a58      	cmp	r2, #88	; 0x58
    21f4:	d054      	beq.n	22a0 <_printf_i+0xd8>
    21f6:	0026      	movs	r6, r4
    21f8:	3642      	adds	r6, #66	; 0x42
    21fa:	7032      	strb	r2, [r6, #0]
    21fc:	e029      	b.n	2252 <_printf_i+0x8a>
    21fe:	2a64      	cmp	r2, #100	; 0x64
    2200:	d001      	beq.n	2206 <_printf_i+0x3e>
    2202:	2a69      	cmp	r2, #105	; 0x69
    2204:	d1f7      	bne.n	21f6 <_printf_i+0x2e>
    2206:	6821      	ldr	r1, [r4, #0]
    2208:	681a      	ldr	r2, [r3, #0]
    220a:	0608      	lsls	r0, r1, #24
    220c:	d523      	bpl.n	2256 <_printf_i+0x8e>
    220e:	1d11      	adds	r1, r2, #4
    2210:	6019      	str	r1, [r3, #0]
    2212:	6815      	ldr	r5, [r2, #0]
    2214:	e025      	b.n	2262 <_printf_i+0x9a>
    2216:	2a73      	cmp	r2, #115	; 0x73
    2218:	d100      	bne.n	221c <_printf_i+0x54>
    221a:	e088      	b.n	232e <_printf_i+0x166>
    221c:	d808      	bhi.n	2230 <_printf_i+0x68>
    221e:	2a6f      	cmp	r2, #111	; 0x6f
    2220:	d029      	beq.n	2276 <_printf_i+0xae>
    2222:	2a70      	cmp	r2, #112	; 0x70
    2224:	d1e7      	bne.n	21f6 <_printf_i+0x2e>
    2226:	2220      	movs	r2, #32
    2228:	6809      	ldr	r1, [r1, #0]
    222a:	430a      	orrs	r2, r1
    222c:	6022      	str	r2, [r4, #0]
    222e:	e003      	b.n	2238 <_printf_i+0x70>
    2230:	2a75      	cmp	r2, #117	; 0x75
    2232:	d020      	beq.n	2276 <_printf_i+0xae>
    2234:	2a78      	cmp	r2, #120	; 0x78
    2236:	d1de      	bne.n	21f6 <_printf_i+0x2e>
    2238:	0022      	movs	r2, r4
    223a:	2178      	movs	r1, #120	; 0x78
    223c:	3245      	adds	r2, #69	; 0x45
    223e:	7011      	strb	r1, [r2, #0]
    2240:	4a6c      	ldr	r2, [pc, #432]	; (23f4 <_printf_i+0x22c>)
    2242:	e030      	b.n	22a6 <_printf_i+0xde>
    2244:	000e      	movs	r6, r1
    2246:	681a      	ldr	r2, [r3, #0]
    2248:	3642      	adds	r6, #66	; 0x42
    224a:	1d11      	adds	r1, r2, #4
    224c:	6019      	str	r1, [r3, #0]
    224e:	6813      	ldr	r3, [r2, #0]
    2250:	7033      	strb	r3, [r6, #0]
    2252:	2301      	movs	r3, #1
    2254:	e079      	b.n	234a <_printf_i+0x182>
    2256:	0649      	lsls	r1, r1, #25
    2258:	d5d9      	bpl.n	220e <_printf_i+0x46>
    225a:	1d11      	adds	r1, r2, #4
    225c:	6019      	str	r1, [r3, #0]
    225e:	2300      	movs	r3, #0
    2260:	5ed5      	ldrsh	r5, [r2, r3]
    2262:	2d00      	cmp	r5, #0
    2264:	da03      	bge.n	226e <_printf_i+0xa6>
    2266:	232d      	movs	r3, #45	; 0x2d
    2268:	9a04      	ldr	r2, [sp, #16]
    226a:	426d      	negs	r5, r5
    226c:	7013      	strb	r3, [r2, #0]
    226e:	4b62      	ldr	r3, [pc, #392]	; (23f8 <_printf_i+0x230>)
    2270:	270a      	movs	r7, #10
    2272:	9303      	str	r3, [sp, #12]
    2274:	e02f      	b.n	22d6 <_printf_i+0x10e>
    2276:	6820      	ldr	r0, [r4, #0]
    2278:	6819      	ldr	r1, [r3, #0]
    227a:	0605      	lsls	r5, r0, #24
    227c:	d503      	bpl.n	2286 <_printf_i+0xbe>
    227e:	1d08      	adds	r0, r1, #4
    2280:	6018      	str	r0, [r3, #0]
    2282:	680d      	ldr	r5, [r1, #0]
    2284:	e005      	b.n	2292 <_printf_i+0xca>
    2286:	0640      	lsls	r0, r0, #25
    2288:	d5f9      	bpl.n	227e <_printf_i+0xb6>
    228a:	680d      	ldr	r5, [r1, #0]
    228c:	1d08      	adds	r0, r1, #4
    228e:	6018      	str	r0, [r3, #0]
    2290:	b2ad      	uxth	r5, r5
    2292:	4b59      	ldr	r3, [pc, #356]	; (23f8 <_printf_i+0x230>)
    2294:	2708      	movs	r7, #8
    2296:	9303      	str	r3, [sp, #12]
    2298:	2a6f      	cmp	r2, #111	; 0x6f
    229a:	d018      	beq.n	22ce <_printf_i+0x106>
    229c:	270a      	movs	r7, #10
    229e:	e016      	b.n	22ce <_printf_i+0x106>
    22a0:	3145      	adds	r1, #69	; 0x45
    22a2:	700a      	strb	r2, [r1, #0]
    22a4:	4a54      	ldr	r2, [pc, #336]	; (23f8 <_printf_i+0x230>)
    22a6:	9203      	str	r2, [sp, #12]
    22a8:	681a      	ldr	r2, [r3, #0]
    22aa:	6821      	ldr	r1, [r4, #0]
    22ac:	1d10      	adds	r0, r2, #4
    22ae:	6018      	str	r0, [r3, #0]
    22b0:	6815      	ldr	r5, [r2, #0]
    22b2:	0608      	lsls	r0, r1, #24
    22b4:	d522      	bpl.n	22fc <_printf_i+0x134>
    22b6:	07cb      	lsls	r3, r1, #31
    22b8:	d502      	bpl.n	22c0 <_printf_i+0xf8>
    22ba:	2320      	movs	r3, #32
    22bc:	4319      	orrs	r1, r3
    22be:	6021      	str	r1, [r4, #0]
    22c0:	2710      	movs	r7, #16
    22c2:	2d00      	cmp	r5, #0
    22c4:	d103      	bne.n	22ce <_printf_i+0x106>
    22c6:	2320      	movs	r3, #32
    22c8:	6822      	ldr	r2, [r4, #0]
    22ca:	439a      	bics	r2, r3
    22cc:	6022      	str	r2, [r4, #0]
    22ce:	0023      	movs	r3, r4
    22d0:	2200      	movs	r2, #0
    22d2:	3343      	adds	r3, #67	; 0x43
    22d4:	701a      	strb	r2, [r3, #0]
    22d6:	6863      	ldr	r3, [r4, #4]
    22d8:	60a3      	str	r3, [r4, #8]
    22da:	2b00      	cmp	r3, #0
    22dc:	db5c      	blt.n	2398 <_printf_i+0x1d0>
    22de:	2204      	movs	r2, #4
    22e0:	6821      	ldr	r1, [r4, #0]
    22e2:	4391      	bics	r1, r2
    22e4:	6021      	str	r1, [r4, #0]
    22e6:	2d00      	cmp	r5, #0
    22e8:	d158      	bne.n	239c <_printf_i+0x1d4>
    22ea:	9e04      	ldr	r6, [sp, #16]
    22ec:	2b00      	cmp	r3, #0
    22ee:	d064      	beq.n	23ba <_printf_i+0x1f2>
    22f0:	0026      	movs	r6, r4
    22f2:	9b03      	ldr	r3, [sp, #12]
    22f4:	3642      	adds	r6, #66	; 0x42
    22f6:	781b      	ldrb	r3, [r3, #0]
    22f8:	7033      	strb	r3, [r6, #0]
    22fa:	e05e      	b.n	23ba <_printf_i+0x1f2>
    22fc:	0648      	lsls	r0, r1, #25
    22fe:	d5da      	bpl.n	22b6 <_printf_i+0xee>
    2300:	b2ad      	uxth	r5, r5
    2302:	e7d8      	b.n	22b6 <_printf_i+0xee>
    2304:	6809      	ldr	r1, [r1, #0]
    2306:	681a      	ldr	r2, [r3, #0]
    2308:	0608      	lsls	r0, r1, #24
    230a:	d505      	bpl.n	2318 <_printf_i+0x150>
    230c:	1d11      	adds	r1, r2, #4
    230e:	6019      	str	r1, [r3, #0]
    2310:	6813      	ldr	r3, [r2, #0]
    2312:	6962      	ldr	r2, [r4, #20]
    2314:	601a      	str	r2, [r3, #0]
    2316:	e006      	b.n	2326 <_printf_i+0x15e>
    2318:	0649      	lsls	r1, r1, #25
    231a:	d5f7      	bpl.n	230c <_printf_i+0x144>
    231c:	1d11      	adds	r1, r2, #4
    231e:	6019      	str	r1, [r3, #0]
    2320:	6813      	ldr	r3, [r2, #0]
    2322:	8aa2      	ldrh	r2, [r4, #20]
    2324:	801a      	strh	r2, [r3, #0]
    2326:	2300      	movs	r3, #0
    2328:	9e04      	ldr	r6, [sp, #16]
    232a:	6123      	str	r3, [r4, #16]
    232c:	e054      	b.n	23d8 <_printf_i+0x210>
    232e:	681a      	ldr	r2, [r3, #0]
    2330:	1d11      	adds	r1, r2, #4
    2332:	6019      	str	r1, [r3, #0]
    2334:	6816      	ldr	r6, [r2, #0]
    2336:	2100      	movs	r1, #0
    2338:	6862      	ldr	r2, [r4, #4]
    233a:	0030      	movs	r0, r6
    233c:	f000 f91a 	bl	2574 <memchr>
    2340:	2800      	cmp	r0, #0
    2342:	d001      	beq.n	2348 <_printf_i+0x180>
    2344:	1b80      	subs	r0, r0, r6
    2346:	6060      	str	r0, [r4, #4]
    2348:	6863      	ldr	r3, [r4, #4]
    234a:	6123      	str	r3, [r4, #16]
    234c:	2300      	movs	r3, #0
    234e:	9a04      	ldr	r2, [sp, #16]
    2350:	7013      	strb	r3, [r2, #0]
    2352:	e041      	b.n	23d8 <_printf_i+0x210>
    2354:	6923      	ldr	r3, [r4, #16]
    2356:	0032      	movs	r2, r6
    2358:	9906      	ldr	r1, [sp, #24]
    235a:	9805      	ldr	r0, [sp, #20]
    235c:	9d07      	ldr	r5, [sp, #28]
    235e:	47a8      	blx	r5
    2360:	1c43      	adds	r3, r0, #1
    2362:	d043      	beq.n	23ec <_printf_i+0x224>
    2364:	6823      	ldr	r3, [r4, #0]
    2366:	2500      	movs	r5, #0
    2368:	079b      	lsls	r3, r3, #30
    236a:	d40f      	bmi.n	238c <_printf_i+0x1c4>
    236c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    236e:	68e0      	ldr	r0, [r4, #12]
    2370:	4298      	cmp	r0, r3
    2372:	da3d      	bge.n	23f0 <_printf_i+0x228>
    2374:	0018      	movs	r0, r3
    2376:	e03b      	b.n	23f0 <_printf_i+0x228>
    2378:	0022      	movs	r2, r4
    237a:	2301      	movs	r3, #1
    237c:	3219      	adds	r2, #25
    237e:	9906      	ldr	r1, [sp, #24]
    2380:	9805      	ldr	r0, [sp, #20]
    2382:	9e07      	ldr	r6, [sp, #28]
    2384:	47b0      	blx	r6
    2386:	1c43      	adds	r3, r0, #1
    2388:	d030      	beq.n	23ec <_printf_i+0x224>
    238a:	3501      	adds	r5, #1
    238c:	68e3      	ldr	r3, [r4, #12]
    238e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2390:	1a9b      	subs	r3, r3, r2
    2392:	429d      	cmp	r5, r3
    2394:	dbf0      	blt.n	2378 <_printf_i+0x1b0>
    2396:	e7e9      	b.n	236c <_printf_i+0x1a4>
    2398:	2d00      	cmp	r5, #0
    239a:	d0a9      	beq.n	22f0 <_printf_i+0x128>
    239c:	9e04      	ldr	r6, [sp, #16]
    239e:	0028      	movs	r0, r5
    23a0:	0039      	movs	r1, r7
    23a2:	f7ff f835 	bl	1410 <__aeabi_uidivmod>
    23a6:	9b03      	ldr	r3, [sp, #12]
    23a8:	3e01      	subs	r6, #1
    23aa:	5c5b      	ldrb	r3, [r3, r1]
    23ac:	0028      	movs	r0, r5
    23ae:	7033      	strb	r3, [r6, #0]
    23b0:	0039      	movs	r1, r7
    23b2:	f7fe ffa7 	bl	1304 <__udivsi3>
    23b6:	1e05      	subs	r5, r0, #0
    23b8:	d1f1      	bne.n	239e <_printf_i+0x1d6>
    23ba:	2f08      	cmp	r7, #8
    23bc:	d109      	bne.n	23d2 <_printf_i+0x20a>
    23be:	6823      	ldr	r3, [r4, #0]
    23c0:	07db      	lsls	r3, r3, #31
    23c2:	d506      	bpl.n	23d2 <_printf_i+0x20a>
    23c4:	6863      	ldr	r3, [r4, #4]
    23c6:	6922      	ldr	r2, [r4, #16]
    23c8:	4293      	cmp	r3, r2
    23ca:	dc02      	bgt.n	23d2 <_printf_i+0x20a>
    23cc:	2330      	movs	r3, #48	; 0x30
    23ce:	3e01      	subs	r6, #1
    23d0:	7033      	strb	r3, [r6, #0]
    23d2:	9b04      	ldr	r3, [sp, #16]
    23d4:	1b9b      	subs	r3, r3, r6
    23d6:	6123      	str	r3, [r4, #16]
    23d8:	9b07      	ldr	r3, [sp, #28]
    23da:	aa09      	add	r2, sp, #36	; 0x24
    23dc:	9300      	str	r3, [sp, #0]
    23de:	0021      	movs	r1, r4
    23e0:	9b06      	ldr	r3, [sp, #24]
    23e2:	9805      	ldr	r0, [sp, #20]
    23e4:	f7ff fe82 	bl	20ec <_printf_common>
    23e8:	1c43      	adds	r3, r0, #1
    23ea:	d1b3      	bne.n	2354 <_printf_i+0x18c>
    23ec:	2001      	movs	r0, #1
    23ee:	4240      	negs	r0, r0
    23f0:	b00b      	add	sp, #44	; 0x2c
    23f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23f4:	000027c6 	.word	0x000027c6
    23f8:	000027b5 	.word	0x000027b5

000023fc <_sbrk_r>:
    23fc:	2300      	movs	r3, #0
    23fe:	b570      	push	{r4, r5, r6, lr}
    2400:	4c06      	ldr	r4, [pc, #24]	; (241c <_sbrk_r+0x20>)
    2402:	0005      	movs	r5, r0
    2404:	0008      	movs	r0, r1
    2406:	6023      	str	r3, [r4, #0]
    2408:	f7fe fbb8 	bl	b7c <_sbrk>
    240c:	1c43      	adds	r3, r0, #1
    240e:	d103      	bne.n	2418 <_sbrk_r+0x1c>
    2410:	6823      	ldr	r3, [r4, #0]
    2412:	2b00      	cmp	r3, #0
    2414:	d000      	beq.n	2418 <_sbrk_r+0x1c>
    2416:	602b      	str	r3, [r5, #0]
    2418:	bd70      	pop	{r4, r5, r6, pc}
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	200001e4 	.word	0x200001e4

00002420 <__sread>:
    2420:	b570      	push	{r4, r5, r6, lr}
    2422:	000c      	movs	r4, r1
    2424:	250e      	movs	r5, #14
    2426:	5f49      	ldrsh	r1, [r1, r5]
    2428:	f000 f8b2 	bl	2590 <_read_r>
    242c:	2800      	cmp	r0, #0
    242e:	db03      	blt.n	2438 <__sread+0x18>
    2430:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2432:	181b      	adds	r3, r3, r0
    2434:	6563      	str	r3, [r4, #84]	; 0x54
    2436:	bd70      	pop	{r4, r5, r6, pc}
    2438:	89a3      	ldrh	r3, [r4, #12]
    243a:	4a02      	ldr	r2, [pc, #8]	; (2444 <__sread+0x24>)
    243c:	4013      	ands	r3, r2
    243e:	81a3      	strh	r3, [r4, #12]
    2440:	e7f9      	b.n	2436 <__sread+0x16>
    2442:	46c0      	nop			; (mov r8, r8)
    2444:	ffffefff 	.word	0xffffefff

00002448 <__swrite>:
    2448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    244a:	001f      	movs	r7, r3
    244c:	898b      	ldrh	r3, [r1, #12]
    244e:	0005      	movs	r5, r0
    2450:	000c      	movs	r4, r1
    2452:	0016      	movs	r6, r2
    2454:	05db      	lsls	r3, r3, #23
    2456:	d505      	bpl.n	2464 <__swrite+0x1c>
    2458:	230e      	movs	r3, #14
    245a:	5ec9      	ldrsh	r1, [r1, r3]
    245c:	2200      	movs	r2, #0
    245e:	2302      	movs	r3, #2
    2460:	f000 f874 	bl	254c <_lseek_r>
    2464:	89a3      	ldrh	r3, [r4, #12]
    2466:	4a05      	ldr	r2, [pc, #20]	; (247c <__swrite+0x34>)
    2468:	0028      	movs	r0, r5
    246a:	4013      	ands	r3, r2
    246c:	81a3      	strh	r3, [r4, #12]
    246e:	0032      	movs	r2, r6
    2470:	230e      	movs	r3, #14
    2472:	5ee1      	ldrsh	r1, [r4, r3]
    2474:	003b      	movs	r3, r7
    2476:	f000 f81f 	bl	24b8 <_write_r>
    247a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    247c:	ffffefff 	.word	0xffffefff

00002480 <__sseek>:
    2480:	b570      	push	{r4, r5, r6, lr}
    2482:	000c      	movs	r4, r1
    2484:	250e      	movs	r5, #14
    2486:	5f49      	ldrsh	r1, [r1, r5]
    2488:	f000 f860 	bl	254c <_lseek_r>
    248c:	89a3      	ldrh	r3, [r4, #12]
    248e:	1c42      	adds	r2, r0, #1
    2490:	d103      	bne.n	249a <__sseek+0x1a>
    2492:	4a05      	ldr	r2, [pc, #20]	; (24a8 <__sseek+0x28>)
    2494:	4013      	ands	r3, r2
    2496:	81a3      	strh	r3, [r4, #12]
    2498:	bd70      	pop	{r4, r5, r6, pc}
    249a:	2280      	movs	r2, #128	; 0x80
    249c:	0152      	lsls	r2, r2, #5
    249e:	4313      	orrs	r3, r2
    24a0:	81a3      	strh	r3, [r4, #12]
    24a2:	6560      	str	r0, [r4, #84]	; 0x54
    24a4:	e7f8      	b.n	2498 <__sseek+0x18>
    24a6:	46c0      	nop			; (mov r8, r8)
    24a8:	ffffefff 	.word	0xffffefff

000024ac <__sclose>:
    24ac:	b510      	push	{r4, lr}
    24ae:	230e      	movs	r3, #14
    24b0:	5ec9      	ldrsh	r1, [r1, r3]
    24b2:	f000 f815 	bl	24e0 <_close_r>
    24b6:	bd10      	pop	{r4, pc}

000024b8 <_write_r>:
    24b8:	b570      	push	{r4, r5, r6, lr}
    24ba:	0005      	movs	r5, r0
    24bc:	0008      	movs	r0, r1
    24be:	0011      	movs	r1, r2
    24c0:	2200      	movs	r2, #0
    24c2:	4c06      	ldr	r4, [pc, #24]	; (24dc <_write_r+0x24>)
    24c4:	6022      	str	r2, [r4, #0]
    24c6:	001a      	movs	r2, r3
    24c8:	f7fe febe 	bl	1248 <_write>
    24cc:	1c43      	adds	r3, r0, #1
    24ce:	d103      	bne.n	24d8 <_write_r+0x20>
    24d0:	6823      	ldr	r3, [r4, #0]
    24d2:	2b00      	cmp	r3, #0
    24d4:	d000      	beq.n	24d8 <_write_r+0x20>
    24d6:	602b      	str	r3, [r5, #0]
    24d8:	bd70      	pop	{r4, r5, r6, pc}
    24da:	46c0      	nop			; (mov r8, r8)
    24dc:	200001e4 	.word	0x200001e4

000024e0 <_close_r>:
    24e0:	2300      	movs	r3, #0
    24e2:	b570      	push	{r4, r5, r6, lr}
    24e4:	4c06      	ldr	r4, [pc, #24]	; (2500 <_close_r+0x20>)
    24e6:	0005      	movs	r5, r0
    24e8:	0008      	movs	r0, r1
    24ea:	6023      	str	r3, [r4, #0]
    24ec:	f7fe fb58 	bl	ba0 <_close>
    24f0:	1c43      	adds	r3, r0, #1
    24f2:	d103      	bne.n	24fc <_close_r+0x1c>
    24f4:	6823      	ldr	r3, [r4, #0]
    24f6:	2b00      	cmp	r3, #0
    24f8:	d000      	beq.n	24fc <_close_r+0x1c>
    24fa:	602b      	str	r3, [r5, #0]
    24fc:	bd70      	pop	{r4, r5, r6, pc}
    24fe:	46c0      	nop			; (mov r8, r8)
    2500:	200001e4 	.word	0x200001e4

00002504 <_fstat_r>:
    2504:	2300      	movs	r3, #0
    2506:	b570      	push	{r4, r5, r6, lr}
    2508:	4c06      	ldr	r4, [pc, #24]	; (2524 <_fstat_r+0x20>)
    250a:	0005      	movs	r5, r0
    250c:	0008      	movs	r0, r1
    250e:	0011      	movs	r1, r2
    2510:	6023      	str	r3, [r4, #0]
    2512:	f7fe fb48 	bl	ba6 <_fstat>
    2516:	1c43      	adds	r3, r0, #1
    2518:	d103      	bne.n	2522 <_fstat_r+0x1e>
    251a:	6823      	ldr	r3, [r4, #0]
    251c:	2b00      	cmp	r3, #0
    251e:	d000      	beq.n	2522 <_fstat_r+0x1e>
    2520:	602b      	str	r3, [r5, #0]
    2522:	bd70      	pop	{r4, r5, r6, pc}
    2524:	200001e4 	.word	0x200001e4

00002528 <_isatty_r>:
    2528:	2300      	movs	r3, #0
    252a:	b570      	push	{r4, r5, r6, lr}
    252c:	4c06      	ldr	r4, [pc, #24]	; (2548 <_isatty_r+0x20>)
    252e:	0005      	movs	r5, r0
    2530:	0008      	movs	r0, r1
    2532:	6023      	str	r3, [r4, #0]
    2534:	f7fe fb3c 	bl	bb0 <_isatty>
    2538:	1c43      	adds	r3, r0, #1
    253a:	d103      	bne.n	2544 <_isatty_r+0x1c>
    253c:	6823      	ldr	r3, [r4, #0]
    253e:	2b00      	cmp	r3, #0
    2540:	d000      	beq.n	2544 <_isatty_r+0x1c>
    2542:	602b      	str	r3, [r5, #0]
    2544:	bd70      	pop	{r4, r5, r6, pc}
    2546:	46c0      	nop			; (mov r8, r8)
    2548:	200001e4 	.word	0x200001e4

0000254c <_lseek_r>:
    254c:	b570      	push	{r4, r5, r6, lr}
    254e:	0005      	movs	r5, r0
    2550:	0008      	movs	r0, r1
    2552:	0011      	movs	r1, r2
    2554:	2200      	movs	r2, #0
    2556:	4c06      	ldr	r4, [pc, #24]	; (2570 <_lseek_r+0x24>)
    2558:	6022      	str	r2, [r4, #0]
    255a:	001a      	movs	r2, r3
    255c:	f7fe fb2a 	bl	bb4 <_lseek>
    2560:	1c43      	adds	r3, r0, #1
    2562:	d103      	bne.n	256c <_lseek_r+0x20>
    2564:	6823      	ldr	r3, [r4, #0]
    2566:	2b00      	cmp	r3, #0
    2568:	d000      	beq.n	256c <_lseek_r+0x20>
    256a:	602b      	str	r3, [r5, #0]
    256c:	bd70      	pop	{r4, r5, r6, pc}
    256e:	46c0      	nop			; (mov r8, r8)
    2570:	200001e4 	.word	0x200001e4

00002574 <memchr>:
    2574:	b2c9      	uxtb	r1, r1
    2576:	1882      	adds	r2, r0, r2
    2578:	4290      	cmp	r0, r2
    257a:	d101      	bne.n	2580 <memchr+0xc>
    257c:	2000      	movs	r0, #0
    257e:	4770      	bx	lr
    2580:	7803      	ldrb	r3, [r0, #0]
    2582:	428b      	cmp	r3, r1
    2584:	d0fb      	beq.n	257e <memchr+0xa>
    2586:	3001      	adds	r0, #1
    2588:	e7f6      	b.n	2578 <memchr+0x4>

0000258a <__malloc_lock>:
    258a:	4770      	bx	lr

0000258c <__malloc_unlock>:
    258c:	4770      	bx	lr
	...

00002590 <_read_r>:
    2590:	b570      	push	{r4, r5, r6, lr}
    2592:	0005      	movs	r5, r0
    2594:	0008      	movs	r0, r1
    2596:	0011      	movs	r1, r2
    2598:	2200      	movs	r2, #0
    259a:	4c06      	ldr	r4, [pc, #24]	; (25b4 <_read_r+0x24>)
    259c:	6022      	str	r2, [r4, #0]
    259e:	001a      	movs	r2, r3
    25a0:	f7fe fe3e 	bl	1220 <_read>
    25a4:	1c43      	adds	r3, r0, #1
    25a6:	d103      	bne.n	25b0 <_read_r+0x20>
    25a8:	6823      	ldr	r3, [r4, #0]
    25aa:	2b00      	cmp	r3, #0
    25ac:	d000      	beq.n	25b0 <_read_r+0x20>
    25ae:	602b      	str	r3, [r5, #0]
    25b0:	bd70      	pop	{r4, r5, r6, pc}
    25b2:	46c0      	nop			; (mov r8, r8)
    25b4:	200001e4 	.word	0x200001e4
    25b8:	656c6449 	.word	0x656c6449
    25bc:	00000000 	.word	0x00000000
    25c0:	20230a0a 	.word	0x20230a0a
    25c4:	3d3d3d3d 	.word	0x3d3d3d3d
    25c8:	3d3d3d3d 	.word	0x3d3d3d3d
    25cc:	003d3d3d 	.word	0x003d3d3d
    25d0:	2e302e31 	.word	0x2e302e31
    25d4:	00000030 	.word	0x00000030
    25d8:	6c622023 	.word	0x6c622023
    25dc:	796b6e69 	.word	0x796b6e69
    25e0:	3a732520 	.word	0x3a732520
    25e4:	65657320 	.word	0x65657320
    25e8:	74746820 	.word	0x74746820
    25ec:	2f3a7370 	.word	0x2f3a7370
    25f0:	7469672f 	.word	0x7469672f
    25f4:	2e627568 	.word	0x2e627568
    25f8:	2f6d6f63 	.word	0x2f6d6f63
    25fc:	6f706472 	.word	0x6f706472
    2600:	6d2f726f 	.word	0x6d2f726f
    2604:	62696c75 	.word	0x62696c75
    2608:	0000000a 	.word	0x0000000a
    260c:	74747562 	.word	0x74747562
    2610:	70206e6f 	.word	0x70206e6f
    2614:	73736572 	.word	0x73736572
    2618:	61206465 	.word	0x61206465
    261c:	6c252074 	.word	0x6c252074
    2620:	000a0d75 	.word	0x000a0d75
    2624:	74747542 	.word	0x74747542
    2628:	49206e6f 	.word	0x49206e6f
    262c:	7265746e 	.word	0x7265746e
    2630:	74707572 	.word	0x74707572
    2634:	00000000 	.word	0x00000000
    2638:	682f2e2e 	.word	0x682f2e2e
    263c:	732f6c61 	.word	0x732f6c61
    2640:	682f6372 	.word	0x682f6372
    2644:	635f6c61 	.word	0x635f6c61
    2648:	6e656c61 	.word	0x6e656c61
    264c:	2e726164 	.word	0x2e726164
    2650:	00000063 	.word	0x00000063
    2654:	682f2e2e 	.word	0x682f2e2e
    2658:	732f6c61 	.word	0x732f6c61
    265c:	682f6372 	.word	0x682f6372
    2660:	695f6c61 	.word	0x695f6c61
    2664:	00632e6f 	.word	0x00632e6f
    2668:	682f2e2e 	.word	0x682f2e2e
    266c:	732f6c61 	.word	0x732f6c61
    2670:	682f6372 	.word	0x682f6372
    2674:	755f6c61 	.word	0x755f6c61
    2678:	74726173 	.word	0x74726173
    267c:	6e79735f 	.word	0x6e79735f
    2680:	00632e63 	.word	0x00632e63
    2684:	682f2e2e 	.word	0x682f2e2e
    2688:	752f6c61 	.word	0x752f6c61
    268c:	736c6974 	.word	0x736c6974
    2690:	6372732f 	.word	0x6372732f
    2694:	6974752f 	.word	0x6974752f
    2698:	655f736c 	.word	0x655f736c
    269c:	746e6576 	.word	0x746e6576
    26a0:	0000632e 	.word	0x0000632e
    26a4:	682f2e2e 	.word	0x682f2e2e
    26a8:	752f6c61 	.word	0x752f6c61
    26ac:	736c6974 	.word	0x736c6974
    26b0:	6372732f 	.word	0x6372732f
    26b4:	6974752f 	.word	0x6974752f
    26b8:	6c5f736c 	.word	0x6c5f736c
    26bc:	2e747369 	.word	0x2e747369
    26c0:	00000063 	.word	0x00000063

000026c4 <_map>:
    26c4:	0000000f 0000000f 682f2e2e 652f6c70     ........../hpl/e
    26d4:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    26e4:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    26f4:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
    2704:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    2714:	0000632e 0044454c 732f2e2e 7065656c     .c..LED.../sleep
    2724:	6e616d5f 72656761 656c732f 6d5f7065     _manager/sleep_m
    2734:	67616e61 632e7265 00000000              anager.c....

00002740 <_global_impure_ptr>:
    2740:	20000004                                ... 

00002744 <__sf_fake_stderr>:
	...

00002764 <__sf_fake_stdin>:
	...

00002784 <__sf_fake_stdout>:
	...
    27a4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    27b4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    27c4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    27d4:	00006665                                ef..

000027d8 <_init>:
    27d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27da:	46c0      	nop			; (mov r8, r8)
    27dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    27de:	bc08      	pop	{r3}
    27e0:	469e      	mov	lr, r3
    27e2:	4770      	bx	lr

000027e4 <__init_array_start>:
    27e4:	000000dd 	.word	0x000000dd

000027e8 <_fini>:
    27e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27ea:	46c0      	nop			; (mov r8, r8)
    27ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    27ee:	bc08      	pop	{r3}
    27f0:	469e      	mov	lr, r3
    27f2:	4770      	bx	lr

000027f4 <__fini_array_start>:
    27f4:	000000b5 	.word	0x000000b5
