
mu_task_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000345c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  0000345c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000260  20000064  000034c0  00020064  2**2
                  ALLOC
  3 .stack        00002004  200002c4  00003720  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000328f6  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004abc  00000000  00000000  000529db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000eebb  00000000  00000000  00057497  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000eb0  00000000  00000000  00066352  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001478  00000000  00000000  00067202  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001ad8a  00000000  00000000  0006867a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013b9a  00000000  00000000  00083404  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008baa0  00000000  00000000  00096f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002b68  00000000  00000000  00122a40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 22 00 20 51 05 00 00 4d 05 00 00 4d 05 00 00     .". Q...M...M...
	...
      2c:	4d 05 00 00 00 00 00 00 00 00 00 00 4d 05 00 00     M...........M...
      3c:	4d 05 00 00 4d 05 00 00 4d 05 00 00 4d 05 00 00     M...M...M...M...
      4c:	d1 10 00 00 01 0e 00 00 4d 05 00 00 4d 05 00 00     ........M...M...
      5c:	4d 05 00 00 4d 05 00 00 4d 05 00 00 4d 05 00 00     M...M...M...M...
      6c:	4d 05 00 00 c1 12 00 00 4d 05 00 00 4d 05 00 00     M.......M...M...
      7c:	4d 05 00 00 4d 05 00 00 4d 05 00 00 4d 05 00 00     M...M...M...M...
      8c:	4d 05 00 00 4d 05 00 00 4d 05 00 00 4d 05 00 00     M...M...M...M...
      9c:	4d 05 00 00 4d 05 00 00 4d 05 00 00 4d 05 00 00     M...M...M...M...
      ac:	4d 05 00 00 00 00 00 00                             M.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	0000345c 	.word	0x0000345c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	0000345c 	.word	0x0000345c
     10c:	0000345c 	.word	0x0000345c
     110:	00000000 	.word	0x00000000

00000114 <default_idle_fn>:
}

static void *default_idle_fn(void *self, void *arg) {
  // the default idle task doesn't do much...
  return self;
}
     114:	4770      	bx	lr
	...

00000118 <sched_task_at>:
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
  }
  sched->event_queue_count -= 1;
}

static mu_sched_err_t sched_task_at(mu_sched_t *sched, mu_task_t *task, mu_time_t time) {
     118:	b5f0      	push	{r4, r5, r6, r7, lr}
     11a:	b083      	sub	sp, #12
     11c:	0004      	movs	r4, r0
     11e:	9101      	str	r1, [sp, #4]
     120:	9200      	str	r2, [sp, #0]
  mu_sched_event_t *event;
  size_t index;

  if (sched->event_queue_count >= sched->event_queue_capacity) {
     122:	6885      	ldr	r5, [r0, #8]
    return MU_SCHED_ERR_FULL;
     124:	2002      	movs	r0, #2
  if (sched->event_queue_count >= sched->event_queue_capacity) {
     126:	6863      	ldr	r3, [r4, #4]
     128:	429d      	cmp	r5, r3
     12a:	d301      	bcc.n	130 <sched_task_at+0x18>
  // fill in the event
  event = &sched->event_queue[index];
  event_init(event, task, time);
  sched->event_queue_count += 1;
  return MU_SCHED_ERR_NONE;
}
     12c:	b003      	add	sp, #12
     12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (sched->event_queue_count == 0) {
     130:	2d00      	cmp	r5, #0
     132:	d10c      	bne.n	14e <sched_task_at+0x36>
  event = &sched->event_queue[index];
     134:	00ed      	lsls	r5, r5, #3
     136:	6823      	ldr	r3, [r4, #0]
     138:	469c      	mov	ip, r3
     13a:	4465      	add	r5, ip
  event->task = task;
     13c:	9b01      	ldr	r3, [sp, #4]
     13e:	606b      	str	r3, [r5, #4]
  event->time = time;
     140:	9b00      	ldr	r3, [sp, #0]
     142:	602b      	str	r3, [r5, #0]
  sched->event_queue_count += 1;
     144:	68a3      	ldr	r3, [r4, #8]
     146:	3301      	adds	r3, #1
     148:	60a3      	str	r3, [r4, #8]
  return MU_SCHED_ERR_NONE;
     14a:	2000      	movs	r0, #0
     14c:	e7ee      	b.n	12c <sched_task_at+0x14>
#else
// linear search for insertion point
static size_t find_insertion_index(mu_sched_t *sched, mu_time_t time) {
  mu_sched_event_t *events = sched->event_queue;

  for (size_t i = sched->event_queue_count - 1; i >= 0; i--) {
     14e:	1e6f      	subs	r7, r5, #1
     150:	4b12      	ldr	r3, [pc, #72]	; (19c <sched_task_at+0x84>)
     152:	469c      	mov	ip, r3
     154:	4465      	add	r5, ip
     156:	00ed      	lsls	r5, r5, #3
     158:	6823      	ldr	r3, [r4, #0]
     15a:	469c      	mov	ip, r3
     15c:	4465      	add	r5, ip
    if (mu_time_precedes(time, events[i].time)) {
     15e:	4e10      	ldr	r6, [pc, #64]	; (1a0 <sched_task_at+0x88>)
     160:	6829      	ldr	r1, [r5, #0]
     162:	9800      	ldr	r0, [sp, #0]
     164:	47b0      	blx	r6
     166:	2800      	cmp	r0, #0
     168:	d104      	bne.n	174 <sched_task_at+0x5c>
     16a:	3d08      	subs	r5, #8
      return i+1;    // precedes incumbent
    } else if (i == 0) {
     16c:	2f00      	cmp	r7, #0
     16e:	d012      	beq.n	196 <sched_task_at+0x7e>
  for (size_t i = sched->event_queue_count - 1; i >= 0; i--) {
     170:	3f01      	subs	r7, #1
     172:	e7f5      	b.n	160 <sched_task_at+0x48>
      return i+1;    // precedes incumbent
     174:	1c7d      	adds	r5, r7, #1
  int to_move = sched->event_queue_count - index;
     176:	68a3      	ldr	r3, [r4, #8]
     178:	1b5a      	subs	r2, r3, r5
  if (to_move > 0) {
     17a:	2a00      	cmp	r2, #0
     17c:	ddda      	ble.n	134 <sched_task_at+0x1c>
    mu_sched_event_t *src = &sched->event_queue[index];
     17e:	00eb      	lsls	r3, r5, #3
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     180:	00d2      	lsls	r2, r2, #3
    mu_sched_event_t *src = &sched->event_queue[index];
     182:	6821      	ldr	r1, [r4, #0]
     184:	18c9      	adds	r1, r1, r3
    mu_sched_event_t *dst = &sched->event_queue[index + 1];
     186:	3308      	adds	r3, #8
     188:	0018      	movs	r0, r3
     18a:	6823      	ldr	r3, [r4, #0]
     18c:	469c      	mov	ip, r3
     18e:	4460      	add	r0, ip
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     190:	4b04      	ldr	r3, [pc, #16]	; (1a4 <sched_task_at+0x8c>)
     192:	4798      	blx	r3
     194:	e7ce      	b.n	134 <sched_task_at+0x1c>
      return 0;      // follows all
     196:	003d      	movs	r5, r7
     198:	e7ed      	b.n	176 <sched_task_at+0x5e>
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	1fffffff 	.word	0x1fffffff
     1a0:	00000509 	.word	0x00000509
     1a4:	0000202f 	.word	0x0000202f

000001a8 <mu_sched_reset>:
mu_sched_t *mu_sched_reset(mu_sched_t *sched) {
     1a8:	b570      	push	{r4, r5, r6, lr}
     1aa:	0004      	movs	r4, r0
  sched->event_queue_count = 0;
     1ac:	2500      	movs	r5, #0
     1ae:	6085      	str	r5, [r0, #8]
  mu_spscq_reset(sched->isr_queue);
     1b0:	68c0      	ldr	r0, [r0, #12]
     1b2:	4b02      	ldr	r3, [pc, #8]	; (1bc <mu_sched_reset+0x14>)
     1b4:	4798      	blx	r3
  sched->current_event.task = NULL;
     1b6:	61e5      	str	r5, [r4, #28]
}
     1b8:	0020      	movs	r0, r4
     1ba:	bd70      	pop	{r4, r5, r6, pc}
     1bc:	0000041f 	.word	0x0000041f

000001c0 <mu_sched_init>:
                          mu_spscq_t *isr_queue) {
     1c0:	b570      	push	{r4, r5, r6, lr}
     1c2:	0004      	movs	r4, r0
  sched->event_queue = event_queue;
     1c4:	6001      	str	r1, [r0, #0]
  sched->event_queue_capacity = event_queue_capacity;
     1c6:	6042      	str	r2, [r0, #4]
  sched->isr_queue = isr_queue;
     1c8:	60c3      	str	r3, [r0, #12]
  sched->clock_fn = mu_time_now;
     1ca:	4b06      	ldr	r3, [pc, #24]	; (1e4 <mu_sched_init+0x24>)
     1cc:	6103      	str	r3, [r0, #16]
  sched->idle_task = &s_default_idle_task;
     1ce:	4806      	ldr	r0, [pc, #24]	; (1e8 <mu_sched_init+0x28>)
     1d0:	6160      	str	r0, [r4, #20]
  mu_task_init(&s_default_idle_task, default_idle_fn, NULL, "Idle");
     1d2:	4b06      	ldr	r3, [pc, #24]	; (1ec <mu_sched_init+0x2c>)
     1d4:	2200      	movs	r2, #0
     1d6:	4906      	ldr	r1, [pc, #24]	; (1f0 <mu_sched_init+0x30>)
     1d8:	4d06      	ldr	r5, [pc, #24]	; (1f4 <mu_sched_init+0x34>)
     1da:	47a8      	blx	r5
  return mu_sched_reset(sched);
     1dc:	0020      	movs	r0, r4
     1de:	4b06      	ldr	r3, [pc, #24]	; (1f8 <mu_sched_init+0x38>)
     1e0:	4798      	blx	r3
}
     1e2:	bd70      	pop	{r4, r5, r6, pc}
     1e4:	00000535 	.word	0x00000535
     1e8:	20000080 	.word	0x20000080
     1ec:	00002f9c 	.word	0x00002f9c
     1f0:	00000115 	.word	0x00000115
     1f4:	00000497 	.word	0x00000497
     1f8:	000001a9 	.word	0x000001a9

000001fc <mu_sched_set_idle_task>:
  sched->idle_task = task;
     1fc:	6141      	str	r1, [r0, #20]
}
     1fe:	4770      	bx	lr

00000200 <mu_sched_get_current_time>:
mu_time_t mu_sched_get_current_time(mu_sched_t *sched) {
     200:	b510      	push	{r4, lr}
  return sched->clock_fn();
     202:	6903      	ldr	r3, [r0, #16]
     204:	4798      	blx	r3
}
     206:	bd10      	pop	{r4, pc}

00000208 <mu_sched_get_next_event>:
  if (sched->event_queue_count == 0) {
     208:	6883      	ldr	r3, [r0, #8]
     20a:	2b00      	cmp	r3, #0
     20c:	d006      	beq.n	21c <mu_sched_get_next_event+0x14>
    return &sched->event_queue[sched->event_queue_count - 1];
     20e:	4a04      	ldr	r2, [pc, #16]	; (220 <mu_sched_get_next_event+0x18>)
     210:	4694      	mov	ip, r2
     212:	4463      	add	r3, ip
     214:	00db      	lsls	r3, r3, #3
     216:	6800      	ldr	r0, [r0, #0]
     218:	18c0      	adds	r0, r0, r3
}
     21a:	4770      	bx	lr
    return NULL;
     21c:	2000      	movs	r0, #0
     21e:	e7fc      	b.n	21a <mu_sched_get_next_event+0x12>
     220:	1fffffff 	.word	0x1fffffff

00000224 <mu_sched_step>:
mu_sched_err_t mu_sched_step(mu_sched_t *sched) {
     224:	b5f0      	push	{r4, r5, r6, r7, lr}
     226:	b083      	sub	sp, #12
     228:	0004      	movs	r4, r0
  mu_time_t now = mu_sched_get_current_time(sched);
     22a:	4b1a      	ldr	r3, [pc, #104]	; (294 <mu_sched_step+0x70>)
     22c:	4798      	blx	r3
     22e:	0005      	movs	r5, r0
  while (mu_spscq_get(sched->isr_queue, (void **)&task) != MU_CQUEUE_ERR_EMPTY) {
     230:	4e19      	ldr	r6, [pc, #100]	; (298 <mu_sched_step+0x74>)
  return sched_task_at(sched, task, at);
     232:	4f1a      	ldr	r7, [pc, #104]	; (29c <mu_sched_step+0x78>)
  while (mu_spscq_get(sched->isr_queue, (void **)&task) != MU_CQUEUE_ERR_EMPTY) {
     234:	a901      	add	r1, sp, #4
     236:	68e0      	ldr	r0, [r4, #12]
     238:	47b0      	blx	r6
     23a:	2801      	cmp	r0, #1
     23c:	d007      	beq.n	24e <mu_sched_step+0x2a>
  return sched_task_at(sched, task, at);
     23e:	002a      	movs	r2, r5
     240:	9901      	ldr	r1, [sp, #4]
     242:	0020      	movs	r0, r4
     244:	47b8      	blx	r7
    if (err != MU_SCHED_ERR_NONE) {
     246:	2800      	cmp	r0, #0
     248:	d0f4      	beq.n	234 <mu_sched_step+0x10>
}
     24a:	b003      	add	sp, #12
     24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  event = mu_sched_get_next_event(sched);
     24e:	0020      	movs	r0, r4
     250:	4b13      	ldr	r3, [pc, #76]	; (2a0 <mu_sched_step+0x7c>)
     252:	4798      	blx	r3
     254:	1e06      	subs	r6, r0, #0
  if (event != NULL) {
     256:	d005      	beq.n	264 <mu_sched_step+0x40>
    if (!mu_time_follows(mu_sched_event_get_time(event), now)) {
     258:	0029      	movs	r1, r5
     25a:	6800      	ldr	r0, [r0, #0]
     25c:	4b11      	ldr	r3, [pc, #68]	; (2a4 <mu_sched_step+0x80>)
     25e:	4798      	blx	r3
     260:	2800      	cmp	r0, #0
     262:	d005      	beq.n	270 <mu_sched_step+0x4c>
  mu_task_call(sched->idle_task, sched);
     264:	6960      	ldr	r0, [r4, #20]
     266:	0021      	movs	r1, r4
     268:	4b0f      	ldr	r3, [pc, #60]	; (2a8 <mu_sched_step+0x84>)
     26a:	4798      	blx	r3
  return MU_SCHED_ERR_NONE;
     26c:	2000      	movs	r0, #0
     26e:	e7ec      	b.n	24a <mu_sched_step+0x26>
      memcpy(&(sched->current_event), event, sizeof(mu_sched_event_t));
     270:	0020      	movs	r0, r4
     272:	3018      	adds	r0, #24
     274:	2208      	movs	r2, #8
     276:	0031      	movs	r1, r6
     278:	4b0c      	ldr	r3, [pc, #48]	; (2ac <mu_sched_step+0x88>)
     27a:	4798      	blx	r3
  return &sched->event_queue[--sched->event_queue_count];
     27c:	68a3      	ldr	r3, [r4, #8]
     27e:	3b01      	subs	r3, #1
     280:	60a3      	str	r3, [r4, #8]
      mu_task_call(sched->current_event.task, sched);
     282:	0021      	movs	r1, r4
     284:	69e0      	ldr	r0, [r4, #28]
     286:	4b08      	ldr	r3, [pc, #32]	; (2a8 <mu_sched_step+0x84>)
     288:	4798      	blx	r3
      sched->current_event.task = NULL;
     28a:	2300      	movs	r3, #0
     28c:	61e3      	str	r3, [r4, #28]
      return MU_SCHED_ERR_NONE;
     28e:	2000      	movs	r0, #0
     290:	e7db      	b.n	24a <mu_sched_step+0x26>
     292:	46c0      	nop			; (mov r8, r8)
     294:	00000201 	.word	0x00000201
     298:	0000046d 	.word	0x0000046d
     29c:	00000119 	.word	0x00000119
     2a0:	00000209 	.word	0x00000209
     2a4:	00000515 	.word	0x00000515
     2a8:	000004ad 	.word	0x000004ad
     2ac:	0000201d 	.word	0x0000201d

000002b0 <mu_sched_remove_task>:
mu_sched_err_t mu_sched_remove_task(mu_sched_t *sched, mu_task_t *task) {
     2b0:	b570      	push	{r4, r5, r6, lr}
     2b2:	0005      	movs	r5, r0
  for (int i = sched->event_queue_count - 1; i >= 0; i--) {
     2b4:	6883      	ldr	r3, [r0, #8]
     2b6:	1e5a      	subs	r2, r3, #1
     2b8:	1e14      	subs	r4, r2, #0
     2ba:	db1f      	blt.n	2fc <mu_sched_remove_task+0x4c>
    mu_sched_event_t *event = &sched->event_queue[i];
     2bc:	6800      	ldr	r0, [r0, #0]
     2be:	00d3      	lsls	r3, r2, #3
    if (event->task == task)
     2c0:	18c6      	adds	r6, r0, r3
     2c2:	6876      	ldr	r6, [r6, #4]
     2c4:	42b1      	cmp	r1, r6
     2c6:	d007      	beq.n	2d8 <mu_sched_remove_task+0x28>
     2c8:	3b04      	subs	r3, #4
     2ca:	18c3      	adds	r3, r0, r3
  for (int i = sched->event_queue_count - 1; i >= 0; i--) {
     2cc:	3c01      	subs	r4, #1
     2ce:	d413      	bmi.n	2f8 <mu_sched_remove_task+0x48>
     2d0:	3b08      	subs	r3, #8
    if (event->task == task)
     2d2:	689e      	ldr	r6, [r3, #8]
     2d4:	42b1      	cmp	r1, r6
     2d6:	d1f9      	bne.n	2cc <mu_sched_remove_task+0x1c>
  int to_move = sched->event_queue_count - index - 1;
     2d8:	1b12      	subs	r2, r2, r4
  if (to_move > 0) {
     2da:	2a00      	cmp	r2, #0
     2dc:	dd07      	ble.n	2ee <mu_sched_remove_task+0x3e>
    mu_sched_event_t *dst = &sched->event_queue[index];
     2de:	00e4      	lsls	r4, r4, #3
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     2e0:	00d2      	lsls	r2, r2, #3
    mu_sched_event_t *src = &sched->event_queue[index + 1];
     2e2:	0021      	movs	r1, r4
     2e4:	3108      	adds	r1, #8
     2e6:	1841      	adds	r1, r0, r1
    mu_sched_event_t *dst = &sched->event_queue[index];
     2e8:	1900      	adds	r0, r0, r4
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     2ea:	4b05      	ldr	r3, [pc, #20]	; (300 <mu_sched_remove_task+0x50>)
     2ec:	4798      	blx	r3
  sched->event_queue_count -= 1;
     2ee:	68ab      	ldr	r3, [r5, #8]
     2f0:	3b01      	subs	r3, #1
     2f2:	60ab      	str	r3, [r5, #8]
    return MU_SCHED_ERR_NONE;
     2f4:	2000      	movs	r0, #0
     2f6:	e000      	b.n	2fa <mu_sched_remove_task+0x4a>
    return MU_SCHED_ERR_NOT_FOUND;
     2f8:	2003      	movs	r0, #3
}
     2fa:	bd70      	pop	{r4, r5, r6, pc}
    return MU_SCHED_ERR_NOT_FOUND;
     2fc:	2003      	movs	r0, #3
     2fe:	e7fc      	b.n	2fa <mu_sched_remove_task+0x4a>
     300:	0000202f 	.word	0x0000202f

00000304 <mu_sched_task_now>:
mu_sched_err_t mu_sched_task_now(mu_sched_t *sched, mu_task_t *task) {
     304:	b570      	push	{r4, r5, r6, lr}
     306:	0004      	movs	r4, r0
     308:	000d      	movs	r5, r1
  return sched_task_at(sched, task, mu_sched_get_current_time(sched));
     30a:	4b04      	ldr	r3, [pc, #16]	; (31c <mu_sched_task_now+0x18>)
     30c:	4798      	blx	r3
     30e:	0002      	movs	r2, r0
     310:	0029      	movs	r1, r5
     312:	0020      	movs	r0, r4
     314:	4b02      	ldr	r3, [pc, #8]	; (320 <mu_sched_task_now+0x1c>)
     316:	4798      	blx	r3
}
     318:	bd70      	pop	{r4, r5, r6, pc}
     31a:	46c0      	nop			; (mov r8, r8)
     31c:	00000201 	.word	0x00000201
     320:	00000119 	.word	0x00000119

00000324 <mu_sched_reschedule_in>:
mu_sched_err_t mu_sched_reschedule_in(mu_sched_t *sched, mu_time_dt in) {
     324:	b570      	push	{r4, r5, r6, lr}
     326:	0004      	movs	r4, r0
  if (sched->current_event.task == NULL) {
     328:	69c3      	ldr	r3, [r0, #28]
     32a:	2b00      	cmp	r3, #0
     32c:	d00d      	beq.n	34a <mu_sched_reschedule_in+0x26>
    return MU_SCHED_ERR_NOT_FOUND;
     32e:	2003      	movs	r0, #3
  if (!event) {
     330:	0023      	movs	r3, r4
     332:	3318      	adds	r3, #24
     334:	d008      	beq.n	348 <mu_sched_reschedule_in+0x24>
  mu_task_t *task = event->task;
     336:	69e5      	ldr	r5, [r4, #28]
  return sched_task_at(sched, task, mu_time_offset(time, in));
     338:	69a0      	ldr	r0, [r4, #24]
     33a:	4b05      	ldr	r3, [pc, #20]	; (350 <mu_sched_reschedule_in+0x2c>)
     33c:	4798      	blx	r3
     33e:	0002      	movs	r2, r0
     340:	0029      	movs	r1, r5
     342:	0020      	movs	r0, r4
     344:	4b03      	ldr	r3, [pc, #12]	; (354 <mu_sched_reschedule_in+0x30>)
     346:	4798      	blx	r3
}
     348:	bd70      	pop	{r4, r5, r6, pc}
    return MU_SCHED_ERR_NOT_FOUND;
     34a:	2003      	movs	r0, #3
     34c:	e7fc      	b.n	348 <mu_sched_reschedule_in+0x24>
     34e:	46c0      	nop			; (mov r8, r8)
     350:	000004f1 	.word	0x000004f1
     354:	00000119 	.word	0x00000119

00000358 <mu_sched_reschedule_now>:
mu_sched_err_t mu_sched_reschedule_now(mu_sched_t *sched) {
     358:	b510      	push	{r4, lr}
  if (sched->current_event.task == NULL) {
     35a:	69c3      	ldr	r3, [r0, #28]
     35c:	2b00      	cmp	r3, #0
     35e:	d009      	beq.n	374 <mu_sched_reschedule_now+0x1c>
    return MU_SCHED_ERR_NOT_FOUND;
     360:	2303      	movs	r3, #3
  if (!event) {
     362:	0002      	movs	r2, r0
     364:	3218      	adds	r2, #24
     366:	d003      	beq.n	370 <mu_sched_reschedule_now+0x18>
  return mu_sched_task_now(sched, event->task);
     368:	69c1      	ldr	r1, [r0, #28]
     36a:	4b03      	ldr	r3, [pc, #12]	; (378 <mu_sched_reschedule_now+0x20>)
     36c:	4798      	blx	r3
     36e:	0003      	movs	r3, r0
}
     370:	0018      	movs	r0, r3
     372:	bd10      	pop	{r4, pc}
    return MU_SCHED_ERR_NOT_FOUND;
     374:	2303      	movs	r3, #3
     376:	e7fb      	b.n	370 <mu_sched_reschedule_now+0x18>
     378:	00000305 	.word	0x00000305

0000037c <mu_sched_task_from_isr>:
mu_sched_err_t mu_sched_task_from_isr(mu_sched_t *sched, mu_task_t *task) {
     37c:	b510      	push	{r4, lr}
  if (mu_spscq_put(sched->isr_queue, task) == MU_CQUEUE_ERR_FULL) {
     37e:	68c0      	ldr	r0, [r0, #12]
     380:	4b03      	ldr	r3, [pc, #12]	; (390 <mu_sched_task_from_isr+0x14>)
     382:	4798      	blx	r3
    return MU_SCHED_ERR_NONE;
     384:	3802      	subs	r0, #2
     386:	4243      	negs	r3, r0
     388:	4158      	adcs	r0, r3
     38a:	0040      	lsls	r0, r0, #1
}
     38c:	bd10      	pop	{r4, pc}
     38e:	46c0      	nop			; (mov r8, r8)
     390:	0000043d 	.word	0x0000043d

00000394 <mu_sched_get_task_status>:
                                                mu_task_t *task) {
     394:	b570      	push	{r4, r5, r6, lr}
  if (sched->current_event.task == NULL) {
     396:	69c3      	ldr	r3, [r0, #28]
     398:	2b00      	cmp	r3, #0
     39a:	d005      	beq.n	3a8 <mu_sched_get_task_status+0x14>
  if (event && mu_sched_event_get_task(event) == task) {
     39c:	0003      	movs	r3, r0
     39e:	3318      	adds	r3, #24
     3a0:	d002      	beq.n	3a8 <mu_sched_get_task_status+0x14>
     3a2:	69c3      	ldr	r3, [r0, #28]
     3a4:	4299      	cmp	r1, r3
     3a6:	d023      	beq.n	3f0 <mu_sched_get_task_status+0x5c>
  for (int i = sched->event_queue_count - 1; i >= 0; i--) {
     3a8:	6883      	ldr	r3, [r0, #8]
     3aa:	3b01      	subs	r3, #1
     3ac:	1e1a      	subs	r2, r3, #0
     3ae:	db21      	blt.n	3f4 <mu_sched_get_task_status+0x60>
    mu_sched_event_t *event = &sched->event_queue[i];
     3b0:	6804      	ldr	r4, [r0, #0]
     3b2:	00db      	lsls	r3, r3, #3
    if (event->task == task)
     3b4:	18e5      	adds	r5, r4, r3
     3b6:	686d      	ldr	r5, [r5, #4]
     3b8:	42a9      	cmp	r1, r5
     3ba:	d007      	beq.n	3cc <mu_sched_get_task_status+0x38>
     3bc:	3b04      	subs	r3, #4
     3be:	18e3      	adds	r3, r4, r3
  for (int i = sched->event_queue_count - 1; i >= 0; i--) {
     3c0:	3a01      	subs	r2, #1
     3c2:	d413      	bmi.n	3ec <mu_sched_get_task_status+0x58>
     3c4:	3b08      	subs	r3, #8
    if (event->task == task)
     3c6:	689d      	ldr	r5, [r3, #8]
     3c8:	42a9      	cmp	r1, r5
     3ca:	d1f9      	bne.n	3c0 <mu_sched_get_task_status+0x2c>
    return &sched->event_queue[i];
     3cc:	00d2      	lsls	r2, r2, #3
     3ce:	18a4      	adds	r4, r4, r2
    return MU_SCHED_TASK_STATUS_IDLE;
     3d0:	2300      	movs	r3, #0
  if (event == NULL) {
     3d2:	2c00      	cmp	r4, #0
     3d4:	d008      	beq.n	3e8 <mu_sched_get_task_status+0x54>
  mu_time_t now = mu_sched_get_current_time(sched);
     3d6:	4b08      	ldr	r3, [pc, #32]	; (3f8 <mu_sched_get_task_status+0x64>)
     3d8:	4798      	blx	r3
     3da:	0001      	movs	r1, r0
  if (!mu_time_follows(mu_sched_event_get_time(event), now)) {
     3dc:	6820      	ldr	r0, [r4, #0]
     3de:	4b07      	ldr	r3, [pc, #28]	; (3fc <mu_sched_get_task_status+0x68>)
     3e0:	4798      	blx	r3
    return MU_SCHED_TASK_STATUS_SCHEDULED;
     3e2:	4243      	negs	r3, r0
     3e4:	4143      	adcs	r3, r0
     3e6:	3301      	adds	r3, #1
}
     3e8:	0018      	movs	r0, r3
     3ea:	bd70      	pop	{r4, r5, r6, pc}
    return MU_SCHED_TASK_STATUS_IDLE;
     3ec:	2300      	movs	r3, #0
     3ee:	e7fb      	b.n	3e8 <mu_sched_get_task_status+0x54>
    return MU_SCHED_TASK_STATUS_ACTIVE;
     3f0:	2303      	movs	r3, #3
     3f2:	e7f9      	b.n	3e8 <mu_sched_get_task_status+0x54>
    return MU_SCHED_TASK_STATUS_IDLE;
     3f4:	2300      	movs	r3, #0
     3f6:	e7f7      	b.n	3e8 <mu_sched_get_task_status+0x54>
     3f8:	00000201 	.word	0x00000201
     3fc:	00000515 	.word	0x00000515

00000400 <mu_spscq_init>:
// =============================================================================
// public code

mu_spscq_err_t mu_spscq_init(mu_spscq_t *q,
                               mu_spscq_item_t *store,
                               uint16_t capacity) {
     400:	b510      	push	{r4, lr}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
    return MU_CQUEUE_ERR_SIZE;
     402:	2303      	movs	r3, #3
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     404:	2a00      	cmp	r2, #0
     406:	d101      	bne.n	40c <mu_spscq_init+0xc>
  }
  q->mask = capacity - 1;
  q->store = store;
  return mu_spscq_reset(q);
}
     408:	0018      	movs	r0, r3
     40a:	bd10      	pop	{r4, pc}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     40c:	1e54      	subs	r4, r2, #1
     40e:	4222      	tst	r2, r4
     410:	d1fa      	bne.n	408 <mu_spscq_init+0x8>
  q->mask = capacity - 1;
     412:	8004      	strh	r4, [r0, #0]
  q->store = store;
     414:	6081      	str	r1, [r0, #8]

mu_spscq_err_t mu_spscq_reset(mu_spscq_t *q) {
  q->head = 0;
     416:	2300      	movs	r3, #0
     418:	8043      	strh	r3, [r0, #2]
  q->tail = 0;
     41a:	8083      	strh	r3, [r0, #4]
  return mu_spscq_reset(q);
     41c:	e7f4      	b.n	408 <mu_spscq_init+0x8>

0000041e <mu_spscq_reset>:
  q->head = 0;
     41e:	2300      	movs	r3, #0
     420:	8043      	strh	r3, [r0, #2]
  q->tail = 0;
     422:	8083      	strh	r3, [r0, #4]
  return MU_CQUEUE_ERR_NONE;
}
     424:	2000      	movs	r0, #0
     426:	4770      	bx	lr

00000428 <mu_spscq_is_full>:

bool mu_spscq_is_empty(mu_spscq_t *q) { return q->head == q->tail; }

bool mu_spscq_is_full(mu_spscq_t *q) {
  // would advancing tail by 1 make it catch up with head?
  return ((q->tail + 1) & q->mask) == q->head;
     428:	8883      	ldrh	r3, [r0, #4]
     42a:	8842      	ldrh	r2, [r0, #2]
     42c:	3301      	adds	r3, #1
     42e:	8800      	ldrh	r0, [r0, #0]
     430:	4018      	ands	r0, r3
     432:	1a80      	subs	r0, r0, r2
     434:	4243      	negs	r3, r0
     436:	4158      	adcs	r0, r3
     438:	b2c0      	uxtb	r0, r0
}
     43a:	4770      	bx	lr

0000043c <mu_spscq_put>:

mu_spscq_err_t mu_spscq_put(mu_spscq_t *q, mu_spscq_item_t item) {
     43c:	b570      	push	{r4, r5, r6, lr}
     43e:	0004      	movs	r4, r0
     440:	000d      	movs	r5, r1
  if (mu_spscq_is_full(q)) {
     442:	4b09      	ldr	r3, [pc, #36]	; (468 <mu_spscq_put+0x2c>)
     444:	4798      	blx	r3
    return MU_CQUEUE_ERR_FULL;
     446:	2302      	movs	r3, #2
  if (mu_spscq_is_full(q)) {
     448:	2800      	cmp	r0, #0
     44a:	d001      	beq.n	450 <mu_spscq_put+0x14>
  }
  q->store[q->tail] = item;
  q->tail = (q->tail + 1) & q->mask;
  return MU_CQUEUE_ERR_NONE;
}
     44c:	0018      	movs	r0, r3
     44e:	bd70      	pop	{r4, r5, r6, pc}
  q->store[q->tail] = item;
     450:	88a3      	ldrh	r3, [r4, #4]
     452:	009b      	lsls	r3, r3, #2
     454:	68a2      	ldr	r2, [r4, #8]
     456:	509d      	str	r5, [r3, r2]
  q->tail = (q->tail + 1) & q->mask;
     458:	88a2      	ldrh	r2, [r4, #4]
     45a:	3201      	adds	r2, #1
     45c:	8823      	ldrh	r3, [r4, #0]
     45e:	4013      	ands	r3, r2
     460:	80a3      	strh	r3, [r4, #4]
  return MU_CQUEUE_ERR_NONE;
     462:	2300      	movs	r3, #0
     464:	e7f2      	b.n	44c <mu_spscq_put+0x10>
     466:	46c0      	nop			; (mov r8, r8)
     468:	00000429 	.word	0x00000429

0000046c <mu_spscq_get>:
bool mu_spscq_is_empty(mu_spscq_t *q) { return q->head == q->tail; }
     46c:	8843      	ldrh	r3, [r0, #2]
     46e:	8882      	ldrh	r2, [r0, #4]
     470:	b29b      	uxth	r3, r3

mu_spscq_err_t mu_spscq_get(mu_spscq_t *q, mu_spscq_item_t *item) {
  if (mu_spscq_is_empty(q)) {
     472:	4293      	cmp	r3, r2
     474:	d00b      	beq.n	48e <mu_spscq_get+0x22>
    *item = NULL;
    return MU_CQUEUE_ERR_EMPTY;
  }
  *item = q->store[q->head];
     476:	8843      	ldrh	r3, [r0, #2]
     478:	6882      	ldr	r2, [r0, #8]
     47a:	009b      	lsls	r3, r3, #2
     47c:	589b      	ldr	r3, [r3, r2]
     47e:	600b      	str	r3, [r1, #0]
  q->head = (q->head + 1) & q->mask;
     480:	8842      	ldrh	r2, [r0, #2]
     482:	3201      	adds	r2, #1
     484:	8803      	ldrh	r3, [r0, #0]
     486:	4013      	ands	r3, r2
     488:	8043      	strh	r3, [r0, #2]
  return MU_CQUEUE_ERR_NONE;
     48a:	2000      	movs	r0, #0
}
     48c:	4770      	bx	lr
    *item = NULL;
     48e:	2300      	movs	r3, #0
     490:	600b      	str	r3, [r1, #0]
    return MU_CQUEUE_ERR_EMPTY;
     492:	2001      	movs	r0, #1
     494:	e7fa      	b.n	48c <mu_spscq_get+0x20>

00000496 <mu_task_init>:

mu_task_t *mu_task_init(mu_task_t *task,
                        mu_task_fn fn,
                        void *ctx,
                        const char *name) {
  task->fn = fn;
     496:	6001      	str	r1, [r0, #0]
  task->ctx = ctx;
     498:	6042      	str	r2, [r0, #4]
#if (MU_TASK_PROFILING)
  task->name = name;
     49a:	6083      	str	r3, [r0, #8]
  task->call_count = 0;
     49c:	2300      	movs	r3, #0
     49e:	60c3      	str	r3, [r0, #12]
  task->runtime = 0;
     4a0:	6103      	str	r3, [r0, #16]
  task->max_duration = 0;
     4a2:	6143      	str	r3, [r0, #20]
#endif
  return task;
}
     4a4:	4770      	bx	lr

000004a6 <mu_task_name>:

const char *mu_task_name(mu_task_t *task) {
#if (MU_TASK_PROFILING)
  return task->name;
     4a6:	6880      	ldr	r0, [r0, #8]
#else
  return "";
#endif
}
     4a8:	4770      	bx	lr
	...

000004ac <mu_task_call>:

void *mu_task_call(mu_task_t *task, void *arg) {
     4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4ae:	0004      	movs	r4, r0
     4b0:	000d      	movs	r5, r1

#if (MU_TASK_PROFILING)
  mu_time_t called_at = mu_time_now();
     4b2:	4f0c      	ldr	r7, [pc, #48]	; (4e4 <mu_task_call+0x38>)
     4b4:	47b8      	blx	r7
     4b6:	0006      	movs	r6, r0
#endif
  void *result = task->fn(task->ctx, arg);
     4b8:	0029      	movs	r1, r5
     4ba:	6860      	ldr	r0, [r4, #4]
     4bc:	6823      	ldr	r3, [r4, #0]
     4be:	4798      	blx	r3
     4c0:	0005      	movs	r5, r0
#if (MU_TASK_PROFILING)
  task->call_count += 1;
     4c2:	68e3      	ldr	r3, [r4, #12]
     4c4:	3301      	adds	r3, #1
     4c6:	60e3      	str	r3, [r4, #12]
  mu_time_dt duration = mu_time_difference(mu_time_now(), called_at);
     4c8:	47b8      	blx	r7
     4ca:	0031      	movs	r1, r6
     4cc:	4b06      	ldr	r3, [pc, #24]	; (4e8 <mu_task_call+0x3c>)
     4ce:	4798      	blx	r3
  task->runtime += duration;
     4d0:	6923      	ldr	r3, [r4, #16]
     4d2:	181b      	adds	r3, r3, r0
     4d4:	6123      	str	r3, [r4, #16]
  if (duration > task->max_duration) task->max_duration = duration;
     4d6:	6963      	ldr	r3, [r4, #20]
     4d8:	4298      	cmp	r0, r3
     4da:	dd00      	ble.n	4de <mu_task_call+0x32>
     4dc:	6160      	str	r0, [r4, #20]
#endif
  return result;
}
     4de:	0028      	movs	r0, r5
     4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4e2:	46c0      	nop			; (mov r8, r8)
     4e4:	00000535 	.word	0x00000535
     4e8:	000004fd 	.word	0x000004fd

000004ec <mu_task_call_count>:

#if (MU_TASK_PROFILING)

unsigned int mu_task_call_count(mu_task_t *task) {
  return task->call_count;
     4ec:	68c0      	ldr	r0, [r0, #12]
}
     4ee:	4770      	bx	lr

000004f0 <mu_time_offset>:

void mu_time_init(void) {
  // mu_vm_init() must be called separately
}

mu_time_t mu_time_offset(mu_time_t t1, mu_time_dt dt) {
     4f0:	b510      	push	{r4, lr}
  return mu_vm_time_offset(t1, dt);
     4f2:	4b01      	ldr	r3, [pc, #4]	; (4f8 <mu_time_offset+0x8>)
     4f4:	4798      	blx	r3
}
     4f6:	bd10      	pop	{r4, pc}
     4f8:	0000185d 	.word	0x0000185d

000004fc <mu_time_difference>:

mu_time_dt mu_time_difference(mu_time_t t1, mu_time_t t2) {
     4fc:	b510      	push	{r4, lr}
  return mu_vm_time_difference(t1, t2);
     4fe:	4b01      	ldr	r3, [pc, #4]	; (504 <mu_time_difference+0x8>)
     500:	4798      	blx	r3
}
     502:	bd10      	pop	{r4, pc}
     504:	00001861 	.word	0x00001861

00000508 <mu_time_precedes>:

bool mu_time_precedes(mu_time_t t1, mu_time_t t2) {
     508:	b510      	push	{r4, lr}
  return mu_vm_time_precedes(t1, t2);
     50a:	4b01      	ldr	r3, [pc, #4]	; (510 <mu_time_precedes+0x8>)
     50c:	4798      	blx	r3
}
     50e:	bd10      	pop	{r4, pc}
     510:	00001865 	.word	0x00001865

00000514 <mu_time_follows>:

bool mu_time_equals(mu_time_t t1, mu_time_t t2) {
  return mu_vm_time_equals(t1, t2);
}

bool mu_time_follows(mu_time_t t1, mu_time_t t2) {
     514:	b510      	push	{r4, lr}
     516:	000b      	movs	r3, r1
  return mu_vm_time_precedes(t2, t1);
     518:	0001      	movs	r1, r0
     51a:	0018      	movs	r0, r3
     51c:	4b01      	ldr	r3, [pc, #4]	; (524 <mu_time_follows+0x10>)
     51e:	4798      	blx	r3
}
     520:	bd10      	pop	{r4, pc}
     522:	46c0      	nop			; (mov r8, r8)
     524:	00001865 	.word	0x00001865

00000528 <mu_time_ms_to_duration>:

mu_time_ms_dt mu_time_duration_to_ms(mu_time_dt dt) {
  return mu_vm_time_duration_to_ms(dt);
}

mu_time_dt mu_time_ms_to_duration(mu_time_ms_dt ms) {
     528:	b510      	push	{r4, lr}
  return mu_vm_time_ms_to_duration(ms);
     52a:	4b01      	ldr	r3, [pc, #4]	; (530 <mu_time_ms_to_duration+0x8>)
     52c:	4798      	blx	r3
}
     52e:	bd10      	pop	{r4, pc}
     530:	0000186d 	.word	0x0000186d

00000534 <mu_time_now>:
mu_time_dt mu_time_seconds_to_duration(mu_time_seconds_dt s) {
  return mu_vm_time_seconds_to_duration(s);
}
#endif

mu_time_t mu_time_now() {
     534:	b510      	push	{r4, lr}
  return mu_vm_rtc_now();
     536:	4b01      	ldr	r3, [pc, #4]	; (53c <mu_time_now+0x8>)
     538:	4798      	blx	r3
}
     53a:	bd10      	pop	{r4, pc}
     53c:	00001895 	.word	0x00001895

00000540 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     540:	b510      	push	{r4, lr}
	system_init();
     542:	4b01      	ldr	r3, [pc, #4]	; (548 <atmel_start_init+0x8>)
     544:	4798      	blx	r3
}
     546:	bd10      	pop	{r4, pc}
     548:	00000769 	.word	0x00000769

0000054c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     54c:	e7fe      	b.n	54c <Dummy_Handler>
	...

00000550 <Reset_Handler>:
{
     550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     552:	4a2a      	ldr	r2, [pc, #168]	; (5fc <Reset_Handler+0xac>)
     554:	4b2a      	ldr	r3, [pc, #168]	; (600 <Reset_Handler+0xb0>)
     556:	429a      	cmp	r2, r3
     558:	d011      	beq.n	57e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     55a:	001a      	movs	r2, r3
     55c:	4b29      	ldr	r3, [pc, #164]	; (604 <Reset_Handler+0xb4>)
     55e:	429a      	cmp	r2, r3
     560:	d20d      	bcs.n	57e <Reset_Handler+0x2e>
     562:	4a29      	ldr	r2, [pc, #164]	; (608 <Reset_Handler+0xb8>)
     564:	3303      	adds	r3, #3
     566:	1a9b      	subs	r3, r3, r2
     568:	089b      	lsrs	r3, r3, #2
     56a:	3301      	adds	r3, #1
     56c:	009b      	lsls	r3, r3, #2
     56e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     570:	4823      	ldr	r0, [pc, #140]	; (600 <Reset_Handler+0xb0>)
     572:	4922      	ldr	r1, [pc, #136]	; (5fc <Reset_Handler+0xac>)
     574:	588c      	ldr	r4, [r1, r2]
     576:	5084      	str	r4, [r0, r2]
     578:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     57a:	429a      	cmp	r2, r3
     57c:	d1fa      	bne.n	574 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     57e:	4a23      	ldr	r2, [pc, #140]	; (60c <Reset_Handler+0xbc>)
     580:	4b23      	ldr	r3, [pc, #140]	; (610 <Reset_Handler+0xc0>)
     582:	429a      	cmp	r2, r3
     584:	d20a      	bcs.n	59c <Reset_Handler+0x4c>
     586:	43d3      	mvns	r3, r2
     588:	4921      	ldr	r1, [pc, #132]	; (610 <Reset_Handler+0xc0>)
     58a:	185b      	adds	r3, r3, r1
     58c:	2103      	movs	r1, #3
     58e:	438b      	bics	r3, r1
     590:	3304      	adds	r3, #4
     592:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     594:	2100      	movs	r1, #0
     596:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     598:	4293      	cmp	r3, r2
     59a:	d1fc      	bne.n	596 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     59c:	4a1d      	ldr	r2, [pc, #116]	; (614 <Reset_Handler+0xc4>)
     59e:	21ff      	movs	r1, #255	; 0xff
     5a0:	4b1d      	ldr	r3, [pc, #116]	; (618 <Reset_Handler+0xc8>)
     5a2:	438b      	bics	r3, r1
     5a4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     5a6:	39fd      	subs	r1, #253	; 0xfd
     5a8:	2390      	movs	r3, #144	; 0x90
     5aa:	005b      	lsls	r3, r3, #1
     5ac:	4a1b      	ldr	r2, [pc, #108]	; (61c <Reset_Handler+0xcc>)
     5ae:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     5b0:	4a1b      	ldr	r2, [pc, #108]	; (620 <Reset_Handler+0xd0>)
     5b2:	78d3      	ldrb	r3, [r2, #3]
     5b4:	2503      	movs	r5, #3
     5b6:	43ab      	bics	r3, r5
     5b8:	2402      	movs	r4, #2
     5ba:	4323      	orrs	r3, r4
     5bc:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     5be:	78d3      	ldrb	r3, [r2, #3]
     5c0:	270c      	movs	r7, #12
     5c2:	43bb      	bics	r3, r7
     5c4:	2608      	movs	r6, #8
     5c6:	4333      	orrs	r3, r6
     5c8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     5ca:	4b16      	ldr	r3, [pc, #88]	; (624 <Reset_Handler+0xd4>)
     5cc:	7b98      	ldrb	r0, [r3, #14]
     5ce:	2230      	movs	r2, #48	; 0x30
     5d0:	4390      	bics	r0, r2
     5d2:	2220      	movs	r2, #32
     5d4:	4310      	orrs	r0, r2
     5d6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     5d8:	7b99      	ldrb	r1, [r3, #14]
     5da:	43b9      	bics	r1, r7
     5dc:	4331      	orrs	r1, r6
     5de:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     5e0:	7b9a      	ldrb	r2, [r3, #14]
     5e2:	43aa      	bics	r2, r5
     5e4:	4322      	orrs	r2, r4
     5e6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     5e8:	4a0f      	ldr	r2, [pc, #60]	; (628 <Reset_Handler+0xd8>)
     5ea:	6853      	ldr	r3, [r2, #4]
     5ec:	2180      	movs	r1, #128	; 0x80
     5ee:	430b      	orrs	r3, r1
     5f0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     5f2:	4b0e      	ldr	r3, [pc, #56]	; (62c <Reset_Handler+0xdc>)
     5f4:	4798      	blx	r3
        main();
     5f6:	4b0e      	ldr	r3, [pc, #56]	; (630 <Reset_Handler+0xe0>)
     5f8:	4798      	blx	r3
     5fa:	e7fe      	b.n	5fa <Reset_Handler+0xaa>
     5fc:	0000345c 	.word	0x0000345c
     600:	20000000 	.word	0x20000000
     604:	20000064 	.word	0x20000064
     608:	20000004 	.word	0x20000004
     60c:	20000064 	.word	0x20000064
     610:	200002c4 	.word	0x200002c4
     614:	e000ed00 	.word	0xe000ed00
     618:	00000000 	.word	0x00000000
     61c:	41007000 	.word	0x41007000
     620:	41005000 	.word	0x41005000
     624:	41004800 	.word	0x41004800
     628:	41004000 	.word	0x41004000
     62c:	00001fd5 	.word	0x00001fd5
     630:	00001711 	.word	0x00001711

00000634 <EXTERNAL_IRQ_0_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct calendar_descriptor CALENDAR_0;

void EXTERNAL_IRQ_0_init(void)
{
     634:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     636:	4a10      	ldr	r2, [pc, #64]	; (678 <EXTERNAL_IRQ_0_init+0x44>)
     638:	4b10      	ldr	r3, [pc, #64]	; (67c <EXTERNAL_IRQ_0_init+0x48>)
     63a:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     63c:	22c0      	movs	r2, #192	; 0xc0
     63e:	05d2      	lsls	r2, r2, #23
     640:	2080      	movs	r0, #128	; 0x80
     642:	0200      	lsls	r0, r0, #8
     644:	6050      	str	r0, [r2, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     646:	4b0e      	ldr	r3, [pc, #56]	; (680 <EXTERNAL_IRQ_0_init+0x4c>)
     648:	490e      	ldr	r1, [pc, #56]	; (684 <EXTERNAL_IRQ_0_init+0x50>)
     64a:	6299      	str	r1, [r3, #40]	; 0x28
     64c:	490e      	ldr	r1, [pc, #56]	; (688 <EXTERNAL_IRQ_0_init+0x54>)
     64e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     650:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     652:	214f      	movs	r1, #79	; 0x4f
     654:	5c5c      	ldrb	r4, [r3, r1]
     656:	2504      	movs	r5, #4
     658:	432c      	orrs	r4, r5
     65a:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     65c:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     660:	2001      	movs	r0, #1
     662:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     664:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     666:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     668:	3918      	subs	r1, #24
     66a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     66c:	300e      	adds	r0, #14
     66e:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     670:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(USER_BUTTON_AL, PINMUX_PA15A_EIC_EXTINT15);

	ext_irq_init();
     672:	4b06      	ldr	r3, [pc, #24]	; (68c <EXTERNAL_IRQ_0_init+0x58>)
     674:	4798      	blx	r3
}
     676:	bd70      	pop	{r4, r5, r6, pc}
     678:	00004305 	.word	0x00004305
     67c:	40000c00 	.word	0x40000c00
     680:	41004400 	.word	0x41004400
     684:	40028000 	.word	0x40028000
     688:	c0020000 	.word	0xc0020000
     68c:	00000881 	.word	0x00000881

00000690 <USART_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     690:	4a04      	ldr	r2, [pc, #16]	; (6a4 <USART_0_CLOCK_init+0x14>)
     692:	6a13      	ldr	r3, [r2, #32]
     694:	2120      	movs	r1, #32
     696:	430b      	orrs	r3, r1
     698:	6213      	str	r3, [r2, #32]
     69a:	4a03      	ldr	r2, [pc, #12]	; (6a8 <USART_0_CLOCK_init+0x18>)
     69c:	4b03      	ldr	r3, [pc, #12]	; (6ac <USART_0_CLOCK_init+0x1c>)
     69e:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     6a0:	4770      	bx	lr
     6a2:	46c0      	nop			; (mov r8, r8)
     6a4:	40000400 	.word	0x40000400
     6a8:	00004017 	.word	0x00004017
     6ac:	40000c00 	.word	0x40000c00

000006b0 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     6b0:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b2:	4b0e      	ldr	r3, [pc, #56]	; (6ec <USART_0_PORT_init+0x3c>)
     6b4:	2256      	movs	r2, #86	; 0x56
     6b6:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6b8:	2501      	movs	r5, #1
     6ba:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6bc:	2401      	movs	r4, #1
     6be:	4321      	orrs	r1, r4
     6c0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c2:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c4:	203b      	movs	r0, #59	; 0x3b
     6c6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6c8:	3a47      	subs	r2, #71	; 0x47
     6ca:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     6cc:	3a0d      	subs	r2, #13
     6ce:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6d0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6d2:	2157      	movs	r1, #87	; 0x57
     6d4:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6d6:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6d8:	4322      	orrs	r2, r4
     6da:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6dc:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6de:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6e0:	3948      	subs	r1, #72	; 0x48
     6e2:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     6e4:	3111      	adds	r1, #17
     6e6:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6e8:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     6ea:	bd30      	pop	{r4, r5, pc}
     6ec:	41004400 	.word	0x41004400

000006f0 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     6f0:	b510      	push	{r4, lr}
     6f2:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     6f4:	4b06      	ldr	r3, [pc, #24]	; (710 <USART_0_init+0x20>)
     6f6:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     6f8:	2300      	movs	r3, #0
     6fa:	9300      	str	r3, [sp, #0]
     6fc:	3310      	adds	r3, #16
     6fe:	4a05      	ldr	r2, [pc, #20]	; (714 <USART_0_init+0x24>)
     700:	4905      	ldr	r1, [pc, #20]	; (718 <USART_0_init+0x28>)
     702:	4806      	ldr	r0, [pc, #24]	; (71c <USART_0_init+0x2c>)
     704:	4c06      	ldr	r4, [pc, #24]	; (720 <USART_0_init+0x30>)
     706:	47a0      	blx	r4
	USART_0_PORT_init();
     708:	4b06      	ldr	r3, [pc, #24]	; (724 <USART_0_init+0x34>)
     70a:	4798      	blx	r3
}
     70c:	b002      	add	sp, #8
     70e:	bd10      	pop	{r4, pc}
     710:	00000691 	.word	0x00000691
     714:	20000098 	.word	0x20000098
     718:	42001400 	.word	0x42001400
     71c:	20000270 	.word	0x20000270
     720:	00000ad1 	.word	0x00000ad1
     724:	000006b1 	.word	0x000006b1

00000728 <CALENDAR_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     728:	4a04      	ldr	r2, [pc, #16]	; (73c <CALENDAR_0_CLOCK_init+0x14>)
     72a:	6993      	ldr	r3, [r2, #24]
     72c:	2120      	movs	r1, #32
     72e:	430b      	orrs	r3, r1
     730:	6193      	str	r3, [r2, #24]
     732:	4a03      	ldr	r2, [pc, #12]	; (740 <CALENDAR_0_CLOCK_init+0x18>)
     734:	4b03      	ldr	r3, [pc, #12]	; (744 <CALENDAR_0_CLOCK_init+0x1c>)
     736:	805a      	strh	r2, [r3, #2]

void CALENDAR_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
     738:	4770      	bx	lr
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	40000400 	.word	0x40000400
     740:	00004304 	.word	0x00004304
     744:	40000c00 	.word	0x40000c00

00000748 <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     748:	b510      	push	{r4, lr}
	CALENDAR_0_CLOCK_init();
     74a:	4b03      	ldr	r3, [pc, #12]	; (758 <CALENDAR_0_init+0x10>)
     74c:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     74e:	4903      	ldr	r1, [pc, #12]	; (75c <CALENDAR_0_init+0x14>)
     750:	4803      	ldr	r0, [pc, #12]	; (760 <CALENDAR_0_init+0x18>)
     752:	4b04      	ldr	r3, [pc, #16]	; (764 <CALENDAR_0_init+0x1c>)
     754:	4798      	blx	r3
}
     756:	bd10      	pop	{r4, pc}
     758:	00000729 	.word	0x00000729
     75c:	40001400 	.word	0x40001400
     760:	20000254 	.word	0x20000254
     764:	000007d5 	.word	0x000007d5

00000768 <system_init>:

void system_init(void)
{
     768:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     76a:	4b0d      	ldr	r3, [pc, #52]	; (7a0 <system_init+0x38>)
     76c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     76e:	23c0      	movs	r3, #192	; 0xc0
     770:	05db      	lsls	r3, r3, #23
     772:	2280      	movs	r2, #128	; 0x80
     774:	05d2      	lsls	r2, r2, #23
     776:	2198      	movs	r1, #152	; 0x98
     778:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     77a:	3910      	subs	r1, #16
     77c:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     77e:	4b09      	ldr	r3, [pc, #36]	; (7a4 <system_init+0x3c>)
     780:	3120      	adds	r1, #32
     782:	505a      	str	r2, [r3, r1]
     784:	4a08      	ldr	r2, [pc, #32]	; (7a8 <system_init+0x40>)
     786:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     788:	3136      	adds	r1, #54	; 0x36
     78a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     78c:	2001      	movs	r0, #1
     78e:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     790:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(USER_LED_AL, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(USER_LED_AL, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     792:	4b06      	ldr	r3, [pc, #24]	; (7ac <system_init+0x44>)
     794:	4798      	blx	r3

	USART_0_init();
     796:	4b06      	ldr	r3, [pc, #24]	; (7b0 <system_init+0x48>)
     798:	4798      	blx	r3

	CALENDAR_0_init();
     79a:	4b06      	ldr	r3, [pc, #24]	; (7b4 <system_init+0x4c>)
     79c:	4798      	blx	r3
}
     79e:	bd10      	pop	{r4, pc}
     7a0:	00000d0d 	.word	0x00000d0d
     7a4:	41004400 	.word	0x41004400
     7a8:	c0004000 	.word	0xc0004000
     7ac:	00000635 	.word	0x00000635
     7b0:	000006f1 	.word	0x000006f1
     7b4:	00000749 	.word	0x00000749

000007b8 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     7b8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     7bc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     7be:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     7c0:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     7c4:	4770      	bx	lr

000007c6 <atomic_leave_critical>:
     7c6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     7ca:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     7cc:	f383 8810 	msr	PRIMASK, r3
}
     7d0:	4770      	bx	lr
	...

000007d4 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
     7d4:	b570      	push	{r4, r5, r6, lr}
     7d6:	0004      	movs	r4, r0
     7d8:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
     7da:	1e43      	subs	r3, r0, #1
     7dc:	4198      	sbcs	r0, r3
     7de:	b2c0      	uxtb	r0, r0
     7e0:	22e0      	movs	r2, #224	; 0xe0
     7e2:	0052      	lsls	r2, r2, #1
     7e4:	4909      	ldr	r1, [pc, #36]	; (80c <calendar_init+0x38>)
     7e6:	4b0a      	ldr	r3, [pc, #40]	; (810 <calendar_init+0x3c>)
     7e8:	4798      	blx	r3

	if (calendar->device.hw == hw) {
     7ea:	6823      	ldr	r3, [r4, #0]
     7ec:	42ab      	cmp	r3, r5
     7ee:	d008      	beq.n	802 <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
     7f0:	2b00      	cmp	r3, #0
     7f2:	d108      	bne.n	806 <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
     7f4:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
     7f6:	0020      	movs	r0, r4
     7f8:	4b06      	ldr	r3, [pc, #24]	; (814 <calendar_init+0x40>)
     7fa:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
     7fc:	4b06      	ldr	r3, [pc, #24]	; (818 <calendar_init+0x44>)
     7fe:	6163      	str	r3, [r4, #20]

	return ret;
}
     800:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
     802:	2000      	movs	r0, #0
     804:	e7fc      	b.n	800 <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
     806:	2012      	movs	r0, #18
     808:	4240      	negs	r0, r0
     80a:	e7f9      	b.n	800 <calendar_init+0x2c>
     80c:	00002fa4 	.word	0x00002fa4
     810:	00000bc1 	.word	0x00000bc1
     814:	00000fdd 	.word	0x00000fdd
     818:	000007b2 	.word	0x000007b2

0000081c <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
     81c:	b510      	push	{r4, lr}
     81e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	ASSERT(calendar);
     820:	1e43      	subs	r3, r0, #1
     822:	4198      	sbcs	r0, r3
     824:	b2c0      	uxtb	r0, r0
     826:	22e6      	movs	r2, #230	; 0xe6
     828:	32ff      	adds	r2, #255	; 0xff
     82a:	4904      	ldr	r1, [pc, #16]	; (83c <calendar_enable+0x20>)
     82c:	4b04      	ldr	r3, [pc, #16]	; (840 <calendar_enable+0x24>)
     82e:	4798      	blx	r3

	_calendar_enable(&calendar->device);
     830:	0020      	movs	r0, r4
     832:	4b04      	ldr	r3, [pc, #16]	; (844 <calendar_enable+0x28>)
     834:	4798      	blx	r3

	return ERR_NONE;
}
     836:	2000      	movs	r0, #0
     838:	bd10      	pop	{r4, pc}
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	00002fa4 	.word	0x00002fa4
     840:	00000bc1 	.word	0x00000bc1
     844:	00001061 	.word	0x00001061

00000848 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     848:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     84a:	4b0c      	ldr	r3, [pc, #48]	; (87c <process_ext_irq+0x34>)
     84c:	685c      	ldr	r4, [r3, #4]
     84e:	42a0      	cmp	r0, r4
     850:	d00e      	beq.n	870 <process_ext_irq+0x28>
     852:	2201      	movs	r2, #1
     854:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     856:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     858:	25ff      	movs	r5, #255	; 0xff
     85a:	e003      	b.n	864 <process_ext_irq+0x1c>
     85c:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     85e:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     860:	085b      	lsrs	r3, r3, #1
     862:	d10a      	bne.n	87a <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     864:	42a0      	cmp	r0, r4
     866:	d9f9      	bls.n	85c <process_ext_irq+0x14>
	while (upper >= lower) {
     868:	2a00      	cmp	r2, #0
     86a:	d006      	beq.n	87a <process_ext_irq+0x32>
			lower = middle + 1;
     86c:	0031      	movs	r1, r6
     86e:	e7f6      	b.n	85e <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     870:	4b02      	ldr	r3, [pc, #8]	; (87c <process_ext_irq+0x34>)
     872:	681b      	ldr	r3, [r3, #0]
     874:	2b00      	cmp	r3, #0
     876:	d000      	beq.n	87a <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     878:	4798      	blx	r3
		}
	}
}
     87a:	bd70      	pop	{r4, r5, r6, pc}
     87c:	200000a8 	.word	0x200000a8

00000880 <ext_irq_init>:
{
     880:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     882:	4b05      	ldr	r3, [pc, #20]	; (898 <ext_irq_init+0x18>)
     884:	2201      	movs	r2, #1
     886:	4252      	negs	r2, r2
     888:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     88a:	2200      	movs	r2, #0
     88c:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     88e:	4803      	ldr	r0, [pc, #12]	; (89c <ext_irq_init+0x1c>)
     890:	4b03      	ldr	r3, [pc, #12]	; (8a0 <ext_irq_init+0x20>)
     892:	4798      	blx	r3
}
     894:	bd10      	pop	{r4, pc}
     896:	46c0      	nop			; (mov r8, r8)
     898:	200000a8 	.word	0x200000a8
     89c:	00000849 	.word	0x00000849
     8a0:	00000d3d 	.word	0x00000d3d

000008a4 <ext_irq_register>:
{
     8a4:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     8a6:	4b0f      	ldr	r3, [pc, #60]	; (8e4 <ext_irq_register+0x40>)
     8a8:	685b      	ldr	r3, [r3, #4]
     8aa:	4298      	cmp	r0, r3
     8ac:	d008      	beq.n	8c0 <ext_irq_register+0x1c>
	if (NULL == cb) {
     8ae:	2900      	cmp	r1, #0
     8b0:	d014      	beq.n	8dc <ext_irq_register+0x38>
			if (NULL == ext_irqs[i].cb) {
     8b2:	4b0c      	ldr	r3, [pc, #48]	; (8e4 <ext_irq_register+0x40>)
     8b4:	681b      	ldr	r3, [r3, #0]
     8b6:	2b00      	cmp	r3, #0
     8b8:	d009      	beq.n	8ce <ext_irq_register+0x2a>
		return ERR_INVALID_ARG;
     8ba:	200d      	movs	r0, #13
     8bc:	4240      	negs	r0, r0
     8be:	e00c      	b.n	8da <ext_irq_register+0x36>
			ext_irqs[i].cb = cb;
     8c0:	4b08      	ldr	r3, [pc, #32]	; (8e4 <ext_irq_register+0x40>)
     8c2:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     8c4:	2900      	cmp	r1, #0
     8c6:	d105      	bne.n	8d4 <ext_irq_register+0x30>
		return _ext_irq_enable(pin, false);
     8c8:	4b07      	ldr	r3, [pc, #28]	; (8e8 <ext_irq_register+0x44>)
     8ca:	4798      	blx	r3
     8cc:	e005      	b.n	8da <ext_irq_register+0x36>
				ext_irqs[i].cb  = cb;
     8ce:	4b05      	ldr	r3, [pc, #20]	; (8e4 <ext_irq_register+0x40>)
     8d0:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     8d2:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     8d4:	2101      	movs	r1, #1
     8d6:	4b04      	ldr	r3, [pc, #16]	; (8e8 <ext_irq_register+0x44>)
     8d8:	4798      	blx	r3
}
     8da:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     8dc:	200d      	movs	r0, #13
     8de:	4240      	negs	r0, r0
     8e0:	e7fb      	b.n	8da <ext_irq_register+0x36>
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	200000a8 	.word	0x200000a8
     8e8:	00000dd5 	.word	0x00000dd5

000008ec <sleep>:
 * \retval -1 The requested sleep mode was invalid or not available
 * \retval  0 The operation completed successfully, returned after leaving the
 *            sleep
 */
int sleep(const uint8_t mode)
{
     8ec:	b510      	push	{r4, lr}
	if (ERR_NONE != _set_sleep_mode(mode))
     8ee:	4b05      	ldr	r3, [pc, #20]	; (904 <sleep+0x18>)
     8f0:	4798      	blx	r3
     8f2:	2800      	cmp	r0, #0
     8f4:	d103      	bne.n	8fe <sleep+0x12>
		return ERR_INVALID_ARG;

	_go_to_sleep();
     8f6:	4b04      	ldr	r3, [pc, #16]	; (908 <sleep+0x1c>)
     8f8:	4798      	blx	r3

	return ERR_NONE;
     8fa:	2000      	movs	r0, #0
}
     8fc:	bd10      	pop	{r4, pc}
		return ERR_INVALID_ARG;
     8fe:	200d      	movs	r0, #13
     900:	4240      	negs	r0, r0
     902:	e7fb      	b.n	8fc <sleep+0x10>
     904:	00000f25 	.word	0x00000f25
     908:	00000d05 	.word	0x00000d05

0000090c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     90c:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     90e:	3808      	subs	r0, #8

	descr->stat = 0;
     910:	2300      	movs	r3, #0
     912:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     914:	6a43      	ldr	r3, [r0, #36]	; 0x24
     916:	2b00      	cmp	r3, #0
     918:	d000      	beq.n	91c <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     91a:	4798      	blx	r3
	}
}
     91c:	bd10      	pop	{r4, pc}

0000091e <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     91e:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     920:	3808      	subs	r0, #8

	descr->stat = 0;
     922:	2300      	movs	r3, #0
     924:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     926:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     928:	2b00      	cmp	r3, #0
     92a:	d000      	beq.n	92e <usart_error+0x10>
		descr->usart_cb.error(descr);
     92c:	4798      	blx	r3
	}
}
     92e:	bd10      	pop	{r4, pc}

00000930 <usart_fill_rx_buffer>:
{
     930:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     932:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     934:	302c      	adds	r0, #44	; 0x2c
     936:	4b04      	ldr	r3, [pc, #16]	; (948 <usart_fill_rx_buffer+0x18>)
     938:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     93a:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     93c:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     93e:	2b00      	cmp	r3, #0
     940:	d001      	beq.n	946 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     942:	0020      	movs	r0, r4
     944:	4798      	blx	r3
}
     946:	bd10      	pop	{r4, pc}
     948:	00000c65 	.word	0x00000c65

0000094c <usart_async_write>:
{
     94c:	b570      	push	{r4, r5, r6, lr}
     94e:	0004      	movs	r4, r0
     950:	000e      	movs	r6, r1
     952:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     954:	2800      	cmp	r0, #0
     956:	d01d      	beq.n	994 <usart_async_write+0x48>
     958:	2900      	cmp	r1, #0
     95a:	d01d      	beq.n	998 <usart_async_write+0x4c>
     95c:	0010      	movs	r0, r2
     95e:	1e43      	subs	r3, r0, #1
     960:	4198      	sbcs	r0, r3
     962:	223c      	movs	r2, #60	; 0x3c
     964:	32ff      	adds	r2, #255	; 0xff
     966:	490f      	ldr	r1, [pc, #60]	; (9a4 <usart_async_write+0x58>)
     968:	4b0f      	ldr	r3, [pc, #60]	; (9a8 <usart_async_write+0x5c>)
     96a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     96c:	2344      	movs	r3, #68	; 0x44
     96e:	5ae2      	ldrh	r2, [r4, r3]
     970:	3308      	adds	r3, #8
     972:	5ae3      	ldrh	r3, [r4, r3]
     974:	429a      	cmp	r2, r3
     976:	d111      	bne.n	99c <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
     978:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     97a:	234c      	movs	r3, #76	; 0x4c
     97c:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     97e:	2200      	movs	r2, #0
     980:	3b08      	subs	r3, #8
     982:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     984:	3b43      	subs	r3, #67	; 0x43
     986:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     988:	0020      	movs	r0, r4
     98a:	3008      	adds	r0, #8
     98c:	4b07      	ldr	r3, [pc, #28]	; (9ac <usart_async_write+0x60>)
     98e:	4798      	blx	r3
	return (int32_t)length;
     990:	0028      	movs	r0, r5
}
     992:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     994:	2000      	movs	r0, #0
     996:	e7e4      	b.n	962 <usart_async_write+0x16>
     998:	2000      	movs	r0, #0
     99a:	e7e2      	b.n	962 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     99c:	201c      	movs	r0, #28
     99e:	4240      	negs	r0, r0
     9a0:	e7f7      	b.n	992 <usart_async_write+0x46>
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	00002fc0 	.word	0x00002fc0
     9a8:	00000bc1 	.word	0x00000bc1
     9ac:	0000123d 	.word	0x0000123d

000009b0 <usart_process_byte_sent>:
{
     9b0:	b570      	push	{r4, r5, r6, lr}
     9b2:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     9b4:	0001      	movs	r1, r0
     9b6:	3908      	subs	r1, #8
     9b8:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     9ba:	224c      	movs	r2, #76	; 0x4c
     9bc:	5a8a      	ldrh	r2, [r1, r2]
     9be:	429a      	cmp	r2, r3
     9c0:	d00c      	beq.n	9dc <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     9c2:	000a      	movs	r2, r1
     9c4:	6c89      	ldr	r1, [r1, #72]	; 0x48
     9c6:	1c5d      	adds	r5, r3, #1
     9c8:	2044      	movs	r0, #68	; 0x44
     9ca:	5215      	strh	r5, [r2, r0]
     9cc:	5cc9      	ldrb	r1, [r1, r3]
     9ce:	0020      	movs	r0, r4
     9d0:	4b04      	ldr	r3, [pc, #16]	; (9e4 <usart_process_byte_sent+0x34>)
     9d2:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     9d4:	0020      	movs	r0, r4
     9d6:	4b04      	ldr	r3, [pc, #16]	; (9e8 <usart_process_byte_sent+0x38>)
     9d8:	4798      	blx	r3
}
     9da:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     9dc:	4b03      	ldr	r3, [pc, #12]	; (9ec <usart_process_byte_sent+0x3c>)
     9de:	4798      	blx	r3
}
     9e0:	e7fb      	b.n	9da <usart_process_byte_sent+0x2a>
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	00001235 	.word	0x00001235
     9e8:	0000123d 	.word	0x0000123d
     9ec:	00001245 	.word	0x00001245

000009f0 <usart_async_read>:
{
     9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9f2:	46ce      	mov	lr, r9
     9f4:	4647      	mov	r7, r8
     9f6:	b580      	push	{r7, lr}
     9f8:	b085      	sub	sp, #20
     9fa:	0005      	movs	r5, r0
     9fc:	000e      	movs	r6, r1
     9fe:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
     a00:	2800      	cmp	r0, #0
     a02:	d015      	beq.n	a30 <usart_async_read+0x40>
     a04:	2900      	cmp	r1, #0
     a06:	d013      	beq.n	a30 <usart_async_read+0x40>
     a08:	2a00      	cmp	r2, #0
     a0a:	d12a      	bne.n	a62 <usart_async_read+0x72>
     a0c:	22ac      	movs	r2, #172	; 0xac
     a0e:	0052      	lsls	r2, r2, #1
     a10:	4929      	ldr	r1, [pc, #164]	; (ab8 <usart_async_read+0xc8>)
     a12:	2000      	movs	r0, #0
     a14:	4b29      	ldr	r3, [pc, #164]	; (abc <usart_async_read+0xcc>)
     a16:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     a18:	a803      	add	r0, sp, #12
     a1a:	4b29      	ldr	r3, [pc, #164]	; (ac0 <usart_async_read+0xd0>)
     a1c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     a1e:	0028      	movs	r0, r5
     a20:	3034      	adds	r0, #52	; 0x34
     a22:	4b28      	ldr	r3, [pc, #160]	; (ac4 <usart_async_read+0xd4>)
     a24:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     a26:	a803      	add	r0, sp, #12
     a28:	4b27      	ldr	r3, [pc, #156]	; (ac8 <usart_async_read+0xd8>)
     a2a:	4798      	blx	r3
	uint16_t                       was_read = 0;
     a2c:	2500      	movs	r5, #0
	return (int32_t)was_read;
     a2e:	e03c      	b.n	aaa <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     a30:	22ac      	movs	r2, #172	; 0xac
     a32:	0052      	lsls	r2, r2, #1
     a34:	4920      	ldr	r1, [pc, #128]	; (ab8 <usart_async_read+0xc8>)
     a36:	2000      	movs	r0, #0
     a38:	4b20      	ldr	r3, [pc, #128]	; (abc <usart_async_read+0xcc>)
     a3a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     a3c:	a803      	add	r0, sp, #12
     a3e:	4b20      	ldr	r3, [pc, #128]	; (ac0 <usart_async_read+0xd0>)
     a40:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     a42:	3534      	adds	r5, #52	; 0x34
     a44:	0028      	movs	r0, r5
     a46:	9501      	str	r5, [sp, #4]
     a48:	4b1e      	ldr	r3, [pc, #120]	; (ac4 <usart_async_read+0xd4>)
     a4a:	4798      	blx	r3
     a4c:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     a4e:	a803      	add	r0, sp, #12
     a50:	4b1d      	ldr	r3, [pc, #116]	; (ac8 <usart_async_read+0xd8>)
     a52:	4798      	blx	r3
	uint16_t                       was_read = 0;
     a54:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     a56:	4643      	mov	r3, r8
     a58:	2b00      	cmp	r3, #0
     a5a:	d026      	beq.n	aaa <usart_async_read+0xba>
     a5c:	2f00      	cmp	r7, #0
     a5e:	d116      	bne.n	a8e <usart_async_read+0x9e>
     a60:	e023      	b.n	aaa <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     a62:	22ac      	movs	r2, #172	; 0xac
     a64:	0052      	lsls	r2, r2, #1
     a66:	4914      	ldr	r1, [pc, #80]	; (ab8 <usart_async_read+0xc8>)
     a68:	2001      	movs	r0, #1
     a6a:	4b14      	ldr	r3, [pc, #80]	; (abc <usart_async_read+0xcc>)
     a6c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     a6e:	a803      	add	r0, sp, #12
     a70:	4b13      	ldr	r3, [pc, #76]	; (ac0 <usart_async_read+0xd0>)
     a72:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     a74:	3534      	adds	r5, #52	; 0x34
     a76:	0028      	movs	r0, r5
     a78:	9501      	str	r5, [sp, #4]
     a7a:	4b12      	ldr	r3, [pc, #72]	; (ac4 <usart_async_read+0xd4>)
     a7c:	4798      	blx	r3
     a7e:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     a80:	a803      	add	r0, sp, #12
     a82:	4b11      	ldr	r3, [pc, #68]	; (ac8 <usart_async_read+0xd8>)
     a84:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     a86:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
     a88:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     a8a:	2b00      	cmp	r3, #0
     a8c:	d00d      	beq.n	aaa <usart_async_read+0xba>
{
     a8e:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     a90:	4b0e      	ldr	r3, [pc, #56]	; (acc <usart_async_read+0xdc>)
     a92:	4699      	mov	r9, r3
     a94:	1c65      	adds	r5, r4, #1
     a96:	b2ad      	uxth	r5, r5
     a98:	1931      	adds	r1, r6, r4
     a9a:	9801      	ldr	r0, [sp, #4]
     a9c:	47c8      	blx	r9
     a9e:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     aa0:	4544      	cmp	r4, r8
     aa2:	d202      	bcs.n	aaa <usart_async_read+0xba>
     aa4:	b2a3      	uxth	r3, r4
     aa6:	429f      	cmp	r7, r3
     aa8:	d8f4      	bhi.n	a94 <usart_async_read+0xa4>
}
     aaa:	0028      	movs	r0, r5
     aac:	b005      	add	sp, #20
     aae:	bc0c      	pop	{r2, r3}
     ab0:	4690      	mov	r8, r2
     ab2:	4699      	mov	r9, r3
     ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ab6:	46c0      	nop			; (mov r8, r8)
     ab8:	00002fc0 	.word	0x00002fc0
     abc:	00000bc1 	.word	0x00000bc1
     ac0:	000007b9 	.word	0x000007b9
     ac4:	00000ca5 	.word	0x00000ca5
     ac8:	000007c7 	.word	0x000007c7
     acc:	00000c1d 	.word	0x00000c1d

00000ad0 <usart_async_init>:
{
     ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ad2:	0004      	movs	r4, r0
     ad4:	000d      	movs	r5, r1
     ad6:	0016      	movs	r6, r2
     ad8:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     ada:	2800      	cmp	r0, #0
     adc:	d026      	beq.n	b2c <usart_async_init+0x5c>
     ade:	2900      	cmp	r1, #0
     ae0:	d026      	beq.n	b30 <usart_async_init+0x60>
     ae2:	2a00      	cmp	r2, #0
     ae4:	d026      	beq.n	b34 <usart_async_init+0x64>
     ae6:	0018      	movs	r0, r3
     ae8:	1e43      	subs	r3, r0, #1
     aea:	4198      	sbcs	r0, r3
     aec:	223a      	movs	r2, #58	; 0x3a
     aee:	4914      	ldr	r1, [pc, #80]	; (b40 <usart_async_init+0x70>)
     af0:	4b14      	ldr	r3, [pc, #80]	; (b44 <usart_async_init+0x74>)
     af2:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     af4:	0020      	movs	r0, r4
     af6:	3034      	adds	r0, #52	; 0x34
     af8:	003a      	movs	r2, r7
     afa:	0031      	movs	r1, r6
     afc:	4b12      	ldr	r3, [pc, #72]	; (b48 <usart_async_init+0x78>)
     afe:	4798      	blx	r3
     b00:	2800      	cmp	r0, #0
     b02:	d119      	bne.n	b38 <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
     b04:	0020      	movs	r0, r4
     b06:	3008      	adds	r0, #8
     b08:	0029      	movs	r1, r5
     b0a:	4b10      	ldr	r3, [pc, #64]	; (b4c <usart_async_init+0x7c>)
     b0c:	4798      	blx	r3
	if (init_status) {
     b0e:	2800      	cmp	r0, #0
     b10:	d10b      	bne.n	b2a <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     b12:	4b0f      	ldr	r3, [pc, #60]	; (b50 <usart_async_init+0x80>)
     b14:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     b16:	4b0f      	ldr	r3, [pc, #60]	; (b54 <usart_async_init+0x84>)
     b18:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     b1a:	4b0f      	ldr	r3, [pc, #60]	; (b58 <usart_async_init+0x88>)
     b1c:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     b1e:	4b0f      	ldr	r3, [pc, #60]	; (b5c <usart_async_init+0x8c>)
     b20:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     b22:	4b0f      	ldr	r3, [pc, #60]	; (b60 <usart_async_init+0x90>)
     b24:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     b26:	4b0f      	ldr	r3, [pc, #60]	; (b64 <usart_async_init+0x94>)
     b28:	6163      	str	r3, [r4, #20]
}
     b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     b2c:	2000      	movs	r0, #0
     b2e:	e7dd      	b.n	aec <usart_async_init+0x1c>
     b30:	2000      	movs	r0, #0
     b32:	e7db      	b.n	aec <usart_async_init+0x1c>
     b34:	2000      	movs	r0, #0
     b36:	e7d9      	b.n	aec <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     b38:	200d      	movs	r0, #13
     b3a:	4240      	negs	r0, r0
     b3c:	e7f5      	b.n	b2a <usart_async_init+0x5a>
     b3e:	46c0      	nop			; (mov r8, r8)
     b40:	00002fc0 	.word	0x00002fc0
     b44:	00000bc1 	.word	0x00000bc1
     b48:	00000bc9 	.word	0x00000bc9
     b4c:	00001191 	.word	0x00001191
     b50:	000009f1 	.word	0x000009f1
     b54:	0000094d 	.word	0x0000094d
     b58:	000009b1 	.word	0x000009b1
     b5c:	00000931 	.word	0x00000931
     b60:	0000090d 	.word	0x0000090d
     b64:	0000091f 	.word	0x0000091f

00000b68 <usart_async_enable>:
{
     b68:	b510      	push	{r4, lr}
     b6a:	0004      	movs	r4, r0
	ASSERT(descr);
     b6c:	1e43      	subs	r3, r0, #1
     b6e:	4198      	sbcs	r0, r3
     b70:	b2c0      	uxtb	r0, r0
     b72:	2261      	movs	r2, #97	; 0x61
     b74:	4904      	ldr	r1, [pc, #16]	; (b88 <usart_async_enable+0x20>)
     b76:	4b05      	ldr	r3, [pc, #20]	; (b8c <usart_async_enable+0x24>)
     b78:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     b7a:	0020      	movs	r0, r4
     b7c:	3008      	adds	r0, #8
     b7e:	4b04      	ldr	r3, [pc, #16]	; (b90 <usart_async_enable+0x28>)
     b80:	4798      	blx	r3
}
     b82:	2000      	movs	r0, #0
     b84:	bd10      	pop	{r4, pc}
     b86:	46c0      	nop			; (mov r8, r8)
     b88:	00002fc0 	.word	0x00002fc0
     b8c:	00000bc1 	.word	0x00000bc1
     b90:	0000120d 	.word	0x0000120d

00000b94 <usart_async_disable>:
{
     b94:	b510      	push	{r4, lr}
     b96:	0004      	movs	r4, r0
	ASSERT(descr);
     b98:	1e43      	subs	r3, r0, #1
     b9a:	4198      	sbcs	r0, r3
     b9c:	b2c0      	uxtb	r0, r0
     b9e:	226c      	movs	r2, #108	; 0x6c
     ba0:	4904      	ldr	r1, [pc, #16]	; (bb4 <usart_async_disable+0x20>)
     ba2:	4b05      	ldr	r3, [pc, #20]	; (bb8 <usart_async_disable+0x24>)
     ba4:	4798      	blx	r3
	_usart_async_disable(&descr->device);
     ba6:	0020      	movs	r0, r4
     ba8:	3008      	adds	r0, #8
     baa:	4b04      	ldr	r3, [pc, #16]	; (bbc <usart_async_disable+0x28>)
     bac:	4798      	blx	r3
}
     bae:	2000      	movs	r0, #0
     bb0:	bd10      	pop	{r4, pc}
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	00002fc0 	.word	0x00002fc0
     bb8:	00000bc1 	.word	0x00000bc1
     bbc:	00001221 	.word	0x00001221

00000bc0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     bc0:	2800      	cmp	r0, #0
     bc2:	d100      	bne.n	bc6 <assert+0x6>
		__asm("BKPT #0");
     bc4:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     bc6:	4770      	bx	lr

00000bc8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     bc8:	b570      	push	{r4, r5, r6, lr}
     bca:	0004      	movs	r4, r0
     bcc:	000e      	movs	r6, r1
     bce:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     bd0:	2800      	cmp	r0, #0
     bd2:	d00b      	beq.n	bec <ringbuffer_init+0x24>
     bd4:	2900      	cmp	r1, #0
     bd6:	d018      	beq.n	c0a <ringbuffer_init+0x42>
     bd8:	2001      	movs	r0, #1
     bda:	2a00      	cmp	r2, #0
     bdc:	d107      	bne.n	bee <ringbuffer_init+0x26>
     bde:	2228      	movs	r2, #40	; 0x28
     be0:	490c      	ldr	r1, [pc, #48]	; (c14 <ringbuffer_init+0x4c>)
     be2:	2000      	movs	r0, #0
     be4:	4b0c      	ldr	r3, [pc, #48]	; (c18 <ringbuffer_init+0x50>)
     be6:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     be8:	1e6b      	subs	r3, r5, #1
     bea:	e007      	b.n	bfc <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
     bec:	2000      	movs	r0, #0
     bee:	2228      	movs	r2, #40	; 0x28
     bf0:	4908      	ldr	r1, [pc, #32]	; (c14 <ringbuffer_init+0x4c>)
     bf2:	4b09      	ldr	r3, [pc, #36]	; (c18 <ringbuffer_init+0x50>)
     bf4:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
     bf6:	1e6b      	subs	r3, r5, #1
     bf8:	422b      	tst	r3, r5
     bfa:	d108      	bne.n	c0e <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     bfc:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     bfe:	2300      	movs	r3, #0
     c00:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     c02:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     c04:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     c06:	2000      	movs	r0, #0
}
     c08:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     c0a:	2000      	movs	r0, #0
     c0c:	e7ef      	b.n	bee <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
     c0e:	200d      	movs	r0, #13
     c10:	4240      	negs	r0, r0
     c12:	e7f9      	b.n	c08 <ringbuffer_init+0x40>
     c14:	00002fe0 	.word	0x00002fe0
     c18:	00000bc1 	.word	0x00000bc1

00000c1c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     c1c:	b570      	push	{r4, r5, r6, lr}
     c1e:	0004      	movs	r4, r0
     c20:	000d      	movs	r5, r1
	ASSERT(rb && data);
     c22:	2800      	cmp	r0, #0
     c24:	d015      	beq.n	c52 <ringbuffer_get+0x36>
     c26:	0008      	movs	r0, r1
     c28:	1e43      	subs	r3, r0, #1
     c2a:	4198      	sbcs	r0, r3
     c2c:	b2c0      	uxtb	r0, r0
     c2e:	2240      	movs	r2, #64	; 0x40
     c30:	490a      	ldr	r1, [pc, #40]	; (c5c <ringbuffer_get+0x40>)
     c32:	4b0b      	ldr	r3, [pc, #44]	; (c60 <ringbuffer_get+0x44>)
     c34:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     c36:	68a3      	ldr	r3, [r4, #8]
     c38:	68e2      	ldr	r2, [r4, #12]
     c3a:	429a      	cmp	r2, r3
     c3c:	d00b      	beq.n	c56 <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
     c3e:	6862      	ldr	r2, [r4, #4]
     c40:	4013      	ands	r3, r2
     c42:	6822      	ldr	r2, [r4, #0]
     c44:	5cd3      	ldrb	r3, [r2, r3]
     c46:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     c48:	68a3      	ldr	r3, [r4, #8]
     c4a:	3301      	adds	r3, #1
     c4c:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     c4e:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     c50:	bd70      	pop	{r4, r5, r6, pc}
     c52:	2000      	movs	r0, #0
     c54:	e7eb      	b.n	c2e <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
     c56:	200a      	movs	r0, #10
     c58:	4240      	negs	r0, r0
     c5a:	e7f9      	b.n	c50 <ringbuffer_get+0x34>
     c5c:	00002fe0 	.word	0x00002fe0
     c60:	00000bc1 	.word	0x00000bc1

00000c64 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     c64:	b570      	push	{r4, r5, r6, lr}
     c66:	0004      	movs	r4, r0
     c68:	000d      	movs	r5, r1
	ASSERT(rb);
     c6a:	1e43      	subs	r3, r0, #1
     c6c:	4198      	sbcs	r0, r3
     c6e:	b2c0      	uxtb	r0, r0
     c70:	2251      	movs	r2, #81	; 0x51
     c72:	490a      	ldr	r1, [pc, #40]	; (c9c <ringbuffer_put+0x38>)
     c74:	4b0a      	ldr	r3, [pc, #40]	; (ca0 <ringbuffer_put+0x3c>)
     c76:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     c78:	6863      	ldr	r3, [r4, #4]
     c7a:	68e2      	ldr	r2, [r4, #12]
     c7c:	4013      	ands	r3, r2
     c7e:	6822      	ldr	r2, [r4, #0]
     c80:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     c82:	68e3      	ldr	r3, [r4, #12]
     c84:	6861      	ldr	r1, [r4, #4]
     c86:	68a2      	ldr	r2, [r4, #8]
     c88:	1a9a      	subs	r2, r3, r2
     c8a:	428a      	cmp	r2, r1
     c8c:	d901      	bls.n	c92 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     c8e:	1a59      	subs	r1, r3, r1
     c90:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     c92:	3301      	adds	r3, #1
     c94:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     c96:	2000      	movs	r0, #0
     c98:	bd70      	pop	{r4, r5, r6, pc}
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	00002fe0 	.word	0x00002fe0
     ca0:	00000bc1 	.word	0x00000bc1

00000ca4 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     ca4:	b510      	push	{r4, lr}
     ca6:	0004      	movs	r4, r0
	ASSERT(rb);
     ca8:	1e43      	subs	r3, r0, #1
     caa:	4198      	sbcs	r0, r3
     cac:	b2c0      	uxtb	r0, r0
     cae:	2267      	movs	r2, #103	; 0x67
     cb0:	4903      	ldr	r1, [pc, #12]	; (cc0 <ringbuffer_num+0x1c>)
     cb2:	4b04      	ldr	r3, [pc, #16]	; (cc4 <ringbuffer_num+0x20>)
     cb4:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     cb6:	68e0      	ldr	r0, [r4, #12]
     cb8:	68a3      	ldr	r3, [r4, #8]
     cba:	1ac0      	subs	r0, r0, r3
}
     cbc:	bd10      	pop	{r4, pc}
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	00002fe0 	.word	0x00002fe0
     cc4:	00000bc1 	.word	0x00000bc1

00000cc8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     cc8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     cca:	4a06      	ldr	r2, [pc, #24]	; (ce4 <_sbrk+0x1c>)
     ccc:	6812      	ldr	r2, [r2, #0]
     cce:	2a00      	cmp	r2, #0
     cd0:	d004      	beq.n	cdc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     cd2:	4a04      	ldr	r2, [pc, #16]	; (ce4 <_sbrk+0x1c>)
     cd4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     cd6:	18c3      	adds	r3, r0, r3
     cd8:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     cda:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     cdc:	4902      	ldr	r1, [pc, #8]	; (ce8 <_sbrk+0x20>)
     cde:	4a01      	ldr	r2, [pc, #4]	; (ce4 <_sbrk+0x1c>)
     ce0:	6011      	str	r1, [r2, #0]
     ce2:	e7f6      	b.n	cd2 <_sbrk+0xa>
     ce4:	200000b0 	.word	0x200000b0
     ce8:	200022c8 	.word	0x200022c8

00000cec <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     cec:	2001      	movs	r0, #1
     cee:	4240      	negs	r0, r0
     cf0:	4770      	bx	lr

00000cf2 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     cf2:	2380      	movs	r3, #128	; 0x80
     cf4:	019b      	lsls	r3, r3, #6
     cf6:	604b      	str	r3, [r1, #4]

	return 0;
}
     cf8:	2000      	movs	r0, #0
     cfa:	4770      	bx	lr

00000cfc <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     cfc:	2001      	movs	r0, #1
     cfe:	4770      	bx	lr

00000d00 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     d00:	2000      	movs	r0, #0
     d02:	4770      	bx	lr

00000d04 <_go_to_sleep>:
  __ASM volatile ("dsb 0xF":::"memory");
     d04:	f3bf 8f4f 	dsb	sy
 * \brief Put MCU to sleep
 */
void _go_to_sleep(void)
{
	__DSB();
	__WFI();
     d08:	bf30      	wfi
}
     d0a:	4770      	bx	lr

00000d0c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     d0c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     d0e:	4b06      	ldr	r3, [pc, #24]	; (d28 <_init_chip+0x1c>)
     d10:	685a      	ldr	r2, [r3, #4]
     d12:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     d14:	4b05      	ldr	r3, [pc, #20]	; (d2c <_init_chip+0x20>)
     d16:	4798      	blx	r3
	_sysctrl_init_sources();
     d18:	4b05      	ldr	r3, [pc, #20]	; (d30 <_init_chip+0x24>)
     d1a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     d1c:	4b05      	ldr	r3, [pc, #20]	; (d34 <_init_chip+0x28>)
     d1e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     d20:	20ff      	movs	r0, #255	; 0xff
     d22:	4b05      	ldr	r3, [pc, #20]	; (d38 <_init_chip+0x2c>)
     d24:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     d26:	bd10      	pop	{r4, pc}
     d28:	41004000 	.word	0x41004000
     d2c:	00000f5d 	.word	0x00000f5d
     d30:	0000132d 	.word	0x0000132d
     d34:	00001371 	.word	0x00001371
     d38:	00000ee9 	.word	0x00000ee9

00000d3c <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     d3c:	4a22      	ldr	r2, [pc, #136]	; (dc8 <_ext_irq_init+0x8c>)
     d3e:	7853      	ldrb	r3, [r2, #1]
     d40:	09db      	lsrs	r3, r3, #7
     d42:	d1fc      	bne.n	d3e <_ext_irq_init+0x2>
     d44:	4a20      	ldr	r2, [pc, #128]	; (dc8 <_ext_irq_init+0x8c>)
     d46:	7853      	ldrb	r3, [r2, #1]
     d48:	09db      	lsrs	r3, r3, #7
     d4a:	d1fc      	bne.n	d46 <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     d4c:	4b1e      	ldr	r3, [pc, #120]	; (dc8 <_ext_irq_init+0x8c>)
     d4e:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     d50:	079b      	lsls	r3, r3, #30
     d52:	d50a      	bpl.n	d6a <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     d54:	2200      	movs	r2, #0
     d56:	4b1c      	ldr	r3, [pc, #112]	; (dc8 <_ext_irq_init+0x8c>)
     d58:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     d5a:	001a      	movs	r2, r3
     d5c:	7853      	ldrb	r3, [r2, #1]
     d5e:	09db      	lsrs	r3, r3, #7
     d60:	d1fc      	bne.n	d5c <_ext_irq_init+0x20>
     d62:	4a19      	ldr	r2, [pc, #100]	; (dc8 <_ext_irq_init+0x8c>)
     d64:	7853      	ldrb	r3, [r2, #1]
     d66:	09db      	lsrs	r3, r3, #7
     d68:	d1fc      	bne.n	d64 <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
     d6a:	2201      	movs	r2, #1
     d6c:	4b16      	ldr	r3, [pc, #88]	; (dc8 <_ext_irq_init+0x8c>)
     d6e:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     d70:	001a      	movs	r2, r3
     d72:	7853      	ldrb	r3, [r2, #1]
     d74:	09db      	lsrs	r3, r3, #7
     d76:	d1fc      	bne.n	d72 <_ext_irq_init+0x36>
     d78:	4a13      	ldr	r2, [pc, #76]	; (dc8 <_ext_irq_init+0x8c>)
     d7a:	7853      	ldrb	r3, [r2, #1]
     d7c:	09db      	lsrs	r3, r3, #7
     d7e:	d1fc      	bne.n	d7a <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     d80:	4b11      	ldr	r3, [pc, #68]	; (dc8 <_ext_irq_init+0x8c>)
     d82:	2200      	movs	r2, #0
     d84:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     d86:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     d88:	2180      	movs	r1, #128	; 0x80
     d8a:	0209      	lsls	r1, r1, #8
     d8c:	6159      	str	r1, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     d8e:	619a      	str	r2, [r3, #24]
     d90:	22a0      	movs	r2, #160	; 0xa0
     d92:	0612      	lsls	r2, r2, #24
     d94:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     d96:	781a      	ldrb	r2, [r3, #0]
     d98:	2102      	movs	r1, #2
     d9a:	430a      	orrs	r2, r1
     d9c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     d9e:	001a      	movs	r2, r3
     da0:	7853      	ldrb	r3, [r2, #1]
     da2:	09db      	lsrs	r3, r3, #7
     da4:	d1fc      	bne.n	da0 <_ext_irq_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     da6:	4b09      	ldr	r3, [pc, #36]	; (dcc <_ext_irq_init+0x90>)
     da8:	2210      	movs	r2, #16
     daa:	2180      	movs	r1, #128	; 0x80
     dac:	505a      	str	r2, [r3, r1]
     dae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     db2:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     db6:	3101      	adds	r1, #1
     db8:	31ff      	adds	r1, #255	; 0xff
     dba:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     dbc:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     dbe:	4b04      	ldr	r3, [pc, #16]	; (dd0 <_ext_irq_init+0x94>)
     dc0:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     dc2:	2000      	movs	r0, #0
     dc4:	4770      	bx	lr
     dc6:	46c0      	nop			; (mov r8, r8)
     dc8:	40001800 	.word	0x40001800
     dcc:	e000e100 	.word	0xe000e100
     dd0:	200000b4 	.word	0x200000b4

00000dd4 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
     dd4:	280f      	cmp	r0, #15
     dd6:	d002      	beq.n	dde <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
     dd8:	200d      	movs	r0, #13
     dda:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
     ddc:	4770      	bx	lr
	if (enable) {
     dde:	2900      	cmp	r1, #0
     de0:	d106      	bne.n	df0 <_ext_irq_enable+0x1c>
	((Eic *)hw)->INTENCLR.reg = mask;
     de2:	4b06      	ldr	r3, [pc, #24]	; (dfc <_ext_irq_enable+0x28>)
     de4:	2280      	movs	r2, #128	; 0x80
     de6:	0212      	lsls	r2, r2, #8
     de8:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     dea:	611a      	str	r2, [r3, #16]
	return ERR_NONE;
     dec:	2000      	movs	r0, #0
     dee:	e7f5      	b.n	ddc <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
     df0:	2280      	movs	r2, #128	; 0x80
     df2:	0212      	lsls	r2, r2, #8
     df4:	4b01      	ldr	r3, [pc, #4]	; (dfc <_ext_irq_enable+0x28>)
     df6:	60da      	str	r2, [r3, #12]
     df8:	2000      	movs	r0, #0
     dfa:	e7ef      	b.n	ddc <_ext_irq_enable+0x8>
     dfc:	40001800 	.word	0x40001800

00000e00 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     e00:	b5f0      	push	{r4, r5, r6, r7, lr}
     e02:	46ce      	mov	lr, r9
     e04:	4647      	mov	r7, r8
     e06:	b580      	push	{r7, lr}
     e08:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
     e0a:	4b31      	ldr	r3, [pc, #196]	; (ed0 <EIC_Handler+0xd0>)
     e0c:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     e0e:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     e10:	400a      	ands	r2, r1
     e12:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     e14:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     e16:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     e18:	4b2e      	ldr	r3, [pc, #184]	; (ed4 <EIC_Handler+0xd4>)
     e1a:	6818      	ldr	r0, [r3, #0]
     e1c:	1e43      	subs	r3, r0, #1
     e1e:	4198      	sbcs	r0, r3
     e20:	b2c0      	uxtb	r0, r0
     e22:	22d2      	movs	r2, #210	; 0xd2
     e24:	492c      	ldr	r1, [pc, #176]	; (ed8 <EIC_Handler+0xd8>)
     e26:	4b2d      	ldr	r3, [pc, #180]	; (edc <EIC_Handler+0xdc>)
     e28:	4798      	blx	r3

	while (flags) {
     e2a:	9b01      	ldr	r3, [sp, #4]
     e2c:	2b00      	cmp	r3, #0
     e2e:	d049      	beq.n	ec4 <EIC_Handler+0xc4>
     e30:	2301      	movs	r3, #1
     e32:	425b      	negs	r3, r3
     e34:	4699      	mov	r9, r3
		pos = ffs(flags) - 1;
     e36:	4b2a      	ldr	r3, [pc, #168]	; (ee0 <EIC_Handler+0xe0>)
     e38:	4698      	mov	r8, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
     e3a:	4f26      	ldr	r7, [pc, #152]	; (ed4 <EIC_Handler+0xd4>)
				if (_map[middle].extint == pos) {
     e3c:	4d29      	ldr	r5, [pc, #164]	; (ee4 <EIC_Handler+0xe4>)
     e3e:	e03a      	b.n	eb6 <EIC_Handler+0xb6>
					upper = middle - 1;
     e40:	3a01      	subs	r2, #1
     e42:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
     e44:	42b1      	cmp	r1, r6
     e46:	d80c      	bhi.n	e62 <EIC_Handler+0x62>
				middle = (upper + lower) >> 1;
     e48:	1873      	adds	r3, r6, r1
     e4a:	105b      	asrs	r3, r3, #1
     e4c:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
     e4e:	4003      	ands	r3, r0
     e50:	00db      	lsls	r3, r3, #3
     e52:	5d5b      	ldrb	r3, [r3, r5]
     e54:	42a3      	cmp	r3, r4
     e56:	d008      	beq.n	e6a <EIC_Handler+0x6a>
				if (_map[middle].extint < pos) {
     e58:	429c      	cmp	r4, r3
     e5a:	ddf1      	ble.n	e40 <EIC_Handler+0x40>
					lower = middle + 1;
     e5c:	3201      	adds	r2, #1
     e5e:	b2d1      	uxtb	r1, r2
     e60:	e7f0      	b.n	e44 <EIC_Handler+0x44>
			if (INVALID_PIN_NUMBER != pin) {
     e62:	464b      	mov	r3, r9
     e64:	3301      	adds	r3, #1
     e66:	d005      	beq.n	e74 <EIC_Handler+0x74>
     e68:	e001      	b.n	e6e <EIC_Handler+0x6e>
     e6a:	230f      	movs	r3, #15
     e6c:	4699      	mov	r9, r3
				callback(pin);
     e6e:	4648      	mov	r0, r9
     e70:	683b      	ldr	r3, [r7, #0]
     e72:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     e74:	9b01      	ldr	r3, [sp, #4]
     e76:	2201      	movs	r2, #1
     e78:	40a2      	lsls	r2, r4
     e7a:	4393      	bics	r3, r2
     e7c:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     e7e:	9801      	ldr	r0, [sp, #4]
     e80:	4b17      	ldr	r3, [pc, #92]	; (ee0 <EIC_Handler+0xe0>)
     e82:	4798      	blx	r3
     e84:	3801      	subs	r0, #1
     e86:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     e88:	1c63      	adds	r3, r4, #1
     e8a:	d00a      	beq.n	ea2 <EIC_Handler+0xa2>
				if (_map[middle].extint == pos) {
     e8c:	2c0f      	cmp	r4, #15
     e8e:	d005      	beq.n	e9c <EIC_Handler+0x9c>
     e90:	230f      	movs	r3, #15
     e92:	2200      	movs	r2, #0
     e94:	2601      	movs	r6, #1
     e96:	2100      	movs	r1, #0
     e98:	20ff      	movs	r0, #255	; 0xff
     e9a:	e7dd      	b.n	e58 <EIC_Handler+0x58>
     e9c:	230f      	movs	r3, #15
     e9e:	4699      	mov	r9, r3
     ea0:	e7e5      	b.n	e6e <EIC_Handler+0x6e>
	return ((Eic *)hw)->INTFLAG.reg;
     ea2:	4b0b      	ldr	r3, [pc, #44]	; (ed0 <EIC_Handler+0xd0>)
     ea4:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     ea6:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     ea8:	400a      	ands	r2, r1
     eaa:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     eac:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     eae:	611a      	str	r2, [r3, #16]
	while (flags) {
     eb0:	9b01      	ldr	r3, [sp, #4]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d006      	beq.n	ec4 <EIC_Handler+0xc4>
		pos = ffs(flags) - 1;
     eb6:	9801      	ldr	r0, [sp, #4]
     eb8:	47c0      	blx	r8
     eba:	3801      	subs	r0, #1
     ebc:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     ebe:	1c63      	adds	r3, r4, #1
     ec0:	d1e4      	bne.n	e8c <EIC_Handler+0x8c>
     ec2:	e7ee      	b.n	ea2 <EIC_Handler+0xa2>
	}
}
     ec4:	b003      	add	sp, #12
     ec6:	bc0c      	pop	{r2, r3}
     ec8:	4690      	mov	r8, r2
     eca:	4699      	mov	r9, r3
     ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ece:	46c0      	nop			; (mov r8, r8)
     ed0:	40001800 	.word	0x40001800
     ed4:	200000b4 	.word	0x200000b4
     ed8:	0000300c 	.word	0x0000300c
     edc:	00000bc1 	.word	0x00000bc1
     ee0:	00001f81 	.word	0x00001f81
     ee4:	00003004 	.word	0x00003004

00000ee8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     ee8:	07c3      	lsls	r3, r0, #31
     eea:	d50a      	bpl.n	f02 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     eec:	4b0b      	ldr	r3, [pc, #44]	; (f1c <_gclk_init_generators_by_fref+0x34>)
     eee:	2280      	movs	r2, #128	; 0x80
     ef0:	0052      	lsls	r2, r2, #1
     ef2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     ef4:	2283      	movs	r2, #131	; 0x83
     ef6:	0252      	lsls	r2, r2, #9
     ef8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     efa:	001a      	movs	r2, r3
     efc:	7853      	ldrb	r3, [r2, #1]
     efe:	09db      	lsrs	r3, r3, #7
     f00:	d1fc      	bne.n	efc <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     f02:	0703      	lsls	r3, r0, #28
     f04:	d509      	bpl.n	f1a <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
     f06:	4b05      	ldr	r3, [pc, #20]	; (f1c <_gclk_init_generators_by_fref+0x34>)
     f08:	2204      	movs	r2, #4
     f0a:	32ff      	adds	r2, #255	; 0xff
     f0c:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     f0e:	4a04      	ldr	r2, [pc, #16]	; (f20 <_gclk_init_generators_by_fref+0x38>)
     f10:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     f12:	001a      	movs	r2, r3
     f14:	7853      	ldrb	r3, [r2, #1]
     f16:	09db      	lsrs	r3, r3, #7
     f18:	d1fc      	bne.n	f14 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     f1a:	4770      	bx	lr
     f1c:	40000c00 	.word	0x40000c00
     f20:	00210303 	.word	0x00210303

00000f24 <_set_sleep_mode>:
/**
 * \brief Set the sleep mode for the device
 */
int32_t _set_sleep_mode(const uint8_t mode)
{
	switch (mode) {
     f24:	2802      	cmp	r0, #2
     f26:	d904      	bls.n	f32 <_set_sleep_mode+0xe>
     f28:	2803      	cmp	r0, #3
     f2a:	d00b      	beq.n	f44 <_set_sleep_mode+0x20>
		return ERR_NONE;
	case 3:
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
		return ERR_NONE;
	default:
		return ERR_INVALID_ARG;
     f2c:	200d      	movs	r0, #13
     f2e:	4240      	negs	r0, r0
     f30:	e007      	b.n	f42 <_set_sleep_mode+0x1e>
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
     f32:	4a08      	ldr	r2, [pc, #32]	; (f54 <_set_sleep_mode+0x30>)
     f34:	6913      	ldr	r3, [r2, #16]
     f36:	2104      	movs	r1, #4
     f38:	438b      	bics	r3, r1
     f3a:	6113      	str	r3, [r2, #16]
		PM->SLEEP.reg = mode;
     f3c:	4b06      	ldr	r3, [pc, #24]	; (f58 <_set_sleep_mode+0x34>)
     f3e:	7058      	strb	r0, [r3, #1]
		return ERR_NONE;
     f40:	2000      	movs	r0, #0
	}
}
     f42:	4770      	bx	lr
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
     f44:	4a03      	ldr	r2, [pc, #12]	; (f54 <_set_sleep_mode+0x30>)
     f46:	6913      	ldr	r3, [r2, #16]
     f48:	2104      	movs	r1, #4
     f4a:	430b      	orrs	r3, r1
     f4c:	6113      	str	r3, [r2, #16]
		return ERR_NONE;
     f4e:	2000      	movs	r0, #0
     f50:	e7f7      	b.n	f42 <_set_sleep_mode+0x1e>
     f52:	46c0      	nop			; (mov r8, r8)
     f54:	e000ed00 	.word	0xe000ed00
     f58:	40000400 	.word	0x40000400

00000f5c <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     f5c:	4b06      	ldr	r3, [pc, #24]	; (f78 <_pm_init+0x1c>)
     f5e:	7a1a      	ldrb	r2, [r3, #8]
     f60:	b2d2      	uxtb	r2, r2
     f62:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     f64:	7a5a      	ldrb	r2, [r3, #9]
     f66:	b2d2      	uxtb	r2, r2
     f68:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     f6a:	7a9a      	ldrb	r2, [r3, #10]
     f6c:	b2d2      	uxtb	r2, r2
     f6e:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     f70:	7ada      	ldrb	r2, [r3, #11]
     f72:	b2d2      	uxtb	r2, r2
     f74:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     f76:	4770      	bx	lr
     f78:	40000400 	.word	0x40000400

00000f7c <_calendar_register_callback>:

/**
 * \brief Registers callback for the specified callback type
 */
int32_t _calendar_register_callback(struct calendar_dev *const dev, calendar_drv_cb_alarm_t callback)
{
     f7c:	b570      	push	{r4, r5, r6, lr}
     f7e:	0004      	movs	r4, r0
     f80:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     f82:	2800      	cmp	r0, #0
     f84:	d015      	beq.n	fb2 <_calendar_register_callback+0x36>
     f86:	6800      	ldr	r0, [r0, #0]
     f88:	1e43      	subs	r3, r0, #1
     f8a:	4198      	sbcs	r0, r3
     f8c:	b2c0      	uxtb	r0, r0
     f8e:	2233      	movs	r2, #51	; 0x33
     f90:	490f      	ldr	r1, [pc, #60]	; (fd0 <_calendar_register_callback+0x54>)
     f92:	4b10      	ldr	r3, [pc, #64]	; (fd4 <_calendar_register_callback+0x58>)
     f94:	4798      	blx	r3

	/* Check callback */
	if (callback != NULL) {
     f96:	2d00      	cmp	r5, #0
     f98:	d00d      	beq.n	fb6 <_calendar_register_callback+0x3a>
		/* register the callback */
		dev->callback = callback;
     f9a:	6065      	str	r5, [r4, #4]
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f9c:	4b0e      	ldr	r3, [pc, #56]	; (fd8 <_calendar_register_callback+0x5c>)
     f9e:	2208      	movs	r2, #8
     fa0:	21c0      	movs	r1, #192	; 0xc0
     fa2:	0049      	lsls	r1, r1, #1
     fa4:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fa6:	601a      	str	r2, [r3, #0]
		/* enable RTC_IRQn */
		NVIC_ClearPendingIRQ(RTC_IRQn);
		NVIC_EnableIRQ(RTC_IRQn);

		/* enable cmp */
		hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
     fa8:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE2.INTFLAG.reg = mask;
}

static inline void hri_rtcmode0_set_INTEN_CMP0_bit(const void *const hw)
{
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     faa:	3a07      	subs	r2, #7
     fac:	71da      	strb	r2, [r3, #7]
		/* disable RTC_IRQn */
		NVIC_DisableIRQ(RTC_IRQn);
	}

	return ERR_NONE;
}
     fae:	2000      	movs	r0, #0
     fb0:	bd70      	pop	{r4, r5, r6, pc}
     fb2:	2000      	movs	r0, #0
     fb4:	e7eb      	b.n	f8e <_calendar_register_callback+0x12>
		hri_rtcmode0_clear_INTEN_CMP0_bit(dev->hw);
     fb6:	6823      	ldr	r3, [r4, #0]
	}
}

static inline void hri_rtcmode0_clear_INTEN_CMP0_bit(const void *const hw)
{
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_CMP0;
     fb8:	2201      	movs	r2, #1
     fba:	719a      	strb	r2, [r3, #6]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fbc:	2108      	movs	r1, #8
     fbe:	2380      	movs	r3, #128	; 0x80
     fc0:	4a05      	ldr	r2, [pc, #20]	; (fd8 <_calendar_register_callback+0x5c>)
     fc2:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
     fc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     fc8:	f3bf 8f6f 	isb	sy
     fcc:	e7ef      	b.n	fae <_calendar_register_callback+0x32>
     fce:	46c0      	nop			; (mov r8, r8)
     fd0:	00003024 	.word	0x00003024
     fd4:	00000bc1 	.word	0x00000bc1
     fd8:	e000e100 	.word	0xe000e100

00000fdc <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
     fdc:	b510      	push	{r4, lr}
     fde:	1e04      	subs	r4, r0, #0
	uint16_t register_value;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     fe0:	d036      	beq.n	1050 <_calendar_init+0x74>
     fe2:	6800      	ldr	r0, [r0, #0]
     fe4:	1e43      	subs	r3, r0, #1
     fe6:	4198      	sbcs	r0, r3
     fe8:	b2c0      	uxtb	r0, r0
     fea:	2278      	movs	r2, #120	; 0x78
     fec:	4919      	ldr	r1, [pc, #100]	; (1054 <_calendar_init+0x78>)
     fee:	4b1a      	ldr	r3, [pc, #104]	; (1058 <_calendar_init+0x7c>)
     ff0:	4798      	blx	r3

	_rtc_dev = dev;
     ff2:	4b1a      	ldr	r3, [pc, #104]	; (105c <_calendar_init+0x80>)
     ff4:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw);
     ff6:	6822      	ldr	r2, [r4, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     ff8:	7a93      	ldrb	r3, [r2, #10]
     ffa:	09db      	lsrs	r3, r3, #7
     ffc:	d1fc      	bne.n	ff8 <_calendar_init+0x1c>
     ffe:	7a93      	ldrb	r3, [r2, #10]
    1000:	09db      	lsrs	r3, r3, #7
    1002:	d1fc      	bne.n	ffe <_calendar_init+0x22>

static inline bool hri_rtcmode0_get_CTRL_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
    1004:	8813      	ldrh	r3, [r2, #0]
	if (hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw)) {
    1006:	079b      	lsls	r3, r3, #30
    1008:	d50a      	bpl.n	1020 <_calendar_init+0x44>
}

static inline void hri_rtcmode0_clear_CTRL_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    100a:	8813      	ldrh	r3, [r2, #0]
    100c:	2102      	movs	r1, #2
    100e:	438b      	bics	r3, r1
    1010:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1012:	7a93      	ldrb	r3, [r2, #10]
    1014:	09db      	lsrs	r3, r3, #7
    1016:	d1fc      	bne.n	1012 <_calendar_init+0x36>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw);
    1018:	6822      	ldr	r2, [r4, #0]
    101a:	7a93      	ldrb	r3, [r2, #10]
    101c:	09db      	lsrs	r3, r3, #7
    101e:	d1fc      	bne.n	101a <_calendar_init+0x3e>
#endif
	}
	hri_rtcmode0_set_CTRL_SWRST_bit(dev->hw);
    1020:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    1022:	8813      	ldrh	r3, [r2, #0]
    1024:	2101      	movs	r1, #1
    1026:	430b      	orrs	r3, r1
    1028:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    102a:	7a93      	ldrb	r3, [r2, #10]
    102c:	09db      	lsrs	r3, r3, #7
    102e:	d1fc      	bne.n	102a <_calendar_init+0x4e>
	hri_rtcmode0_wait_for_sync(dev->hw);
    1030:	6822      	ldr	r2, [r4, #0]
    1032:	7a93      	ldrb	r3, [r2, #10]
    1034:	09db      	lsrs	r3, r3, #7
    1036:	d1fc      	bne.n	1032 <_calendar_init+0x56>
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    1038:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    103a:	7a93      	ldrb	r3, [r2, #10]
    103c:	09db      	lsrs	r3, r3, #7
    103e:	d1fc      	bne.n	103a <_calendar_init+0x5e>
	register_value &= (~RTC_MODE0_CTRL_MATCHCLR);

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	/* set continuously clock read update mode */
	hri_rtcmode0_set_READREQ_RCONT_bit(dev->hw);
    1040:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_rtc_set_READREQ_RCONT_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    1042:	8853      	ldrh	r3, [r2, #2]
    1044:	2180      	movs	r1, #128	; 0x80
    1046:	01c9      	lsls	r1, r1, #7
    1048:	430b      	orrs	r3, r1
    104a:	8053      	strh	r3, [r2, #2]
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	return ERR_NONE;
}
    104c:	2000      	movs	r0, #0
    104e:	bd10      	pop	{r4, pc}
    1050:	2000      	movs	r0, #0
    1052:	e7ca      	b.n	fea <_calendar_init+0xe>
    1054:	00003024 	.word	0x00003024
    1058:	00000bc1 	.word	0x00000bc1
    105c:	200000b8 	.word	0x200000b8

00001060 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    1060:	b510      	push	{r4, lr}
    1062:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1064:	d011      	beq.n	108a <_calendar_enable+0x2a>
    1066:	6800      	ldr	r0, [r0, #0]
    1068:	1e43      	subs	r3, r0, #1
    106a:	4198      	sbcs	r0, r3
    106c:	b2c0      	uxtb	r0, r0
    106e:	22aa      	movs	r2, #170	; 0xaa
    1070:	4907      	ldr	r1, [pc, #28]	; (1090 <_calendar_enable+0x30>)
    1072:	4b08      	ldr	r3, [pc, #32]	; (1094 <_calendar_enable+0x34>)
    1074:	4798      	blx	r3

	/* Enable rtc */
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
    1076:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    1078:	8813      	ldrh	r3, [r2, #0]
    107a:	2102      	movs	r1, #2
    107c:	430b      	orrs	r3, r1
    107e:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1080:	7a93      	ldrb	r3, [r2, #10]
    1082:	09db      	lsrs	r3, r3, #7
    1084:	d1fc      	bne.n	1080 <_calendar_enable+0x20>

	return ERR_NONE;
}
    1086:	2000      	movs	r0, #0
    1088:	bd10      	pop	{r4, pc}
    108a:	2000      	movs	r0, #0
    108c:	e7ef      	b.n	106e <_calendar_enable+0xe>
    108e:	46c0      	nop			; (mov r8, r8)
    1090:	00003024 	.word	0x00003024
    1094:	00000bc1 	.word	0x00000bc1

00001098 <_calendar_set_comp>:

/**
 * \brief Set the compare for the specified value.
 */
int32_t _calendar_set_comp(struct calendar_dev *const dev, const uint32_t comp)
{
    1098:	b570      	push	{r4, r5, r6, lr}
    109a:	0004      	movs	r4, r0
    109c:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    109e:	2800      	cmp	r0, #0
    10a0:	d00f      	beq.n	10c2 <_calendar_set_comp+0x2a>
    10a2:	6800      	ldr	r0, [r0, #0]
    10a4:	1e43      	subs	r3, r0, #1
    10a6:	4198      	sbcs	r0, r3
    10a8:	b2c0      	uxtb	r0, r0
    10aa:	22e4      	movs	r2, #228	; 0xe4
    10ac:	4906      	ldr	r1, [pc, #24]	; (10c8 <_calendar_set_comp+0x30>)
    10ae:	4b07      	ldr	r3, [pc, #28]	; (10cc <_calendar_set_comp+0x34>)
    10b0:	4798      	blx	r3

	/* Set value into alarm register. */
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, comp);
    10b2:	6822      	ldr	r2, [r4, #0]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
    10b4:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
    10b6:	6195      	str	r5, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    10b8:	7a93      	ldrb	r3, [r2, #10]
    10ba:	09db      	lsrs	r3, r3, #7
    10bc:	d1fc      	bne.n	10b8 <_calendar_set_comp+0x20>

	return ERR_NONE;
}
    10be:	2000      	movs	r0, #0
    10c0:	bd70      	pop	{r4, r5, r6, pc}
    10c2:	2000      	movs	r0, #0
    10c4:	e7f1      	b.n	10aa <_calendar_set_comp+0x12>
    10c6:	46c0      	nop			; (mov r8, r8)
    10c8:	00003024 	.word	0x00003024
    10cc:	00000bc1 	.word	0x00000bc1

000010d0 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    10d0:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
    10d2:	4b07      	ldr	r3, [pc, #28]	; (10f0 <RTC_Handler+0x20>)
    10d4:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    10d6:	6823      	ldr	r3, [r4, #0]
    10d8:	7a1b      	ldrb	r3, [r3, #8]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
    10da:	07db      	lsls	r3, r3, #31
    10dc:	d400      	bmi.n	10e0 <RTC_Handler+0x10>
}
    10de:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    10e0:	0020      	movs	r0, r4
    10e2:	6863      	ldr	r3, [r4, #4]
    10e4:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    10e6:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    10e8:	2201      	movs	r2, #1
    10ea:	721a      	strb	r2, [r3, #8]
}
    10ec:	e7f7      	b.n	10de <RTC_Handler+0xe>
    10ee:	46c0      	nop			; (mov r8, r8)
    10f0:	200000b8 	.word	0x200000b8

000010f4 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    10f4:	b510      	push	{r4, lr}
    10f6:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    10f8:	4b1f      	ldr	r3, [pc, #124]	; (1178 <_usart_init+0x84>)
    10fa:	18c3      	adds	r3, r0, r3
    10fc:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    10fe:	b2db      	uxtb	r3, r3
    1100:	2b03      	cmp	r3, #3
    1102:	d004      	beq.n	110e <_usart_init+0x1a>
	ASSERT(false);
    1104:	4a1d      	ldr	r2, [pc, #116]	; (117c <_usart_init+0x88>)
    1106:	491e      	ldr	r1, [pc, #120]	; (1180 <_usart_init+0x8c>)
    1108:	2000      	movs	r0, #0
    110a:	4b1e      	ldr	r3, [pc, #120]	; (1184 <_usart_init+0x90>)
    110c:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    110e:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1110:	07db      	lsls	r3, r3, #31
    1112:	d418      	bmi.n	1146 <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1114:	2203      	movs	r2, #3
    1116:	69e3      	ldr	r3, [r4, #28]
    1118:	421a      	tst	r2, r3
    111a:	d1fc      	bne.n	1116 <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    111c:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    111e:	079b      	lsls	r3, r3, #30
    1120:	d50b      	bpl.n	113a <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1122:	6823      	ldr	r3, [r4, #0]
    1124:	2202      	movs	r2, #2
    1126:	4393      	bics	r3, r2
    1128:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    112a:	3201      	adds	r2, #1
    112c:	69e3      	ldr	r3, [r4, #28]
    112e:	421a      	tst	r2, r3
    1130:	d1fc      	bne.n	112c <_usart_init+0x38>
    1132:	2202      	movs	r2, #2
    1134:	69e3      	ldr	r3, [r4, #28]
    1136:	421a      	tst	r2, r3
    1138:	d1fc      	bne.n	1134 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    113a:	2305      	movs	r3, #5
    113c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    113e:	2203      	movs	r2, #3
    1140:	69e3      	ldr	r3, [r4, #28]
    1142:	421a      	tst	r2, r3
    1144:	d1fc      	bne.n	1140 <_usart_init+0x4c>
    1146:	2201      	movs	r2, #1
    1148:	69e3      	ldr	r3, [r4, #28]
    114a:	421a      	tst	r2, r3
    114c:	d1fc      	bne.n	1148 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    114e:	4b0e      	ldr	r3, [pc, #56]	; (1188 <_usart_init+0x94>)
    1150:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1152:	2203      	movs	r2, #3
    1154:	69e3      	ldr	r3, [r4, #28]
    1156:	421a      	tst	r2, r3
    1158:	d1fc      	bne.n	1154 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    115a:	23c0      	movs	r3, #192	; 0xc0
    115c:	029b      	lsls	r3, r3, #10
    115e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1160:	2207      	movs	r2, #7
    1162:	69e3      	ldr	r3, [r4, #28]
    1164:	421a      	tst	r2, r3
    1166:	d1fc      	bne.n	1162 <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1168:	4b08      	ldr	r3, [pc, #32]	; (118c <_usart_init+0x98>)
    116a:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    116c:	2300      	movs	r3, #0
    116e:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1170:	2230      	movs	r2, #48	; 0x30
    1172:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    1174:	2000      	movs	r0, #0
    1176:	bd10      	pop	{r4, pc}
    1178:	bdfff800 	.word	0xbdfff800
    117c:	0000025e 	.word	0x0000025e
    1180:	0000303c 	.word	0x0000303c
    1184:	00000bc1 	.word	0x00000bc1
    1188:	40100004 	.word	0x40100004
    118c:	ffffc504 	.word	0xffffc504

00001190 <_usart_async_init>:
{
    1190:	b570      	push	{r4, r5, r6, lr}
    1192:	0005      	movs	r5, r0
    1194:	000c      	movs	r4, r1
	ASSERT(device);
    1196:	1e43      	subs	r3, r0, #1
    1198:	4198      	sbcs	r0, r3
    119a:	b2c0      	uxtb	r0, r0
    119c:	22c4      	movs	r2, #196	; 0xc4
    119e:	4914      	ldr	r1, [pc, #80]	; (11f0 <_usart_async_init+0x60>)
    11a0:	4b14      	ldr	r3, [pc, #80]	; (11f4 <_usart_async_init+0x64>)
    11a2:	4798      	blx	r3
	init_status = _usart_init(hw);
    11a4:	0020      	movs	r0, r4
    11a6:	4b14      	ldr	r3, [pc, #80]	; (11f8 <_usart_async_init+0x68>)
    11a8:	4798      	blx	r3
	if (init_status) {
    11aa:	2800      	cmp	r0, #0
    11ac:	d000      	beq.n	11b0 <_usart_async_init+0x20>
}
    11ae:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    11b0:	61ac      	str	r4, [r5, #24]
	if (hw == SERCOM3) {
    11b2:	4b12      	ldr	r3, [pc, #72]	; (11fc <_usart_async_init+0x6c>)
    11b4:	429c      	cmp	r4, r3
    11b6:	d017      	beq.n	11e8 <_usart_async_init+0x58>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    11b8:	4b11      	ldr	r3, [pc, #68]	; (1200 <_usart_async_init+0x70>)
    11ba:	469c      	mov	ip, r3
    11bc:	4464      	add	r4, ip
    11be:	0aa4      	lsrs	r4, r4, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    11c0:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
    11c2:	b2e3      	uxtb	r3, r4
    11c4:	0622      	lsls	r2, r4, #24
    11c6:	d4f2      	bmi.n	11ae <_usart_async_init+0x1e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11c8:	221f      	movs	r2, #31
    11ca:	401a      	ands	r2, r3
    11cc:	2301      	movs	r3, #1
    11ce:	4093      	lsls	r3, r2
    11d0:	4a0c      	ldr	r2, [pc, #48]	; (1204 <_usart_async_init+0x74>)
    11d2:	2180      	movs	r1, #128	; 0x80
    11d4:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    11d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    11da:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11de:	3101      	adds	r1, #1
    11e0:	31ff      	adds	r1, #255	; 0xff
    11e2:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11e4:	6013      	str	r3, [r2, #0]
    11e6:	e7e2      	b.n	11ae <_usart_async_init+0x1e>
		_sercom3_dev = (struct _usart_async_device *)dev;
    11e8:	4b07      	ldr	r3, [pc, #28]	; (1208 <_usart_async_init+0x78>)
    11ea:	601d      	str	r5, [r3, #0]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    11ec:	230c      	movs	r3, #12
    11ee:	e7eb      	b.n	11c8 <_usart_async_init+0x38>
    11f0:	0000303c 	.word	0x0000303c
    11f4:	00000bc1 	.word	0x00000bc1
    11f8:	000010f5 	.word	0x000010f5
    11fc:	42001400 	.word	0x42001400
    1200:	bdfff800 	.word	0xbdfff800
    1204:	e000e100 	.word	0xe000e100
    1208:	200000bc 	.word	0x200000bc

0000120c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    120c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    120e:	6813      	ldr	r3, [r2, #0]
    1210:	2102      	movs	r1, #2
    1212:	430b      	orrs	r3, r1
    1214:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1216:	3101      	adds	r1, #1
    1218:	69d3      	ldr	r3, [r2, #28]
    121a:	4219      	tst	r1, r3
    121c:	d1fc      	bne.n	1218 <_usart_async_enable+0xc>
}
    121e:	4770      	bx	lr

00001220 <_usart_async_disable>:
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    1220:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1222:	6813      	ldr	r3, [r2, #0]
    1224:	2102      	movs	r1, #2
    1226:	438b      	bics	r3, r1
    1228:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    122a:	3101      	adds	r1, #1
    122c:	69d3      	ldr	r3, [r2, #28]
    122e:	4219      	tst	r1, r3
    1230:	d1fc      	bne.n	122c <_usart_async_disable+0xc>
}
    1232:	4770      	bx	lr

00001234 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1234:	6983      	ldr	r3, [r0, #24]
    1236:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1238:	8519      	strh	r1, [r3, #40]	; 0x28
}
    123a:	4770      	bx	lr

0000123c <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    123c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    123e:	2201      	movs	r2, #1
    1240:	759a      	strb	r2, [r3, #22]
}
    1242:	4770      	bx	lr

00001244 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1244:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1246:	2202      	movs	r2, #2
    1248:	759a      	strb	r2, [r3, #22]
}
    124a:	4770      	bx	lr

0000124c <_usart_async_set_irq_state>:
{
    124c:	b570      	push	{r4, r5, r6, lr}
    124e:	0004      	movs	r4, r0
    1250:	000d      	movs	r5, r1
    1252:	0016      	movs	r6, r2
	ASSERT(device);
    1254:	1e43      	subs	r3, r0, #1
    1256:	4198      	sbcs	r0, r3
    1258:	b2c0      	uxtb	r0, r0
    125a:	4a16      	ldr	r2, [pc, #88]	; (12b4 <_usart_async_set_irq_state+0x68>)
    125c:	4916      	ldr	r1, [pc, #88]	; (12b8 <_usart_async_set_irq_state+0x6c>)
    125e:	4b17      	ldr	r3, [pc, #92]	; (12bc <_usart_async_set_irq_state+0x70>)
    1260:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    1262:	2302      	movs	r3, #2
    1264:	002a      	movs	r2, r5
    1266:	439a      	bics	r2, r3
    1268:	d10e      	bne.n	1288 <_usart_async_set_irq_state+0x3c>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    126a:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    126c:	2e00      	cmp	r6, #0
    126e:	d105      	bne.n	127c <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1270:	2201      	movs	r2, #1
    1272:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1274:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1276:	3201      	adds	r2, #1
    1278:	751a      	strb	r2, [r3, #20]
}
    127a:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    127c:	2201      	movs	r2, #1
    127e:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1280:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1282:	3201      	adds	r2, #1
    1284:	759a      	strb	r2, [r3, #22]
    1286:	e7f8      	b.n	127a <_usart_async_set_irq_state+0x2e>
	} else if (USART_ASYNC_RX_DONE == type) {
    1288:	2d01      	cmp	r5, #1
    128a:	d007      	beq.n	129c <_usart_async_set_irq_state+0x50>
	} else if (USART_ASYNC_ERROR == type) {
    128c:	2d03      	cmp	r5, #3
    128e:	d1f4      	bne.n	127a <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    1290:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1292:	2e00      	cmp	r6, #0
    1294:	d00b      	beq.n	12ae <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    1296:	2280      	movs	r2, #128	; 0x80
    1298:	759a      	strb	r2, [r3, #22]
}
    129a:	e7ee      	b.n	127a <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    129c:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    129e:	2e00      	cmp	r6, #0
    12a0:	d102      	bne.n	12a8 <_usart_async_set_irq_state+0x5c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    12a2:	2204      	movs	r2, #4
    12a4:	751a      	strb	r2, [r3, #20]
    12a6:	e7e8      	b.n	127a <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    12a8:	2204      	movs	r2, #4
    12aa:	759a      	strb	r2, [r3, #22]
    12ac:	e7e5      	b.n	127a <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    12ae:	2280      	movs	r2, #128	; 0x80
    12b0:	751a      	strb	r2, [r3, #20]
    12b2:	e7e2      	b.n	127a <_usart_async_set_irq_state+0x2e>
    12b4:	0000021e 	.word	0x0000021e
    12b8:	0000303c 	.word	0x0000303c
    12bc:	00000bc1 	.word	0x00000bc1

000012c0 <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    12c0:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    12c2:	4b19      	ldr	r3, [pc, #100]	; (1328 <SERCOM3_Handler+0x68>)
    12c4:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
    12c6:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    12c8:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    12ca:	07db      	lsls	r3, r3, #31
    12cc:	d502      	bpl.n	12d4 <SERCOM3_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    12ce:	7da3      	ldrb	r3, [r4, #22]
    12d0:	07db      	lsls	r3, r3, #31
    12d2:	d40f      	bmi.n	12f4 <SERCOM3_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    12d4:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    12d6:	079b      	lsls	r3, r3, #30
    12d8:	d502      	bpl.n	12e0 <SERCOM3_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    12da:	7da3      	ldrb	r3, [r4, #22]
    12dc:	079b      	lsls	r3, r3, #30
    12de:	d40e      	bmi.n	12fe <SERCOM3_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    12e0:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    12e2:	075b      	lsls	r3, r3, #29
    12e4:	d515      	bpl.n	1312 <SERCOM3_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    12e6:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    12e8:	2337      	movs	r3, #55	; 0x37
    12ea:	421a      	tst	r2, r3
    12ec:	d00c      	beq.n	1308 <SERCOM3_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    12ee:	3308      	adds	r3, #8
    12f0:	8363      	strh	r3, [r4, #26]
}
    12f2:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    12f4:	2301      	movs	r3, #1
    12f6:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    12f8:	6803      	ldr	r3, [r0, #0]
    12fa:	4798      	blx	r3
    12fc:	e7f9      	b.n	12f2 <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    12fe:	2302      	movs	r3, #2
    1300:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1302:	6883      	ldr	r3, [r0, #8]
    1304:	4798      	blx	r3
    1306:	e7f4      	b.n	12f2 <SERCOM3_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
    1308:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    130a:	b2c9      	uxtb	r1, r1
    130c:	6843      	ldr	r3, [r0, #4]
    130e:	4798      	blx	r3
    1310:	e7ef      	b.n	12f2 <SERCOM3_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1312:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1314:	09db      	lsrs	r3, r3, #7
    1316:	d0ec      	beq.n	12f2 <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1318:	2380      	movs	r3, #128	; 0x80
    131a:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    131c:	68c3      	ldr	r3, [r0, #12]
    131e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1320:	8b63      	ldrh	r3, [r4, #26]
    1322:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1324:	8363      	strh	r3, [r4, #26]
}
    1326:	e7e4      	b.n	12f2 <SERCOM3_Handler+0x32>
    1328:	200000bc 	.word	0x200000bc

0000132c <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    132c:	4b0e      	ldr	r3, [pc, #56]	; (1368 <_sysctrl_init_sources+0x3c>)
    132e:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1330:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1332:	480e      	ldr	r0, [pc, #56]	; (136c <_sysctrl_init_sources+0x40>)
    1334:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1336:	0f92      	lsrs	r2, r2, #30
    1338:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    133a:	2002      	movs	r0, #2
    133c:	4302      	orrs	r2, r0
    133e:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1340:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1342:	699a      	ldr	r2, [r3, #24]
    1344:	4302      	orrs	r2, r0
    1346:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1348:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    134a:	211f      	movs	r1, #31
    134c:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    134e:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1350:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1352:	2208      	movs	r2, #8
    1354:	68cb      	ldr	r3, [r1, #12]
    1356:	421a      	tst	r2, r3
    1358:	d0fc      	beq.n	1354 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    135a:	4a03      	ldr	r2, [pc, #12]	; (1368 <_sysctrl_init_sources+0x3c>)
    135c:	6a13      	ldr	r3, [r2, #32]
    135e:	2180      	movs	r1, #128	; 0x80
    1360:	430b      	orrs	r3, r1
    1362:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1364:	4770      	bx	lr
    1366:	46c0      	nop			; (mov r8, r8)
    1368:	40000800 	.word	0x40000800
    136c:	0fff0000 	.word	0x0fff0000

00001370 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1370:	4a02      	ldr	r2, [pc, #8]	; (137c <_sysctrl_init_referenced_generators+0xc>)
    1372:	6993      	ldr	r3, [r2, #24]
    1374:	2102      	movs	r1, #2
    1376:	438b      	bics	r3, r1
    1378:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    137a:	4770      	bx	lr
    137c:	40000800 	.word	0x40000800

00001380 <idle_task_fn>:
}

// =============================================================================
// local (static) code

static void *idle_task_fn(void *ctx, void *arg) {
    1380:	b510      	push	{r4, lr}
  // ctx is unused in idle task
  // scheduler is passed as the second argument.
  mu_sched_t *sched = (mu_sched_t *)arg;
  mu_sched_event_t *next_event = mu_sched_get_next_event(sched);
    1382:	0008      	movs	r0, r1
    1384:	4b0c      	ldr	r3, [pc, #48]	; (13b8 <idle_task_fn+0x38>)
    1386:	4798      	blx	r3
    1388:	0004      	movs	r4, r0
  // If you have peripherals that are active or other factors that should
  // prevent the processor from going to sleep, you would check for it here
  // and return false to inhibit going to sleep.

  // In this case, only allow sleep if in low power mode.
  return mu_task_demo_is_low_power_mode();
    138a:	4b0c      	ldr	r3, [pc, #48]	; (13bc <idle_task_fn+0x3c>)
    138c:	4798      	blx	r3
  if (is_ready_to_sleep()) {
    138e:	2800      	cmp	r0, #0
    1390:	d101      	bne.n	1396 <idle_task_fn+0x16>
}
    1392:	2000      	movs	r0, #0
    1394:	bd10      	pop	{r4, pc}
}

static void will_sleep(void) {
  // If you have any last-moment cleanup that needs to be done before the
  // processor goes to sleep, you would do it here.
  usart_async_disable(&USART_0);
    1396:	480a      	ldr	r0, [pc, #40]	; (13c0 <idle_task_fn+0x40>)
    1398:	4b0a      	ldr	r3, [pc, #40]	; (13c4 <idle_task_fn+0x44>)
    139a:	4798      	blx	r3
  asm("nop");
    139c:	46c0      	nop			; (mov r8, r8)
    if (next_event) {
    139e:	2c00      	cmp	r4, #0
    13a0:	d007      	beq.n	13b2 <idle_task_fn+0x32>
      mu_vm_sleep_until(next_event->time);
    13a2:	6820      	ldr	r0, [r4, #0]
    13a4:	4b08      	ldr	r3, [pc, #32]	; (13c8 <idle_task_fn+0x48>)
    13a6:	4798      	blx	r3
}

static void did_wake(void) {
  // If you have anything that needs to be done when the processor wakes from
  // sleep, you would do it here.
  usart_async_enable(&USART_0);
    13a8:	4805      	ldr	r0, [pc, #20]	; (13c0 <idle_task_fn+0x40>)
    13aa:	4b08      	ldr	r3, [pc, #32]	; (13cc <idle_task_fn+0x4c>)
    13ac:	4798      	blx	r3
  asm("nop");
    13ae:	46c0      	nop			; (mov r8, r8)
    13b0:	e7ef      	b.n	1392 <idle_task_fn+0x12>
      mu_vm_sleep();
    13b2:	4b07      	ldr	r3, [pc, #28]	; (13d0 <idle_task_fn+0x50>)
    13b4:	4798      	blx	r3
    13b6:	e7f7      	b.n	13a8 <idle_task_fn+0x28>
    13b8:	00000209 	.word	0x00000209
    13bc:	0000162d 	.word	0x0000162d
    13c0:	20000270 	.word	0x20000270
    13c4:	00000b95 	.word	0x00000b95
    13c8:	00001a09 	.word	0x00001a09
    13cc:	00000b69 	.word	0x00000b69
    13d0:	00001a35 	.word	0x00001a35

000013d4 <idle_task_init>:
mu_task_t *idle_task_init(mu_task_t *idle_task, mu_sched_t *sched) {
    13d4:	b570      	push	{r4, r5, r6, lr}
    13d6:	0004      	movs	r4, r0
    13d8:	000d      	movs	r5, r1
  mu_task_init(idle_task, idle_task_fn, NULL, "Sleeping Idle");
    13da:	4b05      	ldr	r3, [pc, #20]	; (13f0 <idle_task_init+0x1c>)
    13dc:	2200      	movs	r2, #0
    13de:	4905      	ldr	r1, [pc, #20]	; (13f4 <idle_task_init+0x20>)
    13e0:	4e05      	ldr	r6, [pc, #20]	; (13f8 <idle_task_init+0x24>)
    13e2:	47b0      	blx	r6
  mu_sched_set_idle_task(sched, idle_task);
    13e4:	0021      	movs	r1, r4
    13e6:	0028      	movs	r0, r5
    13e8:	4b04      	ldr	r3, [pc, #16]	; (13fc <idle_task_init+0x28>)
    13ea:	4798      	blx	r3
}
    13ec:	0020      	movs	r0, r4
    13ee:	bd70      	pop	{r4, r5, r6, pc}
    13f0:	00003058 	.word	0x00003058
    13f4:	00001381 	.word	0x00001381
    13f8:	00000497 	.word	0x00000497
    13fc:	000001fd 	.word	0x000001fd

00001400 <kbd_cb>:
}

// kbd_cb is triggered when the UART receives a character and generates an
// interrupt.  From interrupt level, schedule the kbd task upon leaving
// interrupt level.
static void kbd_cb(void *context) {
    1400:	b510      	push	{r4, lr}
  kbd_ctx_t *kbd_ctx = (kbd_ctx_t *)context;
  mu_task_t *task = kbd_ctx->task;
  mu_sched_t *sched = kbd_ctx->sched;
  mu_sched_task_from_isr(sched, task);
    1402:	6801      	ldr	r1, [r0, #0]
    1404:	6840      	ldr	r0, [r0, #4]
    1406:	4b01      	ldr	r3, [pc, #4]	; (140c <kbd_cb+0xc>)
    1408:	4798      	blx	r3
}
    140a:	bd10      	pop	{r4, pc}
    140c:	0000037d 	.word	0x0000037d

00001410 <kbd_task_fn>:
static void *kbd_task_fn(void *ctx, void *arg) {
    1410:	b510      	push	{r4, lr}
  uint8_t ch = mu_vm_serial_read();
    1412:	4b0d      	ldr	r3, [pc, #52]	; (1448 <kbd_task_fn+0x38>)
    1414:	4798      	blx	r3
  switch (ch) {
    1416:	3842      	subs	r0, #66	; 0x42
    1418:	b2c3      	uxtb	r3, r0
    141a:	2b2e      	cmp	r3, #46	; 0x2e
    141c:	d805      	bhi.n	142a <kbd_task_fn+0x1a>
    141e:	0098      	lsls	r0, r3, #2
    1420:	4b0a      	ldr	r3, [pc, #40]	; (144c <kbd_task_fn+0x3c>)
    1422:	581b      	ldr	r3, [r3, r0]
    1424:	469f      	mov	pc, r3
    mu_task_demo_start_led_task();
    1426:	4b0a      	ldr	r3, [pc, #40]	; (1450 <kbd_task_fn+0x40>)
    1428:	4798      	blx	r3
}
    142a:	2000      	movs	r0, #0
    142c:	bd10      	pop	{r4, pc}
    mu_task_demo_stop_led_task();
    142e:	4b09      	ldr	r3, [pc, #36]	; (1454 <kbd_task_fn+0x44>)
    1430:	4798      	blx	r3
    break;
    1432:	e7fa      	b.n	142a <kbd_task_fn+0x1a>
    mu_task_demo_start_screen_update_task();
    1434:	4b08      	ldr	r3, [pc, #32]	; (1458 <kbd_task_fn+0x48>)
    1436:	4798      	blx	r3
    break;
    1438:	e7f7      	b.n	142a <kbd_task_fn+0x1a>
    mu_task_demo_stop_screen_update_task();
    143a:	4b08      	ldr	r3, [pc, #32]	; (145c <kbd_task_fn+0x4c>)
    143c:	4798      	blx	r3
    break;
    143e:	e7f4      	b.n	142a <kbd_task_fn+0x1a>
    mu_task_demo_set_low_power_mode(true);
    1440:	2001      	movs	r0, #1
    1442:	4b07      	ldr	r3, [pc, #28]	; (1460 <kbd_task_fn+0x50>)
    1444:	4798      	blx	r3
    break;
    1446:	e7f0      	b.n	142a <kbd_task_fn+0x1a>
    1448:	00001989 	.word	0x00001989
    144c:	00003068 	.word	0x00003068
    1450:	000014c5 	.word	0x000014c5
    1454:	000014ad 	.word	0x000014ad
    1458:	000014fd 	.word	0x000014fd
    145c:	000014e5 	.word	0x000014e5
    1460:	00001615 	.word	0x00001615

00001464 <kbd_task_init>:
                         mu_sched_t *sched) {
    1464:	b570      	push	{r4, r5, r6, lr}
    1466:	0005      	movs	r5, r0
    1468:	000c      	movs	r4, r1
  kbd_ctx->task = kbd_task;
    146a:	6020      	str	r0, [r4, #0]
  kbd_ctx->sched = sched;
    146c:	604a      	str	r2, [r1, #4]
  mu_task_init(kbd_task, kbd_task_fn, kbd_ctx, "Keyboard Task");
    146e:	4b05      	ldr	r3, [pc, #20]	; (1484 <kbd_task_init+0x20>)
    1470:	000a      	movs	r2, r1
    1472:	4905      	ldr	r1, [pc, #20]	; (1488 <kbd_task_init+0x24>)
    1474:	4e05      	ldr	r6, [pc, #20]	; (148c <kbd_task_init+0x28>)
    1476:	47b0      	blx	r6
  mu_vm_serial_set_read_cb(kbd_cb, kbd_ctx);
    1478:	0021      	movs	r1, r4
    147a:	4805      	ldr	r0, [pc, #20]	; (1490 <kbd_task_init+0x2c>)
    147c:	4b05      	ldr	r3, [pc, #20]	; (1494 <kbd_task_init+0x30>)
    147e:	4798      	blx	r3
}
    1480:	0028      	movs	r0, r5
    1482:	bd70      	pop	{r4, r5, r6, pc}
    1484:	00003124 	.word	0x00003124
    1488:	00001411 	.word	0x00001411
    148c:	00000497 	.word	0x00000497
    1490:	00001401 	.word	0x00001401
    1494:	000019d9 	.word	0x000019d9

00001498 <mu_task_demo_step>:
  mu_task_demo_start_screen_update_task();

  mu_task_demo_set_low_power_mode(false);  // start in full power mode
}

void mu_task_demo_step() {
    1498:	b510      	push	{r4, lr}
  // called repeatedly from main(): run the scheduler
  mu_sched_step(&s_sched);
    149a:	4802      	ldr	r0, [pc, #8]	; (14a4 <mu_task_demo_step+0xc>)
    149c:	4b02      	ldr	r3, [pc, #8]	; (14a8 <mu_task_demo_step+0x10>)
    149e:	4798      	blx	r3
}
    14a0:	bd10      	pop	{r4, pc}
    14a2:	46c0      	nop			; (mov r8, r8)
    14a4:	200000c0 	.word	0x200000c0
    14a8:	00000225 	.word	0x00000225

000014ac <mu_task_demo_stop_led_task>:
void mu_task_demo_start_led_task(void) {
  mu_task_demo_stop_led_task();  // stop if already running
  mu_sched_task_now(&s_sched, &s_tasks[LED_TASK_IDX]);
}

void mu_task_demo_stop_led_task(void) {
    14ac:	b510      	push	{r4, lr}
  mu_sched_remove_task(&s_sched, &s_tasks[LED_TASK_IDX]);
    14ae:	4803      	ldr	r0, [pc, #12]	; (14bc <mu_task_demo_stop_led_task+0x10>)
    14b0:	0001      	movs	r1, r0
    14b2:	3120      	adds	r1, #32
    14b4:	4b02      	ldr	r3, [pc, #8]	; (14c0 <mu_task_demo_stop_led_task+0x14>)
    14b6:	4798      	blx	r3
}
    14b8:	bd10      	pop	{r4, pc}
    14ba:	46c0      	nop			; (mov r8, r8)
    14bc:	200000c0 	.word	0x200000c0
    14c0:	000002b1 	.word	0x000002b1

000014c4 <mu_task_demo_start_led_task>:
void mu_task_demo_start_led_task(void) {
    14c4:	b510      	push	{r4, lr}
  mu_task_demo_stop_led_task();  // stop if already running
    14c6:	4b04      	ldr	r3, [pc, #16]	; (14d8 <mu_task_demo_start_led_task+0x14>)
    14c8:	4798      	blx	r3
  mu_sched_task_now(&s_sched, &s_tasks[LED_TASK_IDX]);
    14ca:	4804      	ldr	r0, [pc, #16]	; (14dc <mu_task_demo_start_led_task+0x18>)
    14cc:	0001      	movs	r1, r0
    14ce:	3120      	adds	r1, #32
    14d0:	4b03      	ldr	r3, [pc, #12]	; (14e0 <mu_task_demo_start_led_task+0x1c>)
    14d2:	4798      	blx	r3
}
    14d4:	bd10      	pop	{r4, pc}
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	000014ad 	.word	0x000014ad
    14dc:	200000c0 	.word	0x200000c0
    14e0:	00000305 	.word	0x00000305

000014e4 <mu_task_demo_stop_screen_update_task>:
void mu_task_demo_start_screen_update_task(void) {
  mu_task_demo_stop_screen_update_task();
  mu_sched_task_now(&s_sched, &s_tasks[SCREEN_UPDATE_TASK_IDX]);
}

void mu_task_demo_stop_screen_update_task(void) {
    14e4:	b510      	push	{r4, lr}
  mu_sched_remove_task(&s_sched, &s_tasks[SCREEN_UPDATE_TASK_IDX]);
    14e6:	4803      	ldr	r0, [pc, #12]	; (14f4 <mu_task_demo_stop_screen_update_task+0x10>)
    14e8:	0001      	movs	r1, r0
    14ea:	3150      	adds	r1, #80	; 0x50
    14ec:	4b02      	ldr	r3, [pc, #8]	; (14f8 <mu_task_demo_stop_screen_update_task+0x14>)
    14ee:	4798      	blx	r3
}
    14f0:	bd10      	pop	{r4, pc}
    14f2:	46c0      	nop			; (mov r8, r8)
    14f4:	200000c0 	.word	0x200000c0
    14f8:	000002b1 	.word	0x000002b1

000014fc <mu_task_demo_start_screen_update_task>:
void mu_task_demo_start_screen_update_task(void) {
    14fc:	b510      	push	{r4, lr}
  mu_task_demo_stop_screen_update_task();
    14fe:	4b04      	ldr	r3, [pc, #16]	; (1510 <mu_task_demo_start_screen_update_task+0x14>)
    1500:	4798      	blx	r3
  mu_sched_task_now(&s_sched, &s_tasks[SCREEN_UPDATE_TASK_IDX]);
    1502:	4804      	ldr	r0, [pc, #16]	; (1514 <mu_task_demo_start_screen_update_task+0x18>)
    1504:	0001      	movs	r1, r0
    1506:	3150      	adds	r1, #80	; 0x50
    1508:	4b03      	ldr	r3, [pc, #12]	; (1518 <mu_task_demo_start_screen_update_task+0x1c>)
    150a:	4798      	blx	r3
}
    150c:	bd10      	pop	{r4, pc}
    150e:	46c0      	nop			; (mov r8, r8)
    1510:	000014e5 	.word	0x000014e5
    1514:	200000c0 	.word	0x200000c0
    1518:	00000305 	.word	0x00000305

0000151c <mu_task_demo_init>:
void mu_task_demo_init() {
    151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  mu_vm_init();
    151e:	4b29      	ldr	r3, [pc, #164]	; (15c4 <mu_task_demo_init+0xa8>)
    1520:	4798      	blx	r3
  printf("\n\n# ===========\n");
    1522:	4829      	ldr	r0, [pc, #164]	; (15c8 <mu_task_demo_init+0xac>)
    1524:	4b29      	ldr	r3, [pc, #164]	; (15cc <mu_task_demo_init+0xb0>)
    1526:	4798      	blx	r3
  printf("# mu_task_demo %s: see https://github.com/rdpoor/mulib\n",
    1528:	4929      	ldr	r1, [pc, #164]	; (15d0 <mu_task_demo_init+0xb4>)
    152a:	482a      	ldr	r0, [pc, #168]	; (15d4 <mu_task_demo_init+0xb8>)
    152c:	4b2a      	ldr	r3, [pc, #168]	; (15d8 <mu_task_demo_init+0xbc>)
    152e:	4798      	blx	r3
  mu_spscq_init(&s_isr_queue, s_isr_queue_items, ISR_Q_CAPACITY);
    1530:	4c2a      	ldr	r4, [pc, #168]	; (15dc <mu_task_demo_init+0xc0>)
    1532:	0021      	movs	r1, r4
    1534:	3130      	adds	r1, #48	; 0x30
    1536:	0025      	movs	r5, r4
    1538:	3550      	adds	r5, #80	; 0x50
    153a:	2208      	movs	r2, #8
    153c:	0028      	movs	r0, r5
    153e:	4b28      	ldr	r3, [pc, #160]	; (15e0 <mu_task_demo_init+0xc4>)
    1540:	4798      	blx	r3
  mu_sched_init(&s_sched, s_event_queue, EVENT_QUEUE_CAPACITY, &s_isr_queue);
    1542:	0021      	movs	r1, r4
    1544:	315c      	adds	r1, #92	; 0x5c
    1546:	4c27      	ldr	r4, [pc, #156]	; (15e4 <mu_task_demo_init+0xc8>)
    1548:	002b      	movs	r3, r5
    154a:	220a      	movs	r2, #10
    154c:	0020      	movs	r0, r4
    154e:	4d26      	ldr	r5, [pc, #152]	; (15e8 <mu_task_demo_init+0xcc>)
    1550:	47a8      	blx	r5
  led_task_init(&s_tasks[LED_TASK_IDX], &s_led_ctx);
    1552:	4d26      	ldr	r5, [pc, #152]	; (15ec <mu_task_demo_init+0xd0>)
    1554:	0029      	movs	r1, r5
    1556:	312c      	adds	r1, #44	; 0x2c
    1558:	0027      	movs	r7, r4
    155a:	3720      	adds	r7, #32
    155c:	0038      	movs	r0, r7
    155e:	4b24      	ldr	r3, [pc, #144]	; (15f0 <mu_task_demo_init+0xd4>)
    1560:	4798      	blx	r3
  button_task_init(&s_tasks[BUTTON_TASK_IDX], &s_button_ctx, &s_sched);
    1562:	0029      	movs	r1, r5
    1564:	3130      	adds	r1, #48	; 0x30
    1566:	0020      	movs	r0, r4
    1568:	3038      	adds	r0, #56	; 0x38
    156a:	0022      	movs	r2, r4
    156c:	4b21      	ldr	r3, [pc, #132]	; (15f4 <mu_task_demo_init+0xd8>)
    156e:	4798      	blx	r3
  screen_update_task_init(&s_tasks[SCREEN_UPDATE_TASK_IDX],
    1570:	0026      	movs	r6, r4
    1572:	3668      	adds	r6, #104	; 0x68
    1574:	0029      	movs	r1, r5
    1576:	3138      	adds	r1, #56	; 0x38
    1578:	0020      	movs	r0, r4
    157a:	3050      	adds	r0, #80	; 0x50
    157c:	0032      	movs	r2, r6
    157e:	4b1e      	ldr	r3, [pc, #120]	; (15f8 <mu_task_demo_init+0xdc>)
    1580:	4798      	blx	r3
  screen_redraw_task_init(&s_tasks[SCREEN_REDRAW_TASK_IDX],
    1582:	0029      	movs	r1, r5
    1584:	313c      	adds	r1, #60	; 0x3c
    1586:	2306      	movs	r3, #6
    1588:	003a      	movs	r2, r7
    158a:	0030      	movs	r0, r6
    158c:	4e1b      	ldr	r6, [pc, #108]	; (15fc <mu_task_demo_init+0xe0>)
    158e:	47b0      	blx	r6
  kbd_task_init(&s_tasks[KBD_TASK_IDX], &s_kbd_ctx, &s_sched);
    1590:	0029      	movs	r1, r5
    1592:	314c      	adds	r1, #76	; 0x4c
    1594:	0020      	movs	r0, r4
    1596:	3080      	adds	r0, #128	; 0x80
    1598:	0022      	movs	r2, r4
    159a:	4b19      	ldr	r3, [pc, #100]	; (1600 <mu_task_demo_init+0xe4>)
    159c:	4798      	blx	r3
  idle_task_init(&s_tasks[IDLE_TASK_IDX], &s_sched);
    159e:	0026      	movs	r6, r4
    15a0:	3698      	adds	r6, #152	; 0x98
    15a2:	0021      	movs	r1, r4
    15a4:	0030      	movs	r0, r6
    15a6:	4b17      	ldr	r3, [pc, #92]	; (1604 <mu_task_demo_init+0xe8>)
    15a8:	4798      	blx	r3
  mu_sched_set_idle_task(&s_sched, &s_tasks[IDLE_TASK_IDX]);
    15aa:	0031      	movs	r1, r6
    15ac:	0020      	movs	r0, r4
    15ae:	4b16      	ldr	r3, [pc, #88]	; (1608 <mu_task_demo_init+0xec>)
    15b0:	4798      	blx	r3
  mu_task_demo_start_led_task();
    15b2:	4b16      	ldr	r3, [pc, #88]	; (160c <mu_task_demo_init+0xf0>)
    15b4:	4798      	blx	r3
  mu_task_demo_start_screen_update_task();
    15b6:	4c16      	ldr	r4, [pc, #88]	; (1610 <mu_task_demo_init+0xf4>)
    15b8:	47a0      	blx	r4

void mu_task_demo_set_low_power_mode(bool low_power) {
  s_is_low_power_mode = low_power;
    15ba:	2200      	movs	r2, #0
    15bc:	2358      	movs	r3, #88	; 0x58
    15be:	54ea      	strb	r2, [r5, r3]
  mu_task_demo_start_screen_update_task(); // force immediate redraw
    15c0:	47a0      	blx	r4
}
    15c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15c4:	000017d1 	.word	0x000017d1
    15c8:	00003134 	.word	0x00003134
    15cc:	00002159 	.word	0x00002159
    15d0:	00003144 	.word	0x00003144
    15d4:	0000314c 	.word	0x0000314c
    15d8:	00002065 	.word	0x00002065
    15dc:	20000140 	.word	0x20000140
    15e0:	00000401 	.word	0x00000401
    15e4:	200000c0 	.word	0x200000c0
    15e8:	000001c1 	.word	0x000001c1
    15ec:	200001c0 	.word	0x200001c0
    15f0:	000016ed 	.word	0x000016ed
    15f4:	00001661 	.word	0x00001661
    15f8:	00001c75 	.word	0x00001c75
    15fc:	00001c19 	.word	0x00001c19
    1600:	00001465 	.word	0x00001465
    1604:	000013d5 	.word	0x000013d5
    1608:	000001fd 	.word	0x000001fd
    160c:	000014c5 	.word	0x000014c5
    1610:	000014fd 	.word	0x000014fd

00001614 <mu_task_demo_set_low_power_mode>:
void mu_task_demo_set_low_power_mode(bool low_power) {
    1614:	b510      	push	{r4, lr}
  s_is_low_power_mode = low_power;
    1616:	2358      	movs	r3, #88	; 0x58
    1618:	4a02      	ldr	r2, [pc, #8]	; (1624 <mu_task_demo_set_low_power_mode+0x10>)
    161a:	54d0      	strb	r0, [r2, r3]
  mu_task_demo_start_screen_update_task(); // force immediate redraw
    161c:	4b02      	ldr	r3, [pc, #8]	; (1628 <mu_task_demo_set_low_power_mode+0x14>)
    161e:	4798      	blx	r3
}
    1620:	bd10      	pop	{r4, pc}
    1622:	46c0      	nop			; (mov r8, r8)
    1624:	200001c0 	.word	0x200001c0
    1628:	000014fd 	.word	0x000014fd

0000162c <mu_task_demo_is_low_power_mode>:

bool mu_task_demo_is_low_power_mode(void) {
  return s_is_low_power_mode;
    162c:	2358      	movs	r3, #88	; 0x58
    162e:	4a01      	ldr	r2, [pc, #4]	; (1634 <mu_task_demo_is_low_power_mode+0x8>)
    1630:	5cd0      	ldrb	r0, [r2, r3]
}
    1632:	4770      	bx	lr
    1634:	200001c0 	.word	0x200001c0

00001638 <button_task_fn>:
}

// =============================================================================
// local (static) code

static void *button_task_fn(void *ctx, void *arg) {
    1638:	b510      	push	{r4, lr}
  // button context (unused) is passed as first arg, scheduler as second.
  // both unused.
  mu_task_demo_set_low_power_mode(false);
    163a:	2000      	movs	r0, #0
    163c:	4b01      	ldr	r3, [pc, #4]	; (1644 <button_task_fn+0xc>)
    163e:	4798      	blx	r3
  return NULL;
}
    1640:	2000      	movs	r0, #0
    1642:	bd10      	pop	{r4, pc}
    1644:	00001615 	.word	0x00001615

00001648 <button_cb>:

// button_cb is triggered when a button press generates an interrupt.
// From interrupt level, schedule the button task upon leaving interrupt level.
static void button_cb(void *arg) {
    1648:	b510      	push	{r4, lr}
  mu_sched_task_from_isr(s_sched, s_button_task);
    164a:	4b03      	ldr	r3, [pc, #12]	; (1658 <button_cb+0x10>)
    164c:	6819      	ldr	r1, [r3, #0]
    164e:	6858      	ldr	r0, [r3, #4]
    1650:	4b02      	ldr	r3, [pc, #8]	; (165c <button_cb+0x14>)
    1652:	4798      	blx	r3
}
    1654:	bd10      	pop	{r4, pc}
    1656:	46c0      	nop			; (mov r8, r8)
    1658:	2000021c 	.word	0x2000021c
    165c:	0000037d 	.word	0x0000037d

00001660 <button_task_init>:
                            mu_sched_t *sched) {
    1660:	b570      	push	{r4, r5, r6, lr}
    1662:	0004      	movs	r4, r0
  s_button_task = button_task;
    1664:	4b07      	ldr	r3, [pc, #28]	; (1684 <button_task_init+0x24>)
    1666:	6018      	str	r0, [r3, #0]
  s_sched = sched;
    1668:	605a      	str	r2, [r3, #4]
  mu_vm_button_set_cb(button_cb, NULL);
    166a:	2100      	movs	r1, #0
    166c:	4806      	ldr	r0, [pc, #24]	; (1688 <button_task_init+0x28>)
    166e:	4b07      	ldr	r3, [pc, #28]	; (168c <button_task_init+0x2c>)
    1670:	4798      	blx	r3
  mu_task_init(button_task, button_task_fn, NULL, "Button Pushed");
    1672:	4b07      	ldr	r3, [pc, #28]	; (1690 <button_task_init+0x30>)
    1674:	2200      	movs	r2, #0
    1676:	4907      	ldr	r1, [pc, #28]	; (1694 <button_task_init+0x34>)
    1678:	0020      	movs	r0, r4
    167a:	4d07      	ldr	r5, [pc, #28]	; (1698 <button_task_init+0x38>)
    167c:	47a8      	blx	r5
}
    167e:	0020      	movs	r0, r4
    1680:	bd70      	pop	{r4, r5, r6, pc}
    1682:	46c0      	nop			; (mov r8, r8)
    1684:	2000021c 	.word	0x2000021c
    1688:	00001649 	.word	0x00001649
    168c:	000018f9 	.word	0x000018f9
    1690:	00003184 	.word	0x00003184
    1694:	00001639 	.word	0x00001639
    1698:	00000497 	.word	0x00000497

0000169c <led_task_fn>:
}

// =============================================================================
// local (static) code

static void *led_task_fn(void *ctx, void *arg) {
    169c:	b570      	push	{r4, r5, r6, lr}
    169e:	0004      	movs	r4, r0
    16a0:	000d      	movs	r5, r1
  // "context" is passed as the first argument, scheduler is second
  led_ctx_t *led_ctx = (led_ctx_t *)ctx;
  mu_sched_t *sched = (mu_sched_t *)arg;

  if (led_ctx->state == LED_OFF) {
    16a2:	7803      	ldrb	r3, [r0, #0]
    16a4:	2b00      	cmp	r3, #0
    16a6:	d00e      	beq.n	16c6 <led_task_fn+0x2a>
    mu_vm_led_set(true);
    led_ctx->state = LED_ON;
    mu_sched_reschedule_in(sched, mu_time_ms_to_duration(LED_ON_TIME_MS));

  } else {
    mu_vm_led_set(false);
    16a8:	2000      	movs	r0, #0
    16aa:	4b0d      	ldr	r3, [pc, #52]	; (16e0 <led_task_fn+0x44>)
    16ac:	4798      	blx	r3
    led_ctx->state = LED_OFF;
    16ae:	2300      	movs	r3, #0
    16b0:	7023      	strb	r3, [r4, #0]
    mu_sched_reschedule_in(sched, mu_time_ms_to_duration(LED_OFF_TIME_MS));
    16b2:	20f0      	movs	r0, #240	; 0xf0
    16b4:	30ff      	adds	r0, #255	; 0xff
    16b6:	4b0b      	ldr	r3, [pc, #44]	; (16e4 <led_task_fn+0x48>)
    16b8:	4798      	blx	r3
    16ba:	0001      	movs	r1, r0
    16bc:	0028      	movs	r0, r5
    16be:	4b0a      	ldr	r3, [pc, #40]	; (16e8 <led_task_fn+0x4c>)
    16c0:	4798      	blx	r3
  }

  return NULL;
}
    16c2:	2000      	movs	r0, #0
    16c4:	bd70      	pop	{r4, r5, r6, pc}
    mu_vm_led_set(true);
    16c6:	2001      	movs	r0, #1
    16c8:	4b05      	ldr	r3, [pc, #20]	; (16e0 <led_task_fn+0x44>)
    16ca:	4798      	blx	r3
    led_ctx->state = LED_ON;
    16cc:	2301      	movs	r3, #1
    16ce:	7023      	strb	r3, [r4, #0]
    mu_sched_reschedule_in(sched, mu_time_ms_to_duration(LED_ON_TIME_MS));
    16d0:	2005      	movs	r0, #5
    16d2:	4b04      	ldr	r3, [pc, #16]	; (16e4 <led_task_fn+0x48>)
    16d4:	4798      	blx	r3
    16d6:	0001      	movs	r1, r0
    16d8:	0028      	movs	r0, r5
    16da:	4b03      	ldr	r3, [pc, #12]	; (16e8 <led_task_fn+0x4c>)
    16dc:	4798      	blx	r3
    16de:	e7f0      	b.n	16c2 <led_task_fn+0x26>
    16e0:	000018d9 	.word	0x000018d9
    16e4:	00000529 	.word	0x00000529
    16e8:	00000325 	.word	0x00000325

000016ec <led_task_init>:
mu_task_t *led_task_init(mu_task_t *led_task, led_ctx_t *led_ctx) {
    16ec:	b570      	push	{r4, r5, r6, lr}
    16ee:	0004      	movs	r4, r0
    16f0:	000a      	movs	r2, r1
  led_ctx->state = LED_OFF;
    16f2:	2300      	movs	r3, #0
    16f4:	700b      	strb	r3, [r1, #0]
  mu_task_init(led_task, led_task_fn, led_ctx, "LED Task");
    16f6:	4b03      	ldr	r3, [pc, #12]	; (1704 <led_task_init+0x18>)
    16f8:	4903      	ldr	r1, [pc, #12]	; (1708 <led_task_init+0x1c>)
    16fa:	4d04      	ldr	r5, [pc, #16]	; (170c <led_task_init+0x20>)
    16fc:	47a8      	blx	r5
}
    16fe:	0020      	movs	r0, r4
    1700:	bd70      	pop	{r4, r5, r6, pc}
    1702:	46c0      	nop			; (mov r8, r8)
    1704:	00003194 	.word	0x00003194
    1708:	0000169d 	.word	0x0000169d
    170c:	00000497 	.word	0x00000497

00001710 <main>:

#include <atmel_start.h>
#include "mu_task_demo.h"

int main(void)
{
    1710:	b510      	push	{r4, lr}
  /* Initializes MCU, drivers and middleware */
  atmel_start_init();
    1712:	4b03      	ldr	r3, [pc, #12]	; (1720 <main+0x10>)
    1714:	4798      	blx	r3
  mu_task_demo_init();
    1716:	4b03      	ldr	r3, [pc, #12]	; (1724 <main+0x14>)
    1718:	4798      	blx	r3

  /* Replace with your application code */
  while (1) {
    mu_task_demo_step();
    171a:	4c03      	ldr	r4, [pc, #12]	; (1728 <main+0x18>)
    171c:	47a0      	blx	r4
    171e:	e7fd      	b.n	171c <main+0xc>
    1720:	00000541 	.word	0x00000541
    1724:	0000151d 	.word	0x0000151d
    1728:	00001499 	.word	0x00001499

0000172c <button_cb_trampoline>:
void mu_vm_sleep(void) { go_to_sleep(); }

// =============================================================================
// private (local) code

static void button_cb_trampoline(void) {
    172c:	b510      	push	{r4, lr}
  if (s_port.button_cb) {
    172e:	4b04      	ldr	r3, [pc, #16]	; (1740 <button_cb_trampoline+0x14>)
    1730:	681b      	ldr	r3, [r3, #0]
    1732:	2b00      	cmp	r3, #0
    1734:	d002      	beq.n	173c <button_cb_trampoline+0x10>
    s_port.button_cb(s_port.button_cb_arg);
    1736:	4a02      	ldr	r2, [pc, #8]	; (1740 <button_cb_trampoline+0x14>)
    1738:	6850      	ldr	r0, [r2, #4]
    173a:	4798      	blx	r3
  }
}
    173c:	bd10      	pop	{r4, pc}
    173e:	46c0      	nop			; (mov r8, r8)
    1740:	20000224 	.word	0x20000224

00001744 <rx_done_cb>:
 // 	if (descr->usart_cb.rx_done) {
 // 		descr->usart_cb.rx_done(descr);
 // 	}
 // }
 */
static void rx_done_cb(struct _usart_async_device *device, uint8_t data) {
    1744:	b510      	push	{r4, lr}
  // capture the data (since the _sercom_usart_interrupt_handler has already
  // read the data and cleared the RXD bit)
  s_rx_data = data;
    1746:	4b08      	ldr	r3, [pc, #32]	; (1768 <rx_done_cb+0x24>)
    1748:	2220      	movs	r2, #32
    174a:	5499      	strb	r1, [r3, r2]
  s_rx_has_data = true;
    174c:	2101      	movs	r1, #1
    174e:	3201      	adds	r2, #1
    1750:	5499      	strb	r1, [r3, r2]

  // clear the start of frame flag so mu_vm_serial_read_in_progress() will
  // return false.
  hri_sercomusart_clear_INTFLAG_RXS_bit(USART_0.device.hw);
    1752:	4a06      	ldr	r2, [pc, #24]	; (176c <rx_done_cb+0x28>)
    1754:	6a12      	ldr	r2, [r2, #32]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1756:	3107      	adds	r1, #7
    1758:	7611      	strb	r1, [r2, #24]

  // notify user callback if set
  if (s_port.rx_cb) {
    175a:	691b      	ldr	r3, [r3, #16]
    175c:	2b00      	cmp	r3, #0
    175e:	d002      	beq.n	1766 <rx_done_cb+0x22>
    s_port.rx_cb(s_port.rx_cb_arg);
    1760:	4a01      	ldr	r2, [pc, #4]	; (1768 <rx_done_cb+0x24>)
    1762:	6950      	ldr	r0, [r2, #20]
    1764:	4798      	blx	r3
  }
}
    1766:	bd10      	pop	{r4, pc}
    1768:	20000224 	.word	0x20000224
    176c:	20000270 	.word	0x20000270

00001770 <tx_done_cb>:
 // }
 */
static void tx_done_cb(struct _usart_async_device *device) {
  // No action.  In the future, we might use this for an async version of
  // mu_vm_serial_write_in_progress().
  asm("nop");
    1770:	46c0      	nop			; (mov r8, r8)
}
    1772:	4770      	bx	lr

00001774 <error_cb>:
 // 		descr->usart_cb.error(descr);
 // 	}
 // }
 */
static void error_cb(struct _usart_async_device *device) {
  asm("nop");
    1774:	46c0      	nop			; (mov r8, r8)
}
    1776:	4770      	bx	lr

00001778 <rtc_cb_trampoline>:

static void rtc_cb_trampoline(struct calendar_dev *const dev) {
    1778:	b510      	push	{r4, lr}
  // Arrive here when the RTC count register matches the RTC compare register.
  // Even if the user hasn't registered a callback, this will wake the processor
  // from sleep...
  if (s_port.rtc_cb) {
    177a:	4b04      	ldr	r3, [pc, #16]	; (178c <rtc_cb_trampoline+0x14>)
    177c:	699b      	ldr	r3, [r3, #24]
    177e:	2b00      	cmp	r3, #0
    1780:	d002      	beq.n	1788 <rtc_cb_trampoline+0x10>
    s_port.rtc_cb(s_port.rtc_cb_arg);
    1782:	4a02      	ldr	r2, [pc, #8]	; (178c <rtc_cb_trampoline+0x14>)
    1784:	69d0      	ldr	r0, [r2, #28]
    1786:	4798      	blx	r3
  }
}
    1788:	bd10      	pop	{r4, pc}
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	20000224 	.word	0x20000224

00001790 <tx_byte_sent>:
static void tx_byte_sent(struct _usart_async_device *device) {
    1790:	b510      	push	{r4, lr}
  if (s_tx_has_data) {
    1792:	2322      	movs	r3, #34	; 0x22
    1794:	4a0b      	ldr	r2, [pc, #44]	; (17c4 <tx_byte_sent+0x34>)
    1796:	5cd3      	ldrb	r3, [r2, r3]
    1798:	2b00      	cmp	r3, #0
    179a:	d107      	bne.n	17ac <tx_byte_sent+0x1c>
  if (s_port.tx_cb) {
    179c:	4b09      	ldr	r3, [pc, #36]	; (17c4 <tx_byte_sent+0x34>)
    179e:	689b      	ldr	r3, [r3, #8]
    17a0:	2b00      	cmp	r3, #0
    17a2:	d002      	beq.n	17aa <tx_byte_sent+0x1a>
    s_port.tx_cb(s_port.tx_cb_arg);
    17a4:	4a07      	ldr	r2, [pc, #28]	; (17c4 <tx_byte_sent+0x34>)
    17a6:	68d0      	ldr	r0, [r2, #12]
    17a8:	4798      	blx	r3
}
    17aa:	bd10      	pop	{r4, pc}
    _usart_async_write_byte(&USART_0.device, s_tx_data);
    17ac:	0014      	movs	r4, r2
    17ae:	2323      	movs	r3, #35	; 0x23
    17b0:	5cd1      	ldrb	r1, [r2, r3]
    17b2:	b2c9      	uxtb	r1, r1
    17b4:	4804      	ldr	r0, [pc, #16]	; (17c8 <tx_byte_sent+0x38>)
    17b6:	4b05      	ldr	r3, [pc, #20]	; (17cc <tx_byte_sent+0x3c>)
    17b8:	4798      	blx	r3
    s_tx_has_data = false;
    17ba:	2200      	movs	r2, #0
    17bc:	2322      	movs	r3, #34	; 0x22
    17be:	54e2      	strb	r2, [r4, r3]
    17c0:	e7ec      	b.n	179c <tx_byte_sent+0xc>
    17c2:	46c0      	nop			; (mov r8, r8)
    17c4:	20000224 	.word	0x20000224
    17c8:	20000278 	.word	0x20000278
    17cc:	00001235 	.word	0x00001235

000017d0 <mu_vm_init>:
void mu_vm_init(void) {
    17d0:	b510      	push	{r4, lr}
  memset(&s_port, 0, sizeof(s_port));
    17d2:	2220      	movs	r2, #32
    17d4:	2100      	movs	r1, #0
    17d6:	4813      	ldr	r0, [pc, #76]	; (1824 <mu_vm_init+0x54>)
    17d8:	4b13      	ldr	r3, [pc, #76]	; (1828 <mu_vm_init+0x58>)
    17da:	4798      	blx	r3
  ext_irq_register(PIN_PA15, button_cb_trampoline);
    17dc:	4913      	ldr	r1, [pc, #76]	; (182c <mu_vm_init+0x5c>)
    17de:	200f      	movs	r0, #15
    17e0:	4b13      	ldr	r3, [pc, #76]	; (1830 <mu_vm_init+0x60>)
    17e2:	4798      	blx	r3
  USART_0.device.usart_cb.tx_byte_sent = tx_byte_sent;
    17e4:	4b13      	ldr	r3, [pc, #76]	; (1834 <mu_vm_init+0x64>)
    17e6:	4a14      	ldr	r2, [pc, #80]	; (1838 <mu_vm_init+0x68>)
    17e8:	609a      	str	r2, [r3, #8]
  USART_0.device.usart_cb.rx_done_cb = rx_done_cb;
    17ea:	4a14      	ldr	r2, [pc, #80]	; (183c <mu_vm_init+0x6c>)
    17ec:	60da      	str	r2, [r3, #12]
  USART_0.device.usart_cb.tx_done_cb = tx_done_cb;
    17ee:	4a14      	ldr	r2, [pc, #80]	; (1840 <mu_vm_init+0x70>)
    17f0:	611a      	str	r2, [r3, #16]
  USART_0.device.usart_cb.error_cb = error_cb;
    17f2:	4a14      	ldr	r2, [pc, #80]	; (1844 <mu_vm_init+0x74>)
    17f4:	615a      	str	r2, [r3, #20]
  hri_sercomusart_set_CTRLB_SFDE_bit(USART_0.device.hw);
    17f6:	6a1a      	ldr	r2, [r3, #32]
	((Sercom *)hw)->USART.CTRLB.reg |= SERCOM_USART_CTRLB_SFDE;
    17f8:	6851      	ldr	r1, [r2, #4]
    17fa:	2380      	movs	r3, #128	; 0x80
    17fc:	009b      	lsls	r3, r3, #2
    17fe:	430b      	orrs	r3, r1
    1800:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1802:	2107      	movs	r1, #7
    1804:	69d3      	ldr	r3, [r2, #28]
    1806:	4219      	tst	r1, r3
    1808:	d1fc      	bne.n	1804 <mu_vm_init+0x34>
  usart_async_enable(&USART_0);
    180a:	480a      	ldr	r0, [pc, #40]	; (1834 <mu_vm_init+0x64>)
    180c:	4b0e      	ldr	r3, [pc, #56]	; (1848 <mu_vm_init+0x78>)
    180e:	4798      	blx	r3
  calendar_enable(&CALENDAR_0); // start RTC
    1810:	4c0e      	ldr	r4, [pc, #56]	; (184c <mu_vm_init+0x7c>)
    1812:	0020      	movs	r0, r4
    1814:	4b0e      	ldr	r3, [pc, #56]	; (1850 <mu_vm_init+0x80>)
    1816:	4798      	blx	r3
  _calendar_register_callback(&CALENDAR_0.device, rtc_cb_trampoline);
    1818:	490e      	ldr	r1, [pc, #56]	; (1854 <mu_vm_init+0x84>)
    181a:	0020      	movs	r0, r4
    181c:	4b0e      	ldr	r3, [pc, #56]	; (1858 <mu_vm_init+0x88>)
    181e:	4798      	blx	r3
}
    1820:	bd10      	pop	{r4, pc}
    1822:	46c0      	nop			; (mov r8, r8)
    1824:	20000224 	.word	0x20000224
    1828:	00002053 	.word	0x00002053
    182c:	0000172d 	.word	0x0000172d
    1830:	000008a5 	.word	0x000008a5
    1834:	20000270 	.word	0x20000270
    1838:	00001791 	.word	0x00001791
    183c:	00001745 	.word	0x00001745
    1840:	00001771 	.word	0x00001771
    1844:	00001775 	.word	0x00001775
    1848:	00000b69 	.word	0x00000b69
    184c:	20000254 	.word	0x20000254
    1850:	0000081d 	.word	0x0000081d
    1854:	00001779 	.word	0x00001779
    1858:	00000f7d 	.word	0x00000f7d

0000185c <mu_vm_time_offset>:
  return t + dt;
    185c:	1808      	adds	r0, r1, r0
}
    185e:	4770      	bx	lr

00001860 <mu_vm_time_difference>:
  return t1 - t2;
    1860:	1a40      	subs	r0, r0, r1
}
    1862:	4770      	bx	lr

00001864 <mu_vm_time_precedes>:
  return t1 - t2;
    1864:	1a40      	subs	r0, r0, r1
  return mu_vm_time_difference(t1, t2) > MAX_DURATION;
    1866:	0fc0      	lsrs	r0, r0, #31
}
    1868:	4770      	bx	lr
	...

0000186c <mu_vm_time_ms_to_duration>:
mu_vm_time_dt mu_vm_time_ms_to_duration(mu_vm_time_ms_dt ms) {
    186c:	b510      	push	{r4, lr}
  return quo_rounded(ms * CONF_GCLK_RTC_FREQUENCY, 1000);
    186e:	03c0      	lsls	r0, r0, #15
  //   (y < 0) is false (zero) if x is non-negative
  //   (x < 0) ^ (y < 0) is true if x and y have opposite signs
  //   x/y would be the quotient, but it is truncated towards zero.  To round:
  //   (x + y/2)/y is the rounded quotient when x and y have the same sign
  //   (x - y/2)/y is the rounded quotient when x and y have opposite signs
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
    1870:	d506      	bpl.n	1880 <mu_vm_time_ms_to_duration+0x14>
    1872:	38f5      	subs	r0, #245	; 0xf5
    1874:	38ff      	subs	r0, #255	; 0xff
    1876:	21fa      	movs	r1, #250	; 0xfa
    1878:	0089      	lsls	r1, r1, #2
    187a:	4b05      	ldr	r3, [pc, #20]	; (1890 <mu_vm_time_ms_to_duration+0x24>)
    187c:	4798      	blx	r3
}
    187e:	bd10      	pop	{r4, pc}
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
    1880:	30f5      	adds	r0, #245	; 0xf5
    1882:	30ff      	adds	r0, #255	; 0xff
    1884:	21fa      	movs	r1, #250	; 0xfa
    1886:	0089      	lsls	r1, r1, #2
    1888:	4b01      	ldr	r3, [pc, #4]	; (1890 <mu_vm_time_ms_to_duration+0x24>)
    188a:	4798      	blx	r3
    188c:	e7f7      	b.n	187e <mu_vm_time_ms_to_duration+0x12>
    188e:	46c0      	nop			; (mov r8, r8)
    1890:	00001da9 	.word	0x00001da9

00001894 <mu_vm_rtc_now>:
  return hri_rtcmode0_read_COUNT_COUNT_bf(CALENDAR_0.device.hw);
    1894:	4b03      	ldr	r3, [pc, #12]	; (18a4 <mu_vm_rtc_now+0x10>)
    1896:	681a      	ldr	r2, [r3, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1898:	7a93      	ldrb	r3, [r2, #10]
    189a:	09db      	lsrs	r3, r3, #7
    189c:	d1fc      	bne.n	1898 <mu_vm_rtc_now+0x4>
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
    189e:	6910      	ldr	r0, [r2, #16]
}
    18a0:	4770      	bx	lr
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	20000254 	.word	0x20000254

000018a8 <mu_vm_rtc_alarm_at>:
void mu_vm_rtc_alarm_at(mu_vm_time_t at) {
    18a8:	b510      	push	{r4, lr}
    18aa:	0001      	movs	r1, r0
  _calendar_set_comp(&CALENDAR_0.device, at);
    18ac:	4807      	ldr	r0, [pc, #28]	; (18cc <mu_vm_rtc_alarm_at+0x24>)
    18ae:	4b08      	ldr	r3, [pc, #32]	; (18d0 <mu_vm_rtc_alarm_at+0x28>)
    18b0:	4798      	blx	r3
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    18b2:	4b08      	ldr	r3, [pc, #32]	; (18d4 <mu_vm_rtc_alarm_at+0x2c>)
    18b4:	885a      	ldrh	r2, [r3, #2]
    18b6:	2180      	movs	r1, #128	; 0x80
    18b8:	01c9      	lsls	r1, r1, #7
    18ba:	430a      	orrs	r2, r1
    18bc:	805a      	strh	r2, [r3, #2]
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
    18be:	885a      	ldrh	r2, [r3, #2]
    18c0:	2180      	movs	r1, #128	; 0x80
    18c2:	0209      	lsls	r1, r1, #8
    18c4:	430a      	orrs	r2, r1
    18c6:	805a      	strh	r2, [r3, #2]
}
    18c8:	bd10      	pop	{r4, pc}
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	20000254 	.word	0x20000254
    18d0:	00001099 	.word	0x00001099
    18d4:	40001400 	.word	0x40001400

000018d8 <mu_vm_led_set>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    18d8:	2800      	cmp	r0, #0
    18da:	d006      	beq.n	18ea <mu_vm_led_set+0x12>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    18dc:	2180      	movs	r1, #128	; 0x80
    18de:	05c9      	lsls	r1, r1, #23
    18e0:	2394      	movs	r3, #148	; 0x94
    18e2:	22c0      	movs	r2, #192	; 0xc0
    18e4:	05d2      	lsls	r2, r2, #23
    18e6:	50d1      	str	r1, [r2, r3]
void mu_vm_led_set(bool on) { gpio_set_pin_level(USER_LED_AL, !on); }
    18e8:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    18ea:	2180      	movs	r1, #128	; 0x80
    18ec:	05c9      	lsls	r1, r1, #23
    18ee:	2398      	movs	r3, #152	; 0x98
    18f0:	22c0      	movs	r2, #192	; 0xc0
    18f2:	05d2      	lsls	r2, r2, #23
    18f4:	50d1      	str	r1, [r2, r3]
    18f6:	e7f7      	b.n	18e8 <mu_vm_led_set+0x10>

000018f8 <mu_vm_button_set_cb>:
  if (fn) {
    18f8:	2800      	cmp	r0, #0
    18fa:	d003      	beq.n	1904 <mu_vm_button_set_cb+0xc>
    s_port.button_cb = fn;
    18fc:	4b04      	ldr	r3, [pc, #16]	; (1910 <mu_vm_button_set_cb+0x18>)
    18fe:	6018      	str	r0, [r3, #0]
    s_port.button_cb_arg = arg;
    1900:	6059      	str	r1, [r3, #4]
}
    1902:	4770      	bx	lr
    s_port.button_cb = NULL;
    1904:	4b02      	ldr	r3, [pc, #8]	; (1910 <mu_vm_button_set_cb+0x18>)
    1906:	2200      	movs	r2, #0
    1908:	601a      	str	r2, [r3, #0]
    s_port.button_cb_arg = NULL;
    190a:	605a      	str	r2, [r3, #4]
}
    190c:	e7f9      	b.n	1902 <mu_vm_button_set_cb+0xa>
    190e:	46c0      	nop			; (mov r8, r8)
    1910:	20000224 	.word	0x20000224

00001914 <mu_vm_serial_can_write>:
  return hri_sercomusart_get_interrupt_DRE_bit(USART_0.device.hw);
    1914:	4b02      	ldr	r3, [pc, #8]	; (1920 <mu_vm_serial_can_write+0xc>)
    1916:	6a1b      	ldr	r3, [r3, #32]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1918:	7e18      	ldrb	r0, [r3, #24]
    191a:	2301      	movs	r3, #1
    191c:	4018      	ands	r0, r3
}
    191e:	4770      	bx	lr
    1920:	20000270 	.word	0x20000270

00001924 <mu_vm_serial_write>:
void mu_vm_serial_write(uint8_t byte) {
    1924:	b570      	push	{r4, r5, r6, lr}
    1926:	0004      	movs	r4, r0
  if (s_port.tx_cb) {
    1928:	4b12      	ldr	r3, [pc, #72]	; (1974 <mu_vm_serial_write+0x50>)
    192a:	689b      	ldr	r3, [r3, #8]
    192c:	2b00      	cmp	r3, #0
    192e:	d01f      	beq.n	1970 <mu_vm_serial_write+0x4c>
    while (s_tx_has_data) {
    1930:	2322      	movs	r3, #34	; 0x22
    1932:	4a10      	ldr	r2, [pc, #64]	; (1974 <mu_vm_serial_write+0x50>)
    1934:	5cd3      	ldrb	r3, [r2, r3]
    1936:	2b00      	cmp	r3, #0
    1938:	d005      	beq.n	1946 <mu_vm_serial_write+0x22>
    193a:	0011      	movs	r1, r2
    193c:	2222      	movs	r2, #34	; 0x22
      asm("nop");
    193e:	46c0      	nop			; (mov r8, r8)
    while (s_tx_has_data) {
    1940:	5c8b      	ldrb	r3, [r1, r2]
    1942:	2b00      	cmp	r3, #0
    1944:	d1fb      	bne.n	193e <mu_vm_serial_write+0x1a>
    s_tx_data = byte;
    1946:	4b0b      	ldr	r3, [pc, #44]	; (1974 <mu_vm_serial_write+0x50>)
    1948:	2223      	movs	r2, #35	; 0x23
    194a:	549c      	strb	r4, [r3, r2]
    s_tx_has_data = true;
    194c:	2101      	movs	r1, #1
    194e:	3a01      	subs	r2, #1
    1950:	5499      	strb	r1, [r3, r2]
    _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_BYTE_SENT, true);
    1952:	3a21      	subs	r2, #33	; 0x21
    1954:	2100      	movs	r1, #0
    1956:	4808      	ldr	r0, [pc, #32]	; (1978 <mu_vm_serial_write+0x54>)
    1958:	4b08      	ldr	r3, [pc, #32]	; (197c <mu_vm_serial_write+0x58>)
    195a:	4798      	blx	r3
}
    195c:	bd70      	pop	{r4, r5, r6, pc}
      asm("nop");
    195e:	46c0      	nop			; (mov r8, r8)
    while (!mu_vm_serial_can_write()) {
    1960:	47a8      	blx	r5
    1962:	2800      	cmp	r0, #0
    1964:	d0fb      	beq.n	195e <mu_vm_serial_write+0x3a>
    _usart_async_write_byte(&USART_0.device, byte);
    1966:	0021      	movs	r1, r4
    1968:	4803      	ldr	r0, [pc, #12]	; (1978 <mu_vm_serial_write+0x54>)
    196a:	4b05      	ldr	r3, [pc, #20]	; (1980 <mu_vm_serial_write+0x5c>)
    196c:	4798      	blx	r3
}
    196e:	e7f5      	b.n	195c <mu_vm_serial_write+0x38>
    while (!mu_vm_serial_can_write()) {
    1970:	4d04      	ldr	r5, [pc, #16]	; (1984 <mu_vm_serial_write+0x60>)
    1972:	e7f5      	b.n	1960 <mu_vm_serial_write+0x3c>
    1974:	20000224 	.word	0x20000224
    1978:	20000278 	.word	0x20000278
    197c:	0000124d 	.word	0x0000124d
    1980:	00001235 	.word	0x00001235
    1984:	00001915 	.word	0x00001915

00001988 <mu_vm_serial_read>:
uint8_t mu_vm_serial_read(void) {
    1988:	b510      	push	{r4, lr}
  _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_RX_DONE, true);
    198a:	2201      	movs	r2, #1
    198c:	2101      	movs	r1, #1
    198e:	480b      	ldr	r0, [pc, #44]	; (19bc <mu_vm_serial_read+0x34>)
    1990:	4b0b      	ldr	r3, [pc, #44]	; (19c0 <mu_vm_serial_read+0x38>)
    1992:	4798      	blx	r3
  return s_rx_has_data;
    1994:	2321      	movs	r3, #33	; 0x21
    1996:	4a0b      	ldr	r2, [pc, #44]	; (19c4 <mu_vm_serial_read+0x3c>)
    1998:	5cd3      	ldrb	r3, [r2, r3]
  while (!mu_vm_serial_can_read()) {
    199a:	2b00      	cmp	r3, #0
    199c:	d105      	bne.n	19aa <mu_vm_serial_read+0x22>
  return s_rx_has_data;
    199e:	0011      	movs	r1, r2
    19a0:	2221      	movs	r2, #33	; 0x21
    asm("nop");
    19a2:	46c0      	nop			; (mov r8, r8)
  return s_rx_has_data;
    19a4:	5c8b      	ldrb	r3, [r1, r2]
  while (!mu_vm_serial_can_read()) {
    19a6:	2b00      	cmp	r3, #0
    19a8:	d0fb      	beq.n	19a2 <mu_vm_serial_read+0x1a>
  s_rx_has_data = false;       // clear the virtual RXD bit
    19aa:	4b06      	ldr	r3, [pc, #24]	; (19c4 <mu_vm_serial_read+0x3c>)
    19ac:	2100      	movs	r1, #0
    19ae:	2221      	movs	r2, #33	; 0x21
    19b0:	5499      	strb	r1, [r3, r2]
  return s_rx_data;
    19b2:	3a01      	subs	r2, #1
    19b4:	5c98      	ldrb	r0, [r3, r2]
    19b6:	b2c0      	uxtb	r0, r0
}
    19b8:	bd10      	pop	{r4, pc}
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	20000278 	.word	0x20000278
    19c0:	0000124d 	.word	0x0000124d
    19c4:	20000224 	.word	0x20000224

000019c8 <mu_vm_serial_can_read>:
  return s_rx_has_data;
    19c8:	2321      	movs	r3, #33	; 0x21
    19ca:	4a02      	ldr	r2, [pc, #8]	; (19d4 <mu_vm_serial_can_read+0xc>)
    19cc:	5cd0      	ldrb	r0, [r2, r3]
    19ce:	b2c0      	uxtb	r0, r0
}
    19d0:	4770      	bx	lr
    19d2:	46c0      	nop			; (mov r8, r8)
    19d4:	20000224 	.word	0x20000224

000019d8 <mu_vm_serial_set_read_cb>:
void mu_vm_serial_set_read_cb(mu_vm_callback_fn fn, void *arg) {
    19d8:	b510      	push	{r4, lr}
  if (fn) {
    19da:	2800      	cmp	r0, #0
    19dc:	d008      	beq.n	19f0 <mu_vm_serial_set_read_cb+0x18>
    s_port.rx_cb = fn;
    19de:	4b07      	ldr	r3, [pc, #28]	; (19fc <mu_vm_serial_set_read_cb+0x24>)
    19e0:	6118      	str	r0, [r3, #16]
    s_port.rx_cb_arg = arg;
    19e2:	6159      	str	r1, [r3, #20]
    _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_RX_DONE, true);
    19e4:	2201      	movs	r2, #1
    19e6:	2101      	movs	r1, #1
    19e8:	4805      	ldr	r0, [pc, #20]	; (1a00 <mu_vm_serial_set_read_cb+0x28>)
    19ea:	4b06      	ldr	r3, [pc, #24]	; (1a04 <mu_vm_serial_set_read_cb+0x2c>)
    19ec:	4798      	blx	r3
}
    19ee:	bd10      	pop	{r4, pc}
    s_port.rx_cb = NULL;
    19f0:	4b02      	ldr	r3, [pc, #8]	; (19fc <mu_vm_serial_set_read_cb+0x24>)
    19f2:	2200      	movs	r2, #0
    19f4:	611a      	str	r2, [r3, #16]
    s_port.rx_cb_arg = NULL;
    19f6:	615a      	str	r2, [r3, #20]
}
    19f8:	e7f9      	b.n	19ee <mu_vm_serial_set_read_cb+0x16>
    19fa:	46c0      	nop			; (mov r8, r8)
    19fc:	20000224 	.word	0x20000224
    1a00:	20000278 	.word	0x20000278
    1a04:	0000124d 	.word	0x0000124d

00001a08 <mu_vm_sleep_until>:
void mu_vm_sleep_until(mu_vm_time_t then) {
    1a08:	b510      	push	{r4, lr}
    1a0a:	0004      	movs	r4, r0
  mu_vm_time_t now = mu_vm_rtc_now();
    1a0c:	4b06      	ldr	r3, [pc, #24]	; (1a28 <mu_vm_sleep_until+0x20>)
    1a0e:	4798      	blx	r3
  return t1 - t2;
    1a10:	1a20      	subs	r0, r4, r0
  if (mu_vm_time_difference(then, now) > MIN_SLEEP_DURATION) {
    1a12:	2820      	cmp	r0, #32
    1a14:	dc00      	bgt.n	1a18 <mu_vm_sleep_until+0x10>
}
    1a16:	bd10      	pop	{r4, pc}
    mu_vm_rtc_alarm_at(then);
    1a18:	0020      	movs	r0, r4
    1a1a:	4b04      	ldr	r3, [pc, #16]	; (1a2c <mu_vm_sleep_until+0x24>)
    1a1c:	4798      	blx	r3
  sleep(3); // in hal_sleep
    1a1e:	2003      	movs	r0, #3
    1a20:	4b03      	ldr	r3, [pc, #12]	; (1a30 <mu_vm_sleep_until+0x28>)
    1a22:	4798      	blx	r3
}
    1a24:	e7f7      	b.n	1a16 <mu_vm_sleep_until+0xe>
    1a26:	46c0      	nop			; (mov r8, r8)
    1a28:	00001895 	.word	0x00001895
    1a2c:	000018a9 	.word	0x000018a9
    1a30:	000008ed 	.word	0x000008ed

00001a34 <mu_vm_sleep>:
void mu_vm_sleep(void) { go_to_sleep(); }
    1a34:	b510      	push	{r4, lr}
  sleep(3); // in hal_sleep
    1a36:	2003      	movs	r0, #3
    1a38:	4b01      	ldr	r3, [pc, #4]	; (1a40 <mu_vm_sleep+0xc>)
    1a3a:	4798      	blx	r3
void mu_vm_sleep(void) { go_to_sleep(); }
    1a3c:	bd10      	pop	{r4, pc}
    1a3e:	46c0      	nop			; (mov r8, r8)
    1a40:	000008ed 	.word	0x000008ed

00001a44 <_write>:
#include "mu_vm.h"

// ================
// support for printf()

int _write(int file, char *ptr, int len) {
    1a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a46:	46c6      	mov	lr, r8
    1a48:	b500      	push	{lr}
    1a4a:	4690      	mov	r8, r2
  // void file;
  int n = len;

  while (n-- > 0) {
    1a4c:	2a00      	cmp	r2, #0
    1a4e:	dd0c      	ble.n	1a6a <_write+0x26>
    1a50:	000d      	movs	r5, r1
    1a52:	4441      	add	r1, r8
    1a54:	000e      	movs	r6, r1
    while (!mu_vm_serial_can_write())
    1a56:	4c07      	ldr	r4, [pc, #28]	; (1a74 <_write+0x30>)
  		;
    mu_vm_serial_write(*ptr++);
    1a58:	4f07      	ldr	r7, [pc, #28]	; (1a78 <_write+0x34>)
    while (!mu_vm_serial_can_write())
    1a5a:	47a0      	blx	r4
    1a5c:	2800      	cmp	r0, #0
    1a5e:	d0fc      	beq.n	1a5a <_write+0x16>
    mu_vm_serial_write(*ptr++);
    1a60:	7828      	ldrb	r0, [r5, #0]
    1a62:	47b8      	blx	r7
    1a64:	3501      	adds	r5, #1
  while (n-- > 0) {
    1a66:	42b5      	cmp	r5, r6
    1a68:	d1f7      	bne.n	1a5a <_write+0x16>
  }
  return len;
}
    1a6a:	4640      	mov	r0, r8
    1a6c:	bc04      	pop	{r2}
    1a6e:	4690      	mov	r8, r2
    1a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a72:	46c0      	nop			; (mov r8, r8)
    1a74:	00001915 	.word	0x00001915
    1a78:	00001925 	.word	0x00001925

00001a7c <_read>:

int _read(int file, char *ptr, int len) {
    1a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a7e:	46c6      	mov	lr, r8
    1a80:	b500      	push	{lr}
    1a82:	4690      	mov	r8, r2
  // void file;
  int n = len;

  while (n-- > 0) {
    1a84:	2a00      	cmp	r2, #0
    1a86:	dd0c      	ble.n	1aa2 <_read+0x26>
    1a88:	000d      	movs	r5, r1
    1a8a:	4441      	add	r1, r8
    1a8c:	000e      	movs	r6, r1
    while (!mu_vm_serial_can_read())
    1a8e:	4c07      	ldr	r4, [pc, #28]	; (1aac <_read+0x30>)
			;
    *ptr++ = mu_vm_serial_read();
    1a90:	4f07      	ldr	r7, [pc, #28]	; (1ab0 <_read+0x34>)
    while (!mu_vm_serial_can_read())
    1a92:	47a0      	blx	r4
    1a94:	2800      	cmp	r0, #0
    1a96:	d0fc      	beq.n	1a92 <_read+0x16>
    *ptr++ = mu_vm_serial_read();
    1a98:	47b8      	blx	r7
    1a9a:	7028      	strb	r0, [r5, #0]
    1a9c:	3501      	adds	r5, #1
  while (n-- > 0) {
    1a9e:	42b5      	cmp	r5, r6
    1aa0:	d1f7      	bne.n	1a92 <_read+0x16>
  }
  return len;
}
    1aa2:	4640      	mov	r0, r8
    1aa4:	bc04      	pop	{r2}
    1aa6:	4690      	mov	r8, r2
    1aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1aaa:	46c0      	nop			; (mov r8, r8)
    1aac:	000019c9 	.word	0x000019c9
    1ab0:	00001989 	.word	0x00001989

00001ab4 <screen_redraw_task_fn>:
 * 11 lines to display.  If the entire display were output at once, the function
 * would require (60*11)/115200 = 57 milliseconds (assuming 115 KBaud, 8n1).
 * To shorten the latency, we only print one line at a time before returing to
 * the scheduler, so the function consumes at most about 5.2 milliseconds.
 */
static void *screen_redraw_task_fn(void *ctx, void *arg) {
    1ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ab6:	b085      	sub	sp, #20
    1ab8:	0004      	movs	r4, r0
    1aba:	000d      	movs	r5, r1
  // screen_redraw_context is passed as the first argument, scheduler is second
  screen_redraw_ctx_t *screen_redraw_ctx = (screen_redraw_ctx_t *)ctx;
  mu_sched_t *sched = (mu_sched_t *)arg;
  bool done = false;

  switch (screen_redraw_ctx->s1) {
    1abc:	6803      	ldr	r3, [r0, #0]
    1abe:	2b08      	cmp	r3, #8
    1ac0:	d80c      	bhi.n	1adc <screen_redraw_task_fn+0x28>
    1ac2:	009b      	lsls	r3, r3, #2
    1ac4:	4a40      	ldr	r2, [pc, #256]	; (1bc8 <screen_redraw_task_fn+0x114>)
    1ac6:	58d3      	ldr	r3, [r2, r3]
    1ac8:	469f      	mov	pc, r3
    case 0:
    printf("%s", CLEAR_SCREEN);
    1aca:	4940      	ldr	r1, [pc, #256]	; (1bcc <screen_redraw_task_fn+0x118>)
    1acc:	4840      	ldr	r0, [pc, #256]	; (1bd0 <screen_redraw_task_fn+0x11c>)
    1ace:	4b41      	ldr	r3, [pc, #260]	; (1bd4 <screen_redraw_task_fn+0x120>)
    1ad0:	4798      	blx	r3
    screen_redraw_ctx->s1 += 1;
    1ad2:	6823      	ldr	r3, [r4, #0]
    1ad4:	3301      	adds	r3, #1
    1ad6:	6023      	str	r3, [r4, #0]
    screen_redraw_ctx->s2 = 0;
    1ad8:	2300      	movs	r3, #0
    1ada:	6063      	str	r3, [r4, #4]
  // to restart this redraw task.  Otherwise reschedule right away.
  if (done) {
    screen_redraw_ctx->s1 = 0;
    screen_redraw_ctx->s2 = 0;
  } else {
    mu_sched_reschedule_now(sched);
    1adc:	0028      	movs	r0, r5
    1ade:	4b3e      	ldr	r3, [pc, #248]	; (1bd8 <screen_redraw_task_fn+0x124>)
    1ae0:	4798      	blx	r3
    1ae2:	e06d      	b.n	1bc0 <screen_redraw_task_fn+0x10c>
    printf("mu_task_demo %s: https://github.com/rdpoor/mulib\r\n\r\n",
    1ae4:	493d      	ldr	r1, [pc, #244]	; (1bdc <screen_redraw_task_fn+0x128>)
    1ae6:	483e      	ldr	r0, [pc, #248]	; (1be0 <screen_redraw_task_fn+0x12c>)
    1ae8:	4b3a      	ldr	r3, [pc, #232]	; (1bd4 <screen_redraw_task_fn+0x120>)
    1aea:	4798      	blx	r3
    screen_redraw_ctx->s1 += 1;
    1aec:	6823      	ldr	r3, [r4, #0]
    1aee:	3301      	adds	r3, #1
    1af0:	6023      	str	r3, [r4, #0]
    break;
    1af2:	e7f3      	b.n	1adc <screen_redraw_task_fn+0x28>
    printf("          Name Stat  # Calls     Runtime     Max Dur\r\n");
    1af4:	483b      	ldr	r0, [pc, #236]	; (1be4 <screen_redraw_task_fn+0x130>)
    1af6:	4b3c      	ldr	r3, [pc, #240]	; (1be8 <screen_redraw_task_fn+0x134>)
    1af8:	4798      	blx	r3
    screen_redraw_ctx->s1 += 1;
    1afa:	6823      	ldr	r3, [r4, #0]
    1afc:	3301      	adds	r3, #1
    1afe:	6023      	str	r3, [r4, #0]
    break;
    1b00:	e7ec      	b.n	1adc <screen_redraw_task_fn+0x28>
    printf("+-------------+-+-----------+-----------+-----------+\r\n");
    1b02:	483a      	ldr	r0, [pc, #232]	; (1bec <screen_redraw_task_fn+0x138>)
    1b04:	4b38      	ldr	r3, [pc, #224]	; (1be8 <screen_redraw_task_fn+0x134>)
    1b06:	4798      	blx	r3
    screen_redraw_ctx->s1 += 1;
    1b08:	6823      	ldr	r3, [r4, #0]
    1b0a:	3301      	adds	r3, #1
    1b0c:	6023      	str	r3, [r4, #0]
    break;
    1b0e:	e7e5      	b.n	1adc <screen_redraw_task_fn+0x28>
    print_task(&(screen_redraw_ctx->tasks[screen_redraw_ctx->s2++]), sched);
    1b10:	6842      	ldr	r2, [r0, #4]
    1b12:	1c53      	adds	r3, r2, #1
    1b14:	6043      	str	r3, [r0, #4]
    1b16:	0053      	lsls	r3, r2, #1
    1b18:	189b      	adds	r3, r3, r2
    1b1a:	00db      	lsls	r3, r3, #3
    1b1c:	6882      	ldr	r2, [r0, #8]
    1b1e:	18d7      	adds	r7, r2, r3

  return NULL;
}

static void print_task(mu_task_t *task, mu_sched_t *sched) {
  printf("%14s %c %11u %11lu %11lu\r\n",
    1b20:	0038      	movs	r0, r7
    1b22:	4b33      	ldr	r3, [pc, #204]	; (1bf0 <screen_redraw_task_fn+0x13c>)
    1b24:	4798      	blx	r3
    1b26:	9003      	str	r0, [sp, #12]
         task->runtime,
         task->max_duration);
}

static char get_task_state(mu_task_t *task, mu_sched_t *sched) {
  switch (mu_sched_get_task_status(sched, task)) {
    1b28:	0039      	movs	r1, r7
    1b2a:	0028      	movs	r0, r5
    1b2c:	4b31      	ldr	r3, [pc, #196]	; (1bf4 <screen_redraw_task_fn+0x140>)
    1b2e:	4798      	blx	r3
    1b30:	2801      	cmp	r0, #1
    1b32:	d01e      	beq.n	1b72 <screen_redraw_task_fn+0xbe>
    1b34:	2800      	cmp	r0, #0
    1b36:	d01e      	beq.n	1b76 <screen_redraw_task_fn+0xc2>
    1b38:	2802      	cmp	r0, #2
    1b3a:	d004      	beq.n	1b46 <screen_redraw_task_fn+0x92>
  case MU_SCHED_TASK_STATUS_IDLE:
    return 'I';
  case MU_SCHED_TASK_STATUS_RUNNABLE:
    return 'R';
  case MU_SCHED_TASK_STATUS_ACTIVE:
    return 'A';
    1b3c:	2641      	movs	r6, #65	; 0x41
  switch (mu_sched_get_task_status(sched, task)) {
    1b3e:	2803      	cmp	r0, #3
    1b40:	d002      	beq.n	1b48 <screen_redraw_task_fn+0x94>
  case MU_SCHED_TASK_STATUS_SCHEDULED:
    return 'S';
  default:
    return '?';
    1b42:	263f      	movs	r6, #63	; 0x3f
    1b44:	e000      	b.n	1b48 <screen_redraw_task_fn+0x94>
    return 'R';
    1b46:	2652      	movs	r6, #82	; 0x52
  printf("%14s %c %11u %11lu %11lu\r\n",
    1b48:	0038      	movs	r0, r7
    1b4a:	4b2b      	ldr	r3, [pc, #172]	; (1bf8 <screen_redraw_task_fn+0x144>)
    1b4c:	4798      	blx	r3
    1b4e:	0003      	movs	r3, r0
    1b50:	697a      	ldr	r2, [r7, #20]
    1b52:	9201      	str	r2, [sp, #4]
    1b54:	693a      	ldr	r2, [r7, #16]
    1b56:	9200      	str	r2, [sp, #0]
    1b58:	0032      	movs	r2, r6
    1b5a:	9903      	ldr	r1, [sp, #12]
    1b5c:	4827      	ldr	r0, [pc, #156]	; (1bfc <screen_redraw_task_fn+0x148>)
    1b5e:	4e1d      	ldr	r6, [pc, #116]	; (1bd4 <screen_redraw_task_fn+0x120>)
    1b60:	47b0      	blx	r6
    if (screen_redraw_ctx->s2 == screen_redraw_ctx->n_tasks) {
    1b62:	6863      	ldr	r3, [r4, #4]
    1b64:	68e2      	ldr	r2, [r4, #12]
    1b66:	4293      	cmp	r3, r2
    1b68:	d1b8      	bne.n	1adc <screen_redraw_task_fn+0x28>
      screen_redraw_ctx->s1 += 1;
    1b6a:	6823      	ldr	r3, [r4, #0]
    1b6c:	3301      	adds	r3, #1
    1b6e:	6023      	str	r3, [r4, #0]
    1b70:	e7b4      	b.n	1adc <screen_redraw_task_fn+0x28>
    return 'S';
    1b72:	2653      	movs	r6, #83	; 0x53
    1b74:	e7e8      	b.n	1b48 <screen_redraw_task_fn+0x94>
    return 'I';
    1b76:	2649      	movs	r6, #73	; 0x49
    1b78:	e7e6      	b.n	1b48 <screen_redraw_task_fn+0x94>
    printf("\r\nStatus: A=Active, R=Runnable, S=Scheduled, I=Idle\r\n");
    1b7a:	4821      	ldr	r0, [pc, #132]	; (1c00 <screen_redraw_task_fn+0x14c>)
    1b7c:	4b1a      	ldr	r3, [pc, #104]	; (1be8 <screen_redraw_task_fn+0x134>)
    1b7e:	4798      	blx	r3
    screen_redraw_ctx->s1 += 1;
    1b80:	6823      	ldr	r3, [r4, #0]
    1b82:	3301      	adds	r3, #1
    1b84:	6023      	str	r3, [r4, #0]
    break;
    1b86:	e7a9      	b.n	1adc <screen_redraw_task_fn+0x28>
    if (mu_task_demo_is_low_power_mode()) {
    1b88:	4b1e      	ldr	r3, [pc, #120]	; (1c04 <screen_redraw_task_fn+0x150>)
    1b8a:	4798      	blx	r3
    1b8c:	2800      	cmp	r0, #0
    1b8e:	d003      	beq.n	1b98 <screen_redraw_task_fn+0xe4>
      printf("Push user button to exit low-power mode.\r\n");
    1b90:	481d      	ldr	r0, [pc, #116]	; (1c08 <screen_redraw_task_fn+0x154>)
    1b92:	4b15      	ldr	r3, [pc, #84]	; (1be8 <screen_redraw_task_fn+0x134>)
    1b94:	4798      	blx	r3
    1b96:	e010      	b.n	1bba <screen_redraw_task_fn+0x106>
      printf("Type 'p' to enter low-power mode.\r\n");
    1b98:	481c      	ldr	r0, [pc, #112]	; (1c0c <screen_redraw_task_fn+0x158>)
    1b9a:	4b13      	ldr	r3, [pc, #76]	; (1be8 <screen_redraw_task_fn+0x134>)
    1b9c:	4798      	blx	r3
      screen_redraw_ctx->s1 += 1;
    1b9e:	6823      	ldr	r3, [r4, #0]
    1ba0:	3301      	adds	r3, #1
    1ba2:	6023      	str	r3, [r4, #0]
    1ba4:	e79a      	b.n	1adc <screen_redraw_task_fn+0x28>
    printf("Type 'b' to restart LED task. 'B' to suspend.\r\n");
    1ba6:	481a      	ldr	r0, [pc, #104]	; (1c10 <screen_redraw_task_fn+0x15c>)
    1ba8:	4b0f      	ldr	r3, [pc, #60]	; (1be8 <screen_redraw_task_fn+0x134>)
    1baa:	4798      	blx	r3
    screen_redraw_ctx->s1 += 1;
    1bac:	6823      	ldr	r3, [r4, #0]
    1bae:	3301      	adds	r3, #1
    1bb0:	6023      	str	r3, [r4, #0]
    break;
    1bb2:	e793      	b.n	1adc <screen_redraw_task_fn+0x28>
    printf("Type 'd' to restart Screen task. 'D' to suspend.\r\n");
    1bb4:	4817      	ldr	r0, [pc, #92]	; (1c14 <screen_redraw_task_fn+0x160>)
    1bb6:	4b0c      	ldr	r3, [pc, #48]	; (1be8 <screen_redraw_task_fn+0x134>)
    1bb8:	4798      	blx	r3
    screen_redraw_ctx->s1 = 0;
    1bba:	2300      	movs	r3, #0
    1bbc:	6023      	str	r3, [r4, #0]
    screen_redraw_ctx->s2 = 0;
    1bbe:	6063      	str	r3, [r4, #4]
}
    1bc0:	2000      	movs	r0, #0
    1bc2:	b005      	add	sp, #20
    1bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	000031a0 	.word	0x000031a0
    1bcc:	000031c4 	.word	0x000031c4
    1bd0:	000031d0 	.word	0x000031d0
    1bd4:	00002065 	.word	0x00002065
    1bd8:	00000359 	.word	0x00000359
    1bdc:	00003144 	.word	0x00003144
    1be0:	000031d4 	.word	0x000031d4
    1be4:	0000320c 	.word	0x0000320c
    1be8:	00002159 	.word	0x00002159
    1bec:	00003244 	.word	0x00003244
    1bf0:	000004a7 	.word	0x000004a7
    1bf4:	00000395 	.word	0x00000395
    1bf8:	000004ed 	.word	0x000004ed
    1bfc:	0000327c 	.word	0x0000327c
    1c00:	00003298 	.word	0x00003298
    1c04:	0000162d 	.word	0x0000162d
    1c08:	000032d0 	.word	0x000032d0
    1c0c:	000032fc 	.word	0x000032fc
    1c10:	00003320 	.word	0x00003320
    1c14:	00003350 	.word	0x00003350

00001c18 <screen_redraw_task_init>:
                                   size_t n_tasks) {
    1c18:	b570      	push	{r4, r5, r6, lr}
    1c1a:	0004      	movs	r4, r0
  screen_redraw_ctx->s1 = 0;
    1c1c:	2000      	movs	r0, #0
    1c1e:	6008      	str	r0, [r1, #0]
  screen_redraw_ctx->s2 = 0;
    1c20:	6048      	str	r0, [r1, #4]
  screen_redraw_ctx->tasks = tasks;
    1c22:	608a      	str	r2, [r1, #8]
  screen_redraw_ctx->n_tasks = n_tasks;
    1c24:	60cb      	str	r3, [r1, #12]
  mu_task_init(screen_redraw_task,
    1c26:	4b04      	ldr	r3, [pc, #16]	; (1c38 <screen_redraw_task_init+0x20>)
    1c28:	000a      	movs	r2, r1
    1c2a:	4904      	ldr	r1, [pc, #16]	; (1c3c <screen_redraw_task_init+0x24>)
    1c2c:	0020      	movs	r0, r4
    1c2e:	4d04      	ldr	r5, [pc, #16]	; (1c40 <screen_redraw_task_init+0x28>)
    1c30:	47a8      	blx	r5
}
    1c32:	0020      	movs	r0, r4
    1c34:	bd70      	pop	{r4, r5, r6, pc}
    1c36:	46c0      	nop			; (mov r8, r8)
    1c38:	00003384 	.word	0x00003384
    1c3c:	00001ab5 	.word	0x00001ab5
    1c40:	00000497 	.word	0x00000497

00001c44 <screen_update_task_fn>:
}

// =============================================================================
// local (static) code

static void *screen_update_task_fn(void *ctx, void *arg) {
    1c44:	b510      	push	{r4, lr}
    1c46:	000c      	movs	r4, r1
  // screen_update_context is passed as the first argument, scheduler is second
  screen_update_ctx_t *screen_update_ctx = (screen_update_ctx_t *)ctx;
  mu_sched_t *sched = (mu_sched_t *)arg;

  // schedule a call to the screen_redraw task now...
  mu_sched_task_now(sched, screen_update_ctx->screen_redraw_task);
    1c48:	6801      	ldr	r1, [r0, #0]
    1c4a:	0020      	movs	r0, r4
    1c4c:	4b05      	ldr	r3, [pc, #20]	; (1c64 <screen_update_task_fn+0x20>)
    1c4e:	4798      	blx	r3
  // ... and schedule a subsequent call to the screen_update_task
  mu_sched_reschedule_in(sched, mu_time_ms_to_duration(SCREEN_UPDATE_INTERVAL_MS));
    1c50:	4805      	ldr	r0, [pc, #20]	; (1c68 <screen_update_task_fn+0x24>)
    1c52:	4b06      	ldr	r3, [pc, #24]	; (1c6c <screen_update_task_fn+0x28>)
    1c54:	4798      	blx	r3
    1c56:	0001      	movs	r1, r0
    1c58:	0020      	movs	r0, r4
    1c5a:	4b05      	ldr	r3, [pc, #20]	; (1c70 <screen_update_task_fn+0x2c>)
    1c5c:	4798      	blx	r3

  return NULL;
}
    1c5e:	2000      	movs	r0, #0
    1c60:	bd10      	pop	{r4, pc}
    1c62:	46c0      	nop			; (mov r8, r8)
    1c64:	00000305 	.word	0x00000305
    1c68:	000009c4 	.word	0x000009c4
    1c6c:	00000529 	.word	0x00000529
    1c70:	00000325 	.word	0x00000325

00001c74 <screen_update_task_init>:
mu_task_t *screen_update_task_init(mu_task_t *screen_update_task, screen_update_ctx_t *screen_update_ctx, mu_task_t *screen_redraw_task) {
    1c74:	b570      	push	{r4, r5, r6, lr}
    1c76:	0004      	movs	r4, r0
  screen_update_ctx->screen_redraw_task = screen_redraw_task;
    1c78:	600a      	str	r2, [r1, #0]
  mu_task_init(screen_update_task, screen_update_task_fn, screen_update_ctx, "Screen Update");
    1c7a:	4b03      	ldr	r3, [pc, #12]	; (1c88 <screen_update_task_init+0x14>)
    1c7c:	000a      	movs	r2, r1
    1c7e:	4903      	ldr	r1, [pc, #12]	; (1c8c <screen_update_task_init+0x18>)
    1c80:	4d03      	ldr	r5, [pc, #12]	; (1c90 <screen_update_task_init+0x1c>)
    1c82:	47a8      	blx	r5
}
    1c84:	0020      	movs	r0, r4
    1c86:	bd70      	pop	{r4, r5, r6, pc}
    1c88:	00003394 	.word	0x00003394
    1c8c:	00001c45 	.word	0x00001c45
    1c90:	00000497 	.word	0x00000497

00001c94 <__udivsi3>:
    1c94:	2200      	movs	r2, #0
    1c96:	0843      	lsrs	r3, r0, #1
    1c98:	428b      	cmp	r3, r1
    1c9a:	d374      	bcc.n	1d86 <__udivsi3+0xf2>
    1c9c:	0903      	lsrs	r3, r0, #4
    1c9e:	428b      	cmp	r3, r1
    1ca0:	d35f      	bcc.n	1d62 <__udivsi3+0xce>
    1ca2:	0a03      	lsrs	r3, r0, #8
    1ca4:	428b      	cmp	r3, r1
    1ca6:	d344      	bcc.n	1d32 <__udivsi3+0x9e>
    1ca8:	0b03      	lsrs	r3, r0, #12
    1caa:	428b      	cmp	r3, r1
    1cac:	d328      	bcc.n	1d00 <__udivsi3+0x6c>
    1cae:	0c03      	lsrs	r3, r0, #16
    1cb0:	428b      	cmp	r3, r1
    1cb2:	d30d      	bcc.n	1cd0 <__udivsi3+0x3c>
    1cb4:	22ff      	movs	r2, #255	; 0xff
    1cb6:	0209      	lsls	r1, r1, #8
    1cb8:	ba12      	rev	r2, r2
    1cba:	0c03      	lsrs	r3, r0, #16
    1cbc:	428b      	cmp	r3, r1
    1cbe:	d302      	bcc.n	1cc6 <__udivsi3+0x32>
    1cc0:	1212      	asrs	r2, r2, #8
    1cc2:	0209      	lsls	r1, r1, #8
    1cc4:	d065      	beq.n	1d92 <__udivsi3+0xfe>
    1cc6:	0b03      	lsrs	r3, r0, #12
    1cc8:	428b      	cmp	r3, r1
    1cca:	d319      	bcc.n	1d00 <__udivsi3+0x6c>
    1ccc:	e000      	b.n	1cd0 <__udivsi3+0x3c>
    1cce:	0a09      	lsrs	r1, r1, #8
    1cd0:	0bc3      	lsrs	r3, r0, #15
    1cd2:	428b      	cmp	r3, r1
    1cd4:	d301      	bcc.n	1cda <__udivsi3+0x46>
    1cd6:	03cb      	lsls	r3, r1, #15
    1cd8:	1ac0      	subs	r0, r0, r3
    1cda:	4152      	adcs	r2, r2
    1cdc:	0b83      	lsrs	r3, r0, #14
    1cde:	428b      	cmp	r3, r1
    1ce0:	d301      	bcc.n	1ce6 <__udivsi3+0x52>
    1ce2:	038b      	lsls	r3, r1, #14
    1ce4:	1ac0      	subs	r0, r0, r3
    1ce6:	4152      	adcs	r2, r2
    1ce8:	0b43      	lsrs	r3, r0, #13
    1cea:	428b      	cmp	r3, r1
    1cec:	d301      	bcc.n	1cf2 <__udivsi3+0x5e>
    1cee:	034b      	lsls	r3, r1, #13
    1cf0:	1ac0      	subs	r0, r0, r3
    1cf2:	4152      	adcs	r2, r2
    1cf4:	0b03      	lsrs	r3, r0, #12
    1cf6:	428b      	cmp	r3, r1
    1cf8:	d301      	bcc.n	1cfe <__udivsi3+0x6a>
    1cfa:	030b      	lsls	r3, r1, #12
    1cfc:	1ac0      	subs	r0, r0, r3
    1cfe:	4152      	adcs	r2, r2
    1d00:	0ac3      	lsrs	r3, r0, #11
    1d02:	428b      	cmp	r3, r1
    1d04:	d301      	bcc.n	1d0a <__udivsi3+0x76>
    1d06:	02cb      	lsls	r3, r1, #11
    1d08:	1ac0      	subs	r0, r0, r3
    1d0a:	4152      	adcs	r2, r2
    1d0c:	0a83      	lsrs	r3, r0, #10
    1d0e:	428b      	cmp	r3, r1
    1d10:	d301      	bcc.n	1d16 <__udivsi3+0x82>
    1d12:	028b      	lsls	r3, r1, #10
    1d14:	1ac0      	subs	r0, r0, r3
    1d16:	4152      	adcs	r2, r2
    1d18:	0a43      	lsrs	r3, r0, #9
    1d1a:	428b      	cmp	r3, r1
    1d1c:	d301      	bcc.n	1d22 <__udivsi3+0x8e>
    1d1e:	024b      	lsls	r3, r1, #9
    1d20:	1ac0      	subs	r0, r0, r3
    1d22:	4152      	adcs	r2, r2
    1d24:	0a03      	lsrs	r3, r0, #8
    1d26:	428b      	cmp	r3, r1
    1d28:	d301      	bcc.n	1d2e <__udivsi3+0x9a>
    1d2a:	020b      	lsls	r3, r1, #8
    1d2c:	1ac0      	subs	r0, r0, r3
    1d2e:	4152      	adcs	r2, r2
    1d30:	d2cd      	bcs.n	1cce <__udivsi3+0x3a>
    1d32:	09c3      	lsrs	r3, r0, #7
    1d34:	428b      	cmp	r3, r1
    1d36:	d301      	bcc.n	1d3c <__udivsi3+0xa8>
    1d38:	01cb      	lsls	r3, r1, #7
    1d3a:	1ac0      	subs	r0, r0, r3
    1d3c:	4152      	adcs	r2, r2
    1d3e:	0983      	lsrs	r3, r0, #6
    1d40:	428b      	cmp	r3, r1
    1d42:	d301      	bcc.n	1d48 <__udivsi3+0xb4>
    1d44:	018b      	lsls	r3, r1, #6
    1d46:	1ac0      	subs	r0, r0, r3
    1d48:	4152      	adcs	r2, r2
    1d4a:	0943      	lsrs	r3, r0, #5
    1d4c:	428b      	cmp	r3, r1
    1d4e:	d301      	bcc.n	1d54 <__udivsi3+0xc0>
    1d50:	014b      	lsls	r3, r1, #5
    1d52:	1ac0      	subs	r0, r0, r3
    1d54:	4152      	adcs	r2, r2
    1d56:	0903      	lsrs	r3, r0, #4
    1d58:	428b      	cmp	r3, r1
    1d5a:	d301      	bcc.n	1d60 <__udivsi3+0xcc>
    1d5c:	010b      	lsls	r3, r1, #4
    1d5e:	1ac0      	subs	r0, r0, r3
    1d60:	4152      	adcs	r2, r2
    1d62:	08c3      	lsrs	r3, r0, #3
    1d64:	428b      	cmp	r3, r1
    1d66:	d301      	bcc.n	1d6c <__udivsi3+0xd8>
    1d68:	00cb      	lsls	r3, r1, #3
    1d6a:	1ac0      	subs	r0, r0, r3
    1d6c:	4152      	adcs	r2, r2
    1d6e:	0883      	lsrs	r3, r0, #2
    1d70:	428b      	cmp	r3, r1
    1d72:	d301      	bcc.n	1d78 <__udivsi3+0xe4>
    1d74:	008b      	lsls	r3, r1, #2
    1d76:	1ac0      	subs	r0, r0, r3
    1d78:	4152      	adcs	r2, r2
    1d7a:	0843      	lsrs	r3, r0, #1
    1d7c:	428b      	cmp	r3, r1
    1d7e:	d301      	bcc.n	1d84 <__udivsi3+0xf0>
    1d80:	004b      	lsls	r3, r1, #1
    1d82:	1ac0      	subs	r0, r0, r3
    1d84:	4152      	adcs	r2, r2
    1d86:	1a41      	subs	r1, r0, r1
    1d88:	d200      	bcs.n	1d8c <__udivsi3+0xf8>
    1d8a:	4601      	mov	r1, r0
    1d8c:	4152      	adcs	r2, r2
    1d8e:	4610      	mov	r0, r2
    1d90:	4770      	bx	lr
    1d92:	e7ff      	b.n	1d94 <__udivsi3+0x100>
    1d94:	b501      	push	{r0, lr}
    1d96:	2000      	movs	r0, #0
    1d98:	f000 f8f0 	bl	1f7c <__aeabi_idiv0>
    1d9c:	bd02      	pop	{r1, pc}
    1d9e:	46c0      	nop			; (mov r8, r8)

00001da0 <__aeabi_uidivmod>:
    1da0:	2900      	cmp	r1, #0
    1da2:	d0f7      	beq.n	1d94 <__udivsi3+0x100>
    1da4:	e776      	b.n	1c94 <__udivsi3>
    1da6:	4770      	bx	lr

00001da8 <__divsi3>:
    1da8:	4603      	mov	r3, r0
    1daa:	430b      	orrs	r3, r1
    1dac:	d47f      	bmi.n	1eae <__divsi3+0x106>
    1dae:	2200      	movs	r2, #0
    1db0:	0843      	lsrs	r3, r0, #1
    1db2:	428b      	cmp	r3, r1
    1db4:	d374      	bcc.n	1ea0 <__divsi3+0xf8>
    1db6:	0903      	lsrs	r3, r0, #4
    1db8:	428b      	cmp	r3, r1
    1dba:	d35f      	bcc.n	1e7c <__divsi3+0xd4>
    1dbc:	0a03      	lsrs	r3, r0, #8
    1dbe:	428b      	cmp	r3, r1
    1dc0:	d344      	bcc.n	1e4c <__divsi3+0xa4>
    1dc2:	0b03      	lsrs	r3, r0, #12
    1dc4:	428b      	cmp	r3, r1
    1dc6:	d328      	bcc.n	1e1a <__divsi3+0x72>
    1dc8:	0c03      	lsrs	r3, r0, #16
    1dca:	428b      	cmp	r3, r1
    1dcc:	d30d      	bcc.n	1dea <__divsi3+0x42>
    1dce:	22ff      	movs	r2, #255	; 0xff
    1dd0:	0209      	lsls	r1, r1, #8
    1dd2:	ba12      	rev	r2, r2
    1dd4:	0c03      	lsrs	r3, r0, #16
    1dd6:	428b      	cmp	r3, r1
    1dd8:	d302      	bcc.n	1de0 <__divsi3+0x38>
    1dda:	1212      	asrs	r2, r2, #8
    1ddc:	0209      	lsls	r1, r1, #8
    1dde:	d065      	beq.n	1eac <__divsi3+0x104>
    1de0:	0b03      	lsrs	r3, r0, #12
    1de2:	428b      	cmp	r3, r1
    1de4:	d319      	bcc.n	1e1a <__divsi3+0x72>
    1de6:	e000      	b.n	1dea <__divsi3+0x42>
    1de8:	0a09      	lsrs	r1, r1, #8
    1dea:	0bc3      	lsrs	r3, r0, #15
    1dec:	428b      	cmp	r3, r1
    1dee:	d301      	bcc.n	1df4 <__divsi3+0x4c>
    1df0:	03cb      	lsls	r3, r1, #15
    1df2:	1ac0      	subs	r0, r0, r3
    1df4:	4152      	adcs	r2, r2
    1df6:	0b83      	lsrs	r3, r0, #14
    1df8:	428b      	cmp	r3, r1
    1dfa:	d301      	bcc.n	1e00 <__divsi3+0x58>
    1dfc:	038b      	lsls	r3, r1, #14
    1dfe:	1ac0      	subs	r0, r0, r3
    1e00:	4152      	adcs	r2, r2
    1e02:	0b43      	lsrs	r3, r0, #13
    1e04:	428b      	cmp	r3, r1
    1e06:	d301      	bcc.n	1e0c <__divsi3+0x64>
    1e08:	034b      	lsls	r3, r1, #13
    1e0a:	1ac0      	subs	r0, r0, r3
    1e0c:	4152      	adcs	r2, r2
    1e0e:	0b03      	lsrs	r3, r0, #12
    1e10:	428b      	cmp	r3, r1
    1e12:	d301      	bcc.n	1e18 <__divsi3+0x70>
    1e14:	030b      	lsls	r3, r1, #12
    1e16:	1ac0      	subs	r0, r0, r3
    1e18:	4152      	adcs	r2, r2
    1e1a:	0ac3      	lsrs	r3, r0, #11
    1e1c:	428b      	cmp	r3, r1
    1e1e:	d301      	bcc.n	1e24 <__divsi3+0x7c>
    1e20:	02cb      	lsls	r3, r1, #11
    1e22:	1ac0      	subs	r0, r0, r3
    1e24:	4152      	adcs	r2, r2
    1e26:	0a83      	lsrs	r3, r0, #10
    1e28:	428b      	cmp	r3, r1
    1e2a:	d301      	bcc.n	1e30 <__divsi3+0x88>
    1e2c:	028b      	lsls	r3, r1, #10
    1e2e:	1ac0      	subs	r0, r0, r3
    1e30:	4152      	adcs	r2, r2
    1e32:	0a43      	lsrs	r3, r0, #9
    1e34:	428b      	cmp	r3, r1
    1e36:	d301      	bcc.n	1e3c <__divsi3+0x94>
    1e38:	024b      	lsls	r3, r1, #9
    1e3a:	1ac0      	subs	r0, r0, r3
    1e3c:	4152      	adcs	r2, r2
    1e3e:	0a03      	lsrs	r3, r0, #8
    1e40:	428b      	cmp	r3, r1
    1e42:	d301      	bcc.n	1e48 <__divsi3+0xa0>
    1e44:	020b      	lsls	r3, r1, #8
    1e46:	1ac0      	subs	r0, r0, r3
    1e48:	4152      	adcs	r2, r2
    1e4a:	d2cd      	bcs.n	1de8 <__divsi3+0x40>
    1e4c:	09c3      	lsrs	r3, r0, #7
    1e4e:	428b      	cmp	r3, r1
    1e50:	d301      	bcc.n	1e56 <__divsi3+0xae>
    1e52:	01cb      	lsls	r3, r1, #7
    1e54:	1ac0      	subs	r0, r0, r3
    1e56:	4152      	adcs	r2, r2
    1e58:	0983      	lsrs	r3, r0, #6
    1e5a:	428b      	cmp	r3, r1
    1e5c:	d301      	bcc.n	1e62 <__divsi3+0xba>
    1e5e:	018b      	lsls	r3, r1, #6
    1e60:	1ac0      	subs	r0, r0, r3
    1e62:	4152      	adcs	r2, r2
    1e64:	0943      	lsrs	r3, r0, #5
    1e66:	428b      	cmp	r3, r1
    1e68:	d301      	bcc.n	1e6e <__divsi3+0xc6>
    1e6a:	014b      	lsls	r3, r1, #5
    1e6c:	1ac0      	subs	r0, r0, r3
    1e6e:	4152      	adcs	r2, r2
    1e70:	0903      	lsrs	r3, r0, #4
    1e72:	428b      	cmp	r3, r1
    1e74:	d301      	bcc.n	1e7a <__divsi3+0xd2>
    1e76:	010b      	lsls	r3, r1, #4
    1e78:	1ac0      	subs	r0, r0, r3
    1e7a:	4152      	adcs	r2, r2
    1e7c:	08c3      	lsrs	r3, r0, #3
    1e7e:	428b      	cmp	r3, r1
    1e80:	d301      	bcc.n	1e86 <__divsi3+0xde>
    1e82:	00cb      	lsls	r3, r1, #3
    1e84:	1ac0      	subs	r0, r0, r3
    1e86:	4152      	adcs	r2, r2
    1e88:	0883      	lsrs	r3, r0, #2
    1e8a:	428b      	cmp	r3, r1
    1e8c:	d301      	bcc.n	1e92 <__divsi3+0xea>
    1e8e:	008b      	lsls	r3, r1, #2
    1e90:	1ac0      	subs	r0, r0, r3
    1e92:	4152      	adcs	r2, r2
    1e94:	0843      	lsrs	r3, r0, #1
    1e96:	428b      	cmp	r3, r1
    1e98:	d301      	bcc.n	1e9e <__divsi3+0xf6>
    1e9a:	004b      	lsls	r3, r1, #1
    1e9c:	1ac0      	subs	r0, r0, r3
    1e9e:	4152      	adcs	r2, r2
    1ea0:	1a41      	subs	r1, r0, r1
    1ea2:	d200      	bcs.n	1ea6 <__divsi3+0xfe>
    1ea4:	4601      	mov	r1, r0
    1ea6:	4152      	adcs	r2, r2
    1ea8:	4610      	mov	r0, r2
    1eaa:	4770      	bx	lr
    1eac:	e05d      	b.n	1f6a <__divsi3+0x1c2>
    1eae:	0fca      	lsrs	r2, r1, #31
    1eb0:	d000      	beq.n	1eb4 <__divsi3+0x10c>
    1eb2:	4249      	negs	r1, r1
    1eb4:	1003      	asrs	r3, r0, #32
    1eb6:	d300      	bcc.n	1eba <__divsi3+0x112>
    1eb8:	4240      	negs	r0, r0
    1eba:	4053      	eors	r3, r2
    1ebc:	2200      	movs	r2, #0
    1ebe:	469c      	mov	ip, r3
    1ec0:	0903      	lsrs	r3, r0, #4
    1ec2:	428b      	cmp	r3, r1
    1ec4:	d32d      	bcc.n	1f22 <__divsi3+0x17a>
    1ec6:	0a03      	lsrs	r3, r0, #8
    1ec8:	428b      	cmp	r3, r1
    1eca:	d312      	bcc.n	1ef2 <__divsi3+0x14a>
    1ecc:	22fc      	movs	r2, #252	; 0xfc
    1ece:	0189      	lsls	r1, r1, #6
    1ed0:	ba12      	rev	r2, r2
    1ed2:	0a03      	lsrs	r3, r0, #8
    1ed4:	428b      	cmp	r3, r1
    1ed6:	d30c      	bcc.n	1ef2 <__divsi3+0x14a>
    1ed8:	0189      	lsls	r1, r1, #6
    1eda:	1192      	asrs	r2, r2, #6
    1edc:	428b      	cmp	r3, r1
    1ede:	d308      	bcc.n	1ef2 <__divsi3+0x14a>
    1ee0:	0189      	lsls	r1, r1, #6
    1ee2:	1192      	asrs	r2, r2, #6
    1ee4:	428b      	cmp	r3, r1
    1ee6:	d304      	bcc.n	1ef2 <__divsi3+0x14a>
    1ee8:	0189      	lsls	r1, r1, #6
    1eea:	d03a      	beq.n	1f62 <__divsi3+0x1ba>
    1eec:	1192      	asrs	r2, r2, #6
    1eee:	e000      	b.n	1ef2 <__divsi3+0x14a>
    1ef0:	0989      	lsrs	r1, r1, #6
    1ef2:	09c3      	lsrs	r3, r0, #7
    1ef4:	428b      	cmp	r3, r1
    1ef6:	d301      	bcc.n	1efc <__divsi3+0x154>
    1ef8:	01cb      	lsls	r3, r1, #7
    1efa:	1ac0      	subs	r0, r0, r3
    1efc:	4152      	adcs	r2, r2
    1efe:	0983      	lsrs	r3, r0, #6
    1f00:	428b      	cmp	r3, r1
    1f02:	d301      	bcc.n	1f08 <__divsi3+0x160>
    1f04:	018b      	lsls	r3, r1, #6
    1f06:	1ac0      	subs	r0, r0, r3
    1f08:	4152      	adcs	r2, r2
    1f0a:	0943      	lsrs	r3, r0, #5
    1f0c:	428b      	cmp	r3, r1
    1f0e:	d301      	bcc.n	1f14 <__divsi3+0x16c>
    1f10:	014b      	lsls	r3, r1, #5
    1f12:	1ac0      	subs	r0, r0, r3
    1f14:	4152      	adcs	r2, r2
    1f16:	0903      	lsrs	r3, r0, #4
    1f18:	428b      	cmp	r3, r1
    1f1a:	d301      	bcc.n	1f20 <__divsi3+0x178>
    1f1c:	010b      	lsls	r3, r1, #4
    1f1e:	1ac0      	subs	r0, r0, r3
    1f20:	4152      	adcs	r2, r2
    1f22:	08c3      	lsrs	r3, r0, #3
    1f24:	428b      	cmp	r3, r1
    1f26:	d301      	bcc.n	1f2c <__divsi3+0x184>
    1f28:	00cb      	lsls	r3, r1, #3
    1f2a:	1ac0      	subs	r0, r0, r3
    1f2c:	4152      	adcs	r2, r2
    1f2e:	0883      	lsrs	r3, r0, #2
    1f30:	428b      	cmp	r3, r1
    1f32:	d301      	bcc.n	1f38 <__divsi3+0x190>
    1f34:	008b      	lsls	r3, r1, #2
    1f36:	1ac0      	subs	r0, r0, r3
    1f38:	4152      	adcs	r2, r2
    1f3a:	d2d9      	bcs.n	1ef0 <__divsi3+0x148>
    1f3c:	0843      	lsrs	r3, r0, #1
    1f3e:	428b      	cmp	r3, r1
    1f40:	d301      	bcc.n	1f46 <__divsi3+0x19e>
    1f42:	004b      	lsls	r3, r1, #1
    1f44:	1ac0      	subs	r0, r0, r3
    1f46:	4152      	adcs	r2, r2
    1f48:	1a41      	subs	r1, r0, r1
    1f4a:	d200      	bcs.n	1f4e <__divsi3+0x1a6>
    1f4c:	4601      	mov	r1, r0
    1f4e:	4663      	mov	r3, ip
    1f50:	4152      	adcs	r2, r2
    1f52:	105b      	asrs	r3, r3, #1
    1f54:	4610      	mov	r0, r2
    1f56:	d301      	bcc.n	1f5c <__divsi3+0x1b4>
    1f58:	4240      	negs	r0, r0
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d500      	bpl.n	1f60 <__divsi3+0x1b8>
    1f5e:	4249      	negs	r1, r1
    1f60:	4770      	bx	lr
    1f62:	4663      	mov	r3, ip
    1f64:	105b      	asrs	r3, r3, #1
    1f66:	d300      	bcc.n	1f6a <__divsi3+0x1c2>
    1f68:	4240      	negs	r0, r0
    1f6a:	b501      	push	{r0, lr}
    1f6c:	2000      	movs	r0, #0
    1f6e:	f000 f805 	bl	1f7c <__aeabi_idiv0>
    1f72:	bd02      	pop	{r1, pc}

00001f74 <__aeabi_idivmod>:
    1f74:	2900      	cmp	r1, #0
    1f76:	d0f8      	beq.n	1f6a <__divsi3+0x1c2>
    1f78:	e716      	b.n	1da8 <__divsi3>
    1f7a:	4770      	bx	lr

00001f7c <__aeabi_idiv0>:
    1f7c:	4770      	bx	lr
    1f7e:	46c0      	nop			; (mov r8, r8)

00001f80 <__ffssi2>:
    1f80:	b510      	push	{r4, lr}
    1f82:	2300      	movs	r3, #0
    1f84:	2800      	cmp	r0, #0
    1f86:	d002      	beq.n	1f8e <__ffssi2+0xe>
    1f88:	f000 f804 	bl	1f94 <__ctzsi2>
    1f8c:	1c43      	adds	r3, r0, #1
    1f8e:	0018      	movs	r0, r3
    1f90:	bd10      	pop	{r4, pc}
    1f92:	46c0      	nop			; (mov r8, r8)

00001f94 <__ctzsi2>:
    1f94:	4241      	negs	r1, r0
    1f96:	4008      	ands	r0, r1
    1f98:	211c      	movs	r1, #28
    1f9a:	2301      	movs	r3, #1
    1f9c:	041b      	lsls	r3, r3, #16
    1f9e:	4298      	cmp	r0, r3
    1fa0:	d301      	bcc.n	1fa6 <__ctzsi2+0x12>
    1fa2:	0c00      	lsrs	r0, r0, #16
    1fa4:	3910      	subs	r1, #16
    1fa6:	0a1b      	lsrs	r3, r3, #8
    1fa8:	4298      	cmp	r0, r3
    1faa:	d301      	bcc.n	1fb0 <__ctzsi2+0x1c>
    1fac:	0a00      	lsrs	r0, r0, #8
    1fae:	3908      	subs	r1, #8
    1fb0:	091b      	lsrs	r3, r3, #4
    1fb2:	4298      	cmp	r0, r3
    1fb4:	d301      	bcc.n	1fba <__ctzsi2+0x26>
    1fb6:	0900      	lsrs	r0, r0, #4
    1fb8:	3904      	subs	r1, #4
    1fba:	a202      	add	r2, pc, #8	; (adr r2, 1fc4 <__ctzsi2+0x30>)
    1fbc:	5c10      	ldrb	r0, [r2, r0]
    1fbe:	1a40      	subs	r0, r0, r1
    1fc0:	4770      	bx	lr
    1fc2:	46c0      	nop			; (mov r8, r8)
    1fc4:	1d1d1c1b 	.word	0x1d1d1c1b
    1fc8:	1e1e1e1e 	.word	0x1e1e1e1e
    1fcc:	1f1f1f1f 	.word	0x1f1f1f1f
    1fd0:	1f1f1f1f 	.word	0x1f1f1f1f

00001fd4 <__libc_init_array>:
    1fd4:	b570      	push	{r4, r5, r6, lr}
    1fd6:	2600      	movs	r6, #0
    1fd8:	4d0c      	ldr	r5, [pc, #48]	; (200c <STACK_SIZE+0xc>)
    1fda:	4c0d      	ldr	r4, [pc, #52]	; (2010 <STACK_SIZE+0x10>)
    1fdc:	1b64      	subs	r4, r4, r5
    1fde:	10a4      	asrs	r4, r4, #2
    1fe0:	42a6      	cmp	r6, r4
    1fe2:	d109      	bne.n	1ff8 <__libc_init_array+0x24>
    1fe4:	2600      	movs	r6, #0
    1fe6:	f001 fa29 	bl	343c <_init>
    1fea:	4d0a      	ldr	r5, [pc, #40]	; (2014 <STACK_SIZE+0x14>)
    1fec:	4c0a      	ldr	r4, [pc, #40]	; (2018 <STACK_SIZE+0x18>)
    1fee:	1b64      	subs	r4, r4, r5
    1ff0:	10a4      	asrs	r4, r4, #2
    1ff2:	42a6      	cmp	r6, r4
    1ff4:	d105      	bne.n	2002 <STACK_SIZE+0x2>
    1ff6:	bd70      	pop	{r4, r5, r6, pc}
    1ff8:	00b3      	lsls	r3, r6, #2
    1ffa:	58eb      	ldr	r3, [r5, r3]
    1ffc:	4798      	blx	r3
    1ffe:	3601      	adds	r6, #1
    2000:	e7ee      	b.n	1fe0 <__libc_init_array+0xc>
    2002:	00b3      	lsls	r3, r6, #2
    2004:	58eb      	ldr	r3, [r5, r3]
    2006:	4798      	blx	r3
    2008:	3601      	adds	r6, #1
    200a:	e7f2      	b.n	1ff2 <__libc_init_array+0x1e>
    200c:	00003448 	.word	0x00003448
    2010:	00003448 	.word	0x00003448
    2014:	00003448 	.word	0x00003448
    2018:	0000344c 	.word	0x0000344c

0000201c <memcpy>:
    201c:	2300      	movs	r3, #0
    201e:	b510      	push	{r4, lr}
    2020:	429a      	cmp	r2, r3
    2022:	d100      	bne.n	2026 <memcpy+0xa>
    2024:	bd10      	pop	{r4, pc}
    2026:	5ccc      	ldrb	r4, [r1, r3]
    2028:	54c4      	strb	r4, [r0, r3]
    202a:	3301      	adds	r3, #1
    202c:	e7f8      	b.n	2020 <memcpy+0x4>

0000202e <memmove>:
    202e:	b510      	push	{r4, lr}
    2030:	4288      	cmp	r0, r1
    2032:	d902      	bls.n	203a <memmove+0xc>
    2034:	188b      	adds	r3, r1, r2
    2036:	4298      	cmp	r0, r3
    2038:	d308      	bcc.n	204c <memmove+0x1e>
    203a:	2300      	movs	r3, #0
    203c:	429a      	cmp	r2, r3
    203e:	d007      	beq.n	2050 <memmove+0x22>
    2040:	5ccc      	ldrb	r4, [r1, r3]
    2042:	54c4      	strb	r4, [r0, r3]
    2044:	3301      	adds	r3, #1
    2046:	e7f9      	b.n	203c <memmove+0xe>
    2048:	5c8b      	ldrb	r3, [r1, r2]
    204a:	5483      	strb	r3, [r0, r2]
    204c:	3a01      	subs	r2, #1
    204e:	d2fb      	bcs.n	2048 <memmove+0x1a>
    2050:	bd10      	pop	{r4, pc}

00002052 <memset>:
    2052:	0003      	movs	r3, r0
    2054:	1882      	adds	r2, r0, r2
    2056:	4293      	cmp	r3, r2
    2058:	d100      	bne.n	205c <memset+0xa>
    205a:	4770      	bx	lr
    205c:	7019      	strb	r1, [r3, #0]
    205e:	3301      	adds	r3, #1
    2060:	e7f9      	b.n	2056 <memset+0x4>
	...

00002064 <iprintf>:
    2064:	b40f      	push	{r0, r1, r2, r3}
    2066:	4b0b      	ldr	r3, [pc, #44]	; (2094 <iprintf+0x30>)
    2068:	b513      	push	{r0, r1, r4, lr}
    206a:	681c      	ldr	r4, [r3, #0]
    206c:	2c00      	cmp	r4, #0
    206e:	d005      	beq.n	207c <iprintf+0x18>
    2070:	69a3      	ldr	r3, [r4, #24]
    2072:	2b00      	cmp	r3, #0
    2074:	d102      	bne.n	207c <iprintf+0x18>
    2076:	0020      	movs	r0, r4
    2078:	f000 fa3c 	bl	24f4 <__sinit>
    207c:	ab05      	add	r3, sp, #20
    207e:	9a04      	ldr	r2, [sp, #16]
    2080:	68a1      	ldr	r1, [r4, #8]
    2082:	0020      	movs	r0, r4
    2084:	9301      	str	r3, [sp, #4]
    2086:	f000 fc07 	bl	2898 <_vfiprintf_r>
    208a:	bc16      	pop	{r1, r2, r4}
    208c:	bc08      	pop	{r3}
    208e:	b004      	add	sp, #16
    2090:	4718      	bx	r3
    2092:	46c0      	nop			; (mov r8, r8)
    2094:	20000000 	.word	0x20000000

00002098 <_puts_r>:
    2098:	b570      	push	{r4, r5, r6, lr}
    209a:	0005      	movs	r5, r0
    209c:	000e      	movs	r6, r1
    209e:	2800      	cmp	r0, #0
    20a0:	d004      	beq.n	20ac <_puts_r+0x14>
    20a2:	6983      	ldr	r3, [r0, #24]
    20a4:	2b00      	cmp	r3, #0
    20a6:	d101      	bne.n	20ac <_puts_r+0x14>
    20a8:	f000 fa24 	bl	24f4 <__sinit>
    20ac:	69ab      	ldr	r3, [r5, #24]
    20ae:	68ac      	ldr	r4, [r5, #8]
    20b0:	2b00      	cmp	r3, #0
    20b2:	d102      	bne.n	20ba <_puts_r+0x22>
    20b4:	0028      	movs	r0, r5
    20b6:	f000 fa1d 	bl	24f4 <__sinit>
    20ba:	4b24      	ldr	r3, [pc, #144]	; (214c <_puts_r+0xb4>)
    20bc:	429c      	cmp	r4, r3
    20be:	d10f      	bne.n	20e0 <_puts_r+0x48>
    20c0:	686c      	ldr	r4, [r5, #4]
    20c2:	89a3      	ldrh	r3, [r4, #12]
    20c4:	071b      	lsls	r3, r3, #28
    20c6:	d502      	bpl.n	20ce <_puts_r+0x36>
    20c8:	6923      	ldr	r3, [r4, #16]
    20ca:	2b00      	cmp	r3, #0
    20cc:	d120      	bne.n	2110 <_puts_r+0x78>
    20ce:	0021      	movs	r1, r4
    20d0:	0028      	movs	r0, r5
    20d2:	f000 f8a1 	bl	2218 <__swsetup_r>
    20d6:	2800      	cmp	r0, #0
    20d8:	d01a      	beq.n	2110 <_puts_r+0x78>
    20da:	2001      	movs	r0, #1
    20dc:	4240      	negs	r0, r0
    20de:	bd70      	pop	{r4, r5, r6, pc}
    20e0:	4b1b      	ldr	r3, [pc, #108]	; (2150 <_puts_r+0xb8>)
    20e2:	429c      	cmp	r4, r3
    20e4:	d101      	bne.n	20ea <_puts_r+0x52>
    20e6:	68ac      	ldr	r4, [r5, #8]
    20e8:	e7eb      	b.n	20c2 <_puts_r+0x2a>
    20ea:	4b1a      	ldr	r3, [pc, #104]	; (2154 <_puts_r+0xbc>)
    20ec:	429c      	cmp	r4, r3
    20ee:	d1e8      	bne.n	20c2 <_puts_r+0x2a>
    20f0:	68ec      	ldr	r4, [r5, #12]
    20f2:	e7e6      	b.n	20c2 <_puts_r+0x2a>
    20f4:	3b01      	subs	r3, #1
    20f6:	3601      	adds	r6, #1
    20f8:	60a3      	str	r3, [r4, #8]
    20fa:	2b00      	cmp	r3, #0
    20fc:	da04      	bge.n	2108 <_puts_r+0x70>
    20fe:	69a2      	ldr	r2, [r4, #24]
    2100:	4293      	cmp	r3, r2
    2102:	db16      	blt.n	2132 <_puts_r+0x9a>
    2104:	290a      	cmp	r1, #10
    2106:	d014      	beq.n	2132 <_puts_r+0x9a>
    2108:	6823      	ldr	r3, [r4, #0]
    210a:	1c5a      	adds	r2, r3, #1
    210c:	6022      	str	r2, [r4, #0]
    210e:	7019      	strb	r1, [r3, #0]
    2110:	7831      	ldrb	r1, [r6, #0]
    2112:	68a3      	ldr	r3, [r4, #8]
    2114:	2900      	cmp	r1, #0
    2116:	d1ed      	bne.n	20f4 <_puts_r+0x5c>
    2118:	3b01      	subs	r3, #1
    211a:	60a3      	str	r3, [r4, #8]
    211c:	2b00      	cmp	r3, #0
    211e:	da0f      	bge.n	2140 <_puts_r+0xa8>
    2120:	0022      	movs	r2, r4
    2122:	310a      	adds	r1, #10
    2124:	0028      	movs	r0, r5
    2126:	f000 f821 	bl	216c <__swbuf_r>
    212a:	1c43      	adds	r3, r0, #1
    212c:	d0d5      	beq.n	20da <_puts_r+0x42>
    212e:	200a      	movs	r0, #10
    2130:	e7d5      	b.n	20de <_puts_r+0x46>
    2132:	0022      	movs	r2, r4
    2134:	0028      	movs	r0, r5
    2136:	f000 f819 	bl	216c <__swbuf_r>
    213a:	1c43      	adds	r3, r0, #1
    213c:	d1e8      	bne.n	2110 <_puts_r+0x78>
    213e:	e7cc      	b.n	20da <_puts_r+0x42>
    2140:	200a      	movs	r0, #10
    2142:	6823      	ldr	r3, [r4, #0]
    2144:	1c5a      	adds	r2, r3, #1
    2146:	6022      	str	r2, [r4, #0]
    2148:	7018      	strb	r0, [r3, #0]
    214a:	e7c8      	b.n	20de <_puts_r+0x46>
    214c:	000033c8 	.word	0x000033c8
    2150:	000033e8 	.word	0x000033e8
    2154:	000033a8 	.word	0x000033a8

00002158 <puts>:
    2158:	b510      	push	{r4, lr}
    215a:	4b03      	ldr	r3, [pc, #12]	; (2168 <puts+0x10>)
    215c:	0001      	movs	r1, r0
    215e:	6818      	ldr	r0, [r3, #0]
    2160:	f7ff ff9a 	bl	2098 <_puts_r>
    2164:	bd10      	pop	{r4, pc}
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	20000000 	.word	0x20000000

0000216c <__swbuf_r>:
    216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    216e:	0005      	movs	r5, r0
    2170:	000e      	movs	r6, r1
    2172:	0014      	movs	r4, r2
    2174:	2800      	cmp	r0, #0
    2176:	d004      	beq.n	2182 <__swbuf_r+0x16>
    2178:	6983      	ldr	r3, [r0, #24]
    217a:	2b00      	cmp	r3, #0
    217c:	d101      	bne.n	2182 <__swbuf_r+0x16>
    217e:	f000 f9b9 	bl	24f4 <__sinit>
    2182:	4b22      	ldr	r3, [pc, #136]	; (220c <__swbuf_r+0xa0>)
    2184:	429c      	cmp	r4, r3
    2186:	d12d      	bne.n	21e4 <__swbuf_r+0x78>
    2188:	686c      	ldr	r4, [r5, #4]
    218a:	69a3      	ldr	r3, [r4, #24]
    218c:	60a3      	str	r3, [r4, #8]
    218e:	89a3      	ldrh	r3, [r4, #12]
    2190:	071b      	lsls	r3, r3, #28
    2192:	d531      	bpl.n	21f8 <__swbuf_r+0x8c>
    2194:	6923      	ldr	r3, [r4, #16]
    2196:	2b00      	cmp	r3, #0
    2198:	d02e      	beq.n	21f8 <__swbuf_r+0x8c>
    219a:	6823      	ldr	r3, [r4, #0]
    219c:	6922      	ldr	r2, [r4, #16]
    219e:	b2f7      	uxtb	r7, r6
    21a0:	1a98      	subs	r0, r3, r2
    21a2:	6963      	ldr	r3, [r4, #20]
    21a4:	b2f6      	uxtb	r6, r6
    21a6:	4298      	cmp	r0, r3
    21a8:	db05      	blt.n	21b6 <__swbuf_r+0x4a>
    21aa:	0021      	movs	r1, r4
    21ac:	0028      	movs	r0, r5
    21ae:	f000 f933 	bl	2418 <_fflush_r>
    21b2:	2800      	cmp	r0, #0
    21b4:	d126      	bne.n	2204 <__swbuf_r+0x98>
    21b6:	68a3      	ldr	r3, [r4, #8]
    21b8:	3001      	adds	r0, #1
    21ba:	3b01      	subs	r3, #1
    21bc:	60a3      	str	r3, [r4, #8]
    21be:	6823      	ldr	r3, [r4, #0]
    21c0:	1c5a      	adds	r2, r3, #1
    21c2:	6022      	str	r2, [r4, #0]
    21c4:	701f      	strb	r7, [r3, #0]
    21c6:	6963      	ldr	r3, [r4, #20]
    21c8:	4298      	cmp	r0, r3
    21ca:	d004      	beq.n	21d6 <__swbuf_r+0x6a>
    21cc:	89a3      	ldrh	r3, [r4, #12]
    21ce:	07db      	lsls	r3, r3, #31
    21d0:	d51a      	bpl.n	2208 <__swbuf_r+0x9c>
    21d2:	2e0a      	cmp	r6, #10
    21d4:	d118      	bne.n	2208 <__swbuf_r+0x9c>
    21d6:	0021      	movs	r1, r4
    21d8:	0028      	movs	r0, r5
    21da:	f000 f91d 	bl	2418 <_fflush_r>
    21de:	2800      	cmp	r0, #0
    21e0:	d012      	beq.n	2208 <__swbuf_r+0x9c>
    21e2:	e00f      	b.n	2204 <__swbuf_r+0x98>
    21e4:	4b0a      	ldr	r3, [pc, #40]	; (2210 <__swbuf_r+0xa4>)
    21e6:	429c      	cmp	r4, r3
    21e8:	d101      	bne.n	21ee <__swbuf_r+0x82>
    21ea:	68ac      	ldr	r4, [r5, #8]
    21ec:	e7cd      	b.n	218a <__swbuf_r+0x1e>
    21ee:	4b09      	ldr	r3, [pc, #36]	; (2214 <__swbuf_r+0xa8>)
    21f0:	429c      	cmp	r4, r3
    21f2:	d1ca      	bne.n	218a <__swbuf_r+0x1e>
    21f4:	68ec      	ldr	r4, [r5, #12]
    21f6:	e7c8      	b.n	218a <__swbuf_r+0x1e>
    21f8:	0021      	movs	r1, r4
    21fa:	0028      	movs	r0, r5
    21fc:	f000 f80c 	bl	2218 <__swsetup_r>
    2200:	2800      	cmp	r0, #0
    2202:	d0ca      	beq.n	219a <__swbuf_r+0x2e>
    2204:	2601      	movs	r6, #1
    2206:	4276      	negs	r6, r6
    2208:	0030      	movs	r0, r6
    220a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    220c:	000033c8 	.word	0x000033c8
    2210:	000033e8 	.word	0x000033e8
    2214:	000033a8 	.word	0x000033a8

00002218 <__swsetup_r>:
    2218:	4b36      	ldr	r3, [pc, #216]	; (22f4 <__swsetup_r+0xdc>)
    221a:	b570      	push	{r4, r5, r6, lr}
    221c:	681d      	ldr	r5, [r3, #0]
    221e:	0006      	movs	r6, r0
    2220:	000c      	movs	r4, r1
    2222:	2d00      	cmp	r5, #0
    2224:	d005      	beq.n	2232 <__swsetup_r+0x1a>
    2226:	69ab      	ldr	r3, [r5, #24]
    2228:	2b00      	cmp	r3, #0
    222a:	d102      	bne.n	2232 <__swsetup_r+0x1a>
    222c:	0028      	movs	r0, r5
    222e:	f000 f961 	bl	24f4 <__sinit>
    2232:	4b31      	ldr	r3, [pc, #196]	; (22f8 <__swsetup_r+0xe0>)
    2234:	429c      	cmp	r4, r3
    2236:	d10f      	bne.n	2258 <__swsetup_r+0x40>
    2238:	686c      	ldr	r4, [r5, #4]
    223a:	230c      	movs	r3, #12
    223c:	5ee2      	ldrsh	r2, [r4, r3]
    223e:	b293      	uxth	r3, r2
    2240:	0719      	lsls	r1, r3, #28
    2242:	d42d      	bmi.n	22a0 <__swsetup_r+0x88>
    2244:	06d9      	lsls	r1, r3, #27
    2246:	d411      	bmi.n	226c <__swsetup_r+0x54>
    2248:	2309      	movs	r3, #9
    224a:	2001      	movs	r0, #1
    224c:	6033      	str	r3, [r6, #0]
    224e:	3337      	adds	r3, #55	; 0x37
    2250:	4313      	orrs	r3, r2
    2252:	81a3      	strh	r3, [r4, #12]
    2254:	4240      	negs	r0, r0
    2256:	bd70      	pop	{r4, r5, r6, pc}
    2258:	4b28      	ldr	r3, [pc, #160]	; (22fc <__swsetup_r+0xe4>)
    225a:	429c      	cmp	r4, r3
    225c:	d101      	bne.n	2262 <__swsetup_r+0x4a>
    225e:	68ac      	ldr	r4, [r5, #8]
    2260:	e7eb      	b.n	223a <__swsetup_r+0x22>
    2262:	4b27      	ldr	r3, [pc, #156]	; (2300 <__swsetup_r+0xe8>)
    2264:	429c      	cmp	r4, r3
    2266:	d1e8      	bne.n	223a <__swsetup_r+0x22>
    2268:	68ec      	ldr	r4, [r5, #12]
    226a:	e7e6      	b.n	223a <__swsetup_r+0x22>
    226c:	075b      	lsls	r3, r3, #29
    226e:	d513      	bpl.n	2298 <__swsetup_r+0x80>
    2270:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2272:	2900      	cmp	r1, #0
    2274:	d008      	beq.n	2288 <__swsetup_r+0x70>
    2276:	0023      	movs	r3, r4
    2278:	3344      	adds	r3, #68	; 0x44
    227a:	4299      	cmp	r1, r3
    227c:	d002      	beq.n	2284 <__swsetup_r+0x6c>
    227e:	0030      	movs	r0, r6
    2280:	f000 fa3a 	bl	26f8 <_free_r>
    2284:	2300      	movs	r3, #0
    2286:	6363      	str	r3, [r4, #52]	; 0x34
    2288:	2224      	movs	r2, #36	; 0x24
    228a:	89a3      	ldrh	r3, [r4, #12]
    228c:	4393      	bics	r3, r2
    228e:	81a3      	strh	r3, [r4, #12]
    2290:	2300      	movs	r3, #0
    2292:	6063      	str	r3, [r4, #4]
    2294:	6923      	ldr	r3, [r4, #16]
    2296:	6023      	str	r3, [r4, #0]
    2298:	2308      	movs	r3, #8
    229a:	89a2      	ldrh	r2, [r4, #12]
    229c:	4313      	orrs	r3, r2
    229e:	81a3      	strh	r3, [r4, #12]
    22a0:	6923      	ldr	r3, [r4, #16]
    22a2:	2b00      	cmp	r3, #0
    22a4:	d10b      	bne.n	22be <__swsetup_r+0xa6>
    22a6:	21a0      	movs	r1, #160	; 0xa0
    22a8:	2280      	movs	r2, #128	; 0x80
    22aa:	89a3      	ldrh	r3, [r4, #12]
    22ac:	0089      	lsls	r1, r1, #2
    22ae:	0092      	lsls	r2, r2, #2
    22b0:	400b      	ands	r3, r1
    22b2:	4293      	cmp	r3, r2
    22b4:	d003      	beq.n	22be <__swsetup_r+0xa6>
    22b6:	0021      	movs	r1, r4
    22b8:	0030      	movs	r0, r6
    22ba:	f000 f9d9 	bl	2670 <__smakebuf_r>
    22be:	2301      	movs	r3, #1
    22c0:	89a2      	ldrh	r2, [r4, #12]
    22c2:	4013      	ands	r3, r2
    22c4:	d011      	beq.n	22ea <__swsetup_r+0xd2>
    22c6:	2300      	movs	r3, #0
    22c8:	60a3      	str	r3, [r4, #8]
    22ca:	6963      	ldr	r3, [r4, #20]
    22cc:	425b      	negs	r3, r3
    22ce:	61a3      	str	r3, [r4, #24]
    22d0:	2000      	movs	r0, #0
    22d2:	6923      	ldr	r3, [r4, #16]
    22d4:	4283      	cmp	r3, r0
    22d6:	d1be      	bne.n	2256 <__swsetup_r+0x3e>
    22d8:	230c      	movs	r3, #12
    22da:	5ee2      	ldrsh	r2, [r4, r3]
    22dc:	0613      	lsls	r3, r2, #24
    22de:	d5ba      	bpl.n	2256 <__swsetup_r+0x3e>
    22e0:	2340      	movs	r3, #64	; 0x40
    22e2:	4313      	orrs	r3, r2
    22e4:	81a3      	strh	r3, [r4, #12]
    22e6:	3801      	subs	r0, #1
    22e8:	e7b5      	b.n	2256 <__swsetup_r+0x3e>
    22ea:	0792      	lsls	r2, r2, #30
    22ec:	d400      	bmi.n	22f0 <__swsetup_r+0xd8>
    22ee:	6963      	ldr	r3, [r4, #20]
    22f0:	60a3      	str	r3, [r4, #8]
    22f2:	e7ed      	b.n	22d0 <__swsetup_r+0xb8>
    22f4:	20000000 	.word	0x20000000
    22f8:	000033c8 	.word	0x000033c8
    22fc:	000033e8 	.word	0x000033e8
    2300:	000033a8 	.word	0x000033a8

00002304 <__sflush_r>:
    2304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2306:	898a      	ldrh	r2, [r1, #12]
    2308:	0005      	movs	r5, r0
    230a:	000c      	movs	r4, r1
    230c:	0713      	lsls	r3, r2, #28
    230e:	d460      	bmi.n	23d2 <__sflush_r+0xce>
    2310:	684b      	ldr	r3, [r1, #4]
    2312:	2b00      	cmp	r3, #0
    2314:	dc04      	bgt.n	2320 <__sflush_r+0x1c>
    2316:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2318:	2b00      	cmp	r3, #0
    231a:	dc01      	bgt.n	2320 <__sflush_r+0x1c>
    231c:	2000      	movs	r0, #0
    231e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2320:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2322:	2f00      	cmp	r7, #0
    2324:	d0fa      	beq.n	231c <__sflush_r+0x18>
    2326:	2300      	movs	r3, #0
    2328:	682e      	ldr	r6, [r5, #0]
    232a:	602b      	str	r3, [r5, #0]
    232c:	2380      	movs	r3, #128	; 0x80
    232e:	015b      	lsls	r3, r3, #5
    2330:	401a      	ands	r2, r3
    2332:	d034      	beq.n	239e <__sflush_r+0x9a>
    2334:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2336:	89a3      	ldrh	r3, [r4, #12]
    2338:	075b      	lsls	r3, r3, #29
    233a:	d506      	bpl.n	234a <__sflush_r+0x46>
    233c:	6863      	ldr	r3, [r4, #4]
    233e:	1ac0      	subs	r0, r0, r3
    2340:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2342:	2b00      	cmp	r3, #0
    2344:	d001      	beq.n	234a <__sflush_r+0x46>
    2346:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2348:	1ac0      	subs	r0, r0, r3
    234a:	0002      	movs	r2, r0
    234c:	6a21      	ldr	r1, [r4, #32]
    234e:	2300      	movs	r3, #0
    2350:	0028      	movs	r0, r5
    2352:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2354:	47b8      	blx	r7
    2356:	89a1      	ldrh	r1, [r4, #12]
    2358:	1c43      	adds	r3, r0, #1
    235a:	d106      	bne.n	236a <__sflush_r+0x66>
    235c:	682b      	ldr	r3, [r5, #0]
    235e:	2b1d      	cmp	r3, #29
    2360:	d831      	bhi.n	23c6 <__sflush_r+0xc2>
    2362:	4a2c      	ldr	r2, [pc, #176]	; (2414 <__sflush_r+0x110>)
    2364:	40da      	lsrs	r2, r3
    2366:	07d3      	lsls	r3, r2, #31
    2368:	d52d      	bpl.n	23c6 <__sflush_r+0xc2>
    236a:	2300      	movs	r3, #0
    236c:	6063      	str	r3, [r4, #4]
    236e:	6923      	ldr	r3, [r4, #16]
    2370:	6023      	str	r3, [r4, #0]
    2372:	04cb      	lsls	r3, r1, #19
    2374:	d505      	bpl.n	2382 <__sflush_r+0x7e>
    2376:	1c43      	adds	r3, r0, #1
    2378:	d102      	bne.n	2380 <__sflush_r+0x7c>
    237a:	682b      	ldr	r3, [r5, #0]
    237c:	2b00      	cmp	r3, #0
    237e:	d100      	bne.n	2382 <__sflush_r+0x7e>
    2380:	6560      	str	r0, [r4, #84]	; 0x54
    2382:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2384:	602e      	str	r6, [r5, #0]
    2386:	2900      	cmp	r1, #0
    2388:	d0c8      	beq.n	231c <__sflush_r+0x18>
    238a:	0023      	movs	r3, r4
    238c:	3344      	adds	r3, #68	; 0x44
    238e:	4299      	cmp	r1, r3
    2390:	d002      	beq.n	2398 <__sflush_r+0x94>
    2392:	0028      	movs	r0, r5
    2394:	f000 f9b0 	bl	26f8 <_free_r>
    2398:	2000      	movs	r0, #0
    239a:	6360      	str	r0, [r4, #52]	; 0x34
    239c:	e7bf      	b.n	231e <__sflush_r+0x1a>
    239e:	2301      	movs	r3, #1
    23a0:	6a21      	ldr	r1, [r4, #32]
    23a2:	0028      	movs	r0, r5
    23a4:	47b8      	blx	r7
    23a6:	1c43      	adds	r3, r0, #1
    23a8:	d1c5      	bne.n	2336 <__sflush_r+0x32>
    23aa:	682b      	ldr	r3, [r5, #0]
    23ac:	2b00      	cmp	r3, #0
    23ae:	d0c2      	beq.n	2336 <__sflush_r+0x32>
    23b0:	2b1d      	cmp	r3, #29
    23b2:	d001      	beq.n	23b8 <__sflush_r+0xb4>
    23b4:	2b16      	cmp	r3, #22
    23b6:	d101      	bne.n	23bc <__sflush_r+0xb8>
    23b8:	602e      	str	r6, [r5, #0]
    23ba:	e7af      	b.n	231c <__sflush_r+0x18>
    23bc:	2340      	movs	r3, #64	; 0x40
    23be:	89a2      	ldrh	r2, [r4, #12]
    23c0:	4313      	orrs	r3, r2
    23c2:	81a3      	strh	r3, [r4, #12]
    23c4:	e7ab      	b.n	231e <__sflush_r+0x1a>
    23c6:	2340      	movs	r3, #64	; 0x40
    23c8:	430b      	orrs	r3, r1
    23ca:	2001      	movs	r0, #1
    23cc:	81a3      	strh	r3, [r4, #12]
    23ce:	4240      	negs	r0, r0
    23d0:	e7a5      	b.n	231e <__sflush_r+0x1a>
    23d2:	690f      	ldr	r7, [r1, #16]
    23d4:	2f00      	cmp	r7, #0
    23d6:	d0a1      	beq.n	231c <__sflush_r+0x18>
    23d8:	680b      	ldr	r3, [r1, #0]
    23da:	600f      	str	r7, [r1, #0]
    23dc:	1bdb      	subs	r3, r3, r7
    23de:	9301      	str	r3, [sp, #4]
    23e0:	2300      	movs	r3, #0
    23e2:	0792      	lsls	r2, r2, #30
    23e4:	d100      	bne.n	23e8 <__sflush_r+0xe4>
    23e6:	694b      	ldr	r3, [r1, #20]
    23e8:	60a3      	str	r3, [r4, #8]
    23ea:	9b01      	ldr	r3, [sp, #4]
    23ec:	2b00      	cmp	r3, #0
    23ee:	dc00      	bgt.n	23f2 <__sflush_r+0xee>
    23f0:	e794      	b.n	231c <__sflush_r+0x18>
    23f2:	9b01      	ldr	r3, [sp, #4]
    23f4:	003a      	movs	r2, r7
    23f6:	6a21      	ldr	r1, [r4, #32]
    23f8:	0028      	movs	r0, r5
    23fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    23fc:	47b0      	blx	r6
    23fe:	2800      	cmp	r0, #0
    2400:	dc03      	bgt.n	240a <__sflush_r+0x106>
    2402:	2340      	movs	r3, #64	; 0x40
    2404:	89a2      	ldrh	r2, [r4, #12]
    2406:	4313      	orrs	r3, r2
    2408:	e7df      	b.n	23ca <__sflush_r+0xc6>
    240a:	9b01      	ldr	r3, [sp, #4]
    240c:	183f      	adds	r7, r7, r0
    240e:	1a1b      	subs	r3, r3, r0
    2410:	9301      	str	r3, [sp, #4]
    2412:	e7ea      	b.n	23ea <__sflush_r+0xe6>
    2414:	20400001 	.word	0x20400001

00002418 <_fflush_r>:
    2418:	690b      	ldr	r3, [r1, #16]
    241a:	b570      	push	{r4, r5, r6, lr}
    241c:	0005      	movs	r5, r0
    241e:	000c      	movs	r4, r1
    2420:	2b00      	cmp	r3, #0
    2422:	d101      	bne.n	2428 <_fflush_r+0x10>
    2424:	2000      	movs	r0, #0
    2426:	bd70      	pop	{r4, r5, r6, pc}
    2428:	2800      	cmp	r0, #0
    242a:	d004      	beq.n	2436 <_fflush_r+0x1e>
    242c:	6983      	ldr	r3, [r0, #24]
    242e:	2b00      	cmp	r3, #0
    2430:	d101      	bne.n	2436 <_fflush_r+0x1e>
    2432:	f000 f85f 	bl	24f4 <__sinit>
    2436:	4b0b      	ldr	r3, [pc, #44]	; (2464 <_fflush_r+0x4c>)
    2438:	429c      	cmp	r4, r3
    243a:	d109      	bne.n	2450 <_fflush_r+0x38>
    243c:	686c      	ldr	r4, [r5, #4]
    243e:	220c      	movs	r2, #12
    2440:	5ea3      	ldrsh	r3, [r4, r2]
    2442:	2b00      	cmp	r3, #0
    2444:	d0ee      	beq.n	2424 <_fflush_r+0xc>
    2446:	0021      	movs	r1, r4
    2448:	0028      	movs	r0, r5
    244a:	f7ff ff5b 	bl	2304 <__sflush_r>
    244e:	e7ea      	b.n	2426 <_fflush_r+0xe>
    2450:	4b05      	ldr	r3, [pc, #20]	; (2468 <_fflush_r+0x50>)
    2452:	429c      	cmp	r4, r3
    2454:	d101      	bne.n	245a <_fflush_r+0x42>
    2456:	68ac      	ldr	r4, [r5, #8]
    2458:	e7f1      	b.n	243e <_fflush_r+0x26>
    245a:	4b04      	ldr	r3, [pc, #16]	; (246c <_fflush_r+0x54>)
    245c:	429c      	cmp	r4, r3
    245e:	d1ee      	bne.n	243e <_fflush_r+0x26>
    2460:	68ec      	ldr	r4, [r5, #12]
    2462:	e7ec      	b.n	243e <_fflush_r+0x26>
    2464:	000033c8 	.word	0x000033c8
    2468:	000033e8 	.word	0x000033e8
    246c:	000033a8 	.word	0x000033a8

00002470 <_cleanup_r>:
    2470:	b510      	push	{r4, lr}
    2472:	4902      	ldr	r1, [pc, #8]	; (247c <_cleanup_r+0xc>)
    2474:	f000 f8b2 	bl	25dc <_fwalk_reent>
    2478:	bd10      	pop	{r4, pc}
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	00002419 	.word	0x00002419

00002480 <std.isra.0>:
    2480:	2300      	movs	r3, #0
    2482:	b510      	push	{r4, lr}
    2484:	0004      	movs	r4, r0
    2486:	6003      	str	r3, [r0, #0]
    2488:	6043      	str	r3, [r0, #4]
    248a:	6083      	str	r3, [r0, #8]
    248c:	8181      	strh	r1, [r0, #12]
    248e:	6643      	str	r3, [r0, #100]	; 0x64
    2490:	81c2      	strh	r2, [r0, #14]
    2492:	6103      	str	r3, [r0, #16]
    2494:	6143      	str	r3, [r0, #20]
    2496:	6183      	str	r3, [r0, #24]
    2498:	0019      	movs	r1, r3
    249a:	2208      	movs	r2, #8
    249c:	305c      	adds	r0, #92	; 0x5c
    249e:	f7ff fdd8 	bl	2052 <memset>
    24a2:	4b05      	ldr	r3, [pc, #20]	; (24b8 <std.isra.0+0x38>)
    24a4:	6224      	str	r4, [r4, #32]
    24a6:	6263      	str	r3, [r4, #36]	; 0x24
    24a8:	4b04      	ldr	r3, [pc, #16]	; (24bc <std.isra.0+0x3c>)
    24aa:	62a3      	str	r3, [r4, #40]	; 0x28
    24ac:	4b04      	ldr	r3, [pc, #16]	; (24c0 <std.isra.0+0x40>)
    24ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    24b0:	4b04      	ldr	r3, [pc, #16]	; (24c4 <std.isra.0+0x44>)
    24b2:	6323      	str	r3, [r4, #48]	; 0x30
    24b4:	bd10      	pop	{r4, pc}
    24b6:	46c0      	nop			; (mov r8, r8)
    24b8:	00002e05 	.word	0x00002e05
    24bc:	00002e2d 	.word	0x00002e2d
    24c0:	00002e65 	.word	0x00002e65
    24c4:	00002e91 	.word	0x00002e91

000024c8 <__sfmoreglue>:
    24c8:	b570      	push	{r4, r5, r6, lr}
    24ca:	2568      	movs	r5, #104	; 0x68
    24cc:	1e4a      	subs	r2, r1, #1
    24ce:	4355      	muls	r5, r2
    24d0:	000e      	movs	r6, r1
    24d2:	0029      	movs	r1, r5
    24d4:	3174      	adds	r1, #116	; 0x74
    24d6:	f000 f959 	bl	278c <_malloc_r>
    24da:	1e04      	subs	r4, r0, #0
    24dc:	d008      	beq.n	24f0 <__sfmoreglue+0x28>
    24de:	2100      	movs	r1, #0
    24e0:	002a      	movs	r2, r5
    24e2:	6001      	str	r1, [r0, #0]
    24e4:	6046      	str	r6, [r0, #4]
    24e6:	300c      	adds	r0, #12
    24e8:	60a0      	str	r0, [r4, #8]
    24ea:	3268      	adds	r2, #104	; 0x68
    24ec:	f7ff fdb1 	bl	2052 <memset>
    24f0:	0020      	movs	r0, r4
    24f2:	bd70      	pop	{r4, r5, r6, pc}

000024f4 <__sinit>:
    24f4:	6983      	ldr	r3, [r0, #24]
    24f6:	b513      	push	{r0, r1, r4, lr}
    24f8:	0004      	movs	r4, r0
    24fa:	2b00      	cmp	r3, #0
    24fc:	d128      	bne.n	2550 <__sinit+0x5c>
    24fe:	6483      	str	r3, [r0, #72]	; 0x48
    2500:	64c3      	str	r3, [r0, #76]	; 0x4c
    2502:	6503      	str	r3, [r0, #80]	; 0x50
    2504:	4b13      	ldr	r3, [pc, #76]	; (2554 <__sinit+0x60>)
    2506:	4a14      	ldr	r2, [pc, #80]	; (2558 <__sinit+0x64>)
    2508:	681b      	ldr	r3, [r3, #0]
    250a:	6282      	str	r2, [r0, #40]	; 0x28
    250c:	9301      	str	r3, [sp, #4]
    250e:	4298      	cmp	r0, r3
    2510:	d101      	bne.n	2516 <__sinit+0x22>
    2512:	2301      	movs	r3, #1
    2514:	6183      	str	r3, [r0, #24]
    2516:	0020      	movs	r0, r4
    2518:	f000 f820 	bl	255c <__sfp>
    251c:	6060      	str	r0, [r4, #4]
    251e:	0020      	movs	r0, r4
    2520:	f000 f81c 	bl	255c <__sfp>
    2524:	60a0      	str	r0, [r4, #8]
    2526:	0020      	movs	r0, r4
    2528:	f000 f818 	bl	255c <__sfp>
    252c:	2200      	movs	r2, #0
    252e:	60e0      	str	r0, [r4, #12]
    2530:	2104      	movs	r1, #4
    2532:	6860      	ldr	r0, [r4, #4]
    2534:	f7ff ffa4 	bl	2480 <std.isra.0>
    2538:	2201      	movs	r2, #1
    253a:	2109      	movs	r1, #9
    253c:	68a0      	ldr	r0, [r4, #8]
    253e:	f7ff ff9f 	bl	2480 <std.isra.0>
    2542:	2202      	movs	r2, #2
    2544:	2112      	movs	r1, #18
    2546:	68e0      	ldr	r0, [r4, #12]
    2548:	f7ff ff9a 	bl	2480 <std.isra.0>
    254c:	2301      	movs	r3, #1
    254e:	61a3      	str	r3, [r4, #24]
    2550:	bd13      	pop	{r0, r1, r4, pc}
    2552:	46c0      	nop			; (mov r8, r8)
    2554:	000033a4 	.word	0x000033a4
    2558:	00002471 	.word	0x00002471

0000255c <__sfp>:
    255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    255e:	4b1e      	ldr	r3, [pc, #120]	; (25d8 <__sfp+0x7c>)
    2560:	0007      	movs	r7, r0
    2562:	681e      	ldr	r6, [r3, #0]
    2564:	69b3      	ldr	r3, [r6, #24]
    2566:	2b00      	cmp	r3, #0
    2568:	d102      	bne.n	2570 <__sfp+0x14>
    256a:	0030      	movs	r0, r6
    256c:	f7ff ffc2 	bl	24f4 <__sinit>
    2570:	3648      	adds	r6, #72	; 0x48
    2572:	68b4      	ldr	r4, [r6, #8]
    2574:	6873      	ldr	r3, [r6, #4]
    2576:	3b01      	subs	r3, #1
    2578:	d504      	bpl.n	2584 <__sfp+0x28>
    257a:	6833      	ldr	r3, [r6, #0]
    257c:	2b00      	cmp	r3, #0
    257e:	d007      	beq.n	2590 <__sfp+0x34>
    2580:	6836      	ldr	r6, [r6, #0]
    2582:	e7f6      	b.n	2572 <__sfp+0x16>
    2584:	220c      	movs	r2, #12
    2586:	5ea5      	ldrsh	r5, [r4, r2]
    2588:	2d00      	cmp	r5, #0
    258a:	d00d      	beq.n	25a8 <__sfp+0x4c>
    258c:	3468      	adds	r4, #104	; 0x68
    258e:	e7f2      	b.n	2576 <__sfp+0x1a>
    2590:	2104      	movs	r1, #4
    2592:	0038      	movs	r0, r7
    2594:	f7ff ff98 	bl	24c8 <__sfmoreglue>
    2598:	6030      	str	r0, [r6, #0]
    259a:	2800      	cmp	r0, #0
    259c:	d1f0      	bne.n	2580 <__sfp+0x24>
    259e:	230c      	movs	r3, #12
    25a0:	0004      	movs	r4, r0
    25a2:	603b      	str	r3, [r7, #0]
    25a4:	0020      	movs	r0, r4
    25a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25a8:	2301      	movs	r3, #1
    25aa:	0020      	movs	r0, r4
    25ac:	425b      	negs	r3, r3
    25ae:	81e3      	strh	r3, [r4, #14]
    25b0:	3302      	adds	r3, #2
    25b2:	81a3      	strh	r3, [r4, #12]
    25b4:	6665      	str	r5, [r4, #100]	; 0x64
    25b6:	6025      	str	r5, [r4, #0]
    25b8:	60a5      	str	r5, [r4, #8]
    25ba:	6065      	str	r5, [r4, #4]
    25bc:	6125      	str	r5, [r4, #16]
    25be:	6165      	str	r5, [r4, #20]
    25c0:	61a5      	str	r5, [r4, #24]
    25c2:	2208      	movs	r2, #8
    25c4:	0029      	movs	r1, r5
    25c6:	305c      	adds	r0, #92	; 0x5c
    25c8:	f7ff fd43 	bl	2052 <memset>
    25cc:	6365      	str	r5, [r4, #52]	; 0x34
    25ce:	63a5      	str	r5, [r4, #56]	; 0x38
    25d0:	64a5      	str	r5, [r4, #72]	; 0x48
    25d2:	64e5      	str	r5, [r4, #76]	; 0x4c
    25d4:	e7e6      	b.n	25a4 <__sfp+0x48>
    25d6:	46c0      	nop			; (mov r8, r8)
    25d8:	000033a4 	.word	0x000033a4

000025dc <_fwalk_reent>:
    25dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    25de:	0004      	movs	r4, r0
    25e0:	0007      	movs	r7, r0
    25e2:	2600      	movs	r6, #0
    25e4:	9101      	str	r1, [sp, #4]
    25e6:	3448      	adds	r4, #72	; 0x48
    25e8:	2c00      	cmp	r4, #0
    25ea:	d101      	bne.n	25f0 <_fwalk_reent+0x14>
    25ec:	0030      	movs	r0, r6
    25ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    25f0:	6863      	ldr	r3, [r4, #4]
    25f2:	68a5      	ldr	r5, [r4, #8]
    25f4:	9300      	str	r3, [sp, #0]
    25f6:	9b00      	ldr	r3, [sp, #0]
    25f8:	3b01      	subs	r3, #1
    25fa:	9300      	str	r3, [sp, #0]
    25fc:	d501      	bpl.n	2602 <_fwalk_reent+0x26>
    25fe:	6824      	ldr	r4, [r4, #0]
    2600:	e7f2      	b.n	25e8 <_fwalk_reent+0xc>
    2602:	89ab      	ldrh	r3, [r5, #12]
    2604:	2b01      	cmp	r3, #1
    2606:	d908      	bls.n	261a <_fwalk_reent+0x3e>
    2608:	220e      	movs	r2, #14
    260a:	5eab      	ldrsh	r3, [r5, r2]
    260c:	3301      	adds	r3, #1
    260e:	d004      	beq.n	261a <_fwalk_reent+0x3e>
    2610:	0029      	movs	r1, r5
    2612:	0038      	movs	r0, r7
    2614:	9b01      	ldr	r3, [sp, #4]
    2616:	4798      	blx	r3
    2618:	4306      	orrs	r6, r0
    261a:	3568      	adds	r5, #104	; 0x68
    261c:	e7eb      	b.n	25f6 <_fwalk_reent+0x1a>
	...

00002620 <__swhatbuf_r>:
    2620:	b570      	push	{r4, r5, r6, lr}
    2622:	000e      	movs	r6, r1
    2624:	001d      	movs	r5, r3
    2626:	230e      	movs	r3, #14
    2628:	5ec9      	ldrsh	r1, [r1, r3]
    262a:	b090      	sub	sp, #64	; 0x40
    262c:	0014      	movs	r4, r2
    262e:	2900      	cmp	r1, #0
    2630:	da07      	bge.n	2642 <__swhatbuf_r+0x22>
    2632:	2300      	movs	r3, #0
    2634:	602b      	str	r3, [r5, #0]
    2636:	89b3      	ldrh	r3, [r6, #12]
    2638:	061b      	lsls	r3, r3, #24
    263a:	d411      	bmi.n	2660 <__swhatbuf_r+0x40>
    263c:	2380      	movs	r3, #128	; 0x80
    263e:	00db      	lsls	r3, r3, #3
    2640:	e00f      	b.n	2662 <__swhatbuf_r+0x42>
    2642:	aa01      	add	r2, sp, #4
    2644:	f000 fc50 	bl	2ee8 <_fstat_r>
    2648:	2800      	cmp	r0, #0
    264a:	dbf2      	blt.n	2632 <__swhatbuf_r+0x12>
    264c:	22f0      	movs	r2, #240	; 0xf0
    264e:	9b02      	ldr	r3, [sp, #8]
    2650:	0212      	lsls	r2, r2, #8
    2652:	4013      	ands	r3, r2
    2654:	4a05      	ldr	r2, [pc, #20]	; (266c <__swhatbuf_r+0x4c>)
    2656:	189b      	adds	r3, r3, r2
    2658:	425a      	negs	r2, r3
    265a:	4153      	adcs	r3, r2
    265c:	602b      	str	r3, [r5, #0]
    265e:	e7ed      	b.n	263c <__swhatbuf_r+0x1c>
    2660:	2340      	movs	r3, #64	; 0x40
    2662:	2000      	movs	r0, #0
    2664:	6023      	str	r3, [r4, #0]
    2666:	b010      	add	sp, #64	; 0x40
    2668:	bd70      	pop	{r4, r5, r6, pc}
    266a:	46c0      	nop			; (mov r8, r8)
    266c:	ffffe000 	.word	0xffffe000

00002670 <__smakebuf_r>:
    2670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2672:	2602      	movs	r6, #2
    2674:	898b      	ldrh	r3, [r1, #12]
    2676:	0005      	movs	r5, r0
    2678:	000c      	movs	r4, r1
    267a:	4233      	tst	r3, r6
    267c:	d006      	beq.n	268c <__smakebuf_r+0x1c>
    267e:	0023      	movs	r3, r4
    2680:	3347      	adds	r3, #71	; 0x47
    2682:	6023      	str	r3, [r4, #0]
    2684:	6123      	str	r3, [r4, #16]
    2686:	2301      	movs	r3, #1
    2688:	6163      	str	r3, [r4, #20]
    268a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    268c:	ab01      	add	r3, sp, #4
    268e:	466a      	mov	r2, sp
    2690:	f7ff ffc6 	bl	2620 <__swhatbuf_r>
    2694:	9900      	ldr	r1, [sp, #0]
    2696:	0007      	movs	r7, r0
    2698:	0028      	movs	r0, r5
    269a:	f000 f877 	bl	278c <_malloc_r>
    269e:	2800      	cmp	r0, #0
    26a0:	d108      	bne.n	26b4 <__smakebuf_r+0x44>
    26a2:	220c      	movs	r2, #12
    26a4:	5ea3      	ldrsh	r3, [r4, r2]
    26a6:	059a      	lsls	r2, r3, #22
    26a8:	d4ef      	bmi.n	268a <__smakebuf_r+0x1a>
    26aa:	2203      	movs	r2, #3
    26ac:	4393      	bics	r3, r2
    26ae:	431e      	orrs	r6, r3
    26b0:	81a6      	strh	r6, [r4, #12]
    26b2:	e7e4      	b.n	267e <__smakebuf_r+0xe>
    26b4:	4b0f      	ldr	r3, [pc, #60]	; (26f4 <__smakebuf_r+0x84>)
    26b6:	62ab      	str	r3, [r5, #40]	; 0x28
    26b8:	2380      	movs	r3, #128	; 0x80
    26ba:	89a2      	ldrh	r2, [r4, #12]
    26bc:	6020      	str	r0, [r4, #0]
    26be:	4313      	orrs	r3, r2
    26c0:	81a3      	strh	r3, [r4, #12]
    26c2:	9b00      	ldr	r3, [sp, #0]
    26c4:	6120      	str	r0, [r4, #16]
    26c6:	6163      	str	r3, [r4, #20]
    26c8:	9b01      	ldr	r3, [sp, #4]
    26ca:	2b00      	cmp	r3, #0
    26cc:	d00d      	beq.n	26ea <__smakebuf_r+0x7a>
    26ce:	230e      	movs	r3, #14
    26d0:	5ee1      	ldrsh	r1, [r4, r3]
    26d2:	0028      	movs	r0, r5
    26d4:	f000 fc1a 	bl	2f0c <_isatty_r>
    26d8:	2800      	cmp	r0, #0
    26da:	d006      	beq.n	26ea <__smakebuf_r+0x7a>
    26dc:	2203      	movs	r2, #3
    26de:	89a3      	ldrh	r3, [r4, #12]
    26e0:	4393      	bics	r3, r2
    26e2:	001a      	movs	r2, r3
    26e4:	2301      	movs	r3, #1
    26e6:	4313      	orrs	r3, r2
    26e8:	81a3      	strh	r3, [r4, #12]
    26ea:	89a0      	ldrh	r0, [r4, #12]
    26ec:	4338      	orrs	r0, r7
    26ee:	81a0      	strh	r0, [r4, #12]
    26f0:	e7cb      	b.n	268a <__smakebuf_r+0x1a>
    26f2:	46c0      	nop			; (mov r8, r8)
    26f4:	00002471 	.word	0x00002471

000026f8 <_free_r>:
    26f8:	b570      	push	{r4, r5, r6, lr}
    26fa:	0005      	movs	r5, r0
    26fc:	2900      	cmp	r1, #0
    26fe:	d010      	beq.n	2722 <_free_r+0x2a>
    2700:	1f0c      	subs	r4, r1, #4
    2702:	6823      	ldr	r3, [r4, #0]
    2704:	2b00      	cmp	r3, #0
    2706:	da00      	bge.n	270a <_free_r+0x12>
    2708:	18e4      	adds	r4, r4, r3
    270a:	0028      	movs	r0, r5
    270c:	f000 fc2f 	bl	2f6e <__malloc_lock>
    2710:	4a1d      	ldr	r2, [pc, #116]	; (2788 <_free_r+0x90>)
    2712:	6813      	ldr	r3, [r2, #0]
    2714:	2b00      	cmp	r3, #0
    2716:	d105      	bne.n	2724 <_free_r+0x2c>
    2718:	6063      	str	r3, [r4, #4]
    271a:	6014      	str	r4, [r2, #0]
    271c:	0028      	movs	r0, r5
    271e:	f000 fc27 	bl	2f70 <__malloc_unlock>
    2722:	bd70      	pop	{r4, r5, r6, pc}
    2724:	42a3      	cmp	r3, r4
    2726:	d909      	bls.n	273c <_free_r+0x44>
    2728:	6821      	ldr	r1, [r4, #0]
    272a:	1860      	adds	r0, r4, r1
    272c:	4283      	cmp	r3, r0
    272e:	d1f3      	bne.n	2718 <_free_r+0x20>
    2730:	6818      	ldr	r0, [r3, #0]
    2732:	685b      	ldr	r3, [r3, #4]
    2734:	1841      	adds	r1, r0, r1
    2736:	6021      	str	r1, [r4, #0]
    2738:	e7ee      	b.n	2718 <_free_r+0x20>
    273a:	0013      	movs	r3, r2
    273c:	685a      	ldr	r2, [r3, #4]
    273e:	2a00      	cmp	r2, #0
    2740:	d001      	beq.n	2746 <_free_r+0x4e>
    2742:	42a2      	cmp	r2, r4
    2744:	d9f9      	bls.n	273a <_free_r+0x42>
    2746:	6819      	ldr	r1, [r3, #0]
    2748:	1858      	adds	r0, r3, r1
    274a:	42a0      	cmp	r0, r4
    274c:	d10b      	bne.n	2766 <_free_r+0x6e>
    274e:	6820      	ldr	r0, [r4, #0]
    2750:	1809      	adds	r1, r1, r0
    2752:	1858      	adds	r0, r3, r1
    2754:	6019      	str	r1, [r3, #0]
    2756:	4282      	cmp	r2, r0
    2758:	d1e0      	bne.n	271c <_free_r+0x24>
    275a:	6810      	ldr	r0, [r2, #0]
    275c:	6852      	ldr	r2, [r2, #4]
    275e:	1841      	adds	r1, r0, r1
    2760:	6019      	str	r1, [r3, #0]
    2762:	605a      	str	r2, [r3, #4]
    2764:	e7da      	b.n	271c <_free_r+0x24>
    2766:	42a0      	cmp	r0, r4
    2768:	d902      	bls.n	2770 <_free_r+0x78>
    276a:	230c      	movs	r3, #12
    276c:	602b      	str	r3, [r5, #0]
    276e:	e7d5      	b.n	271c <_free_r+0x24>
    2770:	6821      	ldr	r1, [r4, #0]
    2772:	1860      	adds	r0, r4, r1
    2774:	4282      	cmp	r2, r0
    2776:	d103      	bne.n	2780 <_free_r+0x88>
    2778:	6810      	ldr	r0, [r2, #0]
    277a:	6852      	ldr	r2, [r2, #4]
    277c:	1841      	adds	r1, r0, r1
    277e:	6021      	str	r1, [r4, #0]
    2780:	6062      	str	r2, [r4, #4]
    2782:	605c      	str	r4, [r3, #4]
    2784:	e7ca      	b.n	271c <_free_r+0x24>
    2786:	46c0      	nop			; (mov r8, r8)
    2788:	2000024c 	.word	0x2000024c

0000278c <_malloc_r>:
    278c:	2303      	movs	r3, #3
    278e:	b570      	push	{r4, r5, r6, lr}
    2790:	1ccd      	adds	r5, r1, #3
    2792:	439d      	bics	r5, r3
    2794:	3508      	adds	r5, #8
    2796:	0006      	movs	r6, r0
    2798:	2d0c      	cmp	r5, #12
    279a:	d21e      	bcs.n	27da <_malloc_r+0x4e>
    279c:	250c      	movs	r5, #12
    279e:	42a9      	cmp	r1, r5
    27a0:	d81d      	bhi.n	27de <_malloc_r+0x52>
    27a2:	0030      	movs	r0, r6
    27a4:	f000 fbe3 	bl	2f6e <__malloc_lock>
    27a8:	4a25      	ldr	r2, [pc, #148]	; (2840 <_malloc_r+0xb4>)
    27aa:	6814      	ldr	r4, [r2, #0]
    27ac:	0021      	movs	r1, r4
    27ae:	2900      	cmp	r1, #0
    27b0:	d119      	bne.n	27e6 <_malloc_r+0x5a>
    27b2:	4c24      	ldr	r4, [pc, #144]	; (2844 <_malloc_r+0xb8>)
    27b4:	6823      	ldr	r3, [r4, #0]
    27b6:	2b00      	cmp	r3, #0
    27b8:	d103      	bne.n	27c2 <_malloc_r+0x36>
    27ba:	0030      	movs	r0, r6
    27bc:	f000 fb10 	bl	2de0 <_sbrk_r>
    27c0:	6020      	str	r0, [r4, #0]
    27c2:	0029      	movs	r1, r5
    27c4:	0030      	movs	r0, r6
    27c6:	f000 fb0b 	bl	2de0 <_sbrk_r>
    27ca:	1c43      	adds	r3, r0, #1
    27cc:	d12c      	bne.n	2828 <_malloc_r+0x9c>
    27ce:	230c      	movs	r3, #12
    27d0:	0030      	movs	r0, r6
    27d2:	6033      	str	r3, [r6, #0]
    27d4:	f000 fbcc 	bl	2f70 <__malloc_unlock>
    27d8:	e003      	b.n	27e2 <_malloc_r+0x56>
    27da:	2d00      	cmp	r5, #0
    27dc:	dadf      	bge.n	279e <_malloc_r+0x12>
    27de:	230c      	movs	r3, #12
    27e0:	6033      	str	r3, [r6, #0]
    27e2:	2000      	movs	r0, #0
    27e4:	bd70      	pop	{r4, r5, r6, pc}
    27e6:	680b      	ldr	r3, [r1, #0]
    27e8:	1b5b      	subs	r3, r3, r5
    27ea:	d41a      	bmi.n	2822 <_malloc_r+0x96>
    27ec:	2b0b      	cmp	r3, #11
    27ee:	d903      	bls.n	27f8 <_malloc_r+0x6c>
    27f0:	600b      	str	r3, [r1, #0]
    27f2:	18cc      	adds	r4, r1, r3
    27f4:	6025      	str	r5, [r4, #0]
    27f6:	e003      	b.n	2800 <_malloc_r+0x74>
    27f8:	428c      	cmp	r4, r1
    27fa:	d10e      	bne.n	281a <_malloc_r+0x8e>
    27fc:	6863      	ldr	r3, [r4, #4]
    27fe:	6013      	str	r3, [r2, #0]
    2800:	0030      	movs	r0, r6
    2802:	f000 fbb5 	bl	2f70 <__malloc_unlock>
    2806:	0020      	movs	r0, r4
    2808:	2207      	movs	r2, #7
    280a:	300b      	adds	r0, #11
    280c:	1d23      	adds	r3, r4, #4
    280e:	4390      	bics	r0, r2
    2810:	1ac3      	subs	r3, r0, r3
    2812:	d0e7      	beq.n	27e4 <_malloc_r+0x58>
    2814:	425a      	negs	r2, r3
    2816:	50e2      	str	r2, [r4, r3]
    2818:	e7e4      	b.n	27e4 <_malloc_r+0x58>
    281a:	684b      	ldr	r3, [r1, #4]
    281c:	6063      	str	r3, [r4, #4]
    281e:	000c      	movs	r4, r1
    2820:	e7ee      	b.n	2800 <_malloc_r+0x74>
    2822:	000c      	movs	r4, r1
    2824:	6849      	ldr	r1, [r1, #4]
    2826:	e7c2      	b.n	27ae <_malloc_r+0x22>
    2828:	2303      	movs	r3, #3
    282a:	1cc4      	adds	r4, r0, #3
    282c:	439c      	bics	r4, r3
    282e:	42a0      	cmp	r0, r4
    2830:	d0e0      	beq.n	27f4 <_malloc_r+0x68>
    2832:	1a21      	subs	r1, r4, r0
    2834:	0030      	movs	r0, r6
    2836:	f000 fad3 	bl	2de0 <_sbrk_r>
    283a:	1c43      	adds	r3, r0, #1
    283c:	d1da      	bne.n	27f4 <_malloc_r+0x68>
    283e:	e7c6      	b.n	27ce <_malloc_r+0x42>
    2840:	2000024c 	.word	0x2000024c
    2844:	20000250 	.word	0x20000250

00002848 <__sfputc_r>:
    2848:	6893      	ldr	r3, [r2, #8]
    284a:	b510      	push	{r4, lr}
    284c:	3b01      	subs	r3, #1
    284e:	6093      	str	r3, [r2, #8]
    2850:	2b00      	cmp	r3, #0
    2852:	da05      	bge.n	2860 <__sfputc_r+0x18>
    2854:	6994      	ldr	r4, [r2, #24]
    2856:	42a3      	cmp	r3, r4
    2858:	db08      	blt.n	286c <__sfputc_r+0x24>
    285a:	b2cb      	uxtb	r3, r1
    285c:	2b0a      	cmp	r3, #10
    285e:	d005      	beq.n	286c <__sfputc_r+0x24>
    2860:	6813      	ldr	r3, [r2, #0]
    2862:	1c58      	adds	r0, r3, #1
    2864:	6010      	str	r0, [r2, #0]
    2866:	7019      	strb	r1, [r3, #0]
    2868:	b2c8      	uxtb	r0, r1
    286a:	bd10      	pop	{r4, pc}
    286c:	f7ff fc7e 	bl	216c <__swbuf_r>
    2870:	e7fb      	b.n	286a <__sfputc_r+0x22>

00002872 <__sfputs_r>:
    2872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2874:	0006      	movs	r6, r0
    2876:	000f      	movs	r7, r1
    2878:	0014      	movs	r4, r2
    287a:	18d5      	adds	r5, r2, r3
    287c:	42ac      	cmp	r4, r5
    287e:	d101      	bne.n	2884 <__sfputs_r+0x12>
    2880:	2000      	movs	r0, #0
    2882:	e007      	b.n	2894 <__sfputs_r+0x22>
    2884:	7821      	ldrb	r1, [r4, #0]
    2886:	003a      	movs	r2, r7
    2888:	0030      	movs	r0, r6
    288a:	f7ff ffdd 	bl	2848 <__sfputc_r>
    288e:	3401      	adds	r4, #1
    2890:	1c43      	adds	r3, r0, #1
    2892:	d1f3      	bne.n	287c <__sfputs_r+0xa>
    2894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00002898 <_vfiprintf_r>:
    2898:	b5f0      	push	{r4, r5, r6, r7, lr}
    289a:	b09f      	sub	sp, #124	; 0x7c
    289c:	0006      	movs	r6, r0
    289e:	000f      	movs	r7, r1
    28a0:	0014      	movs	r4, r2
    28a2:	9305      	str	r3, [sp, #20]
    28a4:	2800      	cmp	r0, #0
    28a6:	d004      	beq.n	28b2 <_vfiprintf_r+0x1a>
    28a8:	6983      	ldr	r3, [r0, #24]
    28aa:	2b00      	cmp	r3, #0
    28ac:	d101      	bne.n	28b2 <_vfiprintf_r+0x1a>
    28ae:	f7ff fe21 	bl	24f4 <__sinit>
    28b2:	4b7f      	ldr	r3, [pc, #508]	; (2ab0 <_vfiprintf_r+0x218>)
    28b4:	429f      	cmp	r7, r3
    28b6:	d15c      	bne.n	2972 <_vfiprintf_r+0xda>
    28b8:	6877      	ldr	r7, [r6, #4]
    28ba:	89bb      	ldrh	r3, [r7, #12]
    28bc:	071b      	lsls	r3, r3, #28
    28be:	d562      	bpl.n	2986 <_vfiprintf_r+0xee>
    28c0:	693b      	ldr	r3, [r7, #16]
    28c2:	2b00      	cmp	r3, #0
    28c4:	d05f      	beq.n	2986 <_vfiprintf_r+0xee>
    28c6:	2300      	movs	r3, #0
    28c8:	ad06      	add	r5, sp, #24
    28ca:	616b      	str	r3, [r5, #20]
    28cc:	3320      	adds	r3, #32
    28ce:	766b      	strb	r3, [r5, #25]
    28d0:	3310      	adds	r3, #16
    28d2:	76ab      	strb	r3, [r5, #26]
    28d4:	9402      	str	r4, [sp, #8]
    28d6:	9c02      	ldr	r4, [sp, #8]
    28d8:	7823      	ldrb	r3, [r4, #0]
    28da:	2b00      	cmp	r3, #0
    28dc:	d15d      	bne.n	299a <_vfiprintf_r+0x102>
    28de:	9b02      	ldr	r3, [sp, #8]
    28e0:	1ae3      	subs	r3, r4, r3
    28e2:	9304      	str	r3, [sp, #16]
    28e4:	d00d      	beq.n	2902 <_vfiprintf_r+0x6a>
    28e6:	9b04      	ldr	r3, [sp, #16]
    28e8:	9a02      	ldr	r2, [sp, #8]
    28ea:	0039      	movs	r1, r7
    28ec:	0030      	movs	r0, r6
    28ee:	f7ff ffc0 	bl	2872 <__sfputs_r>
    28f2:	1c43      	adds	r3, r0, #1
    28f4:	d100      	bne.n	28f8 <_vfiprintf_r+0x60>
    28f6:	e0cc      	b.n	2a92 <_vfiprintf_r+0x1fa>
    28f8:	696a      	ldr	r2, [r5, #20]
    28fa:	9b04      	ldr	r3, [sp, #16]
    28fc:	4694      	mov	ip, r2
    28fe:	4463      	add	r3, ip
    2900:	616b      	str	r3, [r5, #20]
    2902:	7823      	ldrb	r3, [r4, #0]
    2904:	2b00      	cmp	r3, #0
    2906:	d100      	bne.n	290a <_vfiprintf_r+0x72>
    2908:	e0c3      	b.n	2a92 <_vfiprintf_r+0x1fa>
    290a:	2201      	movs	r2, #1
    290c:	2300      	movs	r3, #0
    290e:	4252      	negs	r2, r2
    2910:	606a      	str	r2, [r5, #4]
    2912:	a902      	add	r1, sp, #8
    2914:	3254      	adds	r2, #84	; 0x54
    2916:	1852      	adds	r2, r2, r1
    2918:	3401      	adds	r4, #1
    291a:	602b      	str	r3, [r5, #0]
    291c:	60eb      	str	r3, [r5, #12]
    291e:	60ab      	str	r3, [r5, #8]
    2920:	7013      	strb	r3, [r2, #0]
    2922:	65ab      	str	r3, [r5, #88]	; 0x58
    2924:	7821      	ldrb	r1, [r4, #0]
    2926:	2205      	movs	r2, #5
    2928:	4862      	ldr	r0, [pc, #392]	; (2ab4 <_vfiprintf_r+0x21c>)
    292a:	f000 fb15 	bl	2f58 <memchr>
    292e:	1c63      	adds	r3, r4, #1
    2930:	469c      	mov	ip, r3
    2932:	2800      	cmp	r0, #0
    2934:	d135      	bne.n	29a2 <_vfiprintf_r+0x10a>
    2936:	6829      	ldr	r1, [r5, #0]
    2938:	06cb      	lsls	r3, r1, #27
    293a:	d504      	bpl.n	2946 <_vfiprintf_r+0xae>
    293c:	2353      	movs	r3, #83	; 0x53
    293e:	aa02      	add	r2, sp, #8
    2940:	3020      	adds	r0, #32
    2942:	189b      	adds	r3, r3, r2
    2944:	7018      	strb	r0, [r3, #0]
    2946:	070b      	lsls	r3, r1, #28
    2948:	d504      	bpl.n	2954 <_vfiprintf_r+0xbc>
    294a:	2353      	movs	r3, #83	; 0x53
    294c:	202b      	movs	r0, #43	; 0x2b
    294e:	aa02      	add	r2, sp, #8
    2950:	189b      	adds	r3, r3, r2
    2952:	7018      	strb	r0, [r3, #0]
    2954:	7823      	ldrb	r3, [r4, #0]
    2956:	2b2a      	cmp	r3, #42	; 0x2a
    2958:	d02c      	beq.n	29b4 <_vfiprintf_r+0x11c>
    295a:	2000      	movs	r0, #0
    295c:	210a      	movs	r1, #10
    295e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2960:	7822      	ldrb	r2, [r4, #0]
    2962:	3a30      	subs	r2, #48	; 0x30
    2964:	2a09      	cmp	r2, #9
    2966:	d800      	bhi.n	296a <_vfiprintf_r+0xd2>
    2968:	e06b      	b.n	2a42 <_vfiprintf_r+0x1aa>
    296a:	2800      	cmp	r0, #0
    296c:	d02a      	beq.n	29c4 <_vfiprintf_r+0x12c>
    296e:	9309      	str	r3, [sp, #36]	; 0x24
    2970:	e028      	b.n	29c4 <_vfiprintf_r+0x12c>
    2972:	4b51      	ldr	r3, [pc, #324]	; (2ab8 <_vfiprintf_r+0x220>)
    2974:	429f      	cmp	r7, r3
    2976:	d101      	bne.n	297c <_vfiprintf_r+0xe4>
    2978:	68b7      	ldr	r7, [r6, #8]
    297a:	e79e      	b.n	28ba <_vfiprintf_r+0x22>
    297c:	4b4f      	ldr	r3, [pc, #316]	; (2abc <_vfiprintf_r+0x224>)
    297e:	429f      	cmp	r7, r3
    2980:	d19b      	bne.n	28ba <_vfiprintf_r+0x22>
    2982:	68f7      	ldr	r7, [r6, #12]
    2984:	e799      	b.n	28ba <_vfiprintf_r+0x22>
    2986:	0039      	movs	r1, r7
    2988:	0030      	movs	r0, r6
    298a:	f7ff fc45 	bl	2218 <__swsetup_r>
    298e:	2800      	cmp	r0, #0
    2990:	d099      	beq.n	28c6 <_vfiprintf_r+0x2e>
    2992:	2001      	movs	r0, #1
    2994:	4240      	negs	r0, r0
    2996:	b01f      	add	sp, #124	; 0x7c
    2998:	bdf0      	pop	{r4, r5, r6, r7, pc}
    299a:	2b25      	cmp	r3, #37	; 0x25
    299c:	d09f      	beq.n	28de <_vfiprintf_r+0x46>
    299e:	3401      	adds	r4, #1
    29a0:	e79a      	b.n	28d8 <_vfiprintf_r+0x40>
    29a2:	4b44      	ldr	r3, [pc, #272]	; (2ab4 <_vfiprintf_r+0x21c>)
    29a4:	6829      	ldr	r1, [r5, #0]
    29a6:	1ac0      	subs	r0, r0, r3
    29a8:	2301      	movs	r3, #1
    29aa:	4083      	lsls	r3, r0
    29ac:	430b      	orrs	r3, r1
    29ae:	602b      	str	r3, [r5, #0]
    29b0:	4664      	mov	r4, ip
    29b2:	e7b7      	b.n	2924 <_vfiprintf_r+0x8c>
    29b4:	9b05      	ldr	r3, [sp, #20]
    29b6:	1d18      	adds	r0, r3, #4
    29b8:	681b      	ldr	r3, [r3, #0]
    29ba:	9005      	str	r0, [sp, #20]
    29bc:	2b00      	cmp	r3, #0
    29be:	db3a      	blt.n	2a36 <_vfiprintf_r+0x19e>
    29c0:	9309      	str	r3, [sp, #36]	; 0x24
    29c2:	4664      	mov	r4, ip
    29c4:	7823      	ldrb	r3, [r4, #0]
    29c6:	2b2e      	cmp	r3, #46	; 0x2e
    29c8:	d10b      	bne.n	29e2 <_vfiprintf_r+0x14a>
    29ca:	7863      	ldrb	r3, [r4, #1]
    29cc:	1c62      	adds	r2, r4, #1
    29ce:	2b2a      	cmp	r3, #42	; 0x2a
    29d0:	d13f      	bne.n	2a52 <_vfiprintf_r+0x1ba>
    29d2:	9b05      	ldr	r3, [sp, #20]
    29d4:	3402      	adds	r4, #2
    29d6:	1d1a      	adds	r2, r3, #4
    29d8:	681b      	ldr	r3, [r3, #0]
    29da:	9205      	str	r2, [sp, #20]
    29dc:	2b00      	cmp	r3, #0
    29de:	db35      	blt.n	2a4c <_vfiprintf_r+0x1b4>
    29e0:	9307      	str	r3, [sp, #28]
    29e2:	7821      	ldrb	r1, [r4, #0]
    29e4:	2203      	movs	r2, #3
    29e6:	4836      	ldr	r0, [pc, #216]	; (2ac0 <_vfiprintf_r+0x228>)
    29e8:	f000 fab6 	bl	2f58 <memchr>
    29ec:	2800      	cmp	r0, #0
    29ee:	d007      	beq.n	2a00 <_vfiprintf_r+0x168>
    29f0:	4b33      	ldr	r3, [pc, #204]	; (2ac0 <_vfiprintf_r+0x228>)
    29f2:	682a      	ldr	r2, [r5, #0]
    29f4:	1ac0      	subs	r0, r0, r3
    29f6:	2340      	movs	r3, #64	; 0x40
    29f8:	4083      	lsls	r3, r0
    29fa:	4313      	orrs	r3, r2
    29fc:	602b      	str	r3, [r5, #0]
    29fe:	3401      	adds	r4, #1
    2a00:	7821      	ldrb	r1, [r4, #0]
    2a02:	1c63      	adds	r3, r4, #1
    2a04:	2206      	movs	r2, #6
    2a06:	482f      	ldr	r0, [pc, #188]	; (2ac4 <_vfiprintf_r+0x22c>)
    2a08:	9302      	str	r3, [sp, #8]
    2a0a:	7629      	strb	r1, [r5, #24]
    2a0c:	f000 faa4 	bl	2f58 <memchr>
    2a10:	2800      	cmp	r0, #0
    2a12:	d044      	beq.n	2a9e <_vfiprintf_r+0x206>
    2a14:	4b2c      	ldr	r3, [pc, #176]	; (2ac8 <_vfiprintf_r+0x230>)
    2a16:	2b00      	cmp	r3, #0
    2a18:	d12f      	bne.n	2a7a <_vfiprintf_r+0x1e2>
    2a1a:	6829      	ldr	r1, [r5, #0]
    2a1c:	9b05      	ldr	r3, [sp, #20]
    2a1e:	2207      	movs	r2, #7
    2a20:	05c9      	lsls	r1, r1, #23
    2a22:	d528      	bpl.n	2a76 <_vfiprintf_r+0x1de>
    2a24:	189b      	adds	r3, r3, r2
    2a26:	4393      	bics	r3, r2
    2a28:	3308      	adds	r3, #8
    2a2a:	9305      	str	r3, [sp, #20]
    2a2c:	696b      	ldr	r3, [r5, #20]
    2a2e:	9a03      	ldr	r2, [sp, #12]
    2a30:	189b      	adds	r3, r3, r2
    2a32:	616b      	str	r3, [r5, #20]
    2a34:	e74f      	b.n	28d6 <_vfiprintf_r+0x3e>
    2a36:	425b      	negs	r3, r3
    2a38:	60eb      	str	r3, [r5, #12]
    2a3a:	2302      	movs	r3, #2
    2a3c:	430b      	orrs	r3, r1
    2a3e:	602b      	str	r3, [r5, #0]
    2a40:	e7bf      	b.n	29c2 <_vfiprintf_r+0x12a>
    2a42:	434b      	muls	r3, r1
    2a44:	3401      	adds	r4, #1
    2a46:	189b      	adds	r3, r3, r2
    2a48:	2001      	movs	r0, #1
    2a4a:	e789      	b.n	2960 <_vfiprintf_r+0xc8>
    2a4c:	2301      	movs	r3, #1
    2a4e:	425b      	negs	r3, r3
    2a50:	e7c6      	b.n	29e0 <_vfiprintf_r+0x148>
    2a52:	2300      	movs	r3, #0
    2a54:	0014      	movs	r4, r2
    2a56:	200a      	movs	r0, #10
    2a58:	001a      	movs	r2, r3
    2a5a:	606b      	str	r3, [r5, #4]
    2a5c:	7821      	ldrb	r1, [r4, #0]
    2a5e:	3930      	subs	r1, #48	; 0x30
    2a60:	2909      	cmp	r1, #9
    2a62:	d903      	bls.n	2a6c <_vfiprintf_r+0x1d4>
    2a64:	2b00      	cmp	r3, #0
    2a66:	d0bc      	beq.n	29e2 <_vfiprintf_r+0x14a>
    2a68:	9207      	str	r2, [sp, #28]
    2a6a:	e7ba      	b.n	29e2 <_vfiprintf_r+0x14a>
    2a6c:	4342      	muls	r2, r0
    2a6e:	3401      	adds	r4, #1
    2a70:	1852      	adds	r2, r2, r1
    2a72:	2301      	movs	r3, #1
    2a74:	e7f2      	b.n	2a5c <_vfiprintf_r+0x1c4>
    2a76:	3307      	adds	r3, #7
    2a78:	e7d5      	b.n	2a26 <_vfiprintf_r+0x18e>
    2a7a:	ab05      	add	r3, sp, #20
    2a7c:	9300      	str	r3, [sp, #0]
    2a7e:	003a      	movs	r2, r7
    2a80:	4b12      	ldr	r3, [pc, #72]	; (2acc <_vfiprintf_r+0x234>)
    2a82:	0029      	movs	r1, r5
    2a84:	0030      	movs	r0, r6
    2a86:	e000      	b.n	2a8a <_vfiprintf_r+0x1f2>
    2a88:	bf00      	nop
    2a8a:	9003      	str	r0, [sp, #12]
    2a8c:	9b03      	ldr	r3, [sp, #12]
    2a8e:	3301      	adds	r3, #1
    2a90:	d1cc      	bne.n	2a2c <_vfiprintf_r+0x194>
    2a92:	89bb      	ldrh	r3, [r7, #12]
    2a94:	065b      	lsls	r3, r3, #25
    2a96:	d500      	bpl.n	2a9a <_vfiprintf_r+0x202>
    2a98:	e77b      	b.n	2992 <_vfiprintf_r+0xfa>
    2a9a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2a9c:	e77b      	b.n	2996 <_vfiprintf_r+0xfe>
    2a9e:	ab05      	add	r3, sp, #20
    2aa0:	9300      	str	r3, [sp, #0]
    2aa2:	003a      	movs	r2, r7
    2aa4:	4b09      	ldr	r3, [pc, #36]	; (2acc <_vfiprintf_r+0x234>)
    2aa6:	0029      	movs	r1, r5
    2aa8:	0030      	movs	r0, r6
    2aaa:	f000 f87f 	bl	2bac <_printf_i>
    2aae:	e7ec      	b.n	2a8a <_vfiprintf_r+0x1f2>
    2ab0:	000033c8 	.word	0x000033c8
    2ab4:	00003408 	.word	0x00003408
    2ab8:	000033e8 	.word	0x000033e8
    2abc:	000033a8 	.word	0x000033a8
    2ac0:	0000340e 	.word	0x0000340e
    2ac4:	00003412 	.word	0x00003412
    2ac8:	00000000 	.word	0x00000000
    2acc:	00002873 	.word	0x00002873

00002ad0 <_printf_common>:
    2ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2ad2:	0015      	movs	r5, r2
    2ad4:	9301      	str	r3, [sp, #4]
    2ad6:	688a      	ldr	r2, [r1, #8]
    2ad8:	690b      	ldr	r3, [r1, #16]
    2ada:	9000      	str	r0, [sp, #0]
    2adc:	000c      	movs	r4, r1
    2ade:	4293      	cmp	r3, r2
    2ae0:	da00      	bge.n	2ae4 <_printf_common+0x14>
    2ae2:	0013      	movs	r3, r2
    2ae4:	0022      	movs	r2, r4
    2ae6:	602b      	str	r3, [r5, #0]
    2ae8:	3243      	adds	r2, #67	; 0x43
    2aea:	7812      	ldrb	r2, [r2, #0]
    2aec:	2a00      	cmp	r2, #0
    2aee:	d001      	beq.n	2af4 <_printf_common+0x24>
    2af0:	3301      	adds	r3, #1
    2af2:	602b      	str	r3, [r5, #0]
    2af4:	6823      	ldr	r3, [r4, #0]
    2af6:	069b      	lsls	r3, r3, #26
    2af8:	d502      	bpl.n	2b00 <_printf_common+0x30>
    2afa:	682b      	ldr	r3, [r5, #0]
    2afc:	3302      	adds	r3, #2
    2afe:	602b      	str	r3, [r5, #0]
    2b00:	2706      	movs	r7, #6
    2b02:	6823      	ldr	r3, [r4, #0]
    2b04:	401f      	ands	r7, r3
    2b06:	d027      	beq.n	2b58 <_printf_common+0x88>
    2b08:	0023      	movs	r3, r4
    2b0a:	3343      	adds	r3, #67	; 0x43
    2b0c:	781b      	ldrb	r3, [r3, #0]
    2b0e:	1e5a      	subs	r2, r3, #1
    2b10:	4193      	sbcs	r3, r2
    2b12:	6822      	ldr	r2, [r4, #0]
    2b14:	0692      	lsls	r2, r2, #26
    2b16:	d430      	bmi.n	2b7a <_printf_common+0xaa>
    2b18:	0022      	movs	r2, r4
    2b1a:	9901      	ldr	r1, [sp, #4]
    2b1c:	3243      	adds	r2, #67	; 0x43
    2b1e:	9800      	ldr	r0, [sp, #0]
    2b20:	9e08      	ldr	r6, [sp, #32]
    2b22:	47b0      	blx	r6
    2b24:	1c43      	adds	r3, r0, #1
    2b26:	d025      	beq.n	2b74 <_printf_common+0xa4>
    2b28:	2306      	movs	r3, #6
    2b2a:	6820      	ldr	r0, [r4, #0]
    2b2c:	682a      	ldr	r2, [r5, #0]
    2b2e:	68e1      	ldr	r1, [r4, #12]
    2b30:	4003      	ands	r3, r0
    2b32:	2500      	movs	r5, #0
    2b34:	2b04      	cmp	r3, #4
    2b36:	d103      	bne.n	2b40 <_printf_common+0x70>
    2b38:	1a8d      	subs	r5, r1, r2
    2b3a:	43eb      	mvns	r3, r5
    2b3c:	17db      	asrs	r3, r3, #31
    2b3e:	401d      	ands	r5, r3
    2b40:	68a3      	ldr	r3, [r4, #8]
    2b42:	6922      	ldr	r2, [r4, #16]
    2b44:	4293      	cmp	r3, r2
    2b46:	dd01      	ble.n	2b4c <_printf_common+0x7c>
    2b48:	1a9b      	subs	r3, r3, r2
    2b4a:	18ed      	adds	r5, r5, r3
    2b4c:	2700      	movs	r7, #0
    2b4e:	42bd      	cmp	r5, r7
    2b50:	d120      	bne.n	2b94 <_printf_common+0xc4>
    2b52:	2000      	movs	r0, #0
    2b54:	e010      	b.n	2b78 <_printf_common+0xa8>
    2b56:	3701      	adds	r7, #1
    2b58:	68e3      	ldr	r3, [r4, #12]
    2b5a:	682a      	ldr	r2, [r5, #0]
    2b5c:	1a9b      	subs	r3, r3, r2
    2b5e:	429f      	cmp	r7, r3
    2b60:	dad2      	bge.n	2b08 <_printf_common+0x38>
    2b62:	0022      	movs	r2, r4
    2b64:	2301      	movs	r3, #1
    2b66:	3219      	adds	r2, #25
    2b68:	9901      	ldr	r1, [sp, #4]
    2b6a:	9800      	ldr	r0, [sp, #0]
    2b6c:	9e08      	ldr	r6, [sp, #32]
    2b6e:	47b0      	blx	r6
    2b70:	1c43      	adds	r3, r0, #1
    2b72:	d1f0      	bne.n	2b56 <_printf_common+0x86>
    2b74:	2001      	movs	r0, #1
    2b76:	4240      	negs	r0, r0
    2b78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2b7a:	2030      	movs	r0, #48	; 0x30
    2b7c:	18e1      	adds	r1, r4, r3
    2b7e:	3143      	adds	r1, #67	; 0x43
    2b80:	7008      	strb	r0, [r1, #0]
    2b82:	0021      	movs	r1, r4
    2b84:	1c5a      	adds	r2, r3, #1
    2b86:	3145      	adds	r1, #69	; 0x45
    2b88:	7809      	ldrb	r1, [r1, #0]
    2b8a:	18a2      	adds	r2, r4, r2
    2b8c:	3243      	adds	r2, #67	; 0x43
    2b8e:	3302      	adds	r3, #2
    2b90:	7011      	strb	r1, [r2, #0]
    2b92:	e7c1      	b.n	2b18 <_printf_common+0x48>
    2b94:	0022      	movs	r2, r4
    2b96:	2301      	movs	r3, #1
    2b98:	321a      	adds	r2, #26
    2b9a:	9901      	ldr	r1, [sp, #4]
    2b9c:	9800      	ldr	r0, [sp, #0]
    2b9e:	9e08      	ldr	r6, [sp, #32]
    2ba0:	47b0      	blx	r6
    2ba2:	1c43      	adds	r3, r0, #1
    2ba4:	d0e6      	beq.n	2b74 <_printf_common+0xa4>
    2ba6:	3701      	adds	r7, #1
    2ba8:	e7d1      	b.n	2b4e <_printf_common+0x7e>
	...

00002bac <_printf_i>:
    2bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bae:	b08b      	sub	sp, #44	; 0x2c
    2bb0:	9206      	str	r2, [sp, #24]
    2bb2:	000a      	movs	r2, r1
    2bb4:	3243      	adds	r2, #67	; 0x43
    2bb6:	9307      	str	r3, [sp, #28]
    2bb8:	9005      	str	r0, [sp, #20]
    2bba:	9204      	str	r2, [sp, #16]
    2bbc:	7e0a      	ldrb	r2, [r1, #24]
    2bbe:	000c      	movs	r4, r1
    2bc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2bc2:	2a6e      	cmp	r2, #110	; 0x6e
    2bc4:	d100      	bne.n	2bc8 <_printf_i+0x1c>
    2bc6:	e08f      	b.n	2ce8 <_printf_i+0x13c>
    2bc8:	d817      	bhi.n	2bfa <_printf_i+0x4e>
    2bca:	2a63      	cmp	r2, #99	; 0x63
    2bcc:	d02c      	beq.n	2c28 <_printf_i+0x7c>
    2bce:	d808      	bhi.n	2be2 <_printf_i+0x36>
    2bd0:	2a00      	cmp	r2, #0
    2bd2:	d100      	bne.n	2bd6 <_printf_i+0x2a>
    2bd4:	e099      	b.n	2d0a <_printf_i+0x15e>
    2bd6:	2a58      	cmp	r2, #88	; 0x58
    2bd8:	d054      	beq.n	2c84 <_printf_i+0xd8>
    2bda:	0026      	movs	r6, r4
    2bdc:	3642      	adds	r6, #66	; 0x42
    2bde:	7032      	strb	r2, [r6, #0]
    2be0:	e029      	b.n	2c36 <_printf_i+0x8a>
    2be2:	2a64      	cmp	r2, #100	; 0x64
    2be4:	d001      	beq.n	2bea <_printf_i+0x3e>
    2be6:	2a69      	cmp	r2, #105	; 0x69
    2be8:	d1f7      	bne.n	2bda <_printf_i+0x2e>
    2bea:	6821      	ldr	r1, [r4, #0]
    2bec:	681a      	ldr	r2, [r3, #0]
    2bee:	0608      	lsls	r0, r1, #24
    2bf0:	d523      	bpl.n	2c3a <_printf_i+0x8e>
    2bf2:	1d11      	adds	r1, r2, #4
    2bf4:	6019      	str	r1, [r3, #0]
    2bf6:	6815      	ldr	r5, [r2, #0]
    2bf8:	e025      	b.n	2c46 <_printf_i+0x9a>
    2bfa:	2a73      	cmp	r2, #115	; 0x73
    2bfc:	d100      	bne.n	2c00 <_printf_i+0x54>
    2bfe:	e088      	b.n	2d12 <_printf_i+0x166>
    2c00:	d808      	bhi.n	2c14 <_printf_i+0x68>
    2c02:	2a6f      	cmp	r2, #111	; 0x6f
    2c04:	d029      	beq.n	2c5a <_printf_i+0xae>
    2c06:	2a70      	cmp	r2, #112	; 0x70
    2c08:	d1e7      	bne.n	2bda <_printf_i+0x2e>
    2c0a:	2220      	movs	r2, #32
    2c0c:	6809      	ldr	r1, [r1, #0]
    2c0e:	430a      	orrs	r2, r1
    2c10:	6022      	str	r2, [r4, #0]
    2c12:	e003      	b.n	2c1c <_printf_i+0x70>
    2c14:	2a75      	cmp	r2, #117	; 0x75
    2c16:	d020      	beq.n	2c5a <_printf_i+0xae>
    2c18:	2a78      	cmp	r2, #120	; 0x78
    2c1a:	d1de      	bne.n	2bda <_printf_i+0x2e>
    2c1c:	0022      	movs	r2, r4
    2c1e:	2178      	movs	r1, #120	; 0x78
    2c20:	3245      	adds	r2, #69	; 0x45
    2c22:	7011      	strb	r1, [r2, #0]
    2c24:	4a6c      	ldr	r2, [pc, #432]	; (2dd8 <_printf_i+0x22c>)
    2c26:	e030      	b.n	2c8a <_printf_i+0xde>
    2c28:	000e      	movs	r6, r1
    2c2a:	681a      	ldr	r2, [r3, #0]
    2c2c:	3642      	adds	r6, #66	; 0x42
    2c2e:	1d11      	adds	r1, r2, #4
    2c30:	6019      	str	r1, [r3, #0]
    2c32:	6813      	ldr	r3, [r2, #0]
    2c34:	7033      	strb	r3, [r6, #0]
    2c36:	2301      	movs	r3, #1
    2c38:	e079      	b.n	2d2e <_printf_i+0x182>
    2c3a:	0649      	lsls	r1, r1, #25
    2c3c:	d5d9      	bpl.n	2bf2 <_printf_i+0x46>
    2c3e:	1d11      	adds	r1, r2, #4
    2c40:	6019      	str	r1, [r3, #0]
    2c42:	2300      	movs	r3, #0
    2c44:	5ed5      	ldrsh	r5, [r2, r3]
    2c46:	2d00      	cmp	r5, #0
    2c48:	da03      	bge.n	2c52 <_printf_i+0xa6>
    2c4a:	232d      	movs	r3, #45	; 0x2d
    2c4c:	9a04      	ldr	r2, [sp, #16]
    2c4e:	426d      	negs	r5, r5
    2c50:	7013      	strb	r3, [r2, #0]
    2c52:	4b62      	ldr	r3, [pc, #392]	; (2ddc <_printf_i+0x230>)
    2c54:	270a      	movs	r7, #10
    2c56:	9303      	str	r3, [sp, #12]
    2c58:	e02f      	b.n	2cba <_printf_i+0x10e>
    2c5a:	6820      	ldr	r0, [r4, #0]
    2c5c:	6819      	ldr	r1, [r3, #0]
    2c5e:	0605      	lsls	r5, r0, #24
    2c60:	d503      	bpl.n	2c6a <_printf_i+0xbe>
    2c62:	1d08      	adds	r0, r1, #4
    2c64:	6018      	str	r0, [r3, #0]
    2c66:	680d      	ldr	r5, [r1, #0]
    2c68:	e005      	b.n	2c76 <_printf_i+0xca>
    2c6a:	0640      	lsls	r0, r0, #25
    2c6c:	d5f9      	bpl.n	2c62 <_printf_i+0xb6>
    2c6e:	680d      	ldr	r5, [r1, #0]
    2c70:	1d08      	adds	r0, r1, #4
    2c72:	6018      	str	r0, [r3, #0]
    2c74:	b2ad      	uxth	r5, r5
    2c76:	4b59      	ldr	r3, [pc, #356]	; (2ddc <_printf_i+0x230>)
    2c78:	2708      	movs	r7, #8
    2c7a:	9303      	str	r3, [sp, #12]
    2c7c:	2a6f      	cmp	r2, #111	; 0x6f
    2c7e:	d018      	beq.n	2cb2 <_printf_i+0x106>
    2c80:	270a      	movs	r7, #10
    2c82:	e016      	b.n	2cb2 <_printf_i+0x106>
    2c84:	3145      	adds	r1, #69	; 0x45
    2c86:	700a      	strb	r2, [r1, #0]
    2c88:	4a54      	ldr	r2, [pc, #336]	; (2ddc <_printf_i+0x230>)
    2c8a:	9203      	str	r2, [sp, #12]
    2c8c:	681a      	ldr	r2, [r3, #0]
    2c8e:	6821      	ldr	r1, [r4, #0]
    2c90:	1d10      	adds	r0, r2, #4
    2c92:	6018      	str	r0, [r3, #0]
    2c94:	6815      	ldr	r5, [r2, #0]
    2c96:	0608      	lsls	r0, r1, #24
    2c98:	d522      	bpl.n	2ce0 <_printf_i+0x134>
    2c9a:	07cb      	lsls	r3, r1, #31
    2c9c:	d502      	bpl.n	2ca4 <_printf_i+0xf8>
    2c9e:	2320      	movs	r3, #32
    2ca0:	4319      	orrs	r1, r3
    2ca2:	6021      	str	r1, [r4, #0]
    2ca4:	2710      	movs	r7, #16
    2ca6:	2d00      	cmp	r5, #0
    2ca8:	d103      	bne.n	2cb2 <_printf_i+0x106>
    2caa:	2320      	movs	r3, #32
    2cac:	6822      	ldr	r2, [r4, #0]
    2cae:	439a      	bics	r2, r3
    2cb0:	6022      	str	r2, [r4, #0]
    2cb2:	0023      	movs	r3, r4
    2cb4:	2200      	movs	r2, #0
    2cb6:	3343      	adds	r3, #67	; 0x43
    2cb8:	701a      	strb	r2, [r3, #0]
    2cba:	6863      	ldr	r3, [r4, #4]
    2cbc:	60a3      	str	r3, [r4, #8]
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	db5c      	blt.n	2d7c <_printf_i+0x1d0>
    2cc2:	2204      	movs	r2, #4
    2cc4:	6821      	ldr	r1, [r4, #0]
    2cc6:	4391      	bics	r1, r2
    2cc8:	6021      	str	r1, [r4, #0]
    2cca:	2d00      	cmp	r5, #0
    2ccc:	d158      	bne.n	2d80 <_printf_i+0x1d4>
    2cce:	9e04      	ldr	r6, [sp, #16]
    2cd0:	2b00      	cmp	r3, #0
    2cd2:	d064      	beq.n	2d9e <_printf_i+0x1f2>
    2cd4:	0026      	movs	r6, r4
    2cd6:	9b03      	ldr	r3, [sp, #12]
    2cd8:	3642      	adds	r6, #66	; 0x42
    2cda:	781b      	ldrb	r3, [r3, #0]
    2cdc:	7033      	strb	r3, [r6, #0]
    2cde:	e05e      	b.n	2d9e <_printf_i+0x1f2>
    2ce0:	0648      	lsls	r0, r1, #25
    2ce2:	d5da      	bpl.n	2c9a <_printf_i+0xee>
    2ce4:	b2ad      	uxth	r5, r5
    2ce6:	e7d8      	b.n	2c9a <_printf_i+0xee>
    2ce8:	6809      	ldr	r1, [r1, #0]
    2cea:	681a      	ldr	r2, [r3, #0]
    2cec:	0608      	lsls	r0, r1, #24
    2cee:	d505      	bpl.n	2cfc <_printf_i+0x150>
    2cf0:	1d11      	adds	r1, r2, #4
    2cf2:	6019      	str	r1, [r3, #0]
    2cf4:	6813      	ldr	r3, [r2, #0]
    2cf6:	6962      	ldr	r2, [r4, #20]
    2cf8:	601a      	str	r2, [r3, #0]
    2cfa:	e006      	b.n	2d0a <_printf_i+0x15e>
    2cfc:	0649      	lsls	r1, r1, #25
    2cfe:	d5f7      	bpl.n	2cf0 <_printf_i+0x144>
    2d00:	1d11      	adds	r1, r2, #4
    2d02:	6019      	str	r1, [r3, #0]
    2d04:	6813      	ldr	r3, [r2, #0]
    2d06:	8aa2      	ldrh	r2, [r4, #20]
    2d08:	801a      	strh	r2, [r3, #0]
    2d0a:	2300      	movs	r3, #0
    2d0c:	9e04      	ldr	r6, [sp, #16]
    2d0e:	6123      	str	r3, [r4, #16]
    2d10:	e054      	b.n	2dbc <_printf_i+0x210>
    2d12:	681a      	ldr	r2, [r3, #0]
    2d14:	1d11      	adds	r1, r2, #4
    2d16:	6019      	str	r1, [r3, #0]
    2d18:	6816      	ldr	r6, [r2, #0]
    2d1a:	2100      	movs	r1, #0
    2d1c:	6862      	ldr	r2, [r4, #4]
    2d1e:	0030      	movs	r0, r6
    2d20:	f000 f91a 	bl	2f58 <memchr>
    2d24:	2800      	cmp	r0, #0
    2d26:	d001      	beq.n	2d2c <_printf_i+0x180>
    2d28:	1b80      	subs	r0, r0, r6
    2d2a:	6060      	str	r0, [r4, #4]
    2d2c:	6863      	ldr	r3, [r4, #4]
    2d2e:	6123      	str	r3, [r4, #16]
    2d30:	2300      	movs	r3, #0
    2d32:	9a04      	ldr	r2, [sp, #16]
    2d34:	7013      	strb	r3, [r2, #0]
    2d36:	e041      	b.n	2dbc <_printf_i+0x210>
    2d38:	6923      	ldr	r3, [r4, #16]
    2d3a:	0032      	movs	r2, r6
    2d3c:	9906      	ldr	r1, [sp, #24]
    2d3e:	9805      	ldr	r0, [sp, #20]
    2d40:	9d07      	ldr	r5, [sp, #28]
    2d42:	47a8      	blx	r5
    2d44:	1c43      	adds	r3, r0, #1
    2d46:	d043      	beq.n	2dd0 <_printf_i+0x224>
    2d48:	6823      	ldr	r3, [r4, #0]
    2d4a:	2500      	movs	r5, #0
    2d4c:	079b      	lsls	r3, r3, #30
    2d4e:	d40f      	bmi.n	2d70 <_printf_i+0x1c4>
    2d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2d52:	68e0      	ldr	r0, [r4, #12]
    2d54:	4298      	cmp	r0, r3
    2d56:	da3d      	bge.n	2dd4 <_printf_i+0x228>
    2d58:	0018      	movs	r0, r3
    2d5a:	e03b      	b.n	2dd4 <_printf_i+0x228>
    2d5c:	0022      	movs	r2, r4
    2d5e:	2301      	movs	r3, #1
    2d60:	3219      	adds	r2, #25
    2d62:	9906      	ldr	r1, [sp, #24]
    2d64:	9805      	ldr	r0, [sp, #20]
    2d66:	9e07      	ldr	r6, [sp, #28]
    2d68:	47b0      	blx	r6
    2d6a:	1c43      	adds	r3, r0, #1
    2d6c:	d030      	beq.n	2dd0 <_printf_i+0x224>
    2d6e:	3501      	adds	r5, #1
    2d70:	68e3      	ldr	r3, [r4, #12]
    2d72:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2d74:	1a9b      	subs	r3, r3, r2
    2d76:	429d      	cmp	r5, r3
    2d78:	dbf0      	blt.n	2d5c <_printf_i+0x1b0>
    2d7a:	e7e9      	b.n	2d50 <_printf_i+0x1a4>
    2d7c:	2d00      	cmp	r5, #0
    2d7e:	d0a9      	beq.n	2cd4 <_printf_i+0x128>
    2d80:	9e04      	ldr	r6, [sp, #16]
    2d82:	0028      	movs	r0, r5
    2d84:	0039      	movs	r1, r7
    2d86:	f7ff f80b 	bl	1da0 <__aeabi_uidivmod>
    2d8a:	9b03      	ldr	r3, [sp, #12]
    2d8c:	3e01      	subs	r6, #1
    2d8e:	5c5b      	ldrb	r3, [r3, r1]
    2d90:	0028      	movs	r0, r5
    2d92:	7033      	strb	r3, [r6, #0]
    2d94:	0039      	movs	r1, r7
    2d96:	f7fe ff7d 	bl	1c94 <__udivsi3>
    2d9a:	1e05      	subs	r5, r0, #0
    2d9c:	d1f1      	bne.n	2d82 <_printf_i+0x1d6>
    2d9e:	2f08      	cmp	r7, #8
    2da0:	d109      	bne.n	2db6 <_printf_i+0x20a>
    2da2:	6823      	ldr	r3, [r4, #0]
    2da4:	07db      	lsls	r3, r3, #31
    2da6:	d506      	bpl.n	2db6 <_printf_i+0x20a>
    2da8:	6863      	ldr	r3, [r4, #4]
    2daa:	6922      	ldr	r2, [r4, #16]
    2dac:	4293      	cmp	r3, r2
    2dae:	dc02      	bgt.n	2db6 <_printf_i+0x20a>
    2db0:	2330      	movs	r3, #48	; 0x30
    2db2:	3e01      	subs	r6, #1
    2db4:	7033      	strb	r3, [r6, #0]
    2db6:	9b04      	ldr	r3, [sp, #16]
    2db8:	1b9b      	subs	r3, r3, r6
    2dba:	6123      	str	r3, [r4, #16]
    2dbc:	9b07      	ldr	r3, [sp, #28]
    2dbe:	aa09      	add	r2, sp, #36	; 0x24
    2dc0:	9300      	str	r3, [sp, #0]
    2dc2:	0021      	movs	r1, r4
    2dc4:	9b06      	ldr	r3, [sp, #24]
    2dc6:	9805      	ldr	r0, [sp, #20]
    2dc8:	f7ff fe82 	bl	2ad0 <_printf_common>
    2dcc:	1c43      	adds	r3, r0, #1
    2dce:	d1b3      	bne.n	2d38 <_printf_i+0x18c>
    2dd0:	2001      	movs	r0, #1
    2dd2:	4240      	negs	r0, r0
    2dd4:	b00b      	add	sp, #44	; 0x2c
    2dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dd8:	0000342a 	.word	0x0000342a
    2ddc:	00003419 	.word	0x00003419

00002de0 <_sbrk_r>:
    2de0:	2300      	movs	r3, #0
    2de2:	b570      	push	{r4, r5, r6, lr}
    2de4:	4c06      	ldr	r4, [pc, #24]	; (2e00 <_sbrk_r+0x20>)
    2de6:	0005      	movs	r5, r0
    2de8:	0008      	movs	r0, r1
    2dea:	6023      	str	r3, [r4, #0]
    2dec:	f7fd ff6c 	bl	cc8 <_sbrk>
    2df0:	1c43      	adds	r3, r0, #1
    2df2:	d103      	bne.n	2dfc <_sbrk_r+0x1c>
    2df4:	6823      	ldr	r3, [r4, #0]
    2df6:	2b00      	cmp	r3, #0
    2df8:	d000      	beq.n	2dfc <_sbrk_r+0x1c>
    2dfa:	602b      	str	r3, [r5, #0]
    2dfc:	bd70      	pop	{r4, r5, r6, pc}
    2dfe:	46c0      	nop			; (mov r8, r8)
    2e00:	200002c0 	.word	0x200002c0

00002e04 <__sread>:
    2e04:	b570      	push	{r4, r5, r6, lr}
    2e06:	000c      	movs	r4, r1
    2e08:	250e      	movs	r5, #14
    2e0a:	5f49      	ldrsh	r1, [r1, r5]
    2e0c:	f000 f8b2 	bl	2f74 <_read_r>
    2e10:	2800      	cmp	r0, #0
    2e12:	db03      	blt.n	2e1c <__sread+0x18>
    2e14:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2e16:	181b      	adds	r3, r3, r0
    2e18:	6563      	str	r3, [r4, #84]	; 0x54
    2e1a:	bd70      	pop	{r4, r5, r6, pc}
    2e1c:	89a3      	ldrh	r3, [r4, #12]
    2e1e:	4a02      	ldr	r2, [pc, #8]	; (2e28 <__sread+0x24>)
    2e20:	4013      	ands	r3, r2
    2e22:	81a3      	strh	r3, [r4, #12]
    2e24:	e7f9      	b.n	2e1a <__sread+0x16>
    2e26:	46c0      	nop			; (mov r8, r8)
    2e28:	ffffefff 	.word	0xffffefff

00002e2c <__swrite>:
    2e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e2e:	001f      	movs	r7, r3
    2e30:	898b      	ldrh	r3, [r1, #12]
    2e32:	0005      	movs	r5, r0
    2e34:	000c      	movs	r4, r1
    2e36:	0016      	movs	r6, r2
    2e38:	05db      	lsls	r3, r3, #23
    2e3a:	d505      	bpl.n	2e48 <__swrite+0x1c>
    2e3c:	230e      	movs	r3, #14
    2e3e:	5ec9      	ldrsh	r1, [r1, r3]
    2e40:	2200      	movs	r2, #0
    2e42:	2302      	movs	r3, #2
    2e44:	f000 f874 	bl	2f30 <_lseek_r>
    2e48:	89a3      	ldrh	r3, [r4, #12]
    2e4a:	4a05      	ldr	r2, [pc, #20]	; (2e60 <__swrite+0x34>)
    2e4c:	0028      	movs	r0, r5
    2e4e:	4013      	ands	r3, r2
    2e50:	81a3      	strh	r3, [r4, #12]
    2e52:	0032      	movs	r2, r6
    2e54:	230e      	movs	r3, #14
    2e56:	5ee1      	ldrsh	r1, [r4, r3]
    2e58:	003b      	movs	r3, r7
    2e5a:	f000 f81f 	bl	2e9c <_write_r>
    2e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e60:	ffffefff 	.word	0xffffefff

00002e64 <__sseek>:
    2e64:	b570      	push	{r4, r5, r6, lr}
    2e66:	000c      	movs	r4, r1
    2e68:	250e      	movs	r5, #14
    2e6a:	5f49      	ldrsh	r1, [r1, r5]
    2e6c:	f000 f860 	bl	2f30 <_lseek_r>
    2e70:	89a3      	ldrh	r3, [r4, #12]
    2e72:	1c42      	adds	r2, r0, #1
    2e74:	d103      	bne.n	2e7e <__sseek+0x1a>
    2e76:	4a05      	ldr	r2, [pc, #20]	; (2e8c <__sseek+0x28>)
    2e78:	4013      	ands	r3, r2
    2e7a:	81a3      	strh	r3, [r4, #12]
    2e7c:	bd70      	pop	{r4, r5, r6, pc}
    2e7e:	2280      	movs	r2, #128	; 0x80
    2e80:	0152      	lsls	r2, r2, #5
    2e82:	4313      	orrs	r3, r2
    2e84:	81a3      	strh	r3, [r4, #12]
    2e86:	6560      	str	r0, [r4, #84]	; 0x54
    2e88:	e7f8      	b.n	2e7c <__sseek+0x18>
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	ffffefff 	.word	0xffffefff

00002e90 <__sclose>:
    2e90:	b510      	push	{r4, lr}
    2e92:	230e      	movs	r3, #14
    2e94:	5ec9      	ldrsh	r1, [r1, r3]
    2e96:	f000 f815 	bl	2ec4 <_close_r>
    2e9a:	bd10      	pop	{r4, pc}

00002e9c <_write_r>:
    2e9c:	b570      	push	{r4, r5, r6, lr}
    2e9e:	0005      	movs	r5, r0
    2ea0:	0008      	movs	r0, r1
    2ea2:	0011      	movs	r1, r2
    2ea4:	2200      	movs	r2, #0
    2ea6:	4c06      	ldr	r4, [pc, #24]	; (2ec0 <_write_r+0x24>)
    2ea8:	6022      	str	r2, [r4, #0]
    2eaa:	001a      	movs	r2, r3
    2eac:	f7fe fdca 	bl	1a44 <_write>
    2eb0:	1c43      	adds	r3, r0, #1
    2eb2:	d103      	bne.n	2ebc <_write_r+0x20>
    2eb4:	6823      	ldr	r3, [r4, #0]
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	d000      	beq.n	2ebc <_write_r+0x20>
    2eba:	602b      	str	r3, [r5, #0]
    2ebc:	bd70      	pop	{r4, r5, r6, pc}
    2ebe:	46c0      	nop			; (mov r8, r8)
    2ec0:	200002c0 	.word	0x200002c0

00002ec4 <_close_r>:
    2ec4:	2300      	movs	r3, #0
    2ec6:	b570      	push	{r4, r5, r6, lr}
    2ec8:	4c06      	ldr	r4, [pc, #24]	; (2ee4 <_close_r+0x20>)
    2eca:	0005      	movs	r5, r0
    2ecc:	0008      	movs	r0, r1
    2ece:	6023      	str	r3, [r4, #0]
    2ed0:	f7fd ff0c 	bl	cec <_close>
    2ed4:	1c43      	adds	r3, r0, #1
    2ed6:	d103      	bne.n	2ee0 <_close_r+0x1c>
    2ed8:	6823      	ldr	r3, [r4, #0]
    2eda:	2b00      	cmp	r3, #0
    2edc:	d000      	beq.n	2ee0 <_close_r+0x1c>
    2ede:	602b      	str	r3, [r5, #0]
    2ee0:	bd70      	pop	{r4, r5, r6, pc}
    2ee2:	46c0      	nop			; (mov r8, r8)
    2ee4:	200002c0 	.word	0x200002c0

00002ee8 <_fstat_r>:
    2ee8:	2300      	movs	r3, #0
    2eea:	b570      	push	{r4, r5, r6, lr}
    2eec:	4c06      	ldr	r4, [pc, #24]	; (2f08 <_fstat_r+0x20>)
    2eee:	0005      	movs	r5, r0
    2ef0:	0008      	movs	r0, r1
    2ef2:	0011      	movs	r1, r2
    2ef4:	6023      	str	r3, [r4, #0]
    2ef6:	f7fd fefc 	bl	cf2 <_fstat>
    2efa:	1c43      	adds	r3, r0, #1
    2efc:	d103      	bne.n	2f06 <_fstat_r+0x1e>
    2efe:	6823      	ldr	r3, [r4, #0]
    2f00:	2b00      	cmp	r3, #0
    2f02:	d000      	beq.n	2f06 <_fstat_r+0x1e>
    2f04:	602b      	str	r3, [r5, #0]
    2f06:	bd70      	pop	{r4, r5, r6, pc}
    2f08:	200002c0 	.word	0x200002c0

00002f0c <_isatty_r>:
    2f0c:	2300      	movs	r3, #0
    2f0e:	b570      	push	{r4, r5, r6, lr}
    2f10:	4c06      	ldr	r4, [pc, #24]	; (2f2c <_isatty_r+0x20>)
    2f12:	0005      	movs	r5, r0
    2f14:	0008      	movs	r0, r1
    2f16:	6023      	str	r3, [r4, #0]
    2f18:	f7fd fef0 	bl	cfc <_isatty>
    2f1c:	1c43      	adds	r3, r0, #1
    2f1e:	d103      	bne.n	2f28 <_isatty_r+0x1c>
    2f20:	6823      	ldr	r3, [r4, #0]
    2f22:	2b00      	cmp	r3, #0
    2f24:	d000      	beq.n	2f28 <_isatty_r+0x1c>
    2f26:	602b      	str	r3, [r5, #0]
    2f28:	bd70      	pop	{r4, r5, r6, pc}
    2f2a:	46c0      	nop			; (mov r8, r8)
    2f2c:	200002c0 	.word	0x200002c0

00002f30 <_lseek_r>:
    2f30:	b570      	push	{r4, r5, r6, lr}
    2f32:	0005      	movs	r5, r0
    2f34:	0008      	movs	r0, r1
    2f36:	0011      	movs	r1, r2
    2f38:	2200      	movs	r2, #0
    2f3a:	4c06      	ldr	r4, [pc, #24]	; (2f54 <_lseek_r+0x24>)
    2f3c:	6022      	str	r2, [r4, #0]
    2f3e:	001a      	movs	r2, r3
    2f40:	f7fd fede 	bl	d00 <_lseek>
    2f44:	1c43      	adds	r3, r0, #1
    2f46:	d103      	bne.n	2f50 <_lseek_r+0x20>
    2f48:	6823      	ldr	r3, [r4, #0]
    2f4a:	2b00      	cmp	r3, #0
    2f4c:	d000      	beq.n	2f50 <_lseek_r+0x20>
    2f4e:	602b      	str	r3, [r5, #0]
    2f50:	bd70      	pop	{r4, r5, r6, pc}
    2f52:	46c0      	nop			; (mov r8, r8)
    2f54:	200002c0 	.word	0x200002c0

00002f58 <memchr>:
    2f58:	b2c9      	uxtb	r1, r1
    2f5a:	1882      	adds	r2, r0, r2
    2f5c:	4290      	cmp	r0, r2
    2f5e:	d101      	bne.n	2f64 <memchr+0xc>
    2f60:	2000      	movs	r0, #0
    2f62:	4770      	bx	lr
    2f64:	7803      	ldrb	r3, [r0, #0]
    2f66:	428b      	cmp	r3, r1
    2f68:	d0fb      	beq.n	2f62 <memchr+0xa>
    2f6a:	3001      	adds	r0, #1
    2f6c:	e7f6      	b.n	2f5c <memchr+0x4>

00002f6e <__malloc_lock>:
    2f6e:	4770      	bx	lr

00002f70 <__malloc_unlock>:
    2f70:	4770      	bx	lr
	...

00002f74 <_read_r>:
    2f74:	b570      	push	{r4, r5, r6, lr}
    2f76:	0005      	movs	r5, r0
    2f78:	0008      	movs	r0, r1
    2f7a:	0011      	movs	r1, r2
    2f7c:	2200      	movs	r2, #0
    2f7e:	4c06      	ldr	r4, [pc, #24]	; (2f98 <_read_r+0x24>)
    2f80:	6022      	str	r2, [r4, #0]
    2f82:	001a      	movs	r2, r3
    2f84:	f7fe fd7a 	bl	1a7c <_read>
    2f88:	1c43      	adds	r3, r0, #1
    2f8a:	d103      	bne.n	2f94 <_read_r+0x20>
    2f8c:	6823      	ldr	r3, [r4, #0]
    2f8e:	2b00      	cmp	r3, #0
    2f90:	d000      	beq.n	2f94 <_read_r+0x20>
    2f92:	602b      	str	r3, [r5, #0]
    2f94:	bd70      	pop	{r4, r5, r6, pc}
    2f96:	46c0      	nop			; (mov r8, r8)
    2f98:	200002c0 	.word	0x200002c0
    2f9c:	656c6449 	.word	0x656c6449
    2fa0:	00000000 	.word	0x00000000
    2fa4:	682f2e2e 	.word	0x682f2e2e
    2fa8:	732f6c61 	.word	0x732f6c61
    2fac:	682f6372 	.word	0x682f6372
    2fb0:	635f6c61 	.word	0x635f6c61
    2fb4:	6e656c61 	.word	0x6e656c61
    2fb8:	2e726164 	.word	0x2e726164
    2fbc:	00000063 	.word	0x00000063
    2fc0:	682f2e2e 	.word	0x682f2e2e
    2fc4:	732f6c61 	.word	0x732f6c61
    2fc8:	682f6372 	.word	0x682f6372
    2fcc:	755f6c61 	.word	0x755f6c61
    2fd0:	74726173 	.word	0x74726173
    2fd4:	7973615f 	.word	0x7973615f
    2fd8:	632e636e 	.word	0x632e636e
    2fdc:	00000000 	.word	0x00000000
    2fe0:	682f2e2e 	.word	0x682f2e2e
    2fe4:	752f6c61 	.word	0x752f6c61
    2fe8:	736c6974 	.word	0x736c6974
    2fec:	6372732f 	.word	0x6372732f
    2ff0:	6974752f 	.word	0x6974752f
    2ff4:	725f736c 	.word	0x725f736c
    2ff8:	62676e69 	.word	0x62676e69
    2ffc:	65666675 	.word	0x65666675
    3000:	00632e72 	.word	0x00632e72

00003004 <_map>:
    3004:	0000000f 0000000f 682f2e2e 652f6c70     ........../hpl/e
    3014:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    3024:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    3034:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
    3044:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    3054:	0000632e 65656c53 676e6970 6c644920     .c..Sleeping Idl
    3064:	00000065 0000142e 0000142a 0000143a     e.......*...:...
    3074:	0000142a 0000142a 0000142a 0000142a     *...*...*...*...
    3084:	0000142a 0000142a 0000142a 0000142a     *...*...*...*...
    3094:	0000142a 0000142a 0000142a 0000142a     *...*...*...*...
    30a4:	0000142a 0000142a 0000142a 0000142a     *...*...*...*...
    30b4:	0000142a 0000142a 0000142a 0000142a     *...*...*...*...
    30c4:	0000142a 0000142a 0000142a 0000142a     *...*...*...*...
    30d4:	0000142a 0000142a 0000142a 0000142a     *...*...*...*...
    30e4:	0000142a 00001426 0000142a 00001434     *...&...*...4...
    30f4:	0000142a 0000142a 0000142a 0000142a     *...*...*...*...
    3104:	0000142a 0000142a 0000142a 0000142a     *...*...*...*...
    3114:	0000142a 0000142a 0000142a 00001440     *...*...*...@...
    3124:	6279654b 6472616f 73615420 0000006b     Keyboard Task...
    3134:	20230a0a 3d3d3d3d 3d3d3d3d 003d3d3d     ..# ===========.
    3144:	2e302e31 00000030 756d2023 7361745f     1.0.0...# mu_tas
    3154:	65645f6b 25206f6d 73203a73 68206565     k_demo %s: see h
    3164:	73707474 672f2f3a 75687469 6f632e62     ttps://github.co
    3174:	64722f6d 726f6f70 6c756d2f 000a6269     m/rdpoor/mulib..
    3184:	74747542 50206e6f 65687375 00000064     Button Pushed...
    3194:	2044454c 6b736154 00000000 00001aca     LED Task........
    31a4:	00001ae4 00001af4 00001b02 00001b10     ................
    31b4:	00001b7a 00001b88 00001ba6 00001bb4     z...............
    31c4:	3b315b1b 5b1b4831 00004a32 00007325     .[1;1H.[2J..%s..
    31d4:	745f756d 5f6b7361 6f6d6564 3a732520     mu_task_demo %s:
    31e4:	74746820 2f3a7370 7469672f 2e627568      https://github.
    31f4:	2f6d6f63 6f706472 6d2f726f 62696c75     com/rdpoor/mulib
    3204:	0a0d0a0d 00000000 20202020 20202020     ........        
    3214:	614e2020 5320656d 20746174 43202320       Name Stat  # C
    3224:	736c6c61 20202020 6e755220 656d6974     alls     Runtime
    3234:	20202020 78614d20 72754420 0000000d          Max Dur....
    3244:	2d2d2d2b 2d2d2d2d 2d2d2d2d 2d2b2d2d     +-------------+-
    3254:	2d2d2d2b 2d2d2d2d 2d2d2d2d 2d2d2d2b     +-----------+---
    3264:	2d2d2d2d 2d2d2d2d 2d2d2d2b 2d2d2d2d     --------+-------
    3274:	2d2d2d2d 00000d2b 73343125 20632520     ----+...%14s %c 
    3284:	75313125 31312520 2520756c 756c3131     %11u %11lu %11lu
    3294:	00000a0d 74530a0d 73757461 3d41203a     ......Status: A=
    32a4:	69746341 202c6576 75523d52 62616e6e     Active, R=Runnab
    32b4:	202c656c 63533d53 75646568 2c64656c     le, S=Scheduled,
    32c4:	493d4920 0d656c64 00000000 68737550      I=Idle.....Push
    32d4:	65737520 75622072 6e6f7474 206f7420      user button to 
    32e4:	74697865 776f6c20 776f702d 6d207265     exit low-power m
    32f4:	2e65646f 0000000d 65707954 27702720     ode.....Type 'p'
    3304:	206f7420 65746e65 6f6c2072 6f702d77      to enter low-po
    3314:	20726577 65646f6d 00000d2e 65707954     wer mode....Type
    3324:	27622720 206f7420 74736572 20747261      'b' to restart 
    3334:	2044454c 6b736174 4227202e 6f742027     LED task. 'B' to
    3344:	73757320 646e6570 00000d2e 65707954      suspend....Type
    3354:	27642720 206f7420 74736572 20747261      'd' to restart 
    3364:	65726353 74206e65 2e6b7361 27442720     Screen task. 'D'
    3374:	206f7420 70737573 2e646e65 0000000d      to suspend.....
    3384:	65726353 52206e65 61726465 00000077     Screen Redraw...
    3394:	65726353 55206e65 74616470 00000065     Screen Update...

000033a4 <_global_impure_ptr>:
    33a4:	20000004                                ... 

000033a8 <__sf_fake_stderr>:
	...

000033c8 <__sf_fake_stdin>:
	...

000033e8 <__sf_fake_stdout>:
	...
    3408:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3418:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3428:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3438:	00006665                                ef..

0000343c <_init>:
    343c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    343e:	46c0      	nop			; (mov r8, r8)
    3440:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3442:	bc08      	pop	{r3}
    3444:	469e      	mov	lr, r3
    3446:	4770      	bx	lr

00003448 <__init_array_start>:
    3448:	000000dd 	.word	0x000000dd

0000344c <_fini>:
    344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3452:	bc08      	pop	{r3}
    3454:	469e      	mov	lr, r3
    3456:	4770      	bx	lr

00003458 <__fini_array_start>:
    3458:	000000b5 	.word	0x000000b5
