
mu_task_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039b4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  000039b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000680  20000064  00003a18  00020064  2**2
                  ALLOC
  3 .stack        00002004  200006e4  00004098  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00035b94  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000052ef  00000000  00000000  00055c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000fc8f  00000000  00000000  0005af68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001030  00000000  00000000  0006abf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000015f8  00000000  00000000  0006bc27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001ba7a  00000000  00000000  0006d21f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015151  00000000  00000000  00088c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008bef2  00000000  00000000  0009ddea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002ff4  00000000  00000000  00129cdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 26 00 20 71 09 00 00 6d 09 00 00 6d 09 00 00     .&. q...m...m...
	...
      2c:	6d 09 00 00 00 00 00 00 00 00 00 00 6d 09 00 00     m...........m...
      3c:	6d 09 00 00 6d 09 00 00 6d 09 00 00 6d 09 00 00     m...m...m...m...
      4c:	fd 14 00 00 65 12 00 00 6d 09 00 00 6d 09 00 00     ....e...m...m...
      5c:	6d 09 00 00 6d 09 00 00 6d 09 00 00 6d 09 00 00     m...m...m...m...
      6c:	6d 09 00 00 ed 16 00 00 6d 09 00 00 6d 09 00 00     m.......m...m...
      7c:	6d 09 00 00 6d 09 00 00 6d 09 00 00 6d 09 00 00     m...m...m...m...
      8c:	6d 09 00 00 6d 09 00 00 6d 09 00 00 6d 09 00 00     m...m...m...m...
      9c:	6d 09 00 00 6d 09 00 00 6d 09 00 00 6d 09 00 00     m...m...m...m...
      ac:	6d 09 00 00 00 00 00 00                             m.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	000039b4 	.word	0x000039b4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	000039b4 	.word	0x000039b4
     10c:	000039b4 	.word	0x000039b4
     110:	00000000 	.word	0x00000000

00000114 <default_idle_fn>:
}

static void *default_idle_fn(void *self, void *arg) {
  // the default idle task doesn't do much...
  return self;
}
     114:	4770      	bx	lr
	...

00000118 <sched_task_at>:
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
  }
  sched->event_queue_count -= 1;
}

static mu_sched_err_t sched_task_at(mu_sched_t *sched, mu_task_t *task, mu_time_t time) {
     118:	b5f0      	push	{r4, r5, r6, r7, lr}
     11a:	b083      	sub	sp, #12
     11c:	0004      	movs	r4, r0
     11e:	9101      	str	r1, [sp, #4]
     120:	9200      	str	r2, [sp, #0]
  mu_sched_event_t *event;
  size_t index;

  if (sched->event_queue_count >= sched->event_queue_capacity) {
     122:	6885      	ldr	r5, [r0, #8]
    return MU_SCHED_ERR_FULL;
     124:	2002      	movs	r0, #2
  if (sched->event_queue_count >= sched->event_queue_capacity) {
     126:	6863      	ldr	r3, [r4, #4]
     128:	429d      	cmp	r5, r3
     12a:	d301      	bcc.n	130 <sched_task_at+0x18>
  // fill in the event
  event = &sched->event_queue[index];
  event_init(event, task, time);
  sched->event_queue_count += 1;
  return MU_SCHED_ERR_NONE;
}
     12c:	b003      	add	sp, #12
     12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (sched->event_queue_count == 0) {
     130:	2d00      	cmp	r5, #0
     132:	d10c      	bne.n	14e <sched_task_at+0x36>
  event = &sched->event_queue[index];
     134:	00ed      	lsls	r5, r5, #3
     136:	6823      	ldr	r3, [r4, #0]
     138:	469c      	mov	ip, r3
     13a:	4465      	add	r5, ip
  event->task = task;
     13c:	9b01      	ldr	r3, [sp, #4]
     13e:	606b      	str	r3, [r5, #4]
  event->time = time;
     140:	9b00      	ldr	r3, [sp, #0]
     142:	602b      	str	r3, [r5, #0]
  sched->event_queue_count += 1;
     144:	68a3      	ldr	r3, [r4, #8]
     146:	3301      	adds	r3, #1
     148:	60a3      	str	r3, [r4, #8]
  return MU_SCHED_ERR_NONE;
     14a:	2000      	movs	r0, #0
     14c:	e7ee      	b.n	12c <sched_task_at+0x14>
#else
// linear search for insertion point
static size_t find_insertion_index(mu_sched_t *sched, mu_time_t time) {
  mu_sched_event_t *events = sched->event_queue;

  for (size_t i = sched->event_queue_count - 1; i >= 0; i--) {
     14e:	1e6f      	subs	r7, r5, #1
     150:	4b12      	ldr	r3, [pc, #72]	; (19c <sched_task_at+0x84>)
     152:	469c      	mov	ip, r3
     154:	4465      	add	r5, ip
     156:	00ed      	lsls	r5, r5, #3
     158:	6823      	ldr	r3, [r4, #0]
     15a:	469c      	mov	ip, r3
     15c:	4465      	add	r5, ip
    if (mu_time_precedes(time, events[i].time)) {
     15e:	4e10      	ldr	r6, [pc, #64]	; (1a0 <sched_task_at+0x88>)
     160:	6829      	ldr	r1, [r5, #0]
     162:	9800      	ldr	r0, [sp, #0]
     164:	47b0      	blx	r6
     166:	2800      	cmp	r0, #0
     168:	d104      	bne.n	174 <sched_task_at+0x5c>
     16a:	3d08      	subs	r5, #8
      return i+1;    // precedes incumbent
    } else if (i == 0) {
     16c:	2f00      	cmp	r7, #0
     16e:	d012      	beq.n	196 <sched_task_at+0x7e>
  for (size_t i = sched->event_queue_count - 1; i >= 0; i--) {
     170:	3f01      	subs	r7, #1
     172:	e7f5      	b.n	160 <sched_task_at+0x48>
      return i+1;    // precedes incumbent
     174:	1c7d      	adds	r5, r7, #1
  int to_move = sched->event_queue_count - index;
     176:	68a3      	ldr	r3, [r4, #8]
     178:	1b5a      	subs	r2, r3, r5
  if (to_move > 0) {
     17a:	2a00      	cmp	r2, #0
     17c:	ddda      	ble.n	134 <sched_task_at+0x1c>
    mu_sched_event_t *src = &sched->event_queue[index];
     17e:	00eb      	lsls	r3, r5, #3
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     180:	00d2      	lsls	r2, r2, #3
    mu_sched_event_t *src = &sched->event_queue[index];
     182:	6821      	ldr	r1, [r4, #0]
     184:	18c9      	adds	r1, r1, r3
    mu_sched_event_t *dst = &sched->event_queue[index + 1];
     186:	3308      	adds	r3, #8
     188:	0018      	movs	r0, r3
     18a:	6823      	ldr	r3, [r4, #0]
     18c:	469c      	mov	ip, r3
     18e:	4460      	add	r0, ip
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     190:	4b04      	ldr	r3, [pc, #16]	; (1a4 <sched_task_at+0x8c>)
     192:	4798      	blx	r3
     194:	e7ce      	b.n	134 <sched_task_at+0x1c>
      return 0;      // follows all
     196:	003d      	movs	r5, r7
     198:	e7ed      	b.n	176 <sched_task_at+0x5e>
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	1fffffff 	.word	0x1fffffff
     1a0:	00000619 	.word	0x00000619
     1a4:	0000220b 	.word	0x0000220b

000001a8 <mu_sched_reset>:
mu_sched_t *mu_sched_reset(mu_sched_t *sched) {
     1a8:	b570      	push	{r4, r5, r6, lr}
     1aa:	0004      	movs	r4, r0
  sched->event_queue_count = 0;
     1ac:	2500      	movs	r5, #0
     1ae:	6085      	str	r5, [r0, #8]
  mu_spscq_reset(sched->isr_queue);
     1b0:	68c0      	ldr	r0, [r0, #12]
     1b2:	4b02      	ldr	r3, [pc, #8]	; (1bc <mu_sched_reset+0x14>)
     1b4:	4798      	blx	r3
  sched->current_event.task = NULL;
     1b6:	61e5      	str	r5, [r4, #28]
}
     1b8:	0020      	movs	r0, r4
     1ba:	bd70      	pop	{r4, r5, r6, pc}
     1bc:	0000041f 	.word	0x0000041f

000001c0 <mu_sched_init>:
                          mu_spscq_t *isr_queue) {
     1c0:	b570      	push	{r4, r5, r6, lr}
     1c2:	0004      	movs	r4, r0
  sched->event_queue = event_queue;
     1c4:	6001      	str	r1, [r0, #0]
  sched->event_queue_capacity = event_queue_capacity;
     1c6:	6042      	str	r2, [r0, #4]
  sched->isr_queue = isr_queue;
     1c8:	60c3      	str	r3, [r0, #12]
  sched->clock_fn = mu_time_now;
     1ca:	4b06      	ldr	r3, [pc, #24]	; (1e4 <mu_sched_init+0x24>)
     1cc:	6103      	str	r3, [r0, #16]
  sched->idle_task = &s_default_idle_task;
     1ce:	4806      	ldr	r0, [pc, #24]	; (1e8 <mu_sched_init+0x28>)
     1d0:	6160      	str	r0, [r4, #20]
  mu_task_init(&s_default_idle_task, default_idle_fn, NULL, "Idle");
     1d2:	4b06      	ldr	r3, [pc, #24]	; (1ec <mu_sched_init+0x2c>)
     1d4:	2200      	movs	r2, #0
     1d6:	4906      	ldr	r1, [pc, #24]	; (1f0 <mu_sched_init+0x30>)
     1d8:	4d06      	ldr	r5, [pc, #24]	; (1f4 <mu_sched_init+0x34>)
     1da:	47a8      	blx	r5
  return mu_sched_reset(sched);
     1dc:	0020      	movs	r0, r4
     1de:	4b06      	ldr	r3, [pc, #24]	; (1f8 <mu_sched_init+0x38>)
     1e0:	4798      	blx	r3
}
     1e2:	bd70      	pop	{r4, r5, r6, pc}
     1e4:	00000645 	.word	0x00000645
     1e8:	20000080 	.word	0x20000080
     1ec:	0000351c 	.word	0x0000351c
     1f0:	00000115 	.word	0x00000115
     1f4:	000005a9 	.word	0x000005a9
     1f8:	000001a9 	.word	0x000001a9

000001fc <mu_sched_set_idle_task>:
  sched->idle_task = task;
     1fc:	6141      	str	r1, [r0, #20]
}
     1fe:	4770      	bx	lr

00000200 <mu_sched_get_current_time>:
mu_time_t mu_sched_get_current_time(mu_sched_t *sched) {
     200:	b510      	push	{r4, lr}
  return sched->clock_fn();
     202:	6903      	ldr	r3, [r0, #16]
     204:	4798      	blx	r3
}
     206:	bd10      	pop	{r4, pc}

00000208 <mu_sched_get_next_event>:
  if (sched->event_queue_count == 0) {
     208:	6883      	ldr	r3, [r0, #8]
     20a:	2b00      	cmp	r3, #0
     20c:	d006      	beq.n	21c <mu_sched_get_next_event+0x14>
    return &sched->event_queue[sched->event_queue_count - 1];
     20e:	4a04      	ldr	r2, [pc, #16]	; (220 <mu_sched_get_next_event+0x18>)
     210:	4694      	mov	ip, r2
     212:	4463      	add	r3, ip
     214:	00db      	lsls	r3, r3, #3
     216:	6800      	ldr	r0, [r0, #0]
     218:	18c0      	adds	r0, r0, r3
}
     21a:	4770      	bx	lr
    return NULL;
     21c:	2000      	movs	r0, #0
     21e:	e7fc      	b.n	21a <mu_sched_get_next_event+0x12>
     220:	1fffffff 	.word	0x1fffffff

00000224 <mu_sched_step>:
mu_sched_err_t mu_sched_step(mu_sched_t *sched) {
     224:	b5f0      	push	{r4, r5, r6, r7, lr}
     226:	b083      	sub	sp, #12
     228:	0004      	movs	r4, r0
  mu_time_t now = mu_sched_get_current_time(sched);
     22a:	4b1a      	ldr	r3, [pc, #104]	; (294 <mu_sched_step+0x70>)
     22c:	4798      	blx	r3
     22e:	0005      	movs	r5, r0
  while (mu_spscq_get(sched->isr_queue, (void **)&task) != MU_CQUEUE_ERR_EMPTY) {
     230:	4e19      	ldr	r6, [pc, #100]	; (298 <mu_sched_step+0x74>)
  return sched_task_at(sched, task, at);
     232:	4f1a      	ldr	r7, [pc, #104]	; (29c <mu_sched_step+0x78>)
  while (mu_spscq_get(sched->isr_queue, (void **)&task) != MU_CQUEUE_ERR_EMPTY) {
     234:	a901      	add	r1, sp, #4
     236:	68e0      	ldr	r0, [r4, #12]
     238:	47b0      	blx	r6
     23a:	2801      	cmp	r0, #1
     23c:	d007      	beq.n	24e <mu_sched_step+0x2a>
  return sched_task_at(sched, task, at);
     23e:	002a      	movs	r2, r5
     240:	9901      	ldr	r1, [sp, #4]
     242:	0020      	movs	r0, r4
     244:	47b8      	blx	r7
    if (err != MU_SCHED_ERR_NONE) {
     246:	2800      	cmp	r0, #0
     248:	d0f4      	beq.n	234 <mu_sched_step+0x10>
}
     24a:	b003      	add	sp, #12
     24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  event = mu_sched_get_next_event(sched);
     24e:	0020      	movs	r0, r4
     250:	4b13      	ldr	r3, [pc, #76]	; (2a0 <mu_sched_step+0x7c>)
     252:	4798      	blx	r3
     254:	1e06      	subs	r6, r0, #0
  if (event != NULL) {
     256:	d005      	beq.n	264 <mu_sched_step+0x40>
    if (!mu_time_follows(mu_sched_event_get_time(event), now)) {
     258:	0029      	movs	r1, r5
     25a:	6800      	ldr	r0, [r0, #0]
     25c:	4b11      	ldr	r3, [pc, #68]	; (2a4 <mu_sched_step+0x80>)
     25e:	4798      	blx	r3
     260:	2800      	cmp	r0, #0
     262:	d005      	beq.n	270 <mu_sched_step+0x4c>
  mu_task_call(sched->idle_task, sched);
     264:	6960      	ldr	r0, [r4, #20]
     266:	0021      	movs	r1, r4
     268:	4b0f      	ldr	r3, [pc, #60]	; (2a8 <mu_sched_step+0x84>)
     26a:	4798      	blx	r3
  return MU_SCHED_ERR_NONE;
     26c:	2000      	movs	r0, #0
     26e:	e7ec      	b.n	24a <mu_sched_step+0x26>
      memcpy(&(sched->current_event), event, sizeof(mu_sched_event_t));
     270:	0020      	movs	r0, r4
     272:	3018      	adds	r0, #24
     274:	2208      	movs	r2, #8
     276:	0031      	movs	r1, r6
     278:	4b0c      	ldr	r3, [pc, #48]	; (2ac <mu_sched_step+0x88>)
     27a:	4798      	blx	r3
  return &sched->event_queue[--sched->event_queue_count];
     27c:	68a3      	ldr	r3, [r4, #8]
     27e:	3b01      	subs	r3, #1
     280:	60a3      	str	r3, [r4, #8]
      mu_task_call(sched->current_event.task, sched);
     282:	0021      	movs	r1, r4
     284:	69e0      	ldr	r0, [r4, #28]
     286:	4b08      	ldr	r3, [pc, #32]	; (2a8 <mu_sched_step+0x84>)
     288:	4798      	blx	r3
      sched->current_event.task = NULL;
     28a:	2300      	movs	r3, #0
     28c:	61e3      	str	r3, [r4, #28]
      return MU_SCHED_ERR_NONE;
     28e:	2000      	movs	r0, #0
     290:	e7db      	b.n	24a <mu_sched_step+0x26>
     292:	46c0      	nop			; (mov r8, r8)
     294:	00000201 	.word	0x00000201
     298:	0000046d 	.word	0x0000046d
     29c:	00000119 	.word	0x00000119
     2a0:	00000209 	.word	0x00000209
     2a4:	00000625 	.word	0x00000625
     2a8:	000005bd 	.word	0x000005bd
     2ac:	000021f9 	.word	0x000021f9

000002b0 <mu_sched_remove_task>:
mu_sched_err_t mu_sched_remove_task(mu_sched_t *sched, mu_task_t *task) {
     2b0:	b570      	push	{r4, r5, r6, lr}
     2b2:	0005      	movs	r5, r0
  for (int i = sched->event_queue_count - 1; i >= 0; i--) {
     2b4:	6883      	ldr	r3, [r0, #8]
     2b6:	1e5a      	subs	r2, r3, #1
     2b8:	1e14      	subs	r4, r2, #0
     2ba:	db1f      	blt.n	2fc <mu_sched_remove_task+0x4c>
    mu_sched_event_t *event = &sched->event_queue[i];
     2bc:	6800      	ldr	r0, [r0, #0]
     2be:	00d3      	lsls	r3, r2, #3
    if (event->task == task)
     2c0:	18c6      	adds	r6, r0, r3
     2c2:	6876      	ldr	r6, [r6, #4]
     2c4:	42b1      	cmp	r1, r6
     2c6:	d007      	beq.n	2d8 <mu_sched_remove_task+0x28>
     2c8:	3b04      	subs	r3, #4
     2ca:	18c3      	adds	r3, r0, r3
  for (int i = sched->event_queue_count - 1; i >= 0; i--) {
     2cc:	3c01      	subs	r4, #1
     2ce:	d413      	bmi.n	2f8 <mu_sched_remove_task+0x48>
     2d0:	3b08      	subs	r3, #8
    if (event->task == task)
     2d2:	689e      	ldr	r6, [r3, #8]
     2d4:	42b1      	cmp	r1, r6
     2d6:	d1f9      	bne.n	2cc <mu_sched_remove_task+0x1c>
  int to_move = sched->event_queue_count - index - 1;
     2d8:	1b12      	subs	r2, r2, r4
  if (to_move > 0) {
     2da:	2a00      	cmp	r2, #0
     2dc:	dd07      	ble.n	2ee <mu_sched_remove_task+0x3e>
    mu_sched_event_t *dst = &sched->event_queue[index];
     2de:	00e4      	lsls	r4, r4, #3
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     2e0:	00d2      	lsls	r2, r2, #3
    mu_sched_event_t *src = &sched->event_queue[index + 1];
     2e2:	0021      	movs	r1, r4
     2e4:	3108      	adds	r1, #8
     2e6:	1841      	adds	r1, r0, r1
    mu_sched_event_t *dst = &sched->event_queue[index];
     2e8:	1900      	adds	r0, r0, r4
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     2ea:	4b05      	ldr	r3, [pc, #20]	; (300 <mu_sched_remove_task+0x50>)
     2ec:	4798      	blx	r3
  sched->event_queue_count -= 1;
     2ee:	68ab      	ldr	r3, [r5, #8]
     2f0:	3b01      	subs	r3, #1
     2f2:	60ab      	str	r3, [r5, #8]
    return MU_SCHED_ERR_NONE;
     2f4:	2000      	movs	r0, #0
     2f6:	e000      	b.n	2fa <mu_sched_remove_task+0x4a>
    return MU_SCHED_ERR_NOT_FOUND;
     2f8:	2003      	movs	r0, #3
}
     2fa:	bd70      	pop	{r4, r5, r6, pc}
    return MU_SCHED_ERR_NOT_FOUND;
     2fc:	2003      	movs	r0, #3
     2fe:	e7fc      	b.n	2fa <mu_sched_remove_task+0x4a>
     300:	0000220b 	.word	0x0000220b

00000304 <mu_sched_task_now>:
mu_sched_err_t mu_sched_task_now(mu_sched_t *sched, mu_task_t *task) {
     304:	b570      	push	{r4, r5, r6, lr}
     306:	0004      	movs	r4, r0
     308:	000d      	movs	r5, r1
  return sched_task_at(sched, task, mu_sched_get_current_time(sched));
     30a:	4b04      	ldr	r3, [pc, #16]	; (31c <mu_sched_task_now+0x18>)
     30c:	4798      	blx	r3
     30e:	0002      	movs	r2, r0
     310:	0029      	movs	r1, r5
     312:	0020      	movs	r0, r4
     314:	4b02      	ldr	r3, [pc, #8]	; (320 <mu_sched_task_now+0x1c>)
     316:	4798      	blx	r3
}
     318:	bd70      	pop	{r4, r5, r6, pc}
     31a:	46c0      	nop			; (mov r8, r8)
     31c:	00000201 	.word	0x00000201
     320:	00000119 	.word	0x00000119

00000324 <mu_sched_reschedule_in>:
mu_sched_err_t mu_sched_reschedule_in(mu_sched_t *sched, mu_time_dt in) {
     324:	b570      	push	{r4, r5, r6, lr}
     326:	0004      	movs	r4, r0
  if (sched->current_event.task == NULL) {
     328:	69c3      	ldr	r3, [r0, #28]
     32a:	2b00      	cmp	r3, #0
     32c:	d00d      	beq.n	34a <mu_sched_reschedule_in+0x26>
    return MU_SCHED_ERR_NOT_FOUND;
     32e:	2003      	movs	r0, #3
  if (!event) {
     330:	0023      	movs	r3, r4
     332:	3318      	adds	r3, #24
     334:	d008      	beq.n	348 <mu_sched_reschedule_in+0x24>
  mu_task_t *task = event->task;
     336:	69e5      	ldr	r5, [r4, #28]
  return sched_task_at(sched, task, mu_time_offset(time, in));
     338:	69a0      	ldr	r0, [r4, #24]
     33a:	4b05      	ldr	r3, [pc, #20]	; (350 <mu_sched_reschedule_in+0x2c>)
     33c:	4798      	blx	r3
     33e:	0002      	movs	r2, r0
     340:	0029      	movs	r1, r5
     342:	0020      	movs	r0, r4
     344:	4b03      	ldr	r3, [pc, #12]	; (354 <mu_sched_reschedule_in+0x30>)
     346:	4798      	blx	r3
}
     348:	bd70      	pop	{r4, r5, r6, pc}
    return MU_SCHED_ERR_NOT_FOUND;
     34a:	2003      	movs	r0, #3
     34c:	e7fc      	b.n	348 <mu_sched_reschedule_in+0x24>
     34e:	46c0      	nop			; (mov r8, r8)
     350:	00000601 	.word	0x00000601
     354:	00000119 	.word	0x00000119

00000358 <mu_sched_reschedule_now>:
mu_sched_err_t mu_sched_reschedule_now(mu_sched_t *sched) {
     358:	b510      	push	{r4, lr}
  if (sched->current_event.task == NULL) {
     35a:	69c3      	ldr	r3, [r0, #28]
     35c:	2b00      	cmp	r3, #0
     35e:	d009      	beq.n	374 <mu_sched_reschedule_now+0x1c>
    return MU_SCHED_ERR_NOT_FOUND;
     360:	2303      	movs	r3, #3
  if (!event) {
     362:	0002      	movs	r2, r0
     364:	3218      	adds	r2, #24
     366:	d003      	beq.n	370 <mu_sched_reschedule_now+0x18>
  return mu_sched_task_now(sched, event->task);
     368:	69c1      	ldr	r1, [r0, #28]
     36a:	4b03      	ldr	r3, [pc, #12]	; (378 <mu_sched_reschedule_now+0x20>)
     36c:	4798      	blx	r3
     36e:	0003      	movs	r3, r0
}
     370:	0018      	movs	r0, r3
     372:	bd10      	pop	{r4, pc}
    return MU_SCHED_ERR_NOT_FOUND;
     374:	2303      	movs	r3, #3
     376:	e7fb      	b.n	370 <mu_sched_reschedule_now+0x18>
     378:	00000305 	.word	0x00000305

0000037c <mu_sched_task_from_isr>:
mu_sched_err_t mu_sched_task_from_isr(mu_sched_t *sched, mu_task_t *task) {
     37c:	b510      	push	{r4, lr}
  if (mu_spscq_put(sched->isr_queue, task) == MU_CQUEUE_ERR_FULL) {
     37e:	68c0      	ldr	r0, [r0, #12]
     380:	4b03      	ldr	r3, [pc, #12]	; (390 <mu_sched_task_from_isr+0x14>)
     382:	4798      	blx	r3
    return MU_SCHED_ERR_NONE;
     384:	3802      	subs	r0, #2
     386:	4243      	negs	r3, r0
     388:	4158      	adcs	r0, r3
     38a:	0040      	lsls	r0, r0, #1
}
     38c:	bd10      	pop	{r4, pc}
     38e:	46c0      	nop			; (mov r8, r8)
     390:	0000043d 	.word	0x0000043d

00000394 <mu_sched_get_task_status>:
                                                mu_task_t *task) {
     394:	b570      	push	{r4, r5, r6, lr}
  if (sched->current_event.task == NULL) {
     396:	69c3      	ldr	r3, [r0, #28]
     398:	2b00      	cmp	r3, #0
     39a:	d005      	beq.n	3a8 <mu_sched_get_task_status+0x14>
  if (event && mu_sched_event_get_task(event) == task) {
     39c:	0003      	movs	r3, r0
     39e:	3318      	adds	r3, #24
     3a0:	d002      	beq.n	3a8 <mu_sched_get_task_status+0x14>
     3a2:	69c3      	ldr	r3, [r0, #28]
     3a4:	4299      	cmp	r1, r3
     3a6:	d023      	beq.n	3f0 <mu_sched_get_task_status+0x5c>
  for (int i = sched->event_queue_count - 1; i >= 0; i--) {
     3a8:	6883      	ldr	r3, [r0, #8]
     3aa:	3b01      	subs	r3, #1
     3ac:	1e1a      	subs	r2, r3, #0
     3ae:	db21      	blt.n	3f4 <mu_sched_get_task_status+0x60>
    mu_sched_event_t *event = &sched->event_queue[i];
     3b0:	6804      	ldr	r4, [r0, #0]
     3b2:	00db      	lsls	r3, r3, #3
    if (event->task == task)
     3b4:	18e5      	adds	r5, r4, r3
     3b6:	686d      	ldr	r5, [r5, #4]
     3b8:	42a9      	cmp	r1, r5
     3ba:	d007      	beq.n	3cc <mu_sched_get_task_status+0x38>
     3bc:	3b04      	subs	r3, #4
     3be:	18e3      	adds	r3, r4, r3
  for (int i = sched->event_queue_count - 1; i >= 0; i--) {
     3c0:	3a01      	subs	r2, #1
     3c2:	d413      	bmi.n	3ec <mu_sched_get_task_status+0x58>
     3c4:	3b08      	subs	r3, #8
    if (event->task == task)
     3c6:	689d      	ldr	r5, [r3, #8]
     3c8:	42a9      	cmp	r1, r5
     3ca:	d1f9      	bne.n	3c0 <mu_sched_get_task_status+0x2c>
    return &sched->event_queue[i];
     3cc:	00d2      	lsls	r2, r2, #3
     3ce:	18a4      	adds	r4, r4, r2
    return MU_SCHED_TASK_STATUS_IDLE;
     3d0:	2300      	movs	r3, #0
  if (event == NULL) {
     3d2:	2c00      	cmp	r4, #0
     3d4:	d008      	beq.n	3e8 <mu_sched_get_task_status+0x54>
  mu_time_t now = mu_sched_get_current_time(sched);
     3d6:	4b08      	ldr	r3, [pc, #32]	; (3f8 <mu_sched_get_task_status+0x64>)
     3d8:	4798      	blx	r3
     3da:	0001      	movs	r1, r0
  if (!mu_time_follows(mu_sched_event_get_time(event), now)) {
     3dc:	6820      	ldr	r0, [r4, #0]
     3de:	4b07      	ldr	r3, [pc, #28]	; (3fc <mu_sched_get_task_status+0x68>)
     3e0:	4798      	blx	r3
    return MU_SCHED_TASK_STATUS_SCHEDULED;
     3e2:	4243      	negs	r3, r0
     3e4:	4143      	adcs	r3, r0
     3e6:	3301      	adds	r3, #1
}
     3e8:	0018      	movs	r0, r3
     3ea:	bd70      	pop	{r4, r5, r6, pc}
    return MU_SCHED_TASK_STATUS_IDLE;
     3ec:	2300      	movs	r3, #0
     3ee:	e7fb      	b.n	3e8 <mu_sched_get_task_status+0x54>
    return MU_SCHED_TASK_STATUS_ACTIVE;
     3f0:	2303      	movs	r3, #3
     3f2:	e7f9      	b.n	3e8 <mu_sched_get_task_status+0x54>
    return MU_SCHED_TASK_STATUS_IDLE;
     3f4:	2300      	movs	r3, #0
     3f6:	e7f7      	b.n	3e8 <mu_sched_get_task_status+0x54>
     3f8:	00000201 	.word	0x00000201
     3fc:	00000625 	.word	0x00000625

00000400 <mu_spscq_init>:
// =============================================================================
// public code

mu_spscq_err_t mu_spscq_init(mu_spscq_t *q,
                               mu_spscq_item_t *store,
                               uint16_t capacity) {
     400:	b510      	push	{r4, lr}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
    return MU_CQUEUE_ERR_SIZE;
     402:	2303      	movs	r3, #3
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     404:	2a00      	cmp	r2, #0
     406:	d101      	bne.n	40c <mu_spscq_init+0xc>
  }
  q->mask = capacity - 1;
  q->store = store;
  return mu_spscq_reset(q);
}
     408:	0018      	movs	r0, r3
     40a:	bd10      	pop	{r4, pc}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     40c:	1e54      	subs	r4, r2, #1
     40e:	4222      	tst	r2, r4
     410:	d1fa      	bne.n	408 <mu_spscq_init+0x8>
  q->mask = capacity - 1;
     412:	8004      	strh	r4, [r0, #0]
  q->store = store;
     414:	6081      	str	r1, [r0, #8]

mu_spscq_err_t mu_spscq_reset(mu_spscq_t *q) {
  q->head = 0;
     416:	2300      	movs	r3, #0
     418:	8043      	strh	r3, [r0, #2]
  q->tail = 0;
     41a:	8083      	strh	r3, [r0, #4]
  return mu_spscq_reset(q);
     41c:	e7f4      	b.n	408 <mu_spscq_init+0x8>

0000041e <mu_spscq_reset>:
  q->head = 0;
     41e:	2300      	movs	r3, #0
     420:	8043      	strh	r3, [r0, #2]
  q->tail = 0;
     422:	8083      	strh	r3, [r0, #4]
  return MU_CQUEUE_ERR_NONE;
}
     424:	2000      	movs	r0, #0
     426:	4770      	bx	lr

00000428 <mu_spscq_is_full>:

bool mu_spscq_is_empty(mu_spscq_t *q) { return q->head == q->tail; }

bool mu_spscq_is_full(mu_spscq_t *q) {
  // would advancing tail by 1 make it catch up with head?
  return ((q->tail + 1) & q->mask) == q->head;
     428:	8883      	ldrh	r3, [r0, #4]
     42a:	8842      	ldrh	r2, [r0, #2]
     42c:	3301      	adds	r3, #1
     42e:	8800      	ldrh	r0, [r0, #0]
     430:	4018      	ands	r0, r3
     432:	1a80      	subs	r0, r0, r2
     434:	4243      	negs	r3, r0
     436:	4158      	adcs	r0, r3
     438:	b2c0      	uxtb	r0, r0
}
     43a:	4770      	bx	lr

0000043c <mu_spscq_put>:

mu_spscq_err_t mu_spscq_put(mu_spscq_t *q, mu_spscq_item_t item) {
     43c:	b570      	push	{r4, r5, r6, lr}
     43e:	0004      	movs	r4, r0
     440:	000d      	movs	r5, r1
  if (mu_spscq_is_full(q)) {
     442:	4b09      	ldr	r3, [pc, #36]	; (468 <mu_spscq_put+0x2c>)
     444:	4798      	blx	r3
    return MU_CQUEUE_ERR_FULL;
     446:	2302      	movs	r3, #2
  if (mu_spscq_is_full(q)) {
     448:	2800      	cmp	r0, #0
     44a:	d001      	beq.n	450 <mu_spscq_put+0x14>
  }
  q->store[q->tail] = item;
  q->tail = (q->tail + 1) & q->mask;
  return MU_CQUEUE_ERR_NONE;
}
     44c:	0018      	movs	r0, r3
     44e:	bd70      	pop	{r4, r5, r6, pc}
  q->store[q->tail] = item;
     450:	88a3      	ldrh	r3, [r4, #4]
     452:	009b      	lsls	r3, r3, #2
     454:	68a2      	ldr	r2, [r4, #8]
     456:	509d      	str	r5, [r3, r2]
  q->tail = (q->tail + 1) & q->mask;
     458:	88a2      	ldrh	r2, [r4, #4]
     45a:	3201      	adds	r2, #1
     45c:	8823      	ldrh	r3, [r4, #0]
     45e:	4013      	ands	r3, r2
     460:	80a3      	strh	r3, [r4, #4]
  return MU_CQUEUE_ERR_NONE;
     462:	2300      	movs	r3, #0
     464:	e7f2      	b.n	44c <mu_spscq_put+0x10>
     466:	46c0      	nop			; (mov r8, r8)
     468:	00000429 	.word	0x00000429

0000046c <mu_spscq_get>:
bool mu_spscq_is_empty(mu_spscq_t *q) { return q->head == q->tail; }
     46c:	8843      	ldrh	r3, [r0, #2]
     46e:	8882      	ldrh	r2, [r0, #4]
     470:	b29b      	uxth	r3, r3

mu_spscq_err_t mu_spscq_get(mu_spscq_t *q, mu_spscq_item_t *item) {
  if (mu_spscq_is_empty(q)) {
     472:	4293      	cmp	r3, r2
     474:	d00b      	beq.n	48e <mu_spscq_get+0x22>
    *item = NULL;
    return MU_CQUEUE_ERR_EMPTY;
  }
  *item = q->store[q->head];
     476:	8843      	ldrh	r3, [r0, #2]
     478:	6882      	ldr	r2, [r0, #8]
     47a:	009b      	lsls	r3, r3, #2
     47c:	589b      	ldr	r3, [r3, r2]
     47e:	600b      	str	r3, [r1, #0]
  q->head = (q->head + 1) & q->mask;
     480:	8842      	ldrh	r2, [r0, #2]
     482:	3201      	adds	r2, #1
     484:	8803      	ldrh	r3, [r0, #0]
     486:	4013      	ands	r3, r2
     488:	8043      	strh	r3, [r0, #2]
  return MU_CQUEUE_ERR_NONE;
     48a:	2000      	movs	r0, #0
}
     48c:	4770      	bx	lr
    *item = NULL;
     48e:	2300      	movs	r3, #0
     490:	600b      	str	r3, [r1, #0]
    return MU_CQUEUE_ERR_EMPTY;
     492:	2001      	movs	r0, #1
     494:	e7fa      	b.n	48c <mu_spscq_get+0x20>

00000496 <mu_str_init>:

// =============================================================================
// public code

mu_str_t *mu_str_init(mu_str_t *s, mu_str_data_t *data, size_t capacity) {
  s->data = data;
     496:	6001      	str	r1, [r0, #0]
  s->capacity = capacity;
     498:	6042      	str	r2, [r0, #4]
  return s;
}
     49a:	4770      	bx	lr

0000049c <mu_str_capacity>:
  cstr[cstr_length-1] = '\0';            // null terminate
  return s;
}

size_t mu_str_capacity(mu_str_t *s) {
  return s->capacity;
     49c:	6840      	ldr	r0, [r0, #4]
}
     49e:	4770      	bx	lr

000004a0 <mu_substr_reset>:
    memcpy(dst, src, sizeof(mu_substr_t));
  }
  return dst;
}

mu_substr_t *mu_substr_reset(mu_substr_t *s) {
     4a0:	b510      	push	{r4, lr}
     4a2:	0004      	movs	r4, r0
  s->start = 0;
     4a4:	2300      	movs	r3, #0
     4a6:	6043      	str	r3, [r0, #4]
  s->end = mu_str_capacity(s->str);
     4a8:	6800      	ldr	r0, [r0, #0]
     4aa:	4b02      	ldr	r3, [pc, #8]	; (4b4 <mu_substr_reset+0x14>)
     4ac:	4798      	blx	r3
     4ae:	60a0      	str	r0, [r4, #8]
  return s;
}
     4b0:	0020      	movs	r0, r4
     4b2:	bd10      	pop	{r4, pc}
     4b4:	0000049d 	.word	0x0000049d

000004b8 <mu_substr_init>:
mu_substr_t *mu_substr_init(mu_substr_t *s, mu_str_t *str) {
     4b8:	b510      	push	{r4, lr}
  s->str = str;
     4ba:	6001      	str	r1, [r0, #0]
  return mu_substr_reset(s);
     4bc:	4b01      	ldr	r3, [pc, #4]	; (4c4 <mu_substr_init+0xc>)
     4be:	4798      	blx	r3
}
     4c0:	bd10      	pop	{r4, pc}
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	000004a1 	.word	0x000004a1

000004c8 <mu_substr_clear>:

mu_substr_t *mu_substr_clear(mu_substr_t *s) {
  s->start = 0;
     4c8:	2300      	movs	r3, #0
     4ca:	6043      	str	r3, [r0, #4]
  s->end = 0;
     4cc:	6083      	str	r3, [r0, #8]
  return s;
}
     4ce:	4770      	bx	lr

000004d0 <mu_substr_length>:
size_t mu_substr_end(mu_substr_t *s) {
  return s->end;
}

size_t mu_substr_length(mu_substr_t *s) {
  return s->end - s->start;
     4d0:	6883      	ldr	r3, [r0, #8]
     4d2:	6840      	ldr	r0, [r0, #4]
     4d4:	1a18      	subs	r0, r3, r0
}
     4d6:	4770      	bx	lr

000004d8 <mu_substr_remaining>:

size_t mu_substr_remaining(mu_substr_t *s) {
     4d8:	b510      	push	{r4, lr}
     4da:	0004      	movs	r4, r0
  return mu_str_capacity(s->str) - s->end;
     4dc:	6800      	ldr	r0, [r0, #0]
     4de:	4b02      	ldr	r3, [pc, #8]	; (4e8 <mu_substr_remaining+0x10>)
     4e0:	4798      	blx	r3
     4e2:	68a3      	ldr	r3, [r4, #8]
     4e4:	1ac0      	subs	r0, r0, r3
}
     4e6:	bd10      	pop	{r4, pc}
     4e8:	0000049d 	.word	0x0000049d

000004ec <mu_substr_get>:
static size_t min_size(size_t a, size_t b) {
  return (a < b) ? a : b;
}

static bool index_is_valid(mu_substr_t *s, size_t index) {
  size_t abs_i = index + s->start;
     4ec:	6843      	ldr	r3, [r0, #4]
     4ee:	18c9      	adds	r1, r1, r3
  return (s->start <= abs_i) && (abs_i < s->end);
     4f0:	428b      	cmp	r3, r1
     4f2:	d802      	bhi.n	4fa <mu_substr_get+0xe>
     4f4:	6883      	ldr	r3, [r0, #8]
     4f6:	4299      	cmp	r1, r3
     4f8:	d303      	bcc.n	502 <mu_substr_get+0x16>
    *d = '\0';
     4fa:	2300      	movs	r3, #0
     4fc:	7013      	strb	r3, [r2, #0]
    return MU_SUBSTR_ERR_INDEX;
     4fe:	2001      	movs	r0, #1
}
     500:	4770      	bx	lr
}

static mu_str_data_t *ref_offset(mu_substr_t *s, size_t offset) {
  // Violate mu_str's data abstraction in the name of efficiency...
  return &s->str->data[s->start + offset];
     502:	6803      	ldr	r3, [r0, #0]
    *d = *ref_offset(s, index);
     504:	681b      	ldr	r3, [r3, #0]
     506:	5c5b      	ldrb	r3, [r3, r1]
     508:	7013      	strb	r3, [r2, #0]
    return MU_SUBSTR_ERR_NONE;
     50a:	2000      	movs	r0, #0
     50c:	e7f8      	b.n	500 <mu_substr_get+0x14>
	...

00000510 <mu_substr_printf>:
mu_substr_t *mu_substr_printf(mu_substr_t *s, const char *fmt, ...) {
     510:	b40e      	push	{r1, r2, r3}
     512:	b570      	push	{r4, r5, r6, lr}
     514:	b083      	sub	sp, #12
     516:	0004      	movs	r4, r0
  size_t available = mu_substr_remaining(s);
     518:	4b10      	ldr	r3, [pc, #64]	; (55c <mu_substr_printf+0x4c>)
     51a:	4798      	blx	r3
     51c:	1e05      	subs	r5, r0, #0
  if (available > 0) {
     51e:	d105      	bne.n	52c <mu_substr_printf+0x1c>
}
     520:	0020      	movs	r0, r4
     522:	b003      	add	sp, #12
     524:	bc70      	pop	{r4, r5, r6}
     526:	bc08      	pop	{r3}
     528:	b003      	add	sp, #12
     52a:	4718      	bx	r3
    va_start(ap, fmt);
     52c:	ab08      	add	r3, sp, #32
     52e:	9301      	str	r3, [sp, #4]
    printed = vsnprintf(&s->str->data[s->end], mu_substr_remaining(s), fmt, ap);
     530:	6823      	ldr	r3, [r4, #0]
     532:	681e      	ldr	r6, [r3, #0]
     534:	68a3      	ldr	r3, [r4, #8]
     536:	469c      	mov	ip, r3
     538:	4466      	add	r6, ip
     53a:	0020      	movs	r0, r4
     53c:	4b07      	ldr	r3, [pc, #28]	; (55c <mu_substr_printf+0x4c>)
     53e:	4798      	blx	r3
     540:	0001      	movs	r1, r0
     542:	9b01      	ldr	r3, [sp, #4]
     544:	9a07      	ldr	r2, [sp, #28]
     546:	0030      	movs	r0, r6
     548:	4e05      	ldr	r6, [pc, #20]	; (560 <mu_substr_printf+0x50>)
     54a:	47b0      	blx	r6
    s->end += printed;
     54c:	4285      	cmp	r5, r0
     54e:	d900      	bls.n	552 <mu_substr_printf+0x42>
     550:	0005      	movs	r5, r0
     552:	68a3      	ldr	r3, [r4, #8]
     554:	469c      	mov	ip, r3
     556:	4465      	add	r5, ip
     558:	60a5      	str	r5, [r4, #8]
     55a:	e7e1      	b.n	520 <mu_substr_printf+0x10>
     55c:	000004d9 	.word	0x000004d9
     560:	000023ad 	.word	0x000023ad

00000564 <mu_substr_puts>:
mu_substr_t *mu_substr_puts(mu_substr_t *s, const char *src) {
     564:	b570      	push	{r4, r5, r6, lr}
     566:	0004      	movs	r4, r0
     568:	000e      	movs	r6, r1
  size_t available = mu_substr_remaining(s);
     56a:	4b0c      	ldr	r3, [pc, #48]	; (59c <mu_substr_puts+0x38>)
     56c:	4798      	blx	r3
     56e:	1e05      	subs	r5, r0, #0
  if (available > 0) {
     570:	d012      	beq.n	598 <mu_substr_puts+0x34>
    size_t copied = strlen(src);  // does not include null terminator
     572:	0030      	movs	r0, r6
     574:	4b0a      	ldr	r3, [pc, #40]	; (5a0 <mu_substr_puts+0x3c>)
     576:	4798      	blx	r3
     578:	4285      	cmp	r5, r0
     57a:	d900      	bls.n	57e <mu_substr_puts+0x1a>
     57c:	0005      	movs	r5, r0
    memcpy(&s->str->data[s->end], src, copied);
     57e:	6823      	ldr	r3, [r4, #0]
     580:	6818      	ldr	r0, [r3, #0]
     582:	68a3      	ldr	r3, [r4, #8]
     584:	469c      	mov	ip, r3
     586:	4460      	add	r0, ip
     588:	002a      	movs	r2, r5
     58a:	0031      	movs	r1, r6
     58c:	4b05      	ldr	r3, [pc, #20]	; (5a4 <mu_substr_puts+0x40>)
     58e:	4798      	blx	r3
    s->end += copied;
     590:	68a3      	ldr	r3, [r4, #8]
     592:	469c      	mov	ip, r3
     594:	4465      	add	r5, ip
     596:	60a5      	str	r5, [r4, #8]
}
     598:	0020      	movs	r0, r4
     59a:	bd70      	pop	{r4, r5, r6, pc}
     59c:	000004d9 	.word	0x000004d9
     5a0:	00002349 	.word	0x00002349
     5a4:	000021f9 	.word	0x000021f9

000005a8 <mu_task_init>:

mu_task_t *mu_task_init(mu_task_t *task,
                        mu_task_fn fn,
                        void *ctx,
                        const char *name) {
  task->fn = fn;
     5a8:	6001      	str	r1, [r0, #0]
  task->ctx = ctx;
     5aa:	6042      	str	r2, [r0, #4]
#if (MU_TASK_PROFILING)
  task->name = name;
     5ac:	6083      	str	r3, [r0, #8]
  task->call_count = 0;
     5ae:	2300      	movs	r3, #0
     5b0:	60c3      	str	r3, [r0, #12]
  task->runtime = 0;
     5b2:	6103      	str	r3, [r0, #16]
  task->max_duration = 0;
     5b4:	6143      	str	r3, [r0, #20]
#endif
  return task;
}
     5b6:	4770      	bx	lr

000005b8 <mu_task_name>:

const char *mu_task_name(mu_task_t *task) {
#if (MU_TASK_PROFILING)
  return task->name;
     5b8:	6880      	ldr	r0, [r0, #8]
#else
  return "";
#endif
}
     5ba:	4770      	bx	lr

000005bc <mu_task_call>:

void *mu_task_call(mu_task_t *task, void *arg) {
     5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5be:	0004      	movs	r4, r0
     5c0:	000d      	movs	r5, r1

#if (MU_TASK_PROFILING)
  mu_time_t called_at = mu_time_now();
     5c2:	4f0c      	ldr	r7, [pc, #48]	; (5f4 <mu_task_call+0x38>)
     5c4:	47b8      	blx	r7
     5c6:	0006      	movs	r6, r0
#endif
  void *result = task->fn(task->ctx, arg);
     5c8:	0029      	movs	r1, r5
     5ca:	6860      	ldr	r0, [r4, #4]
     5cc:	6823      	ldr	r3, [r4, #0]
     5ce:	4798      	blx	r3
     5d0:	0005      	movs	r5, r0
#if (MU_TASK_PROFILING)
  task->call_count += 1;
     5d2:	68e3      	ldr	r3, [r4, #12]
     5d4:	3301      	adds	r3, #1
     5d6:	60e3      	str	r3, [r4, #12]
  mu_time_dt duration = mu_time_difference(mu_time_now(), called_at);
     5d8:	47b8      	blx	r7
     5da:	0031      	movs	r1, r6
     5dc:	4b06      	ldr	r3, [pc, #24]	; (5f8 <mu_task_call+0x3c>)
     5de:	4798      	blx	r3
  task->runtime += duration;
     5e0:	6923      	ldr	r3, [r4, #16]
     5e2:	181b      	adds	r3, r3, r0
     5e4:	6123      	str	r3, [r4, #16]
  if (duration > task->max_duration) task->max_duration = duration;
     5e6:	6963      	ldr	r3, [r4, #20]
     5e8:	4298      	cmp	r0, r3
     5ea:	dd00      	ble.n	5ee <mu_task_call+0x32>
     5ec:	6160      	str	r0, [r4, #20]
#endif
  return result;
}
     5ee:	0028      	movs	r0, r5
     5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5f2:	46c0      	nop			; (mov r8, r8)
     5f4:	00000645 	.word	0x00000645
     5f8:	0000060d 	.word	0x0000060d

000005fc <mu_task_call_count>:

#if (MU_TASK_PROFILING)

unsigned int mu_task_call_count(mu_task_t *task) {
  return task->call_count;
     5fc:	68c0      	ldr	r0, [r0, #12]
}
     5fe:	4770      	bx	lr

00000600 <mu_time_offset>:

void mu_time_init(void) {
  // mu_vm_init() must be called separately
}

mu_time_t mu_time_offset(mu_time_t t1, mu_time_dt dt) {
     600:	b510      	push	{r4, lr}
  return mu_vm_time_offset(t1, dt);
     602:	4b01      	ldr	r3, [pc, #4]	; (608 <mu_time_offset+0x8>)
     604:	4798      	blx	r3
}
     606:	bd10      	pop	{r4, pc}
     608:	00000759 	.word	0x00000759

0000060c <mu_time_difference>:

mu_time_dt mu_time_difference(mu_time_t t1, mu_time_t t2) {
     60c:	b510      	push	{r4, lr}
  return mu_vm_time_difference(t1, t2);
     60e:	4b01      	ldr	r3, [pc, #4]	; (614 <mu_time_difference+0x8>)
     610:	4798      	blx	r3
}
     612:	bd10      	pop	{r4, pc}
     614:	0000075d 	.word	0x0000075d

00000618 <mu_time_precedes>:

bool mu_time_precedes(mu_time_t t1, mu_time_t t2) {
     618:	b510      	push	{r4, lr}
  return mu_vm_time_precedes(t1, t2);
     61a:	4b01      	ldr	r3, [pc, #4]	; (620 <mu_time_precedes+0x8>)
     61c:	4798      	blx	r3
}
     61e:	bd10      	pop	{r4, pc}
     620:	00000761 	.word	0x00000761

00000624 <mu_time_follows>:

bool mu_time_equals(mu_time_t t1, mu_time_t t2) {
  return mu_vm_time_equals(t1, t2);
}

bool mu_time_follows(mu_time_t t1, mu_time_t t2) {
     624:	b510      	push	{r4, lr}
     626:	000b      	movs	r3, r1
  return mu_vm_time_precedes(t2, t1);
     628:	0001      	movs	r1, r0
     62a:	0018      	movs	r0, r3
     62c:	4b01      	ldr	r3, [pc, #4]	; (634 <mu_time_follows+0x10>)
     62e:	4798      	blx	r3
}
     630:	bd10      	pop	{r4, pc}
     632:	46c0      	nop			; (mov r8, r8)
     634:	00000761 	.word	0x00000761

00000638 <mu_time_ms_to_duration>:

mu_time_ms_dt mu_time_duration_to_ms(mu_time_dt dt) {
  return mu_vm_time_duration_to_ms(dt);
}

mu_time_dt mu_time_ms_to_duration(mu_time_ms_dt ms) {
     638:	b510      	push	{r4, lr}
  return mu_vm_time_ms_to_duration(ms);
     63a:	4b01      	ldr	r3, [pc, #4]	; (640 <mu_time_ms_to_duration+0x8>)
     63c:	4798      	blx	r3
}
     63e:	bd10      	pop	{r4, pc}
     640:	00000769 	.word	0x00000769

00000644 <mu_time_now>:
mu_time_dt mu_time_s_to_duration(mu_time_s_dt s) {
  return mu_vm_time_s_to_duration(s);
}
#endif

mu_time_t mu_time_now() {
     644:	b510      	push	{r4, lr}
  return mu_vm_rtc_now();
     646:	4b01      	ldr	r3, [pc, #4]	; (64c <mu_time_now+0x8>)
     648:	4798      	blx	r3
}
     64a:	bd10      	pop	{r4, pc}
     64c:	00000791 	.word	0x00000791

00000650 <button_cb_trampoline>:
void mu_vm_sleep(void) { go_to_sleep(); }

// =============================================================================
// private (local) code

static void button_cb_trampoline(void) {
     650:	b510      	push	{r4, lr}
  if (s_port.button_cb) {
     652:	4b04      	ldr	r3, [pc, #16]	; (664 <button_cb_trampoline+0x14>)
     654:	681b      	ldr	r3, [r3, #0]
     656:	2b00      	cmp	r3, #0
     658:	d002      	beq.n	660 <button_cb_trampoline+0x10>
    s_port.button_cb(s_port.button_cb_arg);
     65a:	4a02      	ldr	r2, [pc, #8]	; (664 <button_cb_trampoline+0x14>)
     65c:	6850      	ldr	r0, [r2, #4]
     65e:	4798      	blx	r3
  }
}
     660:	bd10      	pop	{r4, pc}
     662:	46c0      	nop			; (mov r8, r8)
     664:	20000098 	.word	0x20000098

00000668 <tx_byte_sent>:
}

/**
 * Arrive here when the USART is ready to accept a new character.
 */
static void tx_byte_sent(struct _usart_async_device *device) {
     668:	b510      	push	{r4, lr}
  // notify user callback if set
  if (s_port.tx_cb) {
     66a:	4b04      	ldr	r3, [pc, #16]	; (67c <tx_byte_sent+0x14>)
     66c:	689b      	ldr	r3, [r3, #8]
     66e:	2b00      	cmp	r3, #0
     670:	d002      	beq.n	678 <tx_byte_sent+0x10>
    s_port.tx_cb(s_port.tx_cb_arg);
     672:	4a02      	ldr	r2, [pc, #8]	; (67c <tx_byte_sent+0x14>)
     674:	68d0      	ldr	r0, [r2, #12]
     676:	4798      	blx	r3
  }
}
     678:	bd10      	pop	{r4, pc}
     67a:	46c0      	nop			; (mov r8, r8)
     67c:	20000098 	.word	0x20000098

00000680 <rx_done_cb>:

/**
 * Arrive here when a character has been fully received.
 */
static void rx_done_cb(struct _usart_async_device *device, uint8_t data) {
     680:	b510      	push	{r4, lr}
  // The ASF4 serial interrupt handler reads the data register which clears the
  // RXD bit (as well as fetching the data).  The user needs to know if there is
  // data available, so we shadow the RXD bit and the data register with
  // s_rx_has_data and s_rx_data respectively.
  s_rx_data = data;
     682:	4b08      	ldr	r3, [pc, #32]	; (6a4 <rx_done_cb+0x24>)
     684:	2220      	movs	r2, #32
     686:	5499      	strb	r1, [r3, r2]
  s_rx_has_data = true;
     688:	2101      	movs	r1, #1
     68a:	3201      	adds	r2, #1
     68c:	5499      	strb	r1, [r3, r2]

  // clear the start of frame flag so mu_vm_serial_read_in_progress() will
  // return false.
  hri_sercomusart_clear_INTFLAG_RXS_bit(USART_0.device.hw);
     68e:	4a06      	ldr	r2, [pc, #24]	; (6a8 <rx_done_cb+0x28>)
     690:	6a12      	ldr	r2, [r2, #32]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXS) >> SERCOM_USART_INTFLAG_RXS_Pos;
}

static inline void hri_sercomusart_clear_INTFLAG_RXS_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     692:	3107      	adds	r1, #7
     694:	7611      	strb	r1, [r2, #24]

  // notify user callback if set
  if (s_port.rx_cb) {
     696:	691b      	ldr	r3, [r3, #16]
     698:	2b00      	cmp	r3, #0
     69a:	d002      	beq.n	6a2 <rx_done_cb+0x22>
    s_port.rx_cb(s_port.rx_cb_arg);
     69c:	4a01      	ldr	r2, [pc, #4]	; (6a4 <rx_done_cb+0x24>)
     69e:	6950      	ldr	r0, [r2, #20]
     6a0:	4798      	blx	r3
  }
}
     6a2:	bd10      	pop	{r4, pc}
     6a4:	20000098 	.word	0x20000098
     6a8:	20000690 	.word	0x20000690

000006ac <tx_done_cb>:
 * Arrive here when the previous character has been fully transmitted.
 */
static void tx_done_cb(struct _usart_async_device *device) {
  // No action.  In the future, we might use this for an async version of
  // mu_vm_serial_write_in_progress().
  asm("nop");
     6ac:	46c0      	nop			; (mov r8, r8)
}
     6ae:	4770      	bx	lr

000006b0 <error_cb>:

/**
 * Arrive here on an error condition.
 */
static void error_cb(struct _usart_async_device *device) {
  asm("nop");
     6b0:	46c0      	nop			; (mov r8, r8)
}
     6b2:	4770      	bx	lr

000006b4 <rtc_cb_trampoline>:

static void rtc_cb_trampoline(struct calendar_dev *const dev) {
     6b4:	b510      	push	{r4, lr}
  // Arrive here when the RTC count register matches the RTC compare register.
  // Even if the user hasn't registered a callback, this will wake the processor
  // from sleep...
  if (s_port.rtc_cb) {
     6b6:	4b04      	ldr	r3, [pc, #16]	; (6c8 <rtc_cb_trampoline+0x14>)
     6b8:	699b      	ldr	r3, [r3, #24]
     6ba:	2b00      	cmp	r3, #0
     6bc:	d002      	beq.n	6c4 <rtc_cb_trampoline+0x10>
    s_port.rtc_cb(s_port.rtc_cb_arg);
     6be:	4a02      	ldr	r2, [pc, #8]	; (6c8 <rtc_cb_trampoline+0x14>)
     6c0:	69d0      	ldr	r0, [r2, #28]
     6c2:	4798      	blx	r3
  }
}
     6c4:	bd10      	pop	{r4, pc}
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	20000098 	.word	0x20000098

000006cc <mu_vm_init>:
void mu_vm_init(void) {
     6cc:	b510      	push	{r4, lr}
  memset(&s_port, 0, sizeof(s_port));
     6ce:	2220      	movs	r2, #32
     6d0:	2100      	movs	r1, #0
     6d2:	4813      	ldr	r0, [pc, #76]	; (720 <mu_vm_init+0x54>)
     6d4:	4b13      	ldr	r3, [pc, #76]	; (724 <mu_vm_init+0x58>)
     6d6:	4798      	blx	r3
  ext_irq_register(PIN_PA15, button_cb_trampoline);
     6d8:	4913      	ldr	r1, [pc, #76]	; (728 <mu_vm_init+0x5c>)
     6da:	200f      	movs	r0, #15
     6dc:	4b13      	ldr	r3, [pc, #76]	; (72c <mu_vm_init+0x60>)
     6de:	4798      	blx	r3
  USART_0.device.usart_cb.tx_byte_sent = tx_byte_sent;
     6e0:	4b13      	ldr	r3, [pc, #76]	; (730 <mu_vm_init+0x64>)
     6e2:	4a14      	ldr	r2, [pc, #80]	; (734 <mu_vm_init+0x68>)
     6e4:	609a      	str	r2, [r3, #8]
  USART_0.device.usart_cb.rx_done_cb = rx_done_cb;
     6e6:	4a14      	ldr	r2, [pc, #80]	; (738 <mu_vm_init+0x6c>)
     6e8:	60da      	str	r2, [r3, #12]
  USART_0.device.usart_cb.tx_done_cb = tx_done_cb;
     6ea:	4a14      	ldr	r2, [pc, #80]	; (73c <mu_vm_init+0x70>)
     6ec:	611a      	str	r2, [r3, #16]
  USART_0.device.usart_cb.error_cb = error_cb;
     6ee:	4a14      	ldr	r2, [pc, #80]	; (740 <mu_vm_init+0x74>)
     6f0:	615a      	str	r2, [r3, #20]
  hri_sercomusart_set_CTRLB_SFDE_bit(USART_0.device.hw);
     6f2:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_sercomusart_set_CTRLB_SFDE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg |= SERCOM_USART_CTRLB_SFDE;
     6f4:	6851      	ldr	r1, [r2, #4]
     6f6:	2380      	movs	r3, #128	; 0x80
     6f8:	009b      	lsls	r3, r3, #2
     6fa:	430b      	orrs	r3, r1
     6fc:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     6fe:	2107      	movs	r1, #7
     700:	69d3      	ldr	r3, [r2, #28]
     702:	4219      	tst	r1, r3
     704:	d1fc      	bne.n	700 <mu_vm_init+0x34>
  usart_async_enable(&USART_0);
     706:	480a      	ldr	r0, [pc, #40]	; (730 <mu_vm_init+0x64>)
     708:	4b0e      	ldr	r3, [pc, #56]	; (744 <mu_vm_init+0x78>)
     70a:	4798      	blx	r3
  calendar_enable(&CALENDAR_0); // start RTC
     70c:	4c0e      	ldr	r4, [pc, #56]	; (748 <mu_vm_init+0x7c>)
     70e:	0020      	movs	r0, r4
     710:	4b0e      	ldr	r3, [pc, #56]	; (74c <mu_vm_init+0x80>)
     712:	4798      	blx	r3
  _calendar_register_callback(&CALENDAR_0.device, rtc_cb_trampoline);
     714:	490e      	ldr	r1, [pc, #56]	; (750 <mu_vm_init+0x84>)
     716:	0020      	movs	r0, r4
     718:	4b0e      	ldr	r3, [pc, #56]	; (754 <mu_vm_init+0x88>)
     71a:	4798      	blx	r3
}
     71c:	bd10      	pop	{r4, pc}
     71e:	46c0      	nop			; (mov r8, r8)
     720:	20000098 	.word	0x20000098
     724:	0000222f 	.word	0x0000222f
     728:	00000651 	.word	0x00000651
     72c:	00000ce5 	.word	0x00000ce5
     730:	20000690 	.word	0x20000690
     734:	00000669 	.word	0x00000669
     738:	00000681 	.word	0x00000681
     73c:	000006ad 	.word	0x000006ad
     740:	000006b1 	.word	0x000006b1
     744:	00000fa9 	.word	0x00000fa9
     748:	20000674 	.word	0x20000674
     74c:	00000c3d 	.word	0x00000c3d
     750:	000006b5 	.word	0x000006b5
     754:	000013e1 	.word	0x000013e1

00000758 <mu_vm_time_offset>:
  return t + dt;
     758:	1808      	adds	r0, r1, r0
}
     75a:	4770      	bx	lr

0000075c <mu_vm_time_difference>:
  return t1 - t2;
     75c:	1a40      	subs	r0, r0, r1
}
     75e:	4770      	bx	lr

00000760 <mu_vm_time_precedes>:
  return t1 - t2;
     760:	1a40      	subs	r0, r0, r1
  return mu_vm_time_difference(t1, t2) > MAX_DURATION;
     762:	0fc0      	lsrs	r0, r0, #31
}
     764:	4770      	bx	lr
	...

00000768 <mu_vm_time_ms_to_duration>:
mu_vm_time_dt mu_vm_time_ms_to_duration(mu_vm_time_ms_dt ms) {
     768:	b510      	push	{r4, lr}
  return quo_rounded(ms * CONF_GCLK_RTC_FREQUENCY, 1000);
     76a:	03c0      	lsls	r0, r0, #15
  //   (y < 0) is false (zero) if x is non-negative
  //   (x < 0) ^ (y < 0) is true if x and y have opposite signs
  //   x/y would be the quotient, but it is truncated towards zero.  To round:
  //   (x + y/2)/y is the rounded quotient when x and y have the same sign
  //   (x - y/2)/y is the rounded quotient when x and y have opposite signs
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
     76c:	d506      	bpl.n	77c <mu_vm_time_ms_to_duration+0x14>
     76e:	38f5      	subs	r0, #245	; 0xf5
     770:	38ff      	subs	r0, #255	; 0xff
     772:	21fa      	movs	r1, #250	; 0xfa
     774:	0089      	lsls	r1, r1, #2
     776:	4b05      	ldr	r3, [pc, #20]	; (78c <mu_vm_time_ms_to_duration+0x24>)
     778:	4798      	blx	r3
}
     77a:	bd10      	pop	{r4, pc}
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
     77c:	30f5      	adds	r0, #245	; 0xf5
     77e:	30ff      	adds	r0, #255	; 0xff
     780:	21fa      	movs	r1, #250	; 0xfa
     782:	0089      	lsls	r1, r1, #2
     784:	4b01      	ldr	r3, [pc, #4]	; (78c <mu_vm_time_ms_to_duration+0x24>)
     786:	4798      	blx	r3
     788:	e7f7      	b.n	77a <mu_vm_time_ms_to_duration+0x12>
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	00001f85 	.word	0x00001f85

00000790 <mu_vm_rtc_now>:
typedef uint8_t  hri_rtcmode2_intflag_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtc_wait_for_sync(const void *const hw)
{
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     790:	4a03      	ldr	r2, [pc, #12]	; (7a0 <mu_vm_rtc_now+0x10>)
     792:	7a93      	ldrb	r3, [r2, #10]
     794:	09db      	lsrs	r3, r3, #7
     796:	d1fc      	bne.n	792 <mu_vm_rtc_now+0x2>

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_COUNT_bf(const void *const hw)
{
	uint32_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
     798:	4b01      	ldr	r3, [pc, #4]	; (7a0 <mu_vm_rtc_now+0x10>)
     79a:	6918      	ldr	r0, [r3, #16]
}
     79c:	4770      	bx	lr
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	40001400 	.word	0x40001400

000007a4 <mu_vm_rtc_alarm_at>:

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     7a4:	4b09      	ldr	r3, [pc, #36]	; (7cc <mu_vm_rtc_alarm_at+0x28>)
     7a6:	699a      	ldr	r2, [r3, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     7a8:	6198      	str	r0, [r3, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     7aa:	001a      	movs	r2, r3
     7ac:	7a93      	ldrb	r3, [r2, #10]
     7ae:	09db      	lsrs	r3, r3, #7
     7b0:	d1fc      	bne.n	7ac <mu_vm_rtc_alarm_at+0x8>
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     7b2:	4b06      	ldr	r3, [pc, #24]	; (7cc <mu_vm_rtc_alarm_at+0x28>)
     7b4:	885a      	ldrh	r2, [r3, #2]
     7b6:	2180      	movs	r1, #128	; 0x80
     7b8:	01c9      	lsls	r1, r1, #7
     7ba:	430a      	orrs	r2, r1
     7bc:	805a      	strh	r2, [r3, #2]
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
     7be:	885a      	ldrh	r2, [r3, #2]
     7c0:	2180      	movs	r1, #128	; 0x80
     7c2:	0209      	lsls	r1, r1, #8
     7c4:	430a      	orrs	r2, r1
     7c6:	805a      	strh	r2, [r3, #2]
}
     7c8:	4770      	bx	lr
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	40001400 	.word	0x40001400

000007d0 <mu_vm_led_set>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
     7d0:	2800      	cmp	r0, #0
     7d2:	d006      	beq.n	7e2 <mu_vm_led_set+0x12>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7d4:	2180      	movs	r1, #128	; 0x80
     7d6:	05c9      	lsls	r1, r1, #23
     7d8:	2394      	movs	r3, #148	; 0x94
     7da:	22c0      	movs	r2, #192	; 0xc0
     7dc:	05d2      	lsls	r2, r2, #23
     7de:	50d1      	str	r1, [r2, r3]
void mu_vm_led_set(bool on) { gpio_set_pin_level(USER_LED_AL, !on); }
     7e0:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7e2:	2180      	movs	r1, #128	; 0x80
     7e4:	05c9      	lsls	r1, r1, #23
     7e6:	2398      	movs	r3, #152	; 0x98
     7e8:	22c0      	movs	r2, #192	; 0xc0
     7ea:	05d2      	lsls	r2, r2, #23
     7ec:	50d1      	str	r1, [r2, r3]
     7ee:	e7f7      	b.n	7e0 <mu_vm_led_set+0x10>

000007f0 <mu_vm_button_set_cb>:
  if (fn) {
     7f0:	2800      	cmp	r0, #0
     7f2:	d003      	beq.n	7fc <mu_vm_button_set_cb+0xc>
    s_port.button_cb = fn;
     7f4:	4b04      	ldr	r3, [pc, #16]	; (808 <mu_vm_button_set_cb+0x18>)
     7f6:	6018      	str	r0, [r3, #0]
    s_port.button_cb_arg = arg;
     7f8:	6059      	str	r1, [r3, #4]
}
     7fa:	4770      	bx	lr
    s_port.button_cb = NULL;
     7fc:	4b02      	ldr	r3, [pc, #8]	; (808 <mu_vm_button_set_cb+0x18>)
     7fe:	2200      	movs	r2, #0
     800:	601a      	str	r2, [r3, #0]
    s_port.button_cb_arg = NULL;
     802:	605a      	str	r2, [r3, #4]
}
     804:	e7f9      	b.n	7fa <mu_vm_button_set_cb+0xa>
     806:	46c0      	nop			; (mov r8, r8)
     808:	20000098 	.word	0x20000098

0000080c <mu_vm_serial_can_write>:
  return hri_sercomusart_get_interrupt_DRE_bit(USART_0.device.hw);
     80c:	4b02      	ldr	r3, [pc, #8]	; (818 <mu_vm_serial_can_write+0xc>)
     80e:	6a1b      	ldr	r3, [r3, #32]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     810:	7e18      	ldrb	r0, [r3, #24]
     812:	2301      	movs	r3, #1
     814:	4018      	ands	r0, r3
}
     816:	4770      	bx	lr
     818:	20000690 	.word	0x20000690

0000081c <mu_vm_serial_write>:
void mu_vm_serial_write(uint8_t byte) {
     81c:	b570      	push	{r4, r5, r6, lr}
     81e:	0005      	movs	r5, r0
  while (!mu_vm_serial_can_write()) {
     820:	4c09      	ldr	r4, [pc, #36]	; (848 <mu_vm_serial_write+0x2c>)
     822:	e000      	b.n	826 <mu_vm_serial_write+0xa>
    asm("nop");
     824:	46c0      	nop			; (mov r8, r8)
  while (!mu_vm_serial_can_write()) {
     826:	47a0      	blx	r4
     828:	2800      	cmp	r0, #0
     82a:	d0fb      	beq.n	824 <mu_vm_serial_write+0x8>
  _usart_async_write_byte(&USART_0.device, byte);
     82c:	0029      	movs	r1, r5
     82e:	4807      	ldr	r0, [pc, #28]	; (84c <mu_vm_serial_write+0x30>)
     830:	4b07      	ldr	r3, [pc, #28]	; (850 <mu_vm_serial_write+0x34>)
     832:	4798      	blx	r3
  if (s_port.tx_cb) {
     834:	4b07      	ldr	r3, [pc, #28]	; (854 <mu_vm_serial_write+0x38>)
     836:	689b      	ldr	r3, [r3, #8]
     838:	2b00      	cmp	r3, #0
     83a:	d004      	beq.n	846 <mu_vm_serial_write+0x2a>
    _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_BYTE_SENT, true);
     83c:	2201      	movs	r2, #1
     83e:	2100      	movs	r1, #0
     840:	4802      	ldr	r0, [pc, #8]	; (84c <mu_vm_serial_write+0x30>)
     842:	4b05      	ldr	r3, [pc, #20]	; (858 <mu_vm_serial_write+0x3c>)
     844:	4798      	blx	r3
}
     846:	bd70      	pop	{r4, r5, r6, pc}
     848:	0000080d 	.word	0x0000080d
     84c:	20000698 	.word	0x20000698
     850:	00001661 	.word	0x00001661
     854:	20000098 	.word	0x20000098
     858:	00001679 	.word	0x00001679

0000085c <mu_vm_serial_set_write_cb>:
void mu_vm_serial_set_write_cb(mu_vm_callback_fn fn, void *arg) {
     85c:	b510      	push	{r4, lr}
  if (fn) {
     85e:	2800      	cmp	r0, #0
     860:	d008      	beq.n	874 <mu_vm_serial_set_write_cb+0x18>
    s_port.tx_cb = fn;
     862:	4b09      	ldr	r3, [pc, #36]	; (888 <mu_vm_serial_set_write_cb+0x2c>)
     864:	6098      	str	r0, [r3, #8]
    s_port.tx_cb_arg = arg;
     866:	60d9      	str	r1, [r3, #12]
    _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_BYTE_SENT, true);
     868:	2201      	movs	r2, #1
     86a:	2100      	movs	r1, #0
     86c:	4807      	ldr	r0, [pc, #28]	; (88c <mu_vm_serial_set_write_cb+0x30>)
     86e:	4b08      	ldr	r3, [pc, #32]	; (890 <mu_vm_serial_set_write_cb+0x34>)
     870:	4798      	blx	r3
}
     872:	bd10      	pop	{r4, pc}
    _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_BYTE_SENT, false);
     874:	2200      	movs	r2, #0
     876:	2100      	movs	r1, #0
     878:	4804      	ldr	r0, [pc, #16]	; (88c <mu_vm_serial_set_write_cb+0x30>)
     87a:	4b05      	ldr	r3, [pc, #20]	; (890 <mu_vm_serial_set_write_cb+0x34>)
     87c:	4798      	blx	r3
    s_port.tx_cb = NULL;
     87e:	4b02      	ldr	r3, [pc, #8]	; (888 <mu_vm_serial_set_write_cb+0x2c>)
     880:	2200      	movs	r2, #0
     882:	609a      	str	r2, [r3, #8]
    s_port.tx_cb_arg = NULL;
     884:	60da      	str	r2, [r3, #12]
}
     886:	e7f4      	b.n	872 <mu_vm_serial_set_write_cb+0x16>
     888:	20000098 	.word	0x20000098
     88c:	20000698 	.word	0x20000698
     890:	00001679 	.word	0x00001679

00000894 <mu_vm_serial_read>:
uint8_t mu_vm_serial_read(void) {
     894:	b510      	push	{r4, lr}
  _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_RX_DONE, true);
     896:	2201      	movs	r2, #1
     898:	2101      	movs	r1, #1
     89a:	480b      	ldr	r0, [pc, #44]	; (8c8 <mu_vm_serial_read+0x34>)
     89c:	4b0b      	ldr	r3, [pc, #44]	; (8cc <mu_vm_serial_read+0x38>)
     89e:	4798      	blx	r3
  return s_rx_has_data;
     8a0:	2321      	movs	r3, #33	; 0x21
     8a2:	4a0b      	ldr	r2, [pc, #44]	; (8d0 <mu_vm_serial_read+0x3c>)
     8a4:	5cd3      	ldrb	r3, [r2, r3]
  while (!mu_vm_serial_can_read()) {
     8a6:	2b00      	cmp	r3, #0
     8a8:	d105      	bne.n	8b6 <mu_vm_serial_read+0x22>
  return s_rx_has_data;
     8aa:	0011      	movs	r1, r2
     8ac:	2221      	movs	r2, #33	; 0x21
    asm("nop");
     8ae:	46c0      	nop			; (mov r8, r8)
  return s_rx_has_data;
     8b0:	5c8b      	ldrb	r3, [r1, r2]
  while (!mu_vm_serial_can_read()) {
     8b2:	2b00      	cmp	r3, #0
     8b4:	d0fb      	beq.n	8ae <mu_vm_serial_read+0x1a>
  s_rx_has_data = false;       // clear the virtual RXD bit
     8b6:	4b06      	ldr	r3, [pc, #24]	; (8d0 <mu_vm_serial_read+0x3c>)
     8b8:	2100      	movs	r1, #0
     8ba:	2221      	movs	r2, #33	; 0x21
     8bc:	5499      	strb	r1, [r3, r2]
  return s_rx_data;
     8be:	3a01      	subs	r2, #1
     8c0:	5c98      	ldrb	r0, [r3, r2]
     8c2:	b2c0      	uxtb	r0, r0
}
     8c4:	bd10      	pop	{r4, pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	20000698 	.word	0x20000698
     8cc:	00001679 	.word	0x00001679
     8d0:	20000098 	.word	0x20000098

000008d4 <mu_vm_serial_can_read>:
  return s_rx_has_data;
     8d4:	2321      	movs	r3, #33	; 0x21
     8d6:	4a02      	ldr	r2, [pc, #8]	; (8e0 <mu_vm_serial_can_read+0xc>)
     8d8:	5cd0      	ldrb	r0, [r2, r3]
     8da:	b2c0      	uxtb	r0, r0
}
     8dc:	4770      	bx	lr
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	20000098 	.word	0x20000098

000008e4 <mu_vm_serial_set_read_cb>:
void mu_vm_serial_set_read_cb(mu_vm_callback_fn fn, void *arg) {
     8e4:	b510      	push	{r4, lr}
  if (fn) {
     8e6:	2800      	cmp	r0, #0
     8e8:	d008      	beq.n	8fc <mu_vm_serial_set_read_cb+0x18>
    s_port.rx_cb = fn;
     8ea:	4b07      	ldr	r3, [pc, #28]	; (908 <mu_vm_serial_set_read_cb+0x24>)
     8ec:	6118      	str	r0, [r3, #16]
    s_port.rx_cb_arg = arg;
     8ee:	6159      	str	r1, [r3, #20]
    _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_RX_DONE, true);
     8f0:	2201      	movs	r2, #1
     8f2:	2101      	movs	r1, #1
     8f4:	4805      	ldr	r0, [pc, #20]	; (90c <mu_vm_serial_set_read_cb+0x28>)
     8f6:	4b06      	ldr	r3, [pc, #24]	; (910 <mu_vm_serial_set_read_cb+0x2c>)
     8f8:	4798      	blx	r3
}
     8fa:	bd10      	pop	{r4, pc}
    s_port.rx_cb = NULL;
     8fc:	4b02      	ldr	r3, [pc, #8]	; (908 <mu_vm_serial_set_read_cb+0x24>)
     8fe:	2200      	movs	r2, #0
     900:	611a      	str	r2, [r3, #16]
    s_port.rx_cb_arg = NULL;
     902:	615a      	str	r2, [r3, #20]
}
     904:	e7f9      	b.n	8fa <mu_vm_serial_set_read_cb+0x16>
     906:	46c0      	nop			; (mov r8, r8)
     908:	20000098 	.word	0x20000098
     90c:	20000698 	.word	0x20000698
     910:	00001679 	.word	0x00001679

00000914 <mu_vm_sleep_until>:
void mu_vm_sleep_until(mu_vm_time_t then) {
     914:	b510      	push	{r4, lr}
     916:	0004      	movs	r4, r0
  mu_vm_time_t now = mu_vm_rtc_now();
     918:	4b07      	ldr	r3, [pc, #28]	; (938 <mu_vm_sleep_until+0x24>)
     91a:	4798      	blx	r3
  return t1 - t2;
     91c:	1a20      	subs	r0, r4, r0
  if (mu_vm_time_difference(then, now) > MIN_SLEEP_DURATION) {
     91e:	2820      	cmp	r0, #32
     920:	dc00      	bgt.n	924 <mu_vm_sleep_until+0x10>
}
     922:	bd10      	pop	{r4, pc}
    mu_vm_rtc_alarm_at(then);
     924:	0020      	movs	r0, r4
     926:	4b05      	ldr	r3, [pc, #20]	; (93c <mu_vm_sleep_until+0x28>)
     928:	4798      	blx	r3
  sleep(3); // in hal_sleep
     92a:	2003      	movs	r0, #3
     92c:	4b04      	ldr	r3, [pc, #16]	; (940 <mu_vm_sleep_until+0x2c>)
     92e:	4798      	blx	r3
  delay_us(200);
     930:	20c8      	movs	r0, #200	; 0xc8
     932:	4b04      	ldr	r3, [pc, #16]	; (944 <mu_vm_sleep_until+0x30>)
     934:	4798      	blx	r3
}
     936:	e7f4      	b.n	922 <mu_vm_sleep_until+0xe>
     938:	00000791 	.word	0x00000791
     93c:	000007a5 	.word	0x000007a5
     940:	00000d2d 	.word	0x00000d2d
     944:	00000c69 	.word	0x00000c69

00000948 <mu_vm_sleep>:
void mu_vm_sleep(void) { go_to_sleep(); }
     948:	b510      	push	{r4, lr}
  sleep(3); // in hal_sleep
     94a:	2003      	movs	r0, #3
     94c:	4b02      	ldr	r3, [pc, #8]	; (958 <mu_vm_sleep+0x10>)
     94e:	4798      	blx	r3
  delay_us(200);
     950:	20c8      	movs	r0, #200	; 0xc8
     952:	4b02      	ldr	r3, [pc, #8]	; (95c <mu_vm_sleep+0x14>)
     954:	4798      	blx	r3
void mu_vm_sleep(void) { go_to_sleep(); }
     956:	bd10      	pop	{r4, pc}
     958:	00000d2d 	.word	0x00000d2d
     95c:	00000c69 	.word	0x00000c69

00000960 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     960:	b510      	push	{r4, lr}
	system_init();
     962:	4b01      	ldr	r3, [pc, #4]	; (968 <atmel_start_init+0x8>)
     964:	4798      	blx	r3
}
     966:	bd10      	pop	{r4, pc}
     968:	00000b89 	.word	0x00000b89

0000096c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     96c:	e7fe      	b.n	96c <Dummy_Handler>
	...

00000970 <Reset_Handler>:
{
     970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     972:	4a2a      	ldr	r2, [pc, #168]	; (a1c <Reset_Handler+0xac>)
     974:	4b2a      	ldr	r3, [pc, #168]	; (a20 <Reset_Handler+0xb0>)
     976:	429a      	cmp	r2, r3
     978:	d011      	beq.n	99e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     97a:	001a      	movs	r2, r3
     97c:	4b29      	ldr	r3, [pc, #164]	; (a24 <Reset_Handler+0xb4>)
     97e:	429a      	cmp	r2, r3
     980:	d20d      	bcs.n	99e <Reset_Handler+0x2e>
     982:	4a29      	ldr	r2, [pc, #164]	; (a28 <Reset_Handler+0xb8>)
     984:	3303      	adds	r3, #3
     986:	1a9b      	subs	r3, r3, r2
     988:	089b      	lsrs	r3, r3, #2
     98a:	3301      	adds	r3, #1
     98c:	009b      	lsls	r3, r3, #2
     98e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     990:	4823      	ldr	r0, [pc, #140]	; (a20 <Reset_Handler+0xb0>)
     992:	4922      	ldr	r1, [pc, #136]	; (a1c <Reset_Handler+0xac>)
     994:	588c      	ldr	r4, [r1, r2]
     996:	5084      	str	r4, [r0, r2]
     998:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     99a:	429a      	cmp	r2, r3
     99c:	d1fa      	bne.n	994 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     99e:	4a23      	ldr	r2, [pc, #140]	; (a2c <Reset_Handler+0xbc>)
     9a0:	4b23      	ldr	r3, [pc, #140]	; (a30 <Reset_Handler+0xc0>)
     9a2:	429a      	cmp	r2, r3
     9a4:	d20a      	bcs.n	9bc <Reset_Handler+0x4c>
     9a6:	43d3      	mvns	r3, r2
     9a8:	4921      	ldr	r1, [pc, #132]	; (a30 <Reset_Handler+0xc0>)
     9aa:	185b      	adds	r3, r3, r1
     9ac:	2103      	movs	r1, #3
     9ae:	438b      	bics	r3, r1
     9b0:	3304      	adds	r3, #4
     9b2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     9b4:	2100      	movs	r1, #0
     9b6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     9b8:	4293      	cmp	r3, r2
     9ba:	d1fc      	bne.n	9b6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     9bc:	4a1d      	ldr	r2, [pc, #116]	; (a34 <Reset_Handler+0xc4>)
     9be:	21ff      	movs	r1, #255	; 0xff
     9c0:	4b1d      	ldr	r3, [pc, #116]	; (a38 <Reset_Handler+0xc8>)
     9c2:	438b      	bics	r3, r1
     9c4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     9c6:	39fd      	subs	r1, #253	; 0xfd
     9c8:	2390      	movs	r3, #144	; 0x90
     9ca:	005b      	lsls	r3, r3, #1
     9cc:	4a1b      	ldr	r2, [pc, #108]	; (a3c <Reset_Handler+0xcc>)
     9ce:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     9d0:	4a1b      	ldr	r2, [pc, #108]	; (a40 <Reset_Handler+0xd0>)
     9d2:	78d3      	ldrb	r3, [r2, #3]
     9d4:	2503      	movs	r5, #3
     9d6:	43ab      	bics	r3, r5
     9d8:	2402      	movs	r4, #2
     9da:	4323      	orrs	r3, r4
     9dc:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     9de:	78d3      	ldrb	r3, [r2, #3]
     9e0:	270c      	movs	r7, #12
     9e2:	43bb      	bics	r3, r7
     9e4:	2608      	movs	r6, #8
     9e6:	4333      	orrs	r3, r6
     9e8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     9ea:	4b16      	ldr	r3, [pc, #88]	; (a44 <Reset_Handler+0xd4>)
     9ec:	7b98      	ldrb	r0, [r3, #14]
     9ee:	2230      	movs	r2, #48	; 0x30
     9f0:	4390      	bics	r0, r2
     9f2:	2220      	movs	r2, #32
     9f4:	4310      	orrs	r0, r2
     9f6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     9f8:	7b99      	ldrb	r1, [r3, #14]
     9fa:	43b9      	bics	r1, r7
     9fc:	4331      	orrs	r1, r6
     9fe:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     a00:	7b9a      	ldrb	r2, [r3, #14]
     a02:	43aa      	bics	r2, r5
     a04:	4322      	orrs	r2, r4
     a06:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     a08:	4a0f      	ldr	r2, [pc, #60]	; (a48 <Reset_Handler+0xd8>)
     a0a:	6853      	ldr	r3, [r2, #4]
     a0c:	2180      	movs	r1, #128	; 0x80
     a0e:	430b      	orrs	r3, r1
     a10:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     a12:	4b0e      	ldr	r3, [pc, #56]	; (a4c <Reset_Handler+0xdc>)
     a14:	4798      	blx	r3
        main();
     a16:	4b0e      	ldr	r3, [pc, #56]	; (a50 <Reset_Handler+0xe0>)
     a18:	4798      	blx	r3
     a1a:	e7fe      	b.n	a1a <Reset_Handler+0xaa>
     a1c:	000039b4 	.word	0x000039b4
     a20:	20000000 	.word	0x20000000
     a24:	20000064 	.word	0x20000064
     a28:	20000004 	.word	0x20000004
     a2c:	20000064 	.word	0x20000064
     a30:	200006e4 	.word	0x200006e4
     a34:	e000ed00 	.word	0xe000ed00
     a38:	00000000 	.word	0x00000000
     a3c:	41007000 	.word	0x41007000
     a40:	41005000 	.word	0x41005000
     a44:	41004800 	.word	0x41004800
     a48:	41004000 	.word	0x41004000
     a4c:	000021b1 	.word	0x000021b1
     a50:	00001b9d 	.word	0x00001b9d

00000a54 <EXTERNAL_IRQ_0_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct calendar_descriptor CALENDAR_0;

void EXTERNAL_IRQ_0_init(void)
{
     a54:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     a56:	4a10      	ldr	r2, [pc, #64]	; (a98 <EXTERNAL_IRQ_0_init+0x44>)
     a58:	4b10      	ldr	r3, [pc, #64]	; (a9c <EXTERNAL_IRQ_0_init+0x48>)
     a5a:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a5c:	22c0      	movs	r2, #192	; 0xc0
     a5e:	05d2      	lsls	r2, r2, #23
     a60:	2080      	movs	r0, #128	; 0x80
     a62:	0200      	lsls	r0, r0, #8
     a64:	6050      	str	r0, [r2, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a66:	4b0e      	ldr	r3, [pc, #56]	; (aa0 <EXTERNAL_IRQ_0_init+0x4c>)
     a68:	490e      	ldr	r1, [pc, #56]	; (aa4 <EXTERNAL_IRQ_0_init+0x50>)
     a6a:	6299      	str	r1, [r3, #40]	; 0x28
     a6c:	490e      	ldr	r1, [pc, #56]	; (aa8 <EXTERNAL_IRQ_0_init+0x54>)
     a6e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a70:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     a72:	214f      	movs	r1, #79	; 0x4f
     a74:	5c5c      	ldrb	r4, [r3, r1]
     a76:	2504      	movs	r5, #4
     a78:	432c      	orrs	r4, r5
     a7a:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a7c:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a7e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a80:	2001      	movs	r0, #1
     a82:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a84:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a86:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a88:	3918      	subs	r1, #24
     a8a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a8c:	300e      	adds	r0, #14
     a8e:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a90:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(USER_BUTTON_AL, PINMUX_PA15A_EIC_EXTINT15);

	ext_irq_init();
     a92:	4b06      	ldr	r3, [pc, #24]	; (aac <EXTERNAL_IRQ_0_init+0x58>)
     a94:	4798      	blx	r3
}
     a96:	bd70      	pop	{r4, r5, r6, pc}
     a98:	00004305 	.word	0x00004305
     a9c:	40000c00 	.word	0x40000c00
     aa0:	41004400 	.word	0x41004400
     aa4:	40028000 	.word	0x40028000
     aa8:	c0020000 	.word	0xc0020000
     aac:	00000cc1 	.word	0x00000cc1

00000ab0 <USART_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     ab0:	4a04      	ldr	r2, [pc, #16]	; (ac4 <USART_0_CLOCK_init+0x14>)
     ab2:	6a13      	ldr	r3, [r2, #32]
     ab4:	2120      	movs	r1, #32
     ab6:	430b      	orrs	r3, r1
     ab8:	6213      	str	r3, [r2, #32]
     aba:	4a03      	ldr	r2, [pc, #12]	; (ac8 <USART_0_CLOCK_init+0x18>)
     abc:	4b03      	ldr	r3, [pc, #12]	; (acc <USART_0_CLOCK_init+0x1c>)
     abe:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     ac0:	4770      	bx	lr
     ac2:	46c0      	nop			; (mov r8, r8)
     ac4:	40000400 	.word	0x40000400
     ac8:	00004017 	.word	0x00004017
     acc:	40000c00 	.word	0x40000c00

00000ad0 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     ad0:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ad2:	4b0e      	ldr	r3, [pc, #56]	; (b0c <USART_0_PORT_init+0x3c>)
     ad4:	2256      	movs	r2, #86	; 0x56
     ad6:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ad8:	2501      	movs	r5, #1
     ada:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     adc:	2401      	movs	r4, #1
     ade:	4321      	orrs	r1, r4
     ae0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ae2:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ae4:	203b      	movs	r0, #59	; 0x3b
     ae6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ae8:	3a47      	subs	r2, #71	; 0x47
     aea:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     aec:	3a0d      	subs	r2, #13
     aee:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     af0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     af2:	2157      	movs	r1, #87	; 0x57
     af4:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     af6:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     af8:	4322      	orrs	r2, r4
     afa:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     afc:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     afe:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b00:	3948      	subs	r1, #72	; 0x48
     b02:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     b04:	3111      	adds	r1, #17
     b06:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b08:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     b0a:	bd30      	pop	{r4, r5, pc}
     b0c:	41004400 	.word	0x41004400

00000b10 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     b10:	b510      	push	{r4, lr}
     b12:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     b14:	4b06      	ldr	r3, [pc, #24]	; (b30 <USART_0_init+0x20>)
     b16:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     b18:	2300      	movs	r3, #0
     b1a:	9300      	str	r3, [sp, #0]
     b1c:	3310      	adds	r3, #16
     b1e:	4a05      	ldr	r2, [pc, #20]	; (b34 <USART_0_init+0x24>)
     b20:	4905      	ldr	r1, [pc, #20]	; (b38 <USART_0_init+0x28>)
     b22:	4806      	ldr	r0, [pc, #24]	; (b3c <USART_0_init+0x2c>)
     b24:	4c06      	ldr	r4, [pc, #24]	; (b40 <USART_0_init+0x30>)
     b26:	47a0      	blx	r4
	USART_0_PORT_init();
     b28:	4b06      	ldr	r3, [pc, #24]	; (b44 <USART_0_init+0x34>)
     b2a:	4798      	blx	r3
}
     b2c:	b002      	add	sp, #8
     b2e:	bd10      	pop	{r4, pc}
     b30:	00000ab1 	.word	0x00000ab1
     b34:	200000bc 	.word	0x200000bc
     b38:	42001400 	.word	0x42001400
     b3c:	20000690 	.word	0x20000690
     b40:	00000f11 	.word	0x00000f11
     b44:	00000ad1 	.word	0x00000ad1

00000b48 <CALENDAR_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     b48:	4a04      	ldr	r2, [pc, #16]	; (b5c <CALENDAR_0_CLOCK_init+0x14>)
     b4a:	6993      	ldr	r3, [r2, #24]
     b4c:	2120      	movs	r1, #32
     b4e:	430b      	orrs	r3, r1
     b50:	6193      	str	r3, [r2, #24]
     b52:	4a03      	ldr	r2, [pc, #12]	; (b60 <CALENDAR_0_CLOCK_init+0x18>)
     b54:	4b03      	ldr	r3, [pc, #12]	; (b64 <CALENDAR_0_CLOCK_init+0x1c>)
     b56:	805a      	strh	r2, [r3, #2]

void CALENDAR_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
     b58:	4770      	bx	lr
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	40000400 	.word	0x40000400
     b60:	00004304 	.word	0x00004304
     b64:	40000c00 	.word	0x40000c00

00000b68 <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     b68:	b510      	push	{r4, lr}
	CALENDAR_0_CLOCK_init();
     b6a:	4b03      	ldr	r3, [pc, #12]	; (b78 <CALENDAR_0_init+0x10>)
     b6c:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     b6e:	4903      	ldr	r1, [pc, #12]	; (b7c <CALENDAR_0_init+0x14>)
     b70:	4803      	ldr	r0, [pc, #12]	; (b80 <CALENDAR_0_init+0x18>)
     b72:	4b04      	ldr	r3, [pc, #16]	; (b84 <CALENDAR_0_init+0x1c>)
     b74:	4798      	blx	r3
}
     b76:	bd10      	pop	{r4, pc}
     b78:	00000b49 	.word	0x00000b49
     b7c:	40001400 	.word	0x40001400
     b80:	20000674 	.word	0x20000674
     b84:	00000bf5 	.word	0x00000bf5

00000b88 <system_init>:

void system_init(void)
{
     b88:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     b8a:	4b0d      	ldr	r3, [pc, #52]	; (bc0 <system_init+0x38>)
     b8c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b8e:	23c0      	movs	r3, #192	; 0xc0
     b90:	05db      	lsls	r3, r3, #23
     b92:	2280      	movs	r2, #128	; 0x80
     b94:	05d2      	lsls	r2, r2, #23
     b96:	2198      	movs	r1, #152	; 0x98
     b98:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b9a:	3910      	subs	r1, #16
     b9c:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b9e:	4b09      	ldr	r3, [pc, #36]	; (bc4 <system_init+0x3c>)
     ba0:	3120      	adds	r1, #32
     ba2:	505a      	str	r2, [r3, r1]
     ba4:	4a08      	ldr	r2, [pc, #32]	; (bc8 <system_init+0x40>)
     ba6:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba8:	3136      	adds	r1, #54	; 0x36
     baa:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     bac:	2001      	movs	r0, #1
     bae:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bb0:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(USER_LED_AL, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(USER_LED_AL, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     bb2:	4b06      	ldr	r3, [pc, #24]	; (bcc <system_init+0x44>)
     bb4:	4798      	blx	r3

	USART_0_init();
     bb6:	4b06      	ldr	r3, [pc, #24]	; (bd0 <system_init+0x48>)
     bb8:	4798      	blx	r3

	CALENDAR_0_init();
     bba:	4b06      	ldr	r3, [pc, #24]	; (bd4 <system_init+0x4c>)
     bbc:	4798      	blx	r3
}
     bbe:	bd10      	pop	{r4, pc}
     bc0:	00001171 	.word	0x00001171
     bc4:	41004400 	.word	0x41004400
     bc8:	c0004000 	.word	0xc0004000
     bcc:	00000a55 	.word	0x00000a55
     bd0:	00000b11 	.word	0x00000b11
     bd4:	00000b69 	.word	0x00000b69

00000bd8 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     bd8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     bdc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     bde:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     be0:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     be4:	4770      	bx	lr

00000be6 <atomic_leave_critical>:
     be6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     bea:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     bec:	f383 8810 	msr	PRIMASK, r3
}
     bf0:	4770      	bx	lr
	...

00000bf4 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
     bf4:	b570      	push	{r4, r5, r6, lr}
     bf6:	0004      	movs	r4, r0
     bf8:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
     bfa:	1e43      	subs	r3, r0, #1
     bfc:	4198      	sbcs	r0, r3
     bfe:	b2c0      	uxtb	r0, r0
     c00:	22e0      	movs	r2, #224	; 0xe0
     c02:	0052      	lsls	r2, r2, #1
     c04:	4909      	ldr	r1, [pc, #36]	; (c2c <calendar_init+0x38>)
     c06:	4b0a      	ldr	r3, [pc, #40]	; (c30 <calendar_init+0x3c>)
     c08:	4798      	blx	r3

	if (calendar->device.hw == hw) {
     c0a:	6823      	ldr	r3, [r4, #0]
     c0c:	42ab      	cmp	r3, r5
     c0e:	d008      	beq.n	c22 <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
     c10:	2b00      	cmp	r3, #0
     c12:	d108      	bne.n	c26 <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
     c14:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
     c16:	0020      	movs	r0, r4
     c18:	4b06      	ldr	r3, [pc, #24]	; (c34 <calendar_init+0x40>)
     c1a:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
     c1c:	4b06      	ldr	r3, [pc, #24]	; (c38 <calendar_init+0x44>)
     c1e:	6163      	str	r3, [r4, #20]

	return ret;
}
     c20:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
     c22:	2000      	movs	r0, #0
     c24:	e7fc      	b.n	c20 <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
     c26:	2012      	movs	r0, #18
     c28:	4240      	negs	r0, r0
     c2a:	e7f9      	b.n	c20 <calendar_init+0x2c>
     c2c:	00003524 	.word	0x00003524
     c30:	00001001 	.word	0x00001001
     c34:	00001441 	.word	0x00001441
     c38:	000007b2 	.word	0x000007b2

00000c3c <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
     c3c:	b510      	push	{r4, lr}
     c3e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	ASSERT(calendar);
     c40:	1e43      	subs	r3, r0, #1
     c42:	4198      	sbcs	r0, r3
     c44:	b2c0      	uxtb	r0, r0
     c46:	22e6      	movs	r2, #230	; 0xe6
     c48:	32ff      	adds	r2, #255	; 0xff
     c4a:	4904      	ldr	r1, [pc, #16]	; (c5c <calendar_enable+0x20>)
     c4c:	4b04      	ldr	r3, [pc, #16]	; (c60 <calendar_enable+0x24>)
     c4e:	4798      	blx	r3

	_calendar_enable(&calendar->device);
     c50:	0020      	movs	r0, r4
     c52:	4b04      	ldr	r3, [pc, #16]	; (c64 <calendar_enable+0x28>)
     c54:	4798      	blx	r3

	return ERR_NONE;
}
     c56:	2000      	movs	r0, #0
     c58:	bd10      	pop	{r4, pc}
     c5a:	46c0      	nop			; (mov r8, r8)
     c5c:	00003524 	.word	0x00003524
     c60:	00001001 	.word	0x00001001
     c64:	000014c5 	.word	0x000014c5

00000c68 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     c68:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     c6a:	4b04      	ldr	r3, [pc, #16]	; (c7c <delay_us+0x14>)
     c6c:	681c      	ldr	r4, [r3, #0]
     c6e:	4b04      	ldr	r3, [pc, #16]	; (c80 <delay_us+0x18>)
     c70:	4798      	blx	r3
     c72:	0001      	movs	r1, r0
     c74:	0020      	movs	r0, r4
     c76:	4b03      	ldr	r3, [pc, #12]	; (c84 <delay_us+0x1c>)
     c78:	4798      	blx	r3
}
     c7a:	bd10      	pop	{r4, pc}
     c7c:	200000cc 	.word	0x200000cc
     c80:	0000114d 	.word	0x0000114d
     c84:	00001169 	.word	0x00001169

00000c88 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     c88:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     c8a:	4b0c      	ldr	r3, [pc, #48]	; (cbc <process_ext_irq+0x34>)
     c8c:	685c      	ldr	r4, [r3, #4]
     c8e:	42a0      	cmp	r0, r4
     c90:	d00e      	beq.n	cb0 <process_ext_irq+0x28>
     c92:	2201      	movs	r2, #1
     c94:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     c96:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     c98:	25ff      	movs	r5, #255	; 0xff
     c9a:	e003      	b.n	ca4 <process_ext_irq+0x1c>
     c9c:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     c9e:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     ca0:	085b      	lsrs	r3, r3, #1
     ca2:	d10a      	bne.n	cba <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     ca4:	42a0      	cmp	r0, r4
     ca6:	d9f9      	bls.n	c9c <process_ext_irq+0x14>
	while (upper >= lower) {
     ca8:	2a00      	cmp	r2, #0
     caa:	d006      	beq.n	cba <process_ext_irq+0x32>
			lower = middle + 1;
     cac:	0031      	movs	r1, r6
     cae:	e7f6      	b.n	c9e <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     cb0:	4b02      	ldr	r3, [pc, #8]	; (cbc <process_ext_irq+0x34>)
     cb2:	681b      	ldr	r3, [r3, #0]
     cb4:	2b00      	cmp	r3, #0
     cb6:	d000      	beq.n	cba <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     cb8:	4798      	blx	r3
		}
	}
}
     cba:	bd70      	pop	{r4, r5, r6, pc}
     cbc:	200000d0 	.word	0x200000d0

00000cc0 <ext_irq_init>:
{
     cc0:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     cc2:	4b05      	ldr	r3, [pc, #20]	; (cd8 <ext_irq_init+0x18>)
     cc4:	2201      	movs	r2, #1
     cc6:	4252      	negs	r2, r2
     cc8:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     cca:	2200      	movs	r2, #0
     ccc:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     cce:	4803      	ldr	r0, [pc, #12]	; (cdc <ext_irq_init+0x1c>)
     cd0:	4b03      	ldr	r3, [pc, #12]	; (ce0 <ext_irq_init+0x20>)
     cd2:	4798      	blx	r3
}
     cd4:	bd10      	pop	{r4, pc}
     cd6:	46c0      	nop			; (mov r8, r8)
     cd8:	200000d0 	.word	0x200000d0
     cdc:	00000c89 	.word	0x00000c89
     ce0:	000011a1 	.word	0x000011a1

00000ce4 <ext_irq_register>:
{
     ce4:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     ce6:	4b0f      	ldr	r3, [pc, #60]	; (d24 <ext_irq_register+0x40>)
     ce8:	685b      	ldr	r3, [r3, #4]
     cea:	4298      	cmp	r0, r3
     cec:	d008      	beq.n	d00 <ext_irq_register+0x1c>
	if (NULL == cb) {
     cee:	2900      	cmp	r1, #0
     cf0:	d014      	beq.n	d1c <ext_irq_register+0x38>
			if (NULL == ext_irqs[i].cb) {
     cf2:	4b0c      	ldr	r3, [pc, #48]	; (d24 <ext_irq_register+0x40>)
     cf4:	681b      	ldr	r3, [r3, #0]
     cf6:	2b00      	cmp	r3, #0
     cf8:	d009      	beq.n	d0e <ext_irq_register+0x2a>
		return ERR_INVALID_ARG;
     cfa:	200d      	movs	r0, #13
     cfc:	4240      	negs	r0, r0
     cfe:	e00c      	b.n	d1a <ext_irq_register+0x36>
			ext_irqs[i].cb = cb;
     d00:	4b08      	ldr	r3, [pc, #32]	; (d24 <ext_irq_register+0x40>)
     d02:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     d04:	2900      	cmp	r1, #0
     d06:	d105      	bne.n	d14 <ext_irq_register+0x30>
		return _ext_irq_enable(pin, false);
     d08:	4b07      	ldr	r3, [pc, #28]	; (d28 <ext_irq_register+0x44>)
     d0a:	4798      	blx	r3
     d0c:	e005      	b.n	d1a <ext_irq_register+0x36>
				ext_irqs[i].cb  = cb;
     d0e:	4b05      	ldr	r3, [pc, #20]	; (d24 <ext_irq_register+0x40>)
     d10:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     d12:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     d14:	2101      	movs	r1, #1
     d16:	4b04      	ldr	r3, [pc, #16]	; (d28 <ext_irq_register+0x44>)
     d18:	4798      	blx	r3
}
     d1a:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     d1c:	200d      	movs	r0, #13
     d1e:	4240      	negs	r0, r0
     d20:	e7fb      	b.n	d1a <ext_irq_register+0x36>
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	200000d0 	.word	0x200000d0
     d28:	00001239 	.word	0x00001239

00000d2c <sleep>:
 * \retval -1 The requested sleep mode was invalid or not available
 * \retval  0 The operation completed successfully, returned after leaving the
 *            sleep
 */
int sleep(const uint8_t mode)
{
     d2c:	b510      	push	{r4, lr}
	if (ERR_NONE != _set_sleep_mode(mode))
     d2e:	4b05      	ldr	r3, [pc, #20]	; (d44 <sleep+0x18>)
     d30:	4798      	blx	r3
     d32:	2800      	cmp	r0, #0
     d34:	d103      	bne.n	d3e <sleep+0x12>
		return ERR_INVALID_ARG;

	_go_to_sleep();
     d36:	4b04      	ldr	r3, [pc, #16]	; (d48 <sleep+0x1c>)
     d38:	4798      	blx	r3

	return ERR_NONE;
     d3a:	2000      	movs	r0, #0
}
     d3c:	bd10      	pop	{r4, pc}
		return ERR_INVALID_ARG;
     d3e:	200d      	movs	r0, #13
     d40:	4240      	negs	r0, r0
     d42:	e7fb      	b.n	d3c <sleep+0x10>
     d44:	00001389 	.word	0x00001389
     d48:	00001145 	.word	0x00001145

00000d4c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     d4c:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     d4e:	3808      	subs	r0, #8

	descr->stat = 0;
     d50:	2300      	movs	r3, #0
     d52:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     d54:	6a43      	ldr	r3, [r0, #36]	; 0x24
     d56:	2b00      	cmp	r3, #0
     d58:	d000      	beq.n	d5c <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     d5a:	4798      	blx	r3
	}
}
     d5c:	bd10      	pop	{r4, pc}

00000d5e <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     d5e:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     d60:	3808      	subs	r0, #8

	descr->stat = 0;
     d62:	2300      	movs	r3, #0
     d64:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     d66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     d68:	2b00      	cmp	r3, #0
     d6a:	d000      	beq.n	d6e <usart_error+0x10>
		descr->usart_cb.error(descr);
     d6c:	4798      	blx	r3
	}
}
     d6e:	bd10      	pop	{r4, pc}

00000d70 <usart_fill_rx_buffer>:
{
     d70:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     d72:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     d74:	302c      	adds	r0, #44	; 0x2c
     d76:	4b04      	ldr	r3, [pc, #16]	; (d88 <usart_fill_rx_buffer+0x18>)
     d78:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     d7a:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     d7c:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     d7e:	2b00      	cmp	r3, #0
     d80:	d001      	beq.n	d86 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     d82:	0020      	movs	r0, r4
     d84:	4798      	blx	r3
}
     d86:	bd10      	pop	{r4, pc}
     d88:	000010a5 	.word	0x000010a5

00000d8c <usart_async_write>:
{
     d8c:	b570      	push	{r4, r5, r6, lr}
     d8e:	0004      	movs	r4, r0
     d90:	000e      	movs	r6, r1
     d92:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     d94:	2800      	cmp	r0, #0
     d96:	d01d      	beq.n	dd4 <usart_async_write+0x48>
     d98:	2900      	cmp	r1, #0
     d9a:	d01d      	beq.n	dd8 <usart_async_write+0x4c>
     d9c:	0010      	movs	r0, r2
     d9e:	1e43      	subs	r3, r0, #1
     da0:	4198      	sbcs	r0, r3
     da2:	223c      	movs	r2, #60	; 0x3c
     da4:	32ff      	adds	r2, #255	; 0xff
     da6:	490f      	ldr	r1, [pc, #60]	; (de4 <usart_async_write+0x58>)
     da8:	4b0f      	ldr	r3, [pc, #60]	; (de8 <usart_async_write+0x5c>)
     daa:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     dac:	2344      	movs	r3, #68	; 0x44
     dae:	5ae2      	ldrh	r2, [r4, r3]
     db0:	3308      	adds	r3, #8
     db2:	5ae3      	ldrh	r3, [r4, r3]
     db4:	429a      	cmp	r2, r3
     db6:	d111      	bne.n	ddc <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
     db8:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     dba:	234c      	movs	r3, #76	; 0x4c
     dbc:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     dbe:	2200      	movs	r2, #0
     dc0:	3b08      	subs	r3, #8
     dc2:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     dc4:	3b43      	subs	r3, #67	; 0x43
     dc6:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     dc8:	0020      	movs	r0, r4
     dca:	3008      	adds	r0, #8
     dcc:	4b07      	ldr	r3, [pc, #28]	; (dec <usart_async_write+0x60>)
     dce:	4798      	blx	r3
	return (int32_t)length;
     dd0:	0028      	movs	r0, r5
}
     dd2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     dd4:	2000      	movs	r0, #0
     dd6:	e7e4      	b.n	da2 <usart_async_write+0x16>
     dd8:	2000      	movs	r0, #0
     dda:	e7e2      	b.n	da2 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     ddc:	201c      	movs	r0, #28
     dde:	4240      	negs	r0, r0
     de0:	e7f7      	b.n	dd2 <usart_async_write+0x46>
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	00003540 	.word	0x00003540
     de8:	00001001 	.word	0x00001001
     dec:	00001669 	.word	0x00001669

00000df0 <usart_process_byte_sent>:
{
     df0:	b570      	push	{r4, r5, r6, lr}
     df2:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     df4:	0001      	movs	r1, r0
     df6:	3908      	subs	r1, #8
     df8:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     dfa:	224c      	movs	r2, #76	; 0x4c
     dfc:	5a8a      	ldrh	r2, [r1, r2]
     dfe:	429a      	cmp	r2, r3
     e00:	d00c      	beq.n	e1c <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     e02:	000a      	movs	r2, r1
     e04:	6c89      	ldr	r1, [r1, #72]	; 0x48
     e06:	1c5d      	adds	r5, r3, #1
     e08:	2044      	movs	r0, #68	; 0x44
     e0a:	5215      	strh	r5, [r2, r0]
     e0c:	5cc9      	ldrb	r1, [r1, r3]
     e0e:	0020      	movs	r0, r4
     e10:	4b04      	ldr	r3, [pc, #16]	; (e24 <usart_process_byte_sent+0x34>)
     e12:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     e14:	0020      	movs	r0, r4
     e16:	4b04      	ldr	r3, [pc, #16]	; (e28 <usart_process_byte_sent+0x38>)
     e18:	4798      	blx	r3
}
     e1a:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     e1c:	4b03      	ldr	r3, [pc, #12]	; (e2c <usart_process_byte_sent+0x3c>)
     e1e:	4798      	blx	r3
}
     e20:	e7fb      	b.n	e1a <usart_process_byte_sent+0x2a>
     e22:	46c0      	nop			; (mov r8, r8)
     e24:	00001661 	.word	0x00001661
     e28:	00001669 	.word	0x00001669
     e2c:	00001671 	.word	0x00001671

00000e30 <usart_async_read>:
{
     e30:	b5f0      	push	{r4, r5, r6, r7, lr}
     e32:	46ce      	mov	lr, r9
     e34:	4647      	mov	r7, r8
     e36:	b580      	push	{r7, lr}
     e38:	b085      	sub	sp, #20
     e3a:	0005      	movs	r5, r0
     e3c:	000e      	movs	r6, r1
     e3e:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
     e40:	2800      	cmp	r0, #0
     e42:	d015      	beq.n	e70 <usart_async_read+0x40>
     e44:	2900      	cmp	r1, #0
     e46:	d013      	beq.n	e70 <usart_async_read+0x40>
     e48:	2a00      	cmp	r2, #0
     e4a:	d12a      	bne.n	ea2 <usart_async_read+0x72>
     e4c:	22ac      	movs	r2, #172	; 0xac
     e4e:	0052      	lsls	r2, r2, #1
     e50:	4929      	ldr	r1, [pc, #164]	; (ef8 <usart_async_read+0xc8>)
     e52:	2000      	movs	r0, #0
     e54:	4b29      	ldr	r3, [pc, #164]	; (efc <usart_async_read+0xcc>)
     e56:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     e58:	a803      	add	r0, sp, #12
     e5a:	4b29      	ldr	r3, [pc, #164]	; (f00 <usart_async_read+0xd0>)
     e5c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     e5e:	0028      	movs	r0, r5
     e60:	3034      	adds	r0, #52	; 0x34
     e62:	4b28      	ldr	r3, [pc, #160]	; (f04 <usart_async_read+0xd4>)
     e64:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     e66:	a803      	add	r0, sp, #12
     e68:	4b27      	ldr	r3, [pc, #156]	; (f08 <usart_async_read+0xd8>)
     e6a:	4798      	blx	r3
	uint16_t                       was_read = 0;
     e6c:	2500      	movs	r5, #0
	return (int32_t)was_read;
     e6e:	e03c      	b.n	eea <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     e70:	22ac      	movs	r2, #172	; 0xac
     e72:	0052      	lsls	r2, r2, #1
     e74:	4920      	ldr	r1, [pc, #128]	; (ef8 <usart_async_read+0xc8>)
     e76:	2000      	movs	r0, #0
     e78:	4b20      	ldr	r3, [pc, #128]	; (efc <usart_async_read+0xcc>)
     e7a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     e7c:	a803      	add	r0, sp, #12
     e7e:	4b20      	ldr	r3, [pc, #128]	; (f00 <usart_async_read+0xd0>)
     e80:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     e82:	3534      	adds	r5, #52	; 0x34
     e84:	0028      	movs	r0, r5
     e86:	9501      	str	r5, [sp, #4]
     e88:	4b1e      	ldr	r3, [pc, #120]	; (f04 <usart_async_read+0xd4>)
     e8a:	4798      	blx	r3
     e8c:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     e8e:	a803      	add	r0, sp, #12
     e90:	4b1d      	ldr	r3, [pc, #116]	; (f08 <usart_async_read+0xd8>)
     e92:	4798      	blx	r3
	uint16_t                       was_read = 0;
     e94:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     e96:	4643      	mov	r3, r8
     e98:	2b00      	cmp	r3, #0
     e9a:	d026      	beq.n	eea <usart_async_read+0xba>
     e9c:	2f00      	cmp	r7, #0
     e9e:	d116      	bne.n	ece <usart_async_read+0x9e>
     ea0:	e023      	b.n	eea <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     ea2:	22ac      	movs	r2, #172	; 0xac
     ea4:	0052      	lsls	r2, r2, #1
     ea6:	4914      	ldr	r1, [pc, #80]	; (ef8 <usart_async_read+0xc8>)
     ea8:	2001      	movs	r0, #1
     eaa:	4b14      	ldr	r3, [pc, #80]	; (efc <usart_async_read+0xcc>)
     eac:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     eae:	a803      	add	r0, sp, #12
     eb0:	4b13      	ldr	r3, [pc, #76]	; (f00 <usart_async_read+0xd0>)
     eb2:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     eb4:	3534      	adds	r5, #52	; 0x34
     eb6:	0028      	movs	r0, r5
     eb8:	9501      	str	r5, [sp, #4]
     eba:	4b12      	ldr	r3, [pc, #72]	; (f04 <usart_async_read+0xd4>)
     ebc:	4798      	blx	r3
     ebe:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     ec0:	a803      	add	r0, sp, #12
     ec2:	4b11      	ldr	r3, [pc, #68]	; (f08 <usart_async_read+0xd8>)
     ec4:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     ec6:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
     ec8:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     eca:	2b00      	cmp	r3, #0
     ecc:	d00d      	beq.n	eea <usart_async_read+0xba>
{
     ece:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     ed0:	4b0e      	ldr	r3, [pc, #56]	; (f0c <usart_async_read+0xdc>)
     ed2:	4699      	mov	r9, r3
     ed4:	1c65      	adds	r5, r4, #1
     ed6:	b2ad      	uxth	r5, r5
     ed8:	1931      	adds	r1, r6, r4
     eda:	9801      	ldr	r0, [sp, #4]
     edc:	47c8      	blx	r9
     ede:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     ee0:	4544      	cmp	r4, r8
     ee2:	d202      	bcs.n	eea <usart_async_read+0xba>
     ee4:	b2a3      	uxth	r3, r4
     ee6:	429f      	cmp	r7, r3
     ee8:	d8f4      	bhi.n	ed4 <usart_async_read+0xa4>
}
     eea:	0028      	movs	r0, r5
     eec:	b005      	add	sp, #20
     eee:	bc0c      	pop	{r2, r3}
     ef0:	4690      	mov	r8, r2
     ef2:	4699      	mov	r9, r3
     ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	00003540 	.word	0x00003540
     efc:	00001001 	.word	0x00001001
     f00:	00000bd9 	.word	0x00000bd9
     f04:	000010e5 	.word	0x000010e5
     f08:	00000be7 	.word	0x00000be7
     f0c:	0000105d 	.word	0x0000105d

00000f10 <usart_async_init>:
{
     f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f12:	0004      	movs	r4, r0
     f14:	000d      	movs	r5, r1
     f16:	0016      	movs	r6, r2
     f18:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     f1a:	2800      	cmp	r0, #0
     f1c:	d026      	beq.n	f6c <usart_async_init+0x5c>
     f1e:	2900      	cmp	r1, #0
     f20:	d026      	beq.n	f70 <usart_async_init+0x60>
     f22:	2a00      	cmp	r2, #0
     f24:	d026      	beq.n	f74 <usart_async_init+0x64>
     f26:	0018      	movs	r0, r3
     f28:	1e43      	subs	r3, r0, #1
     f2a:	4198      	sbcs	r0, r3
     f2c:	223a      	movs	r2, #58	; 0x3a
     f2e:	4914      	ldr	r1, [pc, #80]	; (f80 <usart_async_init+0x70>)
     f30:	4b14      	ldr	r3, [pc, #80]	; (f84 <usart_async_init+0x74>)
     f32:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     f34:	0020      	movs	r0, r4
     f36:	3034      	adds	r0, #52	; 0x34
     f38:	003a      	movs	r2, r7
     f3a:	0031      	movs	r1, r6
     f3c:	4b12      	ldr	r3, [pc, #72]	; (f88 <usart_async_init+0x78>)
     f3e:	4798      	blx	r3
     f40:	2800      	cmp	r0, #0
     f42:	d119      	bne.n	f78 <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
     f44:	0020      	movs	r0, r4
     f46:	3008      	adds	r0, #8
     f48:	0029      	movs	r1, r5
     f4a:	4b10      	ldr	r3, [pc, #64]	; (f8c <usart_async_init+0x7c>)
     f4c:	4798      	blx	r3
	if (init_status) {
     f4e:	2800      	cmp	r0, #0
     f50:	d10b      	bne.n	f6a <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     f52:	4b0f      	ldr	r3, [pc, #60]	; (f90 <usart_async_init+0x80>)
     f54:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     f56:	4b0f      	ldr	r3, [pc, #60]	; (f94 <usart_async_init+0x84>)
     f58:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     f5a:	4b0f      	ldr	r3, [pc, #60]	; (f98 <usart_async_init+0x88>)
     f5c:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     f5e:	4b0f      	ldr	r3, [pc, #60]	; (f9c <usart_async_init+0x8c>)
     f60:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     f62:	4b0f      	ldr	r3, [pc, #60]	; (fa0 <usart_async_init+0x90>)
     f64:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     f66:	4b0f      	ldr	r3, [pc, #60]	; (fa4 <usart_async_init+0x94>)
     f68:	6163      	str	r3, [r4, #20]
}
     f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     f6c:	2000      	movs	r0, #0
     f6e:	e7dd      	b.n	f2c <usart_async_init+0x1c>
     f70:	2000      	movs	r0, #0
     f72:	e7db      	b.n	f2c <usart_async_init+0x1c>
     f74:	2000      	movs	r0, #0
     f76:	e7d9      	b.n	f2c <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     f78:	200d      	movs	r0, #13
     f7a:	4240      	negs	r0, r0
     f7c:	e7f5      	b.n	f6a <usart_async_init+0x5a>
     f7e:	46c0      	nop			; (mov r8, r8)
     f80:	00003540 	.word	0x00003540
     f84:	00001001 	.word	0x00001001
     f88:	00001009 	.word	0x00001009
     f8c:	000015bd 	.word	0x000015bd
     f90:	00000e31 	.word	0x00000e31
     f94:	00000d8d 	.word	0x00000d8d
     f98:	00000df1 	.word	0x00000df1
     f9c:	00000d71 	.word	0x00000d71
     fa0:	00000d4d 	.word	0x00000d4d
     fa4:	00000d5f 	.word	0x00000d5f

00000fa8 <usart_async_enable>:
{
     fa8:	b510      	push	{r4, lr}
     faa:	0004      	movs	r4, r0
	ASSERT(descr);
     fac:	1e43      	subs	r3, r0, #1
     fae:	4198      	sbcs	r0, r3
     fb0:	b2c0      	uxtb	r0, r0
     fb2:	2261      	movs	r2, #97	; 0x61
     fb4:	4904      	ldr	r1, [pc, #16]	; (fc8 <usart_async_enable+0x20>)
     fb6:	4b05      	ldr	r3, [pc, #20]	; (fcc <usart_async_enable+0x24>)
     fb8:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     fba:	0020      	movs	r0, r4
     fbc:	3008      	adds	r0, #8
     fbe:	4b04      	ldr	r3, [pc, #16]	; (fd0 <usart_async_enable+0x28>)
     fc0:	4798      	blx	r3
}
     fc2:	2000      	movs	r0, #0
     fc4:	bd10      	pop	{r4, pc}
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	00003540 	.word	0x00003540
     fcc:	00001001 	.word	0x00001001
     fd0:	00001639 	.word	0x00001639

00000fd4 <usart_async_disable>:
{
     fd4:	b510      	push	{r4, lr}
     fd6:	0004      	movs	r4, r0
	ASSERT(descr);
     fd8:	1e43      	subs	r3, r0, #1
     fda:	4198      	sbcs	r0, r3
     fdc:	b2c0      	uxtb	r0, r0
     fde:	226c      	movs	r2, #108	; 0x6c
     fe0:	4904      	ldr	r1, [pc, #16]	; (ff4 <usart_async_disable+0x20>)
     fe2:	4b05      	ldr	r3, [pc, #20]	; (ff8 <usart_async_disable+0x24>)
     fe4:	4798      	blx	r3
	_usart_async_disable(&descr->device);
     fe6:	0020      	movs	r0, r4
     fe8:	3008      	adds	r0, #8
     fea:	4b04      	ldr	r3, [pc, #16]	; (ffc <usart_async_disable+0x28>)
     fec:	4798      	blx	r3
}
     fee:	2000      	movs	r0, #0
     ff0:	bd10      	pop	{r4, pc}
     ff2:	46c0      	nop			; (mov r8, r8)
     ff4:	00003540 	.word	0x00003540
     ff8:	00001001 	.word	0x00001001
     ffc:	0000164d 	.word	0x0000164d

00001000 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1000:	2800      	cmp	r0, #0
    1002:	d100      	bne.n	1006 <assert+0x6>
		__asm("BKPT #0");
    1004:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1006:	4770      	bx	lr

00001008 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1008:	b570      	push	{r4, r5, r6, lr}
    100a:	0004      	movs	r4, r0
    100c:	000e      	movs	r6, r1
    100e:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    1010:	2800      	cmp	r0, #0
    1012:	d00b      	beq.n	102c <ringbuffer_init+0x24>
    1014:	2900      	cmp	r1, #0
    1016:	d018      	beq.n	104a <ringbuffer_init+0x42>
    1018:	2001      	movs	r0, #1
    101a:	2a00      	cmp	r2, #0
    101c:	d107      	bne.n	102e <ringbuffer_init+0x26>
    101e:	2228      	movs	r2, #40	; 0x28
    1020:	490c      	ldr	r1, [pc, #48]	; (1054 <ringbuffer_init+0x4c>)
    1022:	2000      	movs	r0, #0
    1024:	4b0c      	ldr	r3, [pc, #48]	; (1058 <ringbuffer_init+0x50>)
    1026:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1028:	1e6b      	subs	r3, r5, #1
    102a:	e007      	b.n	103c <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
    102c:	2000      	movs	r0, #0
    102e:	2228      	movs	r2, #40	; 0x28
    1030:	4908      	ldr	r1, [pc, #32]	; (1054 <ringbuffer_init+0x4c>)
    1032:	4b09      	ldr	r3, [pc, #36]	; (1058 <ringbuffer_init+0x50>)
    1034:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1036:	1e6b      	subs	r3, r5, #1
    1038:	422b      	tst	r3, r5
    103a:	d108      	bne.n	104e <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    103c:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    103e:	2300      	movs	r3, #0
    1040:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    1042:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1044:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1046:	2000      	movs	r0, #0
}
    1048:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    104a:	2000      	movs	r0, #0
    104c:	e7ef      	b.n	102e <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
    104e:	200d      	movs	r0, #13
    1050:	4240      	negs	r0, r0
    1052:	e7f9      	b.n	1048 <ringbuffer_init+0x40>
    1054:	00003560 	.word	0x00003560
    1058:	00001001 	.word	0x00001001

0000105c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    105c:	b570      	push	{r4, r5, r6, lr}
    105e:	0004      	movs	r4, r0
    1060:	000d      	movs	r5, r1
	ASSERT(rb && data);
    1062:	2800      	cmp	r0, #0
    1064:	d015      	beq.n	1092 <ringbuffer_get+0x36>
    1066:	0008      	movs	r0, r1
    1068:	1e43      	subs	r3, r0, #1
    106a:	4198      	sbcs	r0, r3
    106c:	b2c0      	uxtb	r0, r0
    106e:	2240      	movs	r2, #64	; 0x40
    1070:	490a      	ldr	r1, [pc, #40]	; (109c <ringbuffer_get+0x40>)
    1072:	4b0b      	ldr	r3, [pc, #44]	; (10a0 <ringbuffer_get+0x44>)
    1074:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1076:	68a3      	ldr	r3, [r4, #8]
    1078:	68e2      	ldr	r2, [r4, #12]
    107a:	429a      	cmp	r2, r3
    107c:	d00b      	beq.n	1096 <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
    107e:	6862      	ldr	r2, [r4, #4]
    1080:	4013      	ands	r3, r2
    1082:	6822      	ldr	r2, [r4, #0]
    1084:	5cd3      	ldrb	r3, [r2, r3]
    1086:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1088:	68a3      	ldr	r3, [r4, #8]
    108a:	3301      	adds	r3, #1
    108c:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    108e:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    1090:	bd70      	pop	{r4, r5, r6, pc}
    1092:	2000      	movs	r0, #0
    1094:	e7eb      	b.n	106e <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
    1096:	200a      	movs	r0, #10
    1098:	4240      	negs	r0, r0
    109a:	e7f9      	b.n	1090 <ringbuffer_get+0x34>
    109c:	00003560 	.word	0x00003560
    10a0:	00001001 	.word	0x00001001

000010a4 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    10a4:	b570      	push	{r4, r5, r6, lr}
    10a6:	0004      	movs	r4, r0
    10a8:	000d      	movs	r5, r1
	ASSERT(rb);
    10aa:	1e43      	subs	r3, r0, #1
    10ac:	4198      	sbcs	r0, r3
    10ae:	b2c0      	uxtb	r0, r0
    10b0:	2251      	movs	r2, #81	; 0x51
    10b2:	490a      	ldr	r1, [pc, #40]	; (10dc <ringbuffer_put+0x38>)
    10b4:	4b0a      	ldr	r3, [pc, #40]	; (10e0 <ringbuffer_put+0x3c>)
    10b6:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    10b8:	6863      	ldr	r3, [r4, #4]
    10ba:	68e2      	ldr	r2, [r4, #12]
    10bc:	4013      	ands	r3, r2
    10be:	6822      	ldr	r2, [r4, #0]
    10c0:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    10c2:	68e3      	ldr	r3, [r4, #12]
    10c4:	6861      	ldr	r1, [r4, #4]
    10c6:	68a2      	ldr	r2, [r4, #8]
    10c8:	1a9a      	subs	r2, r3, r2
    10ca:	428a      	cmp	r2, r1
    10cc:	d901      	bls.n	10d2 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    10ce:	1a59      	subs	r1, r3, r1
    10d0:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    10d2:	3301      	adds	r3, #1
    10d4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    10d6:	2000      	movs	r0, #0
    10d8:	bd70      	pop	{r4, r5, r6, pc}
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	00003560 	.word	0x00003560
    10e0:	00001001 	.word	0x00001001

000010e4 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    10e4:	b510      	push	{r4, lr}
    10e6:	0004      	movs	r4, r0
	ASSERT(rb);
    10e8:	1e43      	subs	r3, r0, #1
    10ea:	4198      	sbcs	r0, r3
    10ec:	b2c0      	uxtb	r0, r0
    10ee:	2267      	movs	r2, #103	; 0x67
    10f0:	4903      	ldr	r1, [pc, #12]	; (1100 <ringbuffer_num+0x1c>)
    10f2:	4b04      	ldr	r3, [pc, #16]	; (1104 <ringbuffer_num+0x20>)
    10f4:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    10f6:	68e0      	ldr	r0, [r4, #12]
    10f8:	68a3      	ldr	r3, [r4, #8]
    10fa:	1ac0      	subs	r0, r0, r3
}
    10fc:	bd10      	pop	{r4, pc}
    10fe:	46c0      	nop			; (mov r8, r8)
    1100:	00003560 	.word	0x00003560
    1104:	00001001 	.word	0x00001001

00001108 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1108:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    110a:	4a06      	ldr	r2, [pc, #24]	; (1124 <_sbrk+0x1c>)
    110c:	6812      	ldr	r2, [r2, #0]
    110e:	2a00      	cmp	r2, #0
    1110:	d004      	beq.n	111c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1112:	4a04      	ldr	r2, [pc, #16]	; (1124 <_sbrk+0x1c>)
    1114:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1116:	18c3      	adds	r3, r0, r3
    1118:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    111a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    111c:	4902      	ldr	r1, [pc, #8]	; (1128 <_sbrk+0x20>)
    111e:	4a01      	ldr	r2, [pc, #4]	; (1124 <_sbrk+0x1c>)
    1120:	6011      	str	r1, [r2, #0]
    1122:	e7f6      	b.n	1112 <_sbrk+0xa>
    1124:	200000d8 	.word	0x200000d8
    1128:	200026e8 	.word	0x200026e8

0000112c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    112c:	2001      	movs	r0, #1
    112e:	4240      	negs	r0, r0
    1130:	4770      	bx	lr

00001132 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    1132:	2380      	movs	r3, #128	; 0x80
    1134:	019b      	lsls	r3, r3, #6
    1136:	604b      	str	r3, [r1, #4]

	return 0;
}
    1138:	2000      	movs	r0, #0
    113a:	4770      	bx	lr

0000113c <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    113c:	2001      	movs	r0, #1
    113e:	4770      	bx	lr

00001140 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    1140:	2000      	movs	r0, #0
    1142:	4770      	bx	lr

00001144 <_go_to_sleep>:
  __ASM volatile ("dsb 0xF":::"memory");
    1144:	f3bf 8f4f 	dsb	sy
 * \brief Put MCU to sleep
 */
void _go_to_sleep(void)
{
	__DSB();
	__WFI();
    1148:	bf30      	wfi
}
    114a:	4770      	bx	lr

0000114c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    114c:	b510      	push	{r4, lr}
    114e:	0003      	movs	r3, r0
		return (us * (freq / 10000) + 299) / 300;
    1150:	20c8      	movs	r0, #200	; 0xc8
    1152:	0080      	lsls	r0, r0, #2
    1154:	4358      	muls	r0, r3
    1156:	302c      	adds	r0, #44	; 0x2c
    1158:	30ff      	adds	r0, #255	; 0xff
    115a:	2196      	movs	r1, #150	; 0x96
    115c:	0049      	lsls	r1, r1, #1
    115e:	4b01      	ldr	r3, [pc, #4]	; (1164 <_get_cycles_for_us+0x18>)
    1160:	4798      	blx	r3
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1162:	bd10      	pop	{r4, pc}
    1164:	00001e71 	.word	0x00001e71

00001168 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    1168:	3901      	subs	r1, #1
    116a:	d8fd      	bhi.n	1168 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    116c:	4770      	bx	lr
	...

00001170 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1170:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1172:	4b06      	ldr	r3, [pc, #24]	; (118c <_init_chip+0x1c>)
    1174:	685a      	ldr	r2, [r3, #4]
    1176:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    1178:	4b05      	ldr	r3, [pc, #20]	; (1190 <_init_chip+0x20>)
    117a:	4798      	blx	r3
	_sysctrl_init_sources();
    117c:	4b05      	ldr	r3, [pc, #20]	; (1194 <_init_chip+0x24>)
    117e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    1180:	4b05      	ldr	r3, [pc, #20]	; (1198 <_init_chip+0x28>)
    1182:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1184:	20ff      	movs	r0, #255	; 0xff
    1186:	4b05      	ldr	r3, [pc, #20]	; (119c <_init_chip+0x2c>)
    1188:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    118a:	bd10      	pop	{r4, pc}
    118c:	41004000 	.word	0x41004000
    1190:	000013c1 	.word	0x000013c1
    1194:	00001759 	.word	0x00001759
    1198:	0000179d 	.word	0x0000179d
    119c:	0000134d 	.word	0x0000134d

000011a0 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    11a0:	4a22      	ldr	r2, [pc, #136]	; (122c <_ext_irq_init+0x8c>)
    11a2:	7853      	ldrb	r3, [r2, #1]
    11a4:	09db      	lsrs	r3, r3, #7
    11a6:	d1fc      	bne.n	11a2 <_ext_irq_init+0x2>
    11a8:	4a20      	ldr	r2, [pc, #128]	; (122c <_ext_irq_init+0x8c>)
    11aa:	7853      	ldrb	r3, [r2, #1]
    11ac:	09db      	lsrs	r3, r3, #7
    11ae:	d1fc      	bne.n	11aa <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    11b0:	4b1e      	ldr	r3, [pc, #120]	; (122c <_ext_irq_init+0x8c>)
    11b2:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    11b4:	079b      	lsls	r3, r3, #30
    11b6:	d50a      	bpl.n	11ce <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    11b8:	2200      	movs	r2, #0
    11ba:	4b1c      	ldr	r3, [pc, #112]	; (122c <_ext_irq_init+0x8c>)
    11bc:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    11be:	001a      	movs	r2, r3
    11c0:	7853      	ldrb	r3, [r2, #1]
    11c2:	09db      	lsrs	r3, r3, #7
    11c4:	d1fc      	bne.n	11c0 <_ext_irq_init+0x20>
    11c6:	4a19      	ldr	r2, [pc, #100]	; (122c <_ext_irq_init+0x8c>)
    11c8:	7853      	ldrb	r3, [r2, #1]
    11ca:	09db      	lsrs	r3, r3, #7
    11cc:	d1fc      	bne.n	11c8 <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
    11ce:	2201      	movs	r2, #1
    11d0:	4b16      	ldr	r3, [pc, #88]	; (122c <_ext_irq_init+0x8c>)
    11d2:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    11d4:	001a      	movs	r2, r3
    11d6:	7853      	ldrb	r3, [r2, #1]
    11d8:	09db      	lsrs	r3, r3, #7
    11da:	d1fc      	bne.n	11d6 <_ext_irq_init+0x36>
    11dc:	4a13      	ldr	r2, [pc, #76]	; (122c <_ext_irq_init+0x8c>)
    11de:	7853      	ldrb	r3, [r2, #1]
    11e0:	09db      	lsrs	r3, r3, #7
    11e2:	d1fc      	bne.n	11de <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    11e4:	4b11      	ldr	r3, [pc, #68]	; (122c <_ext_irq_init+0x8c>)
    11e6:	2200      	movs	r2, #0
    11e8:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    11ea:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    11ec:	2180      	movs	r1, #128	; 0x80
    11ee:	0209      	lsls	r1, r1, #8
    11f0:	6159      	str	r1, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    11f2:	619a      	str	r2, [r3, #24]
    11f4:	22a0      	movs	r2, #160	; 0xa0
    11f6:	0612      	lsls	r2, r2, #24
    11f8:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    11fa:	781a      	ldrb	r2, [r3, #0]
    11fc:	2102      	movs	r1, #2
    11fe:	430a      	orrs	r2, r1
    1200:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1202:	001a      	movs	r2, r3
    1204:	7853      	ldrb	r3, [r2, #1]
    1206:	09db      	lsrs	r3, r3, #7
    1208:	d1fc      	bne.n	1204 <_ext_irq_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    120a:	4b09      	ldr	r3, [pc, #36]	; (1230 <_ext_irq_init+0x90>)
    120c:	2210      	movs	r2, #16
    120e:	2180      	movs	r1, #128	; 0x80
    1210:	505a      	str	r2, [r3, r1]
    1212:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1216:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    121a:	3101      	adds	r1, #1
    121c:	31ff      	adds	r1, #255	; 0xff
    121e:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1220:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    1222:	4b04      	ldr	r3, [pc, #16]	; (1234 <_ext_irq_init+0x94>)
    1224:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    1226:	2000      	movs	r0, #0
    1228:	4770      	bx	lr
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	40001800 	.word	0x40001800
    1230:	e000e100 	.word	0xe000e100
    1234:	200000dc 	.word	0x200000dc

00001238 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
    1238:	280f      	cmp	r0, #15
    123a:	d002      	beq.n	1242 <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
    123c:	200d      	movs	r0, #13
    123e:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
    1240:	4770      	bx	lr
	if (enable) {
    1242:	2900      	cmp	r1, #0
    1244:	d106      	bne.n	1254 <_ext_irq_enable+0x1c>
	((Eic *)hw)->INTENCLR.reg = mask;
    1246:	4b06      	ldr	r3, [pc, #24]	; (1260 <_ext_irq_enable+0x28>)
    1248:	2280      	movs	r2, #128	; 0x80
    124a:	0212      	lsls	r2, r2, #8
    124c:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    124e:	611a      	str	r2, [r3, #16]
	return ERR_NONE;
    1250:	2000      	movs	r0, #0
    1252:	e7f5      	b.n	1240 <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
    1254:	2280      	movs	r2, #128	; 0x80
    1256:	0212      	lsls	r2, r2, #8
    1258:	4b01      	ldr	r3, [pc, #4]	; (1260 <_ext_irq_enable+0x28>)
    125a:	60da      	str	r2, [r3, #12]
    125c:	2000      	movs	r0, #0
    125e:	e7ef      	b.n	1240 <_ext_irq_enable+0x8>
    1260:	40001800 	.word	0x40001800

00001264 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    1264:	b5f0      	push	{r4, r5, r6, r7, lr}
    1266:	46ce      	mov	lr, r9
    1268:	4647      	mov	r7, r8
    126a:	b580      	push	{r7, lr}
    126c:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
    126e:	4b31      	ldr	r3, [pc, #196]	; (1334 <EIC_Handler+0xd0>)
    1270:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1272:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1274:	400a      	ands	r2, r1
    1276:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1278:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    127a:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    127c:	4b2e      	ldr	r3, [pc, #184]	; (1338 <EIC_Handler+0xd4>)
    127e:	6818      	ldr	r0, [r3, #0]
    1280:	1e43      	subs	r3, r0, #1
    1282:	4198      	sbcs	r0, r3
    1284:	b2c0      	uxtb	r0, r0
    1286:	22d2      	movs	r2, #210	; 0xd2
    1288:	492c      	ldr	r1, [pc, #176]	; (133c <EIC_Handler+0xd8>)
    128a:	4b2d      	ldr	r3, [pc, #180]	; (1340 <EIC_Handler+0xdc>)
    128c:	4798      	blx	r3

	while (flags) {
    128e:	9b01      	ldr	r3, [sp, #4]
    1290:	2b00      	cmp	r3, #0
    1292:	d049      	beq.n	1328 <EIC_Handler+0xc4>
    1294:	2301      	movs	r3, #1
    1296:	425b      	negs	r3, r3
    1298:	4699      	mov	r9, r3
		pos = ffs(flags) - 1;
    129a:	4b2a      	ldr	r3, [pc, #168]	; (1344 <EIC_Handler+0xe0>)
    129c:	4698      	mov	r8, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
    129e:	4f26      	ldr	r7, [pc, #152]	; (1338 <EIC_Handler+0xd4>)
				if (_map[middle].extint == pos) {
    12a0:	4d29      	ldr	r5, [pc, #164]	; (1348 <EIC_Handler+0xe4>)
    12a2:	e03a      	b.n	131a <EIC_Handler+0xb6>
					upper = middle - 1;
    12a4:	3a01      	subs	r2, #1
    12a6:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
    12a8:	42b1      	cmp	r1, r6
    12aa:	d80c      	bhi.n	12c6 <EIC_Handler+0x62>
				middle = (upper + lower) >> 1;
    12ac:	1873      	adds	r3, r6, r1
    12ae:	105b      	asrs	r3, r3, #1
    12b0:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
    12b2:	4003      	ands	r3, r0
    12b4:	00db      	lsls	r3, r3, #3
    12b6:	5d5b      	ldrb	r3, [r3, r5]
    12b8:	42a3      	cmp	r3, r4
    12ba:	d008      	beq.n	12ce <EIC_Handler+0x6a>
				if (_map[middle].extint < pos) {
    12bc:	429c      	cmp	r4, r3
    12be:	ddf1      	ble.n	12a4 <EIC_Handler+0x40>
					lower = middle + 1;
    12c0:	3201      	adds	r2, #1
    12c2:	b2d1      	uxtb	r1, r2
    12c4:	e7f0      	b.n	12a8 <EIC_Handler+0x44>
			if (INVALID_PIN_NUMBER != pin) {
    12c6:	464b      	mov	r3, r9
    12c8:	3301      	adds	r3, #1
    12ca:	d005      	beq.n	12d8 <EIC_Handler+0x74>
    12cc:	e001      	b.n	12d2 <EIC_Handler+0x6e>
    12ce:	230f      	movs	r3, #15
    12d0:	4699      	mov	r9, r3
				callback(pin);
    12d2:	4648      	mov	r0, r9
    12d4:	683b      	ldr	r3, [r7, #0]
    12d6:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    12d8:	9b01      	ldr	r3, [sp, #4]
    12da:	2201      	movs	r2, #1
    12dc:	40a2      	lsls	r2, r4
    12de:	4393      	bics	r3, r2
    12e0:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    12e2:	9801      	ldr	r0, [sp, #4]
    12e4:	4b17      	ldr	r3, [pc, #92]	; (1344 <EIC_Handler+0xe0>)
    12e6:	4798      	blx	r3
    12e8:	3801      	subs	r0, #1
    12ea:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    12ec:	1c63      	adds	r3, r4, #1
    12ee:	d00a      	beq.n	1306 <EIC_Handler+0xa2>
				if (_map[middle].extint == pos) {
    12f0:	2c0f      	cmp	r4, #15
    12f2:	d005      	beq.n	1300 <EIC_Handler+0x9c>
    12f4:	230f      	movs	r3, #15
    12f6:	2200      	movs	r2, #0
    12f8:	2601      	movs	r6, #1
    12fa:	2100      	movs	r1, #0
    12fc:	20ff      	movs	r0, #255	; 0xff
    12fe:	e7dd      	b.n	12bc <EIC_Handler+0x58>
    1300:	230f      	movs	r3, #15
    1302:	4699      	mov	r9, r3
    1304:	e7e5      	b.n	12d2 <EIC_Handler+0x6e>
	return ((Eic *)hw)->INTFLAG.reg;
    1306:	4b0b      	ldr	r3, [pc, #44]	; (1334 <EIC_Handler+0xd0>)
    1308:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    130a:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    130c:	400a      	ands	r2, r1
    130e:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1310:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1312:	611a      	str	r2, [r3, #16]
	while (flags) {
    1314:	9b01      	ldr	r3, [sp, #4]
    1316:	2b00      	cmp	r3, #0
    1318:	d006      	beq.n	1328 <EIC_Handler+0xc4>
		pos = ffs(flags) - 1;
    131a:	9801      	ldr	r0, [sp, #4]
    131c:	47c0      	blx	r8
    131e:	3801      	subs	r0, #1
    1320:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1322:	1c63      	adds	r3, r4, #1
    1324:	d1e4      	bne.n	12f0 <EIC_Handler+0x8c>
    1326:	e7ee      	b.n	1306 <EIC_Handler+0xa2>
	}
}
    1328:	b003      	add	sp, #12
    132a:	bc0c      	pop	{r2, r3}
    132c:	4690      	mov	r8, r2
    132e:	4699      	mov	r9, r3
    1330:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1332:	46c0      	nop			; (mov r8, r8)
    1334:	40001800 	.word	0x40001800
    1338:	200000dc 	.word	0x200000dc
    133c:	0000358c 	.word	0x0000358c
    1340:	00001001 	.word	0x00001001
    1344:	0000215d 	.word	0x0000215d
    1348:	00003584 	.word	0x00003584

0000134c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    134c:	07c3      	lsls	r3, r0, #31
    134e:	d50a      	bpl.n	1366 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1350:	4b0b      	ldr	r3, [pc, #44]	; (1380 <_gclk_init_generators_by_fref+0x34>)
    1352:	2280      	movs	r2, #128	; 0x80
    1354:	0052      	lsls	r2, r2, #1
    1356:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1358:	2283      	movs	r2, #131	; 0x83
    135a:	0252      	lsls	r2, r2, #9
    135c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    135e:	001a      	movs	r2, r3
    1360:	7853      	ldrb	r3, [r2, #1]
    1362:	09db      	lsrs	r3, r3, #7
    1364:	d1fc      	bne.n	1360 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1366:	0703      	lsls	r3, r0, #28
    1368:	d509      	bpl.n	137e <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
    136a:	4b05      	ldr	r3, [pc, #20]	; (1380 <_gclk_init_generators_by_fref+0x34>)
    136c:	2204      	movs	r2, #4
    136e:	32ff      	adds	r2, #255	; 0xff
    1370:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1372:	4a04      	ldr	r2, [pc, #16]	; (1384 <_gclk_init_generators_by_fref+0x38>)
    1374:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1376:	001a      	movs	r2, r3
    1378:	7853      	ldrb	r3, [r2, #1]
    137a:	09db      	lsrs	r3, r3, #7
    137c:	d1fc      	bne.n	1378 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    137e:	4770      	bx	lr
    1380:	40000c00 	.word	0x40000c00
    1384:	00210303 	.word	0x00210303

00001388 <_set_sleep_mode>:
/**
 * \brief Set the sleep mode for the device
 */
int32_t _set_sleep_mode(const uint8_t mode)
{
	switch (mode) {
    1388:	2802      	cmp	r0, #2
    138a:	d904      	bls.n	1396 <_set_sleep_mode+0xe>
    138c:	2803      	cmp	r0, #3
    138e:	d00b      	beq.n	13a8 <_set_sleep_mode+0x20>
		return ERR_NONE;
	case 3:
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
		return ERR_NONE;
	default:
		return ERR_INVALID_ARG;
    1390:	200d      	movs	r0, #13
    1392:	4240      	negs	r0, r0
    1394:	e007      	b.n	13a6 <_set_sleep_mode+0x1e>
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    1396:	4a08      	ldr	r2, [pc, #32]	; (13b8 <_set_sleep_mode+0x30>)
    1398:	6913      	ldr	r3, [r2, #16]
    139a:	2104      	movs	r1, #4
    139c:	438b      	bics	r3, r1
    139e:	6113      	str	r3, [r2, #16]
		PM->SLEEP.reg = mode;
    13a0:	4b06      	ldr	r3, [pc, #24]	; (13bc <_set_sleep_mode+0x34>)
    13a2:	7058      	strb	r0, [r3, #1]
		return ERR_NONE;
    13a4:	2000      	movs	r0, #0
	}
}
    13a6:	4770      	bx	lr
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    13a8:	4a03      	ldr	r2, [pc, #12]	; (13b8 <_set_sleep_mode+0x30>)
    13aa:	6913      	ldr	r3, [r2, #16]
    13ac:	2104      	movs	r1, #4
    13ae:	430b      	orrs	r3, r1
    13b0:	6113      	str	r3, [r2, #16]
		return ERR_NONE;
    13b2:	2000      	movs	r0, #0
    13b4:	e7f7      	b.n	13a6 <_set_sleep_mode+0x1e>
    13b6:	46c0      	nop			; (mov r8, r8)
    13b8:	e000ed00 	.word	0xe000ed00
    13bc:	40000400 	.word	0x40000400

000013c0 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    13c0:	4b06      	ldr	r3, [pc, #24]	; (13dc <_pm_init+0x1c>)
    13c2:	7a1a      	ldrb	r2, [r3, #8]
    13c4:	b2d2      	uxtb	r2, r2
    13c6:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    13c8:	7a5a      	ldrb	r2, [r3, #9]
    13ca:	b2d2      	uxtb	r2, r2
    13cc:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    13ce:	7a9a      	ldrb	r2, [r3, #10]
    13d0:	b2d2      	uxtb	r2, r2
    13d2:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    13d4:	7ada      	ldrb	r2, [r3, #11]
    13d6:	b2d2      	uxtb	r2, r2
    13d8:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    13da:	4770      	bx	lr
    13dc:	40000400 	.word	0x40000400

000013e0 <_calendar_register_callback>:

/**
 * \brief Registers callback for the specified callback type
 */
int32_t _calendar_register_callback(struct calendar_dev *const dev, calendar_drv_cb_alarm_t callback)
{
    13e0:	b570      	push	{r4, r5, r6, lr}
    13e2:	0004      	movs	r4, r0
    13e4:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    13e6:	2800      	cmp	r0, #0
    13e8:	d015      	beq.n	1416 <_calendar_register_callback+0x36>
    13ea:	6800      	ldr	r0, [r0, #0]
    13ec:	1e43      	subs	r3, r0, #1
    13ee:	4198      	sbcs	r0, r3
    13f0:	b2c0      	uxtb	r0, r0
    13f2:	2233      	movs	r2, #51	; 0x33
    13f4:	490f      	ldr	r1, [pc, #60]	; (1434 <_calendar_register_callback+0x54>)
    13f6:	4b10      	ldr	r3, [pc, #64]	; (1438 <_calendar_register_callback+0x58>)
    13f8:	4798      	blx	r3

	/* Check callback */
	if (callback != NULL) {
    13fa:	2d00      	cmp	r5, #0
    13fc:	d00d      	beq.n	141a <_calendar_register_callback+0x3a>
		/* register the callback */
		dev->callback = callback;
    13fe:	6065      	str	r5, [r4, #4]
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1400:	4b0e      	ldr	r3, [pc, #56]	; (143c <_calendar_register_callback+0x5c>)
    1402:	2208      	movs	r2, #8
    1404:	21c0      	movs	r1, #192	; 0xc0
    1406:	0049      	lsls	r1, r1, #1
    1408:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    140a:	601a      	str	r2, [r3, #0]
		/* enable RTC_IRQn */
		NVIC_ClearPendingIRQ(RTC_IRQn);
		NVIC_EnableIRQ(RTC_IRQn);

		/* enable cmp */
		hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    140c:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    140e:	3a07      	subs	r2, #7
    1410:	71da      	strb	r2, [r3, #7]
		/* disable RTC_IRQn */
		NVIC_DisableIRQ(RTC_IRQn);
	}

	return ERR_NONE;
}
    1412:	2000      	movs	r0, #0
    1414:	bd70      	pop	{r4, r5, r6, pc}
    1416:	2000      	movs	r0, #0
    1418:	e7eb      	b.n	13f2 <_calendar_register_callback+0x12>
		hri_rtcmode0_clear_INTEN_CMP0_bit(dev->hw);
    141a:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_CMP0;
    141c:	2201      	movs	r2, #1
    141e:	719a      	strb	r2, [r3, #6]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1420:	2108      	movs	r1, #8
    1422:	2380      	movs	r3, #128	; 0x80
    1424:	4a05      	ldr	r2, [pc, #20]	; (143c <_calendar_register_callback+0x5c>)
    1426:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    1428:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    142c:	f3bf 8f6f 	isb	sy
    1430:	e7ef      	b.n	1412 <_calendar_register_callback+0x32>
    1432:	46c0      	nop			; (mov r8, r8)
    1434:	000035a4 	.word	0x000035a4
    1438:	00001001 	.word	0x00001001
    143c:	e000e100 	.word	0xe000e100

00001440 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    1440:	b510      	push	{r4, lr}
    1442:	1e04      	subs	r4, r0, #0
	uint16_t register_value;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1444:	d036      	beq.n	14b4 <_calendar_init+0x74>
    1446:	6800      	ldr	r0, [r0, #0]
    1448:	1e43      	subs	r3, r0, #1
    144a:	4198      	sbcs	r0, r3
    144c:	b2c0      	uxtb	r0, r0
    144e:	2278      	movs	r2, #120	; 0x78
    1450:	4919      	ldr	r1, [pc, #100]	; (14b8 <_calendar_init+0x78>)
    1452:	4b1a      	ldr	r3, [pc, #104]	; (14bc <_calendar_init+0x7c>)
    1454:	4798      	blx	r3

	_rtc_dev = dev;
    1456:	4b1a      	ldr	r3, [pc, #104]	; (14c0 <_calendar_init+0x80>)
    1458:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw);
    145a:	6822      	ldr	r2, [r4, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    145c:	7a93      	ldrb	r3, [r2, #10]
    145e:	09db      	lsrs	r3, r3, #7
    1460:	d1fc      	bne.n	145c <_calendar_init+0x1c>
    1462:	7a93      	ldrb	r3, [r2, #10]
    1464:	09db      	lsrs	r3, r3, #7
    1466:	d1fc      	bne.n	1462 <_calendar_init+0x22>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
    1468:	8813      	ldrh	r3, [r2, #0]
	if (hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw)) {
    146a:	079b      	lsls	r3, r3, #30
    146c:	d50a      	bpl.n	1484 <_calendar_init+0x44>
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    146e:	8813      	ldrh	r3, [r2, #0]
    1470:	2102      	movs	r1, #2
    1472:	438b      	bics	r3, r1
    1474:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1476:	7a93      	ldrb	r3, [r2, #10]
    1478:	09db      	lsrs	r3, r3, #7
    147a:	d1fc      	bne.n	1476 <_calendar_init+0x36>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw);
    147c:	6822      	ldr	r2, [r4, #0]
    147e:	7a93      	ldrb	r3, [r2, #10]
    1480:	09db      	lsrs	r3, r3, #7
    1482:	d1fc      	bne.n	147e <_calendar_init+0x3e>
#endif
	}
	hri_rtcmode0_set_CTRL_SWRST_bit(dev->hw);
    1484:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    1486:	8813      	ldrh	r3, [r2, #0]
    1488:	2101      	movs	r1, #1
    148a:	430b      	orrs	r3, r1
    148c:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    148e:	7a93      	ldrb	r3, [r2, #10]
    1490:	09db      	lsrs	r3, r3, #7
    1492:	d1fc      	bne.n	148e <_calendar_init+0x4e>
	hri_rtcmode0_wait_for_sync(dev->hw);
    1494:	6822      	ldr	r2, [r4, #0]
    1496:	7a93      	ldrb	r3, [r2, #10]
    1498:	09db      	lsrs	r3, r3, #7
    149a:	d1fc      	bne.n	1496 <_calendar_init+0x56>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    149c:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    149e:	7a93      	ldrb	r3, [r2, #10]
    14a0:	09db      	lsrs	r3, r3, #7
    14a2:	d1fc      	bne.n	149e <_calendar_init+0x5e>
	register_value &= (~RTC_MODE0_CTRL_MATCHCLR);

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	/* set continuously clock read update mode */
	hri_rtcmode0_set_READREQ_RCONT_bit(dev->hw);
    14a4:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    14a6:	8853      	ldrh	r3, [r2, #2]
    14a8:	2180      	movs	r1, #128	; 0x80
    14aa:	01c9      	lsls	r1, r1, #7
    14ac:	430b      	orrs	r3, r1
    14ae:	8053      	strh	r3, [r2, #2]
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	return ERR_NONE;
}
    14b0:	2000      	movs	r0, #0
    14b2:	bd10      	pop	{r4, pc}
    14b4:	2000      	movs	r0, #0
    14b6:	e7ca      	b.n	144e <_calendar_init+0xe>
    14b8:	000035a4 	.word	0x000035a4
    14bc:	00001001 	.word	0x00001001
    14c0:	200000e0 	.word	0x200000e0

000014c4 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    14c4:	b510      	push	{r4, lr}
    14c6:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    14c8:	d011      	beq.n	14ee <_calendar_enable+0x2a>
    14ca:	6800      	ldr	r0, [r0, #0]
    14cc:	1e43      	subs	r3, r0, #1
    14ce:	4198      	sbcs	r0, r3
    14d0:	b2c0      	uxtb	r0, r0
    14d2:	22aa      	movs	r2, #170	; 0xaa
    14d4:	4907      	ldr	r1, [pc, #28]	; (14f4 <_calendar_enable+0x30>)
    14d6:	4b08      	ldr	r3, [pc, #32]	; (14f8 <_calendar_enable+0x34>)
    14d8:	4798      	blx	r3

	/* Enable rtc */
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
    14da:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    14dc:	8813      	ldrh	r3, [r2, #0]
    14de:	2102      	movs	r1, #2
    14e0:	430b      	orrs	r3, r1
    14e2:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    14e4:	7a93      	ldrb	r3, [r2, #10]
    14e6:	09db      	lsrs	r3, r3, #7
    14e8:	d1fc      	bne.n	14e4 <_calendar_enable+0x20>

	return ERR_NONE;
}
    14ea:	2000      	movs	r0, #0
    14ec:	bd10      	pop	{r4, pc}
    14ee:	2000      	movs	r0, #0
    14f0:	e7ef      	b.n	14d2 <_calendar_enable+0xe>
    14f2:	46c0      	nop			; (mov r8, r8)
    14f4:	000035a4 	.word	0x000035a4
    14f8:	00001001 	.word	0x00001001

000014fc <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    14fc:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
    14fe:	4b07      	ldr	r3, [pc, #28]	; (151c <RTC_Handler+0x20>)
    1500:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1502:	6823      	ldr	r3, [r4, #0]
    1504:	7a1b      	ldrb	r3, [r3, #8]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
    1506:	07db      	lsls	r3, r3, #31
    1508:	d400      	bmi.n	150c <RTC_Handler+0x10>
}
    150a:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    150c:	0020      	movs	r0, r4
    150e:	6863      	ldr	r3, [r4, #4]
    1510:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1512:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    1514:	2201      	movs	r2, #1
    1516:	721a      	strb	r2, [r3, #8]
}
    1518:	e7f7      	b.n	150a <RTC_Handler+0xe>
    151a:	46c0      	nop			; (mov r8, r8)
    151c:	200000e0 	.word	0x200000e0

00001520 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1520:	b510      	push	{r4, lr}
    1522:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1524:	4b1f      	ldr	r3, [pc, #124]	; (15a4 <_usart_init+0x84>)
    1526:	18c3      	adds	r3, r0, r3
    1528:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    152a:	b2db      	uxtb	r3, r3
    152c:	2b03      	cmp	r3, #3
    152e:	d004      	beq.n	153a <_usart_init+0x1a>
	ASSERT(false);
    1530:	4a1d      	ldr	r2, [pc, #116]	; (15a8 <_usart_init+0x88>)
    1532:	491e      	ldr	r1, [pc, #120]	; (15ac <_usart_init+0x8c>)
    1534:	2000      	movs	r0, #0
    1536:	4b1e      	ldr	r3, [pc, #120]	; (15b0 <_usart_init+0x90>)
    1538:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    153a:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    153c:	07db      	lsls	r3, r3, #31
    153e:	d418      	bmi.n	1572 <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1540:	2203      	movs	r2, #3
    1542:	69e3      	ldr	r3, [r4, #28]
    1544:	421a      	tst	r2, r3
    1546:	d1fc      	bne.n	1542 <_usart_init+0x22>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1548:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    154a:	079b      	lsls	r3, r3, #30
    154c:	d50b      	bpl.n	1566 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    154e:	6823      	ldr	r3, [r4, #0]
    1550:	2202      	movs	r2, #2
    1552:	4393      	bics	r3, r2
    1554:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1556:	3201      	adds	r2, #1
    1558:	69e3      	ldr	r3, [r4, #28]
    155a:	421a      	tst	r2, r3
    155c:	d1fc      	bne.n	1558 <_usart_init+0x38>
    155e:	2202      	movs	r2, #2
    1560:	69e3      	ldr	r3, [r4, #28]
    1562:	421a      	tst	r2, r3
    1564:	d1fc      	bne.n	1560 <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1566:	2305      	movs	r3, #5
    1568:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    156a:	2203      	movs	r2, #3
    156c:	69e3      	ldr	r3, [r4, #28]
    156e:	421a      	tst	r2, r3
    1570:	d1fc      	bne.n	156c <_usart_init+0x4c>
    1572:	2201      	movs	r2, #1
    1574:	69e3      	ldr	r3, [r4, #28]
    1576:	421a      	tst	r2, r3
    1578:	d1fc      	bne.n	1574 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    157a:	4b0e      	ldr	r3, [pc, #56]	; (15b4 <_usart_init+0x94>)
    157c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    157e:	2203      	movs	r2, #3
    1580:	69e3      	ldr	r3, [r4, #28]
    1582:	421a      	tst	r2, r3
    1584:	d1fc      	bne.n	1580 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1586:	23c0      	movs	r3, #192	; 0xc0
    1588:	029b      	lsls	r3, r3, #10
    158a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    158c:	2207      	movs	r2, #7
    158e:	69e3      	ldr	r3, [r4, #28]
    1590:	421a      	tst	r2, r3
    1592:	d1fc      	bne.n	158e <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1594:	4b08      	ldr	r3, [pc, #32]	; (15b8 <_usart_init+0x98>)
    1596:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1598:	2300      	movs	r3, #0
    159a:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    159c:	2230      	movs	r2, #48	; 0x30
    159e:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    15a0:	2000      	movs	r0, #0
    15a2:	bd10      	pop	{r4, pc}
    15a4:	bdfff800 	.word	0xbdfff800
    15a8:	0000025e 	.word	0x0000025e
    15ac:	000035bc 	.word	0x000035bc
    15b0:	00001001 	.word	0x00001001
    15b4:	40100004 	.word	0x40100004
    15b8:	ffffc504 	.word	0xffffc504

000015bc <_usart_async_init>:
{
    15bc:	b570      	push	{r4, r5, r6, lr}
    15be:	0005      	movs	r5, r0
    15c0:	000c      	movs	r4, r1
	ASSERT(device);
    15c2:	1e43      	subs	r3, r0, #1
    15c4:	4198      	sbcs	r0, r3
    15c6:	b2c0      	uxtb	r0, r0
    15c8:	22c4      	movs	r2, #196	; 0xc4
    15ca:	4914      	ldr	r1, [pc, #80]	; (161c <_usart_async_init+0x60>)
    15cc:	4b14      	ldr	r3, [pc, #80]	; (1620 <_usart_async_init+0x64>)
    15ce:	4798      	blx	r3
	init_status = _usart_init(hw);
    15d0:	0020      	movs	r0, r4
    15d2:	4b14      	ldr	r3, [pc, #80]	; (1624 <_usart_async_init+0x68>)
    15d4:	4798      	blx	r3
	if (init_status) {
    15d6:	2800      	cmp	r0, #0
    15d8:	d000      	beq.n	15dc <_usart_async_init+0x20>
}
    15da:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    15dc:	61ac      	str	r4, [r5, #24]
	if (hw == SERCOM3) {
    15de:	4b12      	ldr	r3, [pc, #72]	; (1628 <_usart_async_init+0x6c>)
    15e0:	429c      	cmp	r4, r3
    15e2:	d017      	beq.n	1614 <_usart_async_init+0x58>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    15e4:	4b11      	ldr	r3, [pc, #68]	; (162c <_usart_async_init+0x70>)
    15e6:	469c      	mov	ip, r3
    15e8:	4464      	add	r4, ip
    15ea:	0aa4      	lsrs	r4, r4, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    15ec:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
    15ee:	b2e3      	uxtb	r3, r4
    15f0:	0622      	lsls	r2, r4, #24
    15f2:	d4f2      	bmi.n	15da <_usart_async_init+0x1e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15f4:	221f      	movs	r2, #31
    15f6:	401a      	ands	r2, r3
    15f8:	2301      	movs	r3, #1
    15fa:	4093      	lsls	r3, r2
    15fc:	4a0c      	ldr	r2, [pc, #48]	; (1630 <_usart_async_init+0x74>)
    15fe:	2180      	movs	r1, #128	; 0x80
    1600:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1602:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1606:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    160a:	3101      	adds	r1, #1
    160c:	31ff      	adds	r1, #255	; 0xff
    160e:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1610:	6013      	str	r3, [r2, #0]
    1612:	e7e2      	b.n	15da <_usart_async_init+0x1e>
		_sercom3_dev = (struct _usart_async_device *)dev;
    1614:	4b07      	ldr	r3, [pc, #28]	; (1634 <_usart_async_init+0x78>)
    1616:	601d      	str	r5, [r3, #0]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1618:	230c      	movs	r3, #12
    161a:	e7eb      	b.n	15f4 <_usart_async_init+0x38>
    161c:	000035bc 	.word	0x000035bc
    1620:	00001001 	.word	0x00001001
    1624:	00001521 	.word	0x00001521
    1628:	42001400 	.word	0x42001400
    162c:	bdfff800 	.word	0xbdfff800
    1630:	e000e100 	.word	0xe000e100
    1634:	200000e4 	.word	0x200000e4

00001638 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1638:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    163a:	6813      	ldr	r3, [r2, #0]
    163c:	2102      	movs	r1, #2
    163e:	430b      	orrs	r3, r1
    1640:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1642:	3101      	adds	r1, #1
    1644:	69d3      	ldr	r3, [r2, #28]
    1646:	4219      	tst	r1, r3
    1648:	d1fc      	bne.n	1644 <_usart_async_enable+0xc>
}
    164a:	4770      	bx	lr

0000164c <_usart_async_disable>:
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    164c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    164e:	6813      	ldr	r3, [r2, #0]
    1650:	2102      	movs	r1, #2
    1652:	438b      	bics	r3, r1
    1654:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1656:	3101      	adds	r1, #1
    1658:	69d3      	ldr	r3, [r2, #28]
    165a:	4219      	tst	r1, r3
    165c:	d1fc      	bne.n	1658 <_usart_async_disable+0xc>
}
    165e:	4770      	bx	lr

00001660 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1660:	6983      	ldr	r3, [r0, #24]
    1662:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1664:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1666:	4770      	bx	lr

00001668 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1668:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    166a:	2201      	movs	r2, #1
    166c:	759a      	strb	r2, [r3, #22]
}
    166e:	4770      	bx	lr

00001670 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1670:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1672:	2202      	movs	r2, #2
    1674:	759a      	strb	r2, [r3, #22]
}
    1676:	4770      	bx	lr

00001678 <_usart_async_set_irq_state>:
{
    1678:	b570      	push	{r4, r5, r6, lr}
    167a:	0004      	movs	r4, r0
    167c:	000d      	movs	r5, r1
    167e:	0016      	movs	r6, r2
	ASSERT(device);
    1680:	1e43      	subs	r3, r0, #1
    1682:	4198      	sbcs	r0, r3
    1684:	b2c0      	uxtb	r0, r0
    1686:	4a16      	ldr	r2, [pc, #88]	; (16e0 <_usart_async_set_irq_state+0x68>)
    1688:	4916      	ldr	r1, [pc, #88]	; (16e4 <_usart_async_set_irq_state+0x6c>)
    168a:	4b17      	ldr	r3, [pc, #92]	; (16e8 <_usart_async_set_irq_state+0x70>)
    168c:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    168e:	2302      	movs	r3, #2
    1690:	002a      	movs	r2, r5
    1692:	439a      	bics	r2, r3
    1694:	d10e      	bne.n	16b4 <_usart_async_set_irq_state+0x3c>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1696:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1698:	2e00      	cmp	r6, #0
    169a:	d105      	bne.n	16a8 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    169c:	2201      	movs	r2, #1
    169e:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    16a0:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    16a2:	3201      	adds	r2, #1
    16a4:	751a      	strb	r2, [r3, #20]
}
    16a6:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    16a8:	2201      	movs	r2, #1
    16aa:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    16ac:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    16ae:	3201      	adds	r2, #1
    16b0:	759a      	strb	r2, [r3, #22]
    16b2:	e7f8      	b.n	16a6 <_usart_async_set_irq_state+0x2e>
	} else if (USART_ASYNC_RX_DONE == type) {
    16b4:	2d01      	cmp	r5, #1
    16b6:	d007      	beq.n	16c8 <_usart_async_set_irq_state+0x50>
	} else if (USART_ASYNC_ERROR == type) {
    16b8:	2d03      	cmp	r5, #3
    16ba:	d1f4      	bne.n	16a6 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    16bc:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    16be:	2e00      	cmp	r6, #0
    16c0:	d00b      	beq.n	16da <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    16c2:	2280      	movs	r2, #128	; 0x80
    16c4:	759a      	strb	r2, [r3, #22]
}
    16c6:	e7ee      	b.n	16a6 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    16c8:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    16ca:	2e00      	cmp	r6, #0
    16cc:	d102      	bne.n	16d4 <_usart_async_set_irq_state+0x5c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    16ce:	2204      	movs	r2, #4
    16d0:	751a      	strb	r2, [r3, #20]
    16d2:	e7e8      	b.n	16a6 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    16d4:	2204      	movs	r2, #4
    16d6:	759a      	strb	r2, [r3, #22]
    16d8:	e7e5      	b.n	16a6 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    16da:	2280      	movs	r2, #128	; 0x80
    16dc:	751a      	strb	r2, [r3, #20]
    16de:	e7e2      	b.n	16a6 <_usart_async_set_irq_state+0x2e>
    16e0:	0000021e 	.word	0x0000021e
    16e4:	000035bc 	.word	0x000035bc
    16e8:	00001001 	.word	0x00001001

000016ec <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    16ec:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    16ee:	4b19      	ldr	r3, [pc, #100]	; (1754 <SERCOM3_Handler+0x68>)
    16f0:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
    16f2:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    16f4:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    16f6:	07db      	lsls	r3, r3, #31
    16f8:	d502      	bpl.n	1700 <SERCOM3_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    16fa:	7da3      	ldrb	r3, [r4, #22]
    16fc:	07db      	lsls	r3, r3, #31
    16fe:	d40f      	bmi.n	1720 <SERCOM3_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1700:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1702:	079b      	lsls	r3, r3, #30
    1704:	d502      	bpl.n	170c <SERCOM3_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1706:	7da3      	ldrb	r3, [r4, #22]
    1708:	079b      	lsls	r3, r3, #30
    170a:	d40e      	bmi.n	172a <SERCOM3_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    170c:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    170e:	075b      	lsls	r3, r3, #29
    1710:	d515      	bpl.n	173e <SERCOM3_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    1712:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    1714:	2337      	movs	r3, #55	; 0x37
    1716:	421a      	tst	r2, r3
    1718:	d00c      	beq.n	1734 <SERCOM3_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    171a:	3308      	adds	r3, #8
    171c:	8363      	strh	r3, [r4, #26]
}
    171e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1720:	2301      	movs	r3, #1
    1722:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    1724:	6803      	ldr	r3, [r0, #0]
    1726:	4798      	blx	r3
    1728:	e7f9      	b.n	171e <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    172a:	2302      	movs	r3, #2
    172c:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    172e:	6883      	ldr	r3, [r0, #8]
    1730:	4798      	blx	r3
    1732:	e7f4      	b.n	171e <SERCOM3_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
    1734:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1736:	b2c9      	uxtb	r1, r1
    1738:	6843      	ldr	r3, [r0, #4]
    173a:	4798      	blx	r3
    173c:	e7ef      	b.n	171e <SERCOM3_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    173e:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1740:	09db      	lsrs	r3, r3, #7
    1742:	d0ec      	beq.n	171e <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1744:	2380      	movs	r3, #128	; 0x80
    1746:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    1748:	68c3      	ldr	r3, [r0, #12]
    174a:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    174c:	8b63      	ldrh	r3, [r4, #26]
    174e:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1750:	8363      	strh	r3, [r4, #26]
}
    1752:	e7e4      	b.n	171e <SERCOM3_Handler+0x32>
    1754:	200000e4 	.word	0x200000e4

00001758 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1758:	4b0e      	ldr	r3, [pc, #56]	; (1794 <_sysctrl_init_sources+0x3c>)
    175a:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    175c:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    175e:	480e      	ldr	r0, [pc, #56]	; (1798 <_sysctrl_init_sources+0x40>)
    1760:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1762:	0f92      	lsrs	r2, r2, #30
    1764:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    1766:	2002      	movs	r0, #2
    1768:	4302      	orrs	r2, r0
    176a:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    176c:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    176e:	699a      	ldr	r2, [r3, #24]
    1770:	4302      	orrs	r2, r0
    1772:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1774:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1776:	211f      	movs	r1, #31
    1778:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    177a:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    177c:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    177e:	2208      	movs	r2, #8
    1780:	68cb      	ldr	r3, [r1, #12]
    1782:	421a      	tst	r2, r3
    1784:	d0fc      	beq.n	1780 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1786:	4a03      	ldr	r2, [pc, #12]	; (1794 <_sysctrl_init_sources+0x3c>)
    1788:	6a13      	ldr	r3, [r2, #32]
    178a:	2180      	movs	r1, #128	; 0x80
    178c:	430b      	orrs	r3, r1
    178e:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1790:	4770      	bx	lr
    1792:	46c0      	nop			; (mov r8, r8)
    1794:	40000800 	.word	0x40000800
    1798:	0fff0000 	.word	0x0fff0000

0000179c <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    179c:	4a02      	ldr	r2, [pc, #8]	; (17a8 <_sysctrl_init_referenced_generators+0xc>)
    179e:	6993      	ldr	r3, [r2, #24]
    17a0:	2102      	movs	r1, #2
    17a2:	438b      	bics	r3, r1
    17a4:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    17a6:	4770      	bx	lr
    17a8:	40000800 	.word	0x40000800

000017ac <idle_task_fn>:
}

// =============================================================================
// local (static) code

static void *idle_task_fn(void *ctx, void *arg) {
    17ac:	b510      	push	{r4, lr}
  // ctx is unused in idle task
  // scheduler is passed as the second argument.
  mu_sched_t *sched = (mu_sched_t *)arg;
  mu_sched_event_t *next_event = mu_sched_get_next_event(sched);
    17ae:	0008      	movs	r0, r1
    17b0:	4b0c      	ldr	r3, [pc, #48]	; (17e4 <idle_task_fn+0x38>)
    17b2:	4798      	blx	r3
    17b4:	0004      	movs	r4, r0
  // If you have peripherals that are active or other factors that should
  // prevent the processor from going to sleep, you would check for it here
  // and return false to inhibit going to sleep.

  // In this case, only allow sleep if in low power mode.
  return mu_task_demo_is_low_power_mode();
    17b6:	4b0c      	ldr	r3, [pc, #48]	; (17e8 <idle_task_fn+0x3c>)
    17b8:	4798      	blx	r3
  if (is_ready_to_sleep()) {
    17ba:	2800      	cmp	r0, #0
    17bc:	d101      	bne.n	17c2 <idle_task_fn+0x16>
}
    17be:	2000      	movs	r0, #0
    17c0:	bd10      	pop	{r4, pc}
}

static void will_sleep(void) {
  // If you have any last-moment cleanup that needs to be done before the
  // processor goes to sleep, you would do it here.
  usart_async_disable(&USART_0);
    17c2:	480a      	ldr	r0, [pc, #40]	; (17ec <idle_task_fn+0x40>)
    17c4:	4b0a      	ldr	r3, [pc, #40]	; (17f0 <idle_task_fn+0x44>)
    17c6:	4798      	blx	r3
  asm("nop");
    17c8:	46c0      	nop			; (mov r8, r8)
    if (next_event) {
    17ca:	2c00      	cmp	r4, #0
    17cc:	d007      	beq.n	17de <idle_task_fn+0x32>
      mu_vm_sleep_until(next_event->time);
    17ce:	6820      	ldr	r0, [r4, #0]
    17d0:	4b08      	ldr	r3, [pc, #32]	; (17f4 <idle_task_fn+0x48>)
    17d2:	4798      	blx	r3
}

static void did_wake(void) {
  // If you have anything that needs to be done when the processor wakes from
  // sleep, you would do it here.
  usart_async_enable(&USART_0);
    17d4:	4805      	ldr	r0, [pc, #20]	; (17ec <idle_task_fn+0x40>)
    17d6:	4b08      	ldr	r3, [pc, #32]	; (17f8 <idle_task_fn+0x4c>)
    17d8:	4798      	blx	r3
  asm("nop");
    17da:	46c0      	nop			; (mov r8, r8)
    17dc:	e7ef      	b.n	17be <idle_task_fn+0x12>
      mu_vm_sleep();
    17de:	4b07      	ldr	r3, [pc, #28]	; (17fc <idle_task_fn+0x50>)
    17e0:	4798      	blx	r3
    17e2:	e7f7      	b.n	17d4 <idle_task_fn+0x28>
    17e4:	00000209 	.word	0x00000209
    17e8:	00001a81 	.word	0x00001a81
    17ec:	20000690 	.word	0x20000690
    17f0:	00000fd5 	.word	0x00000fd5
    17f4:	00000915 	.word	0x00000915
    17f8:	00000fa9 	.word	0x00000fa9
    17fc:	00000949 	.word	0x00000949

00001800 <idle_task_init>:
mu_task_t *idle_task_init(mu_task_t *idle_task, mu_sched_t *sched) {
    1800:	b570      	push	{r4, r5, r6, lr}
    1802:	0004      	movs	r4, r0
    1804:	000d      	movs	r5, r1
  mu_task_init(idle_task, idle_task_fn, NULL, "Sleeping Idle");
    1806:	4b05      	ldr	r3, [pc, #20]	; (181c <idle_task_init+0x1c>)
    1808:	2200      	movs	r2, #0
    180a:	4905      	ldr	r1, [pc, #20]	; (1820 <idle_task_init+0x20>)
    180c:	4e05      	ldr	r6, [pc, #20]	; (1824 <idle_task_init+0x24>)
    180e:	47b0      	blx	r6
  mu_sched_set_idle_task(sched, idle_task);
    1810:	0021      	movs	r1, r4
    1812:	0028      	movs	r0, r5
    1814:	4b04      	ldr	r3, [pc, #16]	; (1828 <idle_task_init+0x28>)
    1816:	4798      	blx	r3
}
    1818:	0020      	movs	r0, r4
    181a:	bd70      	pop	{r4, r5, r6, pc}
    181c:	000035d8 	.word	0x000035d8
    1820:	000017ad 	.word	0x000017ad
    1824:	000005a9 	.word	0x000005a9
    1828:	000001fd 	.word	0x000001fd

0000182c <kbd_cb>:
}

// kbd_cb is triggered when the UART receives a character and generates an
// interrupt.  From interrupt level, schedule the kbd task upon leaving
// interrupt level.
static void kbd_cb(void *context) {
    182c:	b510      	push	{r4, lr}
  kbd_ctx_t *kbd_ctx = (kbd_ctx_t *)context;
  mu_task_t *task = kbd_ctx->task;
  mu_sched_t *sched = kbd_ctx->sched;
  mu_sched_task_from_isr(sched, task);
    182e:	6801      	ldr	r1, [r0, #0]
    1830:	6840      	ldr	r0, [r0, #4]
    1832:	4b01      	ldr	r3, [pc, #4]	; (1838 <kbd_cb+0xc>)
    1834:	4798      	blx	r3
}
    1836:	bd10      	pop	{r4, pc}
    1838:	0000037d 	.word	0x0000037d

0000183c <kbd_task_fn>:
static void *kbd_task_fn(void *ctx, void *arg) {
    183c:	b510      	push	{r4, lr}
  uint8_t ch = mu_vm_serial_read();
    183e:	4b0d      	ldr	r3, [pc, #52]	; (1874 <kbd_task_fn+0x38>)
    1840:	4798      	blx	r3
  switch (ch) {
    1842:	3842      	subs	r0, #66	; 0x42
    1844:	b2c3      	uxtb	r3, r0
    1846:	2b2e      	cmp	r3, #46	; 0x2e
    1848:	d805      	bhi.n	1856 <kbd_task_fn+0x1a>
    184a:	0098      	lsls	r0, r3, #2
    184c:	4b0a      	ldr	r3, [pc, #40]	; (1878 <kbd_task_fn+0x3c>)
    184e:	581b      	ldr	r3, [r3, r0]
    1850:	469f      	mov	pc, r3
    mu_task_demo_start_led_task();
    1852:	4b0a      	ldr	r3, [pc, #40]	; (187c <kbd_task_fn+0x40>)
    1854:	4798      	blx	r3
}
    1856:	2000      	movs	r0, #0
    1858:	bd10      	pop	{r4, pc}
    mu_task_demo_stop_led_task();
    185a:	4b09      	ldr	r3, [pc, #36]	; (1880 <kbd_task_fn+0x44>)
    185c:	4798      	blx	r3
    break;
    185e:	e7fa      	b.n	1856 <kbd_task_fn+0x1a>
    mu_task_demo_start_screen_update_task();
    1860:	4b08      	ldr	r3, [pc, #32]	; (1884 <kbd_task_fn+0x48>)
    1862:	4798      	blx	r3
    break;
    1864:	e7f7      	b.n	1856 <kbd_task_fn+0x1a>
    mu_task_demo_stop_screen_update_task();
    1866:	4b08      	ldr	r3, [pc, #32]	; (1888 <kbd_task_fn+0x4c>)
    1868:	4798      	blx	r3
    break;
    186a:	e7f4      	b.n	1856 <kbd_task_fn+0x1a>
    mu_task_demo_set_low_power_mode(true);
    186c:	2001      	movs	r0, #1
    186e:	4b07      	ldr	r3, [pc, #28]	; (188c <kbd_task_fn+0x50>)
    1870:	4798      	blx	r3
    break;
    1872:	e7f0      	b.n	1856 <kbd_task_fn+0x1a>
    1874:	00000895 	.word	0x00000895
    1878:	000035e8 	.word	0x000035e8
    187c:	000018fd 	.word	0x000018fd
    1880:	000018e5 	.word	0x000018e5
    1884:	00001935 	.word	0x00001935
    1888:	0000191d 	.word	0x0000191d
    188c:	00001a69 	.word	0x00001a69

00001890 <kbd_task_init>:
mu_task_t *kbd_task_init(mu_task_t *kbd_task, kbd_ctx_t *kbd_ctx) {
    1890:	b570      	push	{r4, r5, r6, lr}
    1892:	0005      	movs	r5, r0
    1894:	000c      	movs	r4, r1
  kbd_ctx->task = kbd_task;
    1896:	6020      	str	r0, [r4, #0]
  kbd_ctx->sched = mu_task_demo_get_scheduler();
    1898:	4b07      	ldr	r3, [pc, #28]	; (18b8 <kbd_task_init+0x28>)
    189a:	4798      	blx	r3
    189c:	6060      	str	r0, [r4, #4]
  mu_task_init(kbd_task, kbd_task_fn, kbd_ctx, "Keyboard Task");
    189e:	4b07      	ldr	r3, [pc, #28]	; (18bc <kbd_task_init+0x2c>)
    18a0:	0022      	movs	r2, r4
    18a2:	4907      	ldr	r1, [pc, #28]	; (18c0 <kbd_task_init+0x30>)
    18a4:	0028      	movs	r0, r5
    18a6:	4e07      	ldr	r6, [pc, #28]	; (18c4 <kbd_task_init+0x34>)
    18a8:	47b0      	blx	r6
  mu_vm_serial_set_read_cb(kbd_cb, kbd_ctx);
    18aa:	0021      	movs	r1, r4
    18ac:	4806      	ldr	r0, [pc, #24]	; (18c8 <kbd_task_init+0x38>)
    18ae:	4b07      	ldr	r3, [pc, #28]	; (18cc <kbd_task_init+0x3c>)
    18b0:	4798      	blx	r3
}
    18b2:	0028      	movs	r0, r5
    18b4:	bd70      	pop	{r4, r5, r6, pc}
    18b6:	46c0      	nop			; (mov r8, r8)
    18b8:	00001a99 	.word	0x00001a99
    18bc:	000036a4 	.word	0x000036a4
    18c0:	0000183d 	.word	0x0000183d
    18c4:	000005a9 	.word	0x000005a9
    18c8:	0000182d 	.word	0x0000182d
    18cc:	000008e5 	.word	0x000008e5

000018d0 <mu_task_demo_step>:
  // initialize the screen buffer
  mu_str_init(&s_screen_str, (mu_str_data_t *)s_screen_buf, SCREEN_BUFFER_SIZE);
  mu_substr_init(&s_screen_buffer, &s_screen_str);
}

void mu_task_demo_step() {
    18d0:	b510      	push	{r4, lr}
  // called repeatedly from main(): run the scheduler
  mu_sched_step(&s_sched);
    18d2:	4802      	ldr	r0, [pc, #8]	; (18dc <mu_task_demo_step+0xc>)
    18d4:	4b02      	ldr	r3, [pc, #8]	; (18e0 <mu_task_demo_step+0x10>)
    18d6:	4798      	blx	r3
}
    18d8:	bd10      	pop	{r4, pc}
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	200000e8 	.word	0x200000e8
    18e0:	00000225 	.word	0x00000225

000018e4 <mu_task_demo_stop_led_task>:
void mu_task_demo_start_led_task(void) {
  mu_task_demo_stop_led_task();  // stop if already running
  mu_sched_task_now(&s_sched, &s_tasks[LED_TASK_IDX]);
}

void mu_task_demo_stop_led_task(void) {
    18e4:	b510      	push	{r4, lr}
  mu_sched_remove_task(&s_sched, &s_tasks[LED_TASK_IDX]);
    18e6:	4803      	ldr	r0, [pc, #12]	; (18f4 <mu_task_demo_stop_led_task+0x10>)
    18e8:	0001      	movs	r1, r0
    18ea:	3120      	adds	r1, #32
    18ec:	4b02      	ldr	r3, [pc, #8]	; (18f8 <mu_task_demo_stop_led_task+0x14>)
    18ee:	4798      	blx	r3
}
    18f0:	bd10      	pop	{r4, pc}
    18f2:	46c0      	nop			; (mov r8, r8)
    18f4:	200000e8 	.word	0x200000e8
    18f8:	000002b1 	.word	0x000002b1

000018fc <mu_task_demo_start_led_task>:
void mu_task_demo_start_led_task(void) {
    18fc:	b510      	push	{r4, lr}
  mu_task_demo_stop_led_task();  // stop if already running
    18fe:	4b04      	ldr	r3, [pc, #16]	; (1910 <mu_task_demo_start_led_task+0x14>)
    1900:	4798      	blx	r3
  mu_sched_task_now(&s_sched, &s_tasks[LED_TASK_IDX]);
    1902:	4804      	ldr	r0, [pc, #16]	; (1914 <mu_task_demo_start_led_task+0x18>)
    1904:	0001      	movs	r1, r0
    1906:	3120      	adds	r1, #32
    1908:	4b03      	ldr	r3, [pc, #12]	; (1918 <mu_task_demo_start_led_task+0x1c>)
    190a:	4798      	blx	r3
}
    190c:	bd10      	pop	{r4, pc}
    190e:	46c0      	nop			; (mov r8, r8)
    1910:	000018e5 	.word	0x000018e5
    1914:	200000e8 	.word	0x200000e8
    1918:	00000305 	.word	0x00000305

0000191c <mu_task_demo_stop_screen_update_task>:
void mu_task_demo_start_screen_update_task(void) {
  mu_task_demo_stop_screen_update_task();
  mu_sched_task_now(&s_sched, &s_tasks[SCREEN_UPDATE_TASK_IDX]);
}

void mu_task_demo_stop_screen_update_task(void) {
    191c:	b510      	push	{r4, lr}
  mu_sched_remove_task(&s_sched, &s_tasks[SCREEN_UPDATE_TASK_IDX]);
    191e:	4803      	ldr	r0, [pc, #12]	; (192c <mu_task_demo_stop_screen_update_task+0x10>)
    1920:	0001      	movs	r1, r0
    1922:	3150      	adds	r1, #80	; 0x50
    1924:	4b02      	ldr	r3, [pc, #8]	; (1930 <mu_task_demo_stop_screen_update_task+0x14>)
    1926:	4798      	blx	r3
}
    1928:	bd10      	pop	{r4, pc}
    192a:	46c0      	nop			; (mov r8, r8)
    192c:	200000e8 	.word	0x200000e8
    1930:	000002b1 	.word	0x000002b1

00001934 <mu_task_demo_start_screen_update_task>:
void mu_task_demo_start_screen_update_task(void) {
    1934:	b510      	push	{r4, lr}
  mu_task_demo_stop_screen_update_task();
    1936:	4b04      	ldr	r3, [pc, #16]	; (1948 <mu_task_demo_start_screen_update_task+0x14>)
    1938:	4798      	blx	r3
  mu_sched_task_now(&s_sched, &s_tasks[SCREEN_UPDATE_TASK_IDX]);
    193a:	4804      	ldr	r0, [pc, #16]	; (194c <mu_task_demo_start_screen_update_task+0x18>)
    193c:	0001      	movs	r1, r0
    193e:	3150      	adds	r1, #80	; 0x50
    1940:	4b03      	ldr	r3, [pc, #12]	; (1950 <mu_task_demo_start_screen_update_task+0x1c>)
    1942:	4798      	blx	r3
}
    1944:	bd10      	pop	{r4, pc}
    1946:	46c0      	nop			; (mov r8, r8)
    1948:	0000191d 	.word	0x0000191d
    194c:	200000e8 	.word	0x200000e8
    1950:	00000305 	.word	0x00000305

00001954 <mu_task_demo_init>:
void mu_task_demo_init() {
    1954:	b570      	push	{r4, r5, r6, lr}
  mu_vm_init();
    1956:	4b2d      	ldr	r3, [pc, #180]	; (1a0c <mu_task_demo_init+0xb8>)
    1958:	4798      	blx	r3
  printf("\r\n# ===========\n");
    195a:	482d      	ldr	r0, [pc, #180]	; (1a10 <mu_task_demo_init+0xbc>)
    195c:	4b2d      	ldr	r3, [pc, #180]	; (1a14 <mu_task_demo_init+0xc0>)
    195e:	4798      	blx	r3
  printf("# mu_task_demo %s: see https://github.com/rdpoor/mulib\r\n",
    1960:	492d      	ldr	r1, [pc, #180]	; (1a18 <mu_task_demo_init+0xc4>)
    1962:	482e      	ldr	r0, [pc, #184]	; (1a1c <mu_task_demo_init+0xc8>)
    1964:	4b2e      	ldr	r3, [pc, #184]	; (1a20 <mu_task_demo_init+0xcc>)
    1966:	4798      	blx	r3
  mu_spscq_init(&s_isr_queue, s_isr_queue_items, ISR_Q_CAPACITY);
    1968:	4c2e      	ldr	r4, [pc, #184]	; (1a24 <mu_task_demo_init+0xd0>)
    196a:	0021      	movs	r1, r4
    196c:	3130      	adds	r1, #48	; 0x30
    196e:	0026      	movs	r6, r4
    1970:	3650      	adds	r6, #80	; 0x50
    1972:	2208      	movs	r2, #8
    1974:	0030      	movs	r0, r6
    1976:	4b2c      	ldr	r3, [pc, #176]	; (1a28 <mu_task_demo_init+0xd4>)
    1978:	4798      	blx	r3
  mu_sched_init(&s_sched, s_event_queue, EVENT_QUEUE_CAPACITY, &s_isr_queue);
    197a:	0021      	movs	r1, r4
    197c:	315c      	adds	r1, #92	; 0x5c
    197e:	4d2b      	ldr	r5, [pc, #172]	; (1a2c <mu_task_demo_init+0xd8>)
    1980:	0033      	movs	r3, r6
    1982:	220a      	movs	r2, #10
    1984:	0028      	movs	r0, r5
    1986:	4c2a      	ldr	r4, [pc, #168]	; (1a30 <mu_task_demo_init+0xdc>)
    1988:	47a0      	blx	r4
  led_task_init(&s_tasks[LED_TASK_IDX], &s_led_ctx);
    198a:	4c2a      	ldr	r4, [pc, #168]	; (1a34 <mu_task_demo_init+0xe0>)
    198c:	0021      	movs	r1, r4
    198e:	312c      	adds	r1, #44	; 0x2c
    1990:	0028      	movs	r0, r5
    1992:	3020      	adds	r0, #32
    1994:	4b28      	ldr	r3, [pc, #160]	; (1a38 <mu_task_demo_init+0xe4>)
    1996:	4798      	blx	r3
  button_task_init(&s_tasks[BUTTON_TASK_IDX], &s_button_ctx);
    1998:	0021      	movs	r1, r4
    199a:	3130      	adds	r1, #48	; 0x30
    199c:	0028      	movs	r0, r5
    199e:	3038      	adds	r0, #56	; 0x38
    19a0:	4b26      	ldr	r3, [pc, #152]	; (1a3c <mu_task_demo_init+0xe8>)
    19a2:	4798      	blx	r3
  screen_update_task_init(&s_tasks[SCREEN_UPDATE_TASK_IDX],
    19a4:	0021      	movs	r1, r4
    19a6:	3138      	adds	r1, #56	; 0x38
    19a8:	0028      	movs	r0, r5
    19aa:	3050      	adds	r0, #80	; 0x50
    19ac:	4b24      	ldr	r3, [pc, #144]	; (1a40 <mu_task_demo_init+0xec>)
    19ae:	4798      	blx	r3
  screen_redraw_task_init(&s_tasks[SCREEN_REDRAW_TASK_IDX],
    19b0:	0021      	movs	r1, r4
    19b2:	3150      	adds	r1, #80	; 0x50
    19b4:	0028      	movs	r0, r5
    19b6:	3068      	adds	r0, #104	; 0x68
    19b8:	4b22      	ldr	r3, [pc, #136]	; (1a44 <mu_task_demo_init+0xf0>)
    19ba:	4798      	blx	r3
  kbd_task_init(&s_tasks[KBD_TASK_IDX], &s_kbd_ctx);
    19bc:	0021      	movs	r1, r4
    19be:	315c      	adds	r1, #92	; 0x5c
    19c0:	0028      	movs	r0, r5
    19c2:	3080      	adds	r0, #128	; 0x80
    19c4:	4b20      	ldr	r3, [pc, #128]	; (1a48 <mu_task_demo_init+0xf4>)
    19c6:	4798      	blx	r3
  idle_task_init(&s_tasks[IDLE_TASK_IDX], &s_sched);
    19c8:	002e      	movs	r6, r5
    19ca:	3698      	adds	r6, #152	; 0x98
    19cc:	0029      	movs	r1, r5
    19ce:	0030      	movs	r0, r6
    19d0:	4b1e      	ldr	r3, [pc, #120]	; (1a4c <mu_task_demo_init+0xf8>)
    19d2:	4798      	blx	r3
  mu_sched_set_idle_task(&s_sched, &s_tasks[IDLE_TASK_IDX]);
    19d4:	0031      	movs	r1, r6
    19d6:	0028      	movs	r0, r5
    19d8:	4b1d      	ldr	r3, [pc, #116]	; (1a50 <mu_task_demo_init+0xfc>)
    19da:	4798      	blx	r3
  mu_task_demo_start_led_task();
    19dc:	4b1d      	ldr	r3, [pc, #116]	; (1a54 <mu_task_demo_init+0x100>)
    19de:	4798      	blx	r3
  mu_task_demo_start_screen_update_task();
    19e0:	4d1d      	ldr	r5, [pc, #116]	; (1a58 <mu_task_demo_init+0x104>)
    19e2:	47a8      	blx	r5

void mu_task_demo_set_low_power_mode(bool low_power) {
  s_is_low_power_mode = low_power;
    19e4:	2200      	movs	r2, #0
    19e6:	2364      	movs	r3, #100	; 0x64
    19e8:	54e2      	strb	r2, [r4, r3]
  mu_task_demo_start_screen_update_task(); // force immediate redraw
    19ea:	47a8      	blx	r5
  mu_str_init(&s_screen_str, (mu_str_data_t *)s_screen_buf, SCREEN_BUFFER_SIZE);
    19ec:	0021      	movs	r1, r4
    19ee:	3168      	adds	r1, #104	; 0x68
    19f0:	4c1a      	ldr	r4, [pc, #104]	; (1a5c <mu_task_demo_init+0x108>)
    19f2:	0025      	movs	r5, r4
    19f4:	3568      	adds	r5, #104	; 0x68
    19f6:	2280      	movs	r2, #128	; 0x80
    19f8:	00d2      	lsls	r2, r2, #3
    19fa:	0028      	movs	r0, r5
    19fc:	4b18      	ldr	r3, [pc, #96]	; (1a60 <mu_task_demo_init+0x10c>)
    19fe:	4798      	blx	r3
  mu_substr_init(&s_screen_buffer, &s_screen_str);
    1a00:	0020      	movs	r0, r4
    1a02:	3070      	adds	r0, #112	; 0x70
    1a04:	0029      	movs	r1, r5
    1a06:	4b17      	ldr	r3, [pc, #92]	; (1a64 <mu_task_demo_init+0x110>)
    1a08:	4798      	blx	r3
}
    1a0a:	bd70      	pop	{r4, r5, r6, pc}
    1a0c:	000006cd 	.word	0x000006cd
    1a10:	000036b4 	.word	0x000036b4
    1a14:	00002335 	.word	0x00002335
    1a18:	000036c4 	.word	0x000036c4
    1a1c:	000036cc 	.word	0x000036cc
    1a20:	00002241 	.word	0x00002241
    1a24:	20000168 	.word	0x20000168
    1a28:	00000401 	.word	0x00000401
    1a2c:	200000e8 	.word	0x200000e8
    1a30:	000001c1 	.word	0x000001c1
    1a34:	200001e8 	.word	0x200001e8
    1a38:	00001b79 	.word	0x00001b79
    1a3c:	00001ae5 	.word	0x00001ae5
    1a40:	00001e19 	.word	0x00001e19
    1a44:	00001cad 	.word	0x00001cad
    1a48:	00001891 	.word	0x00001891
    1a4c:	00001801 	.word	0x00001801
    1a50:	000001fd 	.word	0x000001fd
    1a54:	000018fd 	.word	0x000018fd
    1a58:	00001935 	.word	0x00001935
    1a5c:	200005e8 	.word	0x200005e8
    1a60:	00000497 	.word	0x00000497
    1a64:	000004b9 	.word	0x000004b9

00001a68 <mu_task_demo_set_low_power_mode>:
void mu_task_demo_set_low_power_mode(bool low_power) {
    1a68:	b510      	push	{r4, lr}
  s_is_low_power_mode = low_power;
    1a6a:	2364      	movs	r3, #100	; 0x64
    1a6c:	4a02      	ldr	r2, [pc, #8]	; (1a78 <mu_task_demo_set_low_power_mode+0x10>)
    1a6e:	54d0      	strb	r0, [r2, r3]
  mu_task_demo_start_screen_update_task(); // force immediate redraw
    1a70:	4b02      	ldr	r3, [pc, #8]	; (1a7c <mu_task_demo_set_low_power_mode+0x14>)
    1a72:	4798      	blx	r3
}
    1a74:	bd10      	pop	{r4, pc}
    1a76:	46c0      	nop			; (mov r8, r8)
    1a78:	200001e8 	.word	0x200001e8
    1a7c:	00001935 	.word	0x00001935

00001a80 <mu_task_demo_is_low_power_mode>:

bool mu_task_demo_is_low_power_mode(void) {
  return s_is_low_power_mode;
    1a80:	2364      	movs	r3, #100	; 0x64
    1a82:	4a01      	ldr	r2, [pc, #4]	; (1a88 <mu_task_demo_is_low_power_mode+0x8>)
    1a84:	5cd0      	ldrb	r0, [r2, r3]
}
    1a86:	4770      	bx	lr
    1a88:	200001e8 	.word	0x200001e8

00001a8c <mu_task_demo_get_screen_buffer>:

mu_substr_t *mu_task_demo_get_screen_buffer(void) {
  return &s_screen_buffer;
    1a8c:	4801      	ldr	r0, [pc, #4]	; (1a94 <mu_task_demo_get_screen_buffer+0x8>)
}
    1a8e:	3070      	adds	r0, #112	; 0x70
    1a90:	4770      	bx	lr
    1a92:	46c0      	nop			; (mov r8, r8)
    1a94:	200005e8 	.word	0x200005e8

00001a98 <mu_task_demo_get_scheduler>:

mu_sched_t *mu_task_demo_get_scheduler(void) {
  return &s_sched;
}
    1a98:	4800      	ldr	r0, [pc, #0]	; (1a9c <mu_task_demo_get_scheduler+0x4>)
    1a9a:	4770      	bx	lr
    1a9c:	200000e8 	.word	0x200000e8

00001aa0 <mu_task_demo_get_screen_redraw_task>:

mu_task_t *mu_task_demo_get_screen_redraw_task(void) {
  return &s_tasks[SCREEN_REDRAW_TASK_IDX];
    1aa0:	4801      	ldr	r0, [pc, #4]	; (1aa8 <mu_task_demo_get_screen_redraw_task+0x8>)
    1aa2:	3068      	adds	r0, #104	; 0x68
}
    1aa4:	4770      	bx	lr
    1aa6:	46c0      	nop			; (mov r8, r8)
    1aa8:	200000e8 	.word	0x200000e8

00001aac <mu_task_demo_get_task_count>:

size_t mu_task_demo_get_task_count(void) {
  return TASK_COUNT;
}
    1aac:	2006      	movs	r0, #6
    1aae:	4770      	bx	lr

00001ab0 <mu_task_demo_get_tasks>:

mu_task_t *mu_task_demo_get_tasks(void) {
  return s_tasks;
    1ab0:	4801      	ldr	r0, [pc, #4]	; (1ab8 <mu_task_demo_get_tasks+0x8>)
}
    1ab2:	3020      	adds	r0, #32
    1ab4:	4770      	bx	lr
    1ab6:	46c0      	nop			; (mov r8, r8)
    1ab8:	200000e8 	.word	0x200000e8

00001abc <button_task_fn>:
}

// =============================================================================
// local (static) code

static void *button_task_fn(void *ctx, void *arg) {
    1abc:	b510      	push	{r4, lr}
  // button context (unused) is passed as first arg, scheduler as second.
  // both unused.
  mu_task_demo_set_low_power_mode(false);
    1abe:	2000      	movs	r0, #0
    1ac0:	4b01      	ldr	r3, [pc, #4]	; (1ac8 <button_task_fn+0xc>)
    1ac2:	4798      	blx	r3
  return NULL;
}
    1ac4:	2000      	movs	r0, #0
    1ac6:	bd10      	pop	{r4, pc}
    1ac8:	00001a69 	.word	0x00001a69

00001acc <button_cb>:

// button_cb is triggered when a button press generates an interrupt.
// From interrupt level, schedule the button task upon leaving interrupt level.
static void button_cb(void *arg) {
    1acc:	b510      	push	{r4, lr}
  mu_sched_task_from_isr(s_sched, s_button_task);
    1ace:	4b03      	ldr	r3, [pc, #12]	; (1adc <button_cb+0x10>)
    1ad0:	6819      	ldr	r1, [r3, #0]
    1ad2:	6858      	ldr	r0, [r3, #4]
    1ad4:	4b02      	ldr	r3, [pc, #8]	; (1ae0 <button_cb+0x14>)
    1ad6:	4798      	blx	r3
}
    1ad8:	bd10      	pop	{r4, pc}
    1ada:	46c0      	nop			; (mov r8, r8)
    1adc:	20000664 	.word	0x20000664
    1ae0:	0000037d 	.word	0x0000037d

00001ae4 <button_task_init>:
mu_task_t *button_task_init(mu_task_t *button_task, button_ctx_t *button_ctx) {
    1ae4:	b570      	push	{r4, r5, r6, lr}
    1ae6:	0004      	movs	r4, r0
  s_button_task = button_task;
    1ae8:	4d08      	ldr	r5, [pc, #32]	; (1b0c <button_task_init+0x28>)
    1aea:	6028      	str	r0, [r5, #0]
  s_sched = mu_task_demo_get_scheduler();
    1aec:	4b08      	ldr	r3, [pc, #32]	; (1b10 <button_task_init+0x2c>)
    1aee:	4798      	blx	r3
    1af0:	6068      	str	r0, [r5, #4]
  mu_vm_button_set_cb(button_cb, NULL);
    1af2:	2100      	movs	r1, #0
    1af4:	4807      	ldr	r0, [pc, #28]	; (1b14 <button_task_init+0x30>)
    1af6:	4b08      	ldr	r3, [pc, #32]	; (1b18 <button_task_init+0x34>)
    1af8:	4798      	blx	r3
  mu_task_init(button_task, button_task_fn, NULL, "Button Pushed");
    1afa:	4b08      	ldr	r3, [pc, #32]	; (1b1c <button_task_init+0x38>)
    1afc:	2200      	movs	r2, #0
    1afe:	4908      	ldr	r1, [pc, #32]	; (1b20 <button_task_init+0x3c>)
    1b00:	0020      	movs	r0, r4
    1b02:	4d08      	ldr	r5, [pc, #32]	; (1b24 <button_task_init+0x40>)
    1b04:	47a8      	blx	r5
}
    1b06:	0020      	movs	r0, r4
    1b08:	bd70      	pop	{r4, r5, r6, pc}
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	20000664 	.word	0x20000664
    1b10:	00001a99 	.word	0x00001a99
    1b14:	00001acd 	.word	0x00001acd
    1b18:	000007f1 	.word	0x000007f1
    1b1c:	00003708 	.word	0x00003708
    1b20:	00001abd 	.word	0x00001abd
    1b24:	000005a9 	.word	0x000005a9

00001b28 <led_task_fn>:
}

// =============================================================================
// local (static) code

static void *led_task_fn(void *ctx, void *arg) {
    1b28:	b570      	push	{r4, r5, r6, lr}
    1b2a:	0004      	movs	r4, r0
    1b2c:	000d      	movs	r5, r1
  // "context" is passed as the first argument, scheduler is second
  led_ctx_t *led_ctx = (led_ctx_t *)ctx;
  mu_sched_t *sched = (mu_sched_t *)arg;

  if (led_ctx->state == LED_OFF) {
    1b2e:	7803      	ldrb	r3, [r0, #0]
    1b30:	2b00      	cmp	r3, #0
    1b32:	d00e      	beq.n	1b52 <led_task_fn+0x2a>
    mu_vm_led_set(true);
    led_ctx->state = LED_ON;
    mu_sched_reschedule_in(sched, mu_time_ms_to_duration(LED_ON_TIME_MS));

  } else {
    mu_vm_led_set(false);
    1b34:	2000      	movs	r0, #0
    1b36:	4b0d      	ldr	r3, [pc, #52]	; (1b6c <led_task_fn+0x44>)
    1b38:	4798      	blx	r3
    led_ctx->state = LED_OFF;
    1b3a:	2300      	movs	r3, #0
    1b3c:	7023      	strb	r3, [r4, #0]
    mu_sched_reschedule_in(sched, mu_time_ms_to_duration(LED_OFF_TIME_MS));
    1b3e:	20f0      	movs	r0, #240	; 0xf0
    1b40:	30ff      	adds	r0, #255	; 0xff
    1b42:	4b0b      	ldr	r3, [pc, #44]	; (1b70 <led_task_fn+0x48>)
    1b44:	4798      	blx	r3
    1b46:	0001      	movs	r1, r0
    1b48:	0028      	movs	r0, r5
    1b4a:	4b0a      	ldr	r3, [pc, #40]	; (1b74 <led_task_fn+0x4c>)
    1b4c:	4798      	blx	r3
  }

  return NULL;
}
    1b4e:	2000      	movs	r0, #0
    1b50:	bd70      	pop	{r4, r5, r6, pc}
    mu_vm_led_set(true);
    1b52:	2001      	movs	r0, #1
    1b54:	4b05      	ldr	r3, [pc, #20]	; (1b6c <led_task_fn+0x44>)
    1b56:	4798      	blx	r3
    led_ctx->state = LED_ON;
    1b58:	2301      	movs	r3, #1
    1b5a:	7023      	strb	r3, [r4, #0]
    mu_sched_reschedule_in(sched, mu_time_ms_to_duration(LED_ON_TIME_MS));
    1b5c:	2005      	movs	r0, #5
    1b5e:	4b04      	ldr	r3, [pc, #16]	; (1b70 <led_task_fn+0x48>)
    1b60:	4798      	blx	r3
    1b62:	0001      	movs	r1, r0
    1b64:	0028      	movs	r0, r5
    1b66:	4b03      	ldr	r3, [pc, #12]	; (1b74 <led_task_fn+0x4c>)
    1b68:	4798      	blx	r3
    1b6a:	e7f0      	b.n	1b4e <led_task_fn+0x26>
    1b6c:	000007d1 	.word	0x000007d1
    1b70:	00000639 	.word	0x00000639
    1b74:	00000325 	.word	0x00000325

00001b78 <led_task_init>:
mu_task_t *led_task_init(mu_task_t *led_task, led_ctx_t *led_ctx) {
    1b78:	b570      	push	{r4, r5, r6, lr}
    1b7a:	0004      	movs	r4, r0
    1b7c:	000a      	movs	r2, r1
  led_ctx->state = LED_OFF;
    1b7e:	2300      	movs	r3, #0
    1b80:	700b      	strb	r3, [r1, #0]
  mu_task_init(led_task, led_task_fn, led_ctx, "LED Task");
    1b82:	4b03      	ldr	r3, [pc, #12]	; (1b90 <led_task_init+0x18>)
    1b84:	4903      	ldr	r1, [pc, #12]	; (1b94 <led_task_init+0x1c>)
    1b86:	4d04      	ldr	r5, [pc, #16]	; (1b98 <led_task_init+0x20>)
    1b88:	47a8      	blx	r5
}
    1b8a:	0020      	movs	r0, r4
    1b8c:	bd70      	pop	{r4, r5, r6, pc}
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	00003718 	.word	0x00003718
    1b94:	00001b29 	.word	0x00001b29
    1b98:	000005a9 	.word	0x000005a9

00001b9c <main>:

#include <atmel_start.h>
#include "mu_task_demo.h"

int main(void)
{
    1b9c:	b510      	push	{r4, lr}
  /* Initializes MCU, drivers and middleware */
  atmel_start_init();
    1b9e:	4b03      	ldr	r3, [pc, #12]	; (1bac <main+0x10>)
    1ba0:	4798      	blx	r3
  mu_task_demo_init();
    1ba2:	4b03      	ldr	r3, [pc, #12]	; (1bb0 <main+0x14>)
    1ba4:	4798      	blx	r3

  /* Replace with your application code */
  while (1) {
    mu_task_demo_step();
    1ba6:	4c03      	ldr	r4, [pc, #12]	; (1bb4 <main+0x18>)
    1ba8:	47a0      	blx	r4
    1baa:	e7fd      	b.n	1ba8 <main+0xc>
    1bac:	00000961 	.word	0x00000961
    1bb0:	00001955 	.word	0x00001955
    1bb4:	000018d1 	.word	0x000018d1

00001bb8 <_write>:
#include "mu_vm.h"

// ================
// support for printf()

int _write(int file, char *ptr, int len) {
    1bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bba:	46c6      	mov	lr, r8
    1bbc:	b500      	push	{lr}
    1bbe:	4690      	mov	r8, r2
  // void file;
  int n = len;

  while (n-- > 0) {
    1bc0:	2a00      	cmp	r2, #0
    1bc2:	dd0c      	ble.n	1bde <_write+0x26>
    1bc4:	000d      	movs	r5, r1
    1bc6:	4441      	add	r1, r8
    1bc8:	000e      	movs	r6, r1
    while (!mu_vm_serial_can_write())
    1bca:	4c07      	ldr	r4, [pc, #28]	; (1be8 <_write+0x30>)
  		;
    mu_vm_serial_write(*ptr++);
    1bcc:	4f07      	ldr	r7, [pc, #28]	; (1bec <_write+0x34>)
    while (!mu_vm_serial_can_write())
    1bce:	47a0      	blx	r4
    1bd0:	2800      	cmp	r0, #0
    1bd2:	d0fc      	beq.n	1bce <_write+0x16>
    mu_vm_serial_write(*ptr++);
    1bd4:	7828      	ldrb	r0, [r5, #0]
    1bd6:	47b8      	blx	r7
    1bd8:	3501      	adds	r5, #1
  while (n-- > 0) {
    1bda:	42b5      	cmp	r5, r6
    1bdc:	d1f7      	bne.n	1bce <_write+0x16>
  }
  return len;
}
    1bde:	4640      	mov	r0, r8
    1be0:	bc04      	pop	{r2}
    1be2:	4690      	mov	r8, r2
    1be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	0000080d 	.word	0x0000080d
    1bec:	0000081d 	.word	0x0000081d

00001bf0 <_read>:

int _read(int file, char *ptr, int len) {
    1bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bf2:	46c6      	mov	lr, r8
    1bf4:	b500      	push	{lr}
    1bf6:	4690      	mov	r8, r2
  // void file;
  int n = len;

  while (n-- > 0) {
    1bf8:	2a00      	cmp	r2, #0
    1bfa:	dd0c      	ble.n	1c16 <_read+0x26>
    1bfc:	000d      	movs	r5, r1
    1bfe:	4441      	add	r1, r8
    1c00:	000e      	movs	r6, r1
    while (!mu_vm_serial_can_read())
    1c02:	4c07      	ldr	r4, [pc, #28]	; (1c20 <_read+0x30>)
			;
    *ptr++ = mu_vm_serial_read();
    1c04:	4f07      	ldr	r7, [pc, #28]	; (1c24 <_read+0x34>)
    while (!mu_vm_serial_can_read())
    1c06:	47a0      	blx	r4
    1c08:	2800      	cmp	r0, #0
    1c0a:	d0fc      	beq.n	1c06 <_read+0x16>
    *ptr++ = mu_vm_serial_read();
    1c0c:	47b8      	blx	r7
    1c0e:	7028      	strb	r0, [r5, #0]
    1c10:	3501      	adds	r5, #1
  while (n-- > 0) {
    1c12:	42b5      	cmp	r5, r6
    1c14:	d1f7      	bne.n	1c06 <_read+0x16>
  }
  return len;
}
    1c16:	4640      	mov	r0, r8
    1c18:	bc04      	pop	{r2}
    1c1a:	4690      	mov	r8, r2
    1c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	000008d5 	.word	0x000008d5
    1c24:	00000895 	.word	0x00000895

00001c28 <screen_redraw_task_fn>:
 * @brief Repaint the screen.
 *
 * Print one character from the screen buffer (a mu_substring).  If there are
 * any characters remaining, reschedule immediately to print the next char.
 */
static void *screen_redraw_task_fn(void *ctx, void *arg) {
    1c28:	b530      	push	{r4, r5, lr}
    1c2a:	b083      	sub	sp, #12
    1c2c:	0005      	movs	r5, r0
  // screen_redraw_context is passed as the first argument, scheduler is second
  screen_redraw_ctx_t *screen_redraw_ctx = (screen_redraw_ctx_t *)ctx;

  mu_substr_t *screen_buffer = mu_task_demo_get_screen_buffer();
    1c2e:	4b15      	ldr	r3, [pc, #84]	; (1c84 <screen_redraw_task_fn+0x5c>)
    1c30:	4798      	blx	r3
    1c32:	0004      	movs	r4, r0

  if (mu_substr_length(screen_buffer) > 0) {
    1c34:	4b14      	ldr	r3, [pc, #80]	; (1c88 <screen_redraw_task_fn+0x60>)
    1c36:	4798      	blx	r3
    1c38:	2800      	cmp	r0, #0
    1c3a:	d019      	beq.n	1c70 <screen_redraw_task_fn+0x48>
    if (!screen_redraw_ctx->in_progress) {
    1c3c:	782b      	ldrb	r3, [r5, #0]
    1c3e:	2b00      	cmp	r3, #0
    1c40:	d00f      	beq.n	1c62 <screen_redraw_task_fn+0x3a>
      // Arrive here from a write callback.  UART is ready to accept another
      // byte: fetch from the screen buffer and send it to the UART.
      mu_str_data_t ch;
      // CODE SMELL ALERT: mu_substr_get() fetches a character relative to
      // strbuf->start.  But we don't provide a way to modify start.  So...
      mu_substr_err_t err = mu_substr_get(screen_buffer, 0, &ch);
    1c42:	466b      	mov	r3, sp
    1c44:	1dda      	adds	r2, r3, #7
    1c46:	2100      	movs	r1, #0
    1c48:	0020      	movs	r0, r4
    1c4a:	4b10      	ldr	r3, [pc, #64]	; (1c8c <screen_redraw_task_fn+0x64>)
    1c4c:	4798      	blx	r3
      screen_buffer->start += 1;
    1c4e:	6863      	ldr	r3, [r4, #4]
    1c50:	3301      	adds	r3, #1
    1c52:	6063      	str	r3, [r4, #4]

      if (err == MU_SUBSTR_ERR_NONE) {
    1c54:	2800      	cmp	r0, #0
    1c56:	d111      	bne.n	1c7c <screen_redraw_task_fn+0x54>
        mu_vm_serial_write(ch);
    1c58:	466b      	mov	r3, sp
    1c5a:	79d8      	ldrb	r0, [r3, #7]
    1c5c:	4b0c      	ldr	r3, [pc, #48]	; (1c90 <screen_redraw_task_fn+0x68>)
    1c5e:	4798      	blx	r3
    1c60:	e00c      	b.n	1c7c <screen_redraw_task_fn+0x54>
      screen_redraw_ctx->in_progress = true;
    1c62:	3301      	adds	r3, #1
    1c64:	702b      	strb	r3, [r5, #0]
      mu_vm_serial_set_write_cb(serial_write_cb, screen_redraw_ctx);
    1c66:	0029      	movs	r1, r5
    1c68:	480a      	ldr	r0, [pc, #40]	; (1c94 <screen_redraw_task_fn+0x6c>)
    1c6a:	4b0b      	ldr	r3, [pc, #44]	; (1c98 <screen_redraw_task_fn+0x70>)
    1c6c:	4798      	blx	r3
    1c6e:	e005      	b.n	1c7c <screen_redraw_task_fn+0x54>
      }
    }

  } else {
    // no chars remaining to be sent: turn off write callbacks.
    mu_vm_serial_set_write_cb(NULL, NULL);
    1c70:	2100      	movs	r1, #0
    1c72:	2000      	movs	r0, #0
    1c74:	4b08      	ldr	r3, [pc, #32]	; (1c98 <screen_redraw_task_fn+0x70>)
    1c76:	4798      	blx	r3
    screen_redraw_ctx->in_progress = false;
    1c78:	2300      	movs	r3, #0
    1c7a:	702b      	strb	r3, [r5, #0]
  }

  return NULL;
}
    1c7c:	2000      	movs	r0, #0
    1c7e:	b003      	add	sp, #12
    1c80:	bd30      	pop	{r4, r5, pc}
    1c82:	46c0      	nop			; (mov r8, r8)
    1c84:	00001a8d 	.word	0x00001a8d
    1c88:	000004d1 	.word	0x000004d1
    1c8c:	000004ed 	.word	0x000004ed
    1c90:	0000081d 	.word	0x0000081d
    1c94:	00001c9d 	.word	0x00001c9d
    1c98:	0000085d 	.word	0x0000085d

00001c9c <serial_write_cb>:

/**
 * Called from interrupt level when the USART is reay to accept a char.
 * Schedule a call to screen_redraw_task_fn() to write the char.
 */
static void serial_write_cb(void *arg) {
    1c9c:	b510      	push	{r4, lr}
    screen_redraw_ctx_t *screen_redraw_ctx = (screen_redraw_ctx_t *)arg;
    mu_sched_task_from_isr(screen_redraw_ctx->sched, screen_redraw_ctx->task);
    1c9e:	6881      	ldr	r1, [r0, #8]
    1ca0:	6840      	ldr	r0, [r0, #4]
    1ca2:	4b01      	ldr	r3, [pc, #4]	; (1ca8 <serial_write_cb+0xc>)
    1ca4:	4798      	blx	r3
}
    1ca6:	bd10      	pop	{r4, pc}
    1ca8:	0000037d 	.word	0x0000037d

00001cac <screen_redraw_task_init>:
                                   screen_redraw_ctx_t *screen_redraw_ctx) {
    1cac:	b570      	push	{r4, r5, r6, lr}
    1cae:	0005      	movs	r5, r0
    1cb0:	000c      	movs	r4, r1
  screen_redraw_ctx->in_progress = false;
    1cb2:	2300      	movs	r3, #0
    1cb4:	700b      	strb	r3, [r1, #0]
  screen_redraw_ctx->sched = mu_task_demo_get_scheduler();
    1cb6:	4b06      	ldr	r3, [pc, #24]	; (1cd0 <screen_redraw_task_init+0x24>)
    1cb8:	4798      	blx	r3
    1cba:	6060      	str	r0, [r4, #4]
  screen_redraw_ctx->task = screen_redraw_task;
    1cbc:	60a5      	str	r5, [r4, #8]
  mu_task_init(screen_redraw_task,
    1cbe:	4b05      	ldr	r3, [pc, #20]	; (1cd4 <screen_redraw_task_init+0x28>)
    1cc0:	0022      	movs	r2, r4
    1cc2:	4905      	ldr	r1, [pc, #20]	; (1cd8 <screen_redraw_task_init+0x2c>)
    1cc4:	0028      	movs	r0, r5
    1cc6:	4c05      	ldr	r4, [pc, #20]	; (1cdc <screen_redraw_task_init+0x30>)
    1cc8:	47a0      	blx	r4
}
    1cca:	0028      	movs	r0, r5
    1ccc:	bd70      	pop	{r4, r5, r6, pc}
    1cce:	46c0      	nop			; (mov r8, r8)
    1cd0:	00001a99 	.word	0x00001a99
    1cd4:	00003724 	.word	0x00003724
    1cd8:	00001c29 	.word	0x00001c29
    1cdc:	000005a9 	.word	0x000005a9

00001ce0 <screen_update_task_fn>:
}

// =============================================================================
// local (static) code

static void *screen_update_task_fn(void *ctx, void *arg) {
    1ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ce2:	b087      	sub	sp, #28
    1ce4:	0004      	movs	r4, r0
    1ce6:	000d      	movs	r5, r1
  // screen_update_context is passed as the first argument, scheduler is second
  screen_update_ctx_t *screen_update_ctx = (screen_update_ctx_t *)ctx;
  mu_sched_t *sched = (mu_sched_t *)arg;

  if (screen_update_ctx->slice <= screen_update_ctx->n_tasks + 2) {
    1ce8:	7d03      	ldrb	r3, [r0, #20]
    1cea:	6862      	ldr	r2, [r4, #4]
    1cec:	1c91      	adds	r1, r2, #2
    1cee:	428b      	cmp	r3, r1
    1cf0:	d90f      	bls.n	1d12 <screen_update_task_fn+0x32>
    mu_sched_reschedule_now(sched);

  } else {
    // screen buffer has been repainted.  Trigger screen_redraw_task and also
    // reschedule screen_update_task to run in SCREEN_UPDATE_INTERVAL_MS
    screen_update_ctx->slice = 0;
    1cf2:	2300      	movs	r3, #0
    1cf4:	7523      	strb	r3, [r4, #20]
    mu_sched_task_now(sched, screen_update_ctx->screen_redraw_task);
    1cf6:	6821      	ldr	r1, [r4, #0]
    1cf8:	0028      	movs	r0, r5
    1cfa:	4b36      	ldr	r3, [pc, #216]	; (1dd4 <screen_update_task_fn+0xf4>)
    1cfc:	4798      	blx	r3
    mu_sched_reschedule_in(sched,
    1cfe:	4836      	ldr	r0, [pc, #216]	; (1dd8 <screen_update_task_fn+0xf8>)
    1d00:	4b36      	ldr	r3, [pc, #216]	; (1ddc <screen_update_task_fn+0xfc>)
    1d02:	4798      	blx	r3
    1d04:	0001      	movs	r1, r0
    1d06:	0028      	movs	r0, r5
    1d08:	4b35      	ldr	r3, [pc, #212]	; (1de0 <screen_update_task_fn+0x100>)
    1d0a:	4798      	blx	r3
                           mu_time_ms_to_duration(SCREEN_UPDATE_INTERVAL_MS));
  }

  return NULL;
}
    1d0c:	2000      	movs	r0, #0
    1d0e:	b007      	add	sp, #28
    1d10:	bdf0      	pop	{r4, r5, r6, r7, pc}

static void repaint_screen(screen_update_ctx_t *ctx, uint8_t slice) {

  if (slice == 0) {
    1d12:	2b00      	cmp	r3, #0
    1d14:	d00e      	beq.n	1d34 <screen_update_task_fn+0x54>
                   "mu_task_demo " MU_TASK_DEMO_VERSION
                   ": https://github.com/rdpoor/mulib\r\n\r\n"
                   "          Name Stat  # Calls     Runtime     Max Dur\r\n"
                   "+-------------+-+-----------+-----------+-----------+\r\n");

  } else if (slice <= ctx->n_tasks) {
    1d16:	4293      	cmp	r3, r2
    1d18:	d914      	bls.n	1d44 <screen_update_task_fn+0x64>
    repaint_task(ctx, &ctx->tasks[slice - 1]);

  } else if (slice == ctx->n_tasks + 1) {
    1d1a:	3201      	adds	r2, #1
    1d1c:	4293      	cmp	r3, r2
    1d1e:	d046      	beq.n	1dae <screen_update_task_fn+0xce>
    mu_substr_puts(ctx->screen_buffer,
                   "\r\nStatus: A=Active, I=Idle, R=Runnable, S=Scheduled\r\n");

  } else if (slice == ctx->n_tasks + 2) {
    1d20:	428b      	cmp	r3, r1
    1d22:	d049      	beq.n	1db8 <screen_update_task_fn+0xd8>
                     "Type 'D' to suspend Screen task. 'd' to restart.\r\n");
    }

  } else {
    // shouldn't arrive here...
    asm("nop");
    1d24:	46c0      	nop			; (mov r8, r8)
    screen_update_ctx->slice += 1;
    1d26:	7d23      	ldrb	r3, [r4, #20]
    1d28:	3301      	adds	r3, #1
    1d2a:	7523      	strb	r3, [r4, #20]
    mu_sched_reschedule_now(sched);
    1d2c:	0028      	movs	r0, r5
    1d2e:	4b2d      	ldr	r3, [pc, #180]	; (1de4 <screen_update_task_fn+0x104>)
    1d30:	4798      	blx	r3
    1d32:	e7eb      	b.n	1d0c <screen_update_task_fn+0x2c>
    mu_substr_clear(ctx->screen_buffer);
    1d34:	6920      	ldr	r0, [r4, #16]
    1d36:	4b2c      	ldr	r3, [pc, #176]	; (1de8 <screen_update_task_fn+0x108>)
    1d38:	4798      	blx	r3
    mu_substr_puts(ctx->screen_buffer,
    1d3a:	492c      	ldr	r1, [pc, #176]	; (1dec <screen_update_task_fn+0x10c>)
    1d3c:	6920      	ldr	r0, [r4, #16]
    1d3e:	4b2c      	ldr	r3, [pc, #176]	; (1df0 <screen_update_task_fn+0x110>)
    1d40:	4798      	blx	r3
    1d42:	e7f0      	b.n	1d26 <screen_update_task_fn+0x46>
    repaint_task(ctx, &ctx->tasks[slice - 1]);
    1d44:	005a      	lsls	r2, r3, #1
    1d46:	18d3      	adds	r3, r2, r3
    1d48:	00db      	lsls	r3, r3, #3
    1d4a:	3b18      	subs	r3, #24
    1d4c:	001e      	movs	r6, r3
    1d4e:	68a3      	ldr	r3, [r4, #8]
    1d50:	469c      	mov	ip, r3
    1d52:	4466      	add	r6, ip
  }
}

static void repaint_task(screen_update_ctx_t *ctx, mu_task_t *task) {
  mu_substr_printf(ctx->screen_buffer,
    1d54:	6927      	ldr	r7, [r4, #16]
    1d56:	0030      	movs	r0, r6
    1d58:	4b26      	ldr	r3, [pc, #152]	; (1df4 <screen_update_task_fn+0x114>)
    1d5a:	4798      	blx	r3
    1d5c:	9005      	str	r0, [sp, #20]
                   task->runtime,
                   task->max_duration);
}

static char get_task_state(mu_task_t *task, mu_sched_t *sched) {
  switch (mu_sched_get_task_status(sched, task)) {
    1d5e:	0031      	movs	r1, r6
    1d60:	68e0      	ldr	r0, [r4, #12]
    1d62:	4b25      	ldr	r3, [pc, #148]	; (1df8 <screen_update_task_fn+0x118>)
    1d64:	4798      	blx	r3
    1d66:	2801      	cmp	r0, #1
    1d68:	d01b      	beq.n	1da2 <screen_update_task_fn+0xc2>
    1d6a:	2800      	cmp	r0, #0
    1d6c:	d01c      	beq.n	1da8 <screen_update_task_fn+0xc8>
    1d6e:	2802      	cmp	r0, #2
    1d70:	d006      	beq.n	1d80 <screen_update_task_fn+0xa0>
  case MU_SCHED_TASK_STATUS_IDLE:
    return 'I';
  case MU_SCHED_TASK_STATUS_RUNNABLE:
    return 'R';
  case MU_SCHED_TASK_STATUS_ACTIVE:
    return 'A';
    1d72:	2341      	movs	r3, #65	; 0x41
    1d74:	9304      	str	r3, [sp, #16]
  switch (mu_sched_get_task_status(sched, task)) {
    1d76:	2803      	cmp	r0, #3
    1d78:	d004      	beq.n	1d84 <screen_update_task_fn+0xa4>
  case MU_SCHED_TASK_STATUS_SCHEDULED:
    return 'S';
  default:
    return '?';
    1d7a:	233f      	movs	r3, #63	; 0x3f
    1d7c:	9304      	str	r3, [sp, #16]
    1d7e:	e001      	b.n	1d84 <screen_update_task_fn+0xa4>
    return 'R';
    1d80:	2352      	movs	r3, #82	; 0x52
    1d82:	9304      	str	r3, [sp, #16]
  mu_substr_printf(ctx->screen_buffer,
    1d84:	0030      	movs	r0, r6
    1d86:	4b1d      	ldr	r3, [pc, #116]	; (1dfc <screen_update_task_fn+0x11c>)
    1d88:	4798      	blx	r3
    1d8a:	6973      	ldr	r3, [r6, #20]
    1d8c:	9302      	str	r3, [sp, #8]
    1d8e:	6933      	ldr	r3, [r6, #16]
    1d90:	9301      	str	r3, [sp, #4]
    1d92:	9000      	str	r0, [sp, #0]
    1d94:	9b04      	ldr	r3, [sp, #16]
    1d96:	9a05      	ldr	r2, [sp, #20]
    1d98:	4919      	ldr	r1, [pc, #100]	; (1e00 <screen_update_task_fn+0x120>)
    1d9a:	0038      	movs	r0, r7
    1d9c:	4e19      	ldr	r6, [pc, #100]	; (1e04 <screen_update_task_fn+0x124>)
    1d9e:	47b0      	blx	r6
    1da0:	e7c1      	b.n	1d26 <screen_update_task_fn+0x46>
    return 'S';
    1da2:	2353      	movs	r3, #83	; 0x53
    1da4:	9304      	str	r3, [sp, #16]
    1da6:	e7ed      	b.n	1d84 <screen_update_task_fn+0xa4>
    return 'I';
    1da8:	2349      	movs	r3, #73	; 0x49
    1daa:	9304      	str	r3, [sp, #16]
    1dac:	e7ea      	b.n	1d84 <screen_update_task_fn+0xa4>
    mu_substr_puts(ctx->screen_buffer,
    1dae:	4916      	ldr	r1, [pc, #88]	; (1e08 <screen_update_task_fn+0x128>)
    1db0:	6920      	ldr	r0, [r4, #16]
    1db2:	4b0f      	ldr	r3, [pc, #60]	; (1df0 <screen_update_task_fn+0x110>)
    1db4:	4798      	blx	r3
    1db6:	e7b6      	b.n	1d26 <screen_update_task_fn+0x46>
    if (mu_task_demo_is_low_power_mode()) {
    1db8:	4b14      	ldr	r3, [pc, #80]	; (1e0c <screen_update_task_fn+0x12c>)
    1dba:	4798      	blx	r3
    1dbc:	2800      	cmp	r0, #0
    1dbe:	d004      	beq.n	1dca <screen_update_task_fn+0xea>
      mu_substr_puts(ctx->screen_buffer,
    1dc0:	4913      	ldr	r1, [pc, #76]	; (1e10 <screen_update_task_fn+0x130>)
    1dc2:	6920      	ldr	r0, [r4, #16]
    1dc4:	4b0a      	ldr	r3, [pc, #40]	; (1df0 <screen_update_task_fn+0x110>)
    1dc6:	4798      	blx	r3
    1dc8:	e7ad      	b.n	1d26 <screen_update_task_fn+0x46>
      mu_substr_puts(ctx->screen_buffer,
    1dca:	4912      	ldr	r1, [pc, #72]	; (1e14 <screen_update_task_fn+0x134>)
    1dcc:	6920      	ldr	r0, [r4, #16]
    1dce:	4b08      	ldr	r3, [pc, #32]	; (1df0 <screen_update_task_fn+0x110>)
    1dd0:	4798      	blx	r3
    1dd2:	e7a8      	b.n	1d26 <screen_update_task_fn+0x46>
    1dd4:	00000305 	.word	0x00000305
    1dd8:	000009c4 	.word	0x000009c4
    1ddc:	00000639 	.word	0x00000639
    1de0:	00000325 	.word	0x00000325
    1de4:	00000359 	.word	0x00000359
    1de8:	000004c9 	.word	0x000004c9
    1dec:	00003734 	.word	0x00003734
    1df0:	00000565 	.word	0x00000565
    1df4:	000005b9 	.word	0x000005b9
    1df8:	00000395 	.word	0x00000395
    1dfc:	000005fd 	.word	0x000005fd
    1e00:	000037e4 	.word	0x000037e4
    1e04:	00000511 	.word	0x00000511
    1e08:	00003800 	.word	0x00003800
    1e0c:	00001a81 	.word	0x00001a81
    1e10:	00003838 	.word	0x00003838
    1e14:	00003864 	.word	0x00003864

00001e18 <screen_update_task_init>:
                                   screen_update_ctx_t *screen_update_ctx) {
    1e18:	b570      	push	{r4, r5, r6, lr}
    1e1a:	0005      	movs	r5, r0
    1e1c:	000c      	movs	r4, r1
  screen_update_ctx->screen_redraw_task = mu_task_demo_get_screen_redraw_task();
    1e1e:	4b0c      	ldr	r3, [pc, #48]	; (1e50 <screen_update_task_init+0x38>)
    1e20:	4798      	blx	r3
    1e22:	6020      	str	r0, [r4, #0]
  screen_update_ctx->n_tasks = mu_task_demo_get_task_count();
    1e24:	4b0b      	ldr	r3, [pc, #44]	; (1e54 <screen_update_task_init+0x3c>)
    1e26:	4798      	blx	r3
    1e28:	6060      	str	r0, [r4, #4]
  screen_update_ctx->tasks = mu_task_demo_get_tasks();
    1e2a:	4b0b      	ldr	r3, [pc, #44]	; (1e58 <screen_update_task_init+0x40>)
    1e2c:	4798      	blx	r3
    1e2e:	60a0      	str	r0, [r4, #8]
  screen_update_ctx->sched = mu_task_demo_get_scheduler();
    1e30:	4b0a      	ldr	r3, [pc, #40]	; (1e5c <screen_update_task_init+0x44>)
    1e32:	4798      	blx	r3
    1e34:	60e0      	str	r0, [r4, #12]
  screen_update_ctx->screen_buffer = mu_task_demo_get_screen_buffer();
    1e36:	4b0a      	ldr	r3, [pc, #40]	; (1e60 <screen_update_task_init+0x48>)
    1e38:	4798      	blx	r3
    1e3a:	6120      	str	r0, [r4, #16]
  screen_update_ctx->slice = 0;
    1e3c:	2300      	movs	r3, #0
    1e3e:	7523      	strb	r3, [r4, #20]
  mu_task_init(screen_update_task,
    1e40:	4b08      	ldr	r3, [pc, #32]	; (1e64 <screen_update_task_init+0x4c>)
    1e42:	0022      	movs	r2, r4
    1e44:	4908      	ldr	r1, [pc, #32]	; (1e68 <screen_update_task_init+0x50>)
    1e46:	0028      	movs	r0, r5
    1e48:	4c08      	ldr	r4, [pc, #32]	; (1e6c <screen_update_task_init+0x54>)
    1e4a:	47a0      	blx	r4
}
    1e4c:	0028      	movs	r0, r5
    1e4e:	bd70      	pop	{r4, r5, r6, pc}
    1e50:	00001aa1 	.word	0x00001aa1
    1e54:	00001aad 	.word	0x00001aad
    1e58:	00001ab1 	.word	0x00001ab1
    1e5c:	00001a99 	.word	0x00001a99
    1e60:	00001a8d 	.word	0x00001a8d
    1e64:	000038ec 	.word	0x000038ec
    1e68:	00001ce1 	.word	0x00001ce1
    1e6c:	000005a9 	.word	0x000005a9

00001e70 <__udivsi3>:
    1e70:	2200      	movs	r2, #0
    1e72:	0843      	lsrs	r3, r0, #1
    1e74:	428b      	cmp	r3, r1
    1e76:	d374      	bcc.n	1f62 <__udivsi3+0xf2>
    1e78:	0903      	lsrs	r3, r0, #4
    1e7a:	428b      	cmp	r3, r1
    1e7c:	d35f      	bcc.n	1f3e <__udivsi3+0xce>
    1e7e:	0a03      	lsrs	r3, r0, #8
    1e80:	428b      	cmp	r3, r1
    1e82:	d344      	bcc.n	1f0e <__udivsi3+0x9e>
    1e84:	0b03      	lsrs	r3, r0, #12
    1e86:	428b      	cmp	r3, r1
    1e88:	d328      	bcc.n	1edc <__udivsi3+0x6c>
    1e8a:	0c03      	lsrs	r3, r0, #16
    1e8c:	428b      	cmp	r3, r1
    1e8e:	d30d      	bcc.n	1eac <__udivsi3+0x3c>
    1e90:	22ff      	movs	r2, #255	; 0xff
    1e92:	0209      	lsls	r1, r1, #8
    1e94:	ba12      	rev	r2, r2
    1e96:	0c03      	lsrs	r3, r0, #16
    1e98:	428b      	cmp	r3, r1
    1e9a:	d302      	bcc.n	1ea2 <__udivsi3+0x32>
    1e9c:	1212      	asrs	r2, r2, #8
    1e9e:	0209      	lsls	r1, r1, #8
    1ea0:	d065      	beq.n	1f6e <__udivsi3+0xfe>
    1ea2:	0b03      	lsrs	r3, r0, #12
    1ea4:	428b      	cmp	r3, r1
    1ea6:	d319      	bcc.n	1edc <__udivsi3+0x6c>
    1ea8:	e000      	b.n	1eac <__udivsi3+0x3c>
    1eaa:	0a09      	lsrs	r1, r1, #8
    1eac:	0bc3      	lsrs	r3, r0, #15
    1eae:	428b      	cmp	r3, r1
    1eb0:	d301      	bcc.n	1eb6 <__udivsi3+0x46>
    1eb2:	03cb      	lsls	r3, r1, #15
    1eb4:	1ac0      	subs	r0, r0, r3
    1eb6:	4152      	adcs	r2, r2
    1eb8:	0b83      	lsrs	r3, r0, #14
    1eba:	428b      	cmp	r3, r1
    1ebc:	d301      	bcc.n	1ec2 <__udivsi3+0x52>
    1ebe:	038b      	lsls	r3, r1, #14
    1ec0:	1ac0      	subs	r0, r0, r3
    1ec2:	4152      	adcs	r2, r2
    1ec4:	0b43      	lsrs	r3, r0, #13
    1ec6:	428b      	cmp	r3, r1
    1ec8:	d301      	bcc.n	1ece <__udivsi3+0x5e>
    1eca:	034b      	lsls	r3, r1, #13
    1ecc:	1ac0      	subs	r0, r0, r3
    1ece:	4152      	adcs	r2, r2
    1ed0:	0b03      	lsrs	r3, r0, #12
    1ed2:	428b      	cmp	r3, r1
    1ed4:	d301      	bcc.n	1eda <__udivsi3+0x6a>
    1ed6:	030b      	lsls	r3, r1, #12
    1ed8:	1ac0      	subs	r0, r0, r3
    1eda:	4152      	adcs	r2, r2
    1edc:	0ac3      	lsrs	r3, r0, #11
    1ede:	428b      	cmp	r3, r1
    1ee0:	d301      	bcc.n	1ee6 <__udivsi3+0x76>
    1ee2:	02cb      	lsls	r3, r1, #11
    1ee4:	1ac0      	subs	r0, r0, r3
    1ee6:	4152      	adcs	r2, r2
    1ee8:	0a83      	lsrs	r3, r0, #10
    1eea:	428b      	cmp	r3, r1
    1eec:	d301      	bcc.n	1ef2 <__udivsi3+0x82>
    1eee:	028b      	lsls	r3, r1, #10
    1ef0:	1ac0      	subs	r0, r0, r3
    1ef2:	4152      	adcs	r2, r2
    1ef4:	0a43      	lsrs	r3, r0, #9
    1ef6:	428b      	cmp	r3, r1
    1ef8:	d301      	bcc.n	1efe <__udivsi3+0x8e>
    1efa:	024b      	lsls	r3, r1, #9
    1efc:	1ac0      	subs	r0, r0, r3
    1efe:	4152      	adcs	r2, r2
    1f00:	0a03      	lsrs	r3, r0, #8
    1f02:	428b      	cmp	r3, r1
    1f04:	d301      	bcc.n	1f0a <__udivsi3+0x9a>
    1f06:	020b      	lsls	r3, r1, #8
    1f08:	1ac0      	subs	r0, r0, r3
    1f0a:	4152      	adcs	r2, r2
    1f0c:	d2cd      	bcs.n	1eaa <__udivsi3+0x3a>
    1f0e:	09c3      	lsrs	r3, r0, #7
    1f10:	428b      	cmp	r3, r1
    1f12:	d301      	bcc.n	1f18 <__udivsi3+0xa8>
    1f14:	01cb      	lsls	r3, r1, #7
    1f16:	1ac0      	subs	r0, r0, r3
    1f18:	4152      	adcs	r2, r2
    1f1a:	0983      	lsrs	r3, r0, #6
    1f1c:	428b      	cmp	r3, r1
    1f1e:	d301      	bcc.n	1f24 <__udivsi3+0xb4>
    1f20:	018b      	lsls	r3, r1, #6
    1f22:	1ac0      	subs	r0, r0, r3
    1f24:	4152      	adcs	r2, r2
    1f26:	0943      	lsrs	r3, r0, #5
    1f28:	428b      	cmp	r3, r1
    1f2a:	d301      	bcc.n	1f30 <__udivsi3+0xc0>
    1f2c:	014b      	lsls	r3, r1, #5
    1f2e:	1ac0      	subs	r0, r0, r3
    1f30:	4152      	adcs	r2, r2
    1f32:	0903      	lsrs	r3, r0, #4
    1f34:	428b      	cmp	r3, r1
    1f36:	d301      	bcc.n	1f3c <__udivsi3+0xcc>
    1f38:	010b      	lsls	r3, r1, #4
    1f3a:	1ac0      	subs	r0, r0, r3
    1f3c:	4152      	adcs	r2, r2
    1f3e:	08c3      	lsrs	r3, r0, #3
    1f40:	428b      	cmp	r3, r1
    1f42:	d301      	bcc.n	1f48 <__udivsi3+0xd8>
    1f44:	00cb      	lsls	r3, r1, #3
    1f46:	1ac0      	subs	r0, r0, r3
    1f48:	4152      	adcs	r2, r2
    1f4a:	0883      	lsrs	r3, r0, #2
    1f4c:	428b      	cmp	r3, r1
    1f4e:	d301      	bcc.n	1f54 <__udivsi3+0xe4>
    1f50:	008b      	lsls	r3, r1, #2
    1f52:	1ac0      	subs	r0, r0, r3
    1f54:	4152      	adcs	r2, r2
    1f56:	0843      	lsrs	r3, r0, #1
    1f58:	428b      	cmp	r3, r1
    1f5a:	d301      	bcc.n	1f60 <__udivsi3+0xf0>
    1f5c:	004b      	lsls	r3, r1, #1
    1f5e:	1ac0      	subs	r0, r0, r3
    1f60:	4152      	adcs	r2, r2
    1f62:	1a41      	subs	r1, r0, r1
    1f64:	d200      	bcs.n	1f68 <__udivsi3+0xf8>
    1f66:	4601      	mov	r1, r0
    1f68:	4152      	adcs	r2, r2
    1f6a:	4610      	mov	r0, r2
    1f6c:	4770      	bx	lr
    1f6e:	e7ff      	b.n	1f70 <__udivsi3+0x100>
    1f70:	b501      	push	{r0, lr}
    1f72:	2000      	movs	r0, #0
    1f74:	f000 f8f0 	bl	2158 <__aeabi_idiv0>
    1f78:	bd02      	pop	{r1, pc}
    1f7a:	46c0      	nop			; (mov r8, r8)

00001f7c <__aeabi_uidivmod>:
    1f7c:	2900      	cmp	r1, #0
    1f7e:	d0f7      	beq.n	1f70 <__udivsi3+0x100>
    1f80:	e776      	b.n	1e70 <__udivsi3>
    1f82:	4770      	bx	lr

00001f84 <__divsi3>:
    1f84:	4603      	mov	r3, r0
    1f86:	430b      	orrs	r3, r1
    1f88:	d47f      	bmi.n	208a <STACK_SIZE+0x8a>
    1f8a:	2200      	movs	r2, #0
    1f8c:	0843      	lsrs	r3, r0, #1
    1f8e:	428b      	cmp	r3, r1
    1f90:	d374      	bcc.n	207c <STACK_SIZE+0x7c>
    1f92:	0903      	lsrs	r3, r0, #4
    1f94:	428b      	cmp	r3, r1
    1f96:	d35f      	bcc.n	2058 <STACK_SIZE+0x58>
    1f98:	0a03      	lsrs	r3, r0, #8
    1f9a:	428b      	cmp	r3, r1
    1f9c:	d344      	bcc.n	2028 <STACK_SIZE+0x28>
    1f9e:	0b03      	lsrs	r3, r0, #12
    1fa0:	428b      	cmp	r3, r1
    1fa2:	d328      	bcc.n	1ff6 <__divsi3+0x72>
    1fa4:	0c03      	lsrs	r3, r0, #16
    1fa6:	428b      	cmp	r3, r1
    1fa8:	d30d      	bcc.n	1fc6 <__divsi3+0x42>
    1faa:	22ff      	movs	r2, #255	; 0xff
    1fac:	0209      	lsls	r1, r1, #8
    1fae:	ba12      	rev	r2, r2
    1fb0:	0c03      	lsrs	r3, r0, #16
    1fb2:	428b      	cmp	r3, r1
    1fb4:	d302      	bcc.n	1fbc <__divsi3+0x38>
    1fb6:	1212      	asrs	r2, r2, #8
    1fb8:	0209      	lsls	r1, r1, #8
    1fba:	d065      	beq.n	2088 <STACK_SIZE+0x88>
    1fbc:	0b03      	lsrs	r3, r0, #12
    1fbe:	428b      	cmp	r3, r1
    1fc0:	d319      	bcc.n	1ff6 <__divsi3+0x72>
    1fc2:	e000      	b.n	1fc6 <__divsi3+0x42>
    1fc4:	0a09      	lsrs	r1, r1, #8
    1fc6:	0bc3      	lsrs	r3, r0, #15
    1fc8:	428b      	cmp	r3, r1
    1fca:	d301      	bcc.n	1fd0 <__divsi3+0x4c>
    1fcc:	03cb      	lsls	r3, r1, #15
    1fce:	1ac0      	subs	r0, r0, r3
    1fd0:	4152      	adcs	r2, r2
    1fd2:	0b83      	lsrs	r3, r0, #14
    1fd4:	428b      	cmp	r3, r1
    1fd6:	d301      	bcc.n	1fdc <__divsi3+0x58>
    1fd8:	038b      	lsls	r3, r1, #14
    1fda:	1ac0      	subs	r0, r0, r3
    1fdc:	4152      	adcs	r2, r2
    1fde:	0b43      	lsrs	r3, r0, #13
    1fe0:	428b      	cmp	r3, r1
    1fe2:	d301      	bcc.n	1fe8 <__divsi3+0x64>
    1fe4:	034b      	lsls	r3, r1, #13
    1fe6:	1ac0      	subs	r0, r0, r3
    1fe8:	4152      	adcs	r2, r2
    1fea:	0b03      	lsrs	r3, r0, #12
    1fec:	428b      	cmp	r3, r1
    1fee:	d301      	bcc.n	1ff4 <__divsi3+0x70>
    1ff0:	030b      	lsls	r3, r1, #12
    1ff2:	1ac0      	subs	r0, r0, r3
    1ff4:	4152      	adcs	r2, r2
    1ff6:	0ac3      	lsrs	r3, r0, #11
    1ff8:	428b      	cmp	r3, r1
    1ffa:	d301      	bcc.n	2000 <STACK_SIZE>
    1ffc:	02cb      	lsls	r3, r1, #11
    1ffe:	1ac0      	subs	r0, r0, r3
    2000:	4152      	adcs	r2, r2
    2002:	0a83      	lsrs	r3, r0, #10
    2004:	428b      	cmp	r3, r1
    2006:	d301      	bcc.n	200c <STACK_SIZE+0xc>
    2008:	028b      	lsls	r3, r1, #10
    200a:	1ac0      	subs	r0, r0, r3
    200c:	4152      	adcs	r2, r2
    200e:	0a43      	lsrs	r3, r0, #9
    2010:	428b      	cmp	r3, r1
    2012:	d301      	bcc.n	2018 <STACK_SIZE+0x18>
    2014:	024b      	lsls	r3, r1, #9
    2016:	1ac0      	subs	r0, r0, r3
    2018:	4152      	adcs	r2, r2
    201a:	0a03      	lsrs	r3, r0, #8
    201c:	428b      	cmp	r3, r1
    201e:	d301      	bcc.n	2024 <STACK_SIZE+0x24>
    2020:	020b      	lsls	r3, r1, #8
    2022:	1ac0      	subs	r0, r0, r3
    2024:	4152      	adcs	r2, r2
    2026:	d2cd      	bcs.n	1fc4 <__divsi3+0x40>
    2028:	09c3      	lsrs	r3, r0, #7
    202a:	428b      	cmp	r3, r1
    202c:	d301      	bcc.n	2032 <STACK_SIZE+0x32>
    202e:	01cb      	lsls	r3, r1, #7
    2030:	1ac0      	subs	r0, r0, r3
    2032:	4152      	adcs	r2, r2
    2034:	0983      	lsrs	r3, r0, #6
    2036:	428b      	cmp	r3, r1
    2038:	d301      	bcc.n	203e <STACK_SIZE+0x3e>
    203a:	018b      	lsls	r3, r1, #6
    203c:	1ac0      	subs	r0, r0, r3
    203e:	4152      	adcs	r2, r2
    2040:	0943      	lsrs	r3, r0, #5
    2042:	428b      	cmp	r3, r1
    2044:	d301      	bcc.n	204a <STACK_SIZE+0x4a>
    2046:	014b      	lsls	r3, r1, #5
    2048:	1ac0      	subs	r0, r0, r3
    204a:	4152      	adcs	r2, r2
    204c:	0903      	lsrs	r3, r0, #4
    204e:	428b      	cmp	r3, r1
    2050:	d301      	bcc.n	2056 <STACK_SIZE+0x56>
    2052:	010b      	lsls	r3, r1, #4
    2054:	1ac0      	subs	r0, r0, r3
    2056:	4152      	adcs	r2, r2
    2058:	08c3      	lsrs	r3, r0, #3
    205a:	428b      	cmp	r3, r1
    205c:	d301      	bcc.n	2062 <STACK_SIZE+0x62>
    205e:	00cb      	lsls	r3, r1, #3
    2060:	1ac0      	subs	r0, r0, r3
    2062:	4152      	adcs	r2, r2
    2064:	0883      	lsrs	r3, r0, #2
    2066:	428b      	cmp	r3, r1
    2068:	d301      	bcc.n	206e <STACK_SIZE+0x6e>
    206a:	008b      	lsls	r3, r1, #2
    206c:	1ac0      	subs	r0, r0, r3
    206e:	4152      	adcs	r2, r2
    2070:	0843      	lsrs	r3, r0, #1
    2072:	428b      	cmp	r3, r1
    2074:	d301      	bcc.n	207a <STACK_SIZE+0x7a>
    2076:	004b      	lsls	r3, r1, #1
    2078:	1ac0      	subs	r0, r0, r3
    207a:	4152      	adcs	r2, r2
    207c:	1a41      	subs	r1, r0, r1
    207e:	d200      	bcs.n	2082 <STACK_SIZE+0x82>
    2080:	4601      	mov	r1, r0
    2082:	4152      	adcs	r2, r2
    2084:	4610      	mov	r0, r2
    2086:	4770      	bx	lr
    2088:	e05d      	b.n	2146 <STACK_SIZE+0x146>
    208a:	0fca      	lsrs	r2, r1, #31
    208c:	d000      	beq.n	2090 <STACK_SIZE+0x90>
    208e:	4249      	negs	r1, r1
    2090:	1003      	asrs	r3, r0, #32
    2092:	d300      	bcc.n	2096 <STACK_SIZE+0x96>
    2094:	4240      	negs	r0, r0
    2096:	4053      	eors	r3, r2
    2098:	2200      	movs	r2, #0
    209a:	469c      	mov	ip, r3
    209c:	0903      	lsrs	r3, r0, #4
    209e:	428b      	cmp	r3, r1
    20a0:	d32d      	bcc.n	20fe <STACK_SIZE+0xfe>
    20a2:	0a03      	lsrs	r3, r0, #8
    20a4:	428b      	cmp	r3, r1
    20a6:	d312      	bcc.n	20ce <STACK_SIZE+0xce>
    20a8:	22fc      	movs	r2, #252	; 0xfc
    20aa:	0189      	lsls	r1, r1, #6
    20ac:	ba12      	rev	r2, r2
    20ae:	0a03      	lsrs	r3, r0, #8
    20b0:	428b      	cmp	r3, r1
    20b2:	d30c      	bcc.n	20ce <STACK_SIZE+0xce>
    20b4:	0189      	lsls	r1, r1, #6
    20b6:	1192      	asrs	r2, r2, #6
    20b8:	428b      	cmp	r3, r1
    20ba:	d308      	bcc.n	20ce <STACK_SIZE+0xce>
    20bc:	0189      	lsls	r1, r1, #6
    20be:	1192      	asrs	r2, r2, #6
    20c0:	428b      	cmp	r3, r1
    20c2:	d304      	bcc.n	20ce <STACK_SIZE+0xce>
    20c4:	0189      	lsls	r1, r1, #6
    20c6:	d03a      	beq.n	213e <STACK_SIZE+0x13e>
    20c8:	1192      	asrs	r2, r2, #6
    20ca:	e000      	b.n	20ce <STACK_SIZE+0xce>
    20cc:	0989      	lsrs	r1, r1, #6
    20ce:	09c3      	lsrs	r3, r0, #7
    20d0:	428b      	cmp	r3, r1
    20d2:	d301      	bcc.n	20d8 <STACK_SIZE+0xd8>
    20d4:	01cb      	lsls	r3, r1, #7
    20d6:	1ac0      	subs	r0, r0, r3
    20d8:	4152      	adcs	r2, r2
    20da:	0983      	lsrs	r3, r0, #6
    20dc:	428b      	cmp	r3, r1
    20de:	d301      	bcc.n	20e4 <STACK_SIZE+0xe4>
    20e0:	018b      	lsls	r3, r1, #6
    20e2:	1ac0      	subs	r0, r0, r3
    20e4:	4152      	adcs	r2, r2
    20e6:	0943      	lsrs	r3, r0, #5
    20e8:	428b      	cmp	r3, r1
    20ea:	d301      	bcc.n	20f0 <STACK_SIZE+0xf0>
    20ec:	014b      	lsls	r3, r1, #5
    20ee:	1ac0      	subs	r0, r0, r3
    20f0:	4152      	adcs	r2, r2
    20f2:	0903      	lsrs	r3, r0, #4
    20f4:	428b      	cmp	r3, r1
    20f6:	d301      	bcc.n	20fc <STACK_SIZE+0xfc>
    20f8:	010b      	lsls	r3, r1, #4
    20fa:	1ac0      	subs	r0, r0, r3
    20fc:	4152      	adcs	r2, r2
    20fe:	08c3      	lsrs	r3, r0, #3
    2100:	428b      	cmp	r3, r1
    2102:	d301      	bcc.n	2108 <STACK_SIZE+0x108>
    2104:	00cb      	lsls	r3, r1, #3
    2106:	1ac0      	subs	r0, r0, r3
    2108:	4152      	adcs	r2, r2
    210a:	0883      	lsrs	r3, r0, #2
    210c:	428b      	cmp	r3, r1
    210e:	d301      	bcc.n	2114 <STACK_SIZE+0x114>
    2110:	008b      	lsls	r3, r1, #2
    2112:	1ac0      	subs	r0, r0, r3
    2114:	4152      	adcs	r2, r2
    2116:	d2d9      	bcs.n	20cc <STACK_SIZE+0xcc>
    2118:	0843      	lsrs	r3, r0, #1
    211a:	428b      	cmp	r3, r1
    211c:	d301      	bcc.n	2122 <STACK_SIZE+0x122>
    211e:	004b      	lsls	r3, r1, #1
    2120:	1ac0      	subs	r0, r0, r3
    2122:	4152      	adcs	r2, r2
    2124:	1a41      	subs	r1, r0, r1
    2126:	d200      	bcs.n	212a <STACK_SIZE+0x12a>
    2128:	4601      	mov	r1, r0
    212a:	4663      	mov	r3, ip
    212c:	4152      	adcs	r2, r2
    212e:	105b      	asrs	r3, r3, #1
    2130:	4610      	mov	r0, r2
    2132:	d301      	bcc.n	2138 <STACK_SIZE+0x138>
    2134:	4240      	negs	r0, r0
    2136:	2b00      	cmp	r3, #0
    2138:	d500      	bpl.n	213c <STACK_SIZE+0x13c>
    213a:	4249      	negs	r1, r1
    213c:	4770      	bx	lr
    213e:	4663      	mov	r3, ip
    2140:	105b      	asrs	r3, r3, #1
    2142:	d300      	bcc.n	2146 <STACK_SIZE+0x146>
    2144:	4240      	negs	r0, r0
    2146:	b501      	push	{r0, lr}
    2148:	2000      	movs	r0, #0
    214a:	f000 f805 	bl	2158 <__aeabi_idiv0>
    214e:	bd02      	pop	{r1, pc}

00002150 <__aeabi_idivmod>:
    2150:	2900      	cmp	r1, #0
    2152:	d0f8      	beq.n	2146 <STACK_SIZE+0x146>
    2154:	e716      	b.n	1f84 <__divsi3>
    2156:	4770      	bx	lr

00002158 <__aeabi_idiv0>:
    2158:	4770      	bx	lr
    215a:	46c0      	nop			; (mov r8, r8)

0000215c <__ffssi2>:
    215c:	b510      	push	{r4, lr}
    215e:	2300      	movs	r3, #0
    2160:	2800      	cmp	r0, #0
    2162:	d002      	beq.n	216a <__ffssi2+0xe>
    2164:	f000 f804 	bl	2170 <__ctzsi2>
    2168:	1c43      	adds	r3, r0, #1
    216a:	0018      	movs	r0, r3
    216c:	bd10      	pop	{r4, pc}
    216e:	46c0      	nop			; (mov r8, r8)

00002170 <__ctzsi2>:
    2170:	4241      	negs	r1, r0
    2172:	4008      	ands	r0, r1
    2174:	211c      	movs	r1, #28
    2176:	2301      	movs	r3, #1
    2178:	041b      	lsls	r3, r3, #16
    217a:	4298      	cmp	r0, r3
    217c:	d301      	bcc.n	2182 <__ctzsi2+0x12>
    217e:	0c00      	lsrs	r0, r0, #16
    2180:	3910      	subs	r1, #16
    2182:	0a1b      	lsrs	r3, r3, #8
    2184:	4298      	cmp	r0, r3
    2186:	d301      	bcc.n	218c <__ctzsi2+0x1c>
    2188:	0a00      	lsrs	r0, r0, #8
    218a:	3908      	subs	r1, #8
    218c:	091b      	lsrs	r3, r3, #4
    218e:	4298      	cmp	r0, r3
    2190:	d301      	bcc.n	2196 <__ctzsi2+0x26>
    2192:	0900      	lsrs	r0, r0, #4
    2194:	3904      	subs	r1, #4
    2196:	a202      	add	r2, pc, #8	; (adr r2, 21a0 <__ctzsi2+0x30>)
    2198:	5c10      	ldrb	r0, [r2, r0]
    219a:	1a40      	subs	r0, r0, r1
    219c:	4770      	bx	lr
    219e:	46c0      	nop			; (mov r8, r8)
    21a0:	1d1d1c1b 	.word	0x1d1d1c1b
    21a4:	1e1e1e1e 	.word	0x1e1e1e1e
    21a8:	1f1f1f1f 	.word	0x1f1f1f1f
    21ac:	1f1f1f1f 	.word	0x1f1f1f1f

000021b0 <__libc_init_array>:
    21b0:	b570      	push	{r4, r5, r6, lr}
    21b2:	2600      	movs	r6, #0
    21b4:	4d0c      	ldr	r5, [pc, #48]	; (21e8 <__libc_init_array+0x38>)
    21b6:	4c0d      	ldr	r4, [pc, #52]	; (21ec <__libc_init_array+0x3c>)
    21b8:	1b64      	subs	r4, r4, r5
    21ba:	10a4      	asrs	r4, r4, #2
    21bc:	42a6      	cmp	r6, r4
    21be:	d109      	bne.n	21d4 <__libc_init_array+0x24>
    21c0:	2600      	movs	r6, #0
    21c2:	f001 fbe7 	bl	3994 <_init>
    21c6:	4d0a      	ldr	r5, [pc, #40]	; (21f0 <__libc_init_array+0x40>)
    21c8:	4c0a      	ldr	r4, [pc, #40]	; (21f4 <__libc_init_array+0x44>)
    21ca:	1b64      	subs	r4, r4, r5
    21cc:	10a4      	asrs	r4, r4, #2
    21ce:	42a6      	cmp	r6, r4
    21d0:	d105      	bne.n	21de <__libc_init_array+0x2e>
    21d2:	bd70      	pop	{r4, r5, r6, pc}
    21d4:	00b3      	lsls	r3, r6, #2
    21d6:	58eb      	ldr	r3, [r5, r3]
    21d8:	4798      	blx	r3
    21da:	3601      	adds	r6, #1
    21dc:	e7ee      	b.n	21bc <__libc_init_array+0xc>
    21de:	00b3      	lsls	r3, r6, #2
    21e0:	58eb      	ldr	r3, [r5, r3]
    21e2:	4798      	blx	r3
    21e4:	3601      	adds	r6, #1
    21e6:	e7f2      	b.n	21ce <__libc_init_array+0x1e>
    21e8:	000039a0 	.word	0x000039a0
    21ec:	000039a0 	.word	0x000039a0
    21f0:	000039a0 	.word	0x000039a0
    21f4:	000039a4 	.word	0x000039a4

000021f8 <memcpy>:
    21f8:	2300      	movs	r3, #0
    21fa:	b510      	push	{r4, lr}
    21fc:	429a      	cmp	r2, r3
    21fe:	d100      	bne.n	2202 <memcpy+0xa>
    2200:	bd10      	pop	{r4, pc}
    2202:	5ccc      	ldrb	r4, [r1, r3]
    2204:	54c4      	strb	r4, [r0, r3]
    2206:	3301      	adds	r3, #1
    2208:	e7f8      	b.n	21fc <memcpy+0x4>

0000220a <memmove>:
    220a:	b510      	push	{r4, lr}
    220c:	4288      	cmp	r0, r1
    220e:	d902      	bls.n	2216 <memmove+0xc>
    2210:	188b      	adds	r3, r1, r2
    2212:	4298      	cmp	r0, r3
    2214:	d308      	bcc.n	2228 <memmove+0x1e>
    2216:	2300      	movs	r3, #0
    2218:	429a      	cmp	r2, r3
    221a:	d007      	beq.n	222c <memmove+0x22>
    221c:	5ccc      	ldrb	r4, [r1, r3]
    221e:	54c4      	strb	r4, [r0, r3]
    2220:	3301      	adds	r3, #1
    2222:	e7f9      	b.n	2218 <memmove+0xe>
    2224:	5c8b      	ldrb	r3, [r1, r2]
    2226:	5483      	strb	r3, [r0, r2]
    2228:	3a01      	subs	r2, #1
    222a:	d2fb      	bcs.n	2224 <memmove+0x1a>
    222c:	bd10      	pop	{r4, pc}

0000222e <memset>:
    222e:	0003      	movs	r3, r0
    2230:	1882      	adds	r2, r0, r2
    2232:	4293      	cmp	r3, r2
    2234:	d100      	bne.n	2238 <memset+0xa>
    2236:	4770      	bx	lr
    2238:	7019      	strb	r1, [r3, #0]
    223a:	3301      	adds	r3, #1
    223c:	e7f9      	b.n	2232 <memset+0x4>
	...

00002240 <iprintf>:
    2240:	b40f      	push	{r0, r1, r2, r3}
    2242:	4b0b      	ldr	r3, [pc, #44]	; (2270 <iprintf+0x30>)
    2244:	b513      	push	{r0, r1, r4, lr}
    2246:	681c      	ldr	r4, [r3, #0]
    2248:	2c00      	cmp	r4, #0
    224a:	d005      	beq.n	2258 <iprintf+0x18>
    224c:	69a3      	ldr	r3, [r4, #24]
    224e:	2b00      	cmp	r3, #0
    2250:	d102      	bne.n	2258 <iprintf+0x18>
    2252:	0020      	movs	r0, r4
    2254:	f000 fa7a 	bl	274c <__sinit>
    2258:	ab05      	add	r3, sp, #20
    225a:	9a04      	ldr	r2, [sp, #16]
    225c:	68a1      	ldr	r1, [r4, #8]
    225e:	0020      	movs	r0, r4
    2260:	9301      	str	r3, [sp, #4]
    2262:	f000 fdab 	bl	2dbc <_vfiprintf_r>
    2266:	bc16      	pop	{r1, r2, r4}
    2268:	bc08      	pop	{r3}
    226a:	b004      	add	sp, #16
    226c:	4718      	bx	r3
    226e:	46c0      	nop			; (mov r8, r8)
    2270:	20000000 	.word	0x20000000

00002274 <_puts_r>:
    2274:	b570      	push	{r4, r5, r6, lr}
    2276:	0005      	movs	r5, r0
    2278:	000e      	movs	r6, r1
    227a:	2800      	cmp	r0, #0
    227c:	d004      	beq.n	2288 <_puts_r+0x14>
    227e:	6983      	ldr	r3, [r0, #24]
    2280:	2b00      	cmp	r3, #0
    2282:	d101      	bne.n	2288 <_puts_r+0x14>
    2284:	f000 fa62 	bl	274c <__sinit>
    2288:	69ab      	ldr	r3, [r5, #24]
    228a:	68ac      	ldr	r4, [r5, #8]
    228c:	2b00      	cmp	r3, #0
    228e:	d102      	bne.n	2296 <_puts_r+0x22>
    2290:	0028      	movs	r0, r5
    2292:	f000 fa5b 	bl	274c <__sinit>
    2296:	4b24      	ldr	r3, [pc, #144]	; (2328 <_puts_r+0xb4>)
    2298:	429c      	cmp	r4, r3
    229a:	d10f      	bne.n	22bc <_puts_r+0x48>
    229c:	686c      	ldr	r4, [r5, #4]
    229e:	89a3      	ldrh	r3, [r4, #12]
    22a0:	071b      	lsls	r3, r3, #28
    22a2:	d502      	bpl.n	22aa <_puts_r+0x36>
    22a4:	6923      	ldr	r3, [r4, #16]
    22a6:	2b00      	cmp	r3, #0
    22a8:	d120      	bne.n	22ec <_puts_r+0x78>
    22aa:	0021      	movs	r1, r4
    22ac:	0028      	movs	r0, r5
    22ae:	f000 f8df 	bl	2470 <__swsetup_r>
    22b2:	2800      	cmp	r0, #0
    22b4:	d01a      	beq.n	22ec <_puts_r+0x78>
    22b6:	2001      	movs	r0, #1
    22b8:	4240      	negs	r0, r0
    22ba:	bd70      	pop	{r4, r5, r6, pc}
    22bc:	4b1b      	ldr	r3, [pc, #108]	; (232c <_puts_r+0xb8>)
    22be:	429c      	cmp	r4, r3
    22c0:	d101      	bne.n	22c6 <_puts_r+0x52>
    22c2:	68ac      	ldr	r4, [r5, #8]
    22c4:	e7eb      	b.n	229e <_puts_r+0x2a>
    22c6:	4b1a      	ldr	r3, [pc, #104]	; (2330 <_puts_r+0xbc>)
    22c8:	429c      	cmp	r4, r3
    22ca:	d1e8      	bne.n	229e <_puts_r+0x2a>
    22cc:	68ec      	ldr	r4, [r5, #12]
    22ce:	e7e6      	b.n	229e <_puts_r+0x2a>
    22d0:	3b01      	subs	r3, #1
    22d2:	3601      	adds	r6, #1
    22d4:	60a3      	str	r3, [r4, #8]
    22d6:	2b00      	cmp	r3, #0
    22d8:	da04      	bge.n	22e4 <_puts_r+0x70>
    22da:	69a2      	ldr	r2, [r4, #24]
    22dc:	4293      	cmp	r3, r2
    22de:	db16      	blt.n	230e <_puts_r+0x9a>
    22e0:	290a      	cmp	r1, #10
    22e2:	d014      	beq.n	230e <_puts_r+0x9a>
    22e4:	6823      	ldr	r3, [r4, #0]
    22e6:	1c5a      	adds	r2, r3, #1
    22e8:	6022      	str	r2, [r4, #0]
    22ea:	7019      	strb	r1, [r3, #0]
    22ec:	7831      	ldrb	r1, [r6, #0]
    22ee:	68a3      	ldr	r3, [r4, #8]
    22f0:	2900      	cmp	r1, #0
    22f2:	d1ed      	bne.n	22d0 <_puts_r+0x5c>
    22f4:	3b01      	subs	r3, #1
    22f6:	60a3      	str	r3, [r4, #8]
    22f8:	2b00      	cmp	r3, #0
    22fa:	da0f      	bge.n	231c <_puts_r+0xa8>
    22fc:	0022      	movs	r2, r4
    22fe:	310a      	adds	r1, #10
    2300:	0028      	movs	r0, r5
    2302:	f000 f85f 	bl	23c4 <__swbuf_r>
    2306:	1c43      	adds	r3, r0, #1
    2308:	d0d5      	beq.n	22b6 <_puts_r+0x42>
    230a:	200a      	movs	r0, #10
    230c:	e7d5      	b.n	22ba <_puts_r+0x46>
    230e:	0022      	movs	r2, r4
    2310:	0028      	movs	r0, r5
    2312:	f000 f857 	bl	23c4 <__swbuf_r>
    2316:	1c43      	adds	r3, r0, #1
    2318:	d1e8      	bne.n	22ec <_puts_r+0x78>
    231a:	e7cc      	b.n	22b6 <_puts_r+0x42>
    231c:	200a      	movs	r0, #10
    231e:	6823      	ldr	r3, [r4, #0]
    2320:	1c5a      	adds	r2, r3, #1
    2322:	6022      	str	r2, [r4, #0]
    2324:	7018      	strb	r0, [r3, #0]
    2326:	e7c8      	b.n	22ba <_puts_r+0x46>
    2328:	00003920 	.word	0x00003920
    232c:	00003940 	.word	0x00003940
    2330:	00003900 	.word	0x00003900

00002334 <puts>:
    2334:	b510      	push	{r4, lr}
    2336:	4b03      	ldr	r3, [pc, #12]	; (2344 <puts+0x10>)
    2338:	0001      	movs	r1, r0
    233a:	6818      	ldr	r0, [r3, #0]
    233c:	f7ff ff9a 	bl	2274 <_puts_r>
    2340:	bd10      	pop	{r4, pc}
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	20000000 	.word	0x20000000

00002348 <strlen>:
    2348:	2300      	movs	r3, #0
    234a:	5cc2      	ldrb	r2, [r0, r3]
    234c:	3301      	adds	r3, #1
    234e:	2a00      	cmp	r2, #0
    2350:	d1fb      	bne.n	234a <strlen+0x2>
    2352:	1e58      	subs	r0, r3, #1
    2354:	4770      	bx	lr

00002356 <_vsniprintf_r>:
    2356:	b530      	push	{r4, r5, lr}
    2358:	0014      	movs	r4, r2
    235a:	b09b      	sub	sp, #108	; 0x6c
    235c:	0005      	movs	r5, r0
    235e:	001a      	movs	r2, r3
    2360:	2c00      	cmp	r4, #0
    2362:	da05      	bge.n	2370 <_vsniprintf_r+0x1a>
    2364:	238b      	movs	r3, #139	; 0x8b
    2366:	6003      	str	r3, [r0, #0]
    2368:	2001      	movs	r0, #1
    236a:	4240      	negs	r0, r0
    236c:	b01b      	add	sp, #108	; 0x6c
    236e:	bd30      	pop	{r4, r5, pc}
    2370:	2382      	movs	r3, #130	; 0x82
    2372:	4668      	mov	r0, sp
    2374:	009b      	lsls	r3, r3, #2
    2376:	8183      	strh	r3, [r0, #12]
    2378:	2300      	movs	r3, #0
    237a:	9100      	str	r1, [sp, #0]
    237c:	9104      	str	r1, [sp, #16]
    237e:	429c      	cmp	r4, r3
    2380:	d000      	beq.n	2384 <_vsniprintf_r+0x2e>
    2382:	1e63      	subs	r3, r4, #1
    2384:	9302      	str	r3, [sp, #8]
    2386:	9305      	str	r3, [sp, #20]
    2388:	2301      	movs	r3, #1
    238a:	4669      	mov	r1, sp
    238c:	425b      	negs	r3, r3
    238e:	81cb      	strh	r3, [r1, #14]
    2390:	0028      	movs	r0, r5
    2392:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2394:	f000 fbe6 	bl	2b64 <_svfiprintf_r>
    2398:	1c43      	adds	r3, r0, #1
    239a:	da01      	bge.n	23a0 <_vsniprintf_r+0x4a>
    239c:	238b      	movs	r3, #139	; 0x8b
    239e:	602b      	str	r3, [r5, #0]
    23a0:	2c00      	cmp	r4, #0
    23a2:	d0e3      	beq.n	236c <_vsniprintf_r+0x16>
    23a4:	2300      	movs	r3, #0
    23a6:	9a00      	ldr	r2, [sp, #0]
    23a8:	7013      	strb	r3, [r2, #0]
    23aa:	e7df      	b.n	236c <_vsniprintf_r+0x16>

000023ac <vsniprintf>:
    23ac:	b507      	push	{r0, r1, r2, lr}
    23ae:	9300      	str	r3, [sp, #0]
    23b0:	0013      	movs	r3, r2
    23b2:	000a      	movs	r2, r1
    23b4:	0001      	movs	r1, r0
    23b6:	4802      	ldr	r0, [pc, #8]	; (23c0 <vsniprintf+0x14>)
    23b8:	6800      	ldr	r0, [r0, #0]
    23ba:	f7ff ffcc 	bl	2356 <_vsniprintf_r>
    23be:	bd0e      	pop	{r1, r2, r3, pc}
    23c0:	20000000 	.word	0x20000000

000023c4 <__swbuf_r>:
    23c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23c6:	0005      	movs	r5, r0
    23c8:	000e      	movs	r6, r1
    23ca:	0014      	movs	r4, r2
    23cc:	2800      	cmp	r0, #0
    23ce:	d004      	beq.n	23da <__swbuf_r+0x16>
    23d0:	6983      	ldr	r3, [r0, #24]
    23d2:	2b00      	cmp	r3, #0
    23d4:	d101      	bne.n	23da <__swbuf_r+0x16>
    23d6:	f000 f9b9 	bl	274c <__sinit>
    23da:	4b22      	ldr	r3, [pc, #136]	; (2464 <__swbuf_r+0xa0>)
    23dc:	429c      	cmp	r4, r3
    23de:	d12d      	bne.n	243c <__swbuf_r+0x78>
    23e0:	686c      	ldr	r4, [r5, #4]
    23e2:	69a3      	ldr	r3, [r4, #24]
    23e4:	60a3      	str	r3, [r4, #8]
    23e6:	89a3      	ldrh	r3, [r4, #12]
    23e8:	071b      	lsls	r3, r3, #28
    23ea:	d531      	bpl.n	2450 <__swbuf_r+0x8c>
    23ec:	6923      	ldr	r3, [r4, #16]
    23ee:	2b00      	cmp	r3, #0
    23f0:	d02e      	beq.n	2450 <__swbuf_r+0x8c>
    23f2:	6823      	ldr	r3, [r4, #0]
    23f4:	6922      	ldr	r2, [r4, #16]
    23f6:	b2f7      	uxtb	r7, r6
    23f8:	1a98      	subs	r0, r3, r2
    23fa:	6963      	ldr	r3, [r4, #20]
    23fc:	b2f6      	uxtb	r6, r6
    23fe:	4298      	cmp	r0, r3
    2400:	db05      	blt.n	240e <__swbuf_r+0x4a>
    2402:	0021      	movs	r1, r4
    2404:	0028      	movs	r0, r5
    2406:	f000 f933 	bl	2670 <_fflush_r>
    240a:	2800      	cmp	r0, #0
    240c:	d126      	bne.n	245c <__swbuf_r+0x98>
    240e:	68a3      	ldr	r3, [r4, #8]
    2410:	3001      	adds	r0, #1
    2412:	3b01      	subs	r3, #1
    2414:	60a3      	str	r3, [r4, #8]
    2416:	6823      	ldr	r3, [r4, #0]
    2418:	1c5a      	adds	r2, r3, #1
    241a:	6022      	str	r2, [r4, #0]
    241c:	701f      	strb	r7, [r3, #0]
    241e:	6963      	ldr	r3, [r4, #20]
    2420:	4298      	cmp	r0, r3
    2422:	d004      	beq.n	242e <__swbuf_r+0x6a>
    2424:	89a3      	ldrh	r3, [r4, #12]
    2426:	07db      	lsls	r3, r3, #31
    2428:	d51a      	bpl.n	2460 <__swbuf_r+0x9c>
    242a:	2e0a      	cmp	r6, #10
    242c:	d118      	bne.n	2460 <__swbuf_r+0x9c>
    242e:	0021      	movs	r1, r4
    2430:	0028      	movs	r0, r5
    2432:	f000 f91d 	bl	2670 <_fflush_r>
    2436:	2800      	cmp	r0, #0
    2438:	d012      	beq.n	2460 <__swbuf_r+0x9c>
    243a:	e00f      	b.n	245c <__swbuf_r+0x98>
    243c:	4b0a      	ldr	r3, [pc, #40]	; (2468 <__swbuf_r+0xa4>)
    243e:	429c      	cmp	r4, r3
    2440:	d101      	bne.n	2446 <__swbuf_r+0x82>
    2442:	68ac      	ldr	r4, [r5, #8]
    2444:	e7cd      	b.n	23e2 <__swbuf_r+0x1e>
    2446:	4b09      	ldr	r3, [pc, #36]	; (246c <__swbuf_r+0xa8>)
    2448:	429c      	cmp	r4, r3
    244a:	d1ca      	bne.n	23e2 <__swbuf_r+0x1e>
    244c:	68ec      	ldr	r4, [r5, #12]
    244e:	e7c8      	b.n	23e2 <__swbuf_r+0x1e>
    2450:	0021      	movs	r1, r4
    2452:	0028      	movs	r0, r5
    2454:	f000 f80c 	bl	2470 <__swsetup_r>
    2458:	2800      	cmp	r0, #0
    245a:	d0ca      	beq.n	23f2 <__swbuf_r+0x2e>
    245c:	2601      	movs	r6, #1
    245e:	4276      	negs	r6, r6
    2460:	0030      	movs	r0, r6
    2462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2464:	00003920 	.word	0x00003920
    2468:	00003940 	.word	0x00003940
    246c:	00003900 	.word	0x00003900

00002470 <__swsetup_r>:
    2470:	4b36      	ldr	r3, [pc, #216]	; (254c <__swsetup_r+0xdc>)
    2472:	b570      	push	{r4, r5, r6, lr}
    2474:	681d      	ldr	r5, [r3, #0]
    2476:	0006      	movs	r6, r0
    2478:	000c      	movs	r4, r1
    247a:	2d00      	cmp	r5, #0
    247c:	d005      	beq.n	248a <__swsetup_r+0x1a>
    247e:	69ab      	ldr	r3, [r5, #24]
    2480:	2b00      	cmp	r3, #0
    2482:	d102      	bne.n	248a <__swsetup_r+0x1a>
    2484:	0028      	movs	r0, r5
    2486:	f000 f961 	bl	274c <__sinit>
    248a:	4b31      	ldr	r3, [pc, #196]	; (2550 <__swsetup_r+0xe0>)
    248c:	429c      	cmp	r4, r3
    248e:	d10f      	bne.n	24b0 <__swsetup_r+0x40>
    2490:	686c      	ldr	r4, [r5, #4]
    2492:	230c      	movs	r3, #12
    2494:	5ee2      	ldrsh	r2, [r4, r3]
    2496:	b293      	uxth	r3, r2
    2498:	0719      	lsls	r1, r3, #28
    249a:	d42d      	bmi.n	24f8 <__swsetup_r+0x88>
    249c:	06d9      	lsls	r1, r3, #27
    249e:	d411      	bmi.n	24c4 <__swsetup_r+0x54>
    24a0:	2309      	movs	r3, #9
    24a2:	2001      	movs	r0, #1
    24a4:	6033      	str	r3, [r6, #0]
    24a6:	3337      	adds	r3, #55	; 0x37
    24a8:	4313      	orrs	r3, r2
    24aa:	81a3      	strh	r3, [r4, #12]
    24ac:	4240      	negs	r0, r0
    24ae:	bd70      	pop	{r4, r5, r6, pc}
    24b0:	4b28      	ldr	r3, [pc, #160]	; (2554 <__swsetup_r+0xe4>)
    24b2:	429c      	cmp	r4, r3
    24b4:	d101      	bne.n	24ba <__swsetup_r+0x4a>
    24b6:	68ac      	ldr	r4, [r5, #8]
    24b8:	e7eb      	b.n	2492 <__swsetup_r+0x22>
    24ba:	4b27      	ldr	r3, [pc, #156]	; (2558 <__swsetup_r+0xe8>)
    24bc:	429c      	cmp	r4, r3
    24be:	d1e8      	bne.n	2492 <__swsetup_r+0x22>
    24c0:	68ec      	ldr	r4, [r5, #12]
    24c2:	e7e6      	b.n	2492 <__swsetup_r+0x22>
    24c4:	075b      	lsls	r3, r3, #29
    24c6:	d513      	bpl.n	24f0 <__swsetup_r+0x80>
    24c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    24ca:	2900      	cmp	r1, #0
    24cc:	d008      	beq.n	24e0 <__swsetup_r+0x70>
    24ce:	0023      	movs	r3, r4
    24d0:	3344      	adds	r3, #68	; 0x44
    24d2:	4299      	cmp	r1, r3
    24d4:	d002      	beq.n	24dc <__swsetup_r+0x6c>
    24d6:	0030      	movs	r0, r6
    24d8:	f000 fa3a 	bl	2950 <_free_r>
    24dc:	2300      	movs	r3, #0
    24de:	6363      	str	r3, [r4, #52]	; 0x34
    24e0:	2224      	movs	r2, #36	; 0x24
    24e2:	89a3      	ldrh	r3, [r4, #12]
    24e4:	4393      	bics	r3, r2
    24e6:	81a3      	strh	r3, [r4, #12]
    24e8:	2300      	movs	r3, #0
    24ea:	6063      	str	r3, [r4, #4]
    24ec:	6923      	ldr	r3, [r4, #16]
    24ee:	6023      	str	r3, [r4, #0]
    24f0:	2308      	movs	r3, #8
    24f2:	89a2      	ldrh	r2, [r4, #12]
    24f4:	4313      	orrs	r3, r2
    24f6:	81a3      	strh	r3, [r4, #12]
    24f8:	6923      	ldr	r3, [r4, #16]
    24fa:	2b00      	cmp	r3, #0
    24fc:	d10b      	bne.n	2516 <__swsetup_r+0xa6>
    24fe:	21a0      	movs	r1, #160	; 0xa0
    2500:	2280      	movs	r2, #128	; 0x80
    2502:	89a3      	ldrh	r3, [r4, #12]
    2504:	0089      	lsls	r1, r1, #2
    2506:	0092      	lsls	r2, r2, #2
    2508:	400b      	ands	r3, r1
    250a:	4293      	cmp	r3, r2
    250c:	d003      	beq.n	2516 <__swsetup_r+0xa6>
    250e:	0021      	movs	r1, r4
    2510:	0030      	movs	r0, r6
    2512:	f000 f9d9 	bl	28c8 <__smakebuf_r>
    2516:	2301      	movs	r3, #1
    2518:	89a2      	ldrh	r2, [r4, #12]
    251a:	4013      	ands	r3, r2
    251c:	d011      	beq.n	2542 <__swsetup_r+0xd2>
    251e:	2300      	movs	r3, #0
    2520:	60a3      	str	r3, [r4, #8]
    2522:	6963      	ldr	r3, [r4, #20]
    2524:	425b      	negs	r3, r3
    2526:	61a3      	str	r3, [r4, #24]
    2528:	2000      	movs	r0, #0
    252a:	6923      	ldr	r3, [r4, #16]
    252c:	4283      	cmp	r3, r0
    252e:	d1be      	bne.n	24ae <__swsetup_r+0x3e>
    2530:	230c      	movs	r3, #12
    2532:	5ee2      	ldrsh	r2, [r4, r3]
    2534:	0613      	lsls	r3, r2, #24
    2536:	d5ba      	bpl.n	24ae <__swsetup_r+0x3e>
    2538:	2340      	movs	r3, #64	; 0x40
    253a:	4313      	orrs	r3, r2
    253c:	81a3      	strh	r3, [r4, #12]
    253e:	3801      	subs	r0, #1
    2540:	e7b5      	b.n	24ae <__swsetup_r+0x3e>
    2542:	0792      	lsls	r2, r2, #30
    2544:	d400      	bmi.n	2548 <__swsetup_r+0xd8>
    2546:	6963      	ldr	r3, [r4, #20]
    2548:	60a3      	str	r3, [r4, #8]
    254a:	e7ed      	b.n	2528 <__swsetup_r+0xb8>
    254c:	20000000 	.word	0x20000000
    2550:	00003920 	.word	0x00003920
    2554:	00003940 	.word	0x00003940
    2558:	00003900 	.word	0x00003900

0000255c <__sflush_r>:
    255c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    255e:	898a      	ldrh	r2, [r1, #12]
    2560:	0005      	movs	r5, r0
    2562:	000c      	movs	r4, r1
    2564:	0713      	lsls	r3, r2, #28
    2566:	d460      	bmi.n	262a <__sflush_r+0xce>
    2568:	684b      	ldr	r3, [r1, #4]
    256a:	2b00      	cmp	r3, #0
    256c:	dc04      	bgt.n	2578 <__sflush_r+0x1c>
    256e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2570:	2b00      	cmp	r3, #0
    2572:	dc01      	bgt.n	2578 <__sflush_r+0x1c>
    2574:	2000      	movs	r0, #0
    2576:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2578:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    257a:	2f00      	cmp	r7, #0
    257c:	d0fa      	beq.n	2574 <__sflush_r+0x18>
    257e:	2300      	movs	r3, #0
    2580:	682e      	ldr	r6, [r5, #0]
    2582:	602b      	str	r3, [r5, #0]
    2584:	2380      	movs	r3, #128	; 0x80
    2586:	015b      	lsls	r3, r3, #5
    2588:	401a      	ands	r2, r3
    258a:	d034      	beq.n	25f6 <__sflush_r+0x9a>
    258c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    258e:	89a3      	ldrh	r3, [r4, #12]
    2590:	075b      	lsls	r3, r3, #29
    2592:	d506      	bpl.n	25a2 <__sflush_r+0x46>
    2594:	6863      	ldr	r3, [r4, #4]
    2596:	1ac0      	subs	r0, r0, r3
    2598:	6b63      	ldr	r3, [r4, #52]	; 0x34
    259a:	2b00      	cmp	r3, #0
    259c:	d001      	beq.n	25a2 <__sflush_r+0x46>
    259e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    25a0:	1ac0      	subs	r0, r0, r3
    25a2:	0002      	movs	r2, r0
    25a4:	6a21      	ldr	r1, [r4, #32]
    25a6:	2300      	movs	r3, #0
    25a8:	0028      	movs	r0, r5
    25aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    25ac:	47b8      	blx	r7
    25ae:	89a1      	ldrh	r1, [r4, #12]
    25b0:	1c43      	adds	r3, r0, #1
    25b2:	d106      	bne.n	25c2 <__sflush_r+0x66>
    25b4:	682b      	ldr	r3, [r5, #0]
    25b6:	2b1d      	cmp	r3, #29
    25b8:	d831      	bhi.n	261e <__sflush_r+0xc2>
    25ba:	4a2c      	ldr	r2, [pc, #176]	; (266c <__sflush_r+0x110>)
    25bc:	40da      	lsrs	r2, r3
    25be:	07d3      	lsls	r3, r2, #31
    25c0:	d52d      	bpl.n	261e <__sflush_r+0xc2>
    25c2:	2300      	movs	r3, #0
    25c4:	6063      	str	r3, [r4, #4]
    25c6:	6923      	ldr	r3, [r4, #16]
    25c8:	6023      	str	r3, [r4, #0]
    25ca:	04cb      	lsls	r3, r1, #19
    25cc:	d505      	bpl.n	25da <__sflush_r+0x7e>
    25ce:	1c43      	adds	r3, r0, #1
    25d0:	d102      	bne.n	25d8 <__sflush_r+0x7c>
    25d2:	682b      	ldr	r3, [r5, #0]
    25d4:	2b00      	cmp	r3, #0
    25d6:	d100      	bne.n	25da <__sflush_r+0x7e>
    25d8:	6560      	str	r0, [r4, #84]	; 0x54
    25da:	6b61      	ldr	r1, [r4, #52]	; 0x34
    25dc:	602e      	str	r6, [r5, #0]
    25de:	2900      	cmp	r1, #0
    25e0:	d0c8      	beq.n	2574 <__sflush_r+0x18>
    25e2:	0023      	movs	r3, r4
    25e4:	3344      	adds	r3, #68	; 0x44
    25e6:	4299      	cmp	r1, r3
    25e8:	d002      	beq.n	25f0 <__sflush_r+0x94>
    25ea:	0028      	movs	r0, r5
    25ec:	f000 f9b0 	bl	2950 <_free_r>
    25f0:	2000      	movs	r0, #0
    25f2:	6360      	str	r0, [r4, #52]	; 0x34
    25f4:	e7bf      	b.n	2576 <__sflush_r+0x1a>
    25f6:	2301      	movs	r3, #1
    25f8:	6a21      	ldr	r1, [r4, #32]
    25fa:	0028      	movs	r0, r5
    25fc:	47b8      	blx	r7
    25fe:	1c43      	adds	r3, r0, #1
    2600:	d1c5      	bne.n	258e <__sflush_r+0x32>
    2602:	682b      	ldr	r3, [r5, #0]
    2604:	2b00      	cmp	r3, #0
    2606:	d0c2      	beq.n	258e <__sflush_r+0x32>
    2608:	2b1d      	cmp	r3, #29
    260a:	d001      	beq.n	2610 <__sflush_r+0xb4>
    260c:	2b16      	cmp	r3, #22
    260e:	d101      	bne.n	2614 <__sflush_r+0xb8>
    2610:	602e      	str	r6, [r5, #0]
    2612:	e7af      	b.n	2574 <__sflush_r+0x18>
    2614:	2340      	movs	r3, #64	; 0x40
    2616:	89a2      	ldrh	r2, [r4, #12]
    2618:	4313      	orrs	r3, r2
    261a:	81a3      	strh	r3, [r4, #12]
    261c:	e7ab      	b.n	2576 <__sflush_r+0x1a>
    261e:	2340      	movs	r3, #64	; 0x40
    2620:	430b      	orrs	r3, r1
    2622:	2001      	movs	r0, #1
    2624:	81a3      	strh	r3, [r4, #12]
    2626:	4240      	negs	r0, r0
    2628:	e7a5      	b.n	2576 <__sflush_r+0x1a>
    262a:	690f      	ldr	r7, [r1, #16]
    262c:	2f00      	cmp	r7, #0
    262e:	d0a1      	beq.n	2574 <__sflush_r+0x18>
    2630:	680b      	ldr	r3, [r1, #0]
    2632:	600f      	str	r7, [r1, #0]
    2634:	1bdb      	subs	r3, r3, r7
    2636:	9301      	str	r3, [sp, #4]
    2638:	2300      	movs	r3, #0
    263a:	0792      	lsls	r2, r2, #30
    263c:	d100      	bne.n	2640 <__sflush_r+0xe4>
    263e:	694b      	ldr	r3, [r1, #20]
    2640:	60a3      	str	r3, [r4, #8]
    2642:	9b01      	ldr	r3, [sp, #4]
    2644:	2b00      	cmp	r3, #0
    2646:	dc00      	bgt.n	264a <__sflush_r+0xee>
    2648:	e794      	b.n	2574 <__sflush_r+0x18>
    264a:	9b01      	ldr	r3, [sp, #4]
    264c:	003a      	movs	r2, r7
    264e:	6a21      	ldr	r1, [r4, #32]
    2650:	0028      	movs	r0, r5
    2652:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2654:	47b0      	blx	r6
    2656:	2800      	cmp	r0, #0
    2658:	dc03      	bgt.n	2662 <__sflush_r+0x106>
    265a:	2340      	movs	r3, #64	; 0x40
    265c:	89a2      	ldrh	r2, [r4, #12]
    265e:	4313      	orrs	r3, r2
    2660:	e7df      	b.n	2622 <__sflush_r+0xc6>
    2662:	9b01      	ldr	r3, [sp, #4]
    2664:	183f      	adds	r7, r7, r0
    2666:	1a1b      	subs	r3, r3, r0
    2668:	9301      	str	r3, [sp, #4]
    266a:	e7ea      	b.n	2642 <__sflush_r+0xe6>
    266c:	20400001 	.word	0x20400001

00002670 <_fflush_r>:
    2670:	690b      	ldr	r3, [r1, #16]
    2672:	b570      	push	{r4, r5, r6, lr}
    2674:	0005      	movs	r5, r0
    2676:	000c      	movs	r4, r1
    2678:	2b00      	cmp	r3, #0
    267a:	d101      	bne.n	2680 <_fflush_r+0x10>
    267c:	2000      	movs	r0, #0
    267e:	bd70      	pop	{r4, r5, r6, pc}
    2680:	2800      	cmp	r0, #0
    2682:	d004      	beq.n	268e <_fflush_r+0x1e>
    2684:	6983      	ldr	r3, [r0, #24]
    2686:	2b00      	cmp	r3, #0
    2688:	d101      	bne.n	268e <_fflush_r+0x1e>
    268a:	f000 f85f 	bl	274c <__sinit>
    268e:	4b0b      	ldr	r3, [pc, #44]	; (26bc <_fflush_r+0x4c>)
    2690:	429c      	cmp	r4, r3
    2692:	d109      	bne.n	26a8 <_fflush_r+0x38>
    2694:	686c      	ldr	r4, [r5, #4]
    2696:	220c      	movs	r2, #12
    2698:	5ea3      	ldrsh	r3, [r4, r2]
    269a:	2b00      	cmp	r3, #0
    269c:	d0ee      	beq.n	267c <_fflush_r+0xc>
    269e:	0021      	movs	r1, r4
    26a0:	0028      	movs	r0, r5
    26a2:	f7ff ff5b 	bl	255c <__sflush_r>
    26a6:	e7ea      	b.n	267e <_fflush_r+0xe>
    26a8:	4b05      	ldr	r3, [pc, #20]	; (26c0 <_fflush_r+0x50>)
    26aa:	429c      	cmp	r4, r3
    26ac:	d101      	bne.n	26b2 <_fflush_r+0x42>
    26ae:	68ac      	ldr	r4, [r5, #8]
    26b0:	e7f1      	b.n	2696 <_fflush_r+0x26>
    26b2:	4b04      	ldr	r3, [pc, #16]	; (26c4 <_fflush_r+0x54>)
    26b4:	429c      	cmp	r4, r3
    26b6:	d1ee      	bne.n	2696 <_fflush_r+0x26>
    26b8:	68ec      	ldr	r4, [r5, #12]
    26ba:	e7ec      	b.n	2696 <_fflush_r+0x26>
    26bc:	00003920 	.word	0x00003920
    26c0:	00003940 	.word	0x00003940
    26c4:	00003900 	.word	0x00003900

000026c8 <_cleanup_r>:
    26c8:	b510      	push	{r4, lr}
    26ca:	4902      	ldr	r1, [pc, #8]	; (26d4 <_cleanup_r+0xc>)
    26cc:	f000 f8b2 	bl	2834 <_fwalk_reent>
    26d0:	bd10      	pop	{r4, pc}
    26d2:	46c0      	nop			; (mov r8, r8)
    26d4:	00002671 	.word	0x00002671

000026d8 <std.isra.0>:
    26d8:	2300      	movs	r3, #0
    26da:	b510      	push	{r4, lr}
    26dc:	0004      	movs	r4, r0
    26de:	6003      	str	r3, [r0, #0]
    26e0:	6043      	str	r3, [r0, #4]
    26e2:	6083      	str	r3, [r0, #8]
    26e4:	8181      	strh	r1, [r0, #12]
    26e6:	6643      	str	r3, [r0, #100]	; 0x64
    26e8:	81c2      	strh	r2, [r0, #14]
    26ea:	6103      	str	r3, [r0, #16]
    26ec:	6143      	str	r3, [r0, #20]
    26ee:	6183      	str	r3, [r0, #24]
    26f0:	0019      	movs	r1, r3
    26f2:	2208      	movs	r2, #8
    26f4:	305c      	adds	r0, #92	; 0x5c
    26f6:	f7ff fd9a 	bl	222e <memset>
    26fa:	4b05      	ldr	r3, [pc, #20]	; (2710 <std.isra.0+0x38>)
    26fc:	6224      	str	r4, [r4, #32]
    26fe:	6263      	str	r3, [r4, #36]	; 0x24
    2700:	4b04      	ldr	r3, [pc, #16]	; (2714 <std.isra.0+0x3c>)
    2702:	62a3      	str	r3, [r4, #40]	; 0x28
    2704:	4b04      	ldr	r3, [pc, #16]	; (2718 <std.isra.0+0x40>)
    2706:	62e3      	str	r3, [r4, #44]	; 0x2c
    2708:	4b04      	ldr	r3, [pc, #16]	; (271c <std.isra.0+0x44>)
    270a:	6323      	str	r3, [r4, #48]	; 0x30
    270c:	bd10      	pop	{r4, pc}
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	00003329 	.word	0x00003329
    2714:	00003351 	.word	0x00003351
    2718:	00003389 	.word	0x00003389
    271c:	000033b5 	.word	0x000033b5

00002720 <__sfmoreglue>:
    2720:	b570      	push	{r4, r5, r6, lr}
    2722:	2568      	movs	r5, #104	; 0x68
    2724:	1e4a      	subs	r2, r1, #1
    2726:	4355      	muls	r5, r2
    2728:	000e      	movs	r6, r1
    272a:	0029      	movs	r1, r5
    272c:	3174      	adds	r1, #116	; 0x74
    272e:	f000 f959 	bl	29e4 <_malloc_r>
    2732:	1e04      	subs	r4, r0, #0
    2734:	d008      	beq.n	2748 <__sfmoreglue+0x28>
    2736:	2100      	movs	r1, #0
    2738:	002a      	movs	r2, r5
    273a:	6001      	str	r1, [r0, #0]
    273c:	6046      	str	r6, [r0, #4]
    273e:	300c      	adds	r0, #12
    2740:	60a0      	str	r0, [r4, #8]
    2742:	3268      	adds	r2, #104	; 0x68
    2744:	f7ff fd73 	bl	222e <memset>
    2748:	0020      	movs	r0, r4
    274a:	bd70      	pop	{r4, r5, r6, pc}

0000274c <__sinit>:
    274c:	6983      	ldr	r3, [r0, #24]
    274e:	b513      	push	{r0, r1, r4, lr}
    2750:	0004      	movs	r4, r0
    2752:	2b00      	cmp	r3, #0
    2754:	d128      	bne.n	27a8 <__sinit+0x5c>
    2756:	6483      	str	r3, [r0, #72]	; 0x48
    2758:	64c3      	str	r3, [r0, #76]	; 0x4c
    275a:	6503      	str	r3, [r0, #80]	; 0x50
    275c:	4b13      	ldr	r3, [pc, #76]	; (27ac <__sinit+0x60>)
    275e:	4a14      	ldr	r2, [pc, #80]	; (27b0 <__sinit+0x64>)
    2760:	681b      	ldr	r3, [r3, #0]
    2762:	6282      	str	r2, [r0, #40]	; 0x28
    2764:	9301      	str	r3, [sp, #4]
    2766:	4298      	cmp	r0, r3
    2768:	d101      	bne.n	276e <__sinit+0x22>
    276a:	2301      	movs	r3, #1
    276c:	6183      	str	r3, [r0, #24]
    276e:	0020      	movs	r0, r4
    2770:	f000 f820 	bl	27b4 <__sfp>
    2774:	6060      	str	r0, [r4, #4]
    2776:	0020      	movs	r0, r4
    2778:	f000 f81c 	bl	27b4 <__sfp>
    277c:	60a0      	str	r0, [r4, #8]
    277e:	0020      	movs	r0, r4
    2780:	f000 f818 	bl	27b4 <__sfp>
    2784:	2200      	movs	r2, #0
    2786:	60e0      	str	r0, [r4, #12]
    2788:	2104      	movs	r1, #4
    278a:	6860      	ldr	r0, [r4, #4]
    278c:	f7ff ffa4 	bl	26d8 <std.isra.0>
    2790:	2201      	movs	r2, #1
    2792:	2109      	movs	r1, #9
    2794:	68a0      	ldr	r0, [r4, #8]
    2796:	f7ff ff9f 	bl	26d8 <std.isra.0>
    279a:	2202      	movs	r2, #2
    279c:	2112      	movs	r1, #18
    279e:	68e0      	ldr	r0, [r4, #12]
    27a0:	f7ff ff9a 	bl	26d8 <std.isra.0>
    27a4:	2301      	movs	r3, #1
    27a6:	61a3      	str	r3, [r4, #24]
    27a8:	bd13      	pop	{r0, r1, r4, pc}
    27aa:	46c0      	nop			; (mov r8, r8)
    27ac:	000038fc 	.word	0x000038fc
    27b0:	000026c9 	.word	0x000026c9

000027b4 <__sfp>:
    27b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27b6:	4b1e      	ldr	r3, [pc, #120]	; (2830 <__sfp+0x7c>)
    27b8:	0007      	movs	r7, r0
    27ba:	681e      	ldr	r6, [r3, #0]
    27bc:	69b3      	ldr	r3, [r6, #24]
    27be:	2b00      	cmp	r3, #0
    27c0:	d102      	bne.n	27c8 <__sfp+0x14>
    27c2:	0030      	movs	r0, r6
    27c4:	f7ff ffc2 	bl	274c <__sinit>
    27c8:	3648      	adds	r6, #72	; 0x48
    27ca:	68b4      	ldr	r4, [r6, #8]
    27cc:	6873      	ldr	r3, [r6, #4]
    27ce:	3b01      	subs	r3, #1
    27d0:	d504      	bpl.n	27dc <__sfp+0x28>
    27d2:	6833      	ldr	r3, [r6, #0]
    27d4:	2b00      	cmp	r3, #0
    27d6:	d007      	beq.n	27e8 <__sfp+0x34>
    27d8:	6836      	ldr	r6, [r6, #0]
    27da:	e7f6      	b.n	27ca <__sfp+0x16>
    27dc:	220c      	movs	r2, #12
    27de:	5ea5      	ldrsh	r5, [r4, r2]
    27e0:	2d00      	cmp	r5, #0
    27e2:	d00d      	beq.n	2800 <__sfp+0x4c>
    27e4:	3468      	adds	r4, #104	; 0x68
    27e6:	e7f2      	b.n	27ce <__sfp+0x1a>
    27e8:	2104      	movs	r1, #4
    27ea:	0038      	movs	r0, r7
    27ec:	f7ff ff98 	bl	2720 <__sfmoreglue>
    27f0:	6030      	str	r0, [r6, #0]
    27f2:	2800      	cmp	r0, #0
    27f4:	d1f0      	bne.n	27d8 <__sfp+0x24>
    27f6:	230c      	movs	r3, #12
    27f8:	0004      	movs	r4, r0
    27fa:	603b      	str	r3, [r7, #0]
    27fc:	0020      	movs	r0, r4
    27fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2800:	2301      	movs	r3, #1
    2802:	0020      	movs	r0, r4
    2804:	425b      	negs	r3, r3
    2806:	81e3      	strh	r3, [r4, #14]
    2808:	3302      	adds	r3, #2
    280a:	81a3      	strh	r3, [r4, #12]
    280c:	6665      	str	r5, [r4, #100]	; 0x64
    280e:	6025      	str	r5, [r4, #0]
    2810:	60a5      	str	r5, [r4, #8]
    2812:	6065      	str	r5, [r4, #4]
    2814:	6125      	str	r5, [r4, #16]
    2816:	6165      	str	r5, [r4, #20]
    2818:	61a5      	str	r5, [r4, #24]
    281a:	2208      	movs	r2, #8
    281c:	0029      	movs	r1, r5
    281e:	305c      	adds	r0, #92	; 0x5c
    2820:	f7ff fd05 	bl	222e <memset>
    2824:	6365      	str	r5, [r4, #52]	; 0x34
    2826:	63a5      	str	r5, [r4, #56]	; 0x38
    2828:	64a5      	str	r5, [r4, #72]	; 0x48
    282a:	64e5      	str	r5, [r4, #76]	; 0x4c
    282c:	e7e6      	b.n	27fc <__sfp+0x48>
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	000038fc 	.word	0x000038fc

00002834 <_fwalk_reent>:
    2834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2836:	0004      	movs	r4, r0
    2838:	0007      	movs	r7, r0
    283a:	2600      	movs	r6, #0
    283c:	9101      	str	r1, [sp, #4]
    283e:	3448      	adds	r4, #72	; 0x48
    2840:	2c00      	cmp	r4, #0
    2842:	d101      	bne.n	2848 <_fwalk_reent+0x14>
    2844:	0030      	movs	r0, r6
    2846:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2848:	6863      	ldr	r3, [r4, #4]
    284a:	68a5      	ldr	r5, [r4, #8]
    284c:	9300      	str	r3, [sp, #0]
    284e:	9b00      	ldr	r3, [sp, #0]
    2850:	3b01      	subs	r3, #1
    2852:	9300      	str	r3, [sp, #0]
    2854:	d501      	bpl.n	285a <_fwalk_reent+0x26>
    2856:	6824      	ldr	r4, [r4, #0]
    2858:	e7f2      	b.n	2840 <_fwalk_reent+0xc>
    285a:	89ab      	ldrh	r3, [r5, #12]
    285c:	2b01      	cmp	r3, #1
    285e:	d908      	bls.n	2872 <_fwalk_reent+0x3e>
    2860:	220e      	movs	r2, #14
    2862:	5eab      	ldrsh	r3, [r5, r2]
    2864:	3301      	adds	r3, #1
    2866:	d004      	beq.n	2872 <_fwalk_reent+0x3e>
    2868:	0029      	movs	r1, r5
    286a:	0038      	movs	r0, r7
    286c:	9b01      	ldr	r3, [sp, #4]
    286e:	4798      	blx	r3
    2870:	4306      	orrs	r6, r0
    2872:	3568      	adds	r5, #104	; 0x68
    2874:	e7eb      	b.n	284e <_fwalk_reent+0x1a>
	...

00002878 <__swhatbuf_r>:
    2878:	b570      	push	{r4, r5, r6, lr}
    287a:	000e      	movs	r6, r1
    287c:	001d      	movs	r5, r3
    287e:	230e      	movs	r3, #14
    2880:	5ec9      	ldrsh	r1, [r1, r3]
    2882:	b090      	sub	sp, #64	; 0x40
    2884:	0014      	movs	r4, r2
    2886:	2900      	cmp	r1, #0
    2888:	da07      	bge.n	289a <__swhatbuf_r+0x22>
    288a:	2300      	movs	r3, #0
    288c:	602b      	str	r3, [r5, #0]
    288e:	89b3      	ldrh	r3, [r6, #12]
    2890:	061b      	lsls	r3, r3, #24
    2892:	d411      	bmi.n	28b8 <__swhatbuf_r+0x40>
    2894:	2380      	movs	r3, #128	; 0x80
    2896:	00db      	lsls	r3, r3, #3
    2898:	e00f      	b.n	28ba <__swhatbuf_r+0x42>
    289a:	aa01      	add	r2, sp, #4
    289c:	f000 fdb6 	bl	340c <_fstat_r>
    28a0:	2800      	cmp	r0, #0
    28a2:	dbf2      	blt.n	288a <__swhatbuf_r+0x12>
    28a4:	22f0      	movs	r2, #240	; 0xf0
    28a6:	9b02      	ldr	r3, [sp, #8]
    28a8:	0212      	lsls	r2, r2, #8
    28aa:	4013      	ands	r3, r2
    28ac:	4a05      	ldr	r2, [pc, #20]	; (28c4 <__swhatbuf_r+0x4c>)
    28ae:	189b      	adds	r3, r3, r2
    28b0:	425a      	negs	r2, r3
    28b2:	4153      	adcs	r3, r2
    28b4:	602b      	str	r3, [r5, #0]
    28b6:	e7ed      	b.n	2894 <__swhatbuf_r+0x1c>
    28b8:	2340      	movs	r3, #64	; 0x40
    28ba:	2000      	movs	r0, #0
    28bc:	6023      	str	r3, [r4, #0]
    28be:	b010      	add	sp, #64	; 0x40
    28c0:	bd70      	pop	{r4, r5, r6, pc}
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	ffffe000 	.word	0xffffe000

000028c8 <__smakebuf_r>:
    28c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    28ca:	2602      	movs	r6, #2
    28cc:	898b      	ldrh	r3, [r1, #12]
    28ce:	0005      	movs	r5, r0
    28d0:	000c      	movs	r4, r1
    28d2:	4233      	tst	r3, r6
    28d4:	d006      	beq.n	28e4 <__smakebuf_r+0x1c>
    28d6:	0023      	movs	r3, r4
    28d8:	3347      	adds	r3, #71	; 0x47
    28da:	6023      	str	r3, [r4, #0]
    28dc:	6123      	str	r3, [r4, #16]
    28de:	2301      	movs	r3, #1
    28e0:	6163      	str	r3, [r4, #20]
    28e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    28e4:	ab01      	add	r3, sp, #4
    28e6:	466a      	mov	r2, sp
    28e8:	f7ff ffc6 	bl	2878 <__swhatbuf_r>
    28ec:	9900      	ldr	r1, [sp, #0]
    28ee:	0007      	movs	r7, r0
    28f0:	0028      	movs	r0, r5
    28f2:	f000 f877 	bl	29e4 <_malloc_r>
    28f6:	2800      	cmp	r0, #0
    28f8:	d108      	bne.n	290c <__smakebuf_r+0x44>
    28fa:	220c      	movs	r2, #12
    28fc:	5ea3      	ldrsh	r3, [r4, r2]
    28fe:	059a      	lsls	r2, r3, #22
    2900:	d4ef      	bmi.n	28e2 <__smakebuf_r+0x1a>
    2902:	2203      	movs	r2, #3
    2904:	4393      	bics	r3, r2
    2906:	431e      	orrs	r6, r3
    2908:	81a6      	strh	r6, [r4, #12]
    290a:	e7e4      	b.n	28d6 <__smakebuf_r+0xe>
    290c:	4b0f      	ldr	r3, [pc, #60]	; (294c <__smakebuf_r+0x84>)
    290e:	62ab      	str	r3, [r5, #40]	; 0x28
    2910:	2380      	movs	r3, #128	; 0x80
    2912:	89a2      	ldrh	r2, [r4, #12]
    2914:	6020      	str	r0, [r4, #0]
    2916:	4313      	orrs	r3, r2
    2918:	81a3      	strh	r3, [r4, #12]
    291a:	9b00      	ldr	r3, [sp, #0]
    291c:	6120      	str	r0, [r4, #16]
    291e:	6163      	str	r3, [r4, #20]
    2920:	9b01      	ldr	r3, [sp, #4]
    2922:	2b00      	cmp	r3, #0
    2924:	d00d      	beq.n	2942 <__smakebuf_r+0x7a>
    2926:	230e      	movs	r3, #14
    2928:	5ee1      	ldrsh	r1, [r4, r3]
    292a:	0028      	movs	r0, r5
    292c:	f000 fd80 	bl	3430 <_isatty_r>
    2930:	2800      	cmp	r0, #0
    2932:	d006      	beq.n	2942 <__smakebuf_r+0x7a>
    2934:	2203      	movs	r2, #3
    2936:	89a3      	ldrh	r3, [r4, #12]
    2938:	4393      	bics	r3, r2
    293a:	001a      	movs	r2, r3
    293c:	2301      	movs	r3, #1
    293e:	4313      	orrs	r3, r2
    2940:	81a3      	strh	r3, [r4, #12]
    2942:	89a0      	ldrh	r0, [r4, #12]
    2944:	4338      	orrs	r0, r7
    2946:	81a0      	strh	r0, [r4, #12]
    2948:	e7cb      	b.n	28e2 <__smakebuf_r+0x1a>
    294a:	46c0      	nop			; (mov r8, r8)
    294c:	000026c9 	.word	0x000026c9

00002950 <_free_r>:
    2950:	b570      	push	{r4, r5, r6, lr}
    2952:	0005      	movs	r5, r0
    2954:	2900      	cmp	r1, #0
    2956:	d010      	beq.n	297a <_free_r+0x2a>
    2958:	1f0c      	subs	r4, r1, #4
    295a:	6823      	ldr	r3, [r4, #0]
    295c:	2b00      	cmp	r3, #0
    295e:	da00      	bge.n	2962 <_free_r+0x12>
    2960:	18e4      	adds	r4, r4, r3
    2962:	0028      	movs	r0, r5
    2964:	f000 fd95 	bl	3492 <__malloc_lock>
    2968:	4a1d      	ldr	r2, [pc, #116]	; (29e0 <_free_r+0x90>)
    296a:	6813      	ldr	r3, [r2, #0]
    296c:	2b00      	cmp	r3, #0
    296e:	d105      	bne.n	297c <_free_r+0x2c>
    2970:	6063      	str	r3, [r4, #4]
    2972:	6014      	str	r4, [r2, #0]
    2974:	0028      	movs	r0, r5
    2976:	f000 fd8d 	bl	3494 <__malloc_unlock>
    297a:	bd70      	pop	{r4, r5, r6, pc}
    297c:	42a3      	cmp	r3, r4
    297e:	d909      	bls.n	2994 <_free_r+0x44>
    2980:	6821      	ldr	r1, [r4, #0]
    2982:	1860      	adds	r0, r4, r1
    2984:	4283      	cmp	r3, r0
    2986:	d1f3      	bne.n	2970 <_free_r+0x20>
    2988:	6818      	ldr	r0, [r3, #0]
    298a:	685b      	ldr	r3, [r3, #4]
    298c:	1841      	adds	r1, r0, r1
    298e:	6021      	str	r1, [r4, #0]
    2990:	e7ee      	b.n	2970 <_free_r+0x20>
    2992:	0013      	movs	r3, r2
    2994:	685a      	ldr	r2, [r3, #4]
    2996:	2a00      	cmp	r2, #0
    2998:	d001      	beq.n	299e <_free_r+0x4e>
    299a:	42a2      	cmp	r2, r4
    299c:	d9f9      	bls.n	2992 <_free_r+0x42>
    299e:	6819      	ldr	r1, [r3, #0]
    29a0:	1858      	adds	r0, r3, r1
    29a2:	42a0      	cmp	r0, r4
    29a4:	d10b      	bne.n	29be <_free_r+0x6e>
    29a6:	6820      	ldr	r0, [r4, #0]
    29a8:	1809      	adds	r1, r1, r0
    29aa:	1858      	adds	r0, r3, r1
    29ac:	6019      	str	r1, [r3, #0]
    29ae:	4282      	cmp	r2, r0
    29b0:	d1e0      	bne.n	2974 <_free_r+0x24>
    29b2:	6810      	ldr	r0, [r2, #0]
    29b4:	6852      	ldr	r2, [r2, #4]
    29b6:	1841      	adds	r1, r0, r1
    29b8:	6019      	str	r1, [r3, #0]
    29ba:	605a      	str	r2, [r3, #4]
    29bc:	e7da      	b.n	2974 <_free_r+0x24>
    29be:	42a0      	cmp	r0, r4
    29c0:	d902      	bls.n	29c8 <_free_r+0x78>
    29c2:	230c      	movs	r3, #12
    29c4:	602b      	str	r3, [r5, #0]
    29c6:	e7d5      	b.n	2974 <_free_r+0x24>
    29c8:	6821      	ldr	r1, [r4, #0]
    29ca:	1860      	adds	r0, r4, r1
    29cc:	4282      	cmp	r2, r0
    29ce:	d103      	bne.n	29d8 <_free_r+0x88>
    29d0:	6810      	ldr	r0, [r2, #0]
    29d2:	6852      	ldr	r2, [r2, #4]
    29d4:	1841      	adds	r1, r0, r1
    29d6:	6021      	str	r1, [r4, #0]
    29d8:	6062      	str	r2, [r4, #4]
    29da:	605c      	str	r4, [r3, #4]
    29dc:	e7ca      	b.n	2974 <_free_r+0x24>
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	2000066c 	.word	0x2000066c

000029e4 <_malloc_r>:
    29e4:	2303      	movs	r3, #3
    29e6:	b570      	push	{r4, r5, r6, lr}
    29e8:	1ccd      	adds	r5, r1, #3
    29ea:	439d      	bics	r5, r3
    29ec:	3508      	adds	r5, #8
    29ee:	0006      	movs	r6, r0
    29f0:	2d0c      	cmp	r5, #12
    29f2:	d21e      	bcs.n	2a32 <_malloc_r+0x4e>
    29f4:	250c      	movs	r5, #12
    29f6:	42a9      	cmp	r1, r5
    29f8:	d81d      	bhi.n	2a36 <_malloc_r+0x52>
    29fa:	0030      	movs	r0, r6
    29fc:	f000 fd49 	bl	3492 <__malloc_lock>
    2a00:	4a25      	ldr	r2, [pc, #148]	; (2a98 <_malloc_r+0xb4>)
    2a02:	6814      	ldr	r4, [r2, #0]
    2a04:	0021      	movs	r1, r4
    2a06:	2900      	cmp	r1, #0
    2a08:	d119      	bne.n	2a3e <_malloc_r+0x5a>
    2a0a:	4c24      	ldr	r4, [pc, #144]	; (2a9c <_malloc_r+0xb8>)
    2a0c:	6823      	ldr	r3, [r4, #0]
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d103      	bne.n	2a1a <_malloc_r+0x36>
    2a12:	0030      	movs	r0, r6
    2a14:	f000 fc76 	bl	3304 <_sbrk_r>
    2a18:	6020      	str	r0, [r4, #0]
    2a1a:	0029      	movs	r1, r5
    2a1c:	0030      	movs	r0, r6
    2a1e:	f000 fc71 	bl	3304 <_sbrk_r>
    2a22:	1c43      	adds	r3, r0, #1
    2a24:	d12c      	bne.n	2a80 <_malloc_r+0x9c>
    2a26:	230c      	movs	r3, #12
    2a28:	0030      	movs	r0, r6
    2a2a:	6033      	str	r3, [r6, #0]
    2a2c:	f000 fd32 	bl	3494 <__malloc_unlock>
    2a30:	e003      	b.n	2a3a <_malloc_r+0x56>
    2a32:	2d00      	cmp	r5, #0
    2a34:	dadf      	bge.n	29f6 <_malloc_r+0x12>
    2a36:	230c      	movs	r3, #12
    2a38:	6033      	str	r3, [r6, #0]
    2a3a:	2000      	movs	r0, #0
    2a3c:	bd70      	pop	{r4, r5, r6, pc}
    2a3e:	680b      	ldr	r3, [r1, #0]
    2a40:	1b5b      	subs	r3, r3, r5
    2a42:	d41a      	bmi.n	2a7a <_malloc_r+0x96>
    2a44:	2b0b      	cmp	r3, #11
    2a46:	d903      	bls.n	2a50 <_malloc_r+0x6c>
    2a48:	600b      	str	r3, [r1, #0]
    2a4a:	18cc      	adds	r4, r1, r3
    2a4c:	6025      	str	r5, [r4, #0]
    2a4e:	e003      	b.n	2a58 <_malloc_r+0x74>
    2a50:	428c      	cmp	r4, r1
    2a52:	d10e      	bne.n	2a72 <_malloc_r+0x8e>
    2a54:	6863      	ldr	r3, [r4, #4]
    2a56:	6013      	str	r3, [r2, #0]
    2a58:	0030      	movs	r0, r6
    2a5a:	f000 fd1b 	bl	3494 <__malloc_unlock>
    2a5e:	0020      	movs	r0, r4
    2a60:	2207      	movs	r2, #7
    2a62:	300b      	adds	r0, #11
    2a64:	1d23      	adds	r3, r4, #4
    2a66:	4390      	bics	r0, r2
    2a68:	1ac3      	subs	r3, r0, r3
    2a6a:	d0e7      	beq.n	2a3c <_malloc_r+0x58>
    2a6c:	425a      	negs	r2, r3
    2a6e:	50e2      	str	r2, [r4, r3]
    2a70:	e7e4      	b.n	2a3c <_malloc_r+0x58>
    2a72:	684b      	ldr	r3, [r1, #4]
    2a74:	6063      	str	r3, [r4, #4]
    2a76:	000c      	movs	r4, r1
    2a78:	e7ee      	b.n	2a58 <_malloc_r+0x74>
    2a7a:	000c      	movs	r4, r1
    2a7c:	6849      	ldr	r1, [r1, #4]
    2a7e:	e7c2      	b.n	2a06 <_malloc_r+0x22>
    2a80:	2303      	movs	r3, #3
    2a82:	1cc4      	adds	r4, r0, #3
    2a84:	439c      	bics	r4, r3
    2a86:	42a0      	cmp	r0, r4
    2a88:	d0e0      	beq.n	2a4c <_malloc_r+0x68>
    2a8a:	1a21      	subs	r1, r4, r0
    2a8c:	0030      	movs	r0, r6
    2a8e:	f000 fc39 	bl	3304 <_sbrk_r>
    2a92:	1c43      	adds	r3, r0, #1
    2a94:	d1da      	bne.n	2a4c <_malloc_r+0x68>
    2a96:	e7c6      	b.n	2a26 <_malloc_r+0x42>
    2a98:	2000066c 	.word	0x2000066c
    2a9c:	20000670 	.word	0x20000670

00002aa0 <__ssputs_r>:
    2aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aa2:	688e      	ldr	r6, [r1, #8]
    2aa4:	b085      	sub	sp, #20
    2aa6:	0007      	movs	r7, r0
    2aa8:	000c      	movs	r4, r1
    2aaa:	9203      	str	r2, [sp, #12]
    2aac:	9301      	str	r3, [sp, #4]
    2aae:	429e      	cmp	r6, r3
    2ab0:	d839      	bhi.n	2b26 <__ssputs_r+0x86>
    2ab2:	2390      	movs	r3, #144	; 0x90
    2ab4:	898a      	ldrh	r2, [r1, #12]
    2ab6:	00db      	lsls	r3, r3, #3
    2ab8:	421a      	tst	r2, r3
    2aba:	d034      	beq.n	2b26 <__ssputs_r+0x86>
    2abc:	2503      	movs	r5, #3
    2abe:	6909      	ldr	r1, [r1, #16]
    2ac0:	6823      	ldr	r3, [r4, #0]
    2ac2:	1a5b      	subs	r3, r3, r1
    2ac4:	9302      	str	r3, [sp, #8]
    2ac6:	6963      	ldr	r3, [r4, #20]
    2ac8:	9802      	ldr	r0, [sp, #8]
    2aca:	435d      	muls	r5, r3
    2acc:	0feb      	lsrs	r3, r5, #31
    2ace:	195d      	adds	r5, r3, r5
    2ad0:	9b01      	ldr	r3, [sp, #4]
    2ad2:	106d      	asrs	r5, r5, #1
    2ad4:	3301      	adds	r3, #1
    2ad6:	181b      	adds	r3, r3, r0
    2ad8:	42ab      	cmp	r3, r5
    2ada:	d900      	bls.n	2ade <__ssputs_r+0x3e>
    2adc:	001d      	movs	r5, r3
    2ade:	0553      	lsls	r3, r2, #21
    2ae0:	d532      	bpl.n	2b48 <__ssputs_r+0xa8>
    2ae2:	0029      	movs	r1, r5
    2ae4:	0038      	movs	r0, r7
    2ae6:	f7ff ff7d 	bl	29e4 <_malloc_r>
    2aea:	1e06      	subs	r6, r0, #0
    2aec:	d109      	bne.n	2b02 <__ssputs_r+0x62>
    2aee:	230c      	movs	r3, #12
    2af0:	603b      	str	r3, [r7, #0]
    2af2:	2340      	movs	r3, #64	; 0x40
    2af4:	2001      	movs	r0, #1
    2af6:	89a2      	ldrh	r2, [r4, #12]
    2af8:	4240      	negs	r0, r0
    2afa:	4313      	orrs	r3, r2
    2afc:	81a3      	strh	r3, [r4, #12]
    2afe:	b005      	add	sp, #20
    2b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b02:	9a02      	ldr	r2, [sp, #8]
    2b04:	6921      	ldr	r1, [r4, #16]
    2b06:	f7ff fb77 	bl	21f8 <memcpy>
    2b0a:	89a3      	ldrh	r3, [r4, #12]
    2b0c:	4a14      	ldr	r2, [pc, #80]	; (2b60 <__ssputs_r+0xc0>)
    2b0e:	401a      	ands	r2, r3
    2b10:	2380      	movs	r3, #128	; 0x80
    2b12:	4313      	orrs	r3, r2
    2b14:	81a3      	strh	r3, [r4, #12]
    2b16:	9b02      	ldr	r3, [sp, #8]
    2b18:	6126      	str	r6, [r4, #16]
    2b1a:	18f6      	adds	r6, r6, r3
    2b1c:	6026      	str	r6, [r4, #0]
    2b1e:	6165      	str	r5, [r4, #20]
    2b20:	9e01      	ldr	r6, [sp, #4]
    2b22:	1aed      	subs	r5, r5, r3
    2b24:	60a5      	str	r5, [r4, #8]
    2b26:	9b01      	ldr	r3, [sp, #4]
    2b28:	42b3      	cmp	r3, r6
    2b2a:	d200      	bcs.n	2b2e <__ssputs_r+0x8e>
    2b2c:	001e      	movs	r6, r3
    2b2e:	0032      	movs	r2, r6
    2b30:	9903      	ldr	r1, [sp, #12]
    2b32:	6820      	ldr	r0, [r4, #0]
    2b34:	f7ff fb69 	bl	220a <memmove>
    2b38:	68a3      	ldr	r3, [r4, #8]
    2b3a:	2000      	movs	r0, #0
    2b3c:	1b9b      	subs	r3, r3, r6
    2b3e:	60a3      	str	r3, [r4, #8]
    2b40:	6823      	ldr	r3, [r4, #0]
    2b42:	199e      	adds	r6, r3, r6
    2b44:	6026      	str	r6, [r4, #0]
    2b46:	e7da      	b.n	2afe <__ssputs_r+0x5e>
    2b48:	002a      	movs	r2, r5
    2b4a:	0038      	movs	r0, r7
    2b4c:	f000 fca3 	bl	3496 <_realloc_r>
    2b50:	1e06      	subs	r6, r0, #0
    2b52:	d1e0      	bne.n	2b16 <__ssputs_r+0x76>
    2b54:	6921      	ldr	r1, [r4, #16]
    2b56:	0038      	movs	r0, r7
    2b58:	f7ff fefa 	bl	2950 <_free_r>
    2b5c:	e7c7      	b.n	2aee <__ssputs_r+0x4e>
    2b5e:	46c0      	nop			; (mov r8, r8)
    2b60:	fffffb7f 	.word	0xfffffb7f

00002b64 <_svfiprintf_r>:
    2b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b66:	b09f      	sub	sp, #124	; 0x7c
    2b68:	9002      	str	r0, [sp, #8]
    2b6a:	9305      	str	r3, [sp, #20]
    2b6c:	898b      	ldrh	r3, [r1, #12]
    2b6e:	000f      	movs	r7, r1
    2b70:	0016      	movs	r6, r2
    2b72:	061b      	lsls	r3, r3, #24
    2b74:	d511      	bpl.n	2b9a <_svfiprintf_r+0x36>
    2b76:	690b      	ldr	r3, [r1, #16]
    2b78:	2b00      	cmp	r3, #0
    2b7a:	d10e      	bne.n	2b9a <_svfiprintf_r+0x36>
    2b7c:	2140      	movs	r1, #64	; 0x40
    2b7e:	f7ff ff31 	bl	29e4 <_malloc_r>
    2b82:	6038      	str	r0, [r7, #0]
    2b84:	6138      	str	r0, [r7, #16]
    2b86:	2800      	cmp	r0, #0
    2b88:	d105      	bne.n	2b96 <_svfiprintf_r+0x32>
    2b8a:	230c      	movs	r3, #12
    2b8c:	9a02      	ldr	r2, [sp, #8]
    2b8e:	3801      	subs	r0, #1
    2b90:	6013      	str	r3, [r2, #0]
    2b92:	b01f      	add	sp, #124	; 0x7c
    2b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b96:	2340      	movs	r3, #64	; 0x40
    2b98:	617b      	str	r3, [r7, #20]
    2b9a:	2300      	movs	r3, #0
    2b9c:	ad06      	add	r5, sp, #24
    2b9e:	616b      	str	r3, [r5, #20]
    2ba0:	3320      	adds	r3, #32
    2ba2:	766b      	strb	r3, [r5, #25]
    2ba4:	3310      	adds	r3, #16
    2ba6:	76ab      	strb	r3, [r5, #26]
    2ba8:	0034      	movs	r4, r6
    2baa:	7823      	ldrb	r3, [r4, #0]
    2bac:	2b00      	cmp	r3, #0
    2bae:	d147      	bne.n	2c40 <_svfiprintf_r+0xdc>
    2bb0:	1ba3      	subs	r3, r4, r6
    2bb2:	9304      	str	r3, [sp, #16]
    2bb4:	d00d      	beq.n	2bd2 <_svfiprintf_r+0x6e>
    2bb6:	1ba3      	subs	r3, r4, r6
    2bb8:	0032      	movs	r2, r6
    2bba:	0039      	movs	r1, r7
    2bbc:	9802      	ldr	r0, [sp, #8]
    2bbe:	f7ff ff6f 	bl	2aa0 <__ssputs_r>
    2bc2:	1c43      	adds	r3, r0, #1
    2bc4:	d100      	bne.n	2bc8 <_svfiprintf_r+0x64>
    2bc6:	e0b5      	b.n	2d34 <_svfiprintf_r+0x1d0>
    2bc8:	696a      	ldr	r2, [r5, #20]
    2bca:	9b04      	ldr	r3, [sp, #16]
    2bcc:	4694      	mov	ip, r2
    2bce:	4463      	add	r3, ip
    2bd0:	616b      	str	r3, [r5, #20]
    2bd2:	7823      	ldrb	r3, [r4, #0]
    2bd4:	2b00      	cmp	r3, #0
    2bd6:	d100      	bne.n	2bda <_svfiprintf_r+0x76>
    2bd8:	e0ac      	b.n	2d34 <_svfiprintf_r+0x1d0>
    2bda:	2201      	movs	r2, #1
    2bdc:	2300      	movs	r3, #0
    2bde:	4252      	negs	r2, r2
    2be0:	606a      	str	r2, [r5, #4]
    2be2:	a902      	add	r1, sp, #8
    2be4:	3254      	adds	r2, #84	; 0x54
    2be6:	1852      	adds	r2, r2, r1
    2be8:	3401      	adds	r4, #1
    2bea:	602b      	str	r3, [r5, #0]
    2bec:	60eb      	str	r3, [r5, #12]
    2bee:	60ab      	str	r3, [r5, #8]
    2bf0:	7013      	strb	r3, [r2, #0]
    2bf2:	65ab      	str	r3, [r5, #88]	; 0x58
    2bf4:	4e58      	ldr	r6, [pc, #352]	; (2d58 <_svfiprintf_r+0x1f4>)
    2bf6:	2205      	movs	r2, #5
    2bf8:	7821      	ldrb	r1, [r4, #0]
    2bfa:	0030      	movs	r0, r6
    2bfc:	f000 fc3e 	bl	347c <memchr>
    2c00:	1c62      	adds	r2, r4, #1
    2c02:	2800      	cmp	r0, #0
    2c04:	d120      	bne.n	2c48 <_svfiprintf_r+0xe4>
    2c06:	6829      	ldr	r1, [r5, #0]
    2c08:	06cb      	lsls	r3, r1, #27
    2c0a:	d504      	bpl.n	2c16 <_svfiprintf_r+0xb2>
    2c0c:	2353      	movs	r3, #83	; 0x53
    2c0e:	ae02      	add	r6, sp, #8
    2c10:	3020      	adds	r0, #32
    2c12:	199b      	adds	r3, r3, r6
    2c14:	7018      	strb	r0, [r3, #0]
    2c16:	070b      	lsls	r3, r1, #28
    2c18:	d504      	bpl.n	2c24 <_svfiprintf_r+0xc0>
    2c1a:	2353      	movs	r3, #83	; 0x53
    2c1c:	202b      	movs	r0, #43	; 0x2b
    2c1e:	ae02      	add	r6, sp, #8
    2c20:	199b      	adds	r3, r3, r6
    2c22:	7018      	strb	r0, [r3, #0]
    2c24:	7823      	ldrb	r3, [r4, #0]
    2c26:	2b2a      	cmp	r3, #42	; 0x2a
    2c28:	d016      	beq.n	2c58 <_svfiprintf_r+0xf4>
    2c2a:	2000      	movs	r0, #0
    2c2c:	210a      	movs	r1, #10
    2c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2c30:	7822      	ldrb	r2, [r4, #0]
    2c32:	3a30      	subs	r2, #48	; 0x30
    2c34:	2a09      	cmp	r2, #9
    2c36:	d955      	bls.n	2ce4 <_svfiprintf_r+0x180>
    2c38:	2800      	cmp	r0, #0
    2c3a:	d015      	beq.n	2c68 <_svfiprintf_r+0x104>
    2c3c:	9309      	str	r3, [sp, #36]	; 0x24
    2c3e:	e013      	b.n	2c68 <_svfiprintf_r+0x104>
    2c40:	2b25      	cmp	r3, #37	; 0x25
    2c42:	d0b5      	beq.n	2bb0 <_svfiprintf_r+0x4c>
    2c44:	3401      	adds	r4, #1
    2c46:	e7b0      	b.n	2baa <_svfiprintf_r+0x46>
    2c48:	2301      	movs	r3, #1
    2c4a:	1b80      	subs	r0, r0, r6
    2c4c:	4083      	lsls	r3, r0
    2c4e:	6829      	ldr	r1, [r5, #0]
    2c50:	0014      	movs	r4, r2
    2c52:	430b      	orrs	r3, r1
    2c54:	602b      	str	r3, [r5, #0]
    2c56:	e7cd      	b.n	2bf4 <_svfiprintf_r+0x90>
    2c58:	9b05      	ldr	r3, [sp, #20]
    2c5a:	1d18      	adds	r0, r3, #4
    2c5c:	681b      	ldr	r3, [r3, #0]
    2c5e:	9005      	str	r0, [sp, #20]
    2c60:	2b00      	cmp	r3, #0
    2c62:	db39      	blt.n	2cd8 <_svfiprintf_r+0x174>
    2c64:	9309      	str	r3, [sp, #36]	; 0x24
    2c66:	0014      	movs	r4, r2
    2c68:	7823      	ldrb	r3, [r4, #0]
    2c6a:	2b2e      	cmp	r3, #46	; 0x2e
    2c6c:	d10b      	bne.n	2c86 <_svfiprintf_r+0x122>
    2c6e:	7863      	ldrb	r3, [r4, #1]
    2c70:	1c62      	adds	r2, r4, #1
    2c72:	2b2a      	cmp	r3, #42	; 0x2a
    2c74:	d13e      	bne.n	2cf4 <_svfiprintf_r+0x190>
    2c76:	9b05      	ldr	r3, [sp, #20]
    2c78:	3402      	adds	r4, #2
    2c7a:	1d1a      	adds	r2, r3, #4
    2c7c:	681b      	ldr	r3, [r3, #0]
    2c7e:	9205      	str	r2, [sp, #20]
    2c80:	2b00      	cmp	r3, #0
    2c82:	db34      	blt.n	2cee <_svfiprintf_r+0x18a>
    2c84:	9307      	str	r3, [sp, #28]
    2c86:	4e35      	ldr	r6, [pc, #212]	; (2d5c <_svfiprintf_r+0x1f8>)
    2c88:	7821      	ldrb	r1, [r4, #0]
    2c8a:	2203      	movs	r2, #3
    2c8c:	0030      	movs	r0, r6
    2c8e:	f000 fbf5 	bl	347c <memchr>
    2c92:	2800      	cmp	r0, #0
    2c94:	d006      	beq.n	2ca4 <_svfiprintf_r+0x140>
    2c96:	2340      	movs	r3, #64	; 0x40
    2c98:	1b80      	subs	r0, r0, r6
    2c9a:	4083      	lsls	r3, r0
    2c9c:	682a      	ldr	r2, [r5, #0]
    2c9e:	3401      	adds	r4, #1
    2ca0:	4313      	orrs	r3, r2
    2ca2:	602b      	str	r3, [r5, #0]
    2ca4:	7821      	ldrb	r1, [r4, #0]
    2ca6:	2206      	movs	r2, #6
    2ca8:	482d      	ldr	r0, [pc, #180]	; (2d60 <_svfiprintf_r+0x1fc>)
    2caa:	1c66      	adds	r6, r4, #1
    2cac:	7629      	strb	r1, [r5, #24]
    2cae:	f000 fbe5 	bl	347c <memchr>
    2cb2:	2800      	cmp	r0, #0
    2cb4:	d046      	beq.n	2d44 <_svfiprintf_r+0x1e0>
    2cb6:	4b2b      	ldr	r3, [pc, #172]	; (2d64 <_svfiprintf_r+0x200>)
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d12f      	bne.n	2d1c <_svfiprintf_r+0x1b8>
    2cbc:	6829      	ldr	r1, [r5, #0]
    2cbe:	9b05      	ldr	r3, [sp, #20]
    2cc0:	2207      	movs	r2, #7
    2cc2:	05c9      	lsls	r1, r1, #23
    2cc4:	d528      	bpl.n	2d18 <_svfiprintf_r+0x1b4>
    2cc6:	189b      	adds	r3, r3, r2
    2cc8:	4393      	bics	r3, r2
    2cca:	3308      	adds	r3, #8
    2ccc:	9305      	str	r3, [sp, #20]
    2cce:	696b      	ldr	r3, [r5, #20]
    2cd0:	9a03      	ldr	r2, [sp, #12]
    2cd2:	189b      	adds	r3, r3, r2
    2cd4:	616b      	str	r3, [r5, #20]
    2cd6:	e767      	b.n	2ba8 <_svfiprintf_r+0x44>
    2cd8:	425b      	negs	r3, r3
    2cda:	60eb      	str	r3, [r5, #12]
    2cdc:	2302      	movs	r3, #2
    2cde:	430b      	orrs	r3, r1
    2ce0:	602b      	str	r3, [r5, #0]
    2ce2:	e7c0      	b.n	2c66 <_svfiprintf_r+0x102>
    2ce4:	434b      	muls	r3, r1
    2ce6:	3401      	adds	r4, #1
    2ce8:	189b      	adds	r3, r3, r2
    2cea:	2001      	movs	r0, #1
    2cec:	e7a0      	b.n	2c30 <_svfiprintf_r+0xcc>
    2cee:	2301      	movs	r3, #1
    2cf0:	425b      	negs	r3, r3
    2cf2:	e7c7      	b.n	2c84 <_svfiprintf_r+0x120>
    2cf4:	2300      	movs	r3, #0
    2cf6:	0014      	movs	r4, r2
    2cf8:	200a      	movs	r0, #10
    2cfa:	001a      	movs	r2, r3
    2cfc:	606b      	str	r3, [r5, #4]
    2cfe:	7821      	ldrb	r1, [r4, #0]
    2d00:	3930      	subs	r1, #48	; 0x30
    2d02:	2909      	cmp	r1, #9
    2d04:	d903      	bls.n	2d0e <_svfiprintf_r+0x1aa>
    2d06:	2b00      	cmp	r3, #0
    2d08:	d0bd      	beq.n	2c86 <_svfiprintf_r+0x122>
    2d0a:	9207      	str	r2, [sp, #28]
    2d0c:	e7bb      	b.n	2c86 <_svfiprintf_r+0x122>
    2d0e:	4342      	muls	r2, r0
    2d10:	3401      	adds	r4, #1
    2d12:	1852      	adds	r2, r2, r1
    2d14:	2301      	movs	r3, #1
    2d16:	e7f2      	b.n	2cfe <_svfiprintf_r+0x19a>
    2d18:	3307      	adds	r3, #7
    2d1a:	e7d5      	b.n	2cc8 <_svfiprintf_r+0x164>
    2d1c:	ab05      	add	r3, sp, #20
    2d1e:	9300      	str	r3, [sp, #0]
    2d20:	003a      	movs	r2, r7
    2d22:	4b11      	ldr	r3, [pc, #68]	; (2d68 <_svfiprintf_r+0x204>)
    2d24:	0029      	movs	r1, r5
    2d26:	9802      	ldr	r0, [sp, #8]
    2d28:	e000      	b.n	2d2c <_svfiprintf_r+0x1c8>
    2d2a:	bf00      	nop
    2d2c:	9003      	str	r0, [sp, #12]
    2d2e:	9b03      	ldr	r3, [sp, #12]
    2d30:	3301      	adds	r3, #1
    2d32:	d1cc      	bne.n	2cce <_svfiprintf_r+0x16a>
    2d34:	89bb      	ldrh	r3, [r7, #12]
    2d36:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2d38:	065b      	lsls	r3, r3, #25
    2d3a:	d400      	bmi.n	2d3e <_svfiprintf_r+0x1da>
    2d3c:	e729      	b.n	2b92 <_svfiprintf_r+0x2e>
    2d3e:	2001      	movs	r0, #1
    2d40:	4240      	negs	r0, r0
    2d42:	e726      	b.n	2b92 <_svfiprintf_r+0x2e>
    2d44:	ab05      	add	r3, sp, #20
    2d46:	9300      	str	r3, [sp, #0]
    2d48:	003a      	movs	r2, r7
    2d4a:	4b07      	ldr	r3, [pc, #28]	; (2d68 <_svfiprintf_r+0x204>)
    2d4c:	0029      	movs	r1, r5
    2d4e:	9802      	ldr	r0, [sp, #8]
    2d50:	f000 f9be 	bl	30d0 <_printf_i>
    2d54:	e7ea      	b.n	2d2c <_svfiprintf_r+0x1c8>
    2d56:	46c0      	nop			; (mov r8, r8)
    2d58:	00003960 	.word	0x00003960
    2d5c:	00003966 	.word	0x00003966
    2d60:	0000396a 	.word	0x0000396a
    2d64:	00000000 	.word	0x00000000
    2d68:	00002aa1 	.word	0x00002aa1

00002d6c <__sfputc_r>:
    2d6c:	6893      	ldr	r3, [r2, #8]
    2d6e:	b510      	push	{r4, lr}
    2d70:	3b01      	subs	r3, #1
    2d72:	6093      	str	r3, [r2, #8]
    2d74:	2b00      	cmp	r3, #0
    2d76:	da05      	bge.n	2d84 <__sfputc_r+0x18>
    2d78:	6994      	ldr	r4, [r2, #24]
    2d7a:	42a3      	cmp	r3, r4
    2d7c:	db08      	blt.n	2d90 <__sfputc_r+0x24>
    2d7e:	b2cb      	uxtb	r3, r1
    2d80:	2b0a      	cmp	r3, #10
    2d82:	d005      	beq.n	2d90 <__sfputc_r+0x24>
    2d84:	6813      	ldr	r3, [r2, #0]
    2d86:	1c58      	adds	r0, r3, #1
    2d88:	6010      	str	r0, [r2, #0]
    2d8a:	7019      	strb	r1, [r3, #0]
    2d8c:	b2c8      	uxtb	r0, r1
    2d8e:	bd10      	pop	{r4, pc}
    2d90:	f7ff fb18 	bl	23c4 <__swbuf_r>
    2d94:	e7fb      	b.n	2d8e <__sfputc_r+0x22>

00002d96 <__sfputs_r>:
    2d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d98:	0006      	movs	r6, r0
    2d9a:	000f      	movs	r7, r1
    2d9c:	0014      	movs	r4, r2
    2d9e:	18d5      	adds	r5, r2, r3
    2da0:	42ac      	cmp	r4, r5
    2da2:	d101      	bne.n	2da8 <__sfputs_r+0x12>
    2da4:	2000      	movs	r0, #0
    2da6:	e007      	b.n	2db8 <__sfputs_r+0x22>
    2da8:	7821      	ldrb	r1, [r4, #0]
    2daa:	003a      	movs	r2, r7
    2dac:	0030      	movs	r0, r6
    2dae:	f7ff ffdd 	bl	2d6c <__sfputc_r>
    2db2:	3401      	adds	r4, #1
    2db4:	1c43      	adds	r3, r0, #1
    2db6:	d1f3      	bne.n	2da0 <__sfputs_r+0xa>
    2db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00002dbc <_vfiprintf_r>:
    2dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dbe:	b09f      	sub	sp, #124	; 0x7c
    2dc0:	0006      	movs	r6, r0
    2dc2:	000f      	movs	r7, r1
    2dc4:	0014      	movs	r4, r2
    2dc6:	9305      	str	r3, [sp, #20]
    2dc8:	2800      	cmp	r0, #0
    2dca:	d004      	beq.n	2dd6 <_vfiprintf_r+0x1a>
    2dcc:	6983      	ldr	r3, [r0, #24]
    2dce:	2b00      	cmp	r3, #0
    2dd0:	d101      	bne.n	2dd6 <_vfiprintf_r+0x1a>
    2dd2:	f7ff fcbb 	bl	274c <__sinit>
    2dd6:	4b7f      	ldr	r3, [pc, #508]	; (2fd4 <_vfiprintf_r+0x218>)
    2dd8:	429f      	cmp	r7, r3
    2dda:	d15c      	bne.n	2e96 <_vfiprintf_r+0xda>
    2ddc:	6877      	ldr	r7, [r6, #4]
    2dde:	89bb      	ldrh	r3, [r7, #12]
    2de0:	071b      	lsls	r3, r3, #28
    2de2:	d562      	bpl.n	2eaa <_vfiprintf_r+0xee>
    2de4:	693b      	ldr	r3, [r7, #16]
    2de6:	2b00      	cmp	r3, #0
    2de8:	d05f      	beq.n	2eaa <_vfiprintf_r+0xee>
    2dea:	2300      	movs	r3, #0
    2dec:	ad06      	add	r5, sp, #24
    2dee:	616b      	str	r3, [r5, #20]
    2df0:	3320      	adds	r3, #32
    2df2:	766b      	strb	r3, [r5, #25]
    2df4:	3310      	adds	r3, #16
    2df6:	76ab      	strb	r3, [r5, #26]
    2df8:	9402      	str	r4, [sp, #8]
    2dfa:	9c02      	ldr	r4, [sp, #8]
    2dfc:	7823      	ldrb	r3, [r4, #0]
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d15d      	bne.n	2ebe <_vfiprintf_r+0x102>
    2e02:	9b02      	ldr	r3, [sp, #8]
    2e04:	1ae3      	subs	r3, r4, r3
    2e06:	9304      	str	r3, [sp, #16]
    2e08:	d00d      	beq.n	2e26 <_vfiprintf_r+0x6a>
    2e0a:	9b04      	ldr	r3, [sp, #16]
    2e0c:	9a02      	ldr	r2, [sp, #8]
    2e0e:	0039      	movs	r1, r7
    2e10:	0030      	movs	r0, r6
    2e12:	f7ff ffc0 	bl	2d96 <__sfputs_r>
    2e16:	1c43      	adds	r3, r0, #1
    2e18:	d100      	bne.n	2e1c <_vfiprintf_r+0x60>
    2e1a:	e0cc      	b.n	2fb6 <_vfiprintf_r+0x1fa>
    2e1c:	696a      	ldr	r2, [r5, #20]
    2e1e:	9b04      	ldr	r3, [sp, #16]
    2e20:	4694      	mov	ip, r2
    2e22:	4463      	add	r3, ip
    2e24:	616b      	str	r3, [r5, #20]
    2e26:	7823      	ldrb	r3, [r4, #0]
    2e28:	2b00      	cmp	r3, #0
    2e2a:	d100      	bne.n	2e2e <_vfiprintf_r+0x72>
    2e2c:	e0c3      	b.n	2fb6 <_vfiprintf_r+0x1fa>
    2e2e:	2201      	movs	r2, #1
    2e30:	2300      	movs	r3, #0
    2e32:	4252      	negs	r2, r2
    2e34:	606a      	str	r2, [r5, #4]
    2e36:	a902      	add	r1, sp, #8
    2e38:	3254      	adds	r2, #84	; 0x54
    2e3a:	1852      	adds	r2, r2, r1
    2e3c:	3401      	adds	r4, #1
    2e3e:	602b      	str	r3, [r5, #0]
    2e40:	60eb      	str	r3, [r5, #12]
    2e42:	60ab      	str	r3, [r5, #8]
    2e44:	7013      	strb	r3, [r2, #0]
    2e46:	65ab      	str	r3, [r5, #88]	; 0x58
    2e48:	7821      	ldrb	r1, [r4, #0]
    2e4a:	2205      	movs	r2, #5
    2e4c:	4862      	ldr	r0, [pc, #392]	; (2fd8 <_vfiprintf_r+0x21c>)
    2e4e:	f000 fb15 	bl	347c <memchr>
    2e52:	1c63      	adds	r3, r4, #1
    2e54:	469c      	mov	ip, r3
    2e56:	2800      	cmp	r0, #0
    2e58:	d135      	bne.n	2ec6 <_vfiprintf_r+0x10a>
    2e5a:	6829      	ldr	r1, [r5, #0]
    2e5c:	06cb      	lsls	r3, r1, #27
    2e5e:	d504      	bpl.n	2e6a <_vfiprintf_r+0xae>
    2e60:	2353      	movs	r3, #83	; 0x53
    2e62:	aa02      	add	r2, sp, #8
    2e64:	3020      	adds	r0, #32
    2e66:	189b      	adds	r3, r3, r2
    2e68:	7018      	strb	r0, [r3, #0]
    2e6a:	070b      	lsls	r3, r1, #28
    2e6c:	d504      	bpl.n	2e78 <_vfiprintf_r+0xbc>
    2e6e:	2353      	movs	r3, #83	; 0x53
    2e70:	202b      	movs	r0, #43	; 0x2b
    2e72:	aa02      	add	r2, sp, #8
    2e74:	189b      	adds	r3, r3, r2
    2e76:	7018      	strb	r0, [r3, #0]
    2e78:	7823      	ldrb	r3, [r4, #0]
    2e7a:	2b2a      	cmp	r3, #42	; 0x2a
    2e7c:	d02c      	beq.n	2ed8 <_vfiprintf_r+0x11c>
    2e7e:	2000      	movs	r0, #0
    2e80:	210a      	movs	r1, #10
    2e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e84:	7822      	ldrb	r2, [r4, #0]
    2e86:	3a30      	subs	r2, #48	; 0x30
    2e88:	2a09      	cmp	r2, #9
    2e8a:	d800      	bhi.n	2e8e <_vfiprintf_r+0xd2>
    2e8c:	e06b      	b.n	2f66 <_vfiprintf_r+0x1aa>
    2e8e:	2800      	cmp	r0, #0
    2e90:	d02a      	beq.n	2ee8 <_vfiprintf_r+0x12c>
    2e92:	9309      	str	r3, [sp, #36]	; 0x24
    2e94:	e028      	b.n	2ee8 <_vfiprintf_r+0x12c>
    2e96:	4b51      	ldr	r3, [pc, #324]	; (2fdc <_vfiprintf_r+0x220>)
    2e98:	429f      	cmp	r7, r3
    2e9a:	d101      	bne.n	2ea0 <_vfiprintf_r+0xe4>
    2e9c:	68b7      	ldr	r7, [r6, #8]
    2e9e:	e79e      	b.n	2dde <_vfiprintf_r+0x22>
    2ea0:	4b4f      	ldr	r3, [pc, #316]	; (2fe0 <_vfiprintf_r+0x224>)
    2ea2:	429f      	cmp	r7, r3
    2ea4:	d19b      	bne.n	2dde <_vfiprintf_r+0x22>
    2ea6:	68f7      	ldr	r7, [r6, #12]
    2ea8:	e799      	b.n	2dde <_vfiprintf_r+0x22>
    2eaa:	0039      	movs	r1, r7
    2eac:	0030      	movs	r0, r6
    2eae:	f7ff fadf 	bl	2470 <__swsetup_r>
    2eb2:	2800      	cmp	r0, #0
    2eb4:	d099      	beq.n	2dea <_vfiprintf_r+0x2e>
    2eb6:	2001      	movs	r0, #1
    2eb8:	4240      	negs	r0, r0
    2eba:	b01f      	add	sp, #124	; 0x7c
    2ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ebe:	2b25      	cmp	r3, #37	; 0x25
    2ec0:	d09f      	beq.n	2e02 <_vfiprintf_r+0x46>
    2ec2:	3401      	adds	r4, #1
    2ec4:	e79a      	b.n	2dfc <_vfiprintf_r+0x40>
    2ec6:	4b44      	ldr	r3, [pc, #272]	; (2fd8 <_vfiprintf_r+0x21c>)
    2ec8:	6829      	ldr	r1, [r5, #0]
    2eca:	1ac0      	subs	r0, r0, r3
    2ecc:	2301      	movs	r3, #1
    2ece:	4083      	lsls	r3, r0
    2ed0:	430b      	orrs	r3, r1
    2ed2:	602b      	str	r3, [r5, #0]
    2ed4:	4664      	mov	r4, ip
    2ed6:	e7b7      	b.n	2e48 <_vfiprintf_r+0x8c>
    2ed8:	9b05      	ldr	r3, [sp, #20]
    2eda:	1d18      	adds	r0, r3, #4
    2edc:	681b      	ldr	r3, [r3, #0]
    2ede:	9005      	str	r0, [sp, #20]
    2ee0:	2b00      	cmp	r3, #0
    2ee2:	db3a      	blt.n	2f5a <_vfiprintf_r+0x19e>
    2ee4:	9309      	str	r3, [sp, #36]	; 0x24
    2ee6:	4664      	mov	r4, ip
    2ee8:	7823      	ldrb	r3, [r4, #0]
    2eea:	2b2e      	cmp	r3, #46	; 0x2e
    2eec:	d10b      	bne.n	2f06 <_vfiprintf_r+0x14a>
    2eee:	7863      	ldrb	r3, [r4, #1]
    2ef0:	1c62      	adds	r2, r4, #1
    2ef2:	2b2a      	cmp	r3, #42	; 0x2a
    2ef4:	d13f      	bne.n	2f76 <_vfiprintf_r+0x1ba>
    2ef6:	9b05      	ldr	r3, [sp, #20]
    2ef8:	3402      	adds	r4, #2
    2efa:	1d1a      	adds	r2, r3, #4
    2efc:	681b      	ldr	r3, [r3, #0]
    2efe:	9205      	str	r2, [sp, #20]
    2f00:	2b00      	cmp	r3, #0
    2f02:	db35      	blt.n	2f70 <_vfiprintf_r+0x1b4>
    2f04:	9307      	str	r3, [sp, #28]
    2f06:	7821      	ldrb	r1, [r4, #0]
    2f08:	2203      	movs	r2, #3
    2f0a:	4836      	ldr	r0, [pc, #216]	; (2fe4 <_vfiprintf_r+0x228>)
    2f0c:	f000 fab6 	bl	347c <memchr>
    2f10:	2800      	cmp	r0, #0
    2f12:	d007      	beq.n	2f24 <_vfiprintf_r+0x168>
    2f14:	4b33      	ldr	r3, [pc, #204]	; (2fe4 <_vfiprintf_r+0x228>)
    2f16:	682a      	ldr	r2, [r5, #0]
    2f18:	1ac0      	subs	r0, r0, r3
    2f1a:	2340      	movs	r3, #64	; 0x40
    2f1c:	4083      	lsls	r3, r0
    2f1e:	4313      	orrs	r3, r2
    2f20:	602b      	str	r3, [r5, #0]
    2f22:	3401      	adds	r4, #1
    2f24:	7821      	ldrb	r1, [r4, #0]
    2f26:	1c63      	adds	r3, r4, #1
    2f28:	2206      	movs	r2, #6
    2f2a:	482f      	ldr	r0, [pc, #188]	; (2fe8 <_vfiprintf_r+0x22c>)
    2f2c:	9302      	str	r3, [sp, #8]
    2f2e:	7629      	strb	r1, [r5, #24]
    2f30:	f000 faa4 	bl	347c <memchr>
    2f34:	2800      	cmp	r0, #0
    2f36:	d044      	beq.n	2fc2 <_vfiprintf_r+0x206>
    2f38:	4b2c      	ldr	r3, [pc, #176]	; (2fec <_vfiprintf_r+0x230>)
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	d12f      	bne.n	2f9e <_vfiprintf_r+0x1e2>
    2f3e:	6829      	ldr	r1, [r5, #0]
    2f40:	9b05      	ldr	r3, [sp, #20]
    2f42:	2207      	movs	r2, #7
    2f44:	05c9      	lsls	r1, r1, #23
    2f46:	d528      	bpl.n	2f9a <_vfiprintf_r+0x1de>
    2f48:	189b      	adds	r3, r3, r2
    2f4a:	4393      	bics	r3, r2
    2f4c:	3308      	adds	r3, #8
    2f4e:	9305      	str	r3, [sp, #20]
    2f50:	696b      	ldr	r3, [r5, #20]
    2f52:	9a03      	ldr	r2, [sp, #12]
    2f54:	189b      	adds	r3, r3, r2
    2f56:	616b      	str	r3, [r5, #20]
    2f58:	e74f      	b.n	2dfa <_vfiprintf_r+0x3e>
    2f5a:	425b      	negs	r3, r3
    2f5c:	60eb      	str	r3, [r5, #12]
    2f5e:	2302      	movs	r3, #2
    2f60:	430b      	orrs	r3, r1
    2f62:	602b      	str	r3, [r5, #0]
    2f64:	e7bf      	b.n	2ee6 <_vfiprintf_r+0x12a>
    2f66:	434b      	muls	r3, r1
    2f68:	3401      	adds	r4, #1
    2f6a:	189b      	adds	r3, r3, r2
    2f6c:	2001      	movs	r0, #1
    2f6e:	e789      	b.n	2e84 <_vfiprintf_r+0xc8>
    2f70:	2301      	movs	r3, #1
    2f72:	425b      	negs	r3, r3
    2f74:	e7c6      	b.n	2f04 <_vfiprintf_r+0x148>
    2f76:	2300      	movs	r3, #0
    2f78:	0014      	movs	r4, r2
    2f7a:	200a      	movs	r0, #10
    2f7c:	001a      	movs	r2, r3
    2f7e:	606b      	str	r3, [r5, #4]
    2f80:	7821      	ldrb	r1, [r4, #0]
    2f82:	3930      	subs	r1, #48	; 0x30
    2f84:	2909      	cmp	r1, #9
    2f86:	d903      	bls.n	2f90 <_vfiprintf_r+0x1d4>
    2f88:	2b00      	cmp	r3, #0
    2f8a:	d0bc      	beq.n	2f06 <_vfiprintf_r+0x14a>
    2f8c:	9207      	str	r2, [sp, #28]
    2f8e:	e7ba      	b.n	2f06 <_vfiprintf_r+0x14a>
    2f90:	4342      	muls	r2, r0
    2f92:	3401      	adds	r4, #1
    2f94:	1852      	adds	r2, r2, r1
    2f96:	2301      	movs	r3, #1
    2f98:	e7f2      	b.n	2f80 <_vfiprintf_r+0x1c4>
    2f9a:	3307      	adds	r3, #7
    2f9c:	e7d5      	b.n	2f4a <_vfiprintf_r+0x18e>
    2f9e:	ab05      	add	r3, sp, #20
    2fa0:	9300      	str	r3, [sp, #0]
    2fa2:	003a      	movs	r2, r7
    2fa4:	4b12      	ldr	r3, [pc, #72]	; (2ff0 <_vfiprintf_r+0x234>)
    2fa6:	0029      	movs	r1, r5
    2fa8:	0030      	movs	r0, r6
    2faa:	e000      	b.n	2fae <_vfiprintf_r+0x1f2>
    2fac:	bf00      	nop
    2fae:	9003      	str	r0, [sp, #12]
    2fb0:	9b03      	ldr	r3, [sp, #12]
    2fb2:	3301      	adds	r3, #1
    2fb4:	d1cc      	bne.n	2f50 <_vfiprintf_r+0x194>
    2fb6:	89bb      	ldrh	r3, [r7, #12]
    2fb8:	065b      	lsls	r3, r3, #25
    2fba:	d500      	bpl.n	2fbe <_vfiprintf_r+0x202>
    2fbc:	e77b      	b.n	2eb6 <_vfiprintf_r+0xfa>
    2fbe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2fc0:	e77b      	b.n	2eba <_vfiprintf_r+0xfe>
    2fc2:	ab05      	add	r3, sp, #20
    2fc4:	9300      	str	r3, [sp, #0]
    2fc6:	003a      	movs	r2, r7
    2fc8:	4b09      	ldr	r3, [pc, #36]	; (2ff0 <_vfiprintf_r+0x234>)
    2fca:	0029      	movs	r1, r5
    2fcc:	0030      	movs	r0, r6
    2fce:	f000 f87f 	bl	30d0 <_printf_i>
    2fd2:	e7ec      	b.n	2fae <_vfiprintf_r+0x1f2>
    2fd4:	00003920 	.word	0x00003920
    2fd8:	00003960 	.word	0x00003960
    2fdc:	00003940 	.word	0x00003940
    2fe0:	00003900 	.word	0x00003900
    2fe4:	00003966 	.word	0x00003966
    2fe8:	0000396a 	.word	0x0000396a
    2fec:	00000000 	.word	0x00000000
    2ff0:	00002d97 	.word	0x00002d97

00002ff4 <_printf_common>:
    2ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2ff6:	0015      	movs	r5, r2
    2ff8:	9301      	str	r3, [sp, #4]
    2ffa:	688a      	ldr	r2, [r1, #8]
    2ffc:	690b      	ldr	r3, [r1, #16]
    2ffe:	9000      	str	r0, [sp, #0]
    3000:	000c      	movs	r4, r1
    3002:	4293      	cmp	r3, r2
    3004:	da00      	bge.n	3008 <_printf_common+0x14>
    3006:	0013      	movs	r3, r2
    3008:	0022      	movs	r2, r4
    300a:	602b      	str	r3, [r5, #0]
    300c:	3243      	adds	r2, #67	; 0x43
    300e:	7812      	ldrb	r2, [r2, #0]
    3010:	2a00      	cmp	r2, #0
    3012:	d001      	beq.n	3018 <_printf_common+0x24>
    3014:	3301      	adds	r3, #1
    3016:	602b      	str	r3, [r5, #0]
    3018:	6823      	ldr	r3, [r4, #0]
    301a:	069b      	lsls	r3, r3, #26
    301c:	d502      	bpl.n	3024 <_printf_common+0x30>
    301e:	682b      	ldr	r3, [r5, #0]
    3020:	3302      	adds	r3, #2
    3022:	602b      	str	r3, [r5, #0]
    3024:	2706      	movs	r7, #6
    3026:	6823      	ldr	r3, [r4, #0]
    3028:	401f      	ands	r7, r3
    302a:	d027      	beq.n	307c <_printf_common+0x88>
    302c:	0023      	movs	r3, r4
    302e:	3343      	adds	r3, #67	; 0x43
    3030:	781b      	ldrb	r3, [r3, #0]
    3032:	1e5a      	subs	r2, r3, #1
    3034:	4193      	sbcs	r3, r2
    3036:	6822      	ldr	r2, [r4, #0]
    3038:	0692      	lsls	r2, r2, #26
    303a:	d430      	bmi.n	309e <_printf_common+0xaa>
    303c:	0022      	movs	r2, r4
    303e:	9901      	ldr	r1, [sp, #4]
    3040:	3243      	adds	r2, #67	; 0x43
    3042:	9800      	ldr	r0, [sp, #0]
    3044:	9e08      	ldr	r6, [sp, #32]
    3046:	47b0      	blx	r6
    3048:	1c43      	adds	r3, r0, #1
    304a:	d025      	beq.n	3098 <_printf_common+0xa4>
    304c:	2306      	movs	r3, #6
    304e:	6820      	ldr	r0, [r4, #0]
    3050:	682a      	ldr	r2, [r5, #0]
    3052:	68e1      	ldr	r1, [r4, #12]
    3054:	4003      	ands	r3, r0
    3056:	2500      	movs	r5, #0
    3058:	2b04      	cmp	r3, #4
    305a:	d103      	bne.n	3064 <_printf_common+0x70>
    305c:	1a8d      	subs	r5, r1, r2
    305e:	43eb      	mvns	r3, r5
    3060:	17db      	asrs	r3, r3, #31
    3062:	401d      	ands	r5, r3
    3064:	68a3      	ldr	r3, [r4, #8]
    3066:	6922      	ldr	r2, [r4, #16]
    3068:	4293      	cmp	r3, r2
    306a:	dd01      	ble.n	3070 <_printf_common+0x7c>
    306c:	1a9b      	subs	r3, r3, r2
    306e:	18ed      	adds	r5, r5, r3
    3070:	2700      	movs	r7, #0
    3072:	42bd      	cmp	r5, r7
    3074:	d120      	bne.n	30b8 <_printf_common+0xc4>
    3076:	2000      	movs	r0, #0
    3078:	e010      	b.n	309c <_printf_common+0xa8>
    307a:	3701      	adds	r7, #1
    307c:	68e3      	ldr	r3, [r4, #12]
    307e:	682a      	ldr	r2, [r5, #0]
    3080:	1a9b      	subs	r3, r3, r2
    3082:	429f      	cmp	r7, r3
    3084:	dad2      	bge.n	302c <_printf_common+0x38>
    3086:	0022      	movs	r2, r4
    3088:	2301      	movs	r3, #1
    308a:	3219      	adds	r2, #25
    308c:	9901      	ldr	r1, [sp, #4]
    308e:	9800      	ldr	r0, [sp, #0]
    3090:	9e08      	ldr	r6, [sp, #32]
    3092:	47b0      	blx	r6
    3094:	1c43      	adds	r3, r0, #1
    3096:	d1f0      	bne.n	307a <_printf_common+0x86>
    3098:	2001      	movs	r0, #1
    309a:	4240      	negs	r0, r0
    309c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    309e:	2030      	movs	r0, #48	; 0x30
    30a0:	18e1      	adds	r1, r4, r3
    30a2:	3143      	adds	r1, #67	; 0x43
    30a4:	7008      	strb	r0, [r1, #0]
    30a6:	0021      	movs	r1, r4
    30a8:	1c5a      	adds	r2, r3, #1
    30aa:	3145      	adds	r1, #69	; 0x45
    30ac:	7809      	ldrb	r1, [r1, #0]
    30ae:	18a2      	adds	r2, r4, r2
    30b0:	3243      	adds	r2, #67	; 0x43
    30b2:	3302      	adds	r3, #2
    30b4:	7011      	strb	r1, [r2, #0]
    30b6:	e7c1      	b.n	303c <_printf_common+0x48>
    30b8:	0022      	movs	r2, r4
    30ba:	2301      	movs	r3, #1
    30bc:	321a      	adds	r2, #26
    30be:	9901      	ldr	r1, [sp, #4]
    30c0:	9800      	ldr	r0, [sp, #0]
    30c2:	9e08      	ldr	r6, [sp, #32]
    30c4:	47b0      	blx	r6
    30c6:	1c43      	adds	r3, r0, #1
    30c8:	d0e6      	beq.n	3098 <_printf_common+0xa4>
    30ca:	3701      	adds	r7, #1
    30cc:	e7d1      	b.n	3072 <_printf_common+0x7e>
	...

000030d0 <_printf_i>:
    30d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30d2:	b08b      	sub	sp, #44	; 0x2c
    30d4:	9206      	str	r2, [sp, #24]
    30d6:	000a      	movs	r2, r1
    30d8:	3243      	adds	r2, #67	; 0x43
    30da:	9307      	str	r3, [sp, #28]
    30dc:	9005      	str	r0, [sp, #20]
    30de:	9204      	str	r2, [sp, #16]
    30e0:	7e0a      	ldrb	r2, [r1, #24]
    30e2:	000c      	movs	r4, r1
    30e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    30e6:	2a6e      	cmp	r2, #110	; 0x6e
    30e8:	d100      	bne.n	30ec <_printf_i+0x1c>
    30ea:	e08f      	b.n	320c <_printf_i+0x13c>
    30ec:	d817      	bhi.n	311e <_printf_i+0x4e>
    30ee:	2a63      	cmp	r2, #99	; 0x63
    30f0:	d02c      	beq.n	314c <_printf_i+0x7c>
    30f2:	d808      	bhi.n	3106 <_printf_i+0x36>
    30f4:	2a00      	cmp	r2, #0
    30f6:	d100      	bne.n	30fa <_printf_i+0x2a>
    30f8:	e099      	b.n	322e <_printf_i+0x15e>
    30fa:	2a58      	cmp	r2, #88	; 0x58
    30fc:	d054      	beq.n	31a8 <_printf_i+0xd8>
    30fe:	0026      	movs	r6, r4
    3100:	3642      	adds	r6, #66	; 0x42
    3102:	7032      	strb	r2, [r6, #0]
    3104:	e029      	b.n	315a <_printf_i+0x8a>
    3106:	2a64      	cmp	r2, #100	; 0x64
    3108:	d001      	beq.n	310e <_printf_i+0x3e>
    310a:	2a69      	cmp	r2, #105	; 0x69
    310c:	d1f7      	bne.n	30fe <_printf_i+0x2e>
    310e:	6821      	ldr	r1, [r4, #0]
    3110:	681a      	ldr	r2, [r3, #0]
    3112:	0608      	lsls	r0, r1, #24
    3114:	d523      	bpl.n	315e <_printf_i+0x8e>
    3116:	1d11      	adds	r1, r2, #4
    3118:	6019      	str	r1, [r3, #0]
    311a:	6815      	ldr	r5, [r2, #0]
    311c:	e025      	b.n	316a <_printf_i+0x9a>
    311e:	2a73      	cmp	r2, #115	; 0x73
    3120:	d100      	bne.n	3124 <_printf_i+0x54>
    3122:	e088      	b.n	3236 <_printf_i+0x166>
    3124:	d808      	bhi.n	3138 <_printf_i+0x68>
    3126:	2a6f      	cmp	r2, #111	; 0x6f
    3128:	d029      	beq.n	317e <_printf_i+0xae>
    312a:	2a70      	cmp	r2, #112	; 0x70
    312c:	d1e7      	bne.n	30fe <_printf_i+0x2e>
    312e:	2220      	movs	r2, #32
    3130:	6809      	ldr	r1, [r1, #0]
    3132:	430a      	orrs	r2, r1
    3134:	6022      	str	r2, [r4, #0]
    3136:	e003      	b.n	3140 <_printf_i+0x70>
    3138:	2a75      	cmp	r2, #117	; 0x75
    313a:	d020      	beq.n	317e <_printf_i+0xae>
    313c:	2a78      	cmp	r2, #120	; 0x78
    313e:	d1de      	bne.n	30fe <_printf_i+0x2e>
    3140:	0022      	movs	r2, r4
    3142:	2178      	movs	r1, #120	; 0x78
    3144:	3245      	adds	r2, #69	; 0x45
    3146:	7011      	strb	r1, [r2, #0]
    3148:	4a6c      	ldr	r2, [pc, #432]	; (32fc <_printf_i+0x22c>)
    314a:	e030      	b.n	31ae <_printf_i+0xde>
    314c:	000e      	movs	r6, r1
    314e:	681a      	ldr	r2, [r3, #0]
    3150:	3642      	adds	r6, #66	; 0x42
    3152:	1d11      	adds	r1, r2, #4
    3154:	6019      	str	r1, [r3, #0]
    3156:	6813      	ldr	r3, [r2, #0]
    3158:	7033      	strb	r3, [r6, #0]
    315a:	2301      	movs	r3, #1
    315c:	e079      	b.n	3252 <_printf_i+0x182>
    315e:	0649      	lsls	r1, r1, #25
    3160:	d5d9      	bpl.n	3116 <_printf_i+0x46>
    3162:	1d11      	adds	r1, r2, #4
    3164:	6019      	str	r1, [r3, #0]
    3166:	2300      	movs	r3, #0
    3168:	5ed5      	ldrsh	r5, [r2, r3]
    316a:	2d00      	cmp	r5, #0
    316c:	da03      	bge.n	3176 <_printf_i+0xa6>
    316e:	232d      	movs	r3, #45	; 0x2d
    3170:	9a04      	ldr	r2, [sp, #16]
    3172:	426d      	negs	r5, r5
    3174:	7013      	strb	r3, [r2, #0]
    3176:	4b62      	ldr	r3, [pc, #392]	; (3300 <_printf_i+0x230>)
    3178:	270a      	movs	r7, #10
    317a:	9303      	str	r3, [sp, #12]
    317c:	e02f      	b.n	31de <_printf_i+0x10e>
    317e:	6820      	ldr	r0, [r4, #0]
    3180:	6819      	ldr	r1, [r3, #0]
    3182:	0605      	lsls	r5, r0, #24
    3184:	d503      	bpl.n	318e <_printf_i+0xbe>
    3186:	1d08      	adds	r0, r1, #4
    3188:	6018      	str	r0, [r3, #0]
    318a:	680d      	ldr	r5, [r1, #0]
    318c:	e005      	b.n	319a <_printf_i+0xca>
    318e:	0640      	lsls	r0, r0, #25
    3190:	d5f9      	bpl.n	3186 <_printf_i+0xb6>
    3192:	680d      	ldr	r5, [r1, #0]
    3194:	1d08      	adds	r0, r1, #4
    3196:	6018      	str	r0, [r3, #0]
    3198:	b2ad      	uxth	r5, r5
    319a:	4b59      	ldr	r3, [pc, #356]	; (3300 <_printf_i+0x230>)
    319c:	2708      	movs	r7, #8
    319e:	9303      	str	r3, [sp, #12]
    31a0:	2a6f      	cmp	r2, #111	; 0x6f
    31a2:	d018      	beq.n	31d6 <_printf_i+0x106>
    31a4:	270a      	movs	r7, #10
    31a6:	e016      	b.n	31d6 <_printf_i+0x106>
    31a8:	3145      	adds	r1, #69	; 0x45
    31aa:	700a      	strb	r2, [r1, #0]
    31ac:	4a54      	ldr	r2, [pc, #336]	; (3300 <_printf_i+0x230>)
    31ae:	9203      	str	r2, [sp, #12]
    31b0:	681a      	ldr	r2, [r3, #0]
    31b2:	6821      	ldr	r1, [r4, #0]
    31b4:	1d10      	adds	r0, r2, #4
    31b6:	6018      	str	r0, [r3, #0]
    31b8:	6815      	ldr	r5, [r2, #0]
    31ba:	0608      	lsls	r0, r1, #24
    31bc:	d522      	bpl.n	3204 <_printf_i+0x134>
    31be:	07cb      	lsls	r3, r1, #31
    31c0:	d502      	bpl.n	31c8 <_printf_i+0xf8>
    31c2:	2320      	movs	r3, #32
    31c4:	4319      	orrs	r1, r3
    31c6:	6021      	str	r1, [r4, #0]
    31c8:	2710      	movs	r7, #16
    31ca:	2d00      	cmp	r5, #0
    31cc:	d103      	bne.n	31d6 <_printf_i+0x106>
    31ce:	2320      	movs	r3, #32
    31d0:	6822      	ldr	r2, [r4, #0]
    31d2:	439a      	bics	r2, r3
    31d4:	6022      	str	r2, [r4, #0]
    31d6:	0023      	movs	r3, r4
    31d8:	2200      	movs	r2, #0
    31da:	3343      	adds	r3, #67	; 0x43
    31dc:	701a      	strb	r2, [r3, #0]
    31de:	6863      	ldr	r3, [r4, #4]
    31e0:	60a3      	str	r3, [r4, #8]
    31e2:	2b00      	cmp	r3, #0
    31e4:	db5c      	blt.n	32a0 <_printf_i+0x1d0>
    31e6:	2204      	movs	r2, #4
    31e8:	6821      	ldr	r1, [r4, #0]
    31ea:	4391      	bics	r1, r2
    31ec:	6021      	str	r1, [r4, #0]
    31ee:	2d00      	cmp	r5, #0
    31f0:	d158      	bne.n	32a4 <_printf_i+0x1d4>
    31f2:	9e04      	ldr	r6, [sp, #16]
    31f4:	2b00      	cmp	r3, #0
    31f6:	d064      	beq.n	32c2 <_printf_i+0x1f2>
    31f8:	0026      	movs	r6, r4
    31fa:	9b03      	ldr	r3, [sp, #12]
    31fc:	3642      	adds	r6, #66	; 0x42
    31fe:	781b      	ldrb	r3, [r3, #0]
    3200:	7033      	strb	r3, [r6, #0]
    3202:	e05e      	b.n	32c2 <_printf_i+0x1f2>
    3204:	0648      	lsls	r0, r1, #25
    3206:	d5da      	bpl.n	31be <_printf_i+0xee>
    3208:	b2ad      	uxth	r5, r5
    320a:	e7d8      	b.n	31be <_printf_i+0xee>
    320c:	6809      	ldr	r1, [r1, #0]
    320e:	681a      	ldr	r2, [r3, #0]
    3210:	0608      	lsls	r0, r1, #24
    3212:	d505      	bpl.n	3220 <_printf_i+0x150>
    3214:	1d11      	adds	r1, r2, #4
    3216:	6019      	str	r1, [r3, #0]
    3218:	6813      	ldr	r3, [r2, #0]
    321a:	6962      	ldr	r2, [r4, #20]
    321c:	601a      	str	r2, [r3, #0]
    321e:	e006      	b.n	322e <_printf_i+0x15e>
    3220:	0649      	lsls	r1, r1, #25
    3222:	d5f7      	bpl.n	3214 <_printf_i+0x144>
    3224:	1d11      	adds	r1, r2, #4
    3226:	6019      	str	r1, [r3, #0]
    3228:	6813      	ldr	r3, [r2, #0]
    322a:	8aa2      	ldrh	r2, [r4, #20]
    322c:	801a      	strh	r2, [r3, #0]
    322e:	2300      	movs	r3, #0
    3230:	9e04      	ldr	r6, [sp, #16]
    3232:	6123      	str	r3, [r4, #16]
    3234:	e054      	b.n	32e0 <_printf_i+0x210>
    3236:	681a      	ldr	r2, [r3, #0]
    3238:	1d11      	adds	r1, r2, #4
    323a:	6019      	str	r1, [r3, #0]
    323c:	6816      	ldr	r6, [r2, #0]
    323e:	2100      	movs	r1, #0
    3240:	6862      	ldr	r2, [r4, #4]
    3242:	0030      	movs	r0, r6
    3244:	f000 f91a 	bl	347c <memchr>
    3248:	2800      	cmp	r0, #0
    324a:	d001      	beq.n	3250 <_printf_i+0x180>
    324c:	1b80      	subs	r0, r0, r6
    324e:	6060      	str	r0, [r4, #4]
    3250:	6863      	ldr	r3, [r4, #4]
    3252:	6123      	str	r3, [r4, #16]
    3254:	2300      	movs	r3, #0
    3256:	9a04      	ldr	r2, [sp, #16]
    3258:	7013      	strb	r3, [r2, #0]
    325a:	e041      	b.n	32e0 <_printf_i+0x210>
    325c:	6923      	ldr	r3, [r4, #16]
    325e:	0032      	movs	r2, r6
    3260:	9906      	ldr	r1, [sp, #24]
    3262:	9805      	ldr	r0, [sp, #20]
    3264:	9d07      	ldr	r5, [sp, #28]
    3266:	47a8      	blx	r5
    3268:	1c43      	adds	r3, r0, #1
    326a:	d043      	beq.n	32f4 <_printf_i+0x224>
    326c:	6823      	ldr	r3, [r4, #0]
    326e:	2500      	movs	r5, #0
    3270:	079b      	lsls	r3, r3, #30
    3272:	d40f      	bmi.n	3294 <_printf_i+0x1c4>
    3274:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3276:	68e0      	ldr	r0, [r4, #12]
    3278:	4298      	cmp	r0, r3
    327a:	da3d      	bge.n	32f8 <_printf_i+0x228>
    327c:	0018      	movs	r0, r3
    327e:	e03b      	b.n	32f8 <_printf_i+0x228>
    3280:	0022      	movs	r2, r4
    3282:	2301      	movs	r3, #1
    3284:	3219      	adds	r2, #25
    3286:	9906      	ldr	r1, [sp, #24]
    3288:	9805      	ldr	r0, [sp, #20]
    328a:	9e07      	ldr	r6, [sp, #28]
    328c:	47b0      	blx	r6
    328e:	1c43      	adds	r3, r0, #1
    3290:	d030      	beq.n	32f4 <_printf_i+0x224>
    3292:	3501      	adds	r5, #1
    3294:	68e3      	ldr	r3, [r4, #12]
    3296:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3298:	1a9b      	subs	r3, r3, r2
    329a:	429d      	cmp	r5, r3
    329c:	dbf0      	blt.n	3280 <_printf_i+0x1b0>
    329e:	e7e9      	b.n	3274 <_printf_i+0x1a4>
    32a0:	2d00      	cmp	r5, #0
    32a2:	d0a9      	beq.n	31f8 <_printf_i+0x128>
    32a4:	9e04      	ldr	r6, [sp, #16]
    32a6:	0028      	movs	r0, r5
    32a8:	0039      	movs	r1, r7
    32aa:	f7fe fe67 	bl	1f7c <__aeabi_uidivmod>
    32ae:	9b03      	ldr	r3, [sp, #12]
    32b0:	3e01      	subs	r6, #1
    32b2:	5c5b      	ldrb	r3, [r3, r1]
    32b4:	0028      	movs	r0, r5
    32b6:	7033      	strb	r3, [r6, #0]
    32b8:	0039      	movs	r1, r7
    32ba:	f7fe fdd9 	bl	1e70 <__udivsi3>
    32be:	1e05      	subs	r5, r0, #0
    32c0:	d1f1      	bne.n	32a6 <_printf_i+0x1d6>
    32c2:	2f08      	cmp	r7, #8
    32c4:	d109      	bne.n	32da <_printf_i+0x20a>
    32c6:	6823      	ldr	r3, [r4, #0]
    32c8:	07db      	lsls	r3, r3, #31
    32ca:	d506      	bpl.n	32da <_printf_i+0x20a>
    32cc:	6863      	ldr	r3, [r4, #4]
    32ce:	6922      	ldr	r2, [r4, #16]
    32d0:	4293      	cmp	r3, r2
    32d2:	dc02      	bgt.n	32da <_printf_i+0x20a>
    32d4:	2330      	movs	r3, #48	; 0x30
    32d6:	3e01      	subs	r6, #1
    32d8:	7033      	strb	r3, [r6, #0]
    32da:	9b04      	ldr	r3, [sp, #16]
    32dc:	1b9b      	subs	r3, r3, r6
    32de:	6123      	str	r3, [r4, #16]
    32e0:	9b07      	ldr	r3, [sp, #28]
    32e2:	aa09      	add	r2, sp, #36	; 0x24
    32e4:	9300      	str	r3, [sp, #0]
    32e6:	0021      	movs	r1, r4
    32e8:	9b06      	ldr	r3, [sp, #24]
    32ea:	9805      	ldr	r0, [sp, #20]
    32ec:	f7ff fe82 	bl	2ff4 <_printf_common>
    32f0:	1c43      	adds	r3, r0, #1
    32f2:	d1b3      	bne.n	325c <_printf_i+0x18c>
    32f4:	2001      	movs	r0, #1
    32f6:	4240      	negs	r0, r0
    32f8:	b00b      	add	sp, #44	; 0x2c
    32fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32fc:	00003982 	.word	0x00003982
    3300:	00003971 	.word	0x00003971

00003304 <_sbrk_r>:
    3304:	2300      	movs	r3, #0
    3306:	b570      	push	{r4, r5, r6, lr}
    3308:	4c06      	ldr	r4, [pc, #24]	; (3324 <_sbrk_r+0x20>)
    330a:	0005      	movs	r5, r0
    330c:	0008      	movs	r0, r1
    330e:	6023      	str	r3, [r4, #0]
    3310:	f7fd fefa 	bl	1108 <_sbrk>
    3314:	1c43      	adds	r3, r0, #1
    3316:	d103      	bne.n	3320 <_sbrk_r+0x1c>
    3318:	6823      	ldr	r3, [r4, #0]
    331a:	2b00      	cmp	r3, #0
    331c:	d000      	beq.n	3320 <_sbrk_r+0x1c>
    331e:	602b      	str	r3, [r5, #0]
    3320:	bd70      	pop	{r4, r5, r6, pc}
    3322:	46c0      	nop			; (mov r8, r8)
    3324:	200006e0 	.word	0x200006e0

00003328 <__sread>:
    3328:	b570      	push	{r4, r5, r6, lr}
    332a:	000c      	movs	r4, r1
    332c:	250e      	movs	r5, #14
    332e:	5f49      	ldrsh	r1, [r1, r5]
    3330:	f000 f8d8 	bl	34e4 <_read_r>
    3334:	2800      	cmp	r0, #0
    3336:	db03      	blt.n	3340 <__sread+0x18>
    3338:	6d63      	ldr	r3, [r4, #84]	; 0x54
    333a:	181b      	adds	r3, r3, r0
    333c:	6563      	str	r3, [r4, #84]	; 0x54
    333e:	bd70      	pop	{r4, r5, r6, pc}
    3340:	89a3      	ldrh	r3, [r4, #12]
    3342:	4a02      	ldr	r2, [pc, #8]	; (334c <__sread+0x24>)
    3344:	4013      	ands	r3, r2
    3346:	81a3      	strh	r3, [r4, #12]
    3348:	e7f9      	b.n	333e <__sread+0x16>
    334a:	46c0      	nop			; (mov r8, r8)
    334c:	ffffefff 	.word	0xffffefff

00003350 <__swrite>:
    3350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3352:	001f      	movs	r7, r3
    3354:	898b      	ldrh	r3, [r1, #12]
    3356:	0005      	movs	r5, r0
    3358:	000c      	movs	r4, r1
    335a:	0016      	movs	r6, r2
    335c:	05db      	lsls	r3, r3, #23
    335e:	d505      	bpl.n	336c <__swrite+0x1c>
    3360:	230e      	movs	r3, #14
    3362:	5ec9      	ldrsh	r1, [r1, r3]
    3364:	2200      	movs	r2, #0
    3366:	2302      	movs	r3, #2
    3368:	f000 f874 	bl	3454 <_lseek_r>
    336c:	89a3      	ldrh	r3, [r4, #12]
    336e:	4a05      	ldr	r2, [pc, #20]	; (3384 <__swrite+0x34>)
    3370:	0028      	movs	r0, r5
    3372:	4013      	ands	r3, r2
    3374:	81a3      	strh	r3, [r4, #12]
    3376:	0032      	movs	r2, r6
    3378:	230e      	movs	r3, #14
    337a:	5ee1      	ldrsh	r1, [r4, r3]
    337c:	003b      	movs	r3, r7
    337e:	f000 f81f 	bl	33c0 <_write_r>
    3382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3384:	ffffefff 	.word	0xffffefff

00003388 <__sseek>:
    3388:	b570      	push	{r4, r5, r6, lr}
    338a:	000c      	movs	r4, r1
    338c:	250e      	movs	r5, #14
    338e:	5f49      	ldrsh	r1, [r1, r5]
    3390:	f000 f860 	bl	3454 <_lseek_r>
    3394:	89a3      	ldrh	r3, [r4, #12]
    3396:	1c42      	adds	r2, r0, #1
    3398:	d103      	bne.n	33a2 <__sseek+0x1a>
    339a:	4a05      	ldr	r2, [pc, #20]	; (33b0 <__sseek+0x28>)
    339c:	4013      	ands	r3, r2
    339e:	81a3      	strh	r3, [r4, #12]
    33a0:	bd70      	pop	{r4, r5, r6, pc}
    33a2:	2280      	movs	r2, #128	; 0x80
    33a4:	0152      	lsls	r2, r2, #5
    33a6:	4313      	orrs	r3, r2
    33a8:	81a3      	strh	r3, [r4, #12]
    33aa:	6560      	str	r0, [r4, #84]	; 0x54
    33ac:	e7f8      	b.n	33a0 <__sseek+0x18>
    33ae:	46c0      	nop			; (mov r8, r8)
    33b0:	ffffefff 	.word	0xffffefff

000033b4 <__sclose>:
    33b4:	b510      	push	{r4, lr}
    33b6:	230e      	movs	r3, #14
    33b8:	5ec9      	ldrsh	r1, [r1, r3]
    33ba:	f000 f815 	bl	33e8 <_close_r>
    33be:	bd10      	pop	{r4, pc}

000033c0 <_write_r>:
    33c0:	b570      	push	{r4, r5, r6, lr}
    33c2:	0005      	movs	r5, r0
    33c4:	0008      	movs	r0, r1
    33c6:	0011      	movs	r1, r2
    33c8:	2200      	movs	r2, #0
    33ca:	4c06      	ldr	r4, [pc, #24]	; (33e4 <_write_r+0x24>)
    33cc:	6022      	str	r2, [r4, #0]
    33ce:	001a      	movs	r2, r3
    33d0:	f7fe fbf2 	bl	1bb8 <_write>
    33d4:	1c43      	adds	r3, r0, #1
    33d6:	d103      	bne.n	33e0 <_write_r+0x20>
    33d8:	6823      	ldr	r3, [r4, #0]
    33da:	2b00      	cmp	r3, #0
    33dc:	d000      	beq.n	33e0 <_write_r+0x20>
    33de:	602b      	str	r3, [r5, #0]
    33e0:	bd70      	pop	{r4, r5, r6, pc}
    33e2:	46c0      	nop			; (mov r8, r8)
    33e4:	200006e0 	.word	0x200006e0

000033e8 <_close_r>:
    33e8:	2300      	movs	r3, #0
    33ea:	b570      	push	{r4, r5, r6, lr}
    33ec:	4c06      	ldr	r4, [pc, #24]	; (3408 <_close_r+0x20>)
    33ee:	0005      	movs	r5, r0
    33f0:	0008      	movs	r0, r1
    33f2:	6023      	str	r3, [r4, #0]
    33f4:	f7fd fe9a 	bl	112c <_close>
    33f8:	1c43      	adds	r3, r0, #1
    33fa:	d103      	bne.n	3404 <_close_r+0x1c>
    33fc:	6823      	ldr	r3, [r4, #0]
    33fe:	2b00      	cmp	r3, #0
    3400:	d000      	beq.n	3404 <_close_r+0x1c>
    3402:	602b      	str	r3, [r5, #0]
    3404:	bd70      	pop	{r4, r5, r6, pc}
    3406:	46c0      	nop			; (mov r8, r8)
    3408:	200006e0 	.word	0x200006e0

0000340c <_fstat_r>:
    340c:	2300      	movs	r3, #0
    340e:	b570      	push	{r4, r5, r6, lr}
    3410:	4c06      	ldr	r4, [pc, #24]	; (342c <_fstat_r+0x20>)
    3412:	0005      	movs	r5, r0
    3414:	0008      	movs	r0, r1
    3416:	0011      	movs	r1, r2
    3418:	6023      	str	r3, [r4, #0]
    341a:	f7fd fe8a 	bl	1132 <_fstat>
    341e:	1c43      	adds	r3, r0, #1
    3420:	d103      	bne.n	342a <_fstat_r+0x1e>
    3422:	6823      	ldr	r3, [r4, #0]
    3424:	2b00      	cmp	r3, #0
    3426:	d000      	beq.n	342a <_fstat_r+0x1e>
    3428:	602b      	str	r3, [r5, #0]
    342a:	bd70      	pop	{r4, r5, r6, pc}
    342c:	200006e0 	.word	0x200006e0

00003430 <_isatty_r>:
    3430:	2300      	movs	r3, #0
    3432:	b570      	push	{r4, r5, r6, lr}
    3434:	4c06      	ldr	r4, [pc, #24]	; (3450 <_isatty_r+0x20>)
    3436:	0005      	movs	r5, r0
    3438:	0008      	movs	r0, r1
    343a:	6023      	str	r3, [r4, #0]
    343c:	f7fd fe7e 	bl	113c <_isatty>
    3440:	1c43      	adds	r3, r0, #1
    3442:	d103      	bne.n	344c <_isatty_r+0x1c>
    3444:	6823      	ldr	r3, [r4, #0]
    3446:	2b00      	cmp	r3, #0
    3448:	d000      	beq.n	344c <_isatty_r+0x1c>
    344a:	602b      	str	r3, [r5, #0]
    344c:	bd70      	pop	{r4, r5, r6, pc}
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	200006e0 	.word	0x200006e0

00003454 <_lseek_r>:
    3454:	b570      	push	{r4, r5, r6, lr}
    3456:	0005      	movs	r5, r0
    3458:	0008      	movs	r0, r1
    345a:	0011      	movs	r1, r2
    345c:	2200      	movs	r2, #0
    345e:	4c06      	ldr	r4, [pc, #24]	; (3478 <_lseek_r+0x24>)
    3460:	6022      	str	r2, [r4, #0]
    3462:	001a      	movs	r2, r3
    3464:	f7fd fe6c 	bl	1140 <_lseek>
    3468:	1c43      	adds	r3, r0, #1
    346a:	d103      	bne.n	3474 <_lseek_r+0x20>
    346c:	6823      	ldr	r3, [r4, #0]
    346e:	2b00      	cmp	r3, #0
    3470:	d000      	beq.n	3474 <_lseek_r+0x20>
    3472:	602b      	str	r3, [r5, #0]
    3474:	bd70      	pop	{r4, r5, r6, pc}
    3476:	46c0      	nop			; (mov r8, r8)
    3478:	200006e0 	.word	0x200006e0

0000347c <memchr>:
    347c:	b2c9      	uxtb	r1, r1
    347e:	1882      	adds	r2, r0, r2
    3480:	4290      	cmp	r0, r2
    3482:	d101      	bne.n	3488 <memchr+0xc>
    3484:	2000      	movs	r0, #0
    3486:	4770      	bx	lr
    3488:	7803      	ldrb	r3, [r0, #0]
    348a:	428b      	cmp	r3, r1
    348c:	d0fb      	beq.n	3486 <memchr+0xa>
    348e:	3001      	adds	r0, #1
    3490:	e7f6      	b.n	3480 <memchr+0x4>

00003492 <__malloc_lock>:
    3492:	4770      	bx	lr

00003494 <__malloc_unlock>:
    3494:	4770      	bx	lr

00003496 <_realloc_r>:
    3496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3498:	0007      	movs	r7, r0
    349a:	000d      	movs	r5, r1
    349c:	0016      	movs	r6, r2
    349e:	2900      	cmp	r1, #0
    34a0:	d105      	bne.n	34ae <_realloc_r+0x18>
    34a2:	0011      	movs	r1, r2
    34a4:	f7ff fa9e 	bl	29e4 <_malloc_r>
    34a8:	0004      	movs	r4, r0
    34aa:	0020      	movs	r0, r4
    34ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34ae:	2a00      	cmp	r2, #0
    34b0:	d103      	bne.n	34ba <_realloc_r+0x24>
    34b2:	f7ff fa4d 	bl	2950 <_free_r>
    34b6:	0034      	movs	r4, r6
    34b8:	e7f7      	b.n	34aa <_realloc_r+0x14>
    34ba:	f000 f827 	bl	350c <_malloc_usable_size_r>
    34be:	002c      	movs	r4, r5
    34c0:	4286      	cmp	r6, r0
    34c2:	d9f2      	bls.n	34aa <_realloc_r+0x14>
    34c4:	0031      	movs	r1, r6
    34c6:	0038      	movs	r0, r7
    34c8:	f7ff fa8c 	bl	29e4 <_malloc_r>
    34cc:	1e04      	subs	r4, r0, #0
    34ce:	d0ec      	beq.n	34aa <_realloc_r+0x14>
    34d0:	0029      	movs	r1, r5
    34d2:	0032      	movs	r2, r6
    34d4:	f7fe fe90 	bl	21f8 <memcpy>
    34d8:	0029      	movs	r1, r5
    34da:	0038      	movs	r0, r7
    34dc:	f7ff fa38 	bl	2950 <_free_r>
    34e0:	e7e3      	b.n	34aa <_realloc_r+0x14>
	...

000034e4 <_read_r>:
    34e4:	b570      	push	{r4, r5, r6, lr}
    34e6:	0005      	movs	r5, r0
    34e8:	0008      	movs	r0, r1
    34ea:	0011      	movs	r1, r2
    34ec:	2200      	movs	r2, #0
    34ee:	4c06      	ldr	r4, [pc, #24]	; (3508 <_read_r+0x24>)
    34f0:	6022      	str	r2, [r4, #0]
    34f2:	001a      	movs	r2, r3
    34f4:	f7fe fb7c 	bl	1bf0 <_read>
    34f8:	1c43      	adds	r3, r0, #1
    34fa:	d103      	bne.n	3504 <_read_r+0x20>
    34fc:	6823      	ldr	r3, [r4, #0]
    34fe:	2b00      	cmp	r3, #0
    3500:	d000      	beq.n	3504 <_read_r+0x20>
    3502:	602b      	str	r3, [r5, #0]
    3504:	bd70      	pop	{r4, r5, r6, pc}
    3506:	46c0      	nop			; (mov r8, r8)
    3508:	200006e0 	.word	0x200006e0

0000350c <_malloc_usable_size_r>:
    350c:	1f0b      	subs	r3, r1, #4
    350e:	681b      	ldr	r3, [r3, #0]
    3510:	1f18      	subs	r0, r3, #4
    3512:	2b00      	cmp	r3, #0
    3514:	da01      	bge.n	351a <_malloc_usable_size_r+0xe>
    3516:	580b      	ldr	r3, [r1, r0]
    3518:	18c0      	adds	r0, r0, r3
    351a:	4770      	bx	lr
    351c:	656c6449 	.word	0x656c6449
    3520:	00000000 	.word	0x00000000
    3524:	682f2e2e 	.word	0x682f2e2e
    3528:	732f6c61 	.word	0x732f6c61
    352c:	682f6372 	.word	0x682f6372
    3530:	635f6c61 	.word	0x635f6c61
    3534:	6e656c61 	.word	0x6e656c61
    3538:	2e726164 	.word	0x2e726164
    353c:	00000063 	.word	0x00000063
    3540:	682f2e2e 	.word	0x682f2e2e
    3544:	732f6c61 	.word	0x732f6c61
    3548:	682f6372 	.word	0x682f6372
    354c:	755f6c61 	.word	0x755f6c61
    3550:	74726173 	.word	0x74726173
    3554:	7973615f 	.word	0x7973615f
    3558:	632e636e 	.word	0x632e636e
    355c:	00000000 	.word	0x00000000
    3560:	682f2e2e 	.word	0x682f2e2e
    3564:	752f6c61 	.word	0x752f6c61
    3568:	736c6974 	.word	0x736c6974
    356c:	6372732f 	.word	0x6372732f
    3570:	6974752f 	.word	0x6974752f
    3574:	725f736c 	.word	0x725f736c
    3578:	62676e69 	.word	0x62676e69
    357c:	65666675 	.word	0x65666675
    3580:	00632e72 	.word	0x00632e72

00003584 <_map>:
    3584:	0000000f 0000000f 682f2e2e 652f6c70     ........../hpl/e
    3594:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    35a4:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    35b4:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
    35c4:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    35d4:	0000632e 65656c53 676e6970 6c644920     .c..Sleeping Idl
    35e4:	00000065 0000185a 00001856 00001866     e...Z...V...f...
    35f4:	00001856 00001856 00001856 00001856     V...V...V...V...
    3604:	00001856 00001856 00001856 00001856     V...V...V...V...
    3614:	00001856 00001856 00001856 00001856     V...V...V...V...
    3624:	00001856 00001856 00001856 00001856     V...V...V...V...
    3634:	00001856 00001856 00001856 00001856     V...V...V...V...
    3644:	00001856 00001856 00001856 00001856     V...V...V...V...
    3654:	00001856 00001856 00001856 00001856     V...V...V...V...
    3664:	00001856 00001852 00001856 00001860     V...R...V...`...
    3674:	00001856 00001856 00001856 00001856     V...V...V...V...
    3684:	00001856 00001856 00001856 00001856     V...V...V...V...
    3694:	00001856 00001856 00001856 0000186c     V...V...V...l...
    36a4:	6279654b 6472616f 73615420 0000006b     Keyboard Task...
    36b4:	20230a0d 3d3d3d3d 3d3d3d3d 003d3d3d     ..# ===========.
    36c4:	2e302e31 00000030 756d2023 7361745f     1.0.0...# mu_tas
    36d4:	65645f6b 25206f6d 73203a73 68206565     k_demo %s: see h
    36e4:	73707474 672f2f3a 75687469 6f632e62     ttps://github.co
    36f4:	64722f6d 726f6f70 6c756d2f 0a0d6269     m/rdpoor/mulib..
    3704:	00000000 74747542 50206e6f 65687375     ....Button Pushe
    3714:	00000064 2044454c 6b736154 00000000     d...LED Task....
    3724:	65726353 52206e65 61726465 00000077     Screen Redraw...
    3734:	3b315b1b 5b1b4831 756d4a32 7361745f     .[1;1H.[2Jmu_tas
    3744:	65645f6b 31206f6d 302e302e 7468203a     k_demo 1.0.0: ht
    3754:	3a737074 69672f2f 62756874 6d6f632e     tps://github.com
    3764:	7064722f 2f726f6f 696c756d 0d0a0d62     /rdpoor/mulib...
    3774:	2020200a 20202020 4e202020 20656d61     .          Name 
    3784:	74617453 20232020 6c6c6143 20202073     Stat  # Calls   
    3794:	75522020 6d69746e 20202065 614d2020       Runtime     Ma
    37a4:	75442078 2b0a0d72 2d2d2d2d 2d2d2d2d     x Dur..+--------
    37b4:	2d2d2d2d 2b2d2b2d 2d2d2d2d 2d2d2d2d     -----+-+--------
    37c4:	2b2d2d2d 2d2d2d2d 2d2d2d2d 2b2d2d2d     ---+-----------+
    37d4:	2d2d2d2d 2d2d2d2d 2b2d2d2d 00000a0d     -----------+....
    37e4:	73343125 20632520 75313125 31312520     %14s %c %11u %11
    37f4:	2520756c 756c3131 00000a0d 74530a0d     lu %11lu......St
    3804:	73757461 3d41203a 69746341 202c6576     atus: A=Active, 
    3814:	64493d49 202c656c 75523d52 62616e6e     I=Idle, R=Runnab
    3824:	202c656c 63533d53 75646568 0d64656c     le, S=Scheduled.
    3834:	0000000a 68737550 65737520 75622072     ....Push user bu
    3844:	6e6f7474 206f7420 74697865 776f6c20     tton to exit low
    3854:	776f702d 6d207265 2e65646f 00000a0d     -power mode.....
    3864:	65707954 27702720 206f7420 65746e65     Type 'p' to ente
    3874:	6f6c2072 6f702d77 20726577 65646f6d     r low-power mode
    3884:	540a0d2e 20657079 20274227 73206f74     ...Type 'B' to s
    3894:	65707375 4c20646e 74204445 2e6b7361     uspend LED task.
    38a4:	27622720 206f7420 74736572 2e747261      'b' to restart.
    38b4:	79540a0d 27206570 74202744 7573206f     ..Type 'D' to su
    38c4:	6e657073 63532064 6e656572 73617420     spend Screen tas
    38d4:	27202e6b 74202764 6572206f 72617473     k. 'd' to restar
    38e4:	0a0d2e74 00000000 65726353 55206e65     t.......Screen U
    38f4:	74616470 00000065                       pdate...

000038fc <_global_impure_ptr>:
    38fc:	20000004                                ... 

00003900 <__sf_fake_stderr>:
	...

00003920 <__sf_fake_stdin>:
	...

00003940 <__sf_fake_stdout>:
	...
    3960:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3970:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3980:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3990:	00006665                                ef..

00003994 <_init>:
    3994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3996:	46c0      	nop			; (mov r8, r8)
    3998:	bcf8      	pop	{r3, r4, r5, r6, r7}
    399a:	bc08      	pop	{r3}
    399c:	469e      	mov	lr, r3
    399e:	4770      	bx	lr

000039a0 <__init_array_start>:
    39a0:	000000dd 	.word	0x000000dd

000039a4 <_fini>:
    39a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39a6:	46c0      	nop			; (mov r8, r8)
    39a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    39aa:	bc08      	pop	{r3}
    39ac:	469e      	mov	lr, r3
    39ae:	4770      	bx	lr

000039b0 <__fini_array_start>:
    39b0:	000000b5 	.word	0x000000b5
