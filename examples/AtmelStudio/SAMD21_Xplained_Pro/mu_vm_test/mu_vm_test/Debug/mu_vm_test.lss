
mu_vm_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002688  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00002688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000015c  20000064  000026ec  00020064  2**2
                  ALLOC
  3 .stack        00002000  200001c0  00002848  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002acfc  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000035bb  00000000  00000000  0004ade1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000cfc5  00000000  00000000  0004e39c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000be0  00000000  00000000  0005b361  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000011a0  00000000  00000000  0005bf41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001ad57  00000000  00000000  0005d0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010675  00000000  00000000  00077e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a98b  00000000  00000000  000884ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002230  00000000  00000000  00112e38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 21 00 20 f1 04 00 00 ed 04 00 00 ed 04 00 00     .!. ............
	...
      2c:	ed 04 00 00 00 00 00 00 00 00 00 00 ed 04 00 00     ................
      3c:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
      4c:	39 10 00 00 a1 0d 00 00 ed 04 00 00 ed 04 00 00     9...............
      5c:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
      6c:	ed 04 00 00 15 12 00 00 ed 04 00 00 ed 04 00 00     ................
      7c:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
      8c:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
      9c:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
      ac:	ed 04 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	00002688 	.word	0x00002688

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	00002688 	.word	0x00002688
     10c:	00002688 	.word	0x00002688
     110:	00000000 	.word	0x00000000

00000114 <button_cb_trampoline>:
void mu_vm_sleep(void) { go_to_sleep(); }

// =============================================================================
// private (local) code

static void button_cb_trampoline(void) {
     114:	b510      	push	{r4, lr}
  if (s_port.button_cb) {
     116:	4b04      	ldr	r3, [pc, #16]	; (128 <button_cb_trampoline+0x14>)
     118:	681b      	ldr	r3, [r3, #0]
     11a:	2b00      	cmp	r3, #0
     11c:	d002      	beq.n	124 <button_cb_trampoline+0x10>
    s_port.button_cb(s_port.button_cb_arg);
     11e:	4a02      	ldr	r2, [pc, #8]	; (128 <button_cb_trampoline+0x14>)
     120:	6850      	ldr	r0, [r2, #4]
     122:	4798      	blx	r3
  }
}
     124:	bd10      	pop	{r4, pc}
     126:	46c0      	nop			; (mov r8, r8)
     128:	20000080 	.word	0x20000080

0000012c <tx_byte_sent>:
}

/**
 * Arrive here when the USART is ready to accept a new character.
 */
static void tx_byte_sent(struct _usart_async_device *device) {
     12c:	b510      	push	{r4, lr}
  // notify user callback if set
  if (s_port.tx_cb) {
     12e:	4b04      	ldr	r3, [pc, #16]	; (140 <tx_byte_sent+0x14>)
     130:	689b      	ldr	r3, [r3, #8]
     132:	2b00      	cmp	r3, #0
     134:	d002      	beq.n	13c <tx_byte_sent+0x10>
    s_port.tx_cb(s_port.tx_cb_arg);
     136:	4a02      	ldr	r2, [pc, #8]	; (140 <tx_byte_sent+0x14>)
     138:	68d0      	ldr	r0, [r2, #12]
     13a:	4798      	blx	r3
  }
}
     13c:	bd10      	pop	{r4, pc}
     13e:	46c0      	nop			; (mov r8, r8)
     140:	20000080 	.word	0x20000080

00000144 <rx_done_cb>:

/**
 * Arrive here when a character has been fully received.
 */
static void rx_done_cb(struct _usart_async_device *device, uint8_t data) {
     144:	b510      	push	{r4, lr}
  // The ASF4 serial interrupt handler reads the data register which clears the
  // RXD bit (as well as fetching the data).  The user needs to know if there is
  // data available, so we shadow the RXD bit and the data register with
  // s_rx_has_data and s_rx_data respectively.
  s_rx_data = data;
     146:	4b08      	ldr	r3, [pc, #32]	; (168 <rx_done_cb+0x24>)
     148:	2220      	movs	r2, #32
     14a:	5499      	strb	r1, [r3, r2]
  s_rx_has_data = true;
     14c:	2101      	movs	r1, #1
     14e:	3201      	adds	r2, #1
     150:	5499      	strb	r1, [r3, r2]

  // clear the start of frame flag so mu_vm_serial_read_in_progress() will
  // return false.
  hri_sercomusart_clear_INTFLAG_RXS_bit(USART_0.device.hw);
     152:	4a06      	ldr	r2, [pc, #24]	; (16c <rx_done_cb+0x28>)
     154:	6a12      	ldr	r2, [r2, #32]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXS) >> SERCOM_USART_INTFLAG_RXS_Pos;
}

static inline void hri_sercomusart_clear_INTFLAG_RXS_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     156:	3107      	adds	r1, #7
     158:	7611      	strb	r1, [r2, #24]

  // notify user callback if set
  if (s_port.rx_cb) {
     15a:	691b      	ldr	r3, [r3, #16]
     15c:	2b00      	cmp	r3, #0
     15e:	d002      	beq.n	166 <rx_done_cb+0x22>
    s_port.rx_cb(s_port.rx_cb_arg);
     160:	4a01      	ldr	r2, [pc, #4]	; (168 <rx_done_cb+0x24>)
     162:	6950      	ldr	r0, [r2, #20]
     164:	4798      	blx	r3
  }
}
     166:	bd10      	pop	{r4, pc}
     168:	20000080 	.word	0x20000080
     16c:	2000016c 	.word	0x2000016c

00000170 <tx_done_cb>:
 * Arrive here when the previous character has been fully transmitted.
 */
static void tx_done_cb(struct _usart_async_device *device) {
  // No action.  In the future, we might use this for an async version of
  // mu_vm_serial_write_in_progress().
  asm("nop");
     170:	46c0      	nop			; (mov r8, r8)
}
     172:	4770      	bx	lr

00000174 <error_cb>:

/**
 * Arrive here on an error condition.
 */
static void error_cb(struct _usart_async_device *device) {
  asm("nop");
     174:	46c0      	nop			; (mov r8, r8)
}
     176:	4770      	bx	lr

00000178 <rtc_cb_trampoline>:

static void rtc_cb_trampoline(struct calendar_dev *const dev) {
     178:	b510      	push	{r4, lr}
  // Arrive here when the RTC count register matches the RTC compare register.
  // Even if the user hasn't registered a callback, this will wake the processor
  // from sleep...
  if (s_port.rtc_cb) {
     17a:	4b04      	ldr	r3, [pc, #16]	; (18c <rtc_cb_trampoline+0x14>)
     17c:	699b      	ldr	r3, [r3, #24]
     17e:	2b00      	cmp	r3, #0
     180:	d002      	beq.n	188 <rtc_cb_trampoline+0x10>
    s_port.rtc_cb(s_port.rtc_cb_arg);
     182:	4a02      	ldr	r2, [pc, #8]	; (18c <rtc_cb_trampoline+0x14>)
     184:	69d0      	ldr	r0, [r2, #28]
     186:	4798      	blx	r3
  }
}
     188:	bd10      	pop	{r4, pc}
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	20000080 	.word	0x20000080

00000190 <mu_vm_init>:
void mu_vm_init(void) {
     190:	b510      	push	{r4, lr}
  memset(&s_port, 0, sizeof(s_port));
     192:	2220      	movs	r2, #32
     194:	2100      	movs	r1, #0
     196:	4813      	ldr	r0, [pc, #76]	; (1e4 <mu_vm_init+0x54>)
     198:	4b13      	ldr	r3, [pc, #76]	; (1e8 <mu_vm_init+0x58>)
     19a:	4798      	blx	r3
  ext_irq_register(PIN_PA15, button_cb_trampoline);
     19c:	4913      	ldr	r1, [pc, #76]	; (1ec <mu_vm_init+0x5c>)
     19e:	200f      	movs	r0, #15
     1a0:	4b13      	ldr	r3, [pc, #76]	; (1f0 <mu_vm_init+0x60>)
     1a2:	4798      	blx	r3
  USART_0.device.usart_cb.tx_byte_sent = tx_byte_sent;
     1a4:	4b13      	ldr	r3, [pc, #76]	; (1f4 <mu_vm_init+0x64>)
     1a6:	4a14      	ldr	r2, [pc, #80]	; (1f8 <mu_vm_init+0x68>)
     1a8:	609a      	str	r2, [r3, #8]
  USART_0.device.usart_cb.rx_done_cb = rx_done_cb;
     1aa:	4a14      	ldr	r2, [pc, #80]	; (1fc <mu_vm_init+0x6c>)
     1ac:	60da      	str	r2, [r3, #12]
  USART_0.device.usart_cb.tx_done_cb = tx_done_cb;
     1ae:	4a14      	ldr	r2, [pc, #80]	; (200 <mu_vm_init+0x70>)
     1b0:	611a      	str	r2, [r3, #16]
  USART_0.device.usart_cb.error_cb = error_cb;
     1b2:	4a14      	ldr	r2, [pc, #80]	; (204 <mu_vm_init+0x74>)
     1b4:	615a      	str	r2, [r3, #20]
  hri_sercomusart_set_CTRLB_SFDE_bit(USART_0.device.hw);
     1b6:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_sercomusart_set_CTRLB_SFDE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg |= SERCOM_USART_CTRLB_SFDE;
     1b8:	6851      	ldr	r1, [r2, #4]
     1ba:	2380      	movs	r3, #128	; 0x80
     1bc:	009b      	lsls	r3, r3, #2
     1be:	430b      	orrs	r3, r1
     1c0:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     1c2:	2107      	movs	r1, #7
     1c4:	69d3      	ldr	r3, [r2, #28]
     1c6:	4219      	tst	r1, r3
     1c8:	d1fc      	bne.n	1c4 <mu_vm_init+0x34>
  usart_async_enable(&USART_0);
     1ca:	480a      	ldr	r0, [pc, #40]	; (1f4 <mu_vm_init+0x64>)
     1cc:	4b0e      	ldr	r3, [pc, #56]	; (208 <mu_vm_init+0x78>)
     1ce:	4798      	blx	r3
  calendar_enable(&CALENDAR_0); // start RTC
     1d0:	4c0e      	ldr	r4, [pc, #56]	; (20c <mu_vm_init+0x7c>)
     1d2:	0020      	movs	r0, r4
     1d4:	4b0e      	ldr	r3, [pc, #56]	; (210 <mu_vm_init+0x80>)
     1d6:	4798      	blx	r3
  _calendar_register_callback(&CALENDAR_0.device, rtc_cb_trampoline);
     1d8:	490e      	ldr	r1, [pc, #56]	; (214 <mu_vm_init+0x84>)
     1da:	0020      	movs	r0, r4
     1dc:	4b0e      	ldr	r3, [pc, #56]	; (218 <mu_vm_init+0x88>)
     1de:	4798      	blx	r3
}
     1e0:	bd10      	pop	{r4, pc}
     1e2:	46c0      	nop			; (mov r8, r8)
     1e4:	20000080 	.word	0x20000080
     1e8:	00001a55 	.word	0x00001a55
     1ec:	00000115 	.word	0x00000115
     1f0:	00000865 	.word	0x00000865
     1f4:	2000016c 	.word	0x2000016c
     1f8:	0000012d 	.word	0x0000012d
     1fc:	00000145 	.word	0x00000145
     200:	00000171 	.word	0x00000171
     204:	00000175 	.word	0x00000175
     208:	00000b29 	.word	0x00000b29
     20c:	20000150 	.word	0x20000150
     210:	000007bd 	.word	0x000007bd
     214:	00000179 	.word	0x00000179
     218:	00000f1d 	.word	0x00000f1d

0000021c <mu_vm_time_offset>:
  return t + dt;
     21c:	1808      	adds	r0, r1, r0
}
     21e:	4770      	bx	lr

00000220 <mu_vm_time_difference>:
  return t1 - t2;
     220:	1a40      	subs	r0, r0, r1
}
     222:	4770      	bx	lr

00000224 <mu_vm_time_precedes>:
  return t1 - t2;
     224:	1a40      	subs	r0, r0, r1
  return mu_vm_time_difference(t1, t2) > MAX_DURATION;
     226:	0fc0      	lsrs	r0, r0, #31
}
     228:	4770      	bx	lr
	...

0000022c <mu_vm_time_ms_to_duration>:
mu_vm_time_dt mu_vm_time_ms_to_duration(mu_vm_time_ms_dt ms) {
     22c:	b510      	push	{r4, lr}
  return quo_rounded(ms * CONF_GCLK_RTC_FREQUENCY, 1000);
     22e:	03c0      	lsls	r0, r0, #15
  //   (y < 0) is false (zero) if x is non-negative
  //   (x < 0) ^ (y < 0) is true if x and y have opposite signs
  //   x/y would be the quotient, but it is truncated towards zero.  To round:
  //   (x + y/2)/y is the rounded quotient when x and y have the same sign
  //   (x - y/2)/y is the rounded quotient when x and y have opposite signs
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
     230:	d506      	bpl.n	240 <mu_vm_time_ms_to_duration+0x14>
     232:	38f5      	subs	r0, #245	; 0xf5
     234:	38ff      	subs	r0, #255	; 0xff
     236:	21fa      	movs	r1, #250	; 0xfa
     238:	0089      	lsls	r1, r1, #2
     23a:	4b05      	ldr	r3, [pc, #20]	; (250 <mu_vm_time_ms_to_duration+0x24>)
     23c:	4798      	blx	r3
}
     23e:	bd10      	pop	{r4, pc}
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
     240:	30f5      	adds	r0, #245	; 0xf5
     242:	30ff      	adds	r0, #255	; 0xff
     244:	21fa      	movs	r1, #250	; 0xfa
     246:	0089      	lsls	r1, r1, #2
     248:	4b01      	ldr	r3, [pc, #4]	; (250 <mu_vm_time_ms_to_duration+0x24>)
     24a:	4798      	blx	r3
     24c:	e7f7      	b.n	23e <mu_vm_time_ms_to_duration+0x12>
     24e:	46c0      	nop			; (mov r8, r8)
     250:	000017e1 	.word	0x000017e1

00000254 <mu_vm_time_duration_to_ms>:
  return quo_rounded(dt * 1000, CONF_GCLK_RTC_FREQUENCY);
     254:	23fa      	movs	r3, #250	; 0xfa
     256:	009b      	lsls	r3, r3, #2
     258:	4343      	muls	r3, r0
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
     25a:	2b00      	cmp	r3, #0
     25c:	da08      	bge.n	270 <mu_vm_time_duration_to_ms+0x1c>
     25e:	4a09      	ldr	r2, [pc, #36]	; (284 <mu_vm_time_duration_to_ms+0x30>)
     260:	4694      	mov	ip, r2
     262:	4463      	add	r3, ip
     264:	17d8      	asrs	r0, r3, #31
     266:	0440      	lsls	r0, r0, #17
     268:	0c40      	lsrs	r0, r0, #17
     26a:	18c0      	adds	r0, r0, r3
     26c:	13c0      	asrs	r0, r0, #15
}
     26e:	4770      	bx	lr
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
     270:	2280      	movs	r2, #128	; 0x80
     272:	01d2      	lsls	r2, r2, #7
     274:	4694      	mov	ip, r2
     276:	4463      	add	r3, ip
     278:	17d8      	asrs	r0, r3, #31
     27a:	0440      	lsls	r0, r0, #17
     27c:	0c40      	lsrs	r0, r0, #17
     27e:	18c0      	adds	r0, r0, r3
     280:	13c0      	asrs	r0, r0, #15
     282:	e7f4      	b.n	26e <mu_vm_time_duration_to_ms+0x1a>
     284:	ffffc000 	.word	0xffffc000

00000288 <mu_vm_rtc_now>:
typedef uint8_t  hri_rtcmode2_intflag_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtc_wait_for_sync(const void *const hw)
{
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     288:	4a03      	ldr	r2, [pc, #12]	; (298 <mu_vm_rtc_now+0x10>)
     28a:	7a93      	ldrb	r3, [r2, #10]
     28c:	09db      	lsrs	r3, r3, #7
     28e:	d1fc      	bne.n	28a <mu_vm_rtc_now+0x2>

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_COUNT_bf(const void *const hw)
{
	uint32_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
     290:	4b01      	ldr	r3, [pc, #4]	; (298 <mu_vm_rtc_now+0x10>)
     292:	6918      	ldr	r0, [r3, #16]
}
     294:	4770      	bx	lr
     296:	46c0      	nop			; (mov r8, r8)
     298:	40001400 	.word	0x40001400

0000029c <mu_vm_rtc_set_cb>:
  if (fn) {
     29c:	2800      	cmp	r0, #0
     29e:	d003      	beq.n	2a8 <mu_vm_rtc_set_cb+0xc>
    s_port.rtc_cb = fn;
     2a0:	4b04      	ldr	r3, [pc, #16]	; (2b4 <mu_vm_rtc_set_cb+0x18>)
     2a2:	6198      	str	r0, [r3, #24]
    s_port.rtc_cb_arg = arg;
     2a4:	61d9      	str	r1, [r3, #28]
}
     2a6:	4770      	bx	lr
    s_port.rtc_cb = NULL;
     2a8:	4b02      	ldr	r3, [pc, #8]	; (2b4 <mu_vm_rtc_set_cb+0x18>)
     2aa:	2200      	movs	r2, #0
     2ac:	619a      	str	r2, [r3, #24]
    s_port.rtc_cb_arg = NULL;
     2ae:	61da      	str	r2, [r3, #28]
}
     2b0:	e7f9      	b.n	2a6 <mu_vm_rtc_set_cb+0xa>
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	20000080 	.word	0x20000080

000002b8 <mu_vm_rtc_alarm_at>:

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     2b8:	4b09      	ldr	r3, [pc, #36]	; (2e0 <mu_vm_rtc_alarm_at+0x28>)
     2ba:	699a      	ldr	r2, [r3, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     2bc:	6198      	str	r0, [r3, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     2be:	001a      	movs	r2, r3
     2c0:	7a93      	ldrb	r3, [r2, #10]
     2c2:	09db      	lsrs	r3, r3, #7
     2c4:	d1fc      	bne.n	2c0 <mu_vm_rtc_alarm_at+0x8>
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     2c6:	4b06      	ldr	r3, [pc, #24]	; (2e0 <mu_vm_rtc_alarm_at+0x28>)
     2c8:	885a      	ldrh	r2, [r3, #2]
     2ca:	2180      	movs	r1, #128	; 0x80
     2cc:	01c9      	lsls	r1, r1, #7
     2ce:	430a      	orrs	r2, r1
     2d0:	805a      	strh	r2, [r3, #2]
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
     2d2:	885a      	ldrh	r2, [r3, #2]
     2d4:	2180      	movs	r1, #128	; 0x80
     2d6:	0209      	lsls	r1, r1, #8
     2d8:	430a      	orrs	r2, r1
     2da:	805a      	strh	r2, [r3, #2]
}
     2dc:	4770      	bx	lr
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	40001400 	.word	0x40001400

000002e4 <mu_vm_led_set>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
     2e4:	2800      	cmp	r0, #0
     2e6:	d006      	beq.n	2f6 <mu_vm_led_set+0x12>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2e8:	2180      	movs	r1, #128	; 0x80
     2ea:	05c9      	lsls	r1, r1, #23
     2ec:	2394      	movs	r3, #148	; 0x94
     2ee:	22c0      	movs	r2, #192	; 0xc0
     2f0:	05d2      	lsls	r2, r2, #23
     2f2:	50d1      	str	r1, [r2, r3]
void mu_vm_led_set(bool on) { gpio_set_pin_level(USER_LED_AL, !on); }
     2f4:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2f6:	2180      	movs	r1, #128	; 0x80
     2f8:	05c9      	lsls	r1, r1, #23
     2fa:	2398      	movs	r3, #152	; 0x98
     2fc:	22c0      	movs	r2, #192	; 0xc0
     2fe:	05d2      	lsls	r2, r2, #23
     300:	50d1      	str	r1, [r2, r3]
     302:	e7f7      	b.n	2f4 <mu_vm_led_set+0x10>

00000304 <mu_vm_led_get>:
bool mu_vm_led_get(void) { return !gpio_get_pin_level(USER_LED_AL); }
     304:	b510      	push	{r4, lr}
     306:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     308:	a801      	add	r0, sp, #4
     30a:	4b0b      	ldr	r3, [pc, #44]	; (338 <mu_vm_led_get+0x34>)
     30c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     30e:	22c0      	movs	r2, #192	; 0xc0
     310:	05d2      	lsls	r2, r2, #23
     312:	2380      	movs	r3, #128	; 0x80
     314:	58d4      	ldr	r4, [r2, r3]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     316:	3320      	adds	r3, #32
     318:	4908      	ldr	r1, [pc, #32]	; (33c <mu_vm_led_get+0x38>)
     31a:	58cb      	ldr	r3, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     31c:	2190      	movs	r1, #144	; 0x90
     31e:	5850      	ldr	r0, [r2, r1]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     320:	4058      	eors	r0, r3
     322:	4004      	ands	r4, r0
     324:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
     326:	a801      	add	r0, sp, #4
     328:	4b05      	ldr	r3, [pc, #20]	; (340 <mu_vm_led_get+0x3c>)
     32a:	4798      	blx	r3
     32c:	0fa4      	lsrs	r4, r4, #30
     32e:	2001      	movs	r0, #1
     330:	4044      	eors	r4, r0
     332:	4020      	ands	r0, r4
     334:	b002      	add	sp, #8
     336:	bd10      	pop	{r4, pc}
     338:	00000759 	.word	0x00000759
     33c:	41004400 	.word	0x41004400
     340:	00000767 	.word	0x00000767

00000344 <mu_vm_button_is_pressed>:
bool mu_vm_button_is_pressed(void) {
     344:	b510      	push	{r4, lr}
     346:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
     348:	a801      	add	r0, sp, #4
     34a:	4b0a      	ldr	r3, [pc, #40]	; (374 <mu_vm_button_is_pressed+0x30>)
     34c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     34e:	22c0      	movs	r2, #192	; 0xc0
     350:	05d2      	lsls	r2, r2, #23
     352:	6814      	ldr	r4, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     354:	4b08      	ldr	r3, [pc, #32]	; (378 <mu_vm_button_is_pressed+0x34>)
     356:	6a1b      	ldr	r3, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     358:	6910      	ldr	r0, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     35a:	4058      	eors	r0, r3
     35c:	4004      	ands	r4, r0
     35e:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
     360:	a801      	add	r0, sp, #4
     362:	4b06      	ldr	r3, [pc, #24]	; (37c <mu_vm_button_is_pressed+0x38>)
     364:	4798      	blx	r3
  return !gpio_get_pin_level(USER_BUTTON_AL);
     366:	0be4      	lsrs	r4, r4, #15
     368:	2001      	movs	r0, #1
     36a:	4044      	eors	r4, r0
     36c:	4020      	ands	r0, r4
}
     36e:	b002      	add	sp, #8
     370:	bd10      	pop	{r4, pc}
     372:	46c0      	nop			; (mov r8, r8)
     374:	00000759 	.word	0x00000759
     378:	41004400 	.word	0x41004400
     37c:	00000767 	.word	0x00000767

00000380 <mu_vm_button_set_cb>:
  if (fn) {
     380:	2800      	cmp	r0, #0
     382:	d003      	beq.n	38c <mu_vm_button_set_cb+0xc>
    s_port.button_cb = fn;
     384:	4b04      	ldr	r3, [pc, #16]	; (398 <mu_vm_button_set_cb+0x18>)
     386:	6018      	str	r0, [r3, #0]
    s_port.button_cb_arg = arg;
     388:	6059      	str	r1, [r3, #4]
}
     38a:	4770      	bx	lr
    s_port.button_cb = NULL;
     38c:	4b02      	ldr	r3, [pc, #8]	; (398 <mu_vm_button_set_cb+0x18>)
     38e:	2200      	movs	r2, #0
     390:	601a      	str	r2, [r3, #0]
    s_port.button_cb_arg = NULL;
     392:	605a      	str	r2, [r3, #4]
}
     394:	e7f9      	b.n	38a <mu_vm_button_set_cb+0xa>
     396:	46c0      	nop			; (mov r8, r8)
     398:	20000080 	.word	0x20000080

0000039c <mu_vm_serial_can_write>:
  return hri_sercomusart_get_interrupt_DRE_bit(USART_0.device.hw);
     39c:	4b02      	ldr	r3, [pc, #8]	; (3a8 <mu_vm_serial_can_write+0xc>)
     39e:	6a1b      	ldr	r3, [r3, #32]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     3a0:	7e18      	ldrb	r0, [r3, #24]
     3a2:	2301      	movs	r3, #1
     3a4:	4018      	ands	r0, r3
}
     3a6:	4770      	bx	lr
     3a8:	2000016c 	.word	0x2000016c

000003ac <mu_vm_serial_write>:
void mu_vm_serial_write(uint8_t byte) {
     3ac:	b570      	push	{r4, r5, r6, lr}
     3ae:	0005      	movs	r5, r0
  while (!mu_vm_serial_can_write()) {
     3b0:	4c09      	ldr	r4, [pc, #36]	; (3d8 <mu_vm_serial_write+0x2c>)
     3b2:	e000      	b.n	3b6 <mu_vm_serial_write+0xa>
    asm("nop");
     3b4:	46c0      	nop			; (mov r8, r8)
  while (!mu_vm_serial_can_write()) {
     3b6:	47a0      	blx	r4
     3b8:	2800      	cmp	r0, #0
     3ba:	d0fb      	beq.n	3b4 <mu_vm_serial_write+0x8>
  _usart_async_write_byte(&USART_0.device, byte);
     3bc:	0029      	movs	r1, r5
     3be:	4807      	ldr	r0, [pc, #28]	; (3dc <mu_vm_serial_write+0x30>)
     3c0:	4b07      	ldr	r3, [pc, #28]	; (3e0 <mu_vm_serial_write+0x34>)
     3c2:	4798      	blx	r3
  if (s_port.tx_cb) {
     3c4:	4b07      	ldr	r3, [pc, #28]	; (3e4 <mu_vm_serial_write+0x38>)
     3c6:	689b      	ldr	r3, [r3, #8]
     3c8:	2b00      	cmp	r3, #0
     3ca:	d004      	beq.n	3d6 <mu_vm_serial_write+0x2a>
    _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_BYTE_SENT, true);
     3cc:	2201      	movs	r2, #1
     3ce:	2100      	movs	r1, #0
     3d0:	4802      	ldr	r0, [pc, #8]	; (3dc <mu_vm_serial_write+0x30>)
     3d2:	4b05      	ldr	r3, [pc, #20]	; (3e8 <mu_vm_serial_write+0x3c>)
     3d4:	4798      	blx	r3
}
     3d6:	bd70      	pop	{r4, r5, r6, pc}
     3d8:	0000039d 	.word	0x0000039d
     3dc:	20000174 	.word	0x20000174
     3e0:	00001189 	.word	0x00001189
     3e4:	20000080 	.word	0x20000080
     3e8:	000011a1 	.word	0x000011a1

000003ec <mu_vm_serial_set_write_cb>:
void mu_vm_serial_set_write_cb(mu_vm_callback_fn fn, void *arg) {
     3ec:	b510      	push	{r4, lr}
  if (fn) {
     3ee:	2800      	cmp	r0, #0
     3f0:	d008      	beq.n	404 <mu_vm_serial_set_write_cb+0x18>
    s_port.tx_cb = fn;
     3f2:	4b09      	ldr	r3, [pc, #36]	; (418 <mu_vm_serial_set_write_cb+0x2c>)
     3f4:	6098      	str	r0, [r3, #8]
    s_port.tx_cb_arg = arg;
     3f6:	60d9      	str	r1, [r3, #12]
    _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_BYTE_SENT, true);
     3f8:	2201      	movs	r2, #1
     3fa:	2100      	movs	r1, #0
     3fc:	4807      	ldr	r0, [pc, #28]	; (41c <mu_vm_serial_set_write_cb+0x30>)
     3fe:	4b08      	ldr	r3, [pc, #32]	; (420 <mu_vm_serial_set_write_cb+0x34>)
     400:	4798      	blx	r3
}
     402:	bd10      	pop	{r4, pc}
    _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_BYTE_SENT, false);
     404:	2200      	movs	r2, #0
     406:	2100      	movs	r1, #0
     408:	4804      	ldr	r0, [pc, #16]	; (41c <mu_vm_serial_set_write_cb+0x30>)
     40a:	4b05      	ldr	r3, [pc, #20]	; (420 <mu_vm_serial_set_write_cb+0x34>)
     40c:	4798      	blx	r3
    s_port.tx_cb = NULL;
     40e:	4b02      	ldr	r3, [pc, #8]	; (418 <mu_vm_serial_set_write_cb+0x2c>)
     410:	2200      	movs	r2, #0
     412:	609a      	str	r2, [r3, #8]
    s_port.tx_cb_arg = NULL;
     414:	60da      	str	r2, [r3, #12]
}
     416:	e7f4      	b.n	402 <mu_vm_serial_set_write_cb+0x16>
     418:	20000080 	.word	0x20000080
     41c:	20000174 	.word	0x20000174
     420:	000011a1 	.word	0x000011a1

00000424 <mu_vm_serial_read>:
uint8_t mu_vm_serial_read(void) {
     424:	b510      	push	{r4, lr}
  _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_RX_DONE, true);
     426:	2201      	movs	r2, #1
     428:	2101      	movs	r1, #1
     42a:	480b      	ldr	r0, [pc, #44]	; (458 <mu_vm_serial_read+0x34>)
     42c:	4b0b      	ldr	r3, [pc, #44]	; (45c <mu_vm_serial_read+0x38>)
     42e:	4798      	blx	r3
  return s_rx_has_data;
     430:	2321      	movs	r3, #33	; 0x21
     432:	4a0b      	ldr	r2, [pc, #44]	; (460 <mu_vm_serial_read+0x3c>)
     434:	5cd3      	ldrb	r3, [r2, r3]
  while (!mu_vm_serial_can_read()) {
     436:	2b00      	cmp	r3, #0
     438:	d105      	bne.n	446 <mu_vm_serial_read+0x22>
  return s_rx_has_data;
     43a:	0011      	movs	r1, r2
     43c:	2221      	movs	r2, #33	; 0x21
    asm("nop");
     43e:	46c0      	nop			; (mov r8, r8)
  return s_rx_has_data;
     440:	5c8b      	ldrb	r3, [r1, r2]
  while (!mu_vm_serial_can_read()) {
     442:	2b00      	cmp	r3, #0
     444:	d0fb      	beq.n	43e <mu_vm_serial_read+0x1a>
  s_rx_has_data = false;       // clear the virtual RXD bit
     446:	4b06      	ldr	r3, [pc, #24]	; (460 <mu_vm_serial_read+0x3c>)
     448:	2100      	movs	r1, #0
     44a:	2221      	movs	r2, #33	; 0x21
     44c:	5499      	strb	r1, [r3, r2]
  return s_rx_data;
     44e:	3a01      	subs	r2, #1
     450:	5c98      	ldrb	r0, [r3, r2]
     452:	b2c0      	uxtb	r0, r0
}
     454:	bd10      	pop	{r4, pc}
     456:	46c0      	nop			; (mov r8, r8)
     458:	20000174 	.word	0x20000174
     45c:	000011a1 	.word	0x000011a1
     460:	20000080 	.word	0x20000080

00000464 <mu_vm_serial_set_read_cb>:
void mu_vm_serial_set_read_cb(mu_vm_callback_fn fn, void *arg) {
     464:	b510      	push	{r4, lr}
  if (fn) {
     466:	2800      	cmp	r0, #0
     468:	d008      	beq.n	47c <mu_vm_serial_set_read_cb+0x18>
    s_port.rx_cb = fn;
     46a:	4b07      	ldr	r3, [pc, #28]	; (488 <mu_vm_serial_set_read_cb+0x24>)
     46c:	6118      	str	r0, [r3, #16]
    s_port.rx_cb_arg = arg;
     46e:	6159      	str	r1, [r3, #20]
    _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_RX_DONE, true);
     470:	2201      	movs	r2, #1
     472:	2101      	movs	r1, #1
     474:	4805      	ldr	r0, [pc, #20]	; (48c <mu_vm_serial_set_read_cb+0x28>)
     476:	4b06      	ldr	r3, [pc, #24]	; (490 <mu_vm_serial_set_read_cb+0x2c>)
     478:	4798      	blx	r3
}
     47a:	bd10      	pop	{r4, pc}
    s_port.rx_cb = NULL;
     47c:	4b02      	ldr	r3, [pc, #8]	; (488 <mu_vm_serial_set_read_cb+0x24>)
     47e:	2200      	movs	r2, #0
     480:	611a      	str	r2, [r3, #16]
    s_port.rx_cb_arg = NULL;
     482:	615a      	str	r2, [r3, #20]
}
     484:	e7f9      	b.n	47a <mu_vm_serial_set_read_cb+0x16>
     486:	46c0      	nop			; (mov r8, r8)
     488:	20000080 	.word	0x20000080
     48c:	20000174 	.word	0x20000174
     490:	000011a1 	.word	0x000011a1

00000494 <mu_vm_sleep_until>:
void mu_vm_sleep_until(mu_vm_time_t then) {
     494:	b510      	push	{r4, lr}
     496:	0004      	movs	r4, r0
  mu_vm_time_t now = mu_vm_rtc_now();
     498:	4b07      	ldr	r3, [pc, #28]	; (4b8 <mu_vm_sleep_until+0x24>)
     49a:	4798      	blx	r3
  return t1 - t2;
     49c:	1a20      	subs	r0, r4, r0
  if (mu_vm_time_difference(then, now) > MIN_SLEEP_DURATION) {
     49e:	2820      	cmp	r0, #32
     4a0:	dc00      	bgt.n	4a4 <mu_vm_sleep_until+0x10>
}
     4a2:	bd10      	pop	{r4, pc}
    mu_vm_rtc_alarm_at(then);
     4a4:	0020      	movs	r0, r4
     4a6:	4b05      	ldr	r3, [pc, #20]	; (4bc <mu_vm_sleep_until+0x28>)
     4a8:	4798      	blx	r3
  sleep(3); // in hal_sleep
     4aa:	2003      	movs	r0, #3
     4ac:	4b04      	ldr	r3, [pc, #16]	; (4c0 <mu_vm_sleep_until+0x2c>)
     4ae:	4798      	blx	r3
  delay_us(200);
     4b0:	20c8      	movs	r0, #200	; 0xc8
     4b2:	4b04      	ldr	r3, [pc, #16]	; (4c4 <mu_vm_sleep_until+0x30>)
     4b4:	4798      	blx	r3
}
     4b6:	e7f4      	b.n	4a2 <mu_vm_sleep_until+0xe>
     4b8:	00000289 	.word	0x00000289
     4bc:	000002b9 	.word	0x000002b9
     4c0:	000008ad 	.word	0x000008ad
     4c4:	000007e9 	.word	0x000007e9

000004c8 <mu_vm_sleep>:
void mu_vm_sleep(void) { go_to_sleep(); }
     4c8:	b510      	push	{r4, lr}
  sleep(3); // in hal_sleep
     4ca:	2003      	movs	r0, #3
     4cc:	4b02      	ldr	r3, [pc, #8]	; (4d8 <mu_vm_sleep+0x10>)
     4ce:	4798      	blx	r3
  delay_us(200);
     4d0:	20c8      	movs	r0, #200	; 0xc8
     4d2:	4b02      	ldr	r3, [pc, #8]	; (4dc <mu_vm_sleep+0x14>)
     4d4:	4798      	blx	r3
void mu_vm_sleep(void) { go_to_sleep(); }
     4d6:	bd10      	pop	{r4, pc}
     4d8:	000008ad 	.word	0x000008ad
     4dc:	000007e9 	.word	0x000007e9

000004e0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     4e0:	b510      	push	{r4, lr}
	system_init();
     4e2:	4b01      	ldr	r3, [pc, #4]	; (4e8 <atmel_start_init+0x8>)
     4e4:	4798      	blx	r3
}
     4e6:	bd10      	pop	{r4, pc}
     4e8:	00000709 	.word	0x00000709

000004ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     4ec:	e7fe      	b.n	4ec <Dummy_Handler>
	...

000004f0 <Reset_Handler>:
{
     4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     4f2:	4a2a      	ldr	r2, [pc, #168]	; (59c <Reset_Handler+0xac>)
     4f4:	4b2a      	ldr	r3, [pc, #168]	; (5a0 <Reset_Handler+0xb0>)
     4f6:	429a      	cmp	r2, r3
     4f8:	d011      	beq.n	51e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     4fa:	001a      	movs	r2, r3
     4fc:	4b29      	ldr	r3, [pc, #164]	; (5a4 <Reset_Handler+0xb4>)
     4fe:	429a      	cmp	r2, r3
     500:	d20d      	bcs.n	51e <Reset_Handler+0x2e>
     502:	4a29      	ldr	r2, [pc, #164]	; (5a8 <Reset_Handler+0xb8>)
     504:	3303      	adds	r3, #3
     506:	1a9b      	subs	r3, r3, r2
     508:	089b      	lsrs	r3, r3, #2
     50a:	3301      	adds	r3, #1
     50c:	009b      	lsls	r3, r3, #2
     50e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     510:	4823      	ldr	r0, [pc, #140]	; (5a0 <Reset_Handler+0xb0>)
     512:	4922      	ldr	r1, [pc, #136]	; (59c <Reset_Handler+0xac>)
     514:	588c      	ldr	r4, [r1, r2]
     516:	5084      	str	r4, [r0, r2]
     518:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     51a:	429a      	cmp	r2, r3
     51c:	d1fa      	bne.n	514 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     51e:	4a23      	ldr	r2, [pc, #140]	; (5ac <Reset_Handler+0xbc>)
     520:	4b23      	ldr	r3, [pc, #140]	; (5b0 <Reset_Handler+0xc0>)
     522:	429a      	cmp	r2, r3
     524:	d20a      	bcs.n	53c <Reset_Handler+0x4c>
     526:	43d3      	mvns	r3, r2
     528:	4921      	ldr	r1, [pc, #132]	; (5b0 <Reset_Handler+0xc0>)
     52a:	185b      	adds	r3, r3, r1
     52c:	2103      	movs	r1, #3
     52e:	438b      	bics	r3, r1
     530:	3304      	adds	r3, #4
     532:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     534:	2100      	movs	r1, #0
     536:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     538:	4293      	cmp	r3, r2
     53a:	d1fc      	bne.n	536 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     53c:	4a1d      	ldr	r2, [pc, #116]	; (5b4 <Reset_Handler+0xc4>)
     53e:	21ff      	movs	r1, #255	; 0xff
     540:	4b1d      	ldr	r3, [pc, #116]	; (5b8 <Reset_Handler+0xc8>)
     542:	438b      	bics	r3, r1
     544:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     546:	39fd      	subs	r1, #253	; 0xfd
     548:	2390      	movs	r3, #144	; 0x90
     54a:	005b      	lsls	r3, r3, #1
     54c:	4a1b      	ldr	r2, [pc, #108]	; (5bc <Reset_Handler+0xcc>)
     54e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     550:	4a1b      	ldr	r2, [pc, #108]	; (5c0 <Reset_Handler+0xd0>)
     552:	78d3      	ldrb	r3, [r2, #3]
     554:	2503      	movs	r5, #3
     556:	43ab      	bics	r3, r5
     558:	2402      	movs	r4, #2
     55a:	4323      	orrs	r3, r4
     55c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     55e:	78d3      	ldrb	r3, [r2, #3]
     560:	270c      	movs	r7, #12
     562:	43bb      	bics	r3, r7
     564:	2608      	movs	r6, #8
     566:	4333      	orrs	r3, r6
     568:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     56a:	4b16      	ldr	r3, [pc, #88]	; (5c4 <Reset_Handler+0xd4>)
     56c:	7b98      	ldrb	r0, [r3, #14]
     56e:	2230      	movs	r2, #48	; 0x30
     570:	4390      	bics	r0, r2
     572:	2220      	movs	r2, #32
     574:	4310      	orrs	r0, r2
     576:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     578:	7b99      	ldrb	r1, [r3, #14]
     57a:	43b9      	bics	r1, r7
     57c:	4331      	orrs	r1, r6
     57e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     580:	7b9a      	ldrb	r2, [r3, #14]
     582:	43aa      	bics	r2, r5
     584:	4322      	orrs	r2, r4
     586:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     588:	4a0f      	ldr	r2, [pc, #60]	; (5c8 <Reset_Handler+0xd8>)
     58a:	6853      	ldr	r3, [r2, #4]
     58c:	2180      	movs	r1, #128	; 0x80
     58e:	430b      	orrs	r3, r1
     590:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     592:	4b0e      	ldr	r3, [pc, #56]	; (5cc <Reset_Handler+0xdc>)
     594:	4798      	blx	r3
        main();
     596:	4b0e      	ldr	r3, [pc, #56]	; (5d0 <Reset_Handler+0xe0>)
     598:	4798      	blx	r3
     59a:	e7fe      	b.n	59a <Reset_Handler+0xaa>
     59c:	00002688 	.word	0x00002688
     5a0:	20000000 	.word	0x20000000
     5a4:	20000064 	.word	0x20000064
     5a8:	20000004 	.word	0x20000004
     5ac:	20000064 	.word	0x20000064
     5b0:	200001c0 	.word	0x200001c0
     5b4:	e000ed00 	.word	0xe000ed00
     5b8:	00000000 	.word	0x00000000
     5bc:	41007000 	.word	0x41007000
     5c0:	41005000 	.word	0x41005000
     5c4:	41004800 	.word	0x41004800
     5c8:	41004000 	.word	0x41004000
     5cc:	00001a0d 	.word	0x00001a0d
     5d0:	000012d5 	.word	0x000012d5

000005d4 <EXTERNAL_IRQ_0_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct calendar_descriptor CALENDAR_0;

void EXTERNAL_IRQ_0_init(void)
{
     5d4:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     5d6:	4a10      	ldr	r2, [pc, #64]	; (618 <EXTERNAL_IRQ_0_init+0x44>)
     5d8:	4b10      	ldr	r3, [pc, #64]	; (61c <EXTERNAL_IRQ_0_init+0x48>)
     5da:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5dc:	22c0      	movs	r2, #192	; 0xc0
     5de:	05d2      	lsls	r2, r2, #23
     5e0:	2080      	movs	r0, #128	; 0x80
     5e2:	0200      	lsls	r0, r0, #8
     5e4:	6050      	str	r0, [r2, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5e6:	4b0e      	ldr	r3, [pc, #56]	; (620 <EXTERNAL_IRQ_0_init+0x4c>)
     5e8:	490e      	ldr	r1, [pc, #56]	; (624 <EXTERNAL_IRQ_0_init+0x50>)
     5ea:	6299      	str	r1, [r3, #40]	; 0x28
     5ec:	490e      	ldr	r1, [pc, #56]	; (628 <EXTERNAL_IRQ_0_init+0x54>)
     5ee:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5f0:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     5f2:	214f      	movs	r1, #79	; 0x4f
     5f4:	5c5c      	ldrb	r4, [r3, r1]
     5f6:	2504      	movs	r5, #4
     5f8:	432c      	orrs	r4, r5
     5fa:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5fc:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5fe:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     600:	2001      	movs	r0, #1
     602:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     604:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     606:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     608:	3918      	subs	r1, #24
     60a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     60c:	300e      	adds	r0, #14
     60e:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     610:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(USER_BUTTON_AL, PINMUX_PA15A_EIC_EXTINT15);

	ext_irq_init();
     612:	4b06      	ldr	r3, [pc, #24]	; (62c <EXTERNAL_IRQ_0_init+0x58>)
     614:	4798      	blx	r3
}
     616:	bd70      	pop	{r4, r5, r6, pc}
     618:	00004305 	.word	0x00004305
     61c:	40000c00 	.word	0x40000c00
     620:	41004400 	.word	0x41004400
     624:	40028000 	.word	0x40028000
     628:	c0020000 	.word	0xc0020000
     62c:	00000841 	.word	0x00000841

00000630 <USART_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     630:	4a04      	ldr	r2, [pc, #16]	; (644 <USART_0_CLOCK_init+0x14>)
     632:	6a13      	ldr	r3, [r2, #32]
     634:	2120      	movs	r1, #32
     636:	430b      	orrs	r3, r1
     638:	6213      	str	r3, [r2, #32]
     63a:	4a03      	ldr	r2, [pc, #12]	; (648 <USART_0_CLOCK_init+0x18>)
     63c:	4b03      	ldr	r3, [pc, #12]	; (64c <USART_0_CLOCK_init+0x1c>)
     63e:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     640:	4770      	bx	lr
     642:	46c0      	nop			; (mov r8, r8)
     644:	40000400 	.word	0x40000400
     648:	00004017 	.word	0x00004017
     64c:	40000c00 	.word	0x40000c00

00000650 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     650:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     652:	4b0e      	ldr	r3, [pc, #56]	; (68c <USART_0_PORT_init+0x3c>)
     654:	2256      	movs	r2, #86	; 0x56
     656:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     658:	2501      	movs	r5, #1
     65a:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     65c:	2401      	movs	r4, #1
     65e:	4321      	orrs	r1, r4
     660:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     662:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     664:	203b      	movs	r0, #59	; 0x3b
     666:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     668:	3a47      	subs	r2, #71	; 0x47
     66a:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     66c:	3a0d      	subs	r2, #13
     66e:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     670:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     672:	2157      	movs	r1, #87	; 0x57
     674:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     676:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     678:	4322      	orrs	r2, r4
     67a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     67c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     67e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     680:	3948      	subs	r1, #72	; 0x48
     682:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     684:	3111      	adds	r1, #17
     686:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     688:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     68a:	bd30      	pop	{r4, r5, pc}
     68c:	41004400 	.word	0x41004400

00000690 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     690:	b510      	push	{r4, lr}
     692:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     694:	4b06      	ldr	r3, [pc, #24]	; (6b0 <USART_0_init+0x20>)
     696:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     698:	2300      	movs	r3, #0
     69a:	9300      	str	r3, [sp, #0]
     69c:	3310      	adds	r3, #16
     69e:	4a05      	ldr	r2, [pc, #20]	; (6b4 <USART_0_init+0x24>)
     6a0:	4905      	ldr	r1, [pc, #20]	; (6b8 <USART_0_init+0x28>)
     6a2:	4806      	ldr	r0, [pc, #24]	; (6bc <USART_0_init+0x2c>)
     6a4:	4c06      	ldr	r4, [pc, #24]	; (6c0 <USART_0_init+0x30>)
     6a6:	47a0      	blx	r4
	USART_0_PORT_init();
     6a8:	4b06      	ldr	r3, [pc, #24]	; (6c4 <USART_0_init+0x34>)
     6aa:	4798      	blx	r3
}
     6ac:	b002      	add	sp, #8
     6ae:	bd10      	pop	{r4, pc}
     6b0:	00000631 	.word	0x00000631
     6b4:	200000a4 	.word	0x200000a4
     6b8:	42001400 	.word	0x42001400
     6bc:	2000016c 	.word	0x2000016c
     6c0:	00000a91 	.word	0x00000a91
     6c4:	00000651 	.word	0x00000651

000006c8 <CALENDAR_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     6c8:	4a04      	ldr	r2, [pc, #16]	; (6dc <CALENDAR_0_CLOCK_init+0x14>)
     6ca:	6993      	ldr	r3, [r2, #24]
     6cc:	2120      	movs	r1, #32
     6ce:	430b      	orrs	r3, r1
     6d0:	6193      	str	r3, [r2, #24]
     6d2:	4a03      	ldr	r2, [pc, #12]	; (6e0 <CALENDAR_0_CLOCK_init+0x18>)
     6d4:	4b03      	ldr	r3, [pc, #12]	; (6e4 <CALENDAR_0_CLOCK_init+0x1c>)
     6d6:	805a      	strh	r2, [r3, #2]

void CALENDAR_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
     6d8:	4770      	bx	lr
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	40000400 	.word	0x40000400
     6e0:	00004304 	.word	0x00004304
     6e4:	40000c00 	.word	0x40000c00

000006e8 <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     6e8:	b510      	push	{r4, lr}
	CALENDAR_0_CLOCK_init();
     6ea:	4b03      	ldr	r3, [pc, #12]	; (6f8 <CALENDAR_0_init+0x10>)
     6ec:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     6ee:	4903      	ldr	r1, [pc, #12]	; (6fc <CALENDAR_0_init+0x14>)
     6f0:	4803      	ldr	r0, [pc, #12]	; (700 <CALENDAR_0_init+0x18>)
     6f2:	4b04      	ldr	r3, [pc, #16]	; (704 <CALENDAR_0_init+0x1c>)
     6f4:	4798      	blx	r3
}
     6f6:	bd10      	pop	{r4, pc}
     6f8:	000006c9 	.word	0x000006c9
     6fc:	40001400 	.word	0x40001400
     700:	20000150 	.word	0x20000150
     704:	00000775 	.word	0x00000775

00000708 <system_init>:

void system_init(void)
{
     708:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     70a:	4b0d      	ldr	r3, [pc, #52]	; (740 <system_init+0x38>)
     70c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     70e:	23c0      	movs	r3, #192	; 0xc0
     710:	05db      	lsls	r3, r3, #23
     712:	2280      	movs	r2, #128	; 0x80
     714:	05d2      	lsls	r2, r2, #23
     716:	2198      	movs	r1, #152	; 0x98
     718:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     71a:	3910      	subs	r1, #16
     71c:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     71e:	4b09      	ldr	r3, [pc, #36]	; (744 <system_init+0x3c>)
     720:	3120      	adds	r1, #32
     722:	505a      	str	r2, [r3, r1]
     724:	4a08      	ldr	r2, [pc, #32]	; (748 <system_init+0x40>)
     726:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     728:	3136      	adds	r1, #54	; 0x36
     72a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     72c:	2001      	movs	r0, #1
     72e:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     730:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(USER_LED_AL, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(USER_LED_AL, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     732:	4b06      	ldr	r3, [pc, #24]	; (74c <system_init+0x44>)
     734:	4798      	blx	r3

	USART_0_init();
     736:	4b06      	ldr	r3, [pc, #24]	; (750 <system_init+0x48>)
     738:	4798      	blx	r3

	CALENDAR_0_init();
     73a:	4b06      	ldr	r3, [pc, #24]	; (754 <system_init+0x4c>)
     73c:	4798      	blx	r3
}
     73e:	bd10      	pop	{r4, pc}
     740:	00000cad 	.word	0x00000cad
     744:	41004400 	.word	0x41004400
     748:	c0004000 	.word	0xc0004000
     74c:	000005d5 	.word	0x000005d5
     750:	00000691 	.word	0x00000691
     754:	000006e9 	.word	0x000006e9

00000758 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     758:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     75c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     75e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     760:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     764:	4770      	bx	lr

00000766 <atomic_leave_critical>:
     766:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     76a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     76c:	f383 8810 	msr	PRIMASK, r3
}
     770:	4770      	bx	lr
	...

00000774 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
     774:	b570      	push	{r4, r5, r6, lr}
     776:	0004      	movs	r4, r0
     778:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
     77a:	1e43      	subs	r3, r0, #1
     77c:	4198      	sbcs	r0, r3
     77e:	b2c0      	uxtb	r0, r0
     780:	22e0      	movs	r2, #224	; 0xe0
     782:	0052      	lsls	r2, r2, #1
     784:	4909      	ldr	r1, [pc, #36]	; (7ac <calendar_init+0x38>)
     786:	4b0a      	ldr	r3, [pc, #40]	; (7b0 <calendar_init+0x3c>)
     788:	4798      	blx	r3

	if (calendar->device.hw == hw) {
     78a:	6823      	ldr	r3, [r4, #0]
     78c:	42ab      	cmp	r3, r5
     78e:	d008      	beq.n	7a2 <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
     790:	2b00      	cmp	r3, #0
     792:	d108      	bne.n	7a6 <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
     794:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
     796:	0020      	movs	r0, r4
     798:	4b06      	ldr	r3, [pc, #24]	; (7b4 <calendar_init+0x40>)
     79a:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
     79c:	4b06      	ldr	r3, [pc, #24]	; (7b8 <calendar_init+0x44>)
     79e:	6163      	str	r3, [r4, #20]

	return ret;
}
     7a0:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
     7a2:	2000      	movs	r0, #0
     7a4:	e7fc      	b.n	7a0 <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
     7a6:	2012      	movs	r0, #18
     7a8:	4240      	negs	r0, r0
     7aa:	e7f9      	b.n	7a0 <calendar_init+0x2c>
     7ac:	000022d0 	.word	0x000022d0
     7b0:	00000b55 	.word	0x00000b55
     7b4:	00000f7d 	.word	0x00000f7d
     7b8:	000007b2 	.word	0x000007b2

000007bc <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
     7bc:	b510      	push	{r4, lr}
     7be:	0004      	movs	r4, r0
	/* Sanity check arguments */
	ASSERT(calendar);
     7c0:	1e43      	subs	r3, r0, #1
     7c2:	4198      	sbcs	r0, r3
     7c4:	b2c0      	uxtb	r0, r0
     7c6:	22e6      	movs	r2, #230	; 0xe6
     7c8:	32ff      	adds	r2, #255	; 0xff
     7ca:	4904      	ldr	r1, [pc, #16]	; (7dc <calendar_enable+0x20>)
     7cc:	4b04      	ldr	r3, [pc, #16]	; (7e0 <calendar_enable+0x24>)
     7ce:	4798      	blx	r3

	_calendar_enable(&calendar->device);
     7d0:	0020      	movs	r0, r4
     7d2:	4b04      	ldr	r3, [pc, #16]	; (7e4 <calendar_enable+0x28>)
     7d4:	4798      	blx	r3

	return ERR_NONE;
}
     7d6:	2000      	movs	r0, #0
     7d8:	bd10      	pop	{r4, pc}
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	000022d0 	.word	0x000022d0
     7e0:	00000b55 	.word	0x00000b55
     7e4:	00001001 	.word	0x00001001

000007e8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     7e8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     7ea:	4b04      	ldr	r3, [pc, #16]	; (7fc <delay_us+0x14>)
     7ec:	681c      	ldr	r4, [r3, #0]
     7ee:	4b04      	ldr	r3, [pc, #16]	; (800 <delay_us+0x18>)
     7f0:	4798      	blx	r3
     7f2:	0001      	movs	r1, r0
     7f4:	0020      	movs	r0, r4
     7f6:	4b03      	ldr	r3, [pc, #12]	; (804 <delay_us+0x1c>)
     7f8:	4798      	blx	r3
}
     7fa:	bd10      	pop	{r4, pc}
     7fc:	200000b4 	.word	0x200000b4
     800:	00000c89 	.word	0x00000c89
     804:	00000ca5 	.word	0x00000ca5

00000808 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     808:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     80a:	4b0c      	ldr	r3, [pc, #48]	; (83c <process_ext_irq+0x34>)
     80c:	685c      	ldr	r4, [r3, #4]
     80e:	42a0      	cmp	r0, r4
     810:	d00e      	beq.n	830 <process_ext_irq+0x28>
     812:	2201      	movs	r2, #1
     814:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     816:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     818:	25ff      	movs	r5, #255	; 0xff
     81a:	e003      	b.n	824 <process_ext_irq+0x1c>
     81c:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     81e:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     820:	085b      	lsrs	r3, r3, #1
     822:	d10a      	bne.n	83a <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     824:	42a0      	cmp	r0, r4
     826:	d9f9      	bls.n	81c <process_ext_irq+0x14>
	while (upper >= lower) {
     828:	2a00      	cmp	r2, #0
     82a:	d006      	beq.n	83a <process_ext_irq+0x32>
			lower = middle + 1;
     82c:	0031      	movs	r1, r6
     82e:	e7f6      	b.n	81e <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     830:	4b02      	ldr	r3, [pc, #8]	; (83c <process_ext_irq+0x34>)
     832:	681b      	ldr	r3, [r3, #0]
     834:	2b00      	cmp	r3, #0
     836:	d000      	beq.n	83a <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     838:	4798      	blx	r3
		}
	}
}
     83a:	bd70      	pop	{r4, r5, r6, pc}
     83c:	200000b8 	.word	0x200000b8

00000840 <ext_irq_init>:
{
     840:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     842:	4b05      	ldr	r3, [pc, #20]	; (858 <ext_irq_init+0x18>)
     844:	2201      	movs	r2, #1
     846:	4252      	negs	r2, r2
     848:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     84a:	2200      	movs	r2, #0
     84c:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     84e:	4803      	ldr	r0, [pc, #12]	; (85c <ext_irq_init+0x1c>)
     850:	4b03      	ldr	r3, [pc, #12]	; (860 <ext_irq_init+0x20>)
     852:	4798      	blx	r3
}
     854:	bd10      	pop	{r4, pc}
     856:	46c0      	nop			; (mov r8, r8)
     858:	200000b8 	.word	0x200000b8
     85c:	00000809 	.word	0x00000809
     860:	00000cdd 	.word	0x00000cdd

00000864 <ext_irq_register>:
{
     864:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     866:	4b0f      	ldr	r3, [pc, #60]	; (8a4 <ext_irq_register+0x40>)
     868:	685b      	ldr	r3, [r3, #4]
     86a:	4298      	cmp	r0, r3
     86c:	d008      	beq.n	880 <ext_irq_register+0x1c>
	if (NULL == cb) {
     86e:	2900      	cmp	r1, #0
     870:	d014      	beq.n	89c <ext_irq_register+0x38>
			if (NULL == ext_irqs[i].cb) {
     872:	4b0c      	ldr	r3, [pc, #48]	; (8a4 <ext_irq_register+0x40>)
     874:	681b      	ldr	r3, [r3, #0]
     876:	2b00      	cmp	r3, #0
     878:	d009      	beq.n	88e <ext_irq_register+0x2a>
		return ERR_INVALID_ARG;
     87a:	200d      	movs	r0, #13
     87c:	4240      	negs	r0, r0
     87e:	e00c      	b.n	89a <ext_irq_register+0x36>
			ext_irqs[i].cb = cb;
     880:	4b08      	ldr	r3, [pc, #32]	; (8a4 <ext_irq_register+0x40>)
     882:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     884:	2900      	cmp	r1, #0
     886:	d105      	bne.n	894 <ext_irq_register+0x30>
		return _ext_irq_enable(pin, false);
     888:	4b07      	ldr	r3, [pc, #28]	; (8a8 <ext_irq_register+0x44>)
     88a:	4798      	blx	r3
     88c:	e005      	b.n	89a <ext_irq_register+0x36>
				ext_irqs[i].cb  = cb;
     88e:	4b05      	ldr	r3, [pc, #20]	; (8a4 <ext_irq_register+0x40>)
     890:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     892:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     894:	2101      	movs	r1, #1
     896:	4b04      	ldr	r3, [pc, #16]	; (8a8 <ext_irq_register+0x44>)
     898:	4798      	blx	r3
}
     89a:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     89c:	200d      	movs	r0, #13
     89e:	4240      	negs	r0, r0
     8a0:	e7fb      	b.n	89a <ext_irq_register+0x36>
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	200000b8 	.word	0x200000b8
     8a8:	00000d75 	.word	0x00000d75

000008ac <sleep>:
 * \retval -1 The requested sleep mode was invalid or not available
 * \retval  0 The operation completed successfully, returned after leaving the
 *            sleep
 */
int sleep(const uint8_t mode)
{
     8ac:	b510      	push	{r4, lr}
	if (ERR_NONE != _set_sleep_mode(mode))
     8ae:	4b05      	ldr	r3, [pc, #20]	; (8c4 <sleep+0x18>)
     8b0:	4798      	blx	r3
     8b2:	2800      	cmp	r0, #0
     8b4:	d103      	bne.n	8be <sleep+0x12>
		return ERR_INVALID_ARG;

	_go_to_sleep();
     8b6:	4b04      	ldr	r3, [pc, #16]	; (8c8 <sleep+0x1c>)
     8b8:	4798      	blx	r3

	return ERR_NONE;
     8ba:	2000      	movs	r0, #0
}
     8bc:	bd10      	pop	{r4, pc}
		return ERR_INVALID_ARG;
     8be:	200d      	movs	r0, #13
     8c0:	4240      	negs	r0, r0
     8c2:	e7fb      	b.n	8bc <sleep+0x10>
     8c4:	00000ec5 	.word	0x00000ec5
     8c8:	00000c81 	.word	0x00000c81

000008cc <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     8cc:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     8ce:	3808      	subs	r0, #8

	descr->stat = 0;
     8d0:	2300      	movs	r3, #0
     8d2:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     8d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
     8d6:	2b00      	cmp	r3, #0
     8d8:	d000      	beq.n	8dc <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     8da:	4798      	blx	r3
	}
}
     8dc:	bd10      	pop	{r4, pc}

000008de <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     8de:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     8e0:	3808      	subs	r0, #8

	descr->stat = 0;
     8e2:	2300      	movs	r3, #0
     8e4:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     8e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     8e8:	2b00      	cmp	r3, #0
     8ea:	d000      	beq.n	8ee <usart_error+0x10>
		descr->usart_cb.error(descr);
     8ec:	4798      	blx	r3
	}
}
     8ee:	bd10      	pop	{r4, pc}

000008f0 <usart_fill_rx_buffer>:
{
     8f0:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     8f2:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     8f4:	302c      	adds	r0, #44	; 0x2c
     8f6:	4b04      	ldr	r3, [pc, #16]	; (908 <usart_fill_rx_buffer+0x18>)
     8f8:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     8fa:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     8fc:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     8fe:	2b00      	cmp	r3, #0
     900:	d001      	beq.n	906 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     902:	0020      	movs	r0, r4
     904:	4798      	blx	r3
}
     906:	bd10      	pop	{r4, pc}
     908:	00000bf9 	.word	0x00000bf9

0000090c <usart_async_write>:
{
     90c:	b570      	push	{r4, r5, r6, lr}
     90e:	0004      	movs	r4, r0
     910:	000e      	movs	r6, r1
     912:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     914:	2800      	cmp	r0, #0
     916:	d01d      	beq.n	954 <usart_async_write+0x48>
     918:	2900      	cmp	r1, #0
     91a:	d01d      	beq.n	958 <usart_async_write+0x4c>
     91c:	0010      	movs	r0, r2
     91e:	1e43      	subs	r3, r0, #1
     920:	4198      	sbcs	r0, r3
     922:	223c      	movs	r2, #60	; 0x3c
     924:	32ff      	adds	r2, #255	; 0xff
     926:	490f      	ldr	r1, [pc, #60]	; (964 <usart_async_write+0x58>)
     928:	4b0f      	ldr	r3, [pc, #60]	; (968 <usart_async_write+0x5c>)
     92a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     92c:	2344      	movs	r3, #68	; 0x44
     92e:	5ae2      	ldrh	r2, [r4, r3]
     930:	3308      	adds	r3, #8
     932:	5ae3      	ldrh	r3, [r4, r3]
     934:	429a      	cmp	r2, r3
     936:	d111      	bne.n	95c <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
     938:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     93a:	234c      	movs	r3, #76	; 0x4c
     93c:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     93e:	2200      	movs	r2, #0
     940:	3b08      	subs	r3, #8
     942:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     944:	3b43      	subs	r3, #67	; 0x43
     946:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     948:	0020      	movs	r0, r4
     94a:	3008      	adds	r0, #8
     94c:	4b07      	ldr	r3, [pc, #28]	; (96c <usart_async_write+0x60>)
     94e:	4798      	blx	r3
	return (int32_t)length;
     950:	0028      	movs	r0, r5
}
     952:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     954:	2000      	movs	r0, #0
     956:	e7e4      	b.n	922 <usart_async_write+0x16>
     958:	2000      	movs	r0, #0
     95a:	e7e2      	b.n	922 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     95c:	201c      	movs	r0, #28
     95e:	4240      	negs	r0, r0
     960:	e7f7      	b.n	952 <usart_async_write+0x46>
     962:	46c0      	nop			; (mov r8, r8)
     964:	000022ec 	.word	0x000022ec
     968:	00000b55 	.word	0x00000b55
     96c:	00001191 	.word	0x00001191

00000970 <usart_process_byte_sent>:
{
     970:	b570      	push	{r4, r5, r6, lr}
     972:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     974:	0001      	movs	r1, r0
     976:	3908      	subs	r1, #8
     978:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     97a:	224c      	movs	r2, #76	; 0x4c
     97c:	5a8a      	ldrh	r2, [r1, r2]
     97e:	429a      	cmp	r2, r3
     980:	d00c      	beq.n	99c <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     982:	000a      	movs	r2, r1
     984:	6c89      	ldr	r1, [r1, #72]	; 0x48
     986:	1c5d      	adds	r5, r3, #1
     988:	2044      	movs	r0, #68	; 0x44
     98a:	5215      	strh	r5, [r2, r0]
     98c:	5cc9      	ldrb	r1, [r1, r3]
     98e:	0020      	movs	r0, r4
     990:	4b04      	ldr	r3, [pc, #16]	; (9a4 <usart_process_byte_sent+0x34>)
     992:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     994:	0020      	movs	r0, r4
     996:	4b04      	ldr	r3, [pc, #16]	; (9a8 <usart_process_byte_sent+0x38>)
     998:	4798      	blx	r3
}
     99a:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     99c:	4b03      	ldr	r3, [pc, #12]	; (9ac <usart_process_byte_sent+0x3c>)
     99e:	4798      	blx	r3
}
     9a0:	e7fb      	b.n	99a <usart_process_byte_sent+0x2a>
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	00001189 	.word	0x00001189
     9a8:	00001191 	.word	0x00001191
     9ac:	00001199 	.word	0x00001199

000009b0 <usart_async_read>:
{
     9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9b2:	46ce      	mov	lr, r9
     9b4:	4647      	mov	r7, r8
     9b6:	b580      	push	{r7, lr}
     9b8:	b085      	sub	sp, #20
     9ba:	0005      	movs	r5, r0
     9bc:	000e      	movs	r6, r1
     9be:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
     9c0:	2800      	cmp	r0, #0
     9c2:	d015      	beq.n	9f0 <usart_async_read+0x40>
     9c4:	2900      	cmp	r1, #0
     9c6:	d013      	beq.n	9f0 <usart_async_read+0x40>
     9c8:	2a00      	cmp	r2, #0
     9ca:	d12a      	bne.n	a22 <usart_async_read+0x72>
     9cc:	22ac      	movs	r2, #172	; 0xac
     9ce:	0052      	lsls	r2, r2, #1
     9d0:	4929      	ldr	r1, [pc, #164]	; (a78 <usart_async_read+0xc8>)
     9d2:	2000      	movs	r0, #0
     9d4:	4b29      	ldr	r3, [pc, #164]	; (a7c <usart_async_read+0xcc>)
     9d6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     9d8:	a803      	add	r0, sp, #12
     9da:	4b29      	ldr	r3, [pc, #164]	; (a80 <usart_async_read+0xd0>)
     9dc:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     9de:	0028      	movs	r0, r5
     9e0:	3034      	adds	r0, #52	; 0x34
     9e2:	4b28      	ldr	r3, [pc, #160]	; (a84 <usart_async_read+0xd4>)
     9e4:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     9e6:	a803      	add	r0, sp, #12
     9e8:	4b27      	ldr	r3, [pc, #156]	; (a88 <usart_async_read+0xd8>)
     9ea:	4798      	blx	r3
	uint16_t                       was_read = 0;
     9ec:	2500      	movs	r5, #0
	return (int32_t)was_read;
     9ee:	e03c      	b.n	a6a <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     9f0:	22ac      	movs	r2, #172	; 0xac
     9f2:	0052      	lsls	r2, r2, #1
     9f4:	4920      	ldr	r1, [pc, #128]	; (a78 <usart_async_read+0xc8>)
     9f6:	2000      	movs	r0, #0
     9f8:	4b20      	ldr	r3, [pc, #128]	; (a7c <usart_async_read+0xcc>)
     9fa:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     9fc:	a803      	add	r0, sp, #12
     9fe:	4b20      	ldr	r3, [pc, #128]	; (a80 <usart_async_read+0xd0>)
     a00:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     a02:	3534      	adds	r5, #52	; 0x34
     a04:	0028      	movs	r0, r5
     a06:	9501      	str	r5, [sp, #4]
     a08:	4b1e      	ldr	r3, [pc, #120]	; (a84 <usart_async_read+0xd4>)
     a0a:	4798      	blx	r3
     a0c:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     a0e:	a803      	add	r0, sp, #12
     a10:	4b1d      	ldr	r3, [pc, #116]	; (a88 <usart_async_read+0xd8>)
     a12:	4798      	blx	r3
	uint16_t                       was_read = 0;
     a14:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     a16:	4643      	mov	r3, r8
     a18:	2b00      	cmp	r3, #0
     a1a:	d026      	beq.n	a6a <usart_async_read+0xba>
     a1c:	2f00      	cmp	r7, #0
     a1e:	d116      	bne.n	a4e <usart_async_read+0x9e>
     a20:	e023      	b.n	a6a <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     a22:	22ac      	movs	r2, #172	; 0xac
     a24:	0052      	lsls	r2, r2, #1
     a26:	4914      	ldr	r1, [pc, #80]	; (a78 <usart_async_read+0xc8>)
     a28:	2001      	movs	r0, #1
     a2a:	4b14      	ldr	r3, [pc, #80]	; (a7c <usart_async_read+0xcc>)
     a2c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     a2e:	a803      	add	r0, sp, #12
     a30:	4b13      	ldr	r3, [pc, #76]	; (a80 <usart_async_read+0xd0>)
     a32:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     a34:	3534      	adds	r5, #52	; 0x34
     a36:	0028      	movs	r0, r5
     a38:	9501      	str	r5, [sp, #4]
     a3a:	4b12      	ldr	r3, [pc, #72]	; (a84 <usart_async_read+0xd4>)
     a3c:	4798      	blx	r3
     a3e:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     a40:	a803      	add	r0, sp, #12
     a42:	4b11      	ldr	r3, [pc, #68]	; (a88 <usart_async_read+0xd8>)
     a44:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     a46:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
     a48:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     a4a:	2b00      	cmp	r3, #0
     a4c:	d00d      	beq.n	a6a <usart_async_read+0xba>
{
     a4e:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     a50:	4b0e      	ldr	r3, [pc, #56]	; (a8c <usart_async_read+0xdc>)
     a52:	4699      	mov	r9, r3
     a54:	1c65      	adds	r5, r4, #1
     a56:	b2ad      	uxth	r5, r5
     a58:	1931      	adds	r1, r6, r4
     a5a:	9801      	ldr	r0, [sp, #4]
     a5c:	47c8      	blx	r9
     a5e:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     a60:	4544      	cmp	r4, r8
     a62:	d202      	bcs.n	a6a <usart_async_read+0xba>
     a64:	b2a3      	uxth	r3, r4
     a66:	429f      	cmp	r7, r3
     a68:	d8f4      	bhi.n	a54 <usart_async_read+0xa4>
}
     a6a:	0028      	movs	r0, r5
     a6c:	b005      	add	sp, #20
     a6e:	bc0c      	pop	{r2, r3}
     a70:	4690      	mov	r8, r2
     a72:	4699      	mov	r9, r3
     a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	000022ec 	.word	0x000022ec
     a7c:	00000b55 	.word	0x00000b55
     a80:	00000759 	.word	0x00000759
     a84:	00000c39 	.word	0x00000c39
     a88:	00000767 	.word	0x00000767
     a8c:	00000bb1 	.word	0x00000bb1

00000a90 <usart_async_init>:
{
     a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a92:	0004      	movs	r4, r0
     a94:	000d      	movs	r5, r1
     a96:	0016      	movs	r6, r2
     a98:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     a9a:	2800      	cmp	r0, #0
     a9c:	d026      	beq.n	aec <usart_async_init+0x5c>
     a9e:	2900      	cmp	r1, #0
     aa0:	d026      	beq.n	af0 <usart_async_init+0x60>
     aa2:	2a00      	cmp	r2, #0
     aa4:	d026      	beq.n	af4 <usart_async_init+0x64>
     aa6:	0018      	movs	r0, r3
     aa8:	1e43      	subs	r3, r0, #1
     aaa:	4198      	sbcs	r0, r3
     aac:	223a      	movs	r2, #58	; 0x3a
     aae:	4914      	ldr	r1, [pc, #80]	; (b00 <usart_async_init+0x70>)
     ab0:	4b14      	ldr	r3, [pc, #80]	; (b04 <usart_async_init+0x74>)
     ab2:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     ab4:	0020      	movs	r0, r4
     ab6:	3034      	adds	r0, #52	; 0x34
     ab8:	003a      	movs	r2, r7
     aba:	0031      	movs	r1, r6
     abc:	4b12      	ldr	r3, [pc, #72]	; (b08 <usart_async_init+0x78>)
     abe:	4798      	blx	r3
     ac0:	2800      	cmp	r0, #0
     ac2:	d119      	bne.n	af8 <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
     ac4:	0020      	movs	r0, r4
     ac6:	3008      	adds	r0, #8
     ac8:	0029      	movs	r1, r5
     aca:	4b10      	ldr	r3, [pc, #64]	; (b0c <usart_async_init+0x7c>)
     acc:	4798      	blx	r3
	if (init_status) {
     ace:	2800      	cmp	r0, #0
     ad0:	d10b      	bne.n	aea <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     ad2:	4b0f      	ldr	r3, [pc, #60]	; (b10 <usart_async_init+0x80>)
     ad4:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     ad6:	4b0f      	ldr	r3, [pc, #60]	; (b14 <usart_async_init+0x84>)
     ad8:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     ada:	4b0f      	ldr	r3, [pc, #60]	; (b18 <usart_async_init+0x88>)
     adc:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     ade:	4b0f      	ldr	r3, [pc, #60]	; (b1c <usart_async_init+0x8c>)
     ae0:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     ae2:	4b0f      	ldr	r3, [pc, #60]	; (b20 <usart_async_init+0x90>)
     ae4:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     ae6:	4b0f      	ldr	r3, [pc, #60]	; (b24 <usart_async_init+0x94>)
     ae8:	6163      	str	r3, [r4, #20]
}
     aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     aec:	2000      	movs	r0, #0
     aee:	e7dd      	b.n	aac <usart_async_init+0x1c>
     af0:	2000      	movs	r0, #0
     af2:	e7db      	b.n	aac <usart_async_init+0x1c>
     af4:	2000      	movs	r0, #0
     af6:	e7d9      	b.n	aac <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     af8:	200d      	movs	r0, #13
     afa:	4240      	negs	r0, r0
     afc:	e7f5      	b.n	aea <usart_async_init+0x5a>
     afe:	46c0      	nop			; (mov r8, r8)
     b00:	000022ec 	.word	0x000022ec
     b04:	00000b55 	.word	0x00000b55
     b08:	00000b5d 	.word	0x00000b5d
     b0c:	000010f9 	.word	0x000010f9
     b10:	000009b1 	.word	0x000009b1
     b14:	0000090d 	.word	0x0000090d
     b18:	00000971 	.word	0x00000971
     b1c:	000008f1 	.word	0x000008f1
     b20:	000008cd 	.word	0x000008cd
     b24:	000008df 	.word	0x000008df

00000b28 <usart_async_enable>:
{
     b28:	b510      	push	{r4, lr}
     b2a:	0004      	movs	r4, r0
	ASSERT(descr);
     b2c:	1e43      	subs	r3, r0, #1
     b2e:	4198      	sbcs	r0, r3
     b30:	b2c0      	uxtb	r0, r0
     b32:	2261      	movs	r2, #97	; 0x61
     b34:	4904      	ldr	r1, [pc, #16]	; (b48 <usart_async_enable+0x20>)
     b36:	4b05      	ldr	r3, [pc, #20]	; (b4c <usart_async_enable+0x24>)
     b38:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     b3a:	0020      	movs	r0, r4
     b3c:	3008      	adds	r0, #8
     b3e:	4b04      	ldr	r3, [pc, #16]	; (b50 <usart_async_enable+0x28>)
     b40:	4798      	blx	r3
}
     b42:	2000      	movs	r0, #0
     b44:	bd10      	pop	{r4, pc}
     b46:	46c0      	nop			; (mov r8, r8)
     b48:	000022ec 	.word	0x000022ec
     b4c:	00000b55 	.word	0x00000b55
     b50:	00001175 	.word	0x00001175

00000b54 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     b54:	2800      	cmp	r0, #0
     b56:	d100      	bne.n	b5a <assert+0x6>
		__asm("BKPT #0");
     b58:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     b5a:	4770      	bx	lr

00000b5c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     b5c:	b570      	push	{r4, r5, r6, lr}
     b5e:	0004      	movs	r4, r0
     b60:	000e      	movs	r6, r1
     b62:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     b64:	2800      	cmp	r0, #0
     b66:	d00b      	beq.n	b80 <ringbuffer_init+0x24>
     b68:	2900      	cmp	r1, #0
     b6a:	d018      	beq.n	b9e <ringbuffer_init+0x42>
     b6c:	2001      	movs	r0, #1
     b6e:	2a00      	cmp	r2, #0
     b70:	d107      	bne.n	b82 <ringbuffer_init+0x26>
     b72:	2228      	movs	r2, #40	; 0x28
     b74:	490c      	ldr	r1, [pc, #48]	; (ba8 <ringbuffer_init+0x4c>)
     b76:	2000      	movs	r0, #0
     b78:	4b0c      	ldr	r3, [pc, #48]	; (bac <ringbuffer_init+0x50>)
     b7a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     b7c:	1e6b      	subs	r3, r5, #1
     b7e:	e007      	b.n	b90 <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
     b80:	2000      	movs	r0, #0
     b82:	2228      	movs	r2, #40	; 0x28
     b84:	4908      	ldr	r1, [pc, #32]	; (ba8 <ringbuffer_init+0x4c>)
     b86:	4b09      	ldr	r3, [pc, #36]	; (bac <ringbuffer_init+0x50>)
     b88:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
     b8a:	1e6b      	subs	r3, r5, #1
     b8c:	422b      	tst	r3, r5
     b8e:	d108      	bne.n	ba2 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     b90:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     b92:	2300      	movs	r3, #0
     b94:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     b96:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     b98:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     b9a:	2000      	movs	r0, #0
}
     b9c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     b9e:	2000      	movs	r0, #0
     ba0:	e7ef      	b.n	b82 <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
     ba2:	200d      	movs	r0, #13
     ba4:	4240      	negs	r0, r0
     ba6:	e7f9      	b.n	b9c <ringbuffer_init+0x40>
     ba8:	0000230c 	.word	0x0000230c
     bac:	00000b55 	.word	0x00000b55

00000bb0 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     bb0:	b570      	push	{r4, r5, r6, lr}
     bb2:	0004      	movs	r4, r0
     bb4:	000d      	movs	r5, r1
	ASSERT(rb && data);
     bb6:	2800      	cmp	r0, #0
     bb8:	d015      	beq.n	be6 <ringbuffer_get+0x36>
     bba:	0008      	movs	r0, r1
     bbc:	1e43      	subs	r3, r0, #1
     bbe:	4198      	sbcs	r0, r3
     bc0:	b2c0      	uxtb	r0, r0
     bc2:	2240      	movs	r2, #64	; 0x40
     bc4:	490a      	ldr	r1, [pc, #40]	; (bf0 <ringbuffer_get+0x40>)
     bc6:	4b0b      	ldr	r3, [pc, #44]	; (bf4 <ringbuffer_get+0x44>)
     bc8:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     bca:	68a3      	ldr	r3, [r4, #8]
     bcc:	68e2      	ldr	r2, [r4, #12]
     bce:	429a      	cmp	r2, r3
     bd0:	d00b      	beq.n	bea <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
     bd2:	6862      	ldr	r2, [r4, #4]
     bd4:	4013      	ands	r3, r2
     bd6:	6822      	ldr	r2, [r4, #0]
     bd8:	5cd3      	ldrb	r3, [r2, r3]
     bda:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     bdc:	68a3      	ldr	r3, [r4, #8]
     bde:	3301      	adds	r3, #1
     be0:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     be2:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     be4:	bd70      	pop	{r4, r5, r6, pc}
     be6:	2000      	movs	r0, #0
     be8:	e7eb      	b.n	bc2 <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
     bea:	200a      	movs	r0, #10
     bec:	4240      	negs	r0, r0
     bee:	e7f9      	b.n	be4 <ringbuffer_get+0x34>
     bf0:	0000230c 	.word	0x0000230c
     bf4:	00000b55 	.word	0x00000b55

00000bf8 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     bf8:	b570      	push	{r4, r5, r6, lr}
     bfa:	0004      	movs	r4, r0
     bfc:	000d      	movs	r5, r1
	ASSERT(rb);
     bfe:	1e43      	subs	r3, r0, #1
     c00:	4198      	sbcs	r0, r3
     c02:	b2c0      	uxtb	r0, r0
     c04:	2251      	movs	r2, #81	; 0x51
     c06:	490a      	ldr	r1, [pc, #40]	; (c30 <ringbuffer_put+0x38>)
     c08:	4b0a      	ldr	r3, [pc, #40]	; (c34 <ringbuffer_put+0x3c>)
     c0a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     c0c:	6863      	ldr	r3, [r4, #4]
     c0e:	68e2      	ldr	r2, [r4, #12]
     c10:	4013      	ands	r3, r2
     c12:	6822      	ldr	r2, [r4, #0]
     c14:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     c16:	68e3      	ldr	r3, [r4, #12]
     c18:	6861      	ldr	r1, [r4, #4]
     c1a:	68a2      	ldr	r2, [r4, #8]
     c1c:	1a9a      	subs	r2, r3, r2
     c1e:	428a      	cmp	r2, r1
     c20:	d901      	bls.n	c26 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     c22:	1a59      	subs	r1, r3, r1
     c24:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     c26:	3301      	adds	r3, #1
     c28:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     c2a:	2000      	movs	r0, #0
     c2c:	bd70      	pop	{r4, r5, r6, pc}
     c2e:	46c0      	nop			; (mov r8, r8)
     c30:	0000230c 	.word	0x0000230c
     c34:	00000b55 	.word	0x00000b55

00000c38 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     c38:	b510      	push	{r4, lr}
     c3a:	0004      	movs	r4, r0
	ASSERT(rb);
     c3c:	1e43      	subs	r3, r0, #1
     c3e:	4198      	sbcs	r0, r3
     c40:	b2c0      	uxtb	r0, r0
     c42:	2267      	movs	r2, #103	; 0x67
     c44:	4903      	ldr	r1, [pc, #12]	; (c54 <ringbuffer_num+0x1c>)
     c46:	4b04      	ldr	r3, [pc, #16]	; (c58 <ringbuffer_num+0x20>)
     c48:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     c4a:	68e0      	ldr	r0, [r4, #12]
     c4c:	68a3      	ldr	r3, [r4, #8]
     c4e:	1ac0      	subs	r0, r0, r3
}
     c50:	bd10      	pop	{r4, pc}
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	0000230c 	.word	0x0000230c
     c58:	00000b55 	.word	0x00000b55

00000c5c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     c5c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     c5e:	4a06      	ldr	r2, [pc, #24]	; (c78 <_sbrk+0x1c>)
     c60:	6812      	ldr	r2, [r2, #0]
     c62:	2a00      	cmp	r2, #0
     c64:	d004      	beq.n	c70 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     c66:	4a04      	ldr	r2, [pc, #16]	; (c78 <_sbrk+0x1c>)
     c68:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     c6a:	18c3      	adds	r3, r0, r3
     c6c:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     c6e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     c70:	4902      	ldr	r1, [pc, #8]	; (c7c <_sbrk+0x20>)
     c72:	4a01      	ldr	r2, [pc, #4]	; (c78 <_sbrk+0x1c>)
     c74:	6011      	str	r1, [r2, #0]
     c76:	e7f6      	b.n	c66 <_sbrk+0xa>
     c78:	200000c0 	.word	0x200000c0
     c7c:	200021c0 	.word	0x200021c0

00000c80 <_go_to_sleep>:
  __ASM volatile ("dsb 0xF":::"memory");
     c80:	f3bf 8f4f 	dsb	sy
 * \brief Put MCU to sleep
 */
void _go_to_sleep(void)
{
	__DSB();
	__WFI();
     c84:	bf30      	wfi
}
     c86:	4770      	bx	lr

00000c88 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
     c88:	b510      	push	{r4, lr}
     c8a:	0003      	movs	r3, r0
		return (us * (freq / 10000) + 299) / 300;
     c8c:	20c8      	movs	r0, #200	; 0xc8
     c8e:	0080      	lsls	r0, r0, #2
     c90:	4358      	muls	r0, r3
     c92:	302c      	adds	r0, #44	; 0x2c
     c94:	30ff      	adds	r0, #255	; 0xff
     c96:	2196      	movs	r1, #150	; 0x96
     c98:	0049      	lsls	r1, r1, #1
     c9a:	4b01      	ldr	r3, [pc, #4]	; (ca0 <_get_cycles_for_us+0x18>)
     c9c:	4798      	blx	r3
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     c9e:	bd10      	pop	{r4, pc}
     ca0:	000016cd 	.word	0x000016cd

00000ca4 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     ca4:	3901      	subs	r1, #1
     ca6:	d8fd      	bhi.n	ca4 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     ca8:	4770      	bx	lr
	...

00000cac <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     cac:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     cae:	4b06      	ldr	r3, [pc, #24]	; (cc8 <_init_chip+0x1c>)
     cb0:	685a      	ldr	r2, [r3, #4]
     cb2:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     cb4:	4b05      	ldr	r3, [pc, #20]	; (ccc <_init_chip+0x20>)
     cb6:	4798      	blx	r3
	_sysctrl_init_sources();
     cb8:	4b05      	ldr	r3, [pc, #20]	; (cd0 <_init_chip+0x24>)
     cba:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     cbc:	4b05      	ldr	r3, [pc, #20]	; (cd4 <_init_chip+0x28>)
     cbe:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     cc0:	20ff      	movs	r0, #255	; 0xff
     cc2:	4b05      	ldr	r3, [pc, #20]	; (cd8 <_init_chip+0x2c>)
     cc4:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     cc6:	bd10      	pop	{r4, pc}
     cc8:	41004000 	.word	0x41004000
     ccc:	00000efd 	.word	0x00000efd
     cd0:	00001281 	.word	0x00001281
     cd4:	000012c5 	.word	0x000012c5
     cd8:	00000e89 	.word	0x00000e89

00000cdc <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     cdc:	4a22      	ldr	r2, [pc, #136]	; (d68 <_ext_irq_init+0x8c>)
     cde:	7853      	ldrb	r3, [r2, #1]
     ce0:	09db      	lsrs	r3, r3, #7
     ce2:	d1fc      	bne.n	cde <_ext_irq_init+0x2>
     ce4:	4a20      	ldr	r2, [pc, #128]	; (d68 <_ext_irq_init+0x8c>)
     ce6:	7853      	ldrb	r3, [r2, #1]
     ce8:	09db      	lsrs	r3, r3, #7
     cea:	d1fc      	bne.n	ce6 <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     cec:	4b1e      	ldr	r3, [pc, #120]	; (d68 <_ext_irq_init+0x8c>)
     cee:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     cf0:	079b      	lsls	r3, r3, #30
     cf2:	d50a      	bpl.n	d0a <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     cf4:	2200      	movs	r2, #0
     cf6:	4b1c      	ldr	r3, [pc, #112]	; (d68 <_ext_irq_init+0x8c>)
     cf8:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     cfa:	001a      	movs	r2, r3
     cfc:	7853      	ldrb	r3, [r2, #1]
     cfe:	09db      	lsrs	r3, r3, #7
     d00:	d1fc      	bne.n	cfc <_ext_irq_init+0x20>
     d02:	4a19      	ldr	r2, [pc, #100]	; (d68 <_ext_irq_init+0x8c>)
     d04:	7853      	ldrb	r3, [r2, #1]
     d06:	09db      	lsrs	r3, r3, #7
     d08:	d1fc      	bne.n	d04 <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
     d0a:	2201      	movs	r2, #1
     d0c:	4b16      	ldr	r3, [pc, #88]	; (d68 <_ext_irq_init+0x8c>)
     d0e:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     d10:	001a      	movs	r2, r3
     d12:	7853      	ldrb	r3, [r2, #1]
     d14:	09db      	lsrs	r3, r3, #7
     d16:	d1fc      	bne.n	d12 <_ext_irq_init+0x36>
     d18:	4a13      	ldr	r2, [pc, #76]	; (d68 <_ext_irq_init+0x8c>)
     d1a:	7853      	ldrb	r3, [r2, #1]
     d1c:	09db      	lsrs	r3, r3, #7
     d1e:	d1fc      	bne.n	d1a <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     d20:	4b11      	ldr	r3, [pc, #68]	; (d68 <_ext_irq_init+0x8c>)
     d22:	2200      	movs	r2, #0
     d24:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     d26:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     d28:	2180      	movs	r1, #128	; 0x80
     d2a:	0209      	lsls	r1, r1, #8
     d2c:	6159      	str	r1, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     d2e:	619a      	str	r2, [r3, #24]
     d30:	22a0      	movs	r2, #160	; 0xa0
     d32:	0612      	lsls	r2, r2, #24
     d34:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     d36:	781a      	ldrb	r2, [r3, #0]
     d38:	2102      	movs	r1, #2
     d3a:	430a      	orrs	r2, r1
     d3c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     d3e:	001a      	movs	r2, r3
     d40:	7853      	ldrb	r3, [r2, #1]
     d42:	09db      	lsrs	r3, r3, #7
     d44:	d1fc      	bne.n	d40 <_ext_irq_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d46:	4b09      	ldr	r3, [pc, #36]	; (d6c <_ext_irq_init+0x90>)
     d48:	2210      	movs	r2, #16
     d4a:	2180      	movs	r1, #128	; 0x80
     d4c:	505a      	str	r2, [r3, r1]
     d4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d52:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d56:	3101      	adds	r1, #1
     d58:	31ff      	adds	r1, #255	; 0xff
     d5a:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d5c:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     d5e:	4b04      	ldr	r3, [pc, #16]	; (d70 <_ext_irq_init+0x94>)
     d60:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     d62:	2000      	movs	r0, #0
     d64:	4770      	bx	lr
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	40001800 	.word	0x40001800
     d6c:	e000e100 	.word	0xe000e100
     d70:	200000c4 	.word	0x200000c4

00000d74 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
     d74:	280f      	cmp	r0, #15
     d76:	d002      	beq.n	d7e <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
     d78:	200d      	movs	r0, #13
     d7a:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
     d7c:	4770      	bx	lr
	if (enable) {
     d7e:	2900      	cmp	r1, #0
     d80:	d106      	bne.n	d90 <_ext_irq_enable+0x1c>
	((Eic *)hw)->INTENCLR.reg = mask;
     d82:	4b06      	ldr	r3, [pc, #24]	; (d9c <_ext_irq_enable+0x28>)
     d84:	2280      	movs	r2, #128	; 0x80
     d86:	0212      	lsls	r2, r2, #8
     d88:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     d8a:	611a      	str	r2, [r3, #16]
	return ERR_NONE;
     d8c:	2000      	movs	r0, #0
     d8e:	e7f5      	b.n	d7c <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
     d90:	2280      	movs	r2, #128	; 0x80
     d92:	0212      	lsls	r2, r2, #8
     d94:	4b01      	ldr	r3, [pc, #4]	; (d9c <_ext_irq_enable+0x28>)
     d96:	60da      	str	r2, [r3, #12]
     d98:	2000      	movs	r0, #0
     d9a:	e7ef      	b.n	d7c <_ext_irq_enable+0x8>
     d9c:	40001800 	.word	0x40001800

00000da0 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     da0:	b5f0      	push	{r4, r5, r6, r7, lr}
     da2:	46ce      	mov	lr, r9
     da4:	4647      	mov	r7, r8
     da6:	b580      	push	{r7, lr}
     da8:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
     daa:	4b31      	ldr	r3, [pc, #196]	; (e70 <EIC_Handler+0xd0>)
     dac:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     dae:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     db0:	400a      	ands	r2, r1
     db2:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     db4:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     db6:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     db8:	4b2e      	ldr	r3, [pc, #184]	; (e74 <EIC_Handler+0xd4>)
     dba:	6818      	ldr	r0, [r3, #0]
     dbc:	1e43      	subs	r3, r0, #1
     dbe:	4198      	sbcs	r0, r3
     dc0:	b2c0      	uxtb	r0, r0
     dc2:	22d2      	movs	r2, #210	; 0xd2
     dc4:	492c      	ldr	r1, [pc, #176]	; (e78 <EIC_Handler+0xd8>)
     dc6:	4b2d      	ldr	r3, [pc, #180]	; (e7c <EIC_Handler+0xdc>)
     dc8:	4798      	blx	r3

	while (flags) {
     dca:	9b01      	ldr	r3, [sp, #4]
     dcc:	2b00      	cmp	r3, #0
     dce:	d049      	beq.n	e64 <EIC_Handler+0xc4>
     dd0:	2301      	movs	r3, #1
     dd2:	425b      	negs	r3, r3
     dd4:	4699      	mov	r9, r3
		pos = ffs(flags) - 1;
     dd6:	4b2a      	ldr	r3, [pc, #168]	; (e80 <EIC_Handler+0xe0>)
     dd8:	4698      	mov	r8, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
     dda:	4f26      	ldr	r7, [pc, #152]	; (e74 <EIC_Handler+0xd4>)
				if (_map[middle].extint == pos) {
     ddc:	4d29      	ldr	r5, [pc, #164]	; (e84 <EIC_Handler+0xe4>)
     dde:	e03a      	b.n	e56 <EIC_Handler+0xb6>
					upper = middle - 1;
     de0:	3a01      	subs	r2, #1
     de2:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
     de4:	42b1      	cmp	r1, r6
     de6:	d80c      	bhi.n	e02 <EIC_Handler+0x62>
				middle = (upper + lower) >> 1;
     de8:	1873      	adds	r3, r6, r1
     dea:	105b      	asrs	r3, r3, #1
     dec:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
     dee:	4003      	ands	r3, r0
     df0:	00db      	lsls	r3, r3, #3
     df2:	5d5b      	ldrb	r3, [r3, r5]
     df4:	42a3      	cmp	r3, r4
     df6:	d008      	beq.n	e0a <EIC_Handler+0x6a>
				if (_map[middle].extint < pos) {
     df8:	429c      	cmp	r4, r3
     dfa:	ddf1      	ble.n	de0 <EIC_Handler+0x40>
					lower = middle + 1;
     dfc:	3201      	adds	r2, #1
     dfe:	b2d1      	uxtb	r1, r2
     e00:	e7f0      	b.n	de4 <EIC_Handler+0x44>
			if (INVALID_PIN_NUMBER != pin) {
     e02:	464b      	mov	r3, r9
     e04:	3301      	adds	r3, #1
     e06:	d005      	beq.n	e14 <EIC_Handler+0x74>
     e08:	e001      	b.n	e0e <EIC_Handler+0x6e>
     e0a:	230f      	movs	r3, #15
     e0c:	4699      	mov	r9, r3
				callback(pin);
     e0e:	4648      	mov	r0, r9
     e10:	683b      	ldr	r3, [r7, #0]
     e12:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     e14:	9b01      	ldr	r3, [sp, #4]
     e16:	2201      	movs	r2, #1
     e18:	40a2      	lsls	r2, r4
     e1a:	4393      	bics	r3, r2
     e1c:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     e1e:	9801      	ldr	r0, [sp, #4]
     e20:	4b17      	ldr	r3, [pc, #92]	; (e80 <EIC_Handler+0xe0>)
     e22:	4798      	blx	r3
     e24:	3801      	subs	r0, #1
     e26:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     e28:	1c63      	adds	r3, r4, #1
     e2a:	d00a      	beq.n	e42 <EIC_Handler+0xa2>
				if (_map[middle].extint == pos) {
     e2c:	2c0f      	cmp	r4, #15
     e2e:	d005      	beq.n	e3c <EIC_Handler+0x9c>
     e30:	230f      	movs	r3, #15
     e32:	2200      	movs	r2, #0
     e34:	2601      	movs	r6, #1
     e36:	2100      	movs	r1, #0
     e38:	20ff      	movs	r0, #255	; 0xff
     e3a:	e7dd      	b.n	df8 <EIC_Handler+0x58>
     e3c:	230f      	movs	r3, #15
     e3e:	4699      	mov	r9, r3
     e40:	e7e5      	b.n	e0e <EIC_Handler+0x6e>
	return ((Eic *)hw)->INTFLAG.reg;
     e42:	4b0b      	ldr	r3, [pc, #44]	; (e70 <EIC_Handler+0xd0>)
     e44:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     e46:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     e48:	400a      	ands	r2, r1
     e4a:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     e4c:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     e4e:	611a      	str	r2, [r3, #16]
	while (flags) {
     e50:	9b01      	ldr	r3, [sp, #4]
     e52:	2b00      	cmp	r3, #0
     e54:	d006      	beq.n	e64 <EIC_Handler+0xc4>
		pos = ffs(flags) - 1;
     e56:	9801      	ldr	r0, [sp, #4]
     e58:	47c0      	blx	r8
     e5a:	3801      	subs	r0, #1
     e5c:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     e5e:	1c63      	adds	r3, r4, #1
     e60:	d1e4      	bne.n	e2c <EIC_Handler+0x8c>
     e62:	e7ee      	b.n	e42 <EIC_Handler+0xa2>
	}
}
     e64:	b003      	add	sp, #12
     e66:	bc0c      	pop	{r2, r3}
     e68:	4690      	mov	r8, r2
     e6a:	4699      	mov	r9, r3
     e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	40001800 	.word	0x40001800
     e74:	200000c4 	.word	0x200000c4
     e78:	00002338 	.word	0x00002338
     e7c:	00000b55 	.word	0x00000b55
     e80:	000019b9 	.word	0x000019b9
     e84:	00002330 	.word	0x00002330

00000e88 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     e88:	07c3      	lsls	r3, r0, #31
     e8a:	d50a      	bpl.n	ea2 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     e8c:	4b0b      	ldr	r3, [pc, #44]	; (ebc <_gclk_init_generators_by_fref+0x34>)
     e8e:	2280      	movs	r2, #128	; 0x80
     e90:	0052      	lsls	r2, r2, #1
     e92:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     e94:	2283      	movs	r2, #131	; 0x83
     e96:	0252      	lsls	r2, r2, #9
     e98:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     e9a:	001a      	movs	r2, r3
     e9c:	7853      	ldrb	r3, [r2, #1]
     e9e:	09db      	lsrs	r3, r3, #7
     ea0:	d1fc      	bne.n	e9c <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     ea2:	0703      	lsls	r3, r0, #28
     ea4:	d509      	bpl.n	eba <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
     ea6:	4b05      	ldr	r3, [pc, #20]	; (ebc <_gclk_init_generators_by_fref+0x34>)
     ea8:	2204      	movs	r2, #4
     eaa:	32ff      	adds	r2, #255	; 0xff
     eac:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     eae:	4a04      	ldr	r2, [pc, #16]	; (ec0 <_gclk_init_generators_by_fref+0x38>)
     eb0:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     eb2:	001a      	movs	r2, r3
     eb4:	7853      	ldrb	r3, [r2, #1]
     eb6:	09db      	lsrs	r3, r3, #7
     eb8:	d1fc      	bne.n	eb4 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     eba:	4770      	bx	lr
     ebc:	40000c00 	.word	0x40000c00
     ec0:	00210303 	.word	0x00210303

00000ec4 <_set_sleep_mode>:
/**
 * \brief Set the sleep mode for the device
 */
int32_t _set_sleep_mode(const uint8_t mode)
{
	switch (mode) {
     ec4:	2802      	cmp	r0, #2
     ec6:	d904      	bls.n	ed2 <_set_sleep_mode+0xe>
     ec8:	2803      	cmp	r0, #3
     eca:	d00b      	beq.n	ee4 <_set_sleep_mode+0x20>
		return ERR_NONE;
	case 3:
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
		return ERR_NONE;
	default:
		return ERR_INVALID_ARG;
     ecc:	200d      	movs	r0, #13
     ece:	4240      	negs	r0, r0
     ed0:	e007      	b.n	ee2 <_set_sleep_mode+0x1e>
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
     ed2:	4a08      	ldr	r2, [pc, #32]	; (ef4 <_set_sleep_mode+0x30>)
     ed4:	6913      	ldr	r3, [r2, #16]
     ed6:	2104      	movs	r1, #4
     ed8:	438b      	bics	r3, r1
     eda:	6113      	str	r3, [r2, #16]
		PM->SLEEP.reg = mode;
     edc:	4b06      	ldr	r3, [pc, #24]	; (ef8 <_set_sleep_mode+0x34>)
     ede:	7058      	strb	r0, [r3, #1]
		return ERR_NONE;
     ee0:	2000      	movs	r0, #0
	}
}
     ee2:	4770      	bx	lr
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
     ee4:	4a03      	ldr	r2, [pc, #12]	; (ef4 <_set_sleep_mode+0x30>)
     ee6:	6913      	ldr	r3, [r2, #16]
     ee8:	2104      	movs	r1, #4
     eea:	430b      	orrs	r3, r1
     eec:	6113      	str	r3, [r2, #16]
		return ERR_NONE;
     eee:	2000      	movs	r0, #0
     ef0:	e7f7      	b.n	ee2 <_set_sleep_mode+0x1e>
     ef2:	46c0      	nop			; (mov r8, r8)
     ef4:	e000ed00 	.word	0xe000ed00
     ef8:	40000400 	.word	0x40000400

00000efc <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     efc:	4b06      	ldr	r3, [pc, #24]	; (f18 <_pm_init+0x1c>)
     efe:	7a1a      	ldrb	r2, [r3, #8]
     f00:	b2d2      	uxtb	r2, r2
     f02:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     f04:	7a5a      	ldrb	r2, [r3, #9]
     f06:	b2d2      	uxtb	r2, r2
     f08:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     f0a:	7a9a      	ldrb	r2, [r3, #10]
     f0c:	b2d2      	uxtb	r2, r2
     f0e:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     f10:	7ada      	ldrb	r2, [r3, #11]
     f12:	b2d2      	uxtb	r2, r2
     f14:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     f16:	4770      	bx	lr
     f18:	40000400 	.word	0x40000400

00000f1c <_calendar_register_callback>:

/**
 * \brief Registers callback for the specified callback type
 */
int32_t _calendar_register_callback(struct calendar_dev *const dev, calendar_drv_cb_alarm_t callback)
{
     f1c:	b570      	push	{r4, r5, r6, lr}
     f1e:	0004      	movs	r4, r0
     f20:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     f22:	2800      	cmp	r0, #0
     f24:	d015      	beq.n	f52 <_calendar_register_callback+0x36>
     f26:	6800      	ldr	r0, [r0, #0]
     f28:	1e43      	subs	r3, r0, #1
     f2a:	4198      	sbcs	r0, r3
     f2c:	b2c0      	uxtb	r0, r0
     f2e:	2233      	movs	r2, #51	; 0x33
     f30:	490f      	ldr	r1, [pc, #60]	; (f70 <_calendar_register_callback+0x54>)
     f32:	4b10      	ldr	r3, [pc, #64]	; (f74 <_calendar_register_callback+0x58>)
     f34:	4798      	blx	r3

	/* Check callback */
	if (callback != NULL) {
     f36:	2d00      	cmp	r5, #0
     f38:	d00d      	beq.n	f56 <_calendar_register_callback+0x3a>
		/* register the callback */
		dev->callback = callback;
     f3a:	6065      	str	r5, [r4, #4]
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f3c:	4b0e      	ldr	r3, [pc, #56]	; (f78 <_calendar_register_callback+0x5c>)
     f3e:	2208      	movs	r2, #8
     f40:	21c0      	movs	r1, #192	; 0xc0
     f42:	0049      	lsls	r1, r1, #1
     f44:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f46:	601a      	str	r2, [r3, #0]
		/* enable RTC_IRQn */
		NVIC_ClearPendingIRQ(RTC_IRQn);
		NVIC_EnableIRQ(RTC_IRQn);

		/* enable cmp */
		hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
     f48:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     f4a:	3a07      	subs	r2, #7
     f4c:	71da      	strb	r2, [r3, #7]
		/* disable RTC_IRQn */
		NVIC_DisableIRQ(RTC_IRQn);
	}

	return ERR_NONE;
}
     f4e:	2000      	movs	r0, #0
     f50:	bd70      	pop	{r4, r5, r6, pc}
     f52:	2000      	movs	r0, #0
     f54:	e7eb      	b.n	f2e <_calendar_register_callback+0x12>
		hri_rtcmode0_clear_INTEN_CMP0_bit(dev->hw);
     f56:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_CMP0;
     f58:	2201      	movs	r2, #1
     f5a:	719a      	strb	r2, [r3, #6]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f5c:	2108      	movs	r1, #8
     f5e:	2380      	movs	r3, #128	; 0x80
     f60:	4a05      	ldr	r2, [pc, #20]	; (f78 <_calendar_register_callback+0x5c>)
     f62:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
     f64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f68:	f3bf 8f6f 	isb	sy
     f6c:	e7ef      	b.n	f4e <_calendar_register_callback+0x32>
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	00002350 	.word	0x00002350
     f74:	00000b55 	.word	0x00000b55
     f78:	e000e100 	.word	0xe000e100

00000f7c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
     f7c:	b510      	push	{r4, lr}
     f7e:	1e04      	subs	r4, r0, #0
	uint16_t register_value;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     f80:	d036      	beq.n	ff0 <_calendar_init+0x74>
     f82:	6800      	ldr	r0, [r0, #0]
     f84:	1e43      	subs	r3, r0, #1
     f86:	4198      	sbcs	r0, r3
     f88:	b2c0      	uxtb	r0, r0
     f8a:	2278      	movs	r2, #120	; 0x78
     f8c:	4919      	ldr	r1, [pc, #100]	; (ff4 <_calendar_init+0x78>)
     f8e:	4b1a      	ldr	r3, [pc, #104]	; (ff8 <_calendar_init+0x7c>)
     f90:	4798      	blx	r3

	_rtc_dev = dev;
     f92:	4b1a      	ldr	r3, [pc, #104]	; (ffc <_calendar_init+0x80>)
     f94:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw);
     f96:	6822      	ldr	r2, [r4, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     f98:	7a93      	ldrb	r3, [r2, #10]
     f9a:	09db      	lsrs	r3, r3, #7
     f9c:	d1fc      	bne.n	f98 <_calendar_init+0x1c>
     f9e:	7a93      	ldrb	r3, [r2, #10]
     fa0:	09db      	lsrs	r3, r3, #7
     fa2:	d1fc      	bne.n	f9e <_calendar_init+0x22>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
     fa4:	8813      	ldrh	r3, [r2, #0]
	if (hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw)) {
     fa6:	079b      	lsls	r3, r3, #30
     fa8:	d50a      	bpl.n	fc0 <_calendar_init+0x44>
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     faa:	8813      	ldrh	r3, [r2, #0]
     fac:	2102      	movs	r1, #2
     fae:	438b      	bics	r3, r1
     fb0:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     fb2:	7a93      	ldrb	r3, [r2, #10]
     fb4:	09db      	lsrs	r3, r3, #7
     fb6:	d1fc      	bne.n	fb2 <_calendar_init+0x36>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw);
     fb8:	6822      	ldr	r2, [r4, #0]
     fba:	7a93      	ldrb	r3, [r2, #10]
     fbc:	09db      	lsrs	r3, r3, #7
     fbe:	d1fc      	bne.n	fba <_calendar_init+0x3e>
#endif
	}
	hri_rtcmode0_set_CTRL_SWRST_bit(dev->hw);
     fc0:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     fc2:	8813      	ldrh	r3, [r2, #0]
     fc4:	2101      	movs	r1, #1
     fc6:	430b      	orrs	r3, r1
     fc8:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     fca:	7a93      	ldrb	r3, [r2, #10]
     fcc:	09db      	lsrs	r3, r3, #7
     fce:	d1fc      	bne.n	fca <_calendar_init+0x4e>
	hri_rtcmode0_wait_for_sync(dev->hw);
     fd0:	6822      	ldr	r2, [r4, #0]
     fd2:	7a93      	ldrb	r3, [r2, #10]
     fd4:	09db      	lsrs	r3, r3, #7
     fd6:	d1fc      	bne.n	fd2 <_calendar_init+0x56>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     fd8:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     fda:	7a93      	ldrb	r3, [r2, #10]
     fdc:	09db      	lsrs	r3, r3, #7
     fde:	d1fc      	bne.n	fda <_calendar_init+0x5e>
	register_value &= (~RTC_MODE0_CTRL_MATCHCLR);

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	/* set continuously clock read update mode */
	hri_rtcmode0_set_READREQ_RCONT_bit(dev->hw);
     fe0:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     fe2:	8853      	ldrh	r3, [r2, #2]
     fe4:	2180      	movs	r1, #128	; 0x80
     fe6:	01c9      	lsls	r1, r1, #7
     fe8:	430b      	orrs	r3, r1
     fea:	8053      	strh	r3, [r2, #2]
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	return ERR_NONE;
}
     fec:	2000      	movs	r0, #0
     fee:	bd10      	pop	{r4, pc}
     ff0:	2000      	movs	r0, #0
     ff2:	e7ca      	b.n	f8a <_calendar_init+0xe>
     ff4:	00002350 	.word	0x00002350
     ff8:	00000b55 	.word	0x00000b55
     ffc:	200000c8 	.word	0x200000c8

00001000 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    1000:	b510      	push	{r4, lr}
    1002:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1004:	d011      	beq.n	102a <_calendar_enable+0x2a>
    1006:	6800      	ldr	r0, [r0, #0]
    1008:	1e43      	subs	r3, r0, #1
    100a:	4198      	sbcs	r0, r3
    100c:	b2c0      	uxtb	r0, r0
    100e:	22aa      	movs	r2, #170	; 0xaa
    1010:	4907      	ldr	r1, [pc, #28]	; (1030 <_calendar_enable+0x30>)
    1012:	4b08      	ldr	r3, [pc, #32]	; (1034 <_calendar_enable+0x34>)
    1014:	4798      	blx	r3

	/* Enable rtc */
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
    1016:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    1018:	8813      	ldrh	r3, [r2, #0]
    101a:	2102      	movs	r1, #2
    101c:	430b      	orrs	r3, r1
    101e:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1020:	7a93      	ldrb	r3, [r2, #10]
    1022:	09db      	lsrs	r3, r3, #7
    1024:	d1fc      	bne.n	1020 <_calendar_enable+0x20>

	return ERR_NONE;
}
    1026:	2000      	movs	r0, #0
    1028:	bd10      	pop	{r4, pc}
    102a:	2000      	movs	r0, #0
    102c:	e7ef      	b.n	100e <_calendar_enable+0xe>
    102e:	46c0      	nop			; (mov r8, r8)
    1030:	00002350 	.word	0x00002350
    1034:	00000b55 	.word	0x00000b55

00001038 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1038:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
    103a:	4b07      	ldr	r3, [pc, #28]	; (1058 <RTC_Handler+0x20>)
    103c:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    103e:	6823      	ldr	r3, [r4, #0]
    1040:	7a1b      	ldrb	r3, [r3, #8]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
    1042:	07db      	lsls	r3, r3, #31
    1044:	d400      	bmi.n	1048 <RTC_Handler+0x10>
}
    1046:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    1048:	0020      	movs	r0, r4
    104a:	6863      	ldr	r3, [r4, #4]
    104c:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    104e:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    1050:	2201      	movs	r2, #1
    1052:	721a      	strb	r2, [r3, #8]
}
    1054:	e7f7      	b.n	1046 <RTC_Handler+0xe>
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	200000c8 	.word	0x200000c8

0000105c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    105c:	b510      	push	{r4, lr}
    105e:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1060:	4b1f      	ldr	r3, [pc, #124]	; (10e0 <_usart_init+0x84>)
    1062:	18c3      	adds	r3, r0, r3
    1064:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    1066:	b2db      	uxtb	r3, r3
    1068:	2b03      	cmp	r3, #3
    106a:	d004      	beq.n	1076 <_usart_init+0x1a>
	ASSERT(false);
    106c:	4a1d      	ldr	r2, [pc, #116]	; (10e4 <_usart_init+0x88>)
    106e:	491e      	ldr	r1, [pc, #120]	; (10e8 <_usart_init+0x8c>)
    1070:	2000      	movs	r0, #0
    1072:	4b1e      	ldr	r3, [pc, #120]	; (10ec <_usart_init+0x90>)
    1074:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1076:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1078:	07db      	lsls	r3, r3, #31
    107a:	d418      	bmi.n	10ae <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    107c:	2203      	movs	r2, #3
    107e:	69e3      	ldr	r3, [r4, #28]
    1080:	421a      	tst	r2, r3
    1082:	d1fc      	bne.n	107e <_usart_init+0x22>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1084:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1086:	079b      	lsls	r3, r3, #30
    1088:	d50b      	bpl.n	10a2 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    108a:	6823      	ldr	r3, [r4, #0]
    108c:	2202      	movs	r2, #2
    108e:	4393      	bics	r3, r2
    1090:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1092:	3201      	adds	r2, #1
    1094:	69e3      	ldr	r3, [r4, #28]
    1096:	421a      	tst	r2, r3
    1098:	d1fc      	bne.n	1094 <_usart_init+0x38>
    109a:	2202      	movs	r2, #2
    109c:	69e3      	ldr	r3, [r4, #28]
    109e:	421a      	tst	r2, r3
    10a0:	d1fc      	bne.n	109c <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    10a2:	2305      	movs	r3, #5
    10a4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10a6:	2203      	movs	r2, #3
    10a8:	69e3      	ldr	r3, [r4, #28]
    10aa:	421a      	tst	r2, r3
    10ac:	d1fc      	bne.n	10a8 <_usart_init+0x4c>
    10ae:	2201      	movs	r2, #1
    10b0:	69e3      	ldr	r3, [r4, #28]
    10b2:	421a      	tst	r2, r3
    10b4:	d1fc      	bne.n	10b0 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    10b6:	4b0e      	ldr	r3, [pc, #56]	; (10f0 <_usart_init+0x94>)
    10b8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10ba:	2203      	movs	r2, #3
    10bc:	69e3      	ldr	r3, [r4, #28]
    10be:	421a      	tst	r2, r3
    10c0:	d1fc      	bne.n	10bc <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    10c2:	23c0      	movs	r3, #192	; 0xc0
    10c4:	029b      	lsls	r3, r3, #10
    10c6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10c8:	2207      	movs	r2, #7
    10ca:	69e3      	ldr	r3, [r4, #28]
    10cc:	421a      	tst	r2, r3
    10ce:	d1fc      	bne.n	10ca <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    10d0:	4b08      	ldr	r3, [pc, #32]	; (10f4 <_usart_init+0x98>)
    10d2:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    10d4:	2300      	movs	r3, #0
    10d6:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    10d8:	2230      	movs	r2, #48	; 0x30
    10da:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    10dc:	2000      	movs	r0, #0
    10de:	bd10      	pop	{r4, pc}
    10e0:	bdfff800 	.word	0xbdfff800
    10e4:	0000025e 	.word	0x0000025e
    10e8:	00002368 	.word	0x00002368
    10ec:	00000b55 	.word	0x00000b55
    10f0:	40100004 	.word	0x40100004
    10f4:	ffffc504 	.word	0xffffc504

000010f8 <_usart_async_init>:
{
    10f8:	b570      	push	{r4, r5, r6, lr}
    10fa:	0005      	movs	r5, r0
    10fc:	000c      	movs	r4, r1
	ASSERT(device);
    10fe:	1e43      	subs	r3, r0, #1
    1100:	4198      	sbcs	r0, r3
    1102:	b2c0      	uxtb	r0, r0
    1104:	22c4      	movs	r2, #196	; 0xc4
    1106:	4914      	ldr	r1, [pc, #80]	; (1158 <_usart_async_init+0x60>)
    1108:	4b14      	ldr	r3, [pc, #80]	; (115c <_usart_async_init+0x64>)
    110a:	4798      	blx	r3
	init_status = _usart_init(hw);
    110c:	0020      	movs	r0, r4
    110e:	4b14      	ldr	r3, [pc, #80]	; (1160 <_usart_async_init+0x68>)
    1110:	4798      	blx	r3
	if (init_status) {
    1112:	2800      	cmp	r0, #0
    1114:	d000      	beq.n	1118 <_usart_async_init+0x20>
}
    1116:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    1118:	61ac      	str	r4, [r5, #24]
	if (hw == SERCOM3) {
    111a:	4b12      	ldr	r3, [pc, #72]	; (1164 <_usart_async_init+0x6c>)
    111c:	429c      	cmp	r4, r3
    111e:	d017      	beq.n	1150 <_usart_async_init+0x58>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1120:	4b11      	ldr	r3, [pc, #68]	; (1168 <_usart_async_init+0x70>)
    1122:	469c      	mov	ip, r3
    1124:	4464      	add	r4, ip
    1126:	0aa4      	lsrs	r4, r4, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1128:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
    112a:	b2e3      	uxtb	r3, r4
    112c:	0622      	lsls	r2, r4, #24
    112e:	d4f2      	bmi.n	1116 <_usart_async_init+0x1e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1130:	221f      	movs	r2, #31
    1132:	401a      	ands	r2, r3
    1134:	2301      	movs	r3, #1
    1136:	4093      	lsls	r3, r2
    1138:	4a0c      	ldr	r2, [pc, #48]	; (116c <_usart_async_init+0x74>)
    113a:	2180      	movs	r1, #128	; 0x80
    113c:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    113e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1142:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1146:	3101      	adds	r1, #1
    1148:	31ff      	adds	r1, #255	; 0xff
    114a:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    114c:	6013      	str	r3, [r2, #0]
    114e:	e7e2      	b.n	1116 <_usart_async_init+0x1e>
		_sercom3_dev = (struct _usart_async_device *)dev;
    1150:	4b07      	ldr	r3, [pc, #28]	; (1170 <_usart_async_init+0x78>)
    1152:	601d      	str	r5, [r3, #0]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1154:	230c      	movs	r3, #12
    1156:	e7eb      	b.n	1130 <_usart_async_init+0x38>
    1158:	00002368 	.word	0x00002368
    115c:	00000b55 	.word	0x00000b55
    1160:	0000105d 	.word	0x0000105d
    1164:	42001400 	.word	0x42001400
    1168:	bdfff800 	.word	0xbdfff800
    116c:	e000e100 	.word	0xe000e100
    1170:	200000cc 	.word	0x200000cc

00001174 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1174:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1176:	6813      	ldr	r3, [r2, #0]
    1178:	2102      	movs	r1, #2
    117a:	430b      	orrs	r3, r1
    117c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    117e:	3101      	adds	r1, #1
    1180:	69d3      	ldr	r3, [r2, #28]
    1182:	4219      	tst	r1, r3
    1184:	d1fc      	bne.n	1180 <_usart_async_enable+0xc>
}
    1186:	4770      	bx	lr

00001188 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1188:	6983      	ldr	r3, [r0, #24]
    118a:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    118c:	8519      	strh	r1, [r3, #40]	; 0x28
}
    118e:	4770      	bx	lr

00001190 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1190:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1192:	2201      	movs	r2, #1
    1194:	759a      	strb	r2, [r3, #22]
}
    1196:	4770      	bx	lr

00001198 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1198:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    119a:	2202      	movs	r2, #2
    119c:	759a      	strb	r2, [r3, #22]
}
    119e:	4770      	bx	lr

000011a0 <_usart_async_set_irq_state>:
{
    11a0:	b570      	push	{r4, r5, r6, lr}
    11a2:	0004      	movs	r4, r0
    11a4:	000d      	movs	r5, r1
    11a6:	0016      	movs	r6, r2
	ASSERT(device);
    11a8:	1e43      	subs	r3, r0, #1
    11aa:	4198      	sbcs	r0, r3
    11ac:	b2c0      	uxtb	r0, r0
    11ae:	4a16      	ldr	r2, [pc, #88]	; (1208 <_usart_async_set_irq_state+0x68>)
    11b0:	4916      	ldr	r1, [pc, #88]	; (120c <_usart_async_set_irq_state+0x6c>)
    11b2:	4b17      	ldr	r3, [pc, #92]	; (1210 <_usart_async_set_irq_state+0x70>)
    11b4:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    11b6:	2302      	movs	r3, #2
    11b8:	002a      	movs	r2, r5
    11ba:	439a      	bics	r2, r3
    11bc:	d10e      	bne.n	11dc <_usart_async_set_irq_state+0x3c>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    11be:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    11c0:	2e00      	cmp	r6, #0
    11c2:	d105      	bne.n	11d0 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    11c4:	2201      	movs	r2, #1
    11c6:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    11c8:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    11ca:	3201      	adds	r2, #1
    11cc:	751a      	strb	r2, [r3, #20]
}
    11ce:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    11d0:	2201      	movs	r2, #1
    11d2:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    11d4:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    11d6:	3201      	adds	r2, #1
    11d8:	759a      	strb	r2, [r3, #22]
    11da:	e7f8      	b.n	11ce <_usart_async_set_irq_state+0x2e>
	} else if (USART_ASYNC_RX_DONE == type) {
    11dc:	2d01      	cmp	r5, #1
    11de:	d007      	beq.n	11f0 <_usart_async_set_irq_state+0x50>
	} else if (USART_ASYNC_ERROR == type) {
    11e0:	2d03      	cmp	r5, #3
    11e2:	d1f4      	bne.n	11ce <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    11e4:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    11e6:	2e00      	cmp	r6, #0
    11e8:	d00b      	beq.n	1202 <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    11ea:	2280      	movs	r2, #128	; 0x80
    11ec:	759a      	strb	r2, [r3, #22]
}
    11ee:	e7ee      	b.n	11ce <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    11f0:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    11f2:	2e00      	cmp	r6, #0
    11f4:	d102      	bne.n	11fc <_usart_async_set_irq_state+0x5c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    11f6:	2204      	movs	r2, #4
    11f8:	751a      	strb	r2, [r3, #20]
    11fa:	e7e8      	b.n	11ce <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    11fc:	2204      	movs	r2, #4
    11fe:	759a      	strb	r2, [r3, #22]
    1200:	e7e5      	b.n	11ce <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1202:	2280      	movs	r2, #128	; 0x80
    1204:	751a      	strb	r2, [r3, #20]
    1206:	e7e2      	b.n	11ce <_usart_async_set_irq_state+0x2e>
    1208:	0000021e 	.word	0x0000021e
    120c:	00002368 	.word	0x00002368
    1210:	00000b55 	.word	0x00000b55

00001214 <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    1214:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    1216:	4b19      	ldr	r3, [pc, #100]	; (127c <SERCOM3_Handler+0x68>)
    1218:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
    121a:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    121c:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    121e:	07db      	lsls	r3, r3, #31
    1220:	d502      	bpl.n	1228 <SERCOM3_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1222:	7da3      	ldrb	r3, [r4, #22]
    1224:	07db      	lsls	r3, r3, #31
    1226:	d40f      	bmi.n	1248 <SERCOM3_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1228:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    122a:	079b      	lsls	r3, r3, #30
    122c:	d502      	bpl.n	1234 <SERCOM3_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    122e:	7da3      	ldrb	r3, [r4, #22]
    1230:	079b      	lsls	r3, r3, #30
    1232:	d40e      	bmi.n	1252 <SERCOM3_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1234:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1236:	075b      	lsls	r3, r3, #29
    1238:	d515      	bpl.n	1266 <SERCOM3_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    123a:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    123c:	2337      	movs	r3, #55	; 0x37
    123e:	421a      	tst	r2, r3
    1240:	d00c      	beq.n	125c <SERCOM3_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1242:	3308      	adds	r3, #8
    1244:	8363      	strh	r3, [r4, #26]
}
    1246:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1248:	2301      	movs	r3, #1
    124a:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    124c:	6803      	ldr	r3, [r0, #0]
    124e:	4798      	blx	r3
    1250:	e7f9      	b.n	1246 <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1252:	2302      	movs	r3, #2
    1254:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1256:	6883      	ldr	r3, [r0, #8]
    1258:	4798      	blx	r3
    125a:	e7f4      	b.n	1246 <SERCOM3_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
    125c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    125e:	b2c9      	uxtb	r1, r1
    1260:	6843      	ldr	r3, [r0, #4]
    1262:	4798      	blx	r3
    1264:	e7ef      	b.n	1246 <SERCOM3_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1266:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1268:	09db      	lsrs	r3, r3, #7
    126a:	d0ec      	beq.n	1246 <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    126c:	2380      	movs	r3, #128	; 0x80
    126e:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    1270:	68c3      	ldr	r3, [r0, #12]
    1272:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1274:	8b63      	ldrh	r3, [r4, #26]
    1276:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1278:	8363      	strh	r3, [r4, #26]
}
    127a:	e7e4      	b.n	1246 <SERCOM3_Handler+0x32>
    127c:	200000cc 	.word	0x200000cc

00001280 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1280:	4b0e      	ldr	r3, [pc, #56]	; (12bc <_sysctrl_init_sources+0x3c>)
    1282:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1284:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1286:	480e      	ldr	r0, [pc, #56]	; (12c0 <_sysctrl_init_sources+0x40>)
    1288:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    128a:	0f92      	lsrs	r2, r2, #30
    128c:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    128e:	2002      	movs	r0, #2
    1290:	4302      	orrs	r2, r0
    1292:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1294:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1296:	699a      	ldr	r2, [r3, #24]
    1298:	4302      	orrs	r2, r0
    129a:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    129c:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    129e:	211f      	movs	r1, #31
    12a0:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    12a2:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    12a4:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    12a6:	2208      	movs	r2, #8
    12a8:	68cb      	ldr	r3, [r1, #12]
    12aa:	421a      	tst	r2, r3
    12ac:	d0fc      	beq.n	12a8 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    12ae:	4a03      	ldr	r2, [pc, #12]	; (12bc <_sysctrl_init_sources+0x3c>)
    12b0:	6a13      	ldr	r3, [r2, #32]
    12b2:	2180      	movs	r1, #128	; 0x80
    12b4:	430b      	orrs	r3, r1
    12b6:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    12b8:	4770      	bx	lr
    12ba:	46c0      	nop			; (mov r8, r8)
    12bc:	40000800 	.word	0x40000800
    12c0:	0fff0000 	.word	0x0fff0000

000012c4 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    12c4:	4a02      	ldr	r2, [pc, #8]	; (12d0 <_sysctrl_init_referenced_generators+0xc>)
    12c6:	6993      	ldr	r3, [r2, #24]
    12c8:	2102      	movs	r1, #2
    12ca:	438b      	bics	r3, r1
    12cc:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    12ce:	4770      	bx	lr
    12d0:	40000800 	.word	0x40000800

000012d4 <main>:
#include <atmel_start.h>
#include "mu_vm_test.h"

int main(void)
{
    12d4:	b510      	push	{r4, lr}
    /* Initializes MCU, drivers and middleware */
    atmel_start_init();
    12d6:	4b03      	ldr	r3, [pc, #12]	; (12e4 <main+0x10>)
    12d8:	4798      	blx	r3
    mv_vm_test_init();
    12da:	4b03      	ldr	r3, [pc, #12]	; (12e8 <main+0x14>)
    12dc:	4798      	blx	r3

    /* Replace with your application code */
    while (1) {
        mv_vm_test_step();
    12de:	4c03      	ldr	r4, [pc, #12]	; (12ec <main+0x18>)
    12e0:	47a0      	blx	r4
    12e2:	e7fd      	b.n	12e0 <main+0xc>
    12e4:	000004e1 	.word	0x000004e1
    12e8:	00001479 	.word	0x00001479
    12ec:	00001485 	.word	0x00001485

000012f0 <button_press_cb>:
  test_sync_printf("time = %d ms", ms);
#endif
}

static void button_press_cb(void *arg) {
	s_button_pressed = true;
    12f0:	2201      	movs	r2, #1
    12f2:	4b01      	ldr	r3, [pc, #4]	; (12f8 <button_press_cb+0x8>)
    12f4:	701a      	strb	r2, [r3, #0]
}
    12f6:	4770      	bx	lr
    12f8:	200000d0 	.word	0x200000d0

000012fc <serial_read_cb>:
  }
  // When the write operation completes, this callback will be called again.
}

static void serial_read_cb(void *arg) {
  s_rx_char_available = true;
    12fc:	2201      	movs	r2, #1
    12fe:	4b01      	ldr	r3, [pc, #4]	; (1304 <serial_read_cb+0x8>)
    1300:	705a      	strb	r2, [r3, #1]
}
    1302:	4770      	bx	lr
    1304:	200000d0 	.word	0x200000d0

00001308 <rtc_cb>:

static void rtc_cb(void *arg) {
	s_rtc_matched = true;
    1308:	2201      	movs	r2, #1
    130a:	4b01      	ldr	r3, [pc, #4]	; (1310 <rtc_cb+0x8>)
    130c:	709a      	strb	r2, [r3, #2]
}
    130e:	4770      	bx	lr
    1310:	200000d0 	.word	0x200000d0

00001314 <test_async_printf>:
static void test_async_printf(const char *fmt, ...) {
    1314:	b40f      	push	{r0, r1, r2, r3}
    1316:	b530      	push	{r4, r5, lr}
    1318:	b083      	sub	sp, #12
    131a:	ab06      	add	r3, sp, #24
    131c:	cb04      	ldmia	r3!, {r2}
  va_start(ap, fmt);
    131e:	9301      	str	r3, [sp, #4]
  s_tx_count = vsnprintf((char *)s_tx_buf, MAX_CHARS, fmt, ap);
    1320:	4c15      	ldr	r4, [pc, #84]	; (1378 <test_async_printf+0x64>)
    1322:	1d20      	adds	r0, r4, #4
    1324:	2132      	movs	r1, #50	; 0x32
    1326:	4d15      	ldr	r5, [pc, #84]	; (137c <test_async_printf+0x68>)
    1328:	47a8      	blx	r5
    132a:	63a0      	str	r0, [r4, #56]	; 0x38
  s_tx_index = 0;
    132c:	2300      	movs	r3, #0
    132e:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (s_tx_count > 0) {
    1330:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1332:	2b00      	cmp	r3, #0
    1334:	dd0d      	ble.n	1352 <test_async_printf+0x3e>
    mu_vm_serial_set_write_cb(serial_write_cb, NULL);
    1336:	2100      	movs	r1, #0
    1338:	4811      	ldr	r0, [pc, #68]	; (1380 <test_async_printf+0x6c>)
    133a:	4b12      	ldr	r3, [pc, #72]	; (1384 <test_async_printf+0x70>)
    133c:	4798      	blx	r3
    s_tx_index += 1;
    133e:	4b0e      	ldr	r3, [pc, #56]	; (1378 <test_async_printf+0x64>)
    1340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1342:	3201      	adds	r2, #1
    1344:	63da      	str	r2, [r3, #60]	; 0x3c
    s_tx_count -= 1;
    1346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1348:	3a01      	subs	r2, #1
    134a:	639a      	str	r2, [r3, #56]	; 0x38
    mu_vm_serial_write(s_tx_buf[0]);
    134c:	7918      	ldrb	r0, [r3, #4]
    134e:	4b0e      	ldr	r3, [pc, #56]	; (1388 <test_async_printf+0x74>)
    1350:	4798      	blx	r3
  while (s_tx_count > 0) {
    1352:	4b09      	ldr	r3, [pc, #36]	; (1378 <test_async_printf+0x64>)
    1354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1356:	2b00      	cmp	r3, #0
    1358:	dd04      	ble.n	1364 <test_async_printf+0x50>
    135a:	4a07      	ldr	r2, [pc, #28]	; (1378 <test_async_printf+0x64>)
    asm("nop");
    135c:	46c0      	nop			; (mov r8, r8)
  while (s_tx_count > 0) {
    135e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1360:	2b00      	cmp	r3, #0
    1362:	dcfb      	bgt.n	135c <test_async_printf+0x48>
  mu_vm_serial_set_write_cb(NULL, NULL);
    1364:	2100      	movs	r1, #0
    1366:	2000      	movs	r0, #0
    1368:	4b06      	ldr	r3, [pc, #24]	; (1384 <test_async_printf+0x70>)
    136a:	4798      	blx	r3
}
    136c:	b003      	add	sp, #12
    136e:	bc30      	pop	{r4, r5}
    1370:	bc08      	pop	{r3}
    1372:	b004      	add	sp, #16
    1374:	4718      	bx	r3
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	200000d0 	.word	0x200000d0
    137c:	00001abd 	.word	0x00001abd
    1380:	0000138d 	.word	0x0000138d
    1384:	000003ed 	.word	0x000003ed
    1388:	000003ad 	.word	0x000003ad

0000138c <serial_write_cb>:
static void serial_write_cb(void *arg) {
    138c:	b510      	push	{r4, lr}
  if (s_tx_count > 0) {
    138e:	4b08      	ldr	r3, [pc, #32]	; (13b0 <serial_write_cb+0x24>)
    1390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1392:	2b00      	cmp	r3, #0
    1394:	dd0a      	ble.n	13ac <serial_write_cb+0x20>
    mu_vm_serial_write(s_tx_buf[s_tx_index++]);
    1396:	4c06      	ldr	r4, [pc, #24]	; (13b0 <serial_write_cb+0x24>)
    1398:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    139a:	1c5a      	adds	r2, r3, #1
    139c:	63e2      	str	r2, [r4, #60]	; 0x3c
    139e:	18e3      	adds	r3, r4, r3
    13a0:	7918      	ldrb	r0, [r3, #4]
    13a2:	4b04      	ldr	r3, [pc, #16]	; (13b4 <serial_write_cb+0x28>)
    13a4:	4798      	blx	r3
    s_tx_count -= 1;
    13a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    13a8:	3b01      	subs	r3, #1
    13aa:	63a3      	str	r3, [r4, #56]	; 0x38
}
    13ac:	bd10      	pop	{r4, pc}
    13ae:	46c0      	nop			; (mov r8, r8)
    13b0:	200000d0 	.word	0x200000d0
    13b4:	000003ad 	.word	0x000003ad

000013b8 <test_sync_printf>:
static void test_sync_printf(const char *fmt, ...) {
    13b8:	b40f      	push	{r0, r1, r2, r3}
    13ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    13bc:	b083      	sub	sp, #12
    13be:	ab08      	add	r3, sp, #32
    13c0:	cb04      	ldmia	r3!, {r2}
  va_start(ap, fmt);
    13c2:	9301      	str	r3, [sp, #4]
  n_chars = vsnprintf((char *)buf, MAX_CHARS, fmt, ap);
    13c4:	2132      	movs	r1, #50	; 0x32
    13c6:	480d      	ldr	r0, [pc, #52]	; (13fc <test_sync_printf+0x44>)
    13c8:	3040      	adds	r0, #64	; 0x40
    13ca:	4c0d      	ldr	r4, [pc, #52]	; (1400 <test_sync_printf+0x48>)
    13cc:	47a0      	blx	r4
    13ce:	1e06      	subs	r6, r0, #0
  while (n_chars > 0) {
    13d0:	d00e      	beq.n	13f0 <test_sync_printf+0x38>
    13d2:	4d0a      	ldr	r5, [pc, #40]	; (13fc <test_sync_printf+0x44>)
    13d4:	3540      	adds	r5, #64	; 0x40
    while (!mu_vm_serial_can_write()) {
    13d6:	4c0b      	ldr	r4, [pc, #44]	; (1404 <test_sync_printf+0x4c>)
    mu_vm_serial_write(*p++);
    13d8:	4f0b      	ldr	r7, [pc, #44]	; (1408 <test_sync_printf+0x50>)
    13da:	e000      	b.n	13de <test_sync_printf+0x26>
      asm("nop");
    13dc:	46c0      	nop			; (mov r8, r8)
    while (!mu_vm_serial_can_write()) {
    13de:	47a0      	blx	r4
    13e0:	2800      	cmp	r0, #0
    13e2:	d0fb      	beq.n	13dc <test_sync_printf+0x24>
    mu_vm_serial_write(*p++);
    13e4:	7828      	ldrb	r0, [r5, #0]
    13e6:	47b8      	blx	r7
    n_chars--;
    13e8:	3e01      	subs	r6, #1
    13ea:	3501      	adds	r5, #1
  while (n_chars > 0) {
    13ec:	2e00      	cmp	r6, #0
    13ee:	d1f6      	bne.n	13de <test_sync_printf+0x26>
}
    13f0:	b003      	add	sp, #12
    13f2:	bcf0      	pop	{r4, r5, r6, r7}
    13f4:	bc08      	pop	{r3}
    13f6:	b004      	add	sp, #16
    13f8:	4718      	bx	r3
    13fa:	46c0      	nop			; (mov r8, r8)
    13fc:	200000d0 	.word	0x200000d0
    1400:	00001abd 	.word	0x00001abd
    1404:	0000039d 	.word	0x0000039d
    1408:	000003ad 	.word	0x000003ad

0000140c <test_wait_ms>:
static void test_wait_ms(int ms) {
    140c:	b570      	push	{r4, r5, r6, lr}
    140e:	0005      	movs	r5, r0
      mu_vm_time_offset(mu_vm_rtc_now(), mu_vm_time_ms_to_duration(ms));
    1410:	4b0a      	ldr	r3, [pc, #40]	; (143c <test_wait_ms+0x30>)
    1412:	4798      	blx	r3
    1414:	0004      	movs	r4, r0
    1416:	0028      	movs	r0, r5
    1418:	4b09      	ldr	r3, [pc, #36]	; (1440 <test_wait_ms+0x34>)
    141a:	4798      	blx	r3
    141c:	0001      	movs	r1, r0
  mu_vm_time_t then =
    141e:	0020      	movs	r0, r4
    1420:	4b08      	ldr	r3, [pc, #32]	; (1444 <test_wait_ms+0x38>)
    1422:	4798      	blx	r3
    1424:	0005      	movs	r5, r0
  while (mu_vm_time_precedes(mu_vm_rtc_now(), then)) {
    1426:	4e05      	ldr	r6, [pc, #20]	; (143c <test_wait_ms+0x30>)
    1428:	4c07      	ldr	r4, [pc, #28]	; (1448 <test_wait_ms+0x3c>)
    142a:	e000      	b.n	142e <test_wait_ms+0x22>
	  asm("nop");
    142c:	46c0      	nop			; (mov r8, r8)
  while (mu_vm_time_precedes(mu_vm_rtc_now(), then)) {
    142e:	47b0      	blx	r6
    1430:	0029      	movs	r1, r5
    1432:	47a0      	blx	r4
    1434:	2800      	cmp	r0, #0
    1436:	d1f9      	bne.n	142c <test_wait_ms+0x20>
}
    1438:	bd70      	pop	{r4, r5, r6, pc}
    143a:	46c0      	nop			; (mov r8, r8)
    143c:	00000289 	.word	0x00000289
    1440:	0000022d 	.word	0x0000022d
    1444:	0000021d 	.word	0x0000021d
    1448:	00000225 	.word	0x00000225

0000144c <test_print_time>:
static void test_print_time(mu_vm_time_t t) {
    144c:	b510      	push	{r4, lr}
  mu_vm_time_dt uptime = mu_vm_time_difference(t, s_epoch);
    144e:	4b05      	ldr	r3, [pc, #20]	; (1464 <test_print_time+0x18>)
    1450:	6f59      	ldr	r1, [r3, #116]	; 0x74
    1452:	4b05      	ldr	r3, [pc, #20]	; (1468 <test_print_time+0x1c>)
    1454:	4798      	blx	r3
  int ms = mu_vm_time_duration_to_ms(uptime);
    1456:	4b05      	ldr	r3, [pc, #20]	; (146c <test_print_time+0x20>)
    1458:	4798      	blx	r3
    145a:	0001      	movs	r1, r0
  test_sync_printf("time = %d ms", ms);
    145c:	4804      	ldr	r0, [pc, #16]	; (1470 <test_print_time+0x24>)
    145e:	4b05      	ldr	r3, [pc, #20]	; (1474 <test_print_time+0x28>)
    1460:	4798      	blx	r3
}
    1462:	bd10      	pop	{r4, pc}
    1464:	200000d0 	.word	0x200000d0
    1468:	00000221 	.word	0x00000221
    146c:	00000255 	.word	0x00000255
    1470:	00002384 	.word	0x00002384
    1474:	000013b9 	.word	0x000013b9

00001478 <mv_vm_test_init>:
void mv_vm_test_init(void) {
    1478:	b510      	push	{r4, lr}
	mu_vm_init();
    147a:	4b01      	ldr	r3, [pc, #4]	; (1480 <mv_vm_test_init+0x8>)
    147c:	4798      	blx	r3
}
    147e:	bd10      	pop	{r4, pc}
    1480:	00000191 	.word	0x00000191

00001484 <mv_vm_test_step>:
void mv_vm_test_step(void) {
    1484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  s_epoch = mu_vm_rtc_now();
    1486:	4d67      	ldr	r5, [pc, #412]	; (1624 <mv_vm_test_step+0x1a0>)
    1488:	47a8      	blx	r5
    148a:	4e67      	ldr	r6, [pc, #412]	; (1628 <mv_vm_test_step+0x1a4>)
    148c:	6770      	str	r0, [r6, #116]	; 0x74
  test_sync_printf("\r\n================\r\nstarting mu_vm_test\r\n");
    148e:	4867      	ldr	r0, [pc, #412]	; (162c <mv_vm_test_step+0x1a8>)
    1490:	4c67      	ldr	r4, [pc, #412]	; (1630 <mv_vm_test_step+0x1ac>)
    1492:	47a0      	blx	r4
  test_sync_printf("sync serial write\r\n");
    1494:	4867      	ldr	r0, [pc, #412]	; (1634 <mv_vm_test_step+0x1b0>)
    1496:	47a0      	blx	r4
  test_async_printf("async serial write\r\n");
    1498:	4867      	ldr	r0, [pc, #412]	; (1638 <mv_vm_test_step+0x1b4>)
    149a:	4b68      	ldr	r3, [pc, #416]	; (163c <mv_vm_test_step+0x1b8>)
    149c:	4798      	blx	r3
  test_sync_printf("time before is ");
    149e:	4868      	ldr	r0, [pc, #416]	; (1640 <mv_vm_test_step+0x1bc>)
    14a0:	47a0      	blx	r4
  test_print_time(mu_vm_rtc_now());
    14a2:	47a8      	blx	r5
    14a4:	4f67      	ldr	r7, [pc, #412]	; (1644 <mv_vm_test_step+0x1c0>)
    14a6:	47b8      	blx	r7
  test_sync_printf("\r\n");
    14a8:	4867      	ldr	r0, [pc, #412]	; (1648 <mv_vm_test_step+0x1c4>)
    14aa:	47a0      	blx	r4
  test_sync_printf("looping for 2.5 seconds...");
    14ac:	4867      	ldr	r0, [pc, #412]	; (164c <mv_vm_test_step+0x1c8>)
    14ae:	47a0      	blx	r4
  test_wait_ms(2500);
    14b0:	4867      	ldr	r0, [pc, #412]	; (1650 <mv_vm_test_step+0x1cc>)
    14b2:	4b68      	ldr	r3, [pc, #416]	; (1654 <mv_vm_test_step+0x1d0>)
    14b4:	4798      	blx	r3
  test_sync_printf("done.  time after is ");
    14b6:	4868      	ldr	r0, [pc, #416]	; (1658 <mv_vm_test_step+0x1d4>)
    14b8:	47a0      	blx	r4
  test_print_time(mu_vm_rtc_now());
    14ba:	47a8      	blx	r5
    14bc:	47b8      	blx	r7
  test_sync_printf("\r\n");
    14be:	4862      	ldr	r0, [pc, #392]	; (1648 <mv_vm_test_step+0x1c4>)
    14c0:	47a0      	blx	r4
  s_rtc_matched = false;
    14c2:	2300      	movs	r3, #0
    14c4:	70b3      	strb	r3, [r6, #2]
  mu_vm_rtc_set_cb(rtc_cb, NULL);
    14c6:	2100      	movs	r1, #0
    14c8:	4864      	ldr	r0, [pc, #400]	; (165c <mv_vm_test_step+0x1d8>)
    14ca:	4b65      	ldr	r3, [pc, #404]	; (1660 <mv_vm_test_step+0x1dc>)
    14cc:	4798      	blx	r3
  mu_vm_rtc_alarm_at(mu_vm_time_offset(mu_vm_rtc_now(),
    14ce:	47a8      	blx	r5
    14d0:	0005      	movs	r5, r0
    14d2:	485f      	ldr	r0, [pc, #380]	; (1650 <mv_vm_test_step+0x1cc>)
    14d4:	4b63      	ldr	r3, [pc, #396]	; (1664 <mv_vm_test_step+0x1e0>)
    14d6:	4798      	blx	r3
    14d8:	0001      	movs	r1, r0
    14da:	0028      	movs	r0, r5
    14dc:	4b62      	ldr	r3, [pc, #392]	; (1668 <mv_vm_test_step+0x1e4>)
    14de:	4798      	blx	r3
    14e0:	4b62      	ldr	r3, [pc, #392]	; (166c <mv_vm_test_step+0x1e8>)
    14e2:	4798      	blx	r3
  test_sync_printf("waiting 2.5 seconds for RTC match...");
    14e4:	4862      	ldr	r0, [pc, #392]	; (1670 <mv_vm_test_step+0x1ec>)
    14e6:	47a0      	blx	r4
  while (!s_rtc_matched) {
    14e8:	78b3      	ldrb	r3, [r6, #2]
    14ea:	2b00      	cmp	r3, #0
    14ec:	d104      	bne.n	14f8 <mv_vm_test_step+0x74>
    14ee:	4a4e      	ldr	r2, [pc, #312]	; (1628 <mv_vm_test_step+0x1a4>)
	  asm("nop");
    14f0:	46c0      	nop			; (mov r8, r8)
  while (!s_rtc_matched) {
    14f2:	7893      	ldrb	r3, [r2, #2]
    14f4:	2b00      	cmp	r3, #0
    14f6:	d0fb      	beq.n	14f0 <mv_vm_test_step+0x6c>
  test_sync_printf("done.  time is now ");
    14f8:	485e      	ldr	r0, [pc, #376]	; (1674 <mv_vm_test_step+0x1f0>)
    14fa:	4c4d      	ldr	r4, [pc, #308]	; (1630 <mv_vm_test_step+0x1ac>)
    14fc:	47a0      	blx	r4
  test_print_time(mu_vm_rtc_now());
    14fe:	4b49      	ldr	r3, [pc, #292]	; (1624 <mv_vm_test_step+0x1a0>)
    1500:	4798      	blx	r3
    1502:	4b50      	ldr	r3, [pc, #320]	; (1644 <mv_vm_test_step+0x1c0>)
    1504:	4798      	blx	r3
  test_sync_printf("\r\n");
    1506:	4850      	ldr	r0, [pc, #320]	; (1648 <mv_vm_test_step+0x1c4>)
    1508:	47a0      	blx	r4
  test_sync_printf("flashing LED for 2.5 seconds...");
    150a:	485b      	ldr	r0, [pc, #364]	; (1678 <mv_vm_test_step+0x1f4>)
    150c:	47a0      	blx	r4
    150e:	240a      	movs	r4, #10
    mu_vm_led_set(!mu_vm_led_get());
    1510:	4f5a      	ldr	r7, [pc, #360]	; (167c <mv_vm_test_step+0x1f8>)
    1512:	4e5b      	ldr	r6, [pc, #364]	; (1680 <mv_vm_test_step+0x1fc>)
    test_wait_ms(250);
    1514:	4d4f      	ldr	r5, [pc, #316]	; (1654 <mv_vm_test_step+0x1d0>)
    mu_vm_led_set(!mu_vm_led_get());
    1516:	47b8      	blx	r7
    1518:	2301      	movs	r3, #1
    151a:	4058      	eors	r0, r3
    151c:	b2c0      	uxtb	r0, r0
    151e:	47b0      	blx	r6
    test_wait_ms(250);
    1520:	20fa      	movs	r0, #250	; 0xfa
    1522:	47a8      	blx	r5
    1524:	3c01      	subs	r4, #1
  for (int i = 0; i < 10; i++) {
    1526:	2c00      	cmp	r4, #0
    1528:	d1f5      	bne.n	1516 <mv_vm_test_step+0x92>
  mu_vm_led_set(false);
    152a:	2000      	movs	r0, #0
    152c:	4b54      	ldr	r3, [pc, #336]	; (1680 <mv_vm_test_step+0x1fc>)
    152e:	4798      	blx	r3
  test_sync_printf("done.  time is now ");
    1530:	4850      	ldr	r0, [pc, #320]	; (1674 <mv_vm_test_step+0x1f0>)
    1532:	4c3f      	ldr	r4, [pc, #252]	; (1630 <mv_vm_test_step+0x1ac>)
    1534:	47a0      	blx	r4
  test_print_time(mu_vm_rtc_now());
    1536:	4b3b      	ldr	r3, [pc, #236]	; (1624 <mv_vm_test_step+0x1a0>)
    1538:	4798      	blx	r3
    153a:	4b42      	ldr	r3, [pc, #264]	; (1644 <mv_vm_test_step+0x1c0>)
    153c:	4798      	blx	r3
  test_sync_printf("\r\n");
    153e:	4842      	ldr	r0, [pc, #264]	; (1648 <mv_vm_test_step+0x1c4>)
    1540:	47a0      	blx	r4
  test_sync_printf("waiting for button press (synchronous)...");
    1542:	4850      	ldr	r0, [pc, #320]	; (1684 <mv_vm_test_step+0x200>)
    1544:	47a0      	blx	r4
  while (!mu_vm_button_is_pressed()) {
    1546:	4c50      	ldr	r4, [pc, #320]	; (1688 <mv_vm_test_step+0x204>)
    1548:	47a0      	blx	r4
    154a:	2800      	cmp	r0, #0
    154c:	d0fc      	beq.n	1548 <mv_vm_test_step+0xc4>
  test_sync_printf("received button press.\r\n");
    154e:	484f      	ldr	r0, [pc, #316]	; (168c <mv_vm_test_step+0x208>)
    1550:	4b37      	ldr	r3, [pc, #220]	; (1630 <mv_vm_test_step+0x1ac>)
    1552:	4798      	blx	r3
    test_wait_ms(10);
    1554:	4d3f      	ldr	r5, [pc, #252]	; (1654 <mv_vm_test_step+0x1d0>)
  } while (mu_vm_button_is_pressed());
    1556:	4c4c      	ldr	r4, [pc, #304]	; (1688 <mv_vm_test_step+0x204>)
    test_wait_ms(10);
    1558:	200a      	movs	r0, #10
    155a:	47a8      	blx	r5
  } while (mu_vm_button_is_pressed());
    155c:	47a0      	blx	r4
    155e:	2800      	cmp	r0, #0
    1560:	d1fa      	bne.n	1558 <mv_vm_test_step+0xd4>
  s_button_pressed = false;
    1562:	2200      	movs	r2, #0
    1564:	4b30      	ldr	r3, [pc, #192]	; (1628 <mv_vm_test_step+0x1a4>)
    1566:	701a      	strb	r2, [r3, #0]
  mu_vm_button_set_cb(button_press_cb, NULL);
    1568:	2100      	movs	r1, #0
    156a:	4849      	ldr	r0, [pc, #292]	; (1690 <mv_vm_test_step+0x20c>)
    156c:	4b49      	ldr	r3, [pc, #292]	; (1694 <mv_vm_test_step+0x210>)
    156e:	4798      	blx	r3
  test_sync_printf("waiting for button press (asynchronous)...");
    1570:	4849      	ldr	r0, [pc, #292]	; (1698 <mv_vm_test_step+0x214>)
    1572:	4b2f      	ldr	r3, [pc, #188]	; (1630 <mv_vm_test_step+0x1ac>)
    1574:	4798      	blx	r3
  while (!s_button_pressed) {
    1576:	4a2c      	ldr	r2, [pc, #176]	; (1628 <mv_vm_test_step+0x1a4>)
    1578:	7813      	ldrb	r3, [r2, #0]
    157a:	2b00      	cmp	r3, #0
    157c:	d0fc      	beq.n	1578 <mv_vm_test_step+0xf4>
  test_sync_printf("received button press.\r\n");
    157e:	4843      	ldr	r0, [pc, #268]	; (168c <mv_vm_test_step+0x208>)
    1580:	4c2b      	ldr	r4, [pc, #172]	; (1630 <mv_vm_test_step+0x1ac>)
    1582:	47a0      	blx	r4
  test_sync_printf("waiting for keyboard input (synchronous)...");
    1584:	4845      	ldr	r0, [pc, #276]	; (169c <mv_vm_test_step+0x218>)
    1586:	47a0      	blx	r4
  c = mu_vm_serial_read();
    1588:	4b45      	ldr	r3, [pc, #276]	; (16a0 <mv_vm_test_step+0x21c>)
    158a:	4798      	blx	r3
    158c:	0001      	movs	r1, r0
  test_sync_printf("received '%c'\r\n", c);
    158e:	4845      	ldr	r0, [pc, #276]	; (16a4 <mv_vm_test_step+0x220>)
    1590:	47a0      	blx	r4
  test_sync_printf("waiting for keyboard input (asynchronous)...");
    1592:	4845      	ldr	r0, [pc, #276]	; (16a8 <mv_vm_test_step+0x224>)
    1594:	47a0      	blx	r4
  s_rx_char_available = false;
    1596:	4c24      	ldr	r4, [pc, #144]	; (1628 <mv_vm_test_step+0x1a4>)
    1598:	2300      	movs	r3, #0
    159a:	7063      	strb	r3, [r4, #1]
  mu_vm_serial_set_read_cb(serial_read_cb, NULL);
    159c:	2100      	movs	r1, #0
    159e:	4843      	ldr	r0, [pc, #268]	; (16ac <mv_vm_test_step+0x228>)
    15a0:	4b43      	ldr	r3, [pc, #268]	; (16b0 <mv_vm_test_step+0x22c>)
    15a2:	4798      	blx	r3
  while (!s_rx_char_available) {
    15a4:	7863      	ldrb	r3, [r4, #1]
    15a6:	2b00      	cmp	r3, #0
    15a8:	d104      	bne.n	15b4 <mv_vm_test_step+0x130>
    15aa:	4a1f      	ldr	r2, [pc, #124]	; (1628 <mv_vm_test_step+0x1a4>)
	  asm("nop");
    15ac:	46c0      	nop			; (mov r8, r8)
  while (!s_rx_char_available) {
    15ae:	7853      	ldrb	r3, [r2, #1]
    15b0:	2b00      	cmp	r3, #0
    15b2:	d0fb      	beq.n	15ac <mv_vm_test_step+0x128>
  c = mu_vm_serial_read();
    15b4:	4b3a      	ldr	r3, [pc, #232]	; (16a0 <mv_vm_test_step+0x21c>)
    15b6:	4798      	blx	r3
    15b8:	0001      	movs	r1, r0
  test_sync_printf("received '%c'\r\n", c);
    15ba:	483a      	ldr	r0, [pc, #232]	; (16a4 <mv_vm_test_step+0x220>)
    15bc:	4c1c      	ldr	r4, [pc, #112]	; (1630 <mv_vm_test_step+0x1ac>)
    15be:	47a0      	blx	r4
  test_sync_printf("sleeping for 2.5 seconds...");
    15c0:	483c      	ldr	r0, [pc, #240]	; (16b4 <mv_vm_test_step+0x230>)
    15c2:	47a0      	blx	r4
  while (!mu_vm_serial_can_write()) {
    15c4:	4c3c      	ldr	r4, [pc, #240]	; (16b8 <mv_vm_test_step+0x234>)
    15c6:	e000      	b.n	15ca <mv_vm_test_step+0x146>
	  asm("nop");
    15c8:	46c0      	nop			; (mov r8, r8)
  while (!mu_vm_serial_can_write()) {
    15ca:	47a0      	blx	r4
    15cc:	2800      	cmp	r0, #0
    15ce:	d0fb      	beq.n	15c8 <mv_vm_test_step+0x144>
  mu_vm_sleep_until(mu_vm_time_offset(mu_vm_rtc_now(),
    15d0:	4d14      	ldr	r5, [pc, #80]	; (1624 <mv_vm_test_step+0x1a0>)
    15d2:	47a8      	blx	r5
    15d4:	0004      	movs	r4, r0
    15d6:	481e      	ldr	r0, [pc, #120]	; (1650 <mv_vm_test_step+0x1cc>)
    15d8:	4b22      	ldr	r3, [pc, #136]	; (1664 <mv_vm_test_step+0x1e0>)
    15da:	4798      	blx	r3
    15dc:	0001      	movs	r1, r0
    15de:	0020      	movs	r0, r4
    15e0:	4b21      	ldr	r3, [pc, #132]	; (1668 <mv_vm_test_step+0x1e4>)
    15e2:	4798      	blx	r3
    15e4:	4b35      	ldr	r3, [pc, #212]	; (16bc <mv_vm_test_step+0x238>)
    15e6:	4798      	blx	r3
  test_sync_printf("done.  time is now ");
    15e8:	4822      	ldr	r0, [pc, #136]	; (1674 <mv_vm_test_step+0x1f0>)
    15ea:	4c11      	ldr	r4, [pc, #68]	; (1630 <mv_vm_test_step+0x1ac>)
    15ec:	47a0      	blx	r4
  test_print_time(mu_vm_rtc_now());
    15ee:	47a8      	blx	r5
    15f0:	4b14      	ldr	r3, [pc, #80]	; (1644 <mv_vm_test_step+0x1c0>)
    15f2:	4798      	blx	r3
  test_sync_printf("\r\n");
    15f4:	4814      	ldr	r0, [pc, #80]	; (1648 <mv_vm_test_step+0x1c4>)
    15f6:	47a0      	blx	r4
  test_sync_printf("sleeping until button press...");
    15f8:	4831      	ldr	r0, [pc, #196]	; (16c0 <mv_vm_test_step+0x23c>)
    15fa:	47a0      	blx	r4
  while (!mu_vm_serial_can_write()) {
    15fc:	4c2e      	ldr	r4, [pc, #184]	; (16b8 <mv_vm_test_step+0x234>)
    15fe:	e000      	b.n	1602 <mv_vm_test_step+0x17e>
	  asm("nop");
    1600:	46c0      	nop			; (mov r8, r8)
  while (!mu_vm_serial_can_write()) {
    1602:	47a0      	blx	r4
    1604:	2800      	cmp	r0, #0
    1606:	d0fb      	beq.n	1600 <mv_vm_test_step+0x17c>
  mu_vm_sleep();
    1608:	4b2e      	ldr	r3, [pc, #184]	; (16c4 <mv_vm_test_step+0x240>)
    160a:	4798      	blx	r3
  test_sync_printf("done.  time is now ");
    160c:	4819      	ldr	r0, [pc, #100]	; (1674 <mv_vm_test_step+0x1f0>)
    160e:	4c08      	ldr	r4, [pc, #32]	; (1630 <mv_vm_test_step+0x1ac>)
    1610:	47a0      	blx	r4
  test_print_time(mu_vm_rtc_now());
    1612:	4b04      	ldr	r3, [pc, #16]	; (1624 <mv_vm_test_step+0x1a0>)
    1614:	4798      	blx	r3
    1616:	4b0b      	ldr	r3, [pc, #44]	; (1644 <mv_vm_test_step+0x1c0>)
    1618:	4798      	blx	r3
  test_sync_printf("\r\n");
    161a:	480b      	ldr	r0, [pc, #44]	; (1648 <mv_vm_test_step+0x1c4>)
    161c:	47a0      	blx	r4
  test_sync_printf("end of mu_vm_test\r\n================\r\n");
    161e:	482a      	ldr	r0, [pc, #168]	; (16c8 <mv_vm_test_step+0x244>)
    1620:	47a0      	blx	r4
}
    1622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1624:	00000289 	.word	0x00000289
    1628:	200000d0 	.word	0x200000d0
    162c:	00002394 	.word	0x00002394
    1630:	000013b9 	.word	0x000013b9
    1634:	000023c0 	.word	0x000023c0
    1638:	000023d4 	.word	0x000023d4
    163c:	00001315 	.word	0x00001315
    1640:	000023ec 	.word	0x000023ec
    1644:	0000144d 	.word	0x0000144d
    1648:	000023fc 	.word	0x000023fc
    164c:	00002400 	.word	0x00002400
    1650:	000009c4 	.word	0x000009c4
    1654:	0000140d 	.word	0x0000140d
    1658:	0000241c 	.word	0x0000241c
    165c:	00001309 	.word	0x00001309
    1660:	0000029d 	.word	0x0000029d
    1664:	0000022d 	.word	0x0000022d
    1668:	0000021d 	.word	0x0000021d
    166c:	000002b9 	.word	0x000002b9
    1670:	00002434 	.word	0x00002434
    1674:	0000245c 	.word	0x0000245c
    1678:	00002470 	.word	0x00002470
    167c:	00000305 	.word	0x00000305
    1680:	000002e5 	.word	0x000002e5
    1684:	00002490 	.word	0x00002490
    1688:	00000345 	.word	0x00000345
    168c:	000024bc 	.word	0x000024bc
    1690:	000012f1 	.word	0x000012f1
    1694:	00000381 	.word	0x00000381
    1698:	000024d8 	.word	0x000024d8
    169c:	00002504 	.word	0x00002504
    16a0:	00000425 	.word	0x00000425
    16a4:	00002530 	.word	0x00002530
    16a8:	00002540 	.word	0x00002540
    16ac:	000012fd 	.word	0x000012fd
    16b0:	00000465 	.word	0x00000465
    16b4:	00002570 	.word	0x00002570
    16b8:	0000039d 	.word	0x0000039d
    16bc:	00000495 	.word	0x00000495
    16c0:	0000258c 	.word	0x0000258c
    16c4:	000004c9 	.word	0x000004c9
    16c8:	000025ac 	.word	0x000025ac

000016cc <__udivsi3>:
    16cc:	2200      	movs	r2, #0
    16ce:	0843      	lsrs	r3, r0, #1
    16d0:	428b      	cmp	r3, r1
    16d2:	d374      	bcc.n	17be <__udivsi3+0xf2>
    16d4:	0903      	lsrs	r3, r0, #4
    16d6:	428b      	cmp	r3, r1
    16d8:	d35f      	bcc.n	179a <__udivsi3+0xce>
    16da:	0a03      	lsrs	r3, r0, #8
    16dc:	428b      	cmp	r3, r1
    16de:	d344      	bcc.n	176a <__udivsi3+0x9e>
    16e0:	0b03      	lsrs	r3, r0, #12
    16e2:	428b      	cmp	r3, r1
    16e4:	d328      	bcc.n	1738 <__udivsi3+0x6c>
    16e6:	0c03      	lsrs	r3, r0, #16
    16e8:	428b      	cmp	r3, r1
    16ea:	d30d      	bcc.n	1708 <__udivsi3+0x3c>
    16ec:	22ff      	movs	r2, #255	; 0xff
    16ee:	0209      	lsls	r1, r1, #8
    16f0:	ba12      	rev	r2, r2
    16f2:	0c03      	lsrs	r3, r0, #16
    16f4:	428b      	cmp	r3, r1
    16f6:	d302      	bcc.n	16fe <__udivsi3+0x32>
    16f8:	1212      	asrs	r2, r2, #8
    16fa:	0209      	lsls	r1, r1, #8
    16fc:	d065      	beq.n	17ca <__udivsi3+0xfe>
    16fe:	0b03      	lsrs	r3, r0, #12
    1700:	428b      	cmp	r3, r1
    1702:	d319      	bcc.n	1738 <__udivsi3+0x6c>
    1704:	e000      	b.n	1708 <__udivsi3+0x3c>
    1706:	0a09      	lsrs	r1, r1, #8
    1708:	0bc3      	lsrs	r3, r0, #15
    170a:	428b      	cmp	r3, r1
    170c:	d301      	bcc.n	1712 <__udivsi3+0x46>
    170e:	03cb      	lsls	r3, r1, #15
    1710:	1ac0      	subs	r0, r0, r3
    1712:	4152      	adcs	r2, r2
    1714:	0b83      	lsrs	r3, r0, #14
    1716:	428b      	cmp	r3, r1
    1718:	d301      	bcc.n	171e <__udivsi3+0x52>
    171a:	038b      	lsls	r3, r1, #14
    171c:	1ac0      	subs	r0, r0, r3
    171e:	4152      	adcs	r2, r2
    1720:	0b43      	lsrs	r3, r0, #13
    1722:	428b      	cmp	r3, r1
    1724:	d301      	bcc.n	172a <__udivsi3+0x5e>
    1726:	034b      	lsls	r3, r1, #13
    1728:	1ac0      	subs	r0, r0, r3
    172a:	4152      	adcs	r2, r2
    172c:	0b03      	lsrs	r3, r0, #12
    172e:	428b      	cmp	r3, r1
    1730:	d301      	bcc.n	1736 <__udivsi3+0x6a>
    1732:	030b      	lsls	r3, r1, #12
    1734:	1ac0      	subs	r0, r0, r3
    1736:	4152      	adcs	r2, r2
    1738:	0ac3      	lsrs	r3, r0, #11
    173a:	428b      	cmp	r3, r1
    173c:	d301      	bcc.n	1742 <__udivsi3+0x76>
    173e:	02cb      	lsls	r3, r1, #11
    1740:	1ac0      	subs	r0, r0, r3
    1742:	4152      	adcs	r2, r2
    1744:	0a83      	lsrs	r3, r0, #10
    1746:	428b      	cmp	r3, r1
    1748:	d301      	bcc.n	174e <__udivsi3+0x82>
    174a:	028b      	lsls	r3, r1, #10
    174c:	1ac0      	subs	r0, r0, r3
    174e:	4152      	adcs	r2, r2
    1750:	0a43      	lsrs	r3, r0, #9
    1752:	428b      	cmp	r3, r1
    1754:	d301      	bcc.n	175a <__udivsi3+0x8e>
    1756:	024b      	lsls	r3, r1, #9
    1758:	1ac0      	subs	r0, r0, r3
    175a:	4152      	adcs	r2, r2
    175c:	0a03      	lsrs	r3, r0, #8
    175e:	428b      	cmp	r3, r1
    1760:	d301      	bcc.n	1766 <__udivsi3+0x9a>
    1762:	020b      	lsls	r3, r1, #8
    1764:	1ac0      	subs	r0, r0, r3
    1766:	4152      	adcs	r2, r2
    1768:	d2cd      	bcs.n	1706 <__udivsi3+0x3a>
    176a:	09c3      	lsrs	r3, r0, #7
    176c:	428b      	cmp	r3, r1
    176e:	d301      	bcc.n	1774 <__udivsi3+0xa8>
    1770:	01cb      	lsls	r3, r1, #7
    1772:	1ac0      	subs	r0, r0, r3
    1774:	4152      	adcs	r2, r2
    1776:	0983      	lsrs	r3, r0, #6
    1778:	428b      	cmp	r3, r1
    177a:	d301      	bcc.n	1780 <__udivsi3+0xb4>
    177c:	018b      	lsls	r3, r1, #6
    177e:	1ac0      	subs	r0, r0, r3
    1780:	4152      	adcs	r2, r2
    1782:	0943      	lsrs	r3, r0, #5
    1784:	428b      	cmp	r3, r1
    1786:	d301      	bcc.n	178c <__udivsi3+0xc0>
    1788:	014b      	lsls	r3, r1, #5
    178a:	1ac0      	subs	r0, r0, r3
    178c:	4152      	adcs	r2, r2
    178e:	0903      	lsrs	r3, r0, #4
    1790:	428b      	cmp	r3, r1
    1792:	d301      	bcc.n	1798 <__udivsi3+0xcc>
    1794:	010b      	lsls	r3, r1, #4
    1796:	1ac0      	subs	r0, r0, r3
    1798:	4152      	adcs	r2, r2
    179a:	08c3      	lsrs	r3, r0, #3
    179c:	428b      	cmp	r3, r1
    179e:	d301      	bcc.n	17a4 <__udivsi3+0xd8>
    17a0:	00cb      	lsls	r3, r1, #3
    17a2:	1ac0      	subs	r0, r0, r3
    17a4:	4152      	adcs	r2, r2
    17a6:	0883      	lsrs	r3, r0, #2
    17a8:	428b      	cmp	r3, r1
    17aa:	d301      	bcc.n	17b0 <__udivsi3+0xe4>
    17ac:	008b      	lsls	r3, r1, #2
    17ae:	1ac0      	subs	r0, r0, r3
    17b0:	4152      	adcs	r2, r2
    17b2:	0843      	lsrs	r3, r0, #1
    17b4:	428b      	cmp	r3, r1
    17b6:	d301      	bcc.n	17bc <__udivsi3+0xf0>
    17b8:	004b      	lsls	r3, r1, #1
    17ba:	1ac0      	subs	r0, r0, r3
    17bc:	4152      	adcs	r2, r2
    17be:	1a41      	subs	r1, r0, r1
    17c0:	d200      	bcs.n	17c4 <__udivsi3+0xf8>
    17c2:	4601      	mov	r1, r0
    17c4:	4152      	adcs	r2, r2
    17c6:	4610      	mov	r0, r2
    17c8:	4770      	bx	lr
    17ca:	e7ff      	b.n	17cc <__udivsi3+0x100>
    17cc:	b501      	push	{r0, lr}
    17ce:	2000      	movs	r0, #0
    17d0:	f000 f8f0 	bl	19b4 <__aeabi_idiv0>
    17d4:	bd02      	pop	{r1, pc}
    17d6:	46c0      	nop			; (mov r8, r8)

000017d8 <__aeabi_uidivmod>:
    17d8:	2900      	cmp	r1, #0
    17da:	d0f7      	beq.n	17cc <__udivsi3+0x100>
    17dc:	e776      	b.n	16cc <__udivsi3>
    17de:	4770      	bx	lr

000017e0 <__divsi3>:
    17e0:	4603      	mov	r3, r0
    17e2:	430b      	orrs	r3, r1
    17e4:	d47f      	bmi.n	18e6 <__divsi3+0x106>
    17e6:	2200      	movs	r2, #0
    17e8:	0843      	lsrs	r3, r0, #1
    17ea:	428b      	cmp	r3, r1
    17ec:	d374      	bcc.n	18d8 <__divsi3+0xf8>
    17ee:	0903      	lsrs	r3, r0, #4
    17f0:	428b      	cmp	r3, r1
    17f2:	d35f      	bcc.n	18b4 <__divsi3+0xd4>
    17f4:	0a03      	lsrs	r3, r0, #8
    17f6:	428b      	cmp	r3, r1
    17f8:	d344      	bcc.n	1884 <__divsi3+0xa4>
    17fa:	0b03      	lsrs	r3, r0, #12
    17fc:	428b      	cmp	r3, r1
    17fe:	d328      	bcc.n	1852 <__divsi3+0x72>
    1800:	0c03      	lsrs	r3, r0, #16
    1802:	428b      	cmp	r3, r1
    1804:	d30d      	bcc.n	1822 <__divsi3+0x42>
    1806:	22ff      	movs	r2, #255	; 0xff
    1808:	0209      	lsls	r1, r1, #8
    180a:	ba12      	rev	r2, r2
    180c:	0c03      	lsrs	r3, r0, #16
    180e:	428b      	cmp	r3, r1
    1810:	d302      	bcc.n	1818 <__divsi3+0x38>
    1812:	1212      	asrs	r2, r2, #8
    1814:	0209      	lsls	r1, r1, #8
    1816:	d065      	beq.n	18e4 <__divsi3+0x104>
    1818:	0b03      	lsrs	r3, r0, #12
    181a:	428b      	cmp	r3, r1
    181c:	d319      	bcc.n	1852 <__divsi3+0x72>
    181e:	e000      	b.n	1822 <__divsi3+0x42>
    1820:	0a09      	lsrs	r1, r1, #8
    1822:	0bc3      	lsrs	r3, r0, #15
    1824:	428b      	cmp	r3, r1
    1826:	d301      	bcc.n	182c <__divsi3+0x4c>
    1828:	03cb      	lsls	r3, r1, #15
    182a:	1ac0      	subs	r0, r0, r3
    182c:	4152      	adcs	r2, r2
    182e:	0b83      	lsrs	r3, r0, #14
    1830:	428b      	cmp	r3, r1
    1832:	d301      	bcc.n	1838 <__divsi3+0x58>
    1834:	038b      	lsls	r3, r1, #14
    1836:	1ac0      	subs	r0, r0, r3
    1838:	4152      	adcs	r2, r2
    183a:	0b43      	lsrs	r3, r0, #13
    183c:	428b      	cmp	r3, r1
    183e:	d301      	bcc.n	1844 <__divsi3+0x64>
    1840:	034b      	lsls	r3, r1, #13
    1842:	1ac0      	subs	r0, r0, r3
    1844:	4152      	adcs	r2, r2
    1846:	0b03      	lsrs	r3, r0, #12
    1848:	428b      	cmp	r3, r1
    184a:	d301      	bcc.n	1850 <__divsi3+0x70>
    184c:	030b      	lsls	r3, r1, #12
    184e:	1ac0      	subs	r0, r0, r3
    1850:	4152      	adcs	r2, r2
    1852:	0ac3      	lsrs	r3, r0, #11
    1854:	428b      	cmp	r3, r1
    1856:	d301      	bcc.n	185c <__divsi3+0x7c>
    1858:	02cb      	lsls	r3, r1, #11
    185a:	1ac0      	subs	r0, r0, r3
    185c:	4152      	adcs	r2, r2
    185e:	0a83      	lsrs	r3, r0, #10
    1860:	428b      	cmp	r3, r1
    1862:	d301      	bcc.n	1868 <__divsi3+0x88>
    1864:	028b      	lsls	r3, r1, #10
    1866:	1ac0      	subs	r0, r0, r3
    1868:	4152      	adcs	r2, r2
    186a:	0a43      	lsrs	r3, r0, #9
    186c:	428b      	cmp	r3, r1
    186e:	d301      	bcc.n	1874 <__divsi3+0x94>
    1870:	024b      	lsls	r3, r1, #9
    1872:	1ac0      	subs	r0, r0, r3
    1874:	4152      	adcs	r2, r2
    1876:	0a03      	lsrs	r3, r0, #8
    1878:	428b      	cmp	r3, r1
    187a:	d301      	bcc.n	1880 <__divsi3+0xa0>
    187c:	020b      	lsls	r3, r1, #8
    187e:	1ac0      	subs	r0, r0, r3
    1880:	4152      	adcs	r2, r2
    1882:	d2cd      	bcs.n	1820 <__divsi3+0x40>
    1884:	09c3      	lsrs	r3, r0, #7
    1886:	428b      	cmp	r3, r1
    1888:	d301      	bcc.n	188e <__divsi3+0xae>
    188a:	01cb      	lsls	r3, r1, #7
    188c:	1ac0      	subs	r0, r0, r3
    188e:	4152      	adcs	r2, r2
    1890:	0983      	lsrs	r3, r0, #6
    1892:	428b      	cmp	r3, r1
    1894:	d301      	bcc.n	189a <__divsi3+0xba>
    1896:	018b      	lsls	r3, r1, #6
    1898:	1ac0      	subs	r0, r0, r3
    189a:	4152      	adcs	r2, r2
    189c:	0943      	lsrs	r3, r0, #5
    189e:	428b      	cmp	r3, r1
    18a0:	d301      	bcc.n	18a6 <__divsi3+0xc6>
    18a2:	014b      	lsls	r3, r1, #5
    18a4:	1ac0      	subs	r0, r0, r3
    18a6:	4152      	adcs	r2, r2
    18a8:	0903      	lsrs	r3, r0, #4
    18aa:	428b      	cmp	r3, r1
    18ac:	d301      	bcc.n	18b2 <__divsi3+0xd2>
    18ae:	010b      	lsls	r3, r1, #4
    18b0:	1ac0      	subs	r0, r0, r3
    18b2:	4152      	adcs	r2, r2
    18b4:	08c3      	lsrs	r3, r0, #3
    18b6:	428b      	cmp	r3, r1
    18b8:	d301      	bcc.n	18be <__divsi3+0xde>
    18ba:	00cb      	lsls	r3, r1, #3
    18bc:	1ac0      	subs	r0, r0, r3
    18be:	4152      	adcs	r2, r2
    18c0:	0883      	lsrs	r3, r0, #2
    18c2:	428b      	cmp	r3, r1
    18c4:	d301      	bcc.n	18ca <__divsi3+0xea>
    18c6:	008b      	lsls	r3, r1, #2
    18c8:	1ac0      	subs	r0, r0, r3
    18ca:	4152      	adcs	r2, r2
    18cc:	0843      	lsrs	r3, r0, #1
    18ce:	428b      	cmp	r3, r1
    18d0:	d301      	bcc.n	18d6 <__divsi3+0xf6>
    18d2:	004b      	lsls	r3, r1, #1
    18d4:	1ac0      	subs	r0, r0, r3
    18d6:	4152      	adcs	r2, r2
    18d8:	1a41      	subs	r1, r0, r1
    18da:	d200      	bcs.n	18de <__divsi3+0xfe>
    18dc:	4601      	mov	r1, r0
    18de:	4152      	adcs	r2, r2
    18e0:	4610      	mov	r0, r2
    18e2:	4770      	bx	lr
    18e4:	e05d      	b.n	19a2 <__divsi3+0x1c2>
    18e6:	0fca      	lsrs	r2, r1, #31
    18e8:	d000      	beq.n	18ec <__divsi3+0x10c>
    18ea:	4249      	negs	r1, r1
    18ec:	1003      	asrs	r3, r0, #32
    18ee:	d300      	bcc.n	18f2 <__divsi3+0x112>
    18f0:	4240      	negs	r0, r0
    18f2:	4053      	eors	r3, r2
    18f4:	2200      	movs	r2, #0
    18f6:	469c      	mov	ip, r3
    18f8:	0903      	lsrs	r3, r0, #4
    18fa:	428b      	cmp	r3, r1
    18fc:	d32d      	bcc.n	195a <__divsi3+0x17a>
    18fe:	0a03      	lsrs	r3, r0, #8
    1900:	428b      	cmp	r3, r1
    1902:	d312      	bcc.n	192a <__divsi3+0x14a>
    1904:	22fc      	movs	r2, #252	; 0xfc
    1906:	0189      	lsls	r1, r1, #6
    1908:	ba12      	rev	r2, r2
    190a:	0a03      	lsrs	r3, r0, #8
    190c:	428b      	cmp	r3, r1
    190e:	d30c      	bcc.n	192a <__divsi3+0x14a>
    1910:	0189      	lsls	r1, r1, #6
    1912:	1192      	asrs	r2, r2, #6
    1914:	428b      	cmp	r3, r1
    1916:	d308      	bcc.n	192a <__divsi3+0x14a>
    1918:	0189      	lsls	r1, r1, #6
    191a:	1192      	asrs	r2, r2, #6
    191c:	428b      	cmp	r3, r1
    191e:	d304      	bcc.n	192a <__divsi3+0x14a>
    1920:	0189      	lsls	r1, r1, #6
    1922:	d03a      	beq.n	199a <__divsi3+0x1ba>
    1924:	1192      	asrs	r2, r2, #6
    1926:	e000      	b.n	192a <__divsi3+0x14a>
    1928:	0989      	lsrs	r1, r1, #6
    192a:	09c3      	lsrs	r3, r0, #7
    192c:	428b      	cmp	r3, r1
    192e:	d301      	bcc.n	1934 <__divsi3+0x154>
    1930:	01cb      	lsls	r3, r1, #7
    1932:	1ac0      	subs	r0, r0, r3
    1934:	4152      	adcs	r2, r2
    1936:	0983      	lsrs	r3, r0, #6
    1938:	428b      	cmp	r3, r1
    193a:	d301      	bcc.n	1940 <__divsi3+0x160>
    193c:	018b      	lsls	r3, r1, #6
    193e:	1ac0      	subs	r0, r0, r3
    1940:	4152      	adcs	r2, r2
    1942:	0943      	lsrs	r3, r0, #5
    1944:	428b      	cmp	r3, r1
    1946:	d301      	bcc.n	194c <__divsi3+0x16c>
    1948:	014b      	lsls	r3, r1, #5
    194a:	1ac0      	subs	r0, r0, r3
    194c:	4152      	adcs	r2, r2
    194e:	0903      	lsrs	r3, r0, #4
    1950:	428b      	cmp	r3, r1
    1952:	d301      	bcc.n	1958 <__divsi3+0x178>
    1954:	010b      	lsls	r3, r1, #4
    1956:	1ac0      	subs	r0, r0, r3
    1958:	4152      	adcs	r2, r2
    195a:	08c3      	lsrs	r3, r0, #3
    195c:	428b      	cmp	r3, r1
    195e:	d301      	bcc.n	1964 <__divsi3+0x184>
    1960:	00cb      	lsls	r3, r1, #3
    1962:	1ac0      	subs	r0, r0, r3
    1964:	4152      	adcs	r2, r2
    1966:	0883      	lsrs	r3, r0, #2
    1968:	428b      	cmp	r3, r1
    196a:	d301      	bcc.n	1970 <__divsi3+0x190>
    196c:	008b      	lsls	r3, r1, #2
    196e:	1ac0      	subs	r0, r0, r3
    1970:	4152      	adcs	r2, r2
    1972:	d2d9      	bcs.n	1928 <__divsi3+0x148>
    1974:	0843      	lsrs	r3, r0, #1
    1976:	428b      	cmp	r3, r1
    1978:	d301      	bcc.n	197e <__divsi3+0x19e>
    197a:	004b      	lsls	r3, r1, #1
    197c:	1ac0      	subs	r0, r0, r3
    197e:	4152      	adcs	r2, r2
    1980:	1a41      	subs	r1, r0, r1
    1982:	d200      	bcs.n	1986 <__divsi3+0x1a6>
    1984:	4601      	mov	r1, r0
    1986:	4663      	mov	r3, ip
    1988:	4152      	adcs	r2, r2
    198a:	105b      	asrs	r3, r3, #1
    198c:	4610      	mov	r0, r2
    198e:	d301      	bcc.n	1994 <__divsi3+0x1b4>
    1990:	4240      	negs	r0, r0
    1992:	2b00      	cmp	r3, #0
    1994:	d500      	bpl.n	1998 <__divsi3+0x1b8>
    1996:	4249      	negs	r1, r1
    1998:	4770      	bx	lr
    199a:	4663      	mov	r3, ip
    199c:	105b      	asrs	r3, r3, #1
    199e:	d300      	bcc.n	19a2 <__divsi3+0x1c2>
    19a0:	4240      	negs	r0, r0
    19a2:	b501      	push	{r0, lr}
    19a4:	2000      	movs	r0, #0
    19a6:	f000 f805 	bl	19b4 <__aeabi_idiv0>
    19aa:	bd02      	pop	{r1, pc}

000019ac <__aeabi_idivmod>:
    19ac:	2900      	cmp	r1, #0
    19ae:	d0f8      	beq.n	19a2 <__divsi3+0x1c2>
    19b0:	e716      	b.n	17e0 <__divsi3>
    19b2:	4770      	bx	lr

000019b4 <__aeabi_idiv0>:
    19b4:	4770      	bx	lr
    19b6:	46c0      	nop			; (mov r8, r8)

000019b8 <__ffssi2>:
    19b8:	b510      	push	{r4, lr}
    19ba:	2300      	movs	r3, #0
    19bc:	2800      	cmp	r0, #0
    19be:	d002      	beq.n	19c6 <__ffssi2+0xe>
    19c0:	f000 f804 	bl	19cc <__ctzsi2>
    19c4:	1c43      	adds	r3, r0, #1
    19c6:	0018      	movs	r0, r3
    19c8:	bd10      	pop	{r4, pc}
    19ca:	46c0      	nop			; (mov r8, r8)

000019cc <__ctzsi2>:
    19cc:	4241      	negs	r1, r0
    19ce:	4008      	ands	r0, r1
    19d0:	211c      	movs	r1, #28
    19d2:	2301      	movs	r3, #1
    19d4:	041b      	lsls	r3, r3, #16
    19d6:	4298      	cmp	r0, r3
    19d8:	d301      	bcc.n	19de <__ctzsi2+0x12>
    19da:	0c00      	lsrs	r0, r0, #16
    19dc:	3910      	subs	r1, #16
    19de:	0a1b      	lsrs	r3, r3, #8
    19e0:	4298      	cmp	r0, r3
    19e2:	d301      	bcc.n	19e8 <__ctzsi2+0x1c>
    19e4:	0a00      	lsrs	r0, r0, #8
    19e6:	3908      	subs	r1, #8
    19e8:	091b      	lsrs	r3, r3, #4
    19ea:	4298      	cmp	r0, r3
    19ec:	d301      	bcc.n	19f2 <__ctzsi2+0x26>
    19ee:	0900      	lsrs	r0, r0, #4
    19f0:	3904      	subs	r1, #4
    19f2:	a202      	add	r2, pc, #8	; (adr r2, 19fc <__ctzsi2+0x30>)
    19f4:	5c10      	ldrb	r0, [r2, r0]
    19f6:	1a40      	subs	r0, r0, r1
    19f8:	4770      	bx	lr
    19fa:	46c0      	nop			; (mov r8, r8)
    19fc:	1d1d1c1b 	.word	0x1d1d1c1b
    1a00:	1e1e1e1e 	.word	0x1e1e1e1e
    1a04:	1f1f1f1f 	.word	0x1f1f1f1f
    1a08:	1f1f1f1f 	.word	0x1f1f1f1f

00001a0c <__libc_init_array>:
    1a0c:	b570      	push	{r4, r5, r6, lr}
    1a0e:	2600      	movs	r6, #0
    1a10:	4d0c      	ldr	r5, [pc, #48]	; (1a44 <__libc_init_array+0x38>)
    1a12:	4c0d      	ldr	r4, [pc, #52]	; (1a48 <__libc_init_array+0x3c>)
    1a14:	1b64      	subs	r4, r4, r5
    1a16:	10a4      	asrs	r4, r4, #2
    1a18:	42a6      	cmp	r6, r4
    1a1a:	d109      	bne.n	1a30 <__libc_init_array+0x24>
    1a1c:	2600      	movs	r6, #0
    1a1e:	f000 fe23 	bl	2668 <_init>
    1a22:	4d0a      	ldr	r5, [pc, #40]	; (1a4c <__libc_init_array+0x40>)
    1a24:	4c0a      	ldr	r4, [pc, #40]	; (1a50 <__libc_init_array+0x44>)
    1a26:	1b64      	subs	r4, r4, r5
    1a28:	10a4      	asrs	r4, r4, #2
    1a2a:	42a6      	cmp	r6, r4
    1a2c:	d105      	bne.n	1a3a <__libc_init_array+0x2e>
    1a2e:	bd70      	pop	{r4, r5, r6, pc}
    1a30:	00b3      	lsls	r3, r6, #2
    1a32:	58eb      	ldr	r3, [r5, r3]
    1a34:	4798      	blx	r3
    1a36:	3601      	adds	r6, #1
    1a38:	e7ee      	b.n	1a18 <__libc_init_array+0xc>
    1a3a:	00b3      	lsls	r3, r6, #2
    1a3c:	58eb      	ldr	r3, [r5, r3]
    1a3e:	4798      	blx	r3
    1a40:	3601      	adds	r6, #1
    1a42:	e7f2      	b.n	1a2a <__libc_init_array+0x1e>
    1a44:	00002674 	.word	0x00002674
    1a48:	00002674 	.word	0x00002674
    1a4c:	00002674 	.word	0x00002674
    1a50:	00002678 	.word	0x00002678

00001a54 <memset>:
    1a54:	0003      	movs	r3, r0
    1a56:	1882      	adds	r2, r0, r2
    1a58:	4293      	cmp	r3, r2
    1a5a:	d100      	bne.n	1a5e <memset+0xa>
    1a5c:	4770      	bx	lr
    1a5e:	7019      	strb	r1, [r3, #0]
    1a60:	3301      	adds	r3, #1
    1a62:	e7f9      	b.n	1a58 <memset+0x4>

00001a64 <_vsniprintf_r>:
    1a64:	b530      	push	{r4, r5, lr}
    1a66:	0014      	movs	r4, r2
    1a68:	b09b      	sub	sp, #108	; 0x6c
    1a6a:	0005      	movs	r5, r0
    1a6c:	001a      	movs	r2, r3
    1a6e:	2c00      	cmp	r4, #0
    1a70:	da05      	bge.n	1a7e <_vsniprintf_r+0x1a>
    1a72:	238b      	movs	r3, #139	; 0x8b
    1a74:	6003      	str	r3, [r0, #0]
    1a76:	2001      	movs	r0, #1
    1a78:	4240      	negs	r0, r0
    1a7a:	b01b      	add	sp, #108	; 0x6c
    1a7c:	bd30      	pop	{r4, r5, pc}
    1a7e:	2382      	movs	r3, #130	; 0x82
    1a80:	4668      	mov	r0, sp
    1a82:	009b      	lsls	r3, r3, #2
    1a84:	8183      	strh	r3, [r0, #12]
    1a86:	2300      	movs	r3, #0
    1a88:	9100      	str	r1, [sp, #0]
    1a8a:	9104      	str	r1, [sp, #16]
    1a8c:	429c      	cmp	r4, r3
    1a8e:	d000      	beq.n	1a92 <_vsniprintf_r+0x2e>
    1a90:	1e63      	subs	r3, r4, #1
    1a92:	9302      	str	r3, [sp, #8]
    1a94:	9305      	str	r3, [sp, #20]
    1a96:	2301      	movs	r3, #1
    1a98:	4669      	mov	r1, sp
    1a9a:	425b      	negs	r3, r3
    1a9c:	81cb      	strh	r3, [r1, #14]
    1a9e:	0028      	movs	r0, r5
    1aa0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1aa2:	f000 f8d7 	bl	1c54 <_svfiprintf_r>
    1aa6:	1c43      	adds	r3, r0, #1
    1aa8:	da01      	bge.n	1aae <_vsniprintf_r+0x4a>
    1aaa:	238b      	movs	r3, #139	; 0x8b
    1aac:	602b      	str	r3, [r5, #0]
    1aae:	2c00      	cmp	r4, #0
    1ab0:	d0e3      	beq.n	1a7a <_vsniprintf_r+0x16>
    1ab2:	2300      	movs	r3, #0
    1ab4:	9a00      	ldr	r2, [sp, #0]
    1ab6:	7013      	strb	r3, [r2, #0]
    1ab8:	e7df      	b.n	1a7a <_vsniprintf_r+0x16>
	...

00001abc <vsniprintf>:
    1abc:	b507      	push	{r0, r1, r2, lr}
    1abe:	9300      	str	r3, [sp, #0]
    1ac0:	0013      	movs	r3, r2
    1ac2:	000a      	movs	r2, r1
    1ac4:	0001      	movs	r1, r0
    1ac6:	4802      	ldr	r0, [pc, #8]	; (1ad0 <vsniprintf+0x14>)
    1ac8:	6800      	ldr	r0, [r0, #0]
    1aca:	f7ff ffcb 	bl	1a64 <_vsniprintf_r>
    1ace:	bd0e      	pop	{r1, r2, r3, pc}
    1ad0:	20000000 	.word	0x20000000

00001ad4 <_malloc_r>:
    1ad4:	2303      	movs	r3, #3
    1ad6:	b570      	push	{r4, r5, r6, lr}
    1ad8:	1ccd      	adds	r5, r1, #3
    1ada:	439d      	bics	r5, r3
    1adc:	3508      	adds	r5, #8
    1ade:	0006      	movs	r6, r0
    1ae0:	2d0c      	cmp	r5, #12
    1ae2:	d21e      	bcs.n	1b22 <_malloc_r+0x4e>
    1ae4:	250c      	movs	r5, #12
    1ae6:	42a9      	cmp	r1, r5
    1ae8:	d81d      	bhi.n	1b26 <_malloc_r+0x52>
    1aea:	0030      	movs	r0, r6
    1aec:	f000 fb76 	bl	21dc <__malloc_lock>
    1af0:	4a25      	ldr	r2, [pc, #148]	; (1b88 <_malloc_r+0xb4>)
    1af2:	6814      	ldr	r4, [r2, #0]
    1af4:	0021      	movs	r1, r4
    1af6:	2900      	cmp	r1, #0
    1af8:	d119      	bne.n	1b2e <_malloc_r+0x5a>
    1afa:	4c24      	ldr	r4, [pc, #144]	; (1b8c <_malloc_r+0xb8>)
    1afc:	6823      	ldr	r3, [r4, #0]
    1afe:	2b00      	cmp	r3, #0
    1b00:	d103      	bne.n	1b0a <_malloc_r+0x36>
    1b02:	0030      	movs	r0, r6
    1b04:	f000 fb32 	bl	216c <_sbrk_r>
    1b08:	6020      	str	r0, [r4, #0]
    1b0a:	0029      	movs	r1, r5
    1b0c:	0030      	movs	r0, r6
    1b0e:	f000 fb2d 	bl	216c <_sbrk_r>
    1b12:	1c43      	adds	r3, r0, #1
    1b14:	d12c      	bne.n	1b70 <_malloc_r+0x9c>
    1b16:	230c      	movs	r3, #12
    1b18:	0030      	movs	r0, r6
    1b1a:	6033      	str	r3, [r6, #0]
    1b1c:	f000 fb5f 	bl	21de <__malloc_unlock>
    1b20:	e003      	b.n	1b2a <_malloc_r+0x56>
    1b22:	2d00      	cmp	r5, #0
    1b24:	dadf      	bge.n	1ae6 <_malloc_r+0x12>
    1b26:	230c      	movs	r3, #12
    1b28:	6033      	str	r3, [r6, #0]
    1b2a:	2000      	movs	r0, #0
    1b2c:	bd70      	pop	{r4, r5, r6, pc}
    1b2e:	680b      	ldr	r3, [r1, #0]
    1b30:	1b5b      	subs	r3, r3, r5
    1b32:	d41a      	bmi.n	1b6a <_malloc_r+0x96>
    1b34:	2b0b      	cmp	r3, #11
    1b36:	d903      	bls.n	1b40 <_malloc_r+0x6c>
    1b38:	600b      	str	r3, [r1, #0]
    1b3a:	18cc      	adds	r4, r1, r3
    1b3c:	6025      	str	r5, [r4, #0]
    1b3e:	e003      	b.n	1b48 <_malloc_r+0x74>
    1b40:	428c      	cmp	r4, r1
    1b42:	d10e      	bne.n	1b62 <_malloc_r+0x8e>
    1b44:	6863      	ldr	r3, [r4, #4]
    1b46:	6013      	str	r3, [r2, #0]
    1b48:	0030      	movs	r0, r6
    1b4a:	f000 fb48 	bl	21de <__malloc_unlock>
    1b4e:	0020      	movs	r0, r4
    1b50:	2207      	movs	r2, #7
    1b52:	300b      	adds	r0, #11
    1b54:	1d23      	adds	r3, r4, #4
    1b56:	4390      	bics	r0, r2
    1b58:	1ac3      	subs	r3, r0, r3
    1b5a:	d0e7      	beq.n	1b2c <_malloc_r+0x58>
    1b5c:	425a      	negs	r2, r3
    1b5e:	50e2      	str	r2, [r4, r3]
    1b60:	e7e4      	b.n	1b2c <_malloc_r+0x58>
    1b62:	684b      	ldr	r3, [r1, #4]
    1b64:	6063      	str	r3, [r4, #4]
    1b66:	000c      	movs	r4, r1
    1b68:	e7ee      	b.n	1b48 <_malloc_r+0x74>
    1b6a:	000c      	movs	r4, r1
    1b6c:	6849      	ldr	r1, [r1, #4]
    1b6e:	e7c2      	b.n	1af6 <_malloc_r+0x22>
    1b70:	2303      	movs	r3, #3
    1b72:	1cc4      	adds	r4, r0, #3
    1b74:	439c      	bics	r4, r3
    1b76:	42a0      	cmp	r0, r4
    1b78:	d0e0      	beq.n	1b3c <_malloc_r+0x68>
    1b7a:	1a21      	subs	r1, r4, r0
    1b7c:	0030      	movs	r0, r6
    1b7e:	f000 faf5 	bl	216c <_sbrk_r>
    1b82:	1c43      	adds	r3, r0, #1
    1b84:	d1da      	bne.n	1b3c <_malloc_r+0x68>
    1b86:	e7c6      	b.n	1b16 <_malloc_r+0x42>
    1b88:	20000148 	.word	0x20000148
    1b8c:	2000014c 	.word	0x2000014c

00001b90 <__ssputs_r>:
    1b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b92:	688e      	ldr	r6, [r1, #8]
    1b94:	b085      	sub	sp, #20
    1b96:	0007      	movs	r7, r0
    1b98:	000c      	movs	r4, r1
    1b9a:	9203      	str	r2, [sp, #12]
    1b9c:	9301      	str	r3, [sp, #4]
    1b9e:	429e      	cmp	r6, r3
    1ba0:	d839      	bhi.n	1c16 <__ssputs_r+0x86>
    1ba2:	2390      	movs	r3, #144	; 0x90
    1ba4:	898a      	ldrh	r2, [r1, #12]
    1ba6:	00db      	lsls	r3, r3, #3
    1ba8:	421a      	tst	r2, r3
    1baa:	d034      	beq.n	1c16 <__ssputs_r+0x86>
    1bac:	2503      	movs	r5, #3
    1bae:	6909      	ldr	r1, [r1, #16]
    1bb0:	6823      	ldr	r3, [r4, #0]
    1bb2:	1a5b      	subs	r3, r3, r1
    1bb4:	9302      	str	r3, [sp, #8]
    1bb6:	6963      	ldr	r3, [r4, #20]
    1bb8:	9802      	ldr	r0, [sp, #8]
    1bba:	435d      	muls	r5, r3
    1bbc:	0feb      	lsrs	r3, r5, #31
    1bbe:	195d      	adds	r5, r3, r5
    1bc0:	9b01      	ldr	r3, [sp, #4]
    1bc2:	106d      	asrs	r5, r5, #1
    1bc4:	3301      	adds	r3, #1
    1bc6:	181b      	adds	r3, r3, r0
    1bc8:	42ab      	cmp	r3, r5
    1bca:	d900      	bls.n	1bce <__ssputs_r+0x3e>
    1bcc:	001d      	movs	r5, r3
    1bce:	0553      	lsls	r3, r2, #21
    1bd0:	d532      	bpl.n	1c38 <__ssputs_r+0xa8>
    1bd2:	0029      	movs	r1, r5
    1bd4:	0038      	movs	r0, r7
    1bd6:	f7ff ff7d 	bl	1ad4 <_malloc_r>
    1bda:	1e06      	subs	r6, r0, #0
    1bdc:	d109      	bne.n	1bf2 <__ssputs_r+0x62>
    1bde:	230c      	movs	r3, #12
    1be0:	603b      	str	r3, [r7, #0]
    1be2:	2340      	movs	r3, #64	; 0x40
    1be4:	2001      	movs	r0, #1
    1be6:	89a2      	ldrh	r2, [r4, #12]
    1be8:	4240      	negs	r0, r0
    1bea:	4313      	orrs	r3, r2
    1bec:	81a3      	strh	r3, [r4, #12]
    1bee:	b005      	add	sp, #20
    1bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bf2:	9a02      	ldr	r2, [sp, #8]
    1bf4:	6921      	ldr	r1, [r4, #16]
    1bf6:	f000 fad6 	bl	21a6 <memcpy>
    1bfa:	89a3      	ldrh	r3, [r4, #12]
    1bfc:	4a14      	ldr	r2, [pc, #80]	; (1c50 <__ssputs_r+0xc0>)
    1bfe:	401a      	ands	r2, r3
    1c00:	2380      	movs	r3, #128	; 0x80
    1c02:	4313      	orrs	r3, r2
    1c04:	81a3      	strh	r3, [r4, #12]
    1c06:	9b02      	ldr	r3, [sp, #8]
    1c08:	6126      	str	r6, [r4, #16]
    1c0a:	18f6      	adds	r6, r6, r3
    1c0c:	6026      	str	r6, [r4, #0]
    1c0e:	6165      	str	r5, [r4, #20]
    1c10:	9e01      	ldr	r6, [sp, #4]
    1c12:	1aed      	subs	r5, r5, r3
    1c14:	60a5      	str	r5, [r4, #8]
    1c16:	9b01      	ldr	r3, [sp, #4]
    1c18:	42b3      	cmp	r3, r6
    1c1a:	d200      	bcs.n	1c1e <__ssputs_r+0x8e>
    1c1c:	001e      	movs	r6, r3
    1c1e:	0032      	movs	r2, r6
    1c20:	9903      	ldr	r1, [sp, #12]
    1c22:	6820      	ldr	r0, [r4, #0]
    1c24:	f000 fac8 	bl	21b8 <memmove>
    1c28:	68a3      	ldr	r3, [r4, #8]
    1c2a:	2000      	movs	r0, #0
    1c2c:	1b9b      	subs	r3, r3, r6
    1c2e:	60a3      	str	r3, [r4, #8]
    1c30:	6823      	ldr	r3, [r4, #0]
    1c32:	199e      	adds	r6, r3, r6
    1c34:	6026      	str	r6, [r4, #0]
    1c36:	e7da      	b.n	1bee <__ssputs_r+0x5e>
    1c38:	002a      	movs	r2, r5
    1c3a:	0038      	movs	r0, r7
    1c3c:	f000 fb1a 	bl	2274 <_realloc_r>
    1c40:	1e06      	subs	r6, r0, #0
    1c42:	d1e0      	bne.n	1c06 <__ssputs_r+0x76>
    1c44:	6921      	ldr	r1, [r4, #16]
    1c46:	0038      	movs	r0, r7
    1c48:	f000 faca 	bl	21e0 <_free_r>
    1c4c:	e7c7      	b.n	1bde <__ssputs_r+0x4e>
    1c4e:	46c0      	nop			; (mov r8, r8)
    1c50:	fffffb7f 	.word	0xfffffb7f

00001c54 <_svfiprintf_r>:
    1c54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c56:	b09f      	sub	sp, #124	; 0x7c
    1c58:	9002      	str	r0, [sp, #8]
    1c5a:	9305      	str	r3, [sp, #20]
    1c5c:	898b      	ldrh	r3, [r1, #12]
    1c5e:	000f      	movs	r7, r1
    1c60:	0016      	movs	r6, r2
    1c62:	061b      	lsls	r3, r3, #24
    1c64:	d511      	bpl.n	1c8a <_svfiprintf_r+0x36>
    1c66:	690b      	ldr	r3, [r1, #16]
    1c68:	2b00      	cmp	r3, #0
    1c6a:	d10e      	bne.n	1c8a <_svfiprintf_r+0x36>
    1c6c:	2140      	movs	r1, #64	; 0x40
    1c6e:	f7ff ff31 	bl	1ad4 <_malloc_r>
    1c72:	6038      	str	r0, [r7, #0]
    1c74:	6138      	str	r0, [r7, #16]
    1c76:	2800      	cmp	r0, #0
    1c78:	d105      	bne.n	1c86 <_svfiprintf_r+0x32>
    1c7a:	230c      	movs	r3, #12
    1c7c:	9a02      	ldr	r2, [sp, #8]
    1c7e:	3801      	subs	r0, #1
    1c80:	6013      	str	r3, [r2, #0]
    1c82:	b01f      	add	sp, #124	; 0x7c
    1c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c86:	2340      	movs	r3, #64	; 0x40
    1c88:	617b      	str	r3, [r7, #20]
    1c8a:	2300      	movs	r3, #0
    1c8c:	ad06      	add	r5, sp, #24
    1c8e:	616b      	str	r3, [r5, #20]
    1c90:	3320      	adds	r3, #32
    1c92:	766b      	strb	r3, [r5, #25]
    1c94:	3310      	adds	r3, #16
    1c96:	76ab      	strb	r3, [r5, #26]
    1c98:	0034      	movs	r4, r6
    1c9a:	7823      	ldrb	r3, [r4, #0]
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	d147      	bne.n	1d30 <_svfiprintf_r+0xdc>
    1ca0:	1ba3      	subs	r3, r4, r6
    1ca2:	9304      	str	r3, [sp, #16]
    1ca4:	d00d      	beq.n	1cc2 <_svfiprintf_r+0x6e>
    1ca6:	1ba3      	subs	r3, r4, r6
    1ca8:	0032      	movs	r2, r6
    1caa:	0039      	movs	r1, r7
    1cac:	9802      	ldr	r0, [sp, #8]
    1cae:	f7ff ff6f 	bl	1b90 <__ssputs_r>
    1cb2:	1c43      	adds	r3, r0, #1
    1cb4:	d100      	bne.n	1cb8 <_svfiprintf_r+0x64>
    1cb6:	e0b5      	b.n	1e24 <_svfiprintf_r+0x1d0>
    1cb8:	696a      	ldr	r2, [r5, #20]
    1cba:	9b04      	ldr	r3, [sp, #16]
    1cbc:	4694      	mov	ip, r2
    1cbe:	4463      	add	r3, ip
    1cc0:	616b      	str	r3, [r5, #20]
    1cc2:	7823      	ldrb	r3, [r4, #0]
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d100      	bne.n	1cca <_svfiprintf_r+0x76>
    1cc8:	e0ac      	b.n	1e24 <_svfiprintf_r+0x1d0>
    1cca:	2201      	movs	r2, #1
    1ccc:	2300      	movs	r3, #0
    1cce:	4252      	negs	r2, r2
    1cd0:	606a      	str	r2, [r5, #4]
    1cd2:	a902      	add	r1, sp, #8
    1cd4:	3254      	adds	r2, #84	; 0x54
    1cd6:	1852      	adds	r2, r2, r1
    1cd8:	3401      	adds	r4, #1
    1cda:	602b      	str	r3, [r5, #0]
    1cdc:	60eb      	str	r3, [r5, #12]
    1cde:	60ab      	str	r3, [r5, #8]
    1ce0:	7013      	strb	r3, [r2, #0]
    1ce2:	65ab      	str	r3, [r5, #88]	; 0x58
    1ce4:	4e58      	ldr	r6, [pc, #352]	; (1e48 <_svfiprintf_r+0x1f4>)
    1ce6:	2205      	movs	r2, #5
    1ce8:	7821      	ldrb	r1, [r4, #0]
    1cea:	0030      	movs	r0, r6
    1cec:	f000 fa50 	bl	2190 <memchr>
    1cf0:	1c62      	adds	r2, r4, #1
    1cf2:	2800      	cmp	r0, #0
    1cf4:	d120      	bne.n	1d38 <_svfiprintf_r+0xe4>
    1cf6:	6829      	ldr	r1, [r5, #0]
    1cf8:	06cb      	lsls	r3, r1, #27
    1cfa:	d504      	bpl.n	1d06 <_svfiprintf_r+0xb2>
    1cfc:	2353      	movs	r3, #83	; 0x53
    1cfe:	ae02      	add	r6, sp, #8
    1d00:	3020      	adds	r0, #32
    1d02:	199b      	adds	r3, r3, r6
    1d04:	7018      	strb	r0, [r3, #0]
    1d06:	070b      	lsls	r3, r1, #28
    1d08:	d504      	bpl.n	1d14 <_svfiprintf_r+0xc0>
    1d0a:	2353      	movs	r3, #83	; 0x53
    1d0c:	202b      	movs	r0, #43	; 0x2b
    1d0e:	ae02      	add	r6, sp, #8
    1d10:	199b      	adds	r3, r3, r6
    1d12:	7018      	strb	r0, [r3, #0]
    1d14:	7823      	ldrb	r3, [r4, #0]
    1d16:	2b2a      	cmp	r3, #42	; 0x2a
    1d18:	d016      	beq.n	1d48 <_svfiprintf_r+0xf4>
    1d1a:	2000      	movs	r0, #0
    1d1c:	210a      	movs	r1, #10
    1d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d20:	7822      	ldrb	r2, [r4, #0]
    1d22:	3a30      	subs	r2, #48	; 0x30
    1d24:	2a09      	cmp	r2, #9
    1d26:	d955      	bls.n	1dd4 <_svfiprintf_r+0x180>
    1d28:	2800      	cmp	r0, #0
    1d2a:	d015      	beq.n	1d58 <_svfiprintf_r+0x104>
    1d2c:	9309      	str	r3, [sp, #36]	; 0x24
    1d2e:	e013      	b.n	1d58 <_svfiprintf_r+0x104>
    1d30:	2b25      	cmp	r3, #37	; 0x25
    1d32:	d0b5      	beq.n	1ca0 <_svfiprintf_r+0x4c>
    1d34:	3401      	adds	r4, #1
    1d36:	e7b0      	b.n	1c9a <_svfiprintf_r+0x46>
    1d38:	2301      	movs	r3, #1
    1d3a:	1b80      	subs	r0, r0, r6
    1d3c:	4083      	lsls	r3, r0
    1d3e:	6829      	ldr	r1, [r5, #0]
    1d40:	0014      	movs	r4, r2
    1d42:	430b      	orrs	r3, r1
    1d44:	602b      	str	r3, [r5, #0]
    1d46:	e7cd      	b.n	1ce4 <_svfiprintf_r+0x90>
    1d48:	9b05      	ldr	r3, [sp, #20]
    1d4a:	1d18      	adds	r0, r3, #4
    1d4c:	681b      	ldr	r3, [r3, #0]
    1d4e:	9005      	str	r0, [sp, #20]
    1d50:	2b00      	cmp	r3, #0
    1d52:	db39      	blt.n	1dc8 <_svfiprintf_r+0x174>
    1d54:	9309      	str	r3, [sp, #36]	; 0x24
    1d56:	0014      	movs	r4, r2
    1d58:	7823      	ldrb	r3, [r4, #0]
    1d5a:	2b2e      	cmp	r3, #46	; 0x2e
    1d5c:	d10b      	bne.n	1d76 <_svfiprintf_r+0x122>
    1d5e:	7863      	ldrb	r3, [r4, #1]
    1d60:	1c62      	adds	r2, r4, #1
    1d62:	2b2a      	cmp	r3, #42	; 0x2a
    1d64:	d13e      	bne.n	1de4 <_svfiprintf_r+0x190>
    1d66:	9b05      	ldr	r3, [sp, #20]
    1d68:	3402      	adds	r4, #2
    1d6a:	1d1a      	adds	r2, r3, #4
    1d6c:	681b      	ldr	r3, [r3, #0]
    1d6e:	9205      	str	r2, [sp, #20]
    1d70:	2b00      	cmp	r3, #0
    1d72:	db34      	blt.n	1dde <_svfiprintf_r+0x18a>
    1d74:	9307      	str	r3, [sp, #28]
    1d76:	4e35      	ldr	r6, [pc, #212]	; (1e4c <_svfiprintf_r+0x1f8>)
    1d78:	7821      	ldrb	r1, [r4, #0]
    1d7a:	2203      	movs	r2, #3
    1d7c:	0030      	movs	r0, r6
    1d7e:	f000 fa07 	bl	2190 <memchr>
    1d82:	2800      	cmp	r0, #0
    1d84:	d006      	beq.n	1d94 <_svfiprintf_r+0x140>
    1d86:	2340      	movs	r3, #64	; 0x40
    1d88:	1b80      	subs	r0, r0, r6
    1d8a:	4083      	lsls	r3, r0
    1d8c:	682a      	ldr	r2, [r5, #0]
    1d8e:	3401      	adds	r4, #1
    1d90:	4313      	orrs	r3, r2
    1d92:	602b      	str	r3, [r5, #0]
    1d94:	7821      	ldrb	r1, [r4, #0]
    1d96:	2206      	movs	r2, #6
    1d98:	482d      	ldr	r0, [pc, #180]	; (1e50 <_svfiprintf_r+0x1fc>)
    1d9a:	1c66      	adds	r6, r4, #1
    1d9c:	7629      	strb	r1, [r5, #24]
    1d9e:	f000 f9f7 	bl	2190 <memchr>
    1da2:	2800      	cmp	r0, #0
    1da4:	d046      	beq.n	1e34 <_svfiprintf_r+0x1e0>
    1da6:	4b2b      	ldr	r3, [pc, #172]	; (1e54 <_svfiprintf_r+0x200>)
    1da8:	2b00      	cmp	r3, #0
    1daa:	d12f      	bne.n	1e0c <_svfiprintf_r+0x1b8>
    1dac:	6829      	ldr	r1, [r5, #0]
    1dae:	9b05      	ldr	r3, [sp, #20]
    1db0:	2207      	movs	r2, #7
    1db2:	05c9      	lsls	r1, r1, #23
    1db4:	d528      	bpl.n	1e08 <_svfiprintf_r+0x1b4>
    1db6:	189b      	adds	r3, r3, r2
    1db8:	4393      	bics	r3, r2
    1dba:	3308      	adds	r3, #8
    1dbc:	9305      	str	r3, [sp, #20]
    1dbe:	696b      	ldr	r3, [r5, #20]
    1dc0:	9a03      	ldr	r2, [sp, #12]
    1dc2:	189b      	adds	r3, r3, r2
    1dc4:	616b      	str	r3, [r5, #20]
    1dc6:	e767      	b.n	1c98 <_svfiprintf_r+0x44>
    1dc8:	425b      	negs	r3, r3
    1dca:	60eb      	str	r3, [r5, #12]
    1dcc:	2302      	movs	r3, #2
    1dce:	430b      	orrs	r3, r1
    1dd0:	602b      	str	r3, [r5, #0]
    1dd2:	e7c0      	b.n	1d56 <_svfiprintf_r+0x102>
    1dd4:	434b      	muls	r3, r1
    1dd6:	3401      	adds	r4, #1
    1dd8:	189b      	adds	r3, r3, r2
    1dda:	2001      	movs	r0, #1
    1ddc:	e7a0      	b.n	1d20 <_svfiprintf_r+0xcc>
    1dde:	2301      	movs	r3, #1
    1de0:	425b      	negs	r3, r3
    1de2:	e7c7      	b.n	1d74 <_svfiprintf_r+0x120>
    1de4:	2300      	movs	r3, #0
    1de6:	0014      	movs	r4, r2
    1de8:	200a      	movs	r0, #10
    1dea:	001a      	movs	r2, r3
    1dec:	606b      	str	r3, [r5, #4]
    1dee:	7821      	ldrb	r1, [r4, #0]
    1df0:	3930      	subs	r1, #48	; 0x30
    1df2:	2909      	cmp	r1, #9
    1df4:	d903      	bls.n	1dfe <_svfiprintf_r+0x1aa>
    1df6:	2b00      	cmp	r3, #0
    1df8:	d0bd      	beq.n	1d76 <_svfiprintf_r+0x122>
    1dfa:	9207      	str	r2, [sp, #28]
    1dfc:	e7bb      	b.n	1d76 <_svfiprintf_r+0x122>
    1dfe:	4342      	muls	r2, r0
    1e00:	3401      	adds	r4, #1
    1e02:	1852      	adds	r2, r2, r1
    1e04:	2301      	movs	r3, #1
    1e06:	e7f2      	b.n	1dee <_svfiprintf_r+0x19a>
    1e08:	3307      	adds	r3, #7
    1e0a:	e7d5      	b.n	1db8 <_svfiprintf_r+0x164>
    1e0c:	ab05      	add	r3, sp, #20
    1e0e:	9300      	str	r3, [sp, #0]
    1e10:	003a      	movs	r2, r7
    1e12:	4b11      	ldr	r3, [pc, #68]	; (1e58 <_svfiprintf_r+0x204>)
    1e14:	0029      	movs	r1, r5
    1e16:	9802      	ldr	r0, [sp, #8]
    1e18:	e000      	b.n	1e1c <_svfiprintf_r+0x1c8>
    1e1a:	bf00      	nop
    1e1c:	9003      	str	r0, [sp, #12]
    1e1e:	9b03      	ldr	r3, [sp, #12]
    1e20:	3301      	adds	r3, #1
    1e22:	d1cc      	bne.n	1dbe <_svfiprintf_r+0x16a>
    1e24:	89bb      	ldrh	r3, [r7, #12]
    1e26:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1e28:	065b      	lsls	r3, r3, #25
    1e2a:	d400      	bmi.n	1e2e <_svfiprintf_r+0x1da>
    1e2c:	e729      	b.n	1c82 <_svfiprintf_r+0x2e>
    1e2e:	2001      	movs	r0, #1
    1e30:	4240      	negs	r0, r0
    1e32:	e726      	b.n	1c82 <_svfiprintf_r+0x2e>
    1e34:	ab05      	add	r3, sp, #20
    1e36:	9300      	str	r3, [sp, #0]
    1e38:	003a      	movs	r2, r7
    1e3a:	4b07      	ldr	r3, [pc, #28]	; (1e58 <_svfiprintf_r+0x204>)
    1e3c:	0029      	movs	r1, r5
    1e3e:	9802      	ldr	r0, [sp, #8]
    1e40:	f000 f87a 	bl	1f38 <_printf_i>
    1e44:	e7ea      	b.n	1e1c <_svfiprintf_r+0x1c8>
    1e46:	46c0      	nop			; (mov r8, r8)
    1e48:	00002634 	.word	0x00002634
    1e4c:	0000263a 	.word	0x0000263a
    1e50:	0000263e 	.word	0x0000263e
    1e54:	00000000 	.word	0x00000000
    1e58:	00001b91 	.word	0x00001b91

00001e5c <_printf_common>:
    1e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e5e:	0015      	movs	r5, r2
    1e60:	9301      	str	r3, [sp, #4]
    1e62:	688a      	ldr	r2, [r1, #8]
    1e64:	690b      	ldr	r3, [r1, #16]
    1e66:	9000      	str	r0, [sp, #0]
    1e68:	000c      	movs	r4, r1
    1e6a:	4293      	cmp	r3, r2
    1e6c:	da00      	bge.n	1e70 <_printf_common+0x14>
    1e6e:	0013      	movs	r3, r2
    1e70:	0022      	movs	r2, r4
    1e72:	602b      	str	r3, [r5, #0]
    1e74:	3243      	adds	r2, #67	; 0x43
    1e76:	7812      	ldrb	r2, [r2, #0]
    1e78:	2a00      	cmp	r2, #0
    1e7a:	d001      	beq.n	1e80 <_printf_common+0x24>
    1e7c:	3301      	adds	r3, #1
    1e7e:	602b      	str	r3, [r5, #0]
    1e80:	6823      	ldr	r3, [r4, #0]
    1e82:	069b      	lsls	r3, r3, #26
    1e84:	d502      	bpl.n	1e8c <_printf_common+0x30>
    1e86:	682b      	ldr	r3, [r5, #0]
    1e88:	3302      	adds	r3, #2
    1e8a:	602b      	str	r3, [r5, #0]
    1e8c:	2706      	movs	r7, #6
    1e8e:	6823      	ldr	r3, [r4, #0]
    1e90:	401f      	ands	r7, r3
    1e92:	d027      	beq.n	1ee4 <_printf_common+0x88>
    1e94:	0023      	movs	r3, r4
    1e96:	3343      	adds	r3, #67	; 0x43
    1e98:	781b      	ldrb	r3, [r3, #0]
    1e9a:	1e5a      	subs	r2, r3, #1
    1e9c:	4193      	sbcs	r3, r2
    1e9e:	6822      	ldr	r2, [r4, #0]
    1ea0:	0692      	lsls	r2, r2, #26
    1ea2:	d430      	bmi.n	1f06 <_printf_common+0xaa>
    1ea4:	0022      	movs	r2, r4
    1ea6:	9901      	ldr	r1, [sp, #4]
    1ea8:	3243      	adds	r2, #67	; 0x43
    1eaa:	9800      	ldr	r0, [sp, #0]
    1eac:	9e08      	ldr	r6, [sp, #32]
    1eae:	47b0      	blx	r6
    1eb0:	1c43      	adds	r3, r0, #1
    1eb2:	d025      	beq.n	1f00 <_printf_common+0xa4>
    1eb4:	2306      	movs	r3, #6
    1eb6:	6820      	ldr	r0, [r4, #0]
    1eb8:	682a      	ldr	r2, [r5, #0]
    1eba:	68e1      	ldr	r1, [r4, #12]
    1ebc:	4003      	ands	r3, r0
    1ebe:	2500      	movs	r5, #0
    1ec0:	2b04      	cmp	r3, #4
    1ec2:	d103      	bne.n	1ecc <_printf_common+0x70>
    1ec4:	1a8d      	subs	r5, r1, r2
    1ec6:	43eb      	mvns	r3, r5
    1ec8:	17db      	asrs	r3, r3, #31
    1eca:	401d      	ands	r5, r3
    1ecc:	68a3      	ldr	r3, [r4, #8]
    1ece:	6922      	ldr	r2, [r4, #16]
    1ed0:	4293      	cmp	r3, r2
    1ed2:	dd01      	ble.n	1ed8 <_printf_common+0x7c>
    1ed4:	1a9b      	subs	r3, r3, r2
    1ed6:	18ed      	adds	r5, r5, r3
    1ed8:	2700      	movs	r7, #0
    1eda:	42bd      	cmp	r5, r7
    1edc:	d120      	bne.n	1f20 <_printf_common+0xc4>
    1ede:	2000      	movs	r0, #0
    1ee0:	e010      	b.n	1f04 <_printf_common+0xa8>
    1ee2:	3701      	adds	r7, #1
    1ee4:	68e3      	ldr	r3, [r4, #12]
    1ee6:	682a      	ldr	r2, [r5, #0]
    1ee8:	1a9b      	subs	r3, r3, r2
    1eea:	429f      	cmp	r7, r3
    1eec:	dad2      	bge.n	1e94 <_printf_common+0x38>
    1eee:	0022      	movs	r2, r4
    1ef0:	2301      	movs	r3, #1
    1ef2:	3219      	adds	r2, #25
    1ef4:	9901      	ldr	r1, [sp, #4]
    1ef6:	9800      	ldr	r0, [sp, #0]
    1ef8:	9e08      	ldr	r6, [sp, #32]
    1efa:	47b0      	blx	r6
    1efc:	1c43      	adds	r3, r0, #1
    1efe:	d1f0      	bne.n	1ee2 <_printf_common+0x86>
    1f00:	2001      	movs	r0, #1
    1f02:	4240      	negs	r0, r0
    1f04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1f06:	2030      	movs	r0, #48	; 0x30
    1f08:	18e1      	adds	r1, r4, r3
    1f0a:	3143      	adds	r1, #67	; 0x43
    1f0c:	7008      	strb	r0, [r1, #0]
    1f0e:	0021      	movs	r1, r4
    1f10:	1c5a      	adds	r2, r3, #1
    1f12:	3145      	adds	r1, #69	; 0x45
    1f14:	7809      	ldrb	r1, [r1, #0]
    1f16:	18a2      	adds	r2, r4, r2
    1f18:	3243      	adds	r2, #67	; 0x43
    1f1a:	3302      	adds	r3, #2
    1f1c:	7011      	strb	r1, [r2, #0]
    1f1e:	e7c1      	b.n	1ea4 <_printf_common+0x48>
    1f20:	0022      	movs	r2, r4
    1f22:	2301      	movs	r3, #1
    1f24:	321a      	adds	r2, #26
    1f26:	9901      	ldr	r1, [sp, #4]
    1f28:	9800      	ldr	r0, [sp, #0]
    1f2a:	9e08      	ldr	r6, [sp, #32]
    1f2c:	47b0      	blx	r6
    1f2e:	1c43      	adds	r3, r0, #1
    1f30:	d0e6      	beq.n	1f00 <_printf_common+0xa4>
    1f32:	3701      	adds	r7, #1
    1f34:	e7d1      	b.n	1eda <_printf_common+0x7e>
	...

00001f38 <_printf_i>:
    1f38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f3a:	b08b      	sub	sp, #44	; 0x2c
    1f3c:	9206      	str	r2, [sp, #24]
    1f3e:	000a      	movs	r2, r1
    1f40:	3243      	adds	r2, #67	; 0x43
    1f42:	9307      	str	r3, [sp, #28]
    1f44:	9005      	str	r0, [sp, #20]
    1f46:	9204      	str	r2, [sp, #16]
    1f48:	7e0a      	ldrb	r2, [r1, #24]
    1f4a:	000c      	movs	r4, r1
    1f4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1f4e:	2a6e      	cmp	r2, #110	; 0x6e
    1f50:	d100      	bne.n	1f54 <_printf_i+0x1c>
    1f52:	e08f      	b.n	2074 <STACK_SIZE+0x74>
    1f54:	d817      	bhi.n	1f86 <_printf_i+0x4e>
    1f56:	2a63      	cmp	r2, #99	; 0x63
    1f58:	d02c      	beq.n	1fb4 <_printf_i+0x7c>
    1f5a:	d808      	bhi.n	1f6e <_printf_i+0x36>
    1f5c:	2a00      	cmp	r2, #0
    1f5e:	d100      	bne.n	1f62 <_printf_i+0x2a>
    1f60:	e099      	b.n	2096 <STACK_SIZE+0x96>
    1f62:	2a58      	cmp	r2, #88	; 0x58
    1f64:	d054      	beq.n	2010 <STACK_SIZE+0x10>
    1f66:	0026      	movs	r6, r4
    1f68:	3642      	adds	r6, #66	; 0x42
    1f6a:	7032      	strb	r2, [r6, #0]
    1f6c:	e029      	b.n	1fc2 <_printf_i+0x8a>
    1f6e:	2a64      	cmp	r2, #100	; 0x64
    1f70:	d001      	beq.n	1f76 <_printf_i+0x3e>
    1f72:	2a69      	cmp	r2, #105	; 0x69
    1f74:	d1f7      	bne.n	1f66 <_printf_i+0x2e>
    1f76:	6821      	ldr	r1, [r4, #0]
    1f78:	681a      	ldr	r2, [r3, #0]
    1f7a:	0608      	lsls	r0, r1, #24
    1f7c:	d523      	bpl.n	1fc6 <_printf_i+0x8e>
    1f7e:	1d11      	adds	r1, r2, #4
    1f80:	6019      	str	r1, [r3, #0]
    1f82:	6815      	ldr	r5, [r2, #0]
    1f84:	e025      	b.n	1fd2 <_printf_i+0x9a>
    1f86:	2a73      	cmp	r2, #115	; 0x73
    1f88:	d100      	bne.n	1f8c <_printf_i+0x54>
    1f8a:	e088      	b.n	209e <STACK_SIZE+0x9e>
    1f8c:	d808      	bhi.n	1fa0 <_printf_i+0x68>
    1f8e:	2a6f      	cmp	r2, #111	; 0x6f
    1f90:	d029      	beq.n	1fe6 <_printf_i+0xae>
    1f92:	2a70      	cmp	r2, #112	; 0x70
    1f94:	d1e7      	bne.n	1f66 <_printf_i+0x2e>
    1f96:	2220      	movs	r2, #32
    1f98:	6809      	ldr	r1, [r1, #0]
    1f9a:	430a      	orrs	r2, r1
    1f9c:	6022      	str	r2, [r4, #0]
    1f9e:	e003      	b.n	1fa8 <_printf_i+0x70>
    1fa0:	2a75      	cmp	r2, #117	; 0x75
    1fa2:	d020      	beq.n	1fe6 <_printf_i+0xae>
    1fa4:	2a78      	cmp	r2, #120	; 0x78
    1fa6:	d1de      	bne.n	1f66 <_printf_i+0x2e>
    1fa8:	0022      	movs	r2, r4
    1faa:	2178      	movs	r1, #120	; 0x78
    1fac:	3245      	adds	r2, #69	; 0x45
    1fae:	7011      	strb	r1, [r2, #0]
    1fb0:	4a6c      	ldr	r2, [pc, #432]	; (2164 <STACK_SIZE+0x164>)
    1fb2:	e030      	b.n	2016 <STACK_SIZE+0x16>
    1fb4:	000e      	movs	r6, r1
    1fb6:	681a      	ldr	r2, [r3, #0]
    1fb8:	3642      	adds	r6, #66	; 0x42
    1fba:	1d11      	adds	r1, r2, #4
    1fbc:	6019      	str	r1, [r3, #0]
    1fbe:	6813      	ldr	r3, [r2, #0]
    1fc0:	7033      	strb	r3, [r6, #0]
    1fc2:	2301      	movs	r3, #1
    1fc4:	e079      	b.n	20ba <STACK_SIZE+0xba>
    1fc6:	0649      	lsls	r1, r1, #25
    1fc8:	d5d9      	bpl.n	1f7e <_printf_i+0x46>
    1fca:	1d11      	adds	r1, r2, #4
    1fcc:	6019      	str	r1, [r3, #0]
    1fce:	2300      	movs	r3, #0
    1fd0:	5ed5      	ldrsh	r5, [r2, r3]
    1fd2:	2d00      	cmp	r5, #0
    1fd4:	da03      	bge.n	1fde <_printf_i+0xa6>
    1fd6:	232d      	movs	r3, #45	; 0x2d
    1fd8:	9a04      	ldr	r2, [sp, #16]
    1fda:	426d      	negs	r5, r5
    1fdc:	7013      	strb	r3, [r2, #0]
    1fde:	4b62      	ldr	r3, [pc, #392]	; (2168 <STACK_SIZE+0x168>)
    1fe0:	270a      	movs	r7, #10
    1fe2:	9303      	str	r3, [sp, #12]
    1fe4:	e02f      	b.n	2046 <STACK_SIZE+0x46>
    1fe6:	6820      	ldr	r0, [r4, #0]
    1fe8:	6819      	ldr	r1, [r3, #0]
    1fea:	0605      	lsls	r5, r0, #24
    1fec:	d503      	bpl.n	1ff6 <_printf_i+0xbe>
    1fee:	1d08      	adds	r0, r1, #4
    1ff0:	6018      	str	r0, [r3, #0]
    1ff2:	680d      	ldr	r5, [r1, #0]
    1ff4:	e005      	b.n	2002 <STACK_SIZE+0x2>
    1ff6:	0640      	lsls	r0, r0, #25
    1ff8:	d5f9      	bpl.n	1fee <_printf_i+0xb6>
    1ffa:	680d      	ldr	r5, [r1, #0]
    1ffc:	1d08      	adds	r0, r1, #4
    1ffe:	6018      	str	r0, [r3, #0]
    2000:	b2ad      	uxth	r5, r5
    2002:	4b59      	ldr	r3, [pc, #356]	; (2168 <STACK_SIZE+0x168>)
    2004:	2708      	movs	r7, #8
    2006:	9303      	str	r3, [sp, #12]
    2008:	2a6f      	cmp	r2, #111	; 0x6f
    200a:	d018      	beq.n	203e <STACK_SIZE+0x3e>
    200c:	270a      	movs	r7, #10
    200e:	e016      	b.n	203e <STACK_SIZE+0x3e>
    2010:	3145      	adds	r1, #69	; 0x45
    2012:	700a      	strb	r2, [r1, #0]
    2014:	4a54      	ldr	r2, [pc, #336]	; (2168 <STACK_SIZE+0x168>)
    2016:	9203      	str	r2, [sp, #12]
    2018:	681a      	ldr	r2, [r3, #0]
    201a:	6821      	ldr	r1, [r4, #0]
    201c:	1d10      	adds	r0, r2, #4
    201e:	6018      	str	r0, [r3, #0]
    2020:	6815      	ldr	r5, [r2, #0]
    2022:	0608      	lsls	r0, r1, #24
    2024:	d522      	bpl.n	206c <STACK_SIZE+0x6c>
    2026:	07cb      	lsls	r3, r1, #31
    2028:	d502      	bpl.n	2030 <STACK_SIZE+0x30>
    202a:	2320      	movs	r3, #32
    202c:	4319      	orrs	r1, r3
    202e:	6021      	str	r1, [r4, #0]
    2030:	2710      	movs	r7, #16
    2032:	2d00      	cmp	r5, #0
    2034:	d103      	bne.n	203e <STACK_SIZE+0x3e>
    2036:	2320      	movs	r3, #32
    2038:	6822      	ldr	r2, [r4, #0]
    203a:	439a      	bics	r2, r3
    203c:	6022      	str	r2, [r4, #0]
    203e:	0023      	movs	r3, r4
    2040:	2200      	movs	r2, #0
    2042:	3343      	adds	r3, #67	; 0x43
    2044:	701a      	strb	r2, [r3, #0]
    2046:	6863      	ldr	r3, [r4, #4]
    2048:	60a3      	str	r3, [r4, #8]
    204a:	2b00      	cmp	r3, #0
    204c:	db5c      	blt.n	2108 <STACK_SIZE+0x108>
    204e:	2204      	movs	r2, #4
    2050:	6821      	ldr	r1, [r4, #0]
    2052:	4391      	bics	r1, r2
    2054:	6021      	str	r1, [r4, #0]
    2056:	2d00      	cmp	r5, #0
    2058:	d158      	bne.n	210c <STACK_SIZE+0x10c>
    205a:	9e04      	ldr	r6, [sp, #16]
    205c:	2b00      	cmp	r3, #0
    205e:	d064      	beq.n	212a <STACK_SIZE+0x12a>
    2060:	0026      	movs	r6, r4
    2062:	9b03      	ldr	r3, [sp, #12]
    2064:	3642      	adds	r6, #66	; 0x42
    2066:	781b      	ldrb	r3, [r3, #0]
    2068:	7033      	strb	r3, [r6, #0]
    206a:	e05e      	b.n	212a <STACK_SIZE+0x12a>
    206c:	0648      	lsls	r0, r1, #25
    206e:	d5da      	bpl.n	2026 <STACK_SIZE+0x26>
    2070:	b2ad      	uxth	r5, r5
    2072:	e7d8      	b.n	2026 <STACK_SIZE+0x26>
    2074:	6809      	ldr	r1, [r1, #0]
    2076:	681a      	ldr	r2, [r3, #0]
    2078:	0608      	lsls	r0, r1, #24
    207a:	d505      	bpl.n	2088 <STACK_SIZE+0x88>
    207c:	1d11      	adds	r1, r2, #4
    207e:	6019      	str	r1, [r3, #0]
    2080:	6813      	ldr	r3, [r2, #0]
    2082:	6962      	ldr	r2, [r4, #20]
    2084:	601a      	str	r2, [r3, #0]
    2086:	e006      	b.n	2096 <STACK_SIZE+0x96>
    2088:	0649      	lsls	r1, r1, #25
    208a:	d5f7      	bpl.n	207c <STACK_SIZE+0x7c>
    208c:	1d11      	adds	r1, r2, #4
    208e:	6019      	str	r1, [r3, #0]
    2090:	6813      	ldr	r3, [r2, #0]
    2092:	8aa2      	ldrh	r2, [r4, #20]
    2094:	801a      	strh	r2, [r3, #0]
    2096:	2300      	movs	r3, #0
    2098:	9e04      	ldr	r6, [sp, #16]
    209a:	6123      	str	r3, [r4, #16]
    209c:	e054      	b.n	2148 <STACK_SIZE+0x148>
    209e:	681a      	ldr	r2, [r3, #0]
    20a0:	1d11      	adds	r1, r2, #4
    20a2:	6019      	str	r1, [r3, #0]
    20a4:	6816      	ldr	r6, [r2, #0]
    20a6:	2100      	movs	r1, #0
    20a8:	6862      	ldr	r2, [r4, #4]
    20aa:	0030      	movs	r0, r6
    20ac:	f000 f870 	bl	2190 <memchr>
    20b0:	2800      	cmp	r0, #0
    20b2:	d001      	beq.n	20b8 <STACK_SIZE+0xb8>
    20b4:	1b80      	subs	r0, r0, r6
    20b6:	6060      	str	r0, [r4, #4]
    20b8:	6863      	ldr	r3, [r4, #4]
    20ba:	6123      	str	r3, [r4, #16]
    20bc:	2300      	movs	r3, #0
    20be:	9a04      	ldr	r2, [sp, #16]
    20c0:	7013      	strb	r3, [r2, #0]
    20c2:	e041      	b.n	2148 <STACK_SIZE+0x148>
    20c4:	6923      	ldr	r3, [r4, #16]
    20c6:	0032      	movs	r2, r6
    20c8:	9906      	ldr	r1, [sp, #24]
    20ca:	9805      	ldr	r0, [sp, #20]
    20cc:	9d07      	ldr	r5, [sp, #28]
    20ce:	47a8      	blx	r5
    20d0:	1c43      	adds	r3, r0, #1
    20d2:	d043      	beq.n	215c <STACK_SIZE+0x15c>
    20d4:	6823      	ldr	r3, [r4, #0]
    20d6:	2500      	movs	r5, #0
    20d8:	079b      	lsls	r3, r3, #30
    20da:	d40f      	bmi.n	20fc <STACK_SIZE+0xfc>
    20dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    20de:	68e0      	ldr	r0, [r4, #12]
    20e0:	4298      	cmp	r0, r3
    20e2:	da3d      	bge.n	2160 <STACK_SIZE+0x160>
    20e4:	0018      	movs	r0, r3
    20e6:	e03b      	b.n	2160 <STACK_SIZE+0x160>
    20e8:	0022      	movs	r2, r4
    20ea:	2301      	movs	r3, #1
    20ec:	3219      	adds	r2, #25
    20ee:	9906      	ldr	r1, [sp, #24]
    20f0:	9805      	ldr	r0, [sp, #20]
    20f2:	9e07      	ldr	r6, [sp, #28]
    20f4:	47b0      	blx	r6
    20f6:	1c43      	adds	r3, r0, #1
    20f8:	d030      	beq.n	215c <STACK_SIZE+0x15c>
    20fa:	3501      	adds	r5, #1
    20fc:	68e3      	ldr	r3, [r4, #12]
    20fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2100:	1a9b      	subs	r3, r3, r2
    2102:	429d      	cmp	r5, r3
    2104:	dbf0      	blt.n	20e8 <STACK_SIZE+0xe8>
    2106:	e7e9      	b.n	20dc <STACK_SIZE+0xdc>
    2108:	2d00      	cmp	r5, #0
    210a:	d0a9      	beq.n	2060 <STACK_SIZE+0x60>
    210c:	9e04      	ldr	r6, [sp, #16]
    210e:	0028      	movs	r0, r5
    2110:	0039      	movs	r1, r7
    2112:	f7ff fb61 	bl	17d8 <__aeabi_uidivmod>
    2116:	9b03      	ldr	r3, [sp, #12]
    2118:	3e01      	subs	r6, #1
    211a:	5c5b      	ldrb	r3, [r3, r1]
    211c:	0028      	movs	r0, r5
    211e:	7033      	strb	r3, [r6, #0]
    2120:	0039      	movs	r1, r7
    2122:	f7ff fad3 	bl	16cc <__udivsi3>
    2126:	1e05      	subs	r5, r0, #0
    2128:	d1f1      	bne.n	210e <STACK_SIZE+0x10e>
    212a:	2f08      	cmp	r7, #8
    212c:	d109      	bne.n	2142 <STACK_SIZE+0x142>
    212e:	6823      	ldr	r3, [r4, #0]
    2130:	07db      	lsls	r3, r3, #31
    2132:	d506      	bpl.n	2142 <STACK_SIZE+0x142>
    2134:	6863      	ldr	r3, [r4, #4]
    2136:	6922      	ldr	r2, [r4, #16]
    2138:	4293      	cmp	r3, r2
    213a:	dc02      	bgt.n	2142 <STACK_SIZE+0x142>
    213c:	2330      	movs	r3, #48	; 0x30
    213e:	3e01      	subs	r6, #1
    2140:	7033      	strb	r3, [r6, #0]
    2142:	9b04      	ldr	r3, [sp, #16]
    2144:	1b9b      	subs	r3, r3, r6
    2146:	6123      	str	r3, [r4, #16]
    2148:	9b07      	ldr	r3, [sp, #28]
    214a:	aa09      	add	r2, sp, #36	; 0x24
    214c:	9300      	str	r3, [sp, #0]
    214e:	0021      	movs	r1, r4
    2150:	9b06      	ldr	r3, [sp, #24]
    2152:	9805      	ldr	r0, [sp, #20]
    2154:	f7ff fe82 	bl	1e5c <_printf_common>
    2158:	1c43      	adds	r3, r0, #1
    215a:	d1b3      	bne.n	20c4 <STACK_SIZE+0xc4>
    215c:	2001      	movs	r0, #1
    215e:	4240      	negs	r0, r0
    2160:	b00b      	add	sp, #44	; 0x2c
    2162:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2164:	00002656 	.word	0x00002656
    2168:	00002645 	.word	0x00002645

0000216c <_sbrk_r>:
    216c:	2300      	movs	r3, #0
    216e:	b570      	push	{r4, r5, r6, lr}
    2170:	4c06      	ldr	r4, [pc, #24]	; (218c <_sbrk_r+0x20>)
    2172:	0005      	movs	r5, r0
    2174:	0008      	movs	r0, r1
    2176:	6023      	str	r3, [r4, #0]
    2178:	f7fe fd70 	bl	c5c <_sbrk>
    217c:	1c43      	adds	r3, r0, #1
    217e:	d103      	bne.n	2188 <_sbrk_r+0x1c>
    2180:	6823      	ldr	r3, [r4, #0]
    2182:	2b00      	cmp	r3, #0
    2184:	d000      	beq.n	2188 <_sbrk_r+0x1c>
    2186:	602b      	str	r3, [r5, #0]
    2188:	bd70      	pop	{r4, r5, r6, pc}
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	200001bc 	.word	0x200001bc

00002190 <memchr>:
    2190:	b2c9      	uxtb	r1, r1
    2192:	1882      	adds	r2, r0, r2
    2194:	4290      	cmp	r0, r2
    2196:	d101      	bne.n	219c <memchr+0xc>
    2198:	2000      	movs	r0, #0
    219a:	4770      	bx	lr
    219c:	7803      	ldrb	r3, [r0, #0]
    219e:	428b      	cmp	r3, r1
    21a0:	d0fb      	beq.n	219a <memchr+0xa>
    21a2:	3001      	adds	r0, #1
    21a4:	e7f6      	b.n	2194 <memchr+0x4>

000021a6 <memcpy>:
    21a6:	2300      	movs	r3, #0
    21a8:	b510      	push	{r4, lr}
    21aa:	429a      	cmp	r2, r3
    21ac:	d100      	bne.n	21b0 <memcpy+0xa>
    21ae:	bd10      	pop	{r4, pc}
    21b0:	5ccc      	ldrb	r4, [r1, r3]
    21b2:	54c4      	strb	r4, [r0, r3]
    21b4:	3301      	adds	r3, #1
    21b6:	e7f8      	b.n	21aa <memcpy+0x4>

000021b8 <memmove>:
    21b8:	b510      	push	{r4, lr}
    21ba:	4288      	cmp	r0, r1
    21bc:	d902      	bls.n	21c4 <memmove+0xc>
    21be:	188b      	adds	r3, r1, r2
    21c0:	4298      	cmp	r0, r3
    21c2:	d308      	bcc.n	21d6 <memmove+0x1e>
    21c4:	2300      	movs	r3, #0
    21c6:	429a      	cmp	r2, r3
    21c8:	d007      	beq.n	21da <memmove+0x22>
    21ca:	5ccc      	ldrb	r4, [r1, r3]
    21cc:	54c4      	strb	r4, [r0, r3]
    21ce:	3301      	adds	r3, #1
    21d0:	e7f9      	b.n	21c6 <memmove+0xe>
    21d2:	5c8b      	ldrb	r3, [r1, r2]
    21d4:	5483      	strb	r3, [r0, r2]
    21d6:	3a01      	subs	r2, #1
    21d8:	d2fb      	bcs.n	21d2 <memmove+0x1a>
    21da:	bd10      	pop	{r4, pc}

000021dc <__malloc_lock>:
    21dc:	4770      	bx	lr

000021de <__malloc_unlock>:
    21de:	4770      	bx	lr

000021e0 <_free_r>:
    21e0:	b570      	push	{r4, r5, r6, lr}
    21e2:	0005      	movs	r5, r0
    21e4:	2900      	cmp	r1, #0
    21e6:	d010      	beq.n	220a <_free_r+0x2a>
    21e8:	1f0c      	subs	r4, r1, #4
    21ea:	6823      	ldr	r3, [r4, #0]
    21ec:	2b00      	cmp	r3, #0
    21ee:	da00      	bge.n	21f2 <_free_r+0x12>
    21f0:	18e4      	adds	r4, r4, r3
    21f2:	0028      	movs	r0, r5
    21f4:	f7ff fff2 	bl	21dc <__malloc_lock>
    21f8:	4a1d      	ldr	r2, [pc, #116]	; (2270 <_free_r+0x90>)
    21fa:	6813      	ldr	r3, [r2, #0]
    21fc:	2b00      	cmp	r3, #0
    21fe:	d105      	bne.n	220c <_free_r+0x2c>
    2200:	6063      	str	r3, [r4, #4]
    2202:	6014      	str	r4, [r2, #0]
    2204:	0028      	movs	r0, r5
    2206:	f7ff ffea 	bl	21de <__malloc_unlock>
    220a:	bd70      	pop	{r4, r5, r6, pc}
    220c:	42a3      	cmp	r3, r4
    220e:	d909      	bls.n	2224 <_free_r+0x44>
    2210:	6821      	ldr	r1, [r4, #0]
    2212:	1860      	adds	r0, r4, r1
    2214:	4283      	cmp	r3, r0
    2216:	d1f3      	bne.n	2200 <_free_r+0x20>
    2218:	6818      	ldr	r0, [r3, #0]
    221a:	685b      	ldr	r3, [r3, #4]
    221c:	1841      	adds	r1, r0, r1
    221e:	6021      	str	r1, [r4, #0]
    2220:	e7ee      	b.n	2200 <_free_r+0x20>
    2222:	0013      	movs	r3, r2
    2224:	685a      	ldr	r2, [r3, #4]
    2226:	2a00      	cmp	r2, #0
    2228:	d001      	beq.n	222e <_free_r+0x4e>
    222a:	42a2      	cmp	r2, r4
    222c:	d9f9      	bls.n	2222 <_free_r+0x42>
    222e:	6819      	ldr	r1, [r3, #0]
    2230:	1858      	adds	r0, r3, r1
    2232:	42a0      	cmp	r0, r4
    2234:	d10b      	bne.n	224e <_free_r+0x6e>
    2236:	6820      	ldr	r0, [r4, #0]
    2238:	1809      	adds	r1, r1, r0
    223a:	1858      	adds	r0, r3, r1
    223c:	6019      	str	r1, [r3, #0]
    223e:	4282      	cmp	r2, r0
    2240:	d1e0      	bne.n	2204 <_free_r+0x24>
    2242:	6810      	ldr	r0, [r2, #0]
    2244:	6852      	ldr	r2, [r2, #4]
    2246:	1841      	adds	r1, r0, r1
    2248:	6019      	str	r1, [r3, #0]
    224a:	605a      	str	r2, [r3, #4]
    224c:	e7da      	b.n	2204 <_free_r+0x24>
    224e:	42a0      	cmp	r0, r4
    2250:	d902      	bls.n	2258 <_free_r+0x78>
    2252:	230c      	movs	r3, #12
    2254:	602b      	str	r3, [r5, #0]
    2256:	e7d5      	b.n	2204 <_free_r+0x24>
    2258:	6821      	ldr	r1, [r4, #0]
    225a:	1860      	adds	r0, r4, r1
    225c:	4282      	cmp	r2, r0
    225e:	d103      	bne.n	2268 <_free_r+0x88>
    2260:	6810      	ldr	r0, [r2, #0]
    2262:	6852      	ldr	r2, [r2, #4]
    2264:	1841      	adds	r1, r0, r1
    2266:	6021      	str	r1, [r4, #0]
    2268:	6062      	str	r2, [r4, #4]
    226a:	605c      	str	r4, [r3, #4]
    226c:	e7ca      	b.n	2204 <_free_r+0x24>
    226e:	46c0      	nop			; (mov r8, r8)
    2270:	20000148 	.word	0x20000148

00002274 <_realloc_r>:
    2274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2276:	0007      	movs	r7, r0
    2278:	000d      	movs	r5, r1
    227a:	0016      	movs	r6, r2
    227c:	2900      	cmp	r1, #0
    227e:	d105      	bne.n	228c <_realloc_r+0x18>
    2280:	0011      	movs	r1, r2
    2282:	f7ff fc27 	bl	1ad4 <_malloc_r>
    2286:	0004      	movs	r4, r0
    2288:	0020      	movs	r0, r4
    228a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    228c:	2a00      	cmp	r2, #0
    228e:	d103      	bne.n	2298 <_realloc_r+0x24>
    2290:	f7ff ffa6 	bl	21e0 <_free_r>
    2294:	0034      	movs	r4, r6
    2296:	e7f7      	b.n	2288 <_realloc_r+0x14>
    2298:	f000 f812 	bl	22c0 <_malloc_usable_size_r>
    229c:	002c      	movs	r4, r5
    229e:	4286      	cmp	r6, r0
    22a0:	d9f2      	bls.n	2288 <_realloc_r+0x14>
    22a2:	0031      	movs	r1, r6
    22a4:	0038      	movs	r0, r7
    22a6:	f7ff fc15 	bl	1ad4 <_malloc_r>
    22aa:	1e04      	subs	r4, r0, #0
    22ac:	d0ec      	beq.n	2288 <_realloc_r+0x14>
    22ae:	0029      	movs	r1, r5
    22b0:	0032      	movs	r2, r6
    22b2:	f7ff ff78 	bl	21a6 <memcpy>
    22b6:	0029      	movs	r1, r5
    22b8:	0038      	movs	r0, r7
    22ba:	f7ff ff91 	bl	21e0 <_free_r>
    22be:	e7e3      	b.n	2288 <_realloc_r+0x14>

000022c0 <_malloc_usable_size_r>:
    22c0:	1f0b      	subs	r3, r1, #4
    22c2:	681b      	ldr	r3, [r3, #0]
    22c4:	1f18      	subs	r0, r3, #4
    22c6:	2b00      	cmp	r3, #0
    22c8:	da01      	bge.n	22ce <_malloc_usable_size_r+0xe>
    22ca:	580b      	ldr	r3, [r1, r0]
    22cc:	18c0      	adds	r0, r0, r3
    22ce:	4770      	bx	lr
    22d0:	682f2e2e 	.word	0x682f2e2e
    22d4:	732f6c61 	.word	0x732f6c61
    22d8:	682f6372 	.word	0x682f6372
    22dc:	635f6c61 	.word	0x635f6c61
    22e0:	6e656c61 	.word	0x6e656c61
    22e4:	2e726164 	.word	0x2e726164
    22e8:	00000063 	.word	0x00000063
    22ec:	682f2e2e 	.word	0x682f2e2e
    22f0:	732f6c61 	.word	0x732f6c61
    22f4:	682f6372 	.word	0x682f6372
    22f8:	755f6c61 	.word	0x755f6c61
    22fc:	74726173 	.word	0x74726173
    2300:	7973615f 	.word	0x7973615f
    2304:	632e636e 	.word	0x632e636e
    2308:	00000000 	.word	0x00000000
    230c:	682f2e2e 	.word	0x682f2e2e
    2310:	752f6c61 	.word	0x752f6c61
    2314:	736c6974 	.word	0x736c6974
    2318:	6372732f 	.word	0x6372732f
    231c:	6974752f 	.word	0x6974752f
    2320:	725f736c 	.word	0x725f736c
    2324:	62676e69 	.word	0x62676e69
    2328:	65666675 	.word	0x65666675
    232c:	00632e72 	.word	0x00632e72

00002330 <_map>:
    2330:	0000000f 0000000f 682f2e2e 652f6c70     ........../hpl/e
    2340:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    2350:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    2360:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
    2370:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    2380:	0000632e 656d6974 25203d20 736d2064     .c..time = %d ms
    2390:	00000000 3d3d0a0d 3d3d3d3d 3d3d3d3d     ......==========
    23a0:	3d3d3d3d 0a0d3d3d 72617473 676e6974     ======..starting
    23b0:	5f756d20 745f6d76 0d747365 0000000a      mu_vm_test.....
    23c0:	636e7973 72657320 206c6169 74697277     sync serial writ
    23d0:	000a0d65 6e797361 65732063 6c616972     e...async serial
    23e0:	69727720 0a0d6574 00000000 656d6974      write......time
    23f0:	66656220 2065726f 00207369 00000a0d      before is .....
    2400:	706f6f6c 20676e69 20726f66 20352e32     looping for 2.5 
    2410:	6f636573 2e73646e 00002e2e 656e6f64     seconds.....done
    2420:	7420202e 20656d69 65746661 73692072     .  time after is
    2430:	00000020 74696177 20676e69 20352e32      ...waiting 2.5 
    2440:	6f636573 2073646e 20726f66 20435452     seconds for RTC 
    2450:	6374616d 2e2e2e68 00000000 656e6f64     match.......done
    2460:	7420202e 20656d69 6e207369 0020776f     .  time is now .
    2470:	73616c66 676e6968 44454c20 726f6620     flashing LED for
    2480:	352e3220 63657320 73646e6f 002e2e2e      2.5 seconds....
    2490:	74696177 20676e69 20726f66 74747562     waiting for butt
    24a0:	70206e6f 73736572 79732820 7268636e     on press (synchr
    24b0:	756f6e6f 2e2e2973 0000002e 65636572     onous)......rece
    24c0:	64657669 74756220 206e6f74 73657270     ived button pres
    24d0:	0a0d2e73 00000000 74696177 20676e69     s.......waiting 
    24e0:	20726f66 74747562 70206e6f 73736572     for button press
    24f0:	73612820 68636e79 6f6e6f72 2e297375      (asynchronous).
    2500:	00002e2e 74696177 20676e69 20726f66     ....waiting for 
    2510:	6279656b 6472616f 706e6920 28207475     keyboard input (
    2520:	636e7973 6e6f7268 2973756f 002e2e2e     synchronous)....
    2530:	65636572 64657669 63252720 000a0d27     received '%c'...
    2540:	74696177 20676e69 20726f66 6279656b     waiting for keyb
    2550:	6472616f 706e6920 28207475 6e797361     oard input (asyn
    2560:	6f726863 73756f6e 2e2e2e29 00000000     chronous).......
    2570:	65656c73 676e6970 726f6620 352e3220     sleeping for 2.5
    2580:	63657320 73646e6f 002e2e2e 65656c73      seconds....slee
    2590:	676e6970 746e7520 62206c69 6f747475     ping until butto
    25a0:	7270206e 2e737365 00002e2e 20646e65     n press.....end 
    25b0:	6d20666f 6d765f75 7365745f 3d0a0d74     of mu_vm_test..=
    25c0:	3d3d3d3d 3d3d3d3d 3d3d3d3d 0d3d3d3d     ===============.
    25d0:	0000000a                                ....

000025d4 <__sf_fake_stderr>:
	...

000025f4 <__sf_fake_stdin>:
	...

00002614 <__sf_fake_stdout>:
	...
    2634:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2644:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2654:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2664:	00006665                                ef..

00002668 <_init>:
    2668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    266a:	46c0      	nop			; (mov r8, r8)
    266c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    266e:	bc08      	pop	{r3}
    2670:	469e      	mov	lr, r3
    2672:	4770      	bx	lr

00002674 <__init_array_start>:
    2674:	000000dd 	.word	0x000000dd

00002678 <_fini>:
    2678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    267a:	46c0      	nop			; (mov r8, r8)
    267c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    267e:	bc08      	pop	{r3}
    2680:	469e      	mov	lr, r3
    2682:	4770      	bx	lr

00002684 <__fini_array_start>:
    2684:	000000b5 	.word	0x000000b5
