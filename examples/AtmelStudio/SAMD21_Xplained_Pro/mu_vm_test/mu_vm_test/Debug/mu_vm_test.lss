
mu_vm_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023f8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  000023f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000120  20000064  0000245c  00020064  2**2
                  ALLOC
  3 .stack        00002004  20000184  0000257c  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002aa63  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034ca  00000000  00000000  0004ab48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000cdcc  00000000  00000000  0004e012  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b98  00000000  00000000  0005adde  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001148  00000000  00000000  0005b976  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a8d6  00000000  00000000  0005cabe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fc84  00000000  00000000  00077394  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a945  00000000  00000000  00087018  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000217c  00000000  00000000  00111960  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 21 00 20 35 04 00 00 31 04 00 00 31 04 00 00     .!. 5...1...1...
	...
      2c:	31 04 00 00 00 00 00 00 00 00 00 00 31 04 00 00     1...........1...
      3c:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
      4c:	71 0f 00 00 a1 0c 00 00 31 04 00 00 31 04 00 00     q.......1...1...
      5c:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
      6c:	31 04 00 00 d9 10 00 00 31 04 00 00 31 04 00 00     1.......1...1...
      7c:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
      8c:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
      9c:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
      ac:	31 04 00 00 00 00 00 00                             1.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	000023f8 	.word	0x000023f8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	000023f8 	.word	0x000023f8
     10c:	000023f8 	.word	0x000023f8
     110:	00000000 	.word	0x00000000

00000114 <button_cb_trampoline>:
void mu_vm_sleep(void) { go_to_sleep(); }

// =============================================================================
// private (local) code

static void button_cb_trampoline(void) {
     114:	b510      	push	{r4, lr}
  if (s_vm_state.button_cb) {
     116:	4b04      	ldr	r3, [pc, #16]	; (128 <button_cb_trampoline+0x14>)
     118:	681b      	ldr	r3, [r3, #0]
     11a:	2b00      	cmp	r3, #0
     11c:	d002      	beq.n	124 <button_cb_trampoline+0x10>
    s_vm_state.button_cb(s_vm_state.button_cb_arg);
     11e:	4a02      	ldr	r2, [pc, #8]	; (128 <button_cb_trampoline+0x14>)
     120:	6850      	ldr	r0, [r2, #4]
     122:	4798      	blx	r3
  }
}
     124:	bd10      	pop	{r4, pc}
     126:	46c0      	nop			; (mov r8, r8)
     128:	20000080 	.word	0x20000080

0000012c <tx_byte_sent>:
 // 	if (descr->usart_cb.tx_done) {
 // 		descr->usart_cb.tx_done(descr);
 // 	}
 // }
 */
static void tx_byte_sent(struct _usart_async_device *device) {
     12c:	b510      	push	{r4, lr}
  if (s_vm_state.tx_cb != NULL) {
     12e:	4b03      	ldr	r3, [pc, #12]	; (13c <tx_byte_sent+0x10>)
     130:	689b      	ldr	r3, [r3, #8]
     132:	2b00      	cmp	r3, #0
     134:	d000      	beq.n	138 <tx_byte_sent+0xc>
    s_vm_state.tx_cb();
     136:	4798      	blx	r3
  }
}
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	20000080 	.word	0x20000080

00000140 <rx_done_cb>:

/**
 * @brief Arrive here when a character has been fully received.
 */
static void rx_done_cb(struct _usart_async_device *device, uint8_t data) {
     140:	b510      	push	{r4, lr}
  // clear the start of frame flag so mu_vm_serial_read_in_progress() will
  // return false.
  hri_sercomusart_clear_INTFLAG_RXS_bit(USART_0.device.hw);
     142:	4b05      	ldr	r3, [pc, #20]	; (158 <rx_done_cb+0x18>)
     144:	6a1b      	ldr	r3, [r3, #32]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXS) >> SERCOM_USART_INTFLAG_RXS_Pos;
}

static inline void hri_sercomusart_clear_INTFLAG_RXS_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     146:	2208      	movs	r2, #8
     148:	761a      	strb	r2, [r3, #24]

  // notify user callback if set
  if (s_vm_state.rx_cb) {
     14a:	4b04      	ldr	r3, [pc, #16]	; (15c <rx_done_cb+0x1c>)
     14c:	691b      	ldr	r3, [r3, #16]
     14e:	2b00      	cmp	r3, #0
     150:	d001      	beq.n	156 <rx_done_cb+0x16>
    s_vm_state.rx_cb(data);
     152:	0008      	movs	r0, r1
     154:	4798      	blx	r3
  }
}
     156:	bd10      	pop	{r4, pc}
     158:	20000130 	.word	0x20000130
     15c:	20000080 	.word	0x20000080

00000160 <tx_done_cb>:
 // 		descr->usart_cb.tx_done(descr);
 // 	}
 // }
 */
static void tx_done_cb(struct _usart_async_device *device) {
  asm("nop");
     160:	46c0      	nop			; (mov r8, r8)
}
     162:	4770      	bx	lr

00000164 <error_cb>:
 // 		descr->usart_cb.error(descr);
 // 	}
 // }
 */
static void error_cb(struct _usart_async_device *device) {
  asm("nop");
     164:	46c0      	nop			; (mov r8, r8)
}
     166:	4770      	bx	lr

00000168 <rtc_cb_trampoline>:

static bool tx_in_progress(void) {
  return !hri_sercomusart_get_INTEN_TXC_bit(USART_0.device.hw);
}

static void rtc_cb_trampoline(struct calendar_dev *const dev) {
     168:	b510      	push	{r4, lr}
  // Arrive here when the RTC count register matches the RTC compare register.
  // Even if the user hasn't registered a callback, this will wake the processor
  // from sleep...
  if (s_vm_state.rtc_cb) {
     16a:	4b04      	ldr	r3, [pc, #16]	; (17c <rtc_cb_trampoline+0x14>)
     16c:	699b      	ldr	r3, [r3, #24]
     16e:	2b00      	cmp	r3, #0
     170:	d002      	beq.n	178 <rtc_cb_trampoline+0x10>
    s_vm_state.rtc_cb(s_vm_state.rtc_cb_arg);
     172:	4a02      	ldr	r2, [pc, #8]	; (17c <rtc_cb_trampoline+0x14>)
     174:	69d0      	ldr	r0, [r2, #28]
     176:	4798      	blx	r3
  }
}
     178:	bd10      	pop	{r4, pc}
     17a:	46c0      	nop			; (mov r8, r8)
     17c:	20000080 	.word	0x20000080

00000180 <mu_vm_init>:
void mu_vm_init(void) {
     180:	b510      	push	{r4, lr}
  memset(&s_vm_state, 0, sizeof(s_vm_state));
     182:	2220      	movs	r2, #32
     184:	2100      	movs	r1, #0
     186:	4819      	ldr	r0, [pc, #100]	; (1ec <mu_vm_init+0x6c>)
     188:	4b19      	ldr	r3, [pc, #100]	; (1f0 <mu_vm_init+0x70>)
     18a:	4798      	blx	r3
  ext_irq_register(PIN_PA15, button_cb_trampoline);
     18c:	4919      	ldr	r1, [pc, #100]	; (1f4 <mu_vm_init+0x74>)
     18e:	200f      	movs	r0, #15
     190:	4b19      	ldr	r3, [pc, #100]	; (1f8 <mu_vm_init+0x78>)
     192:	4798      	blx	r3
  USART_0.device.usart_cb.tx_byte_sent = tx_byte_sent;
     194:	4b19      	ldr	r3, [pc, #100]	; (1fc <mu_vm_init+0x7c>)
     196:	4a1a      	ldr	r2, [pc, #104]	; (200 <mu_vm_init+0x80>)
     198:	609a      	str	r2, [r3, #8]
  USART_0.device.usart_cb.rx_done_cb = rx_done_cb;
     19a:	4a1a      	ldr	r2, [pc, #104]	; (204 <mu_vm_init+0x84>)
     19c:	60da      	str	r2, [r3, #12]
  USART_0.device.usart_cb.tx_done_cb = tx_done_cb;
     19e:	4a1a      	ldr	r2, [pc, #104]	; (208 <mu_vm_init+0x88>)
     1a0:	611a      	str	r2, [r3, #16]
  USART_0.device.usart_cb.error_cb = error_cb;
     1a2:	4a1a      	ldr	r2, [pc, #104]	; (20c <mu_vm_init+0x8c>)
     1a4:	615a      	str	r2, [r3, #20]
static inline void hri_sercomusart_write_INTEN_DRE_bit(const void *const hw, bool value)
{
	if (value == 0x0) {
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     1a6:	2201      	movs	r2, #1
     1a8:	6a19      	ldr	r1, [r3, #32]
     1aa:	758a      	strb	r2, [r1, #22]
static inline void hri_sercomusart_write_INTEN_TXC_bit(const void *const hw, bool value)
{
	if (value == 0x0) {
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     1ac:	3201      	adds	r2, #1
     1ae:	6a19      	ldr	r1, [r3, #32]
     1b0:	758a      	strb	r2, [r1, #22]
static inline void hri_sercomusart_write_INTEN_RXC_bit(const void *const hw, bool value)
{
	if (value == 0x0) {
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
     1b2:	3202      	adds	r2, #2
     1b4:	6a19      	ldr	r1, [r3, #32]
     1b6:	758a      	strb	r2, [r1, #22]
static inline void hri_sercomusart_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
	if (value == 0x0) {
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
     1b8:	327c      	adds	r2, #124	; 0x7c
     1ba:	6a19      	ldr	r1, [r3, #32]
     1bc:	758a      	strb	r2, [r1, #22]
  hri_sercomusart_set_CTRLB_SFDE_bit(USART_0.device.hw);
     1be:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_sercomusart_set_CTRLB_SFDE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg |= SERCOM_USART_CTRLB_SFDE;
     1c0:	6851      	ldr	r1, [r2, #4]
     1c2:	2380      	movs	r3, #128	; 0x80
     1c4:	009b      	lsls	r3, r3, #2
     1c6:	430b      	orrs	r3, r1
     1c8:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     1ca:	2107      	movs	r1, #7
     1cc:	69d3      	ldr	r3, [r2, #28]
     1ce:	4219      	tst	r1, r3
     1d0:	d1fc      	bne.n	1cc <mu_vm_init+0x4c>
  usart_async_enable(&USART_0);
     1d2:	480a      	ldr	r0, [pc, #40]	; (1fc <mu_vm_init+0x7c>)
     1d4:	4b0e      	ldr	r3, [pc, #56]	; (210 <mu_vm_init+0x90>)
     1d6:	4798      	blx	r3
  calendar_enable(&CALENDAR_0); // start RTC
     1d8:	4c0e      	ldr	r4, [pc, #56]	; (214 <mu_vm_init+0x94>)
     1da:	0020      	movs	r0, r4
     1dc:	4b0e      	ldr	r3, [pc, #56]	; (218 <mu_vm_init+0x98>)
     1de:	4798      	blx	r3
  _calendar_register_callback(&CALENDAR_0.device, rtc_cb_trampoline);
     1e0:	490e      	ldr	r1, [pc, #56]	; (21c <mu_vm_init+0x9c>)
     1e2:	0020      	movs	r0, r4
     1e4:	4b0e      	ldr	r3, [pc, #56]	; (220 <mu_vm_init+0xa0>)
     1e6:	4798      	blx	r3
}
     1e8:	bd10      	pop	{r4, pc}
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	20000080 	.word	0x20000080
     1f0:	0000182d 	.word	0x0000182d
     1f4:	00000115 	.word	0x00000115
     1f8:	00000789 	.word	0x00000789
     1fc:	20000130 	.word	0x20000130
     200:	0000012d 	.word	0x0000012d
     204:	00000141 	.word	0x00000141
     208:	00000161 	.word	0x00000161
     20c:	00000165 	.word	0x00000165
     210:	00000a4d 	.word	0x00000a4d
     214:	20000114 	.word	0x20000114
     218:	00000701 	.word	0x00000701
     21c:	00000169 	.word	0x00000169
     220:	00000e1d 	.word	0x00000e1d

00000224 <mu_vm_time_offset>:
  return t + dt;
     224:	1808      	adds	r0, r1, r0
}
     226:	4770      	bx	lr

00000228 <mu_vm_time_difference>:
  return t1 - t2;
     228:	1a40      	subs	r0, r0, r1
}
     22a:	4770      	bx	lr

0000022c <mu_vm_time_precedes>:
  return t1 - t2;
     22c:	1a40      	subs	r0, r0, r1
  return mu_vm_time_difference(t1, t2) > MAX_DURATION;
     22e:	0fc0      	lsrs	r0, r0, #31
}
     230:	4770      	bx	lr
	...

00000234 <mu_vm_time_ms_to_duration>:
mu_vm_time_dt mu_vm_time_ms_to_duration(mu_vm_time_ms_dt ms) {
     234:	b510      	push	{r4, lr}
  return quo_rounded(ms * CONF_GCLK_RTC_FREQUENCY, 1000);
     236:	03c0      	lsls	r0, r0, #15
  //   (y < 0) is false (zero) if x is non-negative
  //   (x < 0) ^ (y < 0) is true if x and y have opposite signs
  //   x/y would be the quotient, but it is truncated towards zero.  To round:
  //   (x + y/2)/y is the rounded quotient when x and y have the same sign
  //   (x - y/2)/y is the rounded quotient when x and y have opposite signs
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
     238:	d506      	bpl.n	248 <mu_vm_time_ms_to_duration+0x14>
     23a:	38f5      	subs	r0, #245	; 0xf5
     23c:	38ff      	subs	r0, #255	; 0xff
     23e:	21fa      	movs	r1, #250	; 0xfa
     240:	0089      	lsls	r1, r1, #2
     242:	4b05      	ldr	r3, [pc, #20]	; (258 <mu_vm_time_ms_to_duration+0x24>)
     244:	4798      	blx	r3
}
     246:	bd10      	pop	{r4, pc}
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
     248:	30f5      	adds	r0, #245	; 0xf5
     24a:	30ff      	adds	r0, #255	; 0xff
     24c:	21fa      	movs	r1, #250	; 0xfa
     24e:	0089      	lsls	r1, r1, #2
     250:	4b01      	ldr	r3, [pc, #4]	; (258 <mu_vm_time_ms_to_duration+0x24>)
     252:	4798      	blx	r3
     254:	e7f7      	b.n	246 <mu_vm_time_ms_to_duration+0x12>
     256:	46c0      	nop			; (mov r8, r8)
     258:	000015b9 	.word	0x000015b9

0000025c <mu_vm_time_duration_to_ms>:
  return quo_rounded(dt * 1000, CONF_GCLK_RTC_FREQUENCY);
     25c:	23fa      	movs	r3, #250	; 0xfa
     25e:	009b      	lsls	r3, r3, #2
     260:	4343      	muls	r3, r0
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
     262:	2b00      	cmp	r3, #0
     264:	da08      	bge.n	278 <mu_vm_time_duration_to_ms+0x1c>
     266:	4a09      	ldr	r2, [pc, #36]	; (28c <mu_vm_time_duration_to_ms+0x30>)
     268:	4694      	mov	ip, r2
     26a:	4463      	add	r3, ip
     26c:	17d8      	asrs	r0, r3, #31
     26e:	0440      	lsls	r0, r0, #17
     270:	0c40      	lsrs	r0, r0, #17
     272:	18c0      	adds	r0, r0, r3
     274:	13c0      	asrs	r0, r0, #15
}
     276:	4770      	bx	lr
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
     278:	2280      	movs	r2, #128	; 0x80
     27a:	01d2      	lsls	r2, r2, #7
     27c:	4694      	mov	ip, r2
     27e:	4463      	add	r3, ip
     280:	17d8      	asrs	r0, r3, #31
     282:	0440      	lsls	r0, r0, #17
     284:	0c40      	lsrs	r0, r0, #17
     286:	18c0      	adds	r0, r0, r3
     288:	13c0      	asrs	r0, r0, #15
     28a:	e7f4      	b.n	276 <mu_vm_time_duration_to_ms+0x1a>
     28c:	ffffc000 	.word	0xffffc000

00000290 <mu_vm_rtc_now>:
  return hri_rtcmode0_read_COUNT_COUNT_bf(CALENDAR_0.device.hw);
     290:	4b03      	ldr	r3, [pc, #12]	; (2a0 <mu_vm_rtc_now+0x10>)
     292:	681a      	ldr	r2, [r3, #0]
typedef uint8_t  hri_rtcmode2_intflag_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtc_wait_for_sync(const void *const hw)
{
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     294:	7a93      	ldrb	r3, [r2, #10]
     296:	09db      	lsrs	r3, r3, #7
     298:	d1fc      	bne.n	294 <mu_vm_rtc_now+0x4>

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_COUNT_bf(const void *const hw)
{
	uint32_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
     29a:	6910      	ldr	r0, [r2, #16]
}
     29c:	4770      	bx	lr
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	20000114 	.word	0x20000114

000002a4 <mu_vm_rtc_set_cb>:
  if (fn) {
     2a4:	2800      	cmp	r0, #0
     2a6:	d003      	beq.n	2b0 <mu_vm_rtc_set_cb+0xc>
    s_vm_state.rtc_cb = fn;
     2a8:	4b04      	ldr	r3, [pc, #16]	; (2bc <mu_vm_rtc_set_cb+0x18>)
     2aa:	6198      	str	r0, [r3, #24]
    s_vm_state.rtc_cb_arg = arg;
     2ac:	61d9      	str	r1, [r3, #28]
}
     2ae:	4770      	bx	lr
    s_vm_state.rtc_cb = NULL;
     2b0:	4b02      	ldr	r3, [pc, #8]	; (2bc <mu_vm_rtc_set_cb+0x18>)
     2b2:	2200      	movs	r2, #0
     2b4:	619a      	str	r2, [r3, #24]
    s_vm_state.rtc_cb_arg = NULL;
     2b6:	61da      	str	r2, [r3, #28]
}
     2b8:	e7f9      	b.n	2ae <mu_vm_rtc_set_cb+0xa>
     2ba:	46c0      	nop			; (mov r8, r8)
     2bc:	20000080 	.word	0x20000080

000002c0 <mu_vm_rtc_alarm_at>:
void mu_vm_rtc_alarm_at(mu_vm_time_t at) {
     2c0:	b510      	push	{r4, lr}
     2c2:	0001      	movs	r1, r0
  _calendar_set_comp(&CALENDAR_0.device, at);
     2c4:	4807      	ldr	r0, [pc, #28]	; (2e4 <mu_vm_rtc_alarm_at+0x24>)
     2c6:	4b08      	ldr	r3, [pc, #32]	; (2e8 <mu_vm_rtc_alarm_at+0x28>)
     2c8:	4798      	blx	r3
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     2ca:	4b08      	ldr	r3, [pc, #32]	; (2ec <mu_vm_rtc_alarm_at+0x2c>)
     2cc:	885a      	ldrh	r2, [r3, #2]
     2ce:	2180      	movs	r1, #128	; 0x80
     2d0:	01c9      	lsls	r1, r1, #7
     2d2:	430a      	orrs	r2, r1
     2d4:	805a      	strh	r2, [r3, #2]
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
     2d6:	885a      	ldrh	r2, [r3, #2]
     2d8:	2180      	movs	r1, #128	; 0x80
     2da:	0209      	lsls	r1, r1, #8
     2dc:	430a      	orrs	r2, r1
     2de:	805a      	strh	r2, [r3, #2]
}
     2e0:	bd10      	pop	{r4, pc}
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	20000114 	.word	0x20000114
     2e8:	00000f39 	.word	0x00000f39
     2ec:	40001400 	.word	0x40001400

000002f0 <mu_vm_led_set>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
     2f0:	2800      	cmp	r0, #0
     2f2:	d006      	beq.n	302 <mu_vm_led_set+0x12>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2f4:	2180      	movs	r1, #128	; 0x80
     2f6:	05c9      	lsls	r1, r1, #23
     2f8:	2394      	movs	r3, #148	; 0x94
     2fa:	22c0      	movs	r2, #192	; 0xc0
     2fc:	05d2      	lsls	r2, r2, #23
     2fe:	50d1      	str	r1, [r2, r3]
void mu_vm_led_set(bool on) { gpio_set_pin_level(USER_LED_AL, !on); }
     300:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     302:	2180      	movs	r1, #128	; 0x80
     304:	05c9      	lsls	r1, r1, #23
     306:	2398      	movs	r3, #152	; 0x98
     308:	22c0      	movs	r2, #192	; 0xc0
     30a:	05d2      	lsls	r2, r2, #23
     30c:	50d1      	str	r1, [r2, r3]
     30e:	e7f7      	b.n	300 <mu_vm_led_set+0x10>

00000310 <mu_vm_led_get>:
bool mu_vm_led_get(void) { return !gpio_get_pin_level(USER_LED_AL); }
     310:	b510      	push	{r4, lr}
     312:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     314:	a801      	add	r0, sp, #4
     316:	4b0b      	ldr	r3, [pc, #44]	; (344 <mu_vm_led_get+0x34>)
     318:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     31a:	22c0      	movs	r2, #192	; 0xc0
     31c:	05d2      	lsls	r2, r2, #23
     31e:	2380      	movs	r3, #128	; 0x80
     320:	58d4      	ldr	r4, [r2, r3]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     322:	3320      	adds	r3, #32
     324:	4908      	ldr	r1, [pc, #32]	; (348 <mu_vm_led_get+0x38>)
     326:	58cb      	ldr	r3, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     328:	2190      	movs	r1, #144	; 0x90
     32a:	5850      	ldr	r0, [r2, r1]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     32c:	4058      	eors	r0, r3
     32e:	4004      	ands	r4, r0
     330:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
     332:	a801      	add	r0, sp, #4
     334:	4b05      	ldr	r3, [pc, #20]	; (34c <mu_vm_led_get+0x3c>)
     336:	4798      	blx	r3
     338:	0fa4      	lsrs	r4, r4, #30
     33a:	2001      	movs	r0, #1
     33c:	4044      	eors	r4, r0
     33e:	4020      	ands	r0, r4
     340:	b002      	add	sp, #8
     342:	bd10      	pop	{r4, pc}
     344:	0000069d 	.word	0x0000069d
     348:	41004400 	.word	0x41004400
     34c:	000006ab 	.word	0x000006ab

00000350 <mu_vm_button_is_pressed>:
bool mu_vm_button_is_pressed(void) {
     350:	b510      	push	{r4, lr}
     352:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
     354:	a801      	add	r0, sp, #4
     356:	4b0a      	ldr	r3, [pc, #40]	; (380 <mu_vm_button_is_pressed+0x30>)
     358:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     35a:	22c0      	movs	r2, #192	; 0xc0
     35c:	05d2      	lsls	r2, r2, #23
     35e:	6814      	ldr	r4, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     360:	4b08      	ldr	r3, [pc, #32]	; (384 <mu_vm_button_is_pressed+0x34>)
     362:	6a1b      	ldr	r3, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     364:	6910      	ldr	r0, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     366:	4058      	eors	r0, r3
     368:	4004      	ands	r4, r0
     36a:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
     36c:	a801      	add	r0, sp, #4
     36e:	4b06      	ldr	r3, [pc, #24]	; (388 <mu_vm_button_is_pressed+0x38>)
     370:	4798      	blx	r3
  return !gpio_get_pin_level(USER_BUTTON_AL);
     372:	0be4      	lsrs	r4, r4, #15
     374:	2001      	movs	r0, #1
     376:	4044      	eors	r4, r0
     378:	4020      	ands	r0, r4
}
     37a:	b002      	add	sp, #8
     37c:	bd10      	pop	{r4, pc}
     37e:	46c0      	nop			; (mov r8, r8)
     380:	0000069d 	.word	0x0000069d
     384:	41004400 	.word	0x41004400
     388:	000006ab 	.word	0x000006ab

0000038c <mu_vm_button_set_cb>:
  if (fn) {
     38c:	2800      	cmp	r0, #0
     38e:	d003      	beq.n	398 <mu_vm_button_set_cb+0xc>
    s_vm_state.button_cb = fn;
     390:	4b04      	ldr	r3, [pc, #16]	; (3a4 <mu_vm_button_set_cb+0x18>)
     392:	6018      	str	r0, [r3, #0]
    s_vm_state.button_cb_arg = arg;
     394:	6059      	str	r1, [r3, #4]
}
     396:	4770      	bx	lr
    s_vm_state.button_cb = NULL;
     398:	4b02      	ldr	r3, [pc, #8]	; (3a4 <mu_vm_button_set_cb+0x18>)
     39a:	2200      	movs	r2, #0
     39c:	601a      	str	r2, [r3, #0]
    s_vm_state.button_cb_arg = NULL;
     39e:	605a      	str	r2, [r3, #4]
}
     3a0:	e7f9      	b.n	396 <mu_vm_button_set_cb+0xa>
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	20000080 	.word	0x20000080

000003a8 <mu_vm_serial_is_ready_to_write>:
  return hri_sercomusart_get_interrupt_DRE_bit(USART_0.device.hw);
     3a8:	4b02      	ldr	r3, [pc, #8]	; (3b4 <mu_vm_serial_is_ready_to_write+0xc>)
     3aa:	6a1b      	ldr	r3, [r3, #32]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     3ac:	7e18      	ldrb	r0, [r3, #24]
     3ae:	2301      	movs	r3, #1
     3b0:	4018      	ands	r0, r3
}
     3b2:	4770      	bx	lr
     3b4:	20000130 	.word	0x20000130

000003b8 <mu_vm_serial_write>:
  if (s_vm_state.tx_cb != NULL) {
     3b8:	4b06      	ldr	r3, [pc, #24]	; (3d4 <mu_vm_serial_write+0x1c>)
     3ba:	689b      	ldr	r3, [r3, #8]
     3bc:	2b00      	cmp	r3, #0
     3be:	d003      	beq.n	3c8 <mu_vm_serial_write+0x10>
    hri_sercomusart_set_INTEN_DRE_bit(USART_0.device.hw);
     3c0:	4b05      	ldr	r3, [pc, #20]	; (3d8 <mu_vm_serial_write+0x20>)
     3c2:	6a1b      	ldr	r3, [r3, #32]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     3c4:	2201      	movs	r2, #1
     3c6:	759a      	strb	r2, [r3, #22]
  hri_sercomusart_write_DATA_reg(USART_0.device.hw, data);
     3c8:	4b03      	ldr	r3, [pc, #12]	; (3d8 <mu_vm_serial_write+0x20>)
     3ca:	6a1b      	ldr	r3, [r3, #32]
     3cc:	b280      	uxth	r0, r0
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
     3ce:	8518      	strh	r0, [r3, #40]	; 0x28
}
     3d0:	4770      	bx	lr
     3d2:	46c0      	nop			; (mov r8, r8)
     3d4:	20000080 	.word	0x20000080
     3d8:	20000130 	.word	0x20000130

000003dc <mu_vm_serial_set_read_cb>:
  s_vm_state.rx_cb = cb;
     3dc:	4b01      	ldr	r3, [pc, #4]	; (3e4 <mu_vm_serial_set_read_cb+0x8>)
     3de:	6118      	str	r0, [r3, #16]
}
     3e0:	4770      	bx	lr
     3e2:	46c0      	nop			; (mov r8, r8)
     3e4:	20000080 	.word	0x20000080

000003e8 <mu_vm_sleep_until>:
void mu_vm_sleep_until(mu_vm_time_t then) {
     3e8:	b510      	push	{r4, lr}
     3ea:	0004      	movs	r4, r0
  mu_vm_time_t now = mu_vm_rtc_now();
     3ec:	4b06      	ldr	r3, [pc, #24]	; (408 <mu_vm_sleep_until+0x20>)
     3ee:	4798      	blx	r3
  return t1 - t2;
     3f0:	1a20      	subs	r0, r4, r0
  if (mu_vm_time_difference(then, now) > MIN_SLEEP_DURATION) {
     3f2:	2820      	cmp	r0, #32
     3f4:	dc00      	bgt.n	3f8 <mu_vm_sleep_until+0x10>
}
     3f6:	bd10      	pop	{r4, pc}
    mu_vm_rtc_alarm_at(then);
     3f8:	0020      	movs	r0, r4
     3fa:	4b04      	ldr	r3, [pc, #16]	; (40c <mu_vm_sleep_until+0x24>)
     3fc:	4798      	blx	r3
  sleep(3); // in hal_sleep
     3fe:	2003      	movs	r0, #3
     400:	4b03      	ldr	r3, [pc, #12]	; (410 <mu_vm_sleep_until+0x28>)
     402:	4798      	blx	r3
}
     404:	e7f7      	b.n	3f6 <mu_vm_sleep_until+0xe>
     406:	46c0      	nop			; (mov r8, r8)
     408:	00000291 	.word	0x00000291
     40c:	000002c1 	.word	0x000002c1
     410:	000007d1 	.word	0x000007d1

00000414 <mu_vm_sleep>:
void mu_vm_sleep(void) { go_to_sleep(); }
     414:	b510      	push	{r4, lr}
  sleep(3); // in hal_sleep
     416:	2003      	movs	r0, #3
     418:	4b01      	ldr	r3, [pc, #4]	; (420 <mu_vm_sleep+0xc>)
     41a:	4798      	blx	r3
void mu_vm_sleep(void) { go_to_sleep(); }
     41c:	bd10      	pop	{r4, pc}
     41e:	46c0      	nop			; (mov r8, r8)
     420:	000007d1 	.word	0x000007d1

00000424 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     424:	b510      	push	{r4, lr}
	system_init();
     426:	4b01      	ldr	r3, [pc, #4]	; (42c <atmel_start_init+0x8>)
     428:	4798      	blx	r3
}
     42a:	bd10      	pop	{r4, pc}
     42c:	0000064d 	.word	0x0000064d

00000430 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     430:	e7fe      	b.n	430 <Dummy_Handler>
	...

00000434 <Reset_Handler>:
{
     434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     436:	4a2a      	ldr	r2, [pc, #168]	; (4e0 <Reset_Handler+0xac>)
     438:	4b2a      	ldr	r3, [pc, #168]	; (4e4 <Reset_Handler+0xb0>)
     43a:	429a      	cmp	r2, r3
     43c:	d011      	beq.n	462 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     43e:	001a      	movs	r2, r3
     440:	4b29      	ldr	r3, [pc, #164]	; (4e8 <Reset_Handler+0xb4>)
     442:	429a      	cmp	r2, r3
     444:	d20d      	bcs.n	462 <Reset_Handler+0x2e>
     446:	4a29      	ldr	r2, [pc, #164]	; (4ec <Reset_Handler+0xb8>)
     448:	3303      	adds	r3, #3
     44a:	1a9b      	subs	r3, r3, r2
     44c:	089b      	lsrs	r3, r3, #2
     44e:	3301      	adds	r3, #1
     450:	009b      	lsls	r3, r3, #2
     452:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     454:	4823      	ldr	r0, [pc, #140]	; (4e4 <Reset_Handler+0xb0>)
     456:	4922      	ldr	r1, [pc, #136]	; (4e0 <Reset_Handler+0xac>)
     458:	588c      	ldr	r4, [r1, r2]
     45a:	5084      	str	r4, [r0, r2]
     45c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     45e:	429a      	cmp	r2, r3
     460:	d1fa      	bne.n	458 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     462:	4a23      	ldr	r2, [pc, #140]	; (4f0 <Reset_Handler+0xbc>)
     464:	4b23      	ldr	r3, [pc, #140]	; (4f4 <Reset_Handler+0xc0>)
     466:	429a      	cmp	r2, r3
     468:	d20a      	bcs.n	480 <Reset_Handler+0x4c>
     46a:	43d3      	mvns	r3, r2
     46c:	4921      	ldr	r1, [pc, #132]	; (4f4 <Reset_Handler+0xc0>)
     46e:	185b      	adds	r3, r3, r1
     470:	2103      	movs	r1, #3
     472:	438b      	bics	r3, r1
     474:	3304      	adds	r3, #4
     476:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     478:	2100      	movs	r1, #0
     47a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     47c:	4293      	cmp	r3, r2
     47e:	d1fc      	bne.n	47a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     480:	4a1d      	ldr	r2, [pc, #116]	; (4f8 <Reset_Handler+0xc4>)
     482:	21ff      	movs	r1, #255	; 0xff
     484:	4b1d      	ldr	r3, [pc, #116]	; (4fc <Reset_Handler+0xc8>)
     486:	438b      	bics	r3, r1
     488:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     48a:	39fd      	subs	r1, #253	; 0xfd
     48c:	2390      	movs	r3, #144	; 0x90
     48e:	005b      	lsls	r3, r3, #1
     490:	4a1b      	ldr	r2, [pc, #108]	; (500 <Reset_Handler+0xcc>)
     492:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     494:	4a1b      	ldr	r2, [pc, #108]	; (504 <Reset_Handler+0xd0>)
     496:	78d3      	ldrb	r3, [r2, #3]
     498:	2503      	movs	r5, #3
     49a:	43ab      	bics	r3, r5
     49c:	2402      	movs	r4, #2
     49e:	4323      	orrs	r3, r4
     4a0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     4a2:	78d3      	ldrb	r3, [r2, #3]
     4a4:	270c      	movs	r7, #12
     4a6:	43bb      	bics	r3, r7
     4a8:	2608      	movs	r6, #8
     4aa:	4333      	orrs	r3, r6
     4ac:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     4ae:	4b16      	ldr	r3, [pc, #88]	; (508 <Reset_Handler+0xd4>)
     4b0:	7b98      	ldrb	r0, [r3, #14]
     4b2:	2230      	movs	r2, #48	; 0x30
     4b4:	4390      	bics	r0, r2
     4b6:	2220      	movs	r2, #32
     4b8:	4310      	orrs	r0, r2
     4ba:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     4bc:	7b99      	ldrb	r1, [r3, #14]
     4be:	43b9      	bics	r1, r7
     4c0:	4331      	orrs	r1, r6
     4c2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     4c4:	7b9a      	ldrb	r2, [r3, #14]
     4c6:	43aa      	bics	r2, r5
     4c8:	4322      	orrs	r2, r4
     4ca:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     4cc:	4a0f      	ldr	r2, [pc, #60]	; (50c <Reset_Handler+0xd8>)
     4ce:	6853      	ldr	r3, [r2, #4]
     4d0:	2180      	movs	r1, #128	; 0x80
     4d2:	430b      	orrs	r3, r1
     4d4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     4d6:	4b0e      	ldr	r3, [pc, #56]	; (510 <Reset_Handler+0xdc>)
     4d8:	4798      	blx	r3
        main();
     4da:	4b0e      	ldr	r3, [pc, #56]	; (514 <Reset_Handler+0xe0>)
     4dc:	4798      	blx	r3
     4de:	e7fe      	b.n	4de <Reset_Handler+0xaa>
     4e0:	000023f8 	.word	0x000023f8
     4e4:	20000000 	.word	0x20000000
     4e8:	20000064 	.word	0x20000064
     4ec:	20000004 	.word	0x20000004
     4f0:	20000064 	.word	0x20000064
     4f4:	20000184 	.word	0x20000184
     4f8:	e000ed00 	.word	0xe000ed00
     4fc:	00000000 	.word	0x00000000
     500:	41007000 	.word	0x41007000
     504:	41005000 	.word	0x41005000
     508:	41004800 	.word	0x41004800
     50c:	41004000 	.word	0x41004000
     510:	000017e5 	.word	0x000017e5
     514:	00001199 	.word	0x00001199

00000518 <EXTERNAL_IRQ_0_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct calendar_descriptor CALENDAR_0;

void EXTERNAL_IRQ_0_init(void)
{
     518:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     51a:	4a10      	ldr	r2, [pc, #64]	; (55c <EXTERNAL_IRQ_0_init+0x44>)
     51c:	4b10      	ldr	r3, [pc, #64]	; (560 <EXTERNAL_IRQ_0_init+0x48>)
     51e:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     520:	22c0      	movs	r2, #192	; 0xc0
     522:	05d2      	lsls	r2, r2, #23
     524:	2080      	movs	r0, #128	; 0x80
     526:	0200      	lsls	r0, r0, #8
     528:	6050      	str	r0, [r2, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     52a:	4b0e      	ldr	r3, [pc, #56]	; (564 <EXTERNAL_IRQ_0_init+0x4c>)
     52c:	490e      	ldr	r1, [pc, #56]	; (568 <EXTERNAL_IRQ_0_init+0x50>)
     52e:	6299      	str	r1, [r3, #40]	; 0x28
     530:	490e      	ldr	r1, [pc, #56]	; (56c <EXTERNAL_IRQ_0_init+0x54>)
     532:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     534:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     536:	214f      	movs	r1, #79	; 0x4f
     538:	5c5c      	ldrb	r4, [r3, r1]
     53a:	2504      	movs	r5, #4
     53c:	432c      	orrs	r4, r5
     53e:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     540:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     542:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     544:	2001      	movs	r0, #1
     546:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     548:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     54a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     54c:	3918      	subs	r1, #24
     54e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     550:	300e      	adds	r0, #14
     552:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     554:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(USER_BUTTON_AL, PINMUX_PA15A_EIC_EXTINT15);

	ext_irq_init();
     556:	4b06      	ldr	r3, [pc, #24]	; (570 <EXTERNAL_IRQ_0_init+0x58>)
     558:	4798      	blx	r3
}
     55a:	bd70      	pop	{r4, r5, r6, pc}
     55c:	00004305 	.word	0x00004305
     560:	40000c00 	.word	0x40000c00
     564:	41004400 	.word	0x41004400
     568:	40028000 	.word	0x40028000
     56c:	c0020000 	.word	0xc0020000
     570:	00000765 	.word	0x00000765

00000574 <USART_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     574:	4a04      	ldr	r2, [pc, #16]	; (588 <USART_0_CLOCK_init+0x14>)
     576:	6a13      	ldr	r3, [r2, #32]
     578:	2120      	movs	r1, #32
     57a:	430b      	orrs	r3, r1
     57c:	6213      	str	r3, [r2, #32]
     57e:	4a03      	ldr	r2, [pc, #12]	; (58c <USART_0_CLOCK_init+0x18>)
     580:	4b03      	ldr	r3, [pc, #12]	; (590 <USART_0_CLOCK_init+0x1c>)
     582:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     584:	4770      	bx	lr
     586:	46c0      	nop			; (mov r8, r8)
     588:	40000400 	.word	0x40000400
     58c:	00004017 	.word	0x00004017
     590:	40000c00 	.word	0x40000c00

00000594 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     594:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     596:	4b0e      	ldr	r3, [pc, #56]	; (5d0 <USART_0_PORT_init+0x3c>)
     598:	2256      	movs	r2, #86	; 0x56
     59a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     59c:	2501      	movs	r5, #1
     59e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5a0:	2401      	movs	r4, #1
     5a2:	4321      	orrs	r1, r4
     5a4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5a6:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5a8:	203b      	movs	r0, #59	; 0x3b
     5aa:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5ac:	3a47      	subs	r2, #71	; 0x47
     5ae:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     5b0:	3a0d      	subs	r2, #13
     5b2:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5b4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b6:	2157      	movs	r1, #87	; 0x57
     5b8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ba:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5bc:	4322      	orrs	r2, r4
     5be:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5c0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5c4:	3948      	subs	r1, #72	; 0x48
     5c6:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     5c8:	3111      	adds	r1, #17
     5ca:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5cc:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     5ce:	bd30      	pop	{r4, r5, pc}
     5d0:	41004400 	.word	0x41004400

000005d4 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     5d4:	b510      	push	{r4, lr}
     5d6:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     5d8:	4b06      	ldr	r3, [pc, #24]	; (5f4 <USART_0_init+0x20>)
     5da:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     5dc:	2300      	movs	r3, #0
     5de:	9300      	str	r3, [sp, #0]
     5e0:	3310      	adds	r3, #16
     5e2:	4a05      	ldr	r2, [pc, #20]	; (5f8 <USART_0_init+0x24>)
     5e4:	4905      	ldr	r1, [pc, #20]	; (5fc <USART_0_init+0x28>)
     5e6:	4806      	ldr	r0, [pc, #24]	; (600 <USART_0_init+0x2c>)
     5e8:	4c06      	ldr	r4, [pc, #24]	; (604 <USART_0_init+0x30>)
     5ea:	47a0      	blx	r4
	USART_0_PORT_init();
     5ec:	4b06      	ldr	r3, [pc, #24]	; (608 <USART_0_init+0x34>)
     5ee:	4798      	blx	r3
}
     5f0:	b002      	add	sp, #8
     5f2:	bd10      	pop	{r4, pc}
     5f4:	00000575 	.word	0x00000575
     5f8:	200000a8 	.word	0x200000a8
     5fc:	42001400 	.word	0x42001400
     600:	20000130 	.word	0x20000130
     604:	000009b5 	.word	0x000009b5
     608:	00000595 	.word	0x00000595

0000060c <CALENDAR_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     60c:	4a04      	ldr	r2, [pc, #16]	; (620 <CALENDAR_0_CLOCK_init+0x14>)
     60e:	6993      	ldr	r3, [r2, #24]
     610:	2120      	movs	r1, #32
     612:	430b      	orrs	r3, r1
     614:	6193      	str	r3, [r2, #24]
     616:	4a03      	ldr	r2, [pc, #12]	; (624 <CALENDAR_0_CLOCK_init+0x18>)
     618:	4b03      	ldr	r3, [pc, #12]	; (628 <CALENDAR_0_CLOCK_init+0x1c>)
     61a:	805a      	strh	r2, [r3, #2]

void CALENDAR_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
     61c:	4770      	bx	lr
     61e:	46c0      	nop			; (mov r8, r8)
     620:	40000400 	.word	0x40000400
     624:	00004304 	.word	0x00004304
     628:	40000c00 	.word	0x40000c00

0000062c <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     62c:	b510      	push	{r4, lr}
	CALENDAR_0_CLOCK_init();
     62e:	4b03      	ldr	r3, [pc, #12]	; (63c <CALENDAR_0_init+0x10>)
     630:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     632:	4903      	ldr	r1, [pc, #12]	; (640 <CALENDAR_0_init+0x14>)
     634:	4803      	ldr	r0, [pc, #12]	; (644 <CALENDAR_0_init+0x18>)
     636:	4b04      	ldr	r3, [pc, #16]	; (648 <CALENDAR_0_init+0x1c>)
     638:	4798      	blx	r3
}
     63a:	bd10      	pop	{r4, pc}
     63c:	0000060d 	.word	0x0000060d
     640:	40001400 	.word	0x40001400
     644:	20000114 	.word	0x20000114
     648:	000006b9 	.word	0x000006b9

0000064c <system_init>:

void system_init(void)
{
     64c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     64e:	4b0d      	ldr	r3, [pc, #52]	; (684 <system_init+0x38>)
     650:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     652:	23c0      	movs	r3, #192	; 0xc0
     654:	05db      	lsls	r3, r3, #23
     656:	2280      	movs	r2, #128	; 0x80
     658:	05d2      	lsls	r2, r2, #23
     65a:	2198      	movs	r1, #152	; 0x98
     65c:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     65e:	3910      	subs	r1, #16
     660:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     662:	4b09      	ldr	r3, [pc, #36]	; (688 <system_init+0x3c>)
     664:	3120      	adds	r1, #32
     666:	505a      	str	r2, [r3, r1]
     668:	4a08      	ldr	r2, [pc, #32]	; (68c <system_init+0x40>)
     66a:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     66c:	3136      	adds	r1, #54	; 0x36
     66e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     670:	2001      	movs	r0, #1
     672:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     674:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(USER_LED_AL, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(USER_LED_AL, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     676:	4b06      	ldr	r3, [pc, #24]	; (690 <system_init+0x44>)
     678:	4798      	blx	r3

	USART_0_init();
     67a:	4b06      	ldr	r3, [pc, #24]	; (694 <system_init+0x48>)
     67c:	4798      	blx	r3

	CALENDAR_0_init();
     67e:	4b06      	ldr	r3, [pc, #24]	; (698 <system_init+0x4c>)
     680:	4798      	blx	r3
}
     682:	bd10      	pop	{r4, pc}
     684:	00000bad 	.word	0x00000bad
     688:	41004400 	.word	0x41004400
     68c:	c0004000 	.word	0xc0004000
     690:	00000519 	.word	0x00000519
     694:	000005d5 	.word	0x000005d5
     698:	0000062d 	.word	0x0000062d

0000069c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     69c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     6a0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     6a2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     6a4:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     6a8:	4770      	bx	lr

000006aa <atomic_leave_critical>:
     6aa:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     6ae:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     6b0:	f383 8810 	msr	PRIMASK, r3
}
     6b4:	4770      	bx	lr
	...

000006b8 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
     6b8:	b570      	push	{r4, r5, r6, lr}
     6ba:	0004      	movs	r4, r0
     6bc:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
     6be:	1e43      	subs	r3, r0, #1
     6c0:	4198      	sbcs	r0, r3
     6c2:	b2c0      	uxtb	r0, r0
     6c4:	22e0      	movs	r2, #224	; 0xe0
     6c6:	0052      	lsls	r2, r2, #1
     6c8:	4909      	ldr	r1, [pc, #36]	; (6f0 <calendar_init+0x38>)
     6ca:	4b0a      	ldr	r3, [pc, #40]	; (6f4 <calendar_init+0x3c>)
     6cc:	4798      	blx	r3

	if (calendar->device.hw == hw) {
     6ce:	6823      	ldr	r3, [r4, #0]
     6d0:	42ab      	cmp	r3, r5
     6d2:	d008      	beq.n	6e6 <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
     6d4:	2b00      	cmp	r3, #0
     6d6:	d108      	bne.n	6ea <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
     6d8:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
     6da:	0020      	movs	r0, r4
     6dc:	4b06      	ldr	r3, [pc, #24]	; (6f8 <calendar_init+0x40>)
     6de:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
     6e0:	4b06      	ldr	r3, [pc, #24]	; (6fc <calendar_init+0x44>)
     6e2:	6163      	str	r3, [r4, #20]

	return ret;
}
     6e4:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
     6e6:	2000      	movs	r0, #0
     6e8:	e7fc      	b.n	6e4 <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
     6ea:	2012      	movs	r0, #18
     6ec:	4240      	negs	r0, r0
     6ee:	e7f9      	b.n	6e4 <calendar_init+0x2c>
     6f0:	000020a8 	.word	0x000020a8
     6f4:	00000a79 	.word	0x00000a79
     6f8:	00000e7d 	.word	0x00000e7d
     6fc:	000007b2 	.word	0x000007b2

00000700 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
     700:	b510      	push	{r4, lr}
     702:	0004      	movs	r4, r0
	/* Sanity check arguments */
	ASSERT(calendar);
     704:	1e43      	subs	r3, r0, #1
     706:	4198      	sbcs	r0, r3
     708:	b2c0      	uxtb	r0, r0
     70a:	22e6      	movs	r2, #230	; 0xe6
     70c:	32ff      	adds	r2, #255	; 0xff
     70e:	4904      	ldr	r1, [pc, #16]	; (720 <calendar_enable+0x20>)
     710:	4b04      	ldr	r3, [pc, #16]	; (724 <calendar_enable+0x24>)
     712:	4798      	blx	r3

	_calendar_enable(&calendar->device);
     714:	0020      	movs	r0, r4
     716:	4b04      	ldr	r3, [pc, #16]	; (728 <calendar_enable+0x28>)
     718:	4798      	blx	r3

	return ERR_NONE;
}
     71a:	2000      	movs	r0, #0
     71c:	bd10      	pop	{r4, pc}
     71e:	46c0      	nop			; (mov r8, r8)
     720:	000020a8 	.word	0x000020a8
     724:	00000a79 	.word	0x00000a79
     728:	00000f01 	.word	0x00000f01

0000072c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     72c:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     72e:	4b0c      	ldr	r3, [pc, #48]	; (760 <process_ext_irq+0x34>)
     730:	685c      	ldr	r4, [r3, #4]
     732:	42a0      	cmp	r0, r4
     734:	d00e      	beq.n	754 <process_ext_irq+0x28>
     736:	2201      	movs	r2, #1
     738:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     73a:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     73c:	25ff      	movs	r5, #255	; 0xff
     73e:	e003      	b.n	748 <process_ext_irq+0x1c>
     740:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     742:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     744:	085b      	lsrs	r3, r3, #1
     746:	d10a      	bne.n	75e <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     748:	42a0      	cmp	r0, r4
     74a:	d9f9      	bls.n	740 <process_ext_irq+0x14>
	while (upper >= lower) {
     74c:	2a00      	cmp	r2, #0
     74e:	d006      	beq.n	75e <process_ext_irq+0x32>
			lower = middle + 1;
     750:	0031      	movs	r1, r6
     752:	e7f6      	b.n	742 <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     754:	4b02      	ldr	r3, [pc, #8]	; (760 <process_ext_irq+0x34>)
     756:	681b      	ldr	r3, [r3, #0]
     758:	2b00      	cmp	r3, #0
     75a:	d000      	beq.n	75e <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     75c:	4798      	blx	r3
		}
	}
}
     75e:	bd70      	pop	{r4, r5, r6, pc}
     760:	200000b8 	.word	0x200000b8

00000764 <ext_irq_init>:
{
     764:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     766:	4b05      	ldr	r3, [pc, #20]	; (77c <ext_irq_init+0x18>)
     768:	2201      	movs	r2, #1
     76a:	4252      	negs	r2, r2
     76c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     76e:	2200      	movs	r2, #0
     770:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     772:	4803      	ldr	r0, [pc, #12]	; (780 <ext_irq_init+0x1c>)
     774:	4b03      	ldr	r3, [pc, #12]	; (784 <ext_irq_init+0x20>)
     776:	4798      	blx	r3
}
     778:	bd10      	pop	{r4, pc}
     77a:	46c0      	nop			; (mov r8, r8)
     77c:	200000b8 	.word	0x200000b8
     780:	0000072d 	.word	0x0000072d
     784:	00000bdd 	.word	0x00000bdd

00000788 <ext_irq_register>:
{
     788:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     78a:	4b0f      	ldr	r3, [pc, #60]	; (7c8 <ext_irq_register+0x40>)
     78c:	685b      	ldr	r3, [r3, #4]
     78e:	4298      	cmp	r0, r3
     790:	d008      	beq.n	7a4 <ext_irq_register+0x1c>
	if (NULL == cb) {
     792:	2900      	cmp	r1, #0
     794:	d014      	beq.n	7c0 <ext_irq_register+0x38>
			if (NULL == ext_irqs[i].cb) {
     796:	4b0c      	ldr	r3, [pc, #48]	; (7c8 <ext_irq_register+0x40>)
     798:	681b      	ldr	r3, [r3, #0]
     79a:	2b00      	cmp	r3, #0
     79c:	d009      	beq.n	7b2 <ext_irq_register+0x2a>
		return ERR_INVALID_ARG;
     79e:	200d      	movs	r0, #13
     7a0:	4240      	negs	r0, r0
     7a2:	e00c      	b.n	7be <ext_irq_register+0x36>
			ext_irqs[i].cb = cb;
     7a4:	4b08      	ldr	r3, [pc, #32]	; (7c8 <ext_irq_register+0x40>)
     7a6:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     7a8:	2900      	cmp	r1, #0
     7aa:	d105      	bne.n	7b8 <ext_irq_register+0x30>
		return _ext_irq_enable(pin, false);
     7ac:	4b07      	ldr	r3, [pc, #28]	; (7cc <ext_irq_register+0x44>)
     7ae:	4798      	blx	r3
     7b0:	e005      	b.n	7be <ext_irq_register+0x36>
				ext_irqs[i].cb  = cb;
     7b2:	4b05      	ldr	r3, [pc, #20]	; (7c8 <ext_irq_register+0x40>)
     7b4:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     7b6:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     7b8:	2101      	movs	r1, #1
     7ba:	4b04      	ldr	r3, [pc, #16]	; (7cc <ext_irq_register+0x44>)
     7bc:	4798      	blx	r3
}
     7be:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     7c0:	200d      	movs	r0, #13
     7c2:	4240      	negs	r0, r0
     7c4:	e7fb      	b.n	7be <ext_irq_register+0x36>
     7c6:	46c0      	nop			; (mov r8, r8)
     7c8:	200000b8 	.word	0x200000b8
     7cc:	00000c75 	.word	0x00000c75

000007d0 <sleep>:
 * \retval -1 The requested sleep mode was invalid or not available
 * \retval  0 The operation completed successfully, returned after leaving the
 *            sleep
 */
int sleep(const uint8_t mode)
{
     7d0:	b510      	push	{r4, lr}
	if (ERR_NONE != _set_sleep_mode(mode))
     7d2:	4b05      	ldr	r3, [pc, #20]	; (7e8 <sleep+0x18>)
     7d4:	4798      	blx	r3
     7d6:	2800      	cmp	r0, #0
     7d8:	d103      	bne.n	7e2 <sleep+0x12>
		return ERR_INVALID_ARG;

	_go_to_sleep();
     7da:	4b04      	ldr	r3, [pc, #16]	; (7ec <sleep+0x1c>)
     7dc:	4798      	blx	r3

	return ERR_NONE;
     7de:	2000      	movs	r0, #0
}
     7e0:	bd10      	pop	{r4, pc}
		return ERR_INVALID_ARG;
     7e2:	200d      	movs	r0, #13
     7e4:	4240      	negs	r0, r0
     7e6:	e7fb      	b.n	7e0 <sleep+0x10>
     7e8:	00000dc5 	.word	0x00000dc5
     7ec:	00000ba5 	.word	0x00000ba5

000007f0 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     7f0:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     7f2:	3808      	subs	r0, #8

	descr->stat = 0;
     7f4:	2300      	movs	r3, #0
     7f6:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     7f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
     7fa:	2b00      	cmp	r3, #0
     7fc:	d000      	beq.n	800 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     7fe:	4798      	blx	r3
	}
}
     800:	bd10      	pop	{r4, pc}

00000802 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     802:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     804:	3808      	subs	r0, #8

	descr->stat = 0;
     806:	2300      	movs	r3, #0
     808:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     80a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     80c:	2b00      	cmp	r3, #0
     80e:	d000      	beq.n	812 <usart_error+0x10>
		descr->usart_cb.error(descr);
     810:	4798      	blx	r3
	}
}
     812:	bd10      	pop	{r4, pc}

00000814 <usart_fill_rx_buffer>:
{
     814:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     816:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     818:	302c      	adds	r0, #44	; 0x2c
     81a:	4b04      	ldr	r3, [pc, #16]	; (82c <usart_fill_rx_buffer+0x18>)
     81c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     81e:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     820:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     822:	2b00      	cmp	r3, #0
     824:	d001      	beq.n	82a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     826:	0020      	movs	r0, r4
     828:	4798      	blx	r3
}
     82a:	bd10      	pop	{r4, pc}
     82c:	00000b1d 	.word	0x00000b1d

00000830 <usart_async_write>:
{
     830:	b570      	push	{r4, r5, r6, lr}
     832:	0004      	movs	r4, r0
     834:	000e      	movs	r6, r1
     836:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     838:	2800      	cmp	r0, #0
     83a:	d01d      	beq.n	878 <usart_async_write+0x48>
     83c:	2900      	cmp	r1, #0
     83e:	d01d      	beq.n	87c <usart_async_write+0x4c>
     840:	0010      	movs	r0, r2
     842:	1e43      	subs	r3, r0, #1
     844:	4198      	sbcs	r0, r3
     846:	223c      	movs	r2, #60	; 0x3c
     848:	32ff      	adds	r2, #255	; 0xff
     84a:	490f      	ldr	r1, [pc, #60]	; (888 <usart_async_write+0x58>)
     84c:	4b0f      	ldr	r3, [pc, #60]	; (88c <usart_async_write+0x5c>)
     84e:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     850:	2344      	movs	r3, #68	; 0x44
     852:	5ae2      	ldrh	r2, [r4, r3]
     854:	3308      	adds	r3, #8
     856:	5ae3      	ldrh	r3, [r4, r3]
     858:	429a      	cmp	r2, r3
     85a:	d111      	bne.n	880 <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
     85c:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     85e:	234c      	movs	r3, #76	; 0x4c
     860:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     862:	2200      	movs	r2, #0
     864:	3b08      	subs	r3, #8
     866:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     868:	3b43      	subs	r3, #67	; 0x43
     86a:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     86c:	0020      	movs	r0, r4
     86e:	3008      	adds	r0, #8
     870:	4b07      	ldr	r3, [pc, #28]	; (890 <usart_async_write+0x60>)
     872:	4798      	blx	r3
	return (int32_t)length;
     874:	0028      	movs	r0, r5
}
     876:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     878:	2000      	movs	r0, #0
     87a:	e7e4      	b.n	846 <usart_async_write+0x16>
     87c:	2000      	movs	r0, #0
     87e:	e7e2      	b.n	846 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     880:	201c      	movs	r0, #28
     882:	4240      	negs	r0, r0
     884:	e7f7      	b.n	876 <usart_async_write+0x46>
     886:	46c0      	nop			; (mov r8, r8)
     888:	000020c4 	.word	0x000020c4
     88c:	00000a79 	.word	0x00000a79
     890:	000010c9 	.word	0x000010c9

00000894 <usart_process_byte_sent>:
{
     894:	b570      	push	{r4, r5, r6, lr}
     896:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     898:	0001      	movs	r1, r0
     89a:	3908      	subs	r1, #8
     89c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     89e:	224c      	movs	r2, #76	; 0x4c
     8a0:	5a8a      	ldrh	r2, [r1, r2]
     8a2:	429a      	cmp	r2, r3
     8a4:	d00c      	beq.n	8c0 <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     8a6:	000a      	movs	r2, r1
     8a8:	6c89      	ldr	r1, [r1, #72]	; 0x48
     8aa:	1c5d      	adds	r5, r3, #1
     8ac:	2044      	movs	r0, #68	; 0x44
     8ae:	5215      	strh	r5, [r2, r0]
     8b0:	5cc9      	ldrb	r1, [r1, r3]
     8b2:	0020      	movs	r0, r4
     8b4:	4b04      	ldr	r3, [pc, #16]	; (8c8 <usart_process_byte_sent+0x34>)
     8b6:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     8b8:	0020      	movs	r0, r4
     8ba:	4b04      	ldr	r3, [pc, #16]	; (8cc <usart_process_byte_sent+0x38>)
     8bc:	4798      	blx	r3
}
     8be:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     8c0:	4b03      	ldr	r3, [pc, #12]	; (8d0 <usart_process_byte_sent+0x3c>)
     8c2:	4798      	blx	r3
}
     8c4:	e7fb      	b.n	8be <usart_process_byte_sent+0x2a>
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	000010c1 	.word	0x000010c1
     8cc:	000010c9 	.word	0x000010c9
     8d0:	000010d1 	.word	0x000010d1

000008d4 <usart_async_read>:
{
     8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8d6:	46ce      	mov	lr, r9
     8d8:	4647      	mov	r7, r8
     8da:	b580      	push	{r7, lr}
     8dc:	b085      	sub	sp, #20
     8de:	0005      	movs	r5, r0
     8e0:	000e      	movs	r6, r1
     8e2:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
     8e4:	2800      	cmp	r0, #0
     8e6:	d015      	beq.n	914 <usart_async_read+0x40>
     8e8:	2900      	cmp	r1, #0
     8ea:	d013      	beq.n	914 <usart_async_read+0x40>
     8ec:	2a00      	cmp	r2, #0
     8ee:	d12a      	bne.n	946 <usart_async_read+0x72>
     8f0:	22ac      	movs	r2, #172	; 0xac
     8f2:	0052      	lsls	r2, r2, #1
     8f4:	4929      	ldr	r1, [pc, #164]	; (99c <usart_async_read+0xc8>)
     8f6:	2000      	movs	r0, #0
     8f8:	4b29      	ldr	r3, [pc, #164]	; (9a0 <usart_async_read+0xcc>)
     8fa:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     8fc:	a803      	add	r0, sp, #12
     8fe:	4b29      	ldr	r3, [pc, #164]	; (9a4 <usart_async_read+0xd0>)
     900:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     902:	0028      	movs	r0, r5
     904:	3034      	adds	r0, #52	; 0x34
     906:	4b28      	ldr	r3, [pc, #160]	; (9a8 <usart_async_read+0xd4>)
     908:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     90a:	a803      	add	r0, sp, #12
     90c:	4b27      	ldr	r3, [pc, #156]	; (9ac <usart_async_read+0xd8>)
     90e:	4798      	blx	r3
	uint16_t                       was_read = 0;
     910:	2500      	movs	r5, #0
	return (int32_t)was_read;
     912:	e03c      	b.n	98e <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     914:	22ac      	movs	r2, #172	; 0xac
     916:	0052      	lsls	r2, r2, #1
     918:	4920      	ldr	r1, [pc, #128]	; (99c <usart_async_read+0xc8>)
     91a:	2000      	movs	r0, #0
     91c:	4b20      	ldr	r3, [pc, #128]	; (9a0 <usart_async_read+0xcc>)
     91e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     920:	a803      	add	r0, sp, #12
     922:	4b20      	ldr	r3, [pc, #128]	; (9a4 <usart_async_read+0xd0>)
     924:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     926:	3534      	adds	r5, #52	; 0x34
     928:	0028      	movs	r0, r5
     92a:	9501      	str	r5, [sp, #4]
     92c:	4b1e      	ldr	r3, [pc, #120]	; (9a8 <usart_async_read+0xd4>)
     92e:	4798      	blx	r3
     930:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     932:	a803      	add	r0, sp, #12
     934:	4b1d      	ldr	r3, [pc, #116]	; (9ac <usart_async_read+0xd8>)
     936:	4798      	blx	r3
	uint16_t                       was_read = 0;
     938:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     93a:	4643      	mov	r3, r8
     93c:	2b00      	cmp	r3, #0
     93e:	d026      	beq.n	98e <usart_async_read+0xba>
     940:	2f00      	cmp	r7, #0
     942:	d116      	bne.n	972 <usart_async_read+0x9e>
     944:	e023      	b.n	98e <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     946:	22ac      	movs	r2, #172	; 0xac
     948:	0052      	lsls	r2, r2, #1
     94a:	4914      	ldr	r1, [pc, #80]	; (99c <usart_async_read+0xc8>)
     94c:	2001      	movs	r0, #1
     94e:	4b14      	ldr	r3, [pc, #80]	; (9a0 <usart_async_read+0xcc>)
     950:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     952:	a803      	add	r0, sp, #12
     954:	4b13      	ldr	r3, [pc, #76]	; (9a4 <usart_async_read+0xd0>)
     956:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     958:	3534      	adds	r5, #52	; 0x34
     95a:	0028      	movs	r0, r5
     95c:	9501      	str	r5, [sp, #4]
     95e:	4b12      	ldr	r3, [pc, #72]	; (9a8 <usart_async_read+0xd4>)
     960:	4798      	blx	r3
     962:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     964:	a803      	add	r0, sp, #12
     966:	4b11      	ldr	r3, [pc, #68]	; (9ac <usart_async_read+0xd8>)
     968:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     96a:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
     96c:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     96e:	2b00      	cmp	r3, #0
     970:	d00d      	beq.n	98e <usart_async_read+0xba>
{
     972:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     974:	4b0e      	ldr	r3, [pc, #56]	; (9b0 <usart_async_read+0xdc>)
     976:	4699      	mov	r9, r3
     978:	1c65      	adds	r5, r4, #1
     97a:	b2ad      	uxth	r5, r5
     97c:	1931      	adds	r1, r6, r4
     97e:	9801      	ldr	r0, [sp, #4]
     980:	47c8      	blx	r9
     982:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     984:	4544      	cmp	r4, r8
     986:	d202      	bcs.n	98e <usart_async_read+0xba>
     988:	b2a3      	uxth	r3, r4
     98a:	429f      	cmp	r7, r3
     98c:	d8f4      	bhi.n	978 <usart_async_read+0xa4>
}
     98e:	0028      	movs	r0, r5
     990:	b005      	add	sp, #20
     992:	bc0c      	pop	{r2, r3}
     994:	4690      	mov	r8, r2
     996:	4699      	mov	r9, r3
     998:	bdf0      	pop	{r4, r5, r6, r7, pc}
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	000020c4 	.word	0x000020c4
     9a0:	00000a79 	.word	0x00000a79
     9a4:	0000069d 	.word	0x0000069d
     9a8:	00000b5d 	.word	0x00000b5d
     9ac:	000006ab 	.word	0x000006ab
     9b0:	00000ad5 	.word	0x00000ad5

000009b4 <usart_async_init>:
{
     9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9b6:	0004      	movs	r4, r0
     9b8:	000d      	movs	r5, r1
     9ba:	0016      	movs	r6, r2
     9bc:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     9be:	2800      	cmp	r0, #0
     9c0:	d026      	beq.n	a10 <usart_async_init+0x5c>
     9c2:	2900      	cmp	r1, #0
     9c4:	d026      	beq.n	a14 <usart_async_init+0x60>
     9c6:	2a00      	cmp	r2, #0
     9c8:	d026      	beq.n	a18 <usart_async_init+0x64>
     9ca:	0018      	movs	r0, r3
     9cc:	1e43      	subs	r3, r0, #1
     9ce:	4198      	sbcs	r0, r3
     9d0:	223a      	movs	r2, #58	; 0x3a
     9d2:	4914      	ldr	r1, [pc, #80]	; (a24 <usart_async_init+0x70>)
     9d4:	4b14      	ldr	r3, [pc, #80]	; (a28 <usart_async_init+0x74>)
     9d6:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     9d8:	0020      	movs	r0, r4
     9da:	3034      	adds	r0, #52	; 0x34
     9dc:	003a      	movs	r2, r7
     9de:	0031      	movs	r1, r6
     9e0:	4b12      	ldr	r3, [pc, #72]	; (a2c <usart_async_init+0x78>)
     9e2:	4798      	blx	r3
     9e4:	2800      	cmp	r0, #0
     9e6:	d119      	bne.n	a1c <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
     9e8:	0020      	movs	r0, r4
     9ea:	3008      	adds	r0, #8
     9ec:	0029      	movs	r1, r5
     9ee:	4b10      	ldr	r3, [pc, #64]	; (a30 <usart_async_init+0x7c>)
     9f0:	4798      	blx	r3
	if (init_status) {
     9f2:	2800      	cmp	r0, #0
     9f4:	d10b      	bne.n	a0e <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     9f6:	4b0f      	ldr	r3, [pc, #60]	; (a34 <usart_async_init+0x80>)
     9f8:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     9fa:	4b0f      	ldr	r3, [pc, #60]	; (a38 <usart_async_init+0x84>)
     9fc:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     9fe:	4b0f      	ldr	r3, [pc, #60]	; (a3c <usart_async_init+0x88>)
     a00:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     a02:	4b0f      	ldr	r3, [pc, #60]	; (a40 <usart_async_init+0x8c>)
     a04:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     a06:	4b0f      	ldr	r3, [pc, #60]	; (a44 <usart_async_init+0x90>)
     a08:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     a0a:	4b0f      	ldr	r3, [pc, #60]	; (a48 <usart_async_init+0x94>)
     a0c:	6163      	str	r3, [r4, #20]
}
     a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     a10:	2000      	movs	r0, #0
     a12:	e7dd      	b.n	9d0 <usart_async_init+0x1c>
     a14:	2000      	movs	r0, #0
     a16:	e7db      	b.n	9d0 <usart_async_init+0x1c>
     a18:	2000      	movs	r0, #0
     a1a:	e7d9      	b.n	9d0 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     a1c:	200d      	movs	r0, #13
     a1e:	4240      	negs	r0, r0
     a20:	e7f5      	b.n	a0e <usart_async_init+0x5a>
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	000020c4 	.word	0x000020c4
     a28:	00000a79 	.word	0x00000a79
     a2c:	00000a81 	.word	0x00000a81
     a30:	00001031 	.word	0x00001031
     a34:	000008d5 	.word	0x000008d5
     a38:	00000831 	.word	0x00000831
     a3c:	00000895 	.word	0x00000895
     a40:	00000815 	.word	0x00000815
     a44:	000007f1 	.word	0x000007f1
     a48:	00000803 	.word	0x00000803

00000a4c <usart_async_enable>:
{
     a4c:	b510      	push	{r4, lr}
     a4e:	0004      	movs	r4, r0
	ASSERT(descr);
     a50:	1e43      	subs	r3, r0, #1
     a52:	4198      	sbcs	r0, r3
     a54:	b2c0      	uxtb	r0, r0
     a56:	2261      	movs	r2, #97	; 0x61
     a58:	4904      	ldr	r1, [pc, #16]	; (a6c <usart_async_enable+0x20>)
     a5a:	4b05      	ldr	r3, [pc, #20]	; (a70 <usart_async_enable+0x24>)
     a5c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     a5e:	0020      	movs	r0, r4
     a60:	3008      	adds	r0, #8
     a62:	4b04      	ldr	r3, [pc, #16]	; (a74 <usart_async_enable+0x28>)
     a64:	4798      	blx	r3
}
     a66:	2000      	movs	r0, #0
     a68:	bd10      	pop	{r4, pc}
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	000020c4 	.word	0x000020c4
     a70:	00000a79 	.word	0x00000a79
     a74:	000010ad 	.word	0x000010ad

00000a78 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     a78:	2800      	cmp	r0, #0
     a7a:	d100      	bne.n	a7e <assert+0x6>
		__asm("BKPT #0");
     a7c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     a7e:	4770      	bx	lr

00000a80 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     a80:	b570      	push	{r4, r5, r6, lr}
     a82:	0004      	movs	r4, r0
     a84:	000e      	movs	r6, r1
     a86:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     a88:	2800      	cmp	r0, #0
     a8a:	d00b      	beq.n	aa4 <ringbuffer_init+0x24>
     a8c:	2900      	cmp	r1, #0
     a8e:	d018      	beq.n	ac2 <ringbuffer_init+0x42>
     a90:	2001      	movs	r0, #1
     a92:	2a00      	cmp	r2, #0
     a94:	d107      	bne.n	aa6 <ringbuffer_init+0x26>
     a96:	2228      	movs	r2, #40	; 0x28
     a98:	490c      	ldr	r1, [pc, #48]	; (acc <ringbuffer_init+0x4c>)
     a9a:	2000      	movs	r0, #0
     a9c:	4b0c      	ldr	r3, [pc, #48]	; (ad0 <ringbuffer_init+0x50>)
     a9e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     aa0:	1e6b      	subs	r3, r5, #1
     aa2:	e007      	b.n	ab4 <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
     aa4:	2000      	movs	r0, #0
     aa6:	2228      	movs	r2, #40	; 0x28
     aa8:	4908      	ldr	r1, [pc, #32]	; (acc <ringbuffer_init+0x4c>)
     aaa:	4b09      	ldr	r3, [pc, #36]	; (ad0 <ringbuffer_init+0x50>)
     aac:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
     aae:	1e6b      	subs	r3, r5, #1
     ab0:	422b      	tst	r3, r5
     ab2:	d108      	bne.n	ac6 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     ab4:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     ab6:	2300      	movs	r3, #0
     ab8:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     aba:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     abc:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     abe:	2000      	movs	r0, #0
}
     ac0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     ac2:	2000      	movs	r0, #0
     ac4:	e7ef      	b.n	aa6 <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
     ac6:	200d      	movs	r0, #13
     ac8:	4240      	negs	r0, r0
     aca:	e7f9      	b.n	ac0 <ringbuffer_init+0x40>
     acc:	000020e4 	.word	0x000020e4
     ad0:	00000a79 	.word	0x00000a79

00000ad4 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     ad4:	b570      	push	{r4, r5, r6, lr}
     ad6:	0004      	movs	r4, r0
     ad8:	000d      	movs	r5, r1
	ASSERT(rb && data);
     ada:	2800      	cmp	r0, #0
     adc:	d015      	beq.n	b0a <ringbuffer_get+0x36>
     ade:	0008      	movs	r0, r1
     ae0:	1e43      	subs	r3, r0, #1
     ae2:	4198      	sbcs	r0, r3
     ae4:	b2c0      	uxtb	r0, r0
     ae6:	2240      	movs	r2, #64	; 0x40
     ae8:	490a      	ldr	r1, [pc, #40]	; (b14 <ringbuffer_get+0x40>)
     aea:	4b0b      	ldr	r3, [pc, #44]	; (b18 <ringbuffer_get+0x44>)
     aec:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     aee:	68a3      	ldr	r3, [r4, #8]
     af0:	68e2      	ldr	r2, [r4, #12]
     af2:	429a      	cmp	r2, r3
     af4:	d00b      	beq.n	b0e <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
     af6:	6862      	ldr	r2, [r4, #4]
     af8:	4013      	ands	r3, r2
     afa:	6822      	ldr	r2, [r4, #0]
     afc:	5cd3      	ldrb	r3, [r2, r3]
     afe:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     b00:	68a3      	ldr	r3, [r4, #8]
     b02:	3301      	adds	r3, #1
     b04:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     b06:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     b08:	bd70      	pop	{r4, r5, r6, pc}
     b0a:	2000      	movs	r0, #0
     b0c:	e7eb      	b.n	ae6 <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
     b0e:	200a      	movs	r0, #10
     b10:	4240      	negs	r0, r0
     b12:	e7f9      	b.n	b08 <ringbuffer_get+0x34>
     b14:	000020e4 	.word	0x000020e4
     b18:	00000a79 	.word	0x00000a79

00000b1c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     b1c:	b570      	push	{r4, r5, r6, lr}
     b1e:	0004      	movs	r4, r0
     b20:	000d      	movs	r5, r1
	ASSERT(rb);
     b22:	1e43      	subs	r3, r0, #1
     b24:	4198      	sbcs	r0, r3
     b26:	b2c0      	uxtb	r0, r0
     b28:	2251      	movs	r2, #81	; 0x51
     b2a:	490a      	ldr	r1, [pc, #40]	; (b54 <ringbuffer_put+0x38>)
     b2c:	4b0a      	ldr	r3, [pc, #40]	; (b58 <ringbuffer_put+0x3c>)
     b2e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     b30:	6863      	ldr	r3, [r4, #4]
     b32:	68e2      	ldr	r2, [r4, #12]
     b34:	4013      	ands	r3, r2
     b36:	6822      	ldr	r2, [r4, #0]
     b38:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     b3a:	68e3      	ldr	r3, [r4, #12]
     b3c:	6861      	ldr	r1, [r4, #4]
     b3e:	68a2      	ldr	r2, [r4, #8]
     b40:	1a9a      	subs	r2, r3, r2
     b42:	428a      	cmp	r2, r1
     b44:	d901      	bls.n	b4a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     b46:	1a59      	subs	r1, r3, r1
     b48:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     b4a:	3301      	adds	r3, #1
     b4c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     b4e:	2000      	movs	r0, #0
     b50:	bd70      	pop	{r4, r5, r6, pc}
     b52:	46c0      	nop			; (mov r8, r8)
     b54:	000020e4 	.word	0x000020e4
     b58:	00000a79 	.word	0x00000a79

00000b5c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     b5c:	b510      	push	{r4, lr}
     b5e:	0004      	movs	r4, r0
	ASSERT(rb);
     b60:	1e43      	subs	r3, r0, #1
     b62:	4198      	sbcs	r0, r3
     b64:	b2c0      	uxtb	r0, r0
     b66:	2267      	movs	r2, #103	; 0x67
     b68:	4903      	ldr	r1, [pc, #12]	; (b78 <ringbuffer_num+0x1c>)
     b6a:	4b04      	ldr	r3, [pc, #16]	; (b7c <ringbuffer_num+0x20>)
     b6c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     b6e:	68e0      	ldr	r0, [r4, #12]
     b70:	68a3      	ldr	r3, [r4, #8]
     b72:	1ac0      	subs	r0, r0, r3
}
     b74:	bd10      	pop	{r4, pc}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	000020e4 	.word	0x000020e4
     b7c:	00000a79 	.word	0x00000a79

00000b80 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     b80:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     b82:	4a06      	ldr	r2, [pc, #24]	; (b9c <_sbrk+0x1c>)
     b84:	6812      	ldr	r2, [r2, #0]
     b86:	2a00      	cmp	r2, #0
     b88:	d004      	beq.n	b94 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     b8a:	4a04      	ldr	r2, [pc, #16]	; (b9c <_sbrk+0x1c>)
     b8c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     b8e:	18c3      	adds	r3, r0, r3
     b90:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     b92:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     b94:	4902      	ldr	r1, [pc, #8]	; (ba0 <_sbrk+0x20>)
     b96:	4a01      	ldr	r2, [pc, #4]	; (b9c <_sbrk+0x1c>)
     b98:	6011      	str	r1, [r2, #0]
     b9a:	e7f6      	b.n	b8a <_sbrk+0xa>
     b9c:	200000c0 	.word	0x200000c0
     ba0:	20002188 	.word	0x20002188

00000ba4 <_go_to_sleep>:
  __ASM volatile ("dsb 0xF":::"memory");
     ba4:	f3bf 8f4f 	dsb	sy
 * \brief Put MCU to sleep
 */
void _go_to_sleep(void)
{
	__DSB();
	__WFI();
     ba8:	bf30      	wfi
}
     baa:	4770      	bx	lr

00000bac <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     bac:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     bae:	4b06      	ldr	r3, [pc, #24]	; (bc8 <_init_chip+0x1c>)
     bb0:	685a      	ldr	r2, [r3, #4]
     bb2:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     bb4:	4b05      	ldr	r3, [pc, #20]	; (bcc <_init_chip+0x20>)
     bb6:	4798      	blx	r3
	_sysctrl_init_sources();
     bb8:	4b05      	ldr	r3, [pc, #20]	; (bd0 <_init_chip+0x24>)
     bba:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     bbc:	4b05      	ldr	r3, [pc, #20]	; (bd4 <_init_chip+0x28>)
     bbe:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     bc0:	20ff      	movs	r0, #255	; 0xff
     bc2:	4b05      	ldr	r3, [pc, #20]	; (bd8 <_init_chip+0x2c>)
     bc4:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     bc6:	bd10      	pop	{r4, pc}
     bc8:	41004000 	.word	0x41004000
     bcc:	00000dfd 	.word	0x00000dfd
     bd0:	00001145 	.word	0x00001145
     bd4:	00001189 	.word	0x00001189
     bd8:	00000d89 	.word	0x00000d89

00000bdc <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     bdc:	4a22      	ldr	r2, [pc, #136]	; (c68 <_ext_irq_init+0x8c>)
     bde:	7853      	ldrb	r3, [r2, #1]
     be0:	09db      	lsrs	r3, r3, #7
     be2:	d1fc      	bne.n	bde <_ext_irq_init+0x2>
     be4:	4a20      	ldr	r2, [pc, #128]	; (c68 <_ext_irq_init+0x8c>)
     be6:	7853      	ldrb	r3, [r2, #1]
     be8:	09db      	lsrs	r3, r3, #7
     bea:	d1fc      	bne.n	be6 <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     bec:	4b1e      	ldr	r3, [pc, #120]	; (c68 <_ext_irq_init+0x8c>)
     bee:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     bf0:	079b      	lsls	r3, r3, #30
     bf2:	d50a      	bpl.n	c0a <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     bf4:	2200      	movs	r2, #0
     bf6:	4b1c      	ldr	r3, [pc, #112]	; (c68 <_ext_irq_init+0x8c>)
     bf8:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     bfa:	001a      	movs	r2, r3
     bfc:	7853      	ldrb	r3, [r2, #1]
     bfe:	09db      	lsrs	r3, r3, #7
     c00:	d1fc      	bne.n	bfc <_ext_irq_init+0x20>
     c02:	4a19      	ldr	r2, [pc, #100]	; (c68 <_ext_irq_init+0x8c>)
     c04:	7853      	ldrb	r3, [r2, #1]
     c06:	09db      	lsrs	r3, r3, #7
     c08:	d1fc      	bne.n	c04 <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
     c0a:	2201      	movs	r2, #1
     c0c:	4b16      	ldr	r3, [pc, #88]	; (c68 <_ext_irq_init+0x8c>)
     c0e:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c10:	001a      	movs	r2, r3
     c12:	7853      	ldrb	r3, [r2, #1]
     c14:	09db      	lsrs	r3, r3, #7
     c16:	d1fc      	bne.n	c12 <_ext_irq_init+0x36>
     c18:	4a13      	ldr	r2, [pc, #76]	; (c68 <_ext_irq_init+0x8c>)
     c1a:	7853      	ldrb	r3, [r2, #1]
     c1c:	09db      	lsrs	r3, r3, #7
     c1e:	d1fc      	bne.n	c1a <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     c20:	4b11      	ldr	r3, [pc, #68]	; (c68 <_ext_irq_init+0x8c>)
     c22:	2200      	movs	r2, #0
     c24:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     c26:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     c28:	2180      	movs	r1, #128	; 0x80
     c2a:	0209      	lsls	r1, r1, #8
     c2c:	6159      	str	r1, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     c2e:	619a      	str	r2, [r3, #24]
     c30:	22a0      	movs	r2, #160	; 0xa0
     c32:	0612      	lsls	r2, r2, #24
     c34:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     c36:	781a      	ldrb	r2, [r3, #0]
     c38:	2102      	movs	r1, #2
     c3a:	430a      	orrs	r2, r1
     c3c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c3e:	001a      	movs	r2, r3
     c40:	7853      	ldrb	r3, [r2, #1]
     c42:	09db      	lsrs	r3, r3, #7
     c44:	d1fc      	bne.n	c40 <_ext_irq_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c46:	4b09      	ldr	r3, [pc, #36]	; (c6c <_ext_irq_init+0x90>)
     c48:	2210      	movs	r2, #16
     c4a:	2180      	movs	r1, #128	; 0x80
     c4c:	505a      	str	r2, [r3, r1]
     c4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c52:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c56:	3101      	adds	r1, #1
     c58:	31ff      	adds	r1, #255	; 0xff
     c5a:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c5c:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     c5e:	4b04      	ldr	r3, [pc, #16]	; (c70 <_ext_irq_init+0x94>)
     c60:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     c62:	2000      	movs	r0, #0
     c64:	4770      	bx	lr
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	40001800 	.word	0x40001800
     c6c:	e000e100 	.word	0xe000e100
     c70:	200000c4 	.word	0x200000c4

00000c74 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
     c74:	280f      	cmp	r0, #15
     c76:	d002      	beq.n	c7e <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
     c78:	200d      	movs	r0, #13
     c7a:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
     c7c:	4770      	bx	lr
	if (enable) {
     c7e:	2900      	cmp	r1, #0
     c80:	d106      	bne.n	c90 <_ext_irq_enable+0x1c>
	((Eic *)hw)->INTENCLR.reg = mask;
     c82:	4b06      	ldr	r3, [pc, #24]	; (c9c <_ext_irq_enable+0x28>)
     c84:	2280      	movs	r2, #128	; 0x80
     c86:	0212      	lsls	r2, r2, #8
     c88:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     c8a:	611a      	str	r2, [r3, #16]
	return ERR_NONE;
     c8c:	2000      	movs	r0, #0
     c8e:	e7f5      	b.n	c7c <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
     c90:	2280      	movs	r2, #128	; 0x80
     c92:	0212      	lsls	r2, r2, #8
     c94:	4b01      	ldr	r3, [pc, #4]	; (c9c <_ext_irq_enable+0x28>)
     c96:	60da      	str	r2, [r3, #12]
     c98:	2000      	movs	r0, #0
     c9a:	e7ef      	b.n	c7c <_ext_irq_enable+0x8>
     c9c:	40001800 	.word	0x40001800

00000ca0 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ca2:	46ce      	mov	lr, r9
     ca4:	4647      	mov	r7, r8
     ca6:	b580      	push	{r7, lr}
     ca8:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
     caa:	4b31      	ldr	r3, [pc, #196]	; (d70 <EIC_Handler+0xd0>)
     cac:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     cae:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     cb0:	400a      	ands	r2, r1
     cb2:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     cb4:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     cb6:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     cb8:	4b2e      	ldr	r3, [pc, #184]	; (d74 <EIC_Handler+0xd4>)
     cba:	6818      	ldr	r0, [r3, #0]
     cbc:	1e43      	subs	r3, r0, #1
     cbe:	4198      	sbcs	r0, r3
     cc0:	b2c0      	uxtb	r0, r0
     cc2:	22d2      	movs	r2, #210	; 0xd2
     cc4:	492c      	ldr	r1, [pc, #176]	; (d78 <EIC_Handler+0xd8>)
     cc6:	4b2d      	ldr	r3, [pc, #180]	; (d7c <EIC_Handler+0xdc>)
     cc8:	4798      	blx	r3

	while (flags) {
     cca:	9b01      	ldr	r3, [sp, #4]
     ccc:	2b00      	cmp	r3, #0
     cce:	d049      	beq.n	d64 <EIC_Handler+0xc4>
     cd0:	2301      	movs	r3, #1
     cd2:	425b      	negs	r3, r3
     cd4:	4699      	mov	r9, r3
		pos = ffs(flags) - 1;
     cd6:	4b2a      	ldr	r3, [pc, #168]	; (d80 <EIC_Handler+0xe0>)
     cd8:	4698      	mov	r8, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
     cda:	4f26      	ldr	r7, [pc, #152]	; (d74 <EIC_Handler+0xd4>)
				if (_map[middle].extint == pos) {
     cdc:	4d29      	ldr	r5, [pc, #164]	; (d84 <EIC_Handler+0xe4>)
     cde:	e03a      	b.n	d56 <EIC_Handler+0xb6>
					upper = middle - 1;
     ce0:	3a01      	subs	r2, #1
     ce2:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
     ce4:	42b1      	cmp	r1, r6
     ce6:	d80c      	bhi.n	d02 <EIC_Handler+0x62>
				middle = (upper + lower) >> 1;
     ce8:	1873      	adds	r3, r6, r1
     cea:	105b      	asrs	r3, r3, #1
     cec:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
     cee:	4003      	ands	r3, r0
     cf0:	00db      	lsls	r3, r3, #3
     cf2:	5d5b      	ldrb	r3, [r3, r5]
     cf4:	42a3      	cmp	r3, r4
     cf6:	d008      	beq.n	d0a <EIC_Handler+0x6a>
				if (_map[middle].extint < pos) {
     cf8:	429c      	cmp	r4, r3
     cfa:	ddf1      	ble.n	ce0 <EIC_Handler+0x40>
					lower = middle + 1;
     cfc:	3201      	adds	r2, #1
     cfe:	b2d1      	uxtb	r1, r2
     d00:	e7f0      	b.n	ce4 <EIC_Handler+0x44>
			if (INVALID_PIN_NUMBER != pin) {
     d02:	464b      	mov	r3, r9
     d04:	3301      	adds	r3, #1
     d06:	d005      	beq.n	d14 <EIC_Handler+0x74>
     d08:	e001      	b.n	d0e <EIC_Handler+0x6e>
     d0a:	230f      	movs	r3, #15
     d0c:	4699      	mov	r9, r3
				callback(pin);
     d0e:	4648      	mov	r0, r9
     d10:	683b      	ldr	r3, [r7, #0]
     d12:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     d14:	9b01      	ldr	r3, [sp, #4]
     d16:	2201      	movs	r2, #1
     d18:	40a2      	lsls	r2, r4
     d1a:	4393      	bics	r3, r2
     d1c:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     d1e:	9801      	ldr	r0, [sp, #4]
     d20:	4b17      	ldr	r3, [pc, #92]	; (d80 <EIC_Handler+0xe0>)
     d22:	4798      	blx	r3
     d24:	3801      	subs	r0, #1
     d26:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     d28:	1c63      	adds	r3, r4, #1
     d2a:	d00a      	beq.n	d42 <EIC_Handler+0xa2>
				if (_map[middle].extint == pos) {
     d2c:	2c0f      	cmp	r4, #15
     d2e:	d005      	beq.n	d3c <EIC_Handler+0x9c>
     d30:	230f      	movs	r3, #15
     d32:	2200      	movs	r2, #0
     d34:	2601      	movs	r6, #1
     d36:	2100      	movs	r1, #0
     d38:	20ff      	movs	r0, #255	; 0xff
     d3a:	e7dd      	b.n	cf8 <EIC_Handler+0x58>
     d3c:	230f      	movs	r3, #15
     d3e:	4699      	mov	r9, r3
     d40:	e7e5      	b.n	d0e <EIC_Handler+0x6e>
	return ((Eic *)hw)->INTFLAG.reg;
     d42:	4b0b      	ldr	r3, [pc, #44]	; (d70 <EIC_Handler+0xd0>)
     d44:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     d46:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     d48:	400a      	ands	r2, r1
     d4a:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     d4c:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     d4e:	611a      	str	r2, [r3, #16]
	while (flags) {
     d50:	9b01      	ldr	r3, [sp, #4]
     d52:	2b00      	cmp	r3, #0
     d54:	d006      	beq.n	d64 <EIC_Handler+0xc4>
		pos = ffs(flags) - 1;
     d56:	9801      	ldr	r0, [sp, #4]
     d58:	47c0      	blx	r8
     d5a:	3801      	subs	r0, #1
     d5c:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     d5e:	1c63      	adds	r3, r4, #1
     d60:	d1e4      	bne.n	d2c <EIC_Handler+0x8c>
     d62:	e7ee      	b.n	d42 <EIC_Handler+0xa2>
	}
}
     d64:	b003      	add	sp, #12
     d66:	bc0c      	pop	{r2, r3}
     d68:	4690      	mov	r8, r2
     d6a:	4699      	mov	r9, r3
     d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	40001800 	.word	0x40001800
     d74:	200000c4 	.word	0x200000c4
     d78:	00002110 	.word	0x00002110
     d7c:	00000a79 	.word	0x00000a79
     d80:	00001791 	.word	0x00001791
     d84:	00002108 	.word	0x00002108

00000d88 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     d88:	07c3      	lsls	r3, r0, #31
     d8a:	d50a      	bpl.n	da2 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     d8c:	4b0b      	ldr	r3, [pc, #44]	; (dbc <_gclk_init_generators_by_fref+0x34>)
     d8e:	2280      	movs	r2, #128	; 0x80
     d90:	0052      	lsls	r2, r2, #1
     d92:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     d94:	2283      	movs	r2, #131	; 0x83
     d96:	0252      	lsls	r2, r2, #9
     d98:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     d9a:	001a      	movs	r2, r3
     d9c:	7853      	ldrb	r3, [r2, #1]
     d9e:	09db      	lsrs	r3, r3, #7
     da0:	d1fc      	bne.n	d9c <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     da2:	0703      	lsls	r3, r0, #28
     da4:	d509      	bpl.n	dba <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
     da6:	4b05      	ldr	r3, [pc, #20]	; (dbc <_gclk_init_generators_by_fref+0x34>)
     da8:	2204      	movs	r2, #4
     daa:	32ff      	adds	r2, #255	; 0xff
     dac:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     dae:	4a04      	ldr	r2, [pc, #16]	; (dc0 <_gclk_init_generators_by_fref+0x38>)
     db0:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     db2:	001a      	movs	r2, r3
     db4:	7853      	ldrb	r3, [r2, #1]
     db6:	09db      	lsrs	r3, r3, #7
     db8:	d1fc      	bne.n	db4 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     dba:	4770      	bx	lr
     dbc:	40000c00 	.word	0x40000c00
     dc0:	00210303 	.word	0x00210303

00000dc4 <_set_sleep_mode>:
/**
 * \brief Set the sleep mode for the device
 */
int32_t _set_sleep_mode(const uint8_t mode)
{
	switch (mode) {
     dc4:	2802      	cmp	r0, #2
     dc6:	d904      	bls.n	dd2 <_set_sleep_mode+0xe>
     dc8:	2803      	cmp	r0, #3
     dca:	d00b      	beq.n	de4 <_set_sleep_mode+0x20>
		return ERR_NONE;
	case 3:
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
		return ERR_NONE;
	default:
		return ERR_INVALID_ARG;
     dcc:	200d      	movs	r0, #13
     dce:	4240      	negs	r0, r0
     dd0:	e007      	b.n	de2 <_set_sleep_mode+0x1e>
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
     dd2:	4a08      	ldr	r2, [pc, #32]	; (df4 <_set_sleep_mode+0x30>)
     dd4:	6913      	ldr	r3, [r2, #16]
     dd6:	2104      	movs	r1, #4
     dd8:	438b      	bics	r3, r1
     dda:	6113      	str	r3, [r2, #16]
		PM->SLEEP.reg = mode;
     ddc:	4b06      	ldr	r3, [pc, #24]	; (df8 <_set_sleep_mode+0x34>)
     dde:	7058      	strb	r0, [r3, #1]
		return ERR_NONE;
     de0:	2000      	movs	r0, #0
	}
}
     de2:	4770      	bx	lr
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
     de4:	4a03      	ldr	r2, [pc, #12]	; (df4 <_set_sleep_mode+0x30>)
     de6:	6913      	ldr	r3, [r2, #16]
     de8:	2104      	movs	r1, #4
     dea:	430b      	orrs	r3, r1
     dec:	6113      	str	r3, [r2, #16]
		return ERR_NONE;
     dee:	2000      	movs	r0, #0
     df0:	e7f7      	b.n	de2 <_set_sleep_mode+0x1e>
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	e000ed00 	.word	0xe000ed00
     df8:	40000400 	.word	0x40000400

00000dfc <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     dfc:	4b06      	ldr	r3, [pc, #24]	; (e18 <_pm_init+0x1c>)
     dfe:	7a1a      	ldrb	r2, [r3, #8]
     e00:	b2d2      	uxtb	r2, r2
     e02:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     e04:	7a5a      	ldrb	r2, [r3, #9]
     e06:	b2d2      	uxtb	r2, r2
     e08:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     e0a:	7a9a      	ldrb	r2, [r3, #10]
     e0c:	b2d2      	uxtb	r2, r2
     e0e:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     e10:	7ada      	ldrb	r2, [r3, #11]
     e12:	b2d2      	uxtb	r2, r2
     e14:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     e16:	4770      	bx	lr
     e18:	40000400 	.word	0x40000400

00000e1c <_calendar_register_callback>:

/**
 * \brief Registers callback for the specified callback type
 */
int32_t _calendar_register_callback(struct calendar_dev *const dev, calendar_drv_cb_alarm_t callback)
{
     e1c:	b570      	push	{r4, r5, r6, lr}
     e1e:	0004      	movs	r4, r0
     e20:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     e22:	2800      	cmp	r0, #0
     e24:	d015      	beq.n	e52 <_calendar_register_callback+0x36>
     e26:	6800      	ldr	r0, [r0, #0]
     e28:	1e43      	subs	r3, r0, #1
     e2a:	4198      	sbcs	r0, r3
     e2c:	b2c0      	uxtb	r0, r0
     e2e:	2233      	movs	r2, #51	; 0x33
     e30:	490f      	ldr	r1, [pc, #60]	; (e70 <_calendar_register_callback+0x54>)
     e32:	4b10      	ldr	r3, [pc, #64]	; (e74 <_calendar_register_callback+0x58>)
     e34:	4798      	blx	r3

	/* Check callback */
	if (callback != NULL) {
     e36:	2d00      	cmp	r5, #0
     e38:	d00d      	beq.n	e56 <_calendar_register_callback+0x3a>
		/* register the callback */
		dev->callback = callback;
     e3a:	6065      	str	r5, [r4, #4]
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e3c:	4b0e      	ldr	r3, [pc, #56]	; (e78 <_calendar_register_callback+0x5c>)
     e3e:	2208      	movs	r2, #8
     e40:	21c0      	movs	r1, #192	; 0xc0
     e42:	0049      	lsls	r1, r1, #1
     e44:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e46:	601a      	str	r2, [r3, #0]
		/* enable RTC_IRQn */
		NVIC_ClearPendingIRQ(RTC_IRQn);
		NVIC_EnableIRQ(RTC_IRQn);

		/* enable cmp */
		hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
     e48:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     e4a:	3a07      	subs	r2, #7
     e4c:	71da      	strb	r2, [r3, #7]
		/* disable RTC_IRQn */
		NVIC_DisableIRQ(RTC_IRQn);
	}

	return ERR_NONE;
}
     e4e:	2000      	movs	r0, #0
     e50:	bd70      	pop	{r4, r5, r6, pc}
     e52:	2000      	movs	r0, #0
     e54:	e7eb      	b.n	e2e <_calendar_register_callback+0x12>
		hri_rtcmode0_clear_INTEN_CMP0_bit(dev->hw);
     e56:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_CMP0;
     e58:	2201      	movs	r2, #1
     e5a:	719a      	strb	r2, [r3, #6]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e5c:	2108      	movs	r1, #8
     e5e:	2380      	movs	r3, #128	; 0x80
     e60:	4a05      	ldr	r2, [pc, #20]	; (e78 <_calendar_register_callback+0x5c>)
     e62:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
     e64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e68:	f3bf 8f6f 	isb	sy
     e6c:	e7ef      	b.n	e4e <_calendar_register_callback+0x32>
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	00002128 	.word	0x00002128
     e74:	00000a79 	.word	0x00000a79
     e78:	e000e100 	.word	0xe000e100

00000e7c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
     e7c:	b510      	push	{r4, lr}
     e7e:	1e04      	subs	r4, r0, #0
	uint16_t register_value;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     e80:	d036      	beq.n	ef0 <_calendar_init+0x74>
     e82:	6800      	ldr	r0, [r0, #0]
     e84:	1e43      	subs	r3, r0, #1
     e86:	4198      	sbcs	r0, r3
     e88:	b2c0      	uxtb	r0, r0
     e8a:	2278      	movs	r2, #120	; 0x78
     e8c:	4919      	ldr	r1, [pc, #100]	; (ef4 <_calendar_init+0x78>)
     e8e:	4b1a      	ldr	r3, [pc, #104]	; (ef8 <_calendar_init+0x7c>)
     e90:	4798      	blx	r3

	_rtc_dev = dev;
     e92:	4b1a      	ldr	r3, [pc, #104]	; (efc <_calendar_init+0x80>)
     e94:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw);
     e96:	6822      	ldr	r2, [r4, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     e98:	7a93      	ldrb	r3, [r2, #10]
     e9a:	09db      	lsrs	r3, r3, #7
     e9c:	d1fc      	bne.n	e98 <_calendar_init+0x1c>
     e9e:	7a93      	ldrb	r3, [r2, #10]
     ea0:	09db      	lsrs	r3, r3, #7
     ea2:	d1fc      	bne.n	e9e <_calendar_init+0x22>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
     ea4:	8813      	ldrh	r3, [r2, #0]
	if (hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw)) {
     ea6:	079b      	lsls	r3, r3, #30
     ea8:	d50a      	bpl.n	ec0 <_calendar_init+0x44>
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     eaa:	8813      	ldrh	r3, [r2, #0]
     eac:	2102      	movs	r1, #2
     eae:	438b      	bics	r3, r1
     eb0:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     eb2:	7a93      	ldrb	r3, [r2, #10]
     eb4:	09db      	lsrs	r3, r3, #7
     eb6:	d1fc      	bne.n	eb2 <_calendar_init+0x36>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw);
     eb8:	6822      	ldr	r2, [r4, #0]
     eba:	7a93      	ldrb	r3, [r2, #10]
     ebc:	09db      	lsrs	r3, r3, #7
     ebe:	d1fc      	bne.n	eba <_calendar_init+0x3e>
#endif
	}
	hri_rtcmode0_set_CTRL_SWRST_bit(dev->hw);
     ec0:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     ec2:	8813      	ldrh	r3, [r2, #0]
     ec4:	2101      	movs	r1, #1
     ec6:	430b      	orrs	r3, r1
     ec8:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     eca:	7a93      	ldrb	r3, [r2, #10]
     ecc:	09db      	lsrs	r3, r3, #7
     ece:	d1fc      	bne.n	eca <_calendar_init+0x4e>
	hri_rtcmode0_wait_for_sync(dev->hw);
     ed0:	6822      	ldr	r2, [r4, #0]
     ed2:	7a93      	ldrb	r3, [r2, #10]
     ed4:	09db      	lsrs	r3, r3, #7
     ed6:	d1fc      	bne.n	ed2 <_calendar_init+0x56>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     ed8:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     eda:	7a93      	ldrb	r3, [r2, #10]
     edc:	09db      	lsrs	r3, r3, #7
     ede:	d1fc      	bne.n	eda <_calendar_init+0x5e>
	register_value &= (~RTC_MODE0_CTRL_MATCHCLR);

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	/* set continuously clock read update mode */
	hri_rtcmode0_set_READREQ_RCONT_bit(dev->hw);
     ee0:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     ee2:	8853      	ldrh	r3, [r2, #2]
     ee4:	2180      	movs	r1, #128	; 0x80
     ee6:	01c9      	lsls	r1, r1, #7
     ee8:	430b      	orrs	r3, r1
     eea:	8053      	strh	r3, [r2, #2]
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	return ERR_NONE;
}
     eec:	2000      	movs	r0, #0
     eee:	bd10      	pop	{r4, pc}
     ef0:	2000      	movs	r0, #0
     ef2:	e7ca      	b.n	e8a <_calendar_init+0xe>
     ef4:	00002128 	.word	0x00002128
     ef8:	00000a79 	.word	0x00000a79
     efc:	200000c8 	.word	0x200000c8

00000f00 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
     f00:	b510      	push	{r4, lr}
     f02:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     f04:	d011      	beq.n	f2a <_calendar_enable+0x2a>
     f06:	6800      	ldr	r0, [r0, #0]
     f08:	1e43      	subs	r3, r0, #1
     f0a:	4198      	sbcs	r0, r3
     f0c:	b2c0      	uxtb	r0, r0
     f0e:	22aa      	movs	r2, #170	; 0xaa
     f10:	4907      	ldr	r1, [pc, #28]	; (f30 <_calendar_enable+0x30>)
     f12:	4b08      	ldr	r3, [pc, #32]	; (f34 <_calendar_enable+0x34>)
     f14:	4798      	blx	r3

	/* Enable rtc */
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
     f16:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     f18:	8813      	ldrh	r3, [r2, #0]
     f1a:	2102      	movs	r1, #2
     f1c:	430b      	orrs	r3, r1
     f1e:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     f20:	7a93      	ldrb	r3, [r2, #10]
     f22:	09db      	lsrs	r3, r3, #7
     f24:	d1fc      	bne.n	f20 <_calendar_enable+0x20>

	return ERR_NONE;
}
     f26:	2000      	movs	r0, #0
     f28:	bd10      	pop	{r4, pc}
     f2a:	2000      	movs	r0, #0
     f2c:	e7ef      	b.n	f0e <_calendar_enable+0xe>
     f2e:	46c0      	nop			; (mov r8, r8)
     f30:	00002128 	.word	0x00002128
     f34:	00000a79 	.word	0x00000a79

00000f38 <_calendar_set_comp>:

/**
 * \brief Set the compare for the specified value.
 */
int32_t _calendar_set_comp(struct calendar_dev *const dev, const uint32_t comp)
{
     f38:	b570      	push	{r4, r5, r6, lr}
     f3a:	0004      	movs	r4, r0
     f3c:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     f3e:	2800      	cmp	r0, #0
     f40:	d00f      	beq.n	f62 <_calendar_set_comp+0x2a>
     f42:	6800      	ldr	r0, [r0, #0]
     f44:	1e43      	subs	r3, r0, #1
     f46:	4198      	sbcs	r0, r3
     f48:	b2c0      	uxtb	r0, r0
     f4a:	22e4      	movs	r2, #228	; 0xe4
     f4c:	4906      	ldr	r1, [pc, #24]	; (f68 <_calendar_set_comp+0x30>)
     f4e:	4b07      	ldr	r3, [pc, #28]	; (f6c <_calendar_set_comp+0x34>)
     f50:	4798      	blx	r3

	/* Set value into alarm register. */
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, comp);
     f52:	6822      	ldr	r2, [r4, #0]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     f54:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     f56:	6195      	str	r5, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     f58:	7a93      	ldrb	r3, [r2, #10]
     f5a:	09db      	lsrs	r3, r3, #7
     f5c:	d1fc      	bne.n	f58 <_calendar_set_comp+0x20>

	return ERR_NONE;
}
     f5e:	2000      	movs	r0, #0
     f60:	bd70      	pop	{r4, r5, r6, pc}
     f62:	2000      	movs	r0, #0
     f64:	e7f1      	b.n	f4a <_calendar_set_comp+0x12>
     f66:	46c0      	nop			; (mov r8, r8)
     f68:	00002128 	.word	0x00002128
     f6c:	00000a79 	.word	0x00000a79

00000f70 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     f70:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
     f72:	4b07      	ldr	r3, [pc, #28]	; (f90 <RTC_Handler+0x20>)
     f74:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     f76:	6823      	ldr	r3, [r4, #0]
     f78:	7a1b      	ldrb	r3, [r3, #8]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
     f7a:	07db      	lsls	r3, r3, #31
     f7c:	d400      	bmi.n	f80 <RTC_Handler+0x10>
}
     f7e:	bd10      	pop	{r4, pc}
		dev->callback(dev);
     f80:	0020      	movs	r0, r4
     f82:	6863      	ldr	r3, [r4, #4]
     f84:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     f86:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     f88:	2201      	movs	r2, #1
     f8a:	721a      	strb	r2, [r3, #8]
}
     f8c:	e7f7      	b.n	f7e <RTC_Handler+0xe>
     f8e:	46c0      	nop			; (mov r8, r8)
     f90:	200000c8 	.word	0x200000c8

00000f94 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     f94:	b510      	push	{r4, lr}
     f96:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     f98:	4b1f      	ldr	r3, [pc, #124]	; (1018 <_usart_init+0x84>)
     f9a:	18c3      	adds	r3, r0, r3
     f9c:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
     f9e:	b2db      	uxtb	r3, r3
     fa0:	2b03      	cmp	r3, #3
     fa2:	d004      	beq.n	fae <_usart_init+0x1a>
	ASSERT(false);
     fa4:	4a1d      	ldr	r2, [pc, #116]	; (101c <_usart_init+0x88>)
     fa6:	491e      	ldr	r1, [pc, #120]	; (1020 <_usart_init+0x8c>)
     fa8:	2000      	movs	r0, #0
     faa:	4b1e      	ldr	r3, [pc, #120]	; (1024 <_usart_init+0x90>)
     fac:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     fae:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     fb0:	07db      	lsls	r3, r3, #31
     fb2:	d418      	bmi.n	fe6 <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     fb4:	2203      	movs	r2, #3
     fb6:	69e3      	ldr	r3, [r4, #28]
     fb8:	421a      	tst	r2, r3
     fba:	d1fc      	bne.n	fb6 <_usart_init+0x22>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     fbc:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     fbe:	079b      	lsls	r3, r3, #30
     fc0:	d50b      	bpl.n	fda <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     fc2:	6823      	ldr	r3, [r4, #0]
     fc4:	2202      	movs	r2, #2
     fc6:	4393      	bics	r3, r2
     fc8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     fca:	3201      	adds	r2, #1
     fcc:	69e3      	ldr	r3, [r4, #28]
     fce:	421a      	tst	r2, r3
     fd0:	d1fc      	bne.n	fcc <_usart_init+0x38>
     fd2:	2202      	movs	r2, #2
     fd4:	69e3      	ldr	r3, [r4, #28]
     fd6:	421a      	tst	r2, r3
     fd8:	d1fc      	bne.n	fd4 <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     fda:	2305      	movs	r3, #5
     fdc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     fde:	2203      	movs	r2, #3
     fe0:	69e3      	ldr	r3, [r4, #28]
     fe2:	421a      	tst	r2, r3
     fe4:	d1fc      	bne.n	fe0 <_usart_init+0x4c>
     fe6:	2201      	movs	r2, #1
     fe8:	69e3      	ldr	r3, [r4, #28]
     fea:	421a      	tst	r2, r3
     fec:	d1fc      	bne.n	fe8 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     fee:	4b0e      	ldr	r3, [pc, #56]	; (1028 <_usart_init+0x94>)
     ff0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ff2:	2203      	movs	r2, #3
     ff4:	69e3      	ldr	r3, [r4, #28]
     ff6:	421a      	tst	r2, r3
     ff8:	d1fc      	bne.n	ff4 <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLB.reg = data;
     ffa:	23c0      	movs	r3, #192	; 0xc0
     ffc:	029b      	lsls	r3, r3, #10
     ffe:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1000:	2207      	movs	r2, #7
    1002:	69e3      	ldr	r3, [r4, #28]
    1004:	421a      	tst	r2, r3
    1006:	d1fc      	bne.n	1002 <_usart_init+0x6e>
	((Sercom *)hw)->USART.BAUD.reg = data;
    1008:	4b08      	ldr	r3, [pc, #32]	; (102c <_usart_init+0x98>)
    100a:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    100c:	2300      	movs	r3, #0
    100e:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1010:	2230      	movs	r2, #48	; 0x30
    1012:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    1014:	2000      	movs	r0, #0
    1016:	bd10      	pop	{r4, pc}
    1018:	bdfff800 	.word	0xbdfff800
    101c:	0000025e 	.word	0x0000025e
    1020:	00002140 	.word	0x00002140
    1024:	00000a79 	.word	0x00000a79
    1028:	40100004 	.word	0x40100004
    102c:	ffffc504 	.word	0xffffc504

00001030 <_usart_async_init>:
{
    1030:	b570      	push	{r4, r5, r6, lr}
    1032:	0005      	movs	r5, r0
    1034:	000c      	movs	r4, r1
	ASSERT(device);
    1036:	1e43      	subs	r3, r0, #1
    1038:	4198      	sbcs	r0, r3
    103a:	b2c0      	uxtb	r0, r0
    103c:	22c4      	movs	r2, #196	; 0xc4
    103e:	4914      	ldr	r1, [pc, #80]	; (1090 <_usart_async_init+0x60>)
    1040:	4b14      	ldr	r3, [pc, #80]	; (1094 <_usart_async_init+0x64>)
    1042:	4798      	blx	r3
	init_status = _usart_init(hw);
    1044:	0020      	movs	r0, r4
    1046:	4b14      	ldr	r3, [pc, #80]	; (1098 <_usart_async_init+0x68>)
    1048:	4798      	blx	r3
	if (init_status) {
    104a:	2800      	cmp	r0, #0
    104c:	d000      	beq.n	1050 <_usart_async_init+0x20>
}
    104e:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    1050:	61ac      	str	r4, [r5, #24]
	if (hw == SERCOM3) {
    1052:	4b12      	ldr	r3, [pc, #72]	; (109c <_usart_async_init+0x6c>)
    1054:	429c      	cmp	r4, r3
    1056:	d017      	beq.n	1088 <_usart_async_init+0x58>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1058:	4b11      	ldr	r3, [pc, #68]	; (10a0 <_usart_async_init+0x70>)
    105a:	469c      	mov	ip, r3
    105c:	4464      	add	r4, ip
    105e:	0aa4      	lsrs	r4, r4, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1060:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
    1062:	b2e3      	uxtb	r3, r4
    1064:	0622      	lsls	r2, r4, #24
    1066:	d4f2      	bmi.n	104e <_usart_async_init+0x1e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1068:	221f      	movs	r2, #31
    106a:	401a      	ands	r2, r3
    106c:	2301      	movs	r3, #1
    106e:	4093      	lsls	r3, r2
    1070:	4a0c      	ldr	r2, [pc, #48]	; (10a4 <_usart_async_init+0x74>)
    1072:	2180      	movs	r1, #128	; 0x80
    1074:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1076:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    107a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    107e:	3101      	adds	r1, #1
    1080:	31ff      	adds	r1, #255	; 0xff
    1082:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1084:	6013      	str	r3, [r2, #0]
    1086:	e7e2      	b.n	104e <_usart_async_init+0x1e>
		_sercom3_dev = (struct _usart_async_device *)dev;
    1088:	4b07      	ldr	r3, [pc, #28]	; (10a8 <_usart_async_init+0x78>)
    108a:	601d      	str	r5, [r3, #0]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    108c:	230c      	movs	r3, #12
    108e:	e7eb      	b.n	1068 <_usart_async_init+0x38>
    1090:	00002140 	.word	0x00002140
    1094:	00000a79 	.word	0x00000a79
    1098:	00000f95 	.word	0x00000f95
    109c:	42001400 	.word	0x42001400
    10a0:	bdfff800 	.word	0xbdfff800
    10a4:	e000e100 	.word	0xe000e100
    10a8:	200000cc 	.word	0x200000cc

000010ac <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    10ac:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    10ae:	6813      	ldr	r3, [r2, #0]
    10b0:	2102      	movs	r1, #2
    10b2:	430b      	orrs	r3, r1
    10b4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10b6:	3101      	adds	r1, #1
    10b8:	69d3      	ldr	r3, [r2, #28]
    10ba:	4219      	tst	r1, r3
    10bc:	d1fc      	bne.n	10b8 <_usart_async_enable+0xc>
}
    10be:	4770      	bx	lr

000010c0 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    10c0:	6983      	ldr	r3, [r0, #24]
    10c2:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    10c4:	8519      	strh	r1, [r3, #40]	; 0x28
}
    10c6:	4770      	bx	lr

000010c8 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    10c8:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    10ca:	2201      	movs	r2, #1
    10cc:	759a      	strb	r2, [r3, #22]
}
    10ce:	4770      	bx	lr

000010d0 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    10d0:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    10d2:	2202      	movs	r2, #2
    10d4:	759a      	strb	r2, [r3, #22]
}
    10d6:	4770      	bx	lr

000010d8 <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    10d8:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    10da:	4b19      	ldr	r3, [pc, #100]	; (1140 <SERCOM3_Handler+0x68>)
    10dc:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
    10de:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    10e0:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    10e2:	07db      	lsls	r3, r3, #31
    10e4:	d502      	bpl.n	10ec <SERCOM3_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    10e6:	7da3      	ldrb	r3, [r4, #22]
    10e8:	07db      	lsls	r3, r3, #31
    10ea:	d40f      	bmi.n	110c <SERCOM3_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    10ec:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    10ee:	079b      	lsls	r3, r3, #30
    10f0:	d502      	bpl.n	10f8 <SERCOM3_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    10f2:	7da3      	ldrb	r3, [r4, #22]
    10f4:	079b      	lsls	r3, r3, #30
    10f6:	d40e      	bmi.n	1116 <SERCOM3_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    10f8:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    10fa:	075b      	lsls	r3, r3, #29
    10fc:	d515      	bpl.n	112a <SERCOM3_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    10fe:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    1100:	2337      	movs	r3, #55	; 0x37
    1102:	421a      	tst	r2, r3
    1104:	d00c      	beq.n	1120 <SERCOM3_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1106:	3308      	adds	r3, #8
    1108:	8363      	strh	r3, [r4, #26]
}
    110a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    110c:	2301      	movs	r3, #1
    110e:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    1110:	6803      	ldr	r3, [r0, #0]
    1112:	4798      	blx	r3
    1114:	e7f9      	b.n	110a <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1116:	2302      	movs	r3, #2
    1118:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    111a:	6883      	ldr	r3, [r0, #8]
    111c:	4798      	blx	r3
    111e:	e7f4      	b.n	110a <SERCOM3_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
    1120:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1122:	b2c9      	uxtb	r1, r1
    1124:	6843      	ldr	r3, [r0, #4]
    1126:	4798      	blx	r3
    1128:	e7ef      	b.n	110a <SERCOM3_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    112a:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    112c:	09db      	lsrs	r3, r3, #7
    112e:	d0ec      	beq.n	110a <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1130:	2380      	movs	r3, #128	; 0x80
    1132:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    1134:	68c3      	ldr	r3, [r0, #12]
    1136:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1138:	8b63      	ldrh	r3, [r4, #26]
    113a:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    113c:	8363      	strh	r3, [r4, #26]
}
    113e:	e7e4      	b.n	110a <SERCOM3_Handler+0x32>
    1140:	200000cc 	.word	0x200000cc

00001144 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1144:	4b0e      	ldr	r3, [pc, #56]	; (1180 <_sysctrl_init_sources+0x3c>)
    1146:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1148:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    114a:	480e      	ldr	r0, [pc, #56]	; (1184 <_sysctrl_init_sources+0x40>)
    114c:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    114e:	0f92      	lsrs	r2, r2, #30
    1150:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    1152:	2002      	movs	r0, #2
    1154:	4302      	orrs	r2, r0
    1156:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1158:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    115a:	699a      	ldr	r2, [r3, #24]
    115c:	4302      	orrs	r2, r0
    115e:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1160:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1162:	211f      	movs	r1, #31
    1164:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1166:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1168:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    116a:	2208      	movs	r2, #8
    116c:	68cb      	ldr	r3, [r1, #12]
    116e:	421a      	tst	r2, r3
    1170:	d0fc      	beq.n	116c <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1172:	4a03      	ldr	r2, [pc, #12]	; (1180 <_sysctrl_init_sources+0x3c>)
    1174:	6a13      	ldr	r3, [r2, #32]
    1176:	2180      	movs	r1, #128	; 0x80
    1178:	430b      	orrs	r3, r1
    117a:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    117c:	4770      	bx	lr
    117e:	46c0      	nop			; (mov r8, r8)
    1180:	40000800 	.word	0x40000800
    1184:	0fff0000 	.word	0x0fff0000

00001188 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1188:	4a02      	ldr	r2, [pc, #8]	; (1194 <_sysctrl_init_referenced_generators+0xc>)
    118a:	6993      	ldr	r3, [r2, #24]
    118c:	2102      	movs	r1, #2
    118e:	438b      	bics	r3, r1
    1190:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1192:	4770      	bx	lr
    1194:	40000800 	.word	0x40000800

00001198 <main>:
#include <atmel_start.h>
#include "mu_vm_test.h"

int main(void)
{
    1198:	b510      	push	{r4, lr}
    /* Initializes MCU, drivers and middleware */
    atmel_start_init();
    119a:	4b03      	ldr	r3, [pc, #12]	; (11a8 <main+0x10>)
    119c:	4798      	blx	r3
    mv_vm_test_init();
    119e:	4b03      	ldr	r3, [pc, #12]	; (11ac <main+0x14>)
    11a0:	4798      	blx	r3

    /* Replace with your application code */
    while (1) {
        mv_vm_test_step();
    11a2:	4c03      	ldr	r4, [pc, #12]	; (11b0 <main+0x18>)
    11a4:	47a0      	blx	r4
    11a6:	e7fd      	b.n	11a4 <main+0xc>
    11a8:	00000425 	.word	0x00000425
    11ac:	0000129d 	.word	0x0000129d
    11b0:	000012a9 	.word	0x000012a9

000011b4 <button_press_cb>:
  test_printf("time = %d ms", ms);
#endif
}

static void button_press_cb(void *arg) {
	s_button_pressed = true;
    11b4:	2201      	movs	r2, #1
    11b6:	4b01      	ldr	r3, [pc, #4]	; (11bc <button_press_cb+0x8>)
    11b8:	701a      	strb	r2, [r3, #0]
}
    11ba:	4770      	bx	lr
    11bc:	200000d0 	.word	0x200000d0

000011c0 <serial_read_cb>:

static void serial_read_cb(uint8_t data) {
  s_rx_has_data = true;
    11c0:	4b02      	ldr	r3, [pc, #8]	; (11cc <serial_read_cb+0xc>)
    11c2:	2201      	movs	r2, #1
    11c4:	705a      	strb	r2, [r3, #1]
	s_rx_data = data;
    11c6:	7098      	strb	r0, [r3, #2]
}
    11c8:	4770      	bx	lr
    11ca:	46c0      	nop			; (mov r8, r8)
    11cc:	200000d0 	.word	0x200000d0

000011d0 <rtc_cb>:

static void rtc_cb(void *arg) {
	s_rtc_matched = true;
    11d0:	2201      	movs	r2, #1
    11d2:	4b01      	ldr	r3, [pc, #4]	; (11d8 <rtc_cb+0x8>)
    11d4:	70da      	strb	r2, [r3, #3]
}
    11d6:	4770      	bx	lr
    11d8:	200000d0 	.word	0x200000d0

000011dc <test_wait_ms>:
static void test_wait_ms(int ms) {
    11dc:	b570      	push	{r4, r5, r6, lr}
    11de:	0005      	movs	r5, r0
      mu_vm_time_offset(mu_vm_rtc_now(), mu_vm_time_ms_to_duration(ms));
    11e0:	4b0a      	ldr	r3, [pc, #40]	; (120c <test_wait_ms+0x30>)
    11e2:	4798      	blx	r3
    11e4:	0004      	movs	r4, r0
    11e6:	0028      	movs	r0, r5
    11e8:	4b09      	ldr	r3, [pc, #36]	; (1210 <test_wait_ms+0x34>)
    11ea:	4798      	blx	r3
    11ec:	0001      	movs	r1, r0
  mu_vm_time_t then =
    11ee:	0020      	movs	r0, r4
    11f0:	4b08      	ldr	r3, [pc, #32]	; (1214 <test_wait_ms+0x38>)
    11f2:	4798      	blx	r3
    11f4:	0005      	movs	r5, r0
  while (mu_vm_time_precedes(mu_vm_rtc_now(), then)) {
    11f6:	4e05      	ldr	r6, [pc, #20]	; (120c <test_wait_ms+0x30>)
    11f8:	4c07      	ldr	r4, [pc, #28]	; (1218 <test_wait_ms+0x3c>)
    11fa:	e000      	b.n	11fe <test_wait_ms+0x22>
	  asm("nop");
    11fc:	46c0      	nop			; (mov r8, r8)
  while (mu_vm_time_precedes(mu_vm_rtc_now(), then)) {
    11fe:	47b0      	blx	r6
    1200:	0029      	movs	r1, r5
    1202:	47a0      	blx	r4
    1204:	2800      	cmp	r0, #0
    1206:	d1f9      	bne.n	11fc <test_wait_ms+0x20>
}
    1208:	bd70      	pop	{r4, r5, r6, pc}
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	00000291 	.word	0x00000291
    1210:	00000235 	.word	0x00000235
    1214:	00000225 	.word	0x00000225
    1218:	0000022d 	.word	0x0000022d

0000121c <test_printf>:
static void test_printf(const char *fmt, ...) {
    121c:	b40f      	push	{r0, r1, r2, r3}
    121e:	b5f0      	push	{r4, r5, r6, r7, lr}
    1220:	b083      	sub	sp, #12
    1222:	ab08      	add	r3, sp, #32
    1224:	cb04      	ldmia	r3!, {r2}
  va_start(ap, fmt);
    1226:	9301      	str	r3, [sp, #4]
  n_chars = vsnprintf((char *)buf, MAX_CHARS, fmt, ap);
    1228:	2132      	movs	r1, #50	; 0x32
    122a:	480d      	ldr	r0, [pc, #52]	; (1260 <test_printf+0x44>)
    122c:	3004      	adds	r0, #4
    122e:	4c0d      	ldr	r4, [pc, #52]	; (1264 <test_printf+0x48>)
    1230:	47a0      	blx	r4
    1232:	1e06      	subs	r6, r0, #0
  while (n_chars > 0) {
    1234:	d00e      	beq.n	1254 <test_printf+0x38>
    1236:	4d0a      	ldr	r5, [pc, #40]	; (1260 <test_printf+0x44>)
    1238:	3504      	adds	r5, #4
    while (!mu_vm_serial_is_ready_to_write()) {
    123a:	4c0b      	ldr	r4, [pc, #44]	; (1268 <test_printf+0x4c>)
    mu_vm_serial_write(*p++);
    123c:	4f0b      	ldr	r7, [pc, #44]	; (126c <test_printf+0x50>)
    123e:	e000      	b.n	1242 <test_printf+0x26>
      asm("nop");
    1240:	46c0      	nop			; (mov r8, r8)
    while (!mu_vm_serial_is_ready_to_write()) {
    1242:	47a0      	blx	r4
    1244:	2800      	cmp	r0, #0
    1246:	d0fb      	beq.n	1240 <test_printf+0x24>
    mu_vm_serial_write(*p++);
    1248:	7828      	ldrb	r0, [r5, #0]
    124a:	47b8      	blx	r7
    n_chars--;
    124c:	3e01      	subs	r6, #1
    124e:	3501      	adds	r5, #1
  while (n_chars > 0) {
    1250:	2e00      	cmp	r6, #0
    1252:	d1f6      	bne.n	1242 <test_printf+0x26>
}
    1254:	b003      	add	sp, #12
    1256:	bcf0      	pop	{r4, r5, r6, r7}
    1258:	bc08      	pop	{r3}
    125a:	b004      	add	sp, #16
    125c:	4718      	bx	r3
    125e:	46c0      	nop			; (mov r8, r8)
    1260:	200000d0 	.word	0x200000d0
    1264:	00001895 	.word	0x00001895
    1268:	000003a9 	.word	0x000003a9
    126c:	000003b9 	.word	0x000003b9

00001270 <test_print_time>:
static void test_print_time(mu_vm_time_t t) {
    1270:	b510      	push	{r4, lr}
  mu_vm_time_dt uptime = mu_vm_time_difference(t, s_epoch);
    1272:	4b05      	ldr	r3, [pc, #20]	; (1288 <test_print_time+0x18>)
    1274:	6b99      	ldr	r1, [r3, #56]	; 0x38
    1276:	4b05      	ldr	r3, [pc, #20]	; (128c <test_print_time+0x1c>)
    1278:	4798      	blx	r3
  int ms = mu_vm_time_duration_to_ms(uptime);
    127a:	4b05      	ldr	r3, [pc, #20]	; (1290 <test_print_time+0x20>)
    127c:	4798      	blx	r3
    127e:	0001      	movs	r1, r0
  test_printf("time = %d ms", ms);
    1280:	4804      	ldr	r0, [pc, #16]	; (1294 <test_print_time+0x24>)
    1282:	4b05      	ldr	r3, [pc, #20]	; (1298 <test_print_time+0x28>)
    1284:	4798      	blx	r3
}
    1286:	bd10      	pop	{r4, pc}
    1288:	200000d0 	.word	0x200000d0
    128c:	00000229 	.word	0x00000229
    1290:	0000025d 	.word	0x0000025d
    1294:	0000215c 	.word	0x0000215c
    1298:	0000121d 	.word	0x0000121d

0000129c <mv_vm_test_init>:
void mv_vm_test_init(void) {
    129c:	b510      	push	{r4, lr}
	mu_vm_init();
    129e:	4b01      	ldr	r3, [pc, #4]	; (12a4 <mv_vm_test_init+0x8>)
    12a0:	4798      	blx	r3
}
    12a2:	bd10      	pop	{r4, pc}
    12a4:	00000181 	.word	0x00000181

000012a8 <mv_vm_test_step>:
void mv_vm_test_step(void) {
    12a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  s_epoch = mu_vm_rtc_now();
    12aa:	4d5a      	ldr	r5, [pc, #360]	; (1414 <mv_vm_test_step+0x16c>)
    12ac:	47a8      	blx	r5
    12ae:	4e5a      	ldr	r6, [pc, #360]	; (1418 <mv_vm_test_step+0x170>)
    12b0:	63b0      	str	r0, [r6, #56]	; 0x38
  test_printf("\r\n================\r\nstarting mu_vm_test\r\n");
    12b2:	485a      	ldr	r0, [pc, #360]	; (141c <mv_vm_test_step+0x174>)
    12b4:	4c5a      	ldr	r4, [pc, #360]	; (1420 <mv_vm_test_step+0x178>)
    12b6:	47a0      	blx	r4
  test_printf("time before is ");
    12b8:	485a      	ldr	r0, [pc, #360]	; (1424 <mv_vm_test_step+0x17c>)
    12ba:	47a0      	blx	r4
  test_print_time(mu_vm_rtc_now());
    12bc:	47a8      	blx	r5
    12be:	4f5a      	ldr	r7, [pc, #360]	; (1428 <mv_vm_test_step+0x180>)
    12c0:	47b8      	blx	r7
  test_printf("\r\n");
    12c2:	485a      	ldr	r0, [pc, #360]	; (142c <mv_vm_test_step+0x184>)
    12c4:	47a0      	blx	r4
  test_printf("looping for 2.5 seconds...");
    12c6:	485a      	ldr	r0, [pc, #360]	; (1430 <mv_vm_test_step+0x188>)
    12c8:	47a0      	blx	r4
  test_wait_ms(2500);
    12ca:	485a      	ldr	r0, [pc, #360]	; (1434 <mv_vm_test_step+0x18c>)
    12cc:	4b5a      	ldr	r3, [pc, #360]	; (1438 <mv_vm_test_step+0x190>)
    12ce:	4798      	blx	r3
  test_printf("done.  time after is ");
    12d0:	485a      	ldr	r0, [pc, #360]	; (143c <mv_vm_test_step+0x194>)
    12d2:	47a0      	blx	r4
  test_print_time(mu_vm_rtc_now());
    12d4:	47a8      	blx	r5
    12d6:	47b8      	blx	r7
  test_printf("\r\n");
    12d8:	4854      	ldr	r0, [pc, #336]	; (142c <mv_vm_test_step+0x184>)
    12da:	47a0      	blx	r4
  s_rtc_matched = false;
    12dc:	2300      	movs	r3, #0
    12de:	70f3      	strb	r3, [r6, #3]
  mu_vm_rtc_set_cb(rtc_cb, NULL);
    12e0:	2100      	movs	r1, #0
    12e2:	4857      	ldr	r0, [pc, #348]	; (1440 <mv_vm_test_step+0x198>)
    12e4:	4b57      	ldr	r3, [pc, #348]	; (1444 <mv_vm_test_step+0x19c>)
    12e6:	4798      	blx	r3
  mu_vm_rtc_alarm_at(mu_vm_time_offset(mu_vm_rtc_now(),
    12e8:	47a8      	blx	r5
    12ea:	0005      	movs	r5, r0
    12ec:	4851      	ldr	r0, [pc, #324]	; (1434 <mv_vm_test_step+0x18c>)
    12ee:	4b56      	ldr	r3, [pc, #344]	; (1448 <mv_vm_test_step+0x1a0>)
    12f0:	4798      	blx	r3
    12f2:	0001      	movs	r1, r0
    12f4:	0028      	movs	r0, r5
    12f6:	4b55      	ldr	r3, [pc, #340]	; (144c <mv_vm_test_step+0x1a4>)
    12f8:	4798      	blx	r3
    12fa:	4b55      	ldr	r3, [pc, #340]	; (1450 <mv_vm_test_step+0x1a8>)
    12fc:	4798      	blx	r3
  test_printf("waiting 2.5 seconds for RTC match...");
    12fe:	4855      	ldr	r0, [pc, #340]	; (1454 <mv_vm_test_step+0x1ac>)
    1300:	47a0      	blx	r4
  while (!s_rtc_matched) {
    1302:	78f3      	ldrb	r3, [r6, #3]
    1304:	2b00      	cmp	r3, #0
    1306:	d104      	bne.n	1312 <mv_vm_test_step+0x6a>
    1308:	4a43      	ldr	r2, [pc, #268]	; (1418 <mv_vm_test_step+0x170>)
	  asm("nop");
    130a:	46c0      	nop			; (mov r8, r8)
  while (!s_rtc_matched) {
    130c:	78d3      	ldrb	r3, [r2, #3]
    130e:	2b00      	cmp	r3, #0
    1310:	d0fb      	beq.n	130a <mv_vm_test_step+0x62>
  test_printf("done.  time is now ");
    1312:	4851      	ldr	r0, [pc, #324]	; (1458 <mv_vm_test_step+0x1b0>)
    1314:	4c42      	ldr	r4, [pc, #264]	; (1420 <mv_vm_test_step+0x178>)
    1316:	47a0      	blx	r4
  test_print_time(mu_vm_rtc_now());
    1318:	4b3e      	ldr	r3, [pc, #248]	; (1414 <mv_vm_test_step+0x16c>)
    131a:	4798      	blx	r3
    131c:	4b42      	ldr	r3, [pc, #264]	; (1428 <mv_vm_test_step+0x180>)
    131e:	4798      	blx	r3
  test_printf("\r\n");
    1320:	4842      	ldr	r0, [pc, #264]	; (142c <mv_vm_test_step+0x184>)
    1322:	47a0      	blx	r4
  test_printf("flashing LED for 2.5 seconds...");
    1324:	484d      	ldr	r0, [pc, #308]	; (145c <mv_vm_test_step+0x1b4>)
    1326:	47a0      	blx	r4
    1328:	240a      	movs	r4, #10
    mu_vm_led_set(!mu_vm_led_get());
    132a:	4f4d      	ldr	r7, [pc, #308]	; (1460 <mv_vm_test_step+0x1b8>)
    132c:	4e4d      	ldr	r6, [pc, #308]	; (1464 <mv_vm_test_step+0x1bc>)
    test_wait_ms(250);
    132e:	4d42      	ldr	r5, [pc, #264]	; (1438 <mv_vm_test_step+0x190>)
    mu_vm_led_set(!mu_vm_led_get());
    1330:	47b8      	blx	r7
    1332:	2301      	movs	r3, #1
    1334:	4058      	eors	r0, r3
    1336:	b2c0      	uxtb	r0, r0
    1338:	47b0      	blx	r6
    test_wait_ms(250);
    133a:	20fa      	movs	r0, #250	; 0xfa
    133c:	47a8      	blx	r5
    133e:	3c01      	subs	r4, #1
  for (int i = 0; i < 10; i++) {
    1340:	2c00      	cmp	r4, #0
    1342:	d1f5      	bne.n	1330 <mv_vm_test_step+0x88>
  mu_vm_led_set(false);
    1344:	2000      	movs	r0, #0
    1346:	4b47      	ldr	r3, [pc, #284]	; (1464 <mv_vm_test_step+0x1bc>)
    1348:	4798      	blx	r3
  test_printf("done.  time is now ");
    134a:	4843      	ldr	r0, [pc, #268]	; (1458 <mv_vm_test_step+0x1b0>)
    134c:	4c34      	ldr	r4, [pc, #208]	; (1420 <mv_vm_test_step+0x178>)
    134e:	47a0      	blx	r4
  test_print_time(mu_vm_rtc_now());
    1350:	4b30      	ldr	r3, [pc, #192]	; (1414 <mv_vm_test_step+0x16c>)
    1352:	4798      	blx	r3
    1354:	4b34      	ldr	r3, [pc, #208]	; (1428 <mv_vm_test_step+0x180>)
    1356:	4798      	blx	r3
  test_printf("\r\n");
    1358:	4834      	ldr	r0, [pc, #208]	; (142c <mv_vm_test_step+0x184>)
    135a:	47a0      	blx	r4
  test_printf("waiting for button press (synchronous)...");
    135c:	4842      	ldr	r0, [pc, #264]	; (1468 <mv_vm_test_step+0x1c0>)
    135e:	47a0      	blx	r4
  while (!mu_vm_button_is_pressed()) {
    1360:	4c42      	ldr	r4, [pc, #264]	; (146c <mv_vm_test_step+0x1c4>)
    1362:	47a0      	blx	r4
    1364:	2800      	cmp	r0, #0
    1366:	d0fc      	beq.n	1362 <mv_vm_test_step+0xba>
  test_printf("received button press.\r\n");
    1368:	4841      	ldr	r0, [pc, #260]	; (1470 <mv_vm_test_step+0x1c8>)
    136a:	4b2d      	ldr	r3, [pc, #180]	; (1420 <mv_vm_test_step+0x178>)
    136c:	4798      	blx	r3
    test_wait_ms(10);
    136e:	4d32      	ldr	r5, [pc, #200]	; (1438 <mv_vm_test_step+0x190>)
  } while (mu_vm_button_is_pressed());
    1370:	4c3e      	ldr	r4, [pc, #248]	; (146c <mv_vm_test_step+0x1c4>)
    test_wait_ms(10);
    1372:	200a      	movs	r0, #10
    1374:	47a8      	blx	r5
  } while (mu_vm_button_is_pressed());
    1376:	47a0      	blx	r4
    1378:	2800      	cmp	r0, #0
    137a:	d1fa      	bne.n	1372 <mv_vm_test_step+0xca>
  s_button_pressed = false;
    137c:	2200      	movs	r2, #0
    137e:	4b26      	ldr	r3, [pc, #152]	; (1418 <mv_vm_test_step+0x170>)
    1380:	701a      	strb	r2, [r3, #0]
  mu_vm_button_set_cb(button_press_cb, NULL);
    1382:	2100      	movs	r1, #0
    1384:	483b      	ldr	r0, [pc, #236]	; (1474 <mv_vm_test_step+0x1cc>)
    1386:	4b3c      	ldr	r3, [pc, #240]	; (1478 <mv_vm_test_step+0x1d0>)
    1388:	4798      	blx	r3
  test_printf("waiting for button press (asynchronous)...");
    138a:	483c      	ldr	r0, [pc, #240]	; (147c <mv_vm_test_step+0x1d4>)
    138c:	4b24      	ldr	r3, [pc, #144]	; (1420 <mv_vm_test_step+0x178>)
    138e:	4798      	blx	r3
  while (!s_button_pressed) {
    1390:	4a21      	ldr	r2, [pc, #132]	; (1418 <mv_vm_test_step+0x170>)
    1392:	7813      	ldrb	r3, [r2, #0]
    1394:	2b00      	cmp	r3, #0
    1396:	d0fc      	beq.n	1392 <mv_vm_test_step+0xea>
  test_printf("received button press.\r\n");
    1398:	4835      	ldr	r0, [pc, #212]	; (1470 <mv_vm_test_step+0x1c8>)
    139a:	4c21      	ldr	r4, [pc, #132]	; (1420 <mv_vm_test_step+0x178>)
    139c:	47a0      	blx	r4
  test_printf("waiting for keyboard input...");
    139e:	4838      	ldr	r0, [pc, #224]	; (1480 <mv_vm_test_step+0x1d8>)
    13a0:	47a0      	blx	r4
	s_rx_has_data = false;
    13a2:	4c1d      	ldr	r4, [pc, #116]	; (1418 <mv_vm_test_step+0x170>)
    13a4:	2300      	movs	r3, #0
    13a6:	7063      	strb	r3, [r4, #1]
	mu_vm_serial_set_read_cb(serial_read_cb);
    13a8:	4836      	ldr	r0, [pc, #216]	; (1484 <mv_vm_test_step+0x1dc>)
    13aa:	4b37      	ldr	r3, [pc, #220]	; (1488 <mv_vm_test_step+0x1e0>)
    13ac:	4798      	blx	r3
	while (!s_rx_has_data) {
    13ae:	7863      	ldrb	r3, [r4, #1]
    13b0:	2b00      	cmp	r3, #0
    13b2:	d104      	bne.n	13be <mv_vm_test_step+0x116>
    13b4:	4a18      	ldr	r2, [pc, #96]	; (1418 <mv_vm_test_step+0x170>)
		asm("nop");
    13b6:	46c0      	nop			; (mov r8, r8)
	while (!s_rx_has_data) {
    13b8:	7853      	ldrb	r3, [r2, #1]
    13ba:	2b00      	cmp	r3, #0
    13bc:	d0fb      	beq.n	13b6 <mv_vm_test_step+0x10e>
	s_rx_has_data = false;
    13be:	4b16      	ldr	r3, [pc, #88]	; (1418 <mv_vm_test_step+0x170>)
    13c0:	2200      	movs	r2, #0
    13c2:	705a      	strb	r2, [r3, #1]
	return s_rx_data;
    13c4:	7899      	ldrb	r1, [r3, #2]
    13c6:	b2c9      	uxtb	r1, r1
  test_printf("received '%c'\r\n", c);
    13c8:	4830      	ldr	r0, [pc, #192]	; (148c <mv_vm_test_step+0x1e4>)
    13ca:	4c15      	ldr	r4, [pc, #84]	; (1420 <mv_vm_test_step+0x178>)
    13cc:	47a0      	blx	r4
  test_printf("sleeping for 2.5 seconds...");
    13ce:	4830      	ldr	r0, [pc, #192]	; (1490 <mv_vm_test_step+0x1e8>)
    13d0:	47a0      	blx	r4
  mu_vm_sleep_until(mu_vm_time_offset(mu_vm_rtc_now(),
    13d2:	4d10      	ldr	r5, [pc, #64]	; (1414 <mv_vm_test_step+0x16c>)
    13d4:	47a8      	blx	r5
    13d6:	0006      	movs	r6, r0
    13d8:	4816      	ldr	r0, [pc, #88]	; (1434 <mv_vm_test_step+0x18c>)
    13da:	4b1b      	ldr	r3, [pc, #108]	; (1448 <mv_vm_test_step+0x1a0>)
    13dc:	4798      	blx	r3
    13de:	0001      	movs	r1, r0
    13e0:	0030      	movs	r0, r6
    13e2:	4b1a      	ldr	r3, [pc, #104]	; (144c <mv_vm_test_step+0x1a4>)
    13e4:	4798      	blx	r3
    13e6:	4b2b      	ldr	r3, [pc, #172]	; (1494 <mv_vm_test_step+0x1ec>)
    13e8:	4798      	blx	r3
  test_printf("done.  time is now ");
    13ea:	4f1b      	ldr	r7, [pc, #108]	; (1458 <mv_vm_test_step+0x1b0>)
    13ec:	0038      	movs	r0, r7
    13ee:	47a0      	blx	r4
  test_print_time(mu_vm_rtc_now());
    13f0:	47a8      	blx	r5
    13f2:	4e0d      	ldr	r6, [pc, #52]	; (1428 <mv_vm_test_step+0x180>)
    13f4:	47b0      	blx	r6
  test_printf("\r\n");
    13f6:	480d      	ldr	r0, [pc, #52]	; (142c <mv_vm_test_step+0x184>)
    13f8:	47a0      	blx	r4
  test_printf("sleeping until button press...");
    13fa:	4827      	ldr	r0, [pc, #156]	; (1498 <mv_vm_test_step+0x1f0>)
    13fc:	47a0      	blx	r4
  mu_vm_sleep();
    13fe:	4b27      	ldr	r3, [pc, #156]	; (149c <mv_vm_test_step+0x1f4>)
    1400:	4798      	blx	r3
  test_printf("done.  time is now ");
    1402:	0038      	movs	r0, r7
    1404:	47a0      	blx	r4
  test_print_time(mu_vm_rtc_now());
    1406:	47a8      	blx	r5
    1408:	47b0      	blx	r6
  test_printf("\r\n");
    140a:	4808      	ldr	r0, [pc, #32]	; (142c <mv_vm_test_step+0x184>)
    140c:	47a0      	blx	r4
  test_printf("end of mu_vm_test\r\n================\r\n");
    140e:	4824      	ldr	r0, [pc, #144]	; (14a0 <mv_vm_test_step+0x1f8>)
    1410:	47a0      	blx	r4
}
    1412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1414:	00000291 	.word	0x00000291
    1418:	200000d0 	.word	0x200000d0
    141c:	0000216c 	.word	0x0000216c
    1420:	0000121d 	.word	0x0000121d
    1424:	00002198 	.word	0x00002198
    1428:	00001271 	.word	0x00001271
    142c:	000021a8 	.word	0x000021a8
    1430:	000021ac 	.word	0x000021ac
    1434:	000009c4 	.word	0x000009c4
    1438:	000011dd 	.word	0x000011dd
    143c:	000021c8 	.word	0x000021c8
    1440:	000011d1 	.word	0x000011d1
    1444:	000002a5 	.word	0x000002a5
    1448:	00000235 	.word	0x00000235
    144c:	00000225 	.word	0x00000225
    1450:	000002c1 	.word	0x000002c1
    1454:	000021e0 	.word	0x000021e0
    1458:	00002208 	.word	0x00002208
    145c:	0000221c 	.word	0x0000221c
    1460:	00000311 	.word	0x00000311
    1464:	000002f1 	.word	0x000002f1
    1468:	0000223c 	.word	0x0000223c
    146c:	00000351 	.word	0x00000351
    1470:	00002268 	.word	0x00002268
    1474:	000011b5 	.word	0x000011b5
    1478:	0000038d 	.word	0x0000038d
    147c:	00002284 	.word	0x00002284
    1480:	000022b0 	.word	0x000022b0
    1484:	000011c1 	.word	0x000011c1
    1488:	000003dd 	.word	0x000003dd
    148c:	000022d0 	.word	0x000022d0
    1490:	000022e0 	.word	0x000022e0
    1494:	000003e9 	.word	0x000003e9
    1498:	000022fc 	.word	0x000022fc
    149c:	00000415 	.word	0x00000415
    14a0:	0000231c 	.word	0x0000231c

000014a4 <__udivsi3>:
    14a4:	2200      	movs	r2, #0
    14a6:	0843      	lsrs	r3, r0, #1
    14a8:	428b      	cmp	r3, r1
    14aa:	d374      	bcc.n	1596 <__udivsi3+0xf2>
    14ac:	0903      	lsrs	r3, r0, #4
    14ae:	428b      	cmp	r3, r1
    14b0:	d35f      	bcc.n	1572 <__udivsi3+0xce>
    14b2:	0a03      	lsrs	r3, r0, #8
    14b4:	428b      	cmp	r3, r1
    14b6:	d344      	bcc.n	1542 <__udivsi3+0x9e>
    14b8:	0b03      	lsrs	r3, r0, #12
    14ba:	428b      	cmp	r3, r1
    14bc:	d328      	bcc.n	1510 <__udivsi3+0x6c>
    14be:	0c03      	lsrs	r3, r0, #16
    14c0:	428b      	cmp	r3, r1
    14c2:	d30d      	bcc.n	14e0 <__udivsi3+0x3c>
    14c4:	22ff      	movs	r2, #255	; 0xff
    14c6:	0209      	lsls	r1, r1, #8
    14c8:	ba12      	rev	r2, r2
    14ca:	0c03      	lsrs	r3, r0, #16
    14cc:	428b      	cmp	r3, r1
    14ce:	d302      	bcc.n	14d6 <__udivsi3+0x32>
    14d0:	1212      	asrs	r2, r2, #8
    14d2:	0209      	lsls	r1, r1, #8
    14d4:	d065      	beq.n	15a2 <__udivsi3+0xfe>
    14d6:	0b03      	lsrs	r3, r0, #12
    14d8:	428b      	cmp	r3, r1
    14da:	d319      	bcc.n	1510 <__udivsi3+0x6c>
    14dc:	e000      	b.n	14e0 <__udivsi3+0x3c>
    14de:	0a09      	lsrs	r1, r1, #8
    14e0:	0bc3      	lsrs	r3, r0, #15
    14e2:	428b      	cmp	r3, r1
    14e4:	d301      	bcc.n	14ea <__udivsi3+0x46>
    14e6:	03cb      	lsls	r3, r1, #15
    14e8:	1ac0      	subs	r0, r0, r3
    14ea:	4152      	adcs	r2, r2
    14ec:	0b83      	lsrs	r3, r0, #14
    14ee:	428b      	cmp	r3, r1
    14f0:	d301      	bcc.n	14f6 <__udivsi3+0x52>
    14f2:	038b      	lsls	r3, r1, #14
    14f4:	1ac0      	subs	r0, r0, r3
    14f6:	4152      	adcs	r2, r2
    14f8:	0b43      	lsrs	r3, r0, #13
    14fa:	428b      	cmp	r3, r1
    14fc:	d301      	bcc.n	1502 <__udivsi3+0x5e>
    14fe:	034b      	lsls	r3, r1, #13
    1500:	1ac0      	subs	r0, r0, r3
    1502:	4152      	adcs	r2, r2
    1504:	0b03      	lsrs	r3, r0, #12
    1506:	428b      	cmp	r3, r1
    1508:	d301      	bcc.n	150e <__udivsi3+0x6a>
    150a:	030b      	lsls	r3, r1, #12
    150c:	1ac0      	subs	r0, r0, r3
    150e:	4152      	adcs	r2, r2
    1510:	0ac3      	lsrs	r3, r0, #11
    1512:	428b      	cmp	r3, r1
    1514:	d301      	bcc.n	151a <__udivsi3+0x76>
    1516:	02cb      	lsls	r3, r1, #11
    1518:	1ac0      	subs	r0, r0, r3
    151a:	4152      	adcs	r2, r2
    151c:	0a83      	lsrs	r3, r0, #10
    151e:	428b      	cmp	r3, r1
    1520:	d301      	bcc.n	1526 <__udivsi3+0x82>
    1522:	028b      	lsls	r3, r1, #10
    1524:	1ac0      	subs	r0, r0, r3
    1526:	4152      	adcs	r2, r2
    1528:	0a43      	lsrs	r3, r0, #9
    152a:	428b      	cmp	r3, r1
    152c:	d301      	bcc.n	1532 <__udivsi3+0x8e>
    152e:	024b      	lsls	r3, r1, #9
    1530:	1ac0      	subs	r0, r0, r3
    1532:	4152      	adcs	r2, r2
    1534:	0a03      	lsrs	r3, r0, #8
    1536:	428b      	cmp	r3, r1
    1538:	d301      	bcc.n	153e <__udivsi3+0x9a>
    153a:	020b      	lsls	r3, r1, #8
    153c:	1ac0      	subs	r0, r0, r3
    153e:	4152      	adcs	r2, r2
    1540:	d2cd      	bcs.n	14de <__udivsi3+0x3a>
    1542:	09c3      	lsrs	r3, r0, #7
    1544:	428b      	cmp	r3, r1
    1546:	d301      	bcc.n	154c <__udivsi3+0xa8>
    1548:	01cb      	lsls	r3, r1, #7
    154a:	1ac0      	subs	r0, r0, r3
    154c:	4152      	adcs	r2, r2
    154e:	0983      	lsrs	r3, r0, #6
    1550:	428b      	cmp	r3, r1
    1552:	d301      	bcc.n	1558 <__udivsi3+0xb4>
    1554:	018b      	lsls	r3, r1, #6
    1556:	1ac0      	subs	r0, r0, r3
    1558:	4152      	adcs	r2, r2
    155a:	0943      	lsrs	r3, r0, #5
    155c:	428b      	cmp	r3, r1
    155e:	d301      	bcc.n	1564 <__udivsi3+0xc0>
    1560:	014b      	lsls	r3, r1, #5
    1562:	1ac0      	subs	r0, r0, r3
    1564:	4152      	adcs	r2, r2
    1566:	0903      	lsrs	r3, r0, #4
    1568:	428b      	cmp	r3, r1
    156a:	d301      	bcc.n	1570 <__udivsi3+0xcc>
    156c:	010b      	lsls	r3, r1, #4
    156e:	1ac0      	subs	r0, r0, r3
    1570:	4152      	adcs	r2, r2
    1572:	08c3      	lsrs	r3, r0, #3
    1574:	428b      	cmp	r3, r1
    1576:	d301      	bcc.n	157c <__udivsi3+0xd8>
    1578:	00cb      	lsls	r3, r1, #3
    157a:	1ac0      	subs	r0, r0, r3
    157c:	4152      	adcs	r2, r2
    157e:	0883      	lsrs	r3, r0, #2
    1580:	428b      	cmp	r3, r1
    1582:	d301      	bcc.n	1588 <__udivsi3+0xe4>
    1584:	008b      	lsls	r3, r1, #2
    1586:	1ac0      	subs	r0, r0, r3
    1588:	4152      	adcs	r2, r2
    158a:	0843      	lsrs	r3, r0, #1
    158c:	428b      	cmp	r3, r1
    158e:	d301      	bcc.n	1594 <__udivsi3+0xf0>
    1590:	004b      	lsls	r3, r1, #1
    1592:	1ac0      	subs	r0, r0, r3
    1594:	4152      	adcs	r2, r2
    1596:	1a41      	subs	r1, r0, r1
    1598:	d200      	bcs.n	159c <__udivsi3+0xf8>
    159a:	4601      	mov	r1, r0
    159c:	4152      	adcs	r2, r2
    159e:	4610      	mov	r0, r2
    15a0:	4770      	bx	lr
    15a2:	e7ff      	b.n	15a4 <__udivsi3+0x100>
    15a4:	b501      	push	{r0, lr}
    15a6:	2000      	movs	r0, #0
    15a8:	f000 f8f0 	bl	178c <__aeabi_idiv0>
    15ac:	bd02      	pop	{r1, pc}
    15ae:	46c0      	nop			; (mov r8, r8)

000015b0 <__aeabi_uidivmod>:
    15b0:	2900      	cmp	r1, #0
    15b2:	d0f7      	beq.n	15a4 <__udivsi3+0x100>
    15b4:	e776      	b.n	14a4 <__udivsi3>
    15b6:	4770      	bx	lr

000015b8 <__divsi3>:
    15b8:	4603      	mov	r3, r0
    15ba:	430b      	orrs	r3, r1
    15bc:	d47f      	bmi.n	16be <__divsi3+0x106>
    15be:	2200      	movs	r2, #0
    15c0:	0843      	lsrs	r3, r0, #1
    15c2:	428b      	cmp	r3, r1
    15c4:	d374      	bcc.n	16b0 <__divsi3+0xf8>
    15c6:	0903      	lsrs	r3, r0, #4
    15c8:	428b      	cmp	r3, r1
    15ca:	d35f      	bcc.n	168c <__divsi3+0xd4>
    15cc:	0a03      	lsrs	r3, r0, #8
    15ce:	428b      	cmp	r3, r1
    15d0:	d344      	bcc.n	165c <__divsi3+0xa4>
    15d2:	0b03      	lsrs	r3, r0, #12
    15d4:	428b      	cmp	r3, r1
    15d6:	d328      	bcc.n	162a <__divsi3+0x72>
    15d8:	0c03      	lsrs	r3, r0, #16
    15da:	428b      	cmp	r3, r1
    15dc:	d30d      	bcc.n	15fa <__divsi3+0x42>
    15de:	22ff      	movs	r2, #255	; 0xff
    15e0:	0209      	lsls	r1, r1, #8
    15e2:	ba12      	rev	r2, r2
    15e4:	0c03      	lsrs	r3, r0, #16
    15e6:	428b      	cmp	r3, r1
    15e8:	d302      	bcc.n	15f0 <__divsi3+0x38>
    15ea:	1212      	asrs	r2, r2, #8
    15ec:	0209      	lsls	r1, r1, #8
    15ee:	d065      	beq.n	16bc <__divsi3+0x104>
    15f0:	0b03      	lsrs	r3, r0, #12
    15f2:	428b      	cmp	r3, r1
    15f4:	d319      	bcc.n	162a <__divsi3+0x72>
    15f6:	e000      	b.n	15fa <__divsi3+0x42>
    15f8:	0a09      	lsrs	r1, r1, #8
    15fa:	0bc3      	lsrs	r3, r0, #15
    15fc:	428b      	cmp	r3, r1
    15fe:	d301      	bcc.n	1604 <__divsi3+0x4c>
    1600:	03cb      	lsls	r3, r1, #15
    1602:	1ac0      	subs	r0, r0, r3
    1604:	4152      	adcs	r2, r2
    1606:	0b83      	lsrs	r3, r0, #14
    1608:	428b      	cmp	r3, r1
    160a:	d301      	bcc.n	1610 <__divsi3+0x58>
    160c:	038b      	lsls	r3, r1, #14
    160e:	1ac0      	subs	r0, r0, r3
    1610:	4152      	adcs	r2, r2
    1612:	0b43      	lsrs	r3, r0, #13
    1614:	428b      	cmp	r3, r1
    1616:	d301      	bcc.n	161c <__divsi3+0x64>
    1618:	034b      	lsls	r3, r1, #13
    161a:	1ac0      	subs	r0, r0, r3
    161c:	4152      	adcs	r2, r2
    161e:	0b03      	lsrs	r3, r0, #12
    1620:	428b      	cmp	r3, r1
    1622:	d301      	bcc.n	1628 <__divsi3+0x70>
    1624:	030b      	lsls	r3, r1, #12
    1626:	1ac0      	subs	r0, r0, r3
    1628:	4152      	adcs	r2, r2
    162a:	0ac3      	lsrs	r3, r0, #11
    162c:	428b      	cmp	r3, r1
    162e:	d301      	bcc.n	1634 <__divsi3+0x7c>
    1630:	02cb      	lsls	r3, r1, #11
    1632:	1ac0      	subs	r0, r0, r3
    1634:	4152      	adcs	r2, r2
    1636:	0a83      	lsrs	r3, r0, #10
    1638:	428b      	cmp	r3, r1
    163a:	d301      	bcc.n	1640 <__divsi3+0x88>
    163c:	028b      	lsls	r3, r1, #10
    163e:	1ac0      	subs	r0, r0, r3
    1640:	4152      	adcs	r2, r2
    1642:	0a43      	lsrs	r3, r0, #9
    1644:	428b      	cmp	r3, r1
    1646:	d301      	bcc.n	164c <__divsi3+0x94>
    1648:	024b      	lsls	r3, r1, #9
    164a:	1ac0      	subs	r0, r0, r3
    164c:	4152      	adcs	r2, r2
    164e:	0a03      	lsrs	r3, r0, #8
    1650:	428b      	cmp	r3, r1
    1652:	d301      	bcc.n	1658 <__divsi3+0xa0>
    1654:	020b      	lsls	r3, r1, #8
    1656:	1ac0      	subs	r0, r0, r3
    1658:	4152      	adcs	r2, r2
    165a:	d2cd      	bcs.n	15f8 <__divsi3+0x40>
    165c:	09c3      	lsrs	r3, r0, #7
    165e:	428b      	cmp	r3, r1
    1660:	d301      	bcc.n	1666 <__divsi3+0xae>
    1662:	01cb      	lsls	r3, r1, #7
    1664:	1ac0      	subs	r0, r0, r3
    1666:	4152      	adcs	r2, r2
    1668:	0983      	lsrs	r3, r0, #6
    166a:	428b      	cmp	r3, r1
    166c:	d301      	bcc.n	1672 <__divsi3+0xba>
    166e:	018b      	lsls	r3, r1, #6
    1670:	1ac0      	subs	r0, r0, r3
    1672:	4152      	adcs	r2, r2
    1674:	0943      	lsrs	r3, r0, #5
    1676:	428b      	cmp	r3, r1
    1678:	d301      	bcc.n	167e <__divsi3+0xc6>
    167a:	014b      	lsls	r3, r1, #5
    167c:	1ac0      	subs	r0, r0, r3
    167e:	4152      	adcs	r2, r2
    1680:	0903      	lsrs	r3, r0, #4
    1682:	428b      	cmp	r3, r1
    1684:	d301      	bcc.n	168a <__divsi3+0xd2>
    1686:	010b      	lsls	r3, r1, #4
    1688:	1ac0      	subs	r0, r0, r3
    168a:	4152      	adcs	r2, r2
    168c:	08c3      	lsrs	r3, r0, #3
    168e:	428b      	cmp	r3, r1
    1690:	d301      	bcc.n	1696 <__divsi3+0xde>
    1692:	00cb      	lsls	r3, r1, #3
    1694:	1ac0      	subs	r0, r0, r3
    1696:	4152      	adcs	r2, r2
    1698:	0883      	lsrs	r3, r0, #2
    169a:	428b      	cmp	r3, r1
    169c:	d301      	bcc.n	16a2 <__divsi3+0xea>
    169e:	008b      	lsls	r3, r1, #2
    16a0:	1ac0      	subs	r0, r0, r3
    16a2:	4152      	adcs	r2, r2
    16a4:	0843      	lsrs	r3, r0, #1
    16a6:	428b      	cmp	r3, r1
    16a8:	d301      	bcc.n	16ae <__divsi3+0xf6>
    16aa:	004b      	lsls	r3, r1, #1
    16ac:	1ac0      	subs	r0, r0, r3
    16ae:	4152      	adcs	r2, r2
    16b0:	1a41      	subs	r1, r0, r1
    16b2:	d200      	bcs.n	16b6 <__divsi3+0xfe>
    16b4:	4601      	mov	r1, r0
    16b6:	4152      	adcs	r2, r2
    16b8:	4610      	mov	r0, r2
    16ba:	4770      	bx	lr
    16bc:	e05d      	b.n	177a <__divsi3+0x1c2>
    16be:	0fca      	lsrs	r2, r1, #31
    16c0:	d000      	beq.n	16c4 <__divsi3+0x10c>
    16c2:	4249      	negs	r1, r1
    16c4:	1003      	asrs	r3, r0, #32
    16c6:	d300      	bcc.n	16ca <__divsi3+0x112>
    16c8:	4240      	negs	r0, r0
    16ca:	4053      	eors	r3, r2
    16cc:	2200      	movs	r2, #0
    16ce:	469c      	mov	ip, r3
    16d0:	0903      	lsrs	r3, r0, #4
    16d2:	428b      	cmp	r3, r1
    16d4:	d32d      	bcc.n	1732 <__divsi3+0x17a>
    16d6:	0a03      	lsrs	r3, r0, #8
    16d8:	428b      	cmp	r3, r1
    16da:	d312      	bcc.n	1702 <__divsi3+0x14a>
    16dc:	22fc      	movs	r2, #252	; 0xfc
    16de:	0189      	lsls	r1, r1, #6
    16e0:	ba12      	rev	r2, r2
    16e2:	0a03      	lsrs	r3, r0, #8
    16e4:	428b      	cmp	r3, r1
    16e6:	d30c      	bcc.n	1702 <__divsi3+0x14a>
    16e8:	0189      	lsls	r1, r1, #6
    16ea:	1192      	asrs	r2, r2, #6
    16ec:	428b      	cmp	r3, r1
    16ee:	d308      	bcc.n	1702 <__divsi3+0x14a>
    16f0:	0189      	lsls	r1, r1, #6
    16f2:	1192      	asrs	r2, r2, #6
    16f4:	428b      	cmp	r3, r1
    16f6:	d304      	bcc.n	1702 <__divsi3+0x14a>
    16f8:	0189      	lsls	r1, r1, #6
    16fa:	d03a      	beq.n	1772 <__divsi3+0x1ba>
    16fc:	1192      	asrs	r2, r2, #6
    16fe:	e000      	b.n	1702 <__divsi3+0x14a>
    1700:	0989      	lsrs	r1, r1, #6
    1702:	09c3      	lsrs	r3, r0, #7
    1704:	428b      	cmp	r3, r1
    1706:	d301      	bcc.n	170c <__divsi3+0x154>
    1708:	01cb      	lsls	r3, r1, #7
    170a:	1ac0      	subs	r0, r0, r3
    170c:	4152      	adcs	r2, r2
    170e:	0983      	lsrs	r3, r0, #6
    1710:	428b      	cmp	r3, r1
    1712:	d301      	bcc.n	1718 <__divsi3+0x160>
    1714:	018b      	lsls	r3, r1, #6
    1716:	1ac0      	subs	r0, r0, r3
    1718:	4152      	adcs	r2, r2
    171a:	0943      	lsrs	r3, r0, #5
    171c:	428b      	cmp	r3, r1
    171e:	d301      	bcc.n	1724 <__divsi3+0x16c>
    1720:	014b      	lsls	r3, r1, #5
    1722:	1ac0      	subs	r0, r0, r3
    1724:	4152      	adcs	r2, r2
    1726:	0903      	lsrs	r3, r0, #4
    1728:	428b      	cmp	r3, r1
    172a:	d301      	bcc.n	1730 <__divsi3+0x178>
    172c:	010b      	lsls	r3, r1, #4
    172e:	1ac0      	subs	r0, r0, r3
    1730:	4152      	adcs	r2, r2
    1732:	08c3      	lsrs	r3, r0, #3
    1734:	428b      	cmp	r3, r1
    1736:	d301      	bcc.n	173c <__divsi3+0x184>
    1738:	00cb      	lsls	r3, r1, #3
    173a:	1ac0      	subs	r0, r0, r3
    173c:	4152      	adcs	r2, r2
    173e:	0883      	lsrs	r3, r0, #2
    1740:	428b      	cmp	r3, r1
    1742:	d301      	bcc.n	1748 <__divsi3+0x190>
    1744:	008b      	lsls	r3, r1, #2
    1746:	1ac0      	subs	r0, r0, r3
    1748:	4152      	adcs	r2, r2
    174a:	d2d9      	bcs.n	1700 <__divsi3+0x148>
    174c:	0843      	lsrs	r3, r0, #1
    174e:	428b      	cmp	r3, r1
    1750:	d301      	bcc.n	1756 <__divsi3+0x19e>
    1752:	004b      	lsls	r3, r1, #1
    1754:	1ac0      	subs	r0, r0, r3
    1756:	4152      	adcs	r2, r2
    1758:	1a41      	subs	r1, r0, r1
    175a:	d200      	bcs.n	175e <__divsi3+0x1a6>
    175c:	4601      	mov	r1, r0
    175e:	4663      	mov	r3, ip
    1760:	4152      	adcs	r2, r2
    1762:	105b      	asrs	r3, r3, #1
    1764:	4610      	mov	r0, r2
    1766:	d301      	bcc.n	176c <__divsi3+0x1b4>
    1768:	4240      	negs	r0, r0
    176a:	2b00      	cmp	r3, #0
    176c:	d500      	bpl.n	1770 <__divsi3+0x1b8>
    176e:	4249      	negs	r1, r1
    1770:	4770      	bx	lr
    1772:	4663      	mov	r3, ip
    1774:	105b      	asrs	r3, r3, #1
    1776:	d300      	bcc.n	177a <__divsi3+0x1c2>
    1778:	4240      	negs	r0, r0
    177a:	b501      	push	{r0, lr}
    177c:	2000      	movs	r0, #0
    177e:	f000 f805 	bl	178c <__aeabi_idiv0>
    1782:	bd02      	pop	{r1, pc}

00001784 <__aeabi_idivmod>:
    1784:	2900      	cmp	r1, #0
    1786:	d0f8      	beq.n	177a <__divsi3+0x1c2>
    1788:	e716      	b.n	15b8 <__divsi3>
    178a:	4770      	bx	lr

0000178c <__aeabi_idiv0>:
    178c:	4770      	bx	lr
    178e:	46c0      	nop			; (mov r8, r8)

00001790 <__ffssi2>:
    1790:	b510      	push	{r4, lr}
    1792:	2300      	movs	r3, #0
    1794:	2800      	cmp	r0, #0
    1796:	d002      	beq.n	179e <__ffssi2+0xe>
    1798:	f000 f804 	bl	17a4 <__ctzsi2>
    179c:	1c43      	adds	r3, r0, #1
    179e:	0018      	movs	r0, r3
    17a0:	bd10      	pop	{r4, pc}
    17a2:	46c0      	nop			; (mov r8, r8)

000017a4 <__ctzsi2>:
    17a4:	4241      	negs	r1, r0
    17a6:	4008      	ands	r0, r1
    17a8:	211c      	movs	r1, #28
    17aa:	2301      	movs	r3, #1
    17ac:	041b      	lsls	r3, r3, #16
    17ae:	4298      	cmp	r0, r3
    17b0:	d301      	bcc.n	17b6 <__ctzsi2+0x12>
    17b2:	0c00      	lsrs	r0, r0, #16
    17b4:	3910      	subs	r1, #16
    17b6:	0a1b      	lsrs	r3, r3, #8
    17b8:	4298      	cmp	r0, r3
    17ba:	d301      	bcc.n	17c0 <__ctzsi2+0x1c>
    17bc:	0a00      	lsrs	r0, r0, #8
    17be:	3908      	subs	r1, #8
    17c0:	091b      	lsrs	r3, r3, #4
    17c2:	4298      	cmp	r0, r3
    17c4:	d301      	bcc.n	17ca <__ctzsi2+0x26>
    17c6:	0900      	lsrs	r0, r0, #4
    17c8:	3904      	subs	r1, #4
    17ca:	a202      	add	r2, pc, #8	; (adr r2, 17d4 <__ctzsi2+0x30>)
    17cc:	5c10      	ldrb	r0, [r2, r0]
    17ce:	1a40      	subs	r0, r0, r1
    17d0:	4770      	bx	lr
    17d2:	46c0      	nop			; (mov r8, r8)
    17d4:	1d1d1c1b 	.word	0x1d1d1c1b
    17d8:	1e1e1e1e 	.word	0x1e1e1e1e
    17dc:	1f1f1f1f 	.word	0x1f1f1f1f
    17e0:	1f1f1f1f 	.word	0x1f1f1f1f

000017e4 <__libc_init_array>:
    17e4:	b570      	push	{r4, r5, r6, lr}
    17e6:	2600      	movs	r6, #0
    17e8:	4d0c      	ldr	r5, [pc, #48]	; (181c <__libc_init_array+0x38>)
    17ea:	4c0d      	ldr	r4, [pc, #52]	; (1820 <__libc_init_array+0x3c>)
    17ec:	1b64      	subs	r4, r4, r5
    17ee:	10a4      	asrs	r4, r4, #2
    17f0:	42a6      	cmp	r6, r4
    17f2:	d109      	bne.n	1808 <__libc_init_array+0x24>
    17f4:	2600      	movs	r6, #0
    17f6:	f000 fdef 	bl	23d8 <_init>
    17fa:	4d0a      	ldr	r5, [pc, #40]	; (1824 <__libc_init_array+0x40>)
    17fc:	4c0a      	ldr	r4, [pc, #40]	; (1828 <__libc_init_array+0x44>)
    17fe:	1b64      	subs	r4, r4, r5
    1800:	10a4      	asrs	r4, r4, #2
    1802:	42a6      	cmp	r6, r4
    1804:	d105      	bne.n	1812 <__libc_init_array+0x2e>
    1806:	bd70      	pop	{r4, r5, r6, pc}
    1808:	00b3      	lsls	r3, r6, #2
    180a:	58eb      	ldr	r3, [r5, r3]
    180c:	4798      	blx	r3
    180e:	3601      	adds	r6, #1
    1810:	e7ee      	b.n	17f0 <__libc_init_array+0xc>
    1812:	00b3      	lsls	r3, r6, #2
    1814:	58eb      	ldr	r3, [r5, r3]
    1816:	4798      	blx	r3
    1818:	3601      	adds	r6, #1
    181a:	e7f2      	b.n	1802 <__libc_init_array+0x1e>
    181c:	000023e4 	.word	0x000023e4
    1820:	000023e4 	.word	0x000023e4
    1824:	000023e4 	.word	0x000023e4
    1828:	000023e8 	.word	0x000023e8

0000182c <memset>:
    182c:	0003      	movs	r3, r0
    182e:	1882      	adds	r2, r0, r2
    1830:	4293      	cmp	r3, r2
    1832:	d100      	bne.n	1836 <memset+0xa>
    1834:	4770      	bx	lr
    1836:	7019      	strb	r1, [r3, #0]
    1838:	3301      	adds	r3, #1
    183a:	e7f9      	b.n	1830 <memset+0x4>

0000183c <_vsniprintf_r>:
    183c:	b530      	push	{r4, r5, lr}
    183e:	0014      	movs	r4, r2
    1840:	b09b      	sub	sp, #108	; 0x6c
    1842:	0005      	movs	r5, r0
    1844:	001a      	movs	r2, r3
    1846:	2c00      	cmp	r4, #0
    1848:	da05      	bge.n	1856 <_vsniprintf_r+0x1a>
    184a:	238b      	movs	r3, #139	; 0x8b
    184c:	6003      	str	r3, [r0, #0]
    184e:	2001      	movs	r0, #1
    1850:	4240      	negs	r0, r0
    1852:	b01b      	add	sp, #108	; 0x6c
    1854:	bd30      	pop	{r4, r5, pc}
    1856:	2382      	movs	r3, #130	; 0x82
    1858:	4668      	mov	r0, sp
    185a:	009b      	lsls	r3, r3, #2
    185c:	8183      	strh	r3, [r0, #12]
    185e:	2300      	movs	r3, #0
    1860:	9100      	str	r1, [sp, #0]
    1862:	9104      	str	r1, [sp, #16]
    1864:	429c      	cmp	r4, r3
    1866:	d000      	beq.n	186a <_vsniprintf_r+0x2e>
    1868:	1e63      	subs	r3, r4, #1
    186a:	9302      	str	r3, [sp, #8]
    186c:	9305      	str	r3, [sp, #20]
    186e:	2301      	movs	r3, #1
    1870:	4669      	mov	r1, sp
    1872:	425b      	negs	r3, r3
    1874:	81cb      	strh	r3, [r1, #14]
    1876:	0028      	movs	r0, r5
    1878:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    187a:	f000 f8d7 	bl	1a2c <_svfiprintf_r>
    187e:	1c43      	adds	r3, r0, #1
    1880:	da01      	bge.n	1886 <_vsniprintf_r+0x4a>
    1882:	238b      	movs	r3, #139	; 0x8b
    1884:	602b      	str	r3, [r5, #0]
    1886:	2c00      	cmp	r4, #0
    1888:	d0e3      	beq.n	1852 <_vsniprintf_r+0x16>
    188a:	2300      	movs	r3, #0
    188c:	9a00      	ldr	r2, [sp, #0]
    188e:	7013      	strb	r3, [r2, #0]
    1890:	e7df      	b.n	1852 <_vsniprintf_r+0x16>
	...

00001894 <vsniprintf>:
    1894:	b507      	push	{r0, r1, r2, lr}
    1896:	9300      	str	r3, [sp, #0]
    1898:	0013      	movs	r3, r2
    189a:	000a      	movs	r2, r1
    189c:	0001      	movs	r1, r0
    189e:	4802      	ldr	r0, [pc, #8]	; (18a8 <vsniprintf+0x14>)
    18a0:	6800      	ldr	r0, [r0, #0]
    18a2:	f7ff ffcb 	bl	183c <_vsniprintf_r>
    18a6:	bd0e      	pop	{r1, r2, r3, pc}
    18a8:	20000000 	.word	0x20000000

000018ac <_malloc_r>:
    18ac:	2303      	movs	r3, #3
    18ae:	b570      	push	{r4, r5, r6, lr}
    18b0:	1ccd      	adds	r5, r1, #3
    18b2:	439d      	bics	r5, r3
    18b4:	3508      	adds	r5, #8
    18b6:	0006      	movs	r6, r0
    18b8:	2d0c      	cmp	r5, #12
    18ba:	d21e      	bcs.n	18fa <_malloc_r+0x4e>
    18bc:	250c      	movs	r5, #12
    18be:	42a9      	cmp	r1, r5
    18c0:	d81d      	bhi.n	18fe <_malloc_r+0x52>
    18c2:	0030      	movs	r0, r6
    18c4:	f000 fb76 	bl	1fb4 <__malloc_lock>
    18c8:	4a25      	ldr	r2, [pc, #148]	; (1960 <_malloc_r+0xb4>)
    18ca:	6814      	ldr	r4, [r2, #0]
    18cc:	0021      	movs	r1, r4
    18ce:	2900      	cmp	r1, #0
    18d0:	d119      	bne.n	1906 <_malloc_r+0x5a>
    18d2:	4c24      	ldr	r4, [pc, #144]	; (1964 <_malloc_r+0xb8>)
    18d4:	6823      	ldr	r3, [r4, #0]
    18d6:	2b00      	cmp	r3, #0
    18d8:	d103      	bne.n	18e2 <_malloc_r+0x36>
    18da:	0030      	movs	r0, r6
    18dc:	f000 fb32 	bl	1f44 <_sbrk_r>
    18e0:	6020      	str	r0, [r4, #0]
    18e2:	0029      	movs	r1, r5
    18e4:	0030      	movs	r0, r6
    18e6:	f000 fb2d 	bl	1f44 <_sbrk_r>
    18ea:	1c43      	adds	r3, r0, #1
    18ec:	d12c      	bne.n	1948 <_malloc_r+0x9c>
    18ee:	230c      	movs	r3, #12
    18f0:	0030      	movs	r0, r6
    18f2:	6033      	str	r3, [r6, #0]
    18f4:	f000 fb5f 	bl	1fb6 <__malloc_unlock>
    18f8:	e003      	b.n	1902 <_malloc_r+0x56>
    18fa:	2d00      	cmp	r5, #0
    18fc:	dadf      	bge.n	18be <_malloc_r+0x12>
    18fe:	230c      	movs	r3, #12
    1900:	6033      	str	r3, [r6, #0]
    1902:	2000      	movs	r0, #0
    1904:	bd70      	pop	{r4, r5, r6, pc}
    1906:	680b      	ldr	r3, [r1, #0]
    1908:	1b5b      	subs	r3, r3, r5
    190a:	d41a      	bmi.n	1942 <_malloc_r+0x96>
    190c:	2b0b      	cmp	r3, #11
    190e:	d903      	bls.n	1918 <_malloc_r+0x6c>
    1910:	600b      	str	r3, [r1, #0]
    1912:	18cc      	adds	r4, r1, r3
    1914:	6025      	str	r5, [r4, #0]
    1916:	e003      	b.n	1920 <_malloc_r+0x74>
    1918:	428c      	cmp	r4, r1
    191a:	d10e      	bne.n	193a <_malloc_r+0x8e>
    191c:	6863      	ldr	r3, [r4, #4]
    191e:	6013      	str	r3, [r2, #0]
    1920:	0030      	movs	r0, r6
    1922:	f000 fb48 	bl	1fb6 <__malloc_unlock>
    1926:	0020      	movs	r0, r4
    1928:	2207      	movs	r2, #7
    192a:	300b      	adds	r0, #11
    192c:	1d23      	adds	r3, r4, #4
    192e:	4390      	bics	r0, r2
    1930:	1ac3      	subs	r3, r0, r3
    1932:	d0e7      	beq.n	1904 <_malloc_r+0x58>
    1934:	425a      	negs	r2, r3
    1936:	50e2      	str	r2, [r4, r3]
    1938:	e7e4      	b.n	1904 <_malloc_r+0x58>
    193a:	684b      	ldr	r3, [r1, #4]
    193c:	6063      	str	r3, [r4, #4]
    193e:	000c      	movs	r4, r1
    1940:	e7ee      	b.n	1920 <_malloc_r+0x74>
    1942:	000c      	movs	r4, r1
    1944:	6849      	ldr	r1, [r1, #4]
    1946:	e7c2      	b.n	18ce <_malloc_r+0x22>
    1948:	2303      	movs	r3, #3
    194a:	1cc4      	adds	r4, r0, #3
    194c:	439c      	bics	r4, r3
    194e:	42a0      	cmp	r0, r4
    1950:	d0e0      	beq.n	1914 <_malloc_r+0x68>
    1952:	1a21      	subs	r1, r4, r0
    1954:	0030      	movs	r0, r6
    1956:	f000 faf5 	bl	1f44 <_sbrk_r>
    195a:	1c43      	adds	r3, r0, #1
    195c:	d1da      	bne.n	1914 <_malloc_r+0x68>
    195e:	e7c6      	b.n	18ee <_malloc_r+0x42>
    1960:	2000010c 	.word	0x2000010c
    1964:	20000110 	.word	0x20000110

00001968 <__ssputs_r>:
    1968:	b5f0      	push	{r4, r5, r6, r7, lr}
    196a:	688e      	ldr	r6, [r1, #8]
    196c:	b085      	sub	sp, #20
    196e:	0007      	movs	r7, r0
    1970:	000c      	movs	r4, r1
    1972:	9203      	str	r2, [sp, #12]
    1974:	9301      	str	r3, [sp, #4]
    1976:	429e      	cmp	r6, r3
    1978:	d839      	bhi.n	19ee <__ssputs_r+0x86>
    197a:	2390      	movs	r3, #144	; 0x90
    197c:	898a      	ldrh	r2, [r1, #12]
    197e:	00db      	lsls	r3, r3, #3
    1980:	421a      	tst	r2, r3
    1982:	d034      	beq.n	19ee <__ssputs_r+0x86>
    1984:	2503      	movs	r5, #3
    1986:	6909      	ldr	r1, [r1, #16]
    1988:	6823      	ldr	r3, [r4, #0]
    198a:	1a5b      	subs	r3, r3, r1
    198c:	9302      	str	r3, [sp, #8]
    198e:	6963      	ldr	r3, [r4, #20]
    1990:	9802      	ldr	r0, [sp, #8]
    1992:	435d      	muls	r5, r3
    1994:	0feb      	lsrs	r3, r5, #31
    1996:	195d      	adds	r5, r3, r5
    1998:	9b01      	ldr	r3, [sp, #4]
    199a:	106d      	asrs	r5, r5, #1
    199c:	3301      	adds	r3, #1
    199e:	181b      	adds	r3, r3, r0
    19a0:	42ab      	cmp	r3, r5
    19a2:	d900      	bls.n	19a6 <__ssputs_r+0x3e>
    19a4:	001d      	movs	r5, r3
    19a6:	0553      	lsls	r3, r2, #21
    19a8:	d532      	bpl.n	1a10 <__ssputs_r+0xa8>
    19aa:	0029      	movs	r1, r5
    19ac:	0038      	movs	r0, r7
    19ae:	f7ff ff7d 	bl	18ac <_malloc_r>
    19b2:	1e06      	subs	r6, r0, #0
    19b4:	d109      	bne.n	19ca <__ssputs_r+0x62>
    19b6:	230c      	movs	r3, #12
    19b8:	603b      	str	r3, [r7, #0]
    19ba:	2340      	movs	r3, #64	; 0x40
    19bc:	2001      	movs	r0, #1
    19be:	89a2      	ldrh	r2, [r4, #12]
    19c0:	4240      	negs	r0, r0
    19c2:	4313      	orrs	r3, r2
    19c4:	81a3      	strh	r3, [r4, #12]
    19c6:	b005      	add	sp, #20
    19c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19ca:	9a02      	ldr	r2, [sp, #8]
    19cc:	6921      	ldr	r1, [r4, #16]
    19ce:	f000 fad6 	bl	1f7e <memcpy>
    19d2:	89a3      	ldrh	r3, [r4, #12]
    19d4:	4a14      	ldr	r2, [pc, #80]	; (1a28 <__ssputs_r+0xc0>)
    19d6:	401a      	ands	r2, r3
    19d8:	2380      	movs	r3, #128	; 0x80
    19da:	4313      	orrs	r3, r2
    19dc:	81a3      	strh	r3, [r4, #12]
    19de:	9b02      	ldr	r3, [sp, #8]
    19e0:	6126      	str	r6, [r4, #16]
    19e2:	18f6      	adds	r6, r6, r3
    19e4:	6026      	str	r6, [r4, #0]
    19e6:	6165      	str	r5, [r4, #20]
    19e8:	9e01      	ldr	r6, [sp, #4]
    19ea:	1aed      	subs	r5, r5, r3
    19ec:	60a5      	str	r5, [r4, #8]
    19ee:	9b01      	ldr	r3, [sp, #4]
    19f0:	42b3      	cmp	r3, r6
    19f2:	d200      	bcs.n	19f6 <__ssputs_r+0x8e>
    19f4:	001e      	movs	r6, r3
    19f6:	0032      	movs	r2, r6
    19f8:	9903      	ldr	r1, [sp, #12]
    19fa:	6820      	ldr	r0, [r4, #0]
    19fc:	f000 fac8 	bl	1f90 <memmove>
    1a00:	68a3      	ldr	r3, [r4, #8]
    1a02:	2000      	movs	r0, #0
    1a04:	1b9b      	subs	r3, r3, r6
    1a06:	60a3      	str	r3, [r4, #8]
    1a08:	6823      	ldr	r3, [r4, #0]
    1a0a:	199e      	adds	r6, r3, r6
    1a0c:	6026      	str	r6, [r4, #0]
    1a0e:	e7da      	b.n	19c6 <__ssputs_r+0x5e>
    1a10:	002a      	movs	r2, r5
    1a12:	0038      	movs	r0, r7
    1a14:	f000 fb1a 	bl	204c <_realloc_r>
    1a18:	1e06      	subs	r6, r0, #0
    1a1a:	d1e0      	bne.n	19de <__ssputs_r+0x76>
    1a1c:	6921      	ldr	r1, [r4, #16]
    1a1e:	0038      	movs	r0, r7
    1a20:	f000 faca 	bl	1fb8 <_free_r>
    1a24:	e7c7      	b.n	19b6 <__ssputs_r+0x4e>
    1a26:	46c0      	nop			; (mov r8, r8)
    1a28:	fffffb7f 	.word	0xfffffb7f

00001a2c <_svfiprintf_r>:
    1a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a2e:	b09f      	sub	sp, #124	; 0x7c
    1a30:	9002      	str	r0, [sp, #8]
    1a32:	9305      	str	r3, [sp, #20]
    1a34:	898b      	ldrh	r3, [r1, #12]
    1a36:	000f      	movs	r7, r1
    1a38:	0016      	movs	r6, r2
    1a3a:	061b      	lsls	r3, r3, #24
    1a3c:	d511      	bpl.n	1a62 <_svfiprintf_r+0x36>
    1a3e:	690b      	ldr	r3, [r1, #16]
    1a40:	2b00      	cmp	r3, #0
    1a42:	d10e      	bne.n	1a62 <_svfiprintf_r+0x36>
    1a44:	2140      	movs	r1, #64	; 0x40
    1a46:	f7ff ff31 	bl	18ac <_malloc_r>
    1a4a:	6038      	str	r0, [r7, #0]
    1a4c:	6138      	str	r0, [r7, #16]
    1a4e:	2800      	cmp	r0, #0
    1a50:	d105      	bne.n	1a5e <_svfiprintf_r+0x32>
    1a52:	230c      	movs	r3, #12
    1a54:	9a02      	ldr	r2, [sp, #8]
    1a56:	3801      	subs	r0, #1
    1a58:	6013      	str	r3, [r2, #0]
    1a5a:	b01f      	add	sp, #124	; 0x7c
    1a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a5e:	2340      	movs	r3, #64	; 0x40
    1a60:	617b      	str	r3, [r7, #20]
    1a62:	2300      	movs	r3, #0
    1a64:	ad06      	add	r5, sp, #24
    1a66:	616b      	str	r3, [r5, #20]
    1a68:	3320      	adds	r3, #32
    1a6a:	766b      	strb	r3, [r5, #25]
    1a6c:	3310      	adds	r3, #16
    1a6e:	76ab      	strb	r3, [r5, #26]
    1a70:	0034      	movs	r4, r6
    1a72:	7823      	ldrb	r3, [r4, #0]
    1a74:	2b00      	cmp	r3, #0
    1a76:	d147      	bne.n	1b08 <_svfiprintf_r+0xdc>
    1a78:	1ba3      	subs	r3, r4, r6
    1a7a:	9304      	str	r3, [sp, #16]
    1a7c:	d00d      	beq.n	1a9a <_svfiprintf_r+0x6e>
    1a7e:	1ba3      	subs	r3, r4, r6
    1a80:	0032      	movs	r2, r6
    1a82:	0039      	movs	r1, r7
    1a84:	9802      	ldr	r0, [sp, #8]
    1a86:	f7ff ff6f 	bl	1968 <__ssputs_r>
    1a8a:	1c43      	adds	r3, r0, #1
    1a8c:	d100      	bne.n	1a90 <_svfiprintf_r+0x64>
    1a8e:	e0b5      	b.n	1bfc <_svfiprintf_r+0x1d0>
    1a90:	696a      	ldr	r2, [r5, #20]
    1a92:	9b04      	ldr	r3, [sp, #16]
    1a94:	4694      	mov	ip, r2
    1a96:	4463      	add	r3, ip
    1a98:	616b      	str	r3, [r5, #20]
    1a9a:	7823      	ldrb	r3, [r4, #0]
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d100      	bne.n	1aa2 <_svfiprintf_r+0x76>
    1aa0:	e0ac      	b.n	1bfc <_svfiprintf_r+0x1d0>
    1aa2:	2201      	movs	r2, #1
    1aa4:	2300      	movs	r3, #0
    1aa6:	4252      	negs	r2, r2
    1aa8:	606a      	str	r2, [r5, #4]
    1aaa:	a902      	add	r1, sp, #8
    1aac:	3254      	adds	r2, #84	; 0x54
    1aae:	1852      	adds	r2, r2, r1
    1ab0:	3401      	adds	r4, #1
    1ab2:	602b      	str	r3, [r5, #0]
    1ab4:	60eb      	str	r3, [r5, #12]
    1ab6:	60ab      	str	r3, [r5, #8]
    1ab8:	7013      	strb	r3, [r2, #0]
    1aba:	65ab      	str	r3, [r5, #88]	; 0x58
    1abc:	4e58      	ldr	r6, [pc, #352]	; (1c20 <_svfiprintf_r+0x1f4>)
    1abe:	2205      	movs	r2, #5
    1ac0:	7821      	ldrb	r1, [r4, #0]
    1ac2:	0030      	movs	r0, r6
    1ac4:	f000 fa50 	bl	1f68 <memchr>
    1ac8:	1c62      	adds	r2, r4, #1
    1aca:	2800      	cmp	r0, #0
    1acc:	d120      	bne.n	1b10 <_svfiprintf_r+0xe4>
    1ace:	6829      	ldr	r1, [r5, #0]
    1ad0:	06cb      	lsls	r3, r1, #27
    1ad2:	d504      	bpl.n	1ade <_svfiprintf_r+0xb2>
    1ad4:	2353      	movs	r3, #83	; 0x53
    1ad6:	ae02      	add	r6, sp, #8
    1ad8:	3020      	adds	r0, #32
    1ada:	199b      	adds	r3, r3, r6
    1adc:	7018      	strb	r0, [r3, #0]
    1ade:	070b      	lsls	r3, r1, #28
    1ae0:	d504      	bpl.n	1aec <_svfiprintf_r+0xc0>
    1ae2:	2353      	movs	r3, #83	; 0x53
    1ae4:	202b      	movs	r0, #43	; 0x2b
    1ae6:	ae02      	add	r6, sp, #8
    1ae8:	199b      	adds	r3, r3, r6
    1aea:	7018      	strb	r0, [r3, #0]
    1aec:	7823      	ldrb	r3, [r4, #0]
    1aee:	2b2a      	cmp	r3, #42	; 0x2a
    1af0:	d016      	beq.n	1b20 <_svfiprintf_r+0xf4>
    1af2:	2000      	movs	r0, #0
    1af4:	210a      	movs	r1, #10
    1af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1af8:	7822      	ldrb	r2, [r4, #0]
    1afa:	3a30      	subs	r2, #48	; 0x30
    1afc:	2a09      	cmp	r2, #9
    1afe:	d955      	bls.n	1bac <_svfiprintf_r+0x180>
    1b00:	2800      	cmp	r0, #0
    1b02:	d015      	beq.n	1b30 <_svfiprintf_r+0x104>
    1b04:	9309      	str	r3, [sp, #36]	; 0x24
    1b06:	e013      	b.n	1b30 <_svfiprintf_r+0x104>
    1b08:	2b25      	cmp	r3, #37	; 0x25
    1b0a:	d0b5      	beq.n	1a78 <_svfiprintf_r+0x4c>
    1b0c:	3401      	adds	r4, #1
    1b0e:	e7b0      	b.n	1a72 <_svfiprintf_r+0x46>
    1b10:	2301      	movs	r3, #1
    1b12:	1b80      	subs	r0, r0, r6
    1b14:	4083      	lsls	r3, r0
    1b16:	6829      	ldr	r1, [r5, #0]
    1b18:	0014      	movs	r4, r2
    1b1a:	430b      	orrs	r3, r1
    1b1c:	602b      	str	r3, [r5, #0]
    1b1e:	e7cd      	b.n	1abc <_svfiprintf_r+0x90>
    1b20:	9b05      	ldr	r3, [sp, #20]
    1b22:	1d18      	adds	r0, r3, #4
    1b24:	681b      	ldr	r3, [r3, #0]
    1b26:	9005      	str	r0, [sp, #20]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	db39      	blt.n	1ba0 <_svfiprintf_r+0x174>
    1b2c:	9309      	str	r3, [sp, #36]	; 0x24
    1b2e:	0014      	movs	r4, r2
    1b30:	7823      	ldrb	r3, [r4, #0]
    1b32:	2b2e      	cmp	r3, #46	; 0x2e
    1b34:	d10b      	bne.n	1b4e <_svfiprintf_r+0x122>
    1b36:	7863      	ldrb	r3, [r4, #1]
    1b38:	1c62      	adds	r2, r4, #1
    1b3a:	2b2a      	cmp	r3, #42	; 0x2a
    1b3c:	d13e      	bne.n	1bbc <_svfiprintf_r+0x190>
    1b3e:	9b05      	ldr	r3, [sp, #20]
    1b40:	3402      	adds	r4, #2
    1b42:	1d1a      	adds	r2, r3, #4
    1b44:	681b      	ldr	r3, [r3, #0]
    1b46:	9205      	str	r2, [sp, #20]
    1b48:	2b00      	cmp	r3, #0
    1b4a:	db34      	blt.n	1bb6 <_svfiprintf_r+0x18a>
    1b4c:	9307      	str	r3, [sp, #28]
    1b4e:	4e35      	ldr	r6, [pc, #212]	; (1c24 <_svfiprintf_r+0x1f8>)
    1b50:	7821      	ldrb	r1, [r4, #0]
    1b52:	2203      	movs	r2, #3
    1b54:	0030      	movs	r0, r6
    1b56:	f000 fa07 	bl	1f68 <memchr>
    1b5a:	2800      	cmp	r0, #0
    1b5c:	d006      	beq.n	1b6c <_svfiprintf_r+0x140>
    1b5e:	2340      	movs	r3, #64	; 0x40
    1b60:	1b80      	subs	r0, r0, r6
    1b62:	4083      	lsls	r3, r0
    1b64:	682a      	ldr	r2, [r5, #0]
    1b66:	3401      	adds	r4, #1
    1b68:	4313      	orrs	r3, r2
    1b6a:	602b      	str	r3, [r5, #0]
    1b6c:	7821      	ldrb	r1, [r4, #0]
    1b6e:	2206      	movs	r2, #6
    1b70:	482d      	ldr	r0, [pc, #180]	; (1c28 <_svfiprintf_r+0x1fc>)
    1b72:	1c66      	adds	r6, r4, #1
    1b74:	7629      	strb	r1, [r5, #24]
    1b76:	f000 f9f7 	bl	1f68 <memchr>
    1b7a:	2800      	cmp	r0, #0
    1b7c:	d046      	beq.n	1c0c <_svfiprintf_r+0x1e0>
    1b7e:	4b2b      	ldr	r3, [pc, #172]	; (1c2c <_svfiprintf_r+0x200>)
    1b80:	2b00      	cmp	r3, #0
    1b82:	d12f      	bne.n	1be4 <_svfiprintf_r+0x1b8>
    1b84:	6829      	ldr	r1, [r5, #0]
    1b86:	9b05      	ldr	r3, [sp, #20]
    1b88:	2207      	movs	r2, #7
    1b8a:	05c9      	lsls	r1, r1, #23
    1b8c:	d528      	bpl.n	1be0 <_svfiprintf_r+0x1b4>
    1b8e:	189b      	adds	r3, r3, r2
    1b90:	4393      	bics	r3, r2
    1b92:	3308      	adds	r3, #8
    1b94:	9305      	str	r3, [sp, #20]
    1b96:	696b      	ldr	r3, [r5, #20]
    1b98:	9a03      	ldr	r2, [sp, #12]
    1b9a:	189b      	adds	r3, r3, r2
    1b9c:	616b      	str	r3, [r5, #20]
    1b9e:	e767      	b.n	1a70 <_svfiprintf_r+0x44>
    1ba0:	425b      	negs	r3, r3
    1ba2:	60eb      	str	r3, [r5, #12]
    1ba4:	2302      	movs	r3, #2
    1ba6:	430b      	orrs	r3, r1
    1ba8:	602b      	str	r3, [r5, #0]
    1baa:	e7c0      	b.n	1b2e <_svfiprintf_r+0x102>
    1bac:	434b      	muls	r3, r1
    1bae:	3401      	adds	r4, #1
    1bb0:	189b      	adds	r3, r3, r2
    1bb2:	2001      	movs	r0, #1
    1bb4:	e7a0      	b.n	1af8 <_svfiprintf_r+0xcc>
    1bb6:	2301      	movs	r3, #1
    1bb8:	425b      	negs	r3, r3
    1bba:	e7c7      	b.n	1b4c <_svfiprintf_r+0x120>
    1bbc:	2300      	movs	r3, #0
    1bbe:	0014      	movs	r4, r2
    1bc0:	200a      	movs	r0, #10
    1bc2:	001a      	movs	r2, r3
    1bc4:	606b      	str	r3, [r5, #4]
    1bc6:	7821      	ldrb	r1, [r4, #0]
    1bc8:	3930      	subs	r1, #48	; 0x30
    1bca:	2909      	cmp	r1, #9
    1bcc:	d903      	bls.n	1bd6 <_svfiprintf_r+0x1aa>
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d0bd      	beq.n	1b4e <_svfiprintf_r+0x122>
    1bd2:	9207      	str	r2, [sp, #28]
    1bd4:	e7bb      	b.n	1b4e <_svfiprintf_r+0x122>
    1bd6:	4342      	muls	r2, r0
    1bd8:	3401      	adds	r4, #1
    1bda:	1852      	adds	r2, r2, r1
    1bdc:	2301      	movs	r3, #1
    1bde:	e7f2      	b.n	1bc6 <_svfiprintf_r+0x19a>
    1be0:	3307      	adds	r3, #7
    1be2:	e7d5      	b.n	1b90 <_svfiprintf_r+0x164>
    1be4:	ab05      	add	r3, sp, #20
    1be6:	9300      	str	r3, [sp, #0]
    1be8:	003a      	movs	r2, r7
    1bea:	4b11      	ldr	r3, [pc, #68]	; (1c30 <_svfiprintf_r+0x204>)
    1bec:	0029      	movs	r1, r5
    1bee:	9802      	ldr	r0, [sp, #8]
    1bf0:	e000      	b.n	1bf4 <_svfiprintf_r+0x1c8>
    1bf2:	bf00      	nop
    1bf4:	9003      	str	r0, [sp, #12]
    1bf6:	9b03      	ldr	r3, [sp, #12]
    1bf8:	3301      	adds	r3, #1
    1bfa:	d1cc      	bne.n	1b96 <_svfiprintf_r+0x16a>
    1bfc:	89bb      	ldrh	r3, [r7, #12]
    1bfe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1c00:	065b      	lsls	r3, r3, #25
    1c02:	d400      	bmi.n	1c06 <_svfiprintf_r+0x1da>
    1c04:	e729      	b.n	1a5a <_svfiprintf_r+0x2e>
    1c06:	2001      	movs	r0, #1
    1c08:	4240      	negs	r0, r0
    1c0a:	e726      	b.n	1a5a <_svfiprintf_r+0x2e>
    1c0c:	ab05      	add	r3, sp, #20
    1c0e:	9300      	str	r3, [sp, #0]
    1c10:	003a      	movs	r2, r7
    1c12:	4b07      	ldr	r3, [pc, #28]	; (1c30 <_svfiprintf_r+0x204>)
    1c14:	0029      	movs	r1, r5
    1c16:	9802      	ldr	r0, [sp, #8]
    1c18:	f000 f87a 	bl	1d10 <_printf_i>
    1c1c:	e7ea      	b.n	1bf4 <_svfiprintf_r+0x1c8>
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	000023a4 	.word	0x000023a4
    1c24:	000023aa 	.word	0x000023aa
    1c28:	000023ae 	.word	0x000023ae
    1c2c:	00000000 	.word	0x00000000
    1c30:	00001969 	.word	0x00001969

00001c34 <_printf_common>:
    1c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1c36:	0015      	movs	r5, r2
    1c38:	9301      	str	r3, [sp, #4]
    1c3a:	688a      	ldr	r2, [r1, #8]
    1c3c:	690b      	ldr	r3, [r1, #16]
    1c3e:	9000      	str	r0, [sp, #0]
    1c40:	000c      	movs	r4, r1
    1c42:	4293      	cmp	r3, r2
    1c44:	da00      	bge.n	1c48 <_printf_common+0x14>
    1c46:	0013      	movs	r3, r2
    1c48:	0022      	movs	r2, r4
    1c4a:	602b      	str	r3, [r5, #0]
    1c4c:	3243      	adds	r2, #67	; 0x43
    1c4e:	7812      	ldrb	r2, [r2, #0]
    1c50:	2a00      	cmp	r2, #0
    1c52:	d001      	beq.n	1c58 <_printf_common+0x24>
    1c54:	3301      	adds	r3, #1
    1c56:	602b      	str	r3, [r5, #0]
    1c58:	6823      	ldr	r3, [r4, #0]
    1c5a:	069b      	lsls	r3, r3, #26
    1c5c:	d502      	bpl.n	1c64 <_printf_common+0x30>
    1c5e:	682b      	ldr	r3, [r5, #0]
    1c60:	3302      	adds	r3, #2
    1c62:	602b      	str	r3, [r5, #0]
    1c64:	2706      	movs	r7, #6
    1c66:	6823      	ldr	r3, [r4, #0]
    1c68:	401f      	ands	r7, r3
    1c6a:	d027      	beq.n	1cbc <_printf_common+0x88>
    1c6c:	0023      	movs	r3, r4
    1c6e:	3343      	adds	r3, #67	; 0x43
    1c70:	781b      	ldrb	r3, [r3, #0]
    1c72:	1e5a      	subs	r2, r3, #1
    1c74:	4193      	sbcs	r3, r2
    1c76:	6822      	ldr	r2, [r4, #0]
    1c78:	0692      	lsls	r2, r2, #26
    1c7a:	d430      	bmi.n	1cde <_printf_common+0xaa>
    1c7c:	0022      	movs	r2, r4
    1c7e:	9901      	ldr	r1, [sp, #4]
    1c80:	3243      	adds	r2, #67	; 0x43
    1c82:	9800      	ldr	r0, [sp, #0]
    1c84:	9e08      	ldr	r6, [sp, #32]
    1c86:	47b0      	blx	r6
    1c88:	1c43      	adds	r3, r0, #1
    1c8a:	d025      	beq.n	1cd8 <_printf_common+0xa4>
    1c8c:	2306      	movs	r3, #6
    1c8e:	6820      	ldr	r0, [r4, #0]
    1c90:	682a      	ldr	r2, [r5, #0]
    1c92:	68e1      	ldr	r1, [r4, #12]
    1c94:	4003      	ands	r3, r0
    1c96:	2500      	movs	r5, #0
    1c98:	2b04      	cmp	r3, #4
    1c9a:	d103      	bne.n	1ca4 <_printf_common+0x70>
    1c9c:	1a8d      	subs	r5, r1, r2
    1c9e:	43eb      	mvns	r3, r5
    1ca0:	17db      	asrs	r3, r3, #31
    1ca2:	401d      	ands	r5, r3
    1ca4:	68a3      	ldr	r3, [r4, #8]
    1ca6:	6922      	ldr	r2, [r4, #16]
    1ca8:	4293      	cmp	r3, r2
    1caa:	dd01      	ble.n	1cb0 <_printf_common+0x7c>
    1cac:	1a9b      	subs	r3, r3, r2
    1cae:	18ed      	adds	r5, r5, r3
    1cb0:	2700      	movs	r7, #0
    1cb2:	42bd      	cmp	r5, r7
    1cb4:	d120      	bne.n	1cf8 <_printf_common+0xc4>
    1cb6:	2000      	movs	r0, #0
    1cb8:	e010      	b.n	1cdc <_printf_common+0xa8>
    1cba:	3701      	adds	r7, #1
    1cbc:	68e3      	ldr	r3, [r4, #12]
    1cbe:	682a      	ldr	r2, [r5, #0]
    1cc0:	1a9b      	subs	r3, r3, r2
    1cc2:	429f      	cmp	r7, r3
    1cc4:	dad2      	bge.n	1c6c <_printf_common+0x38>
    1cc6:	0022      	movs	r2, r4
    1cc8:	2301      	movs	r3, #1
    1cca:	3219      	adds	r2, #25
    1ccc:	9901      	ldr	r1, [sp, #4]
    1cce:	9800      	ldr	r0, [sp, #0]
    1cd0:	9e08      	ldr	r6, [sp, #32]
    1cd2:	47b0      	blx	r6
    1cd4:	1c43      	adds	r3, r0, #1
    1cd6:	d1f0      	bne.n	1cba <_printf_common+0x86>
    1cd8:	2001      	movs	r0, #1
    1cda:	4240      	negs	r0, r0
    1cdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1cde:	2030      	movs	r0, #48	; 0x30
    1ce0:	18e1      	adds	r1, r4, r3
    1ce2:	3143      	adds	r1, #67	; 0x43
    1ce4:	7008      	strb	r0, [r1, #0]
    1ce6:	0021      	movs	r1, r4
    1ce8:	1c5a      	adds	r2, r3, #1
    1cea:	3145      	adds	r1, #69	; 0x45
    1cec:	7809      	ldrb	r1, [r1, #0]
    1cee:	18a2      	adds	r2, r4, r2
    1cf0:	3243      	adds	r2, #67	; 0x43
    1cf2:	3302      	adds	r3, #2
    1cf4:	7011      	strb	r1, [r2, #0]
    1cf6:	e7c1      	b.n	1c7c <_printf_common+0x48>
    1cf8:	0022      	movs	r2, r4
    1cfa:	2301      	movs	r3, #1
    1cfc:	321a      	adds	r2, #26
    1cfe:	9901      	ldr	r1, [sp, #4]
    1d00:	9800      	ldr	r0, [sp, #0]
    1d02:	9e08      	ldr	r6, [sp, #32]
    1d04:	47b0      	blx	r6
    1d06:	1c43      	adds	r3, r0, #1
    1d08:	d0e6      	beq.n	1cd8 <_printf_common+0xa4>
    1d0a:	3701      	adds	r7, #1
    1d0c:	e7d1      	b.n	1cb2 <_printf_common+0x7e>
	...

00001d10 <_printf_i>:
    1d10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d12:	b08b      	sub	sp, #44	; 0x2c
    1d14:	9206      	str	r2, [sp, #24]
    1d16:	000a      	movs	r2, r1
    1d18:	3243      	adds	r2, #67	; 0x43
    1d1a:	9307      	str	r3, [sp, #28]
    1d1c:	9005      	str	r0, [sp, #20]
    1d1e:	9204      	str	r2, [sp, #16]
    1d20:	7e0a      	ldrb	r2, [r1, #24]
    1d22:	000c      	movs	r4, r1
    1d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1d26:	2a6e      	cmp	r2, #110	; 0x6e
    1d28:	d100      	bne.n	1d2c <_printf_i+0x1c>
    1d2a:	e08f      	b.n	1e4c <_printf_i+0x13c>
    1d2c:	d817      	bhi.n	1d5e <_printf_i+0x4e>
    1d2e:	2a63      	cmp	r2, #99	; 0x63
    1d30:	d02c      	beq.n	1d8c <_printf_i+0x7c>
    1d32:	d808      	bhi.n	1d46 <_printf_i+0x36>
    1d34:	2a00      	cmp	r2, #0
    1d36:	d100      	bne.n	1d3a <_printf_i+0x2a>
    1d38:	e099      	b.n	1e6e <_printf_i+0x15e>
    1d3a:	2a58      	cmp	r2, #88	; 0x58
    1d3c:	d054      	beq.n	1de8 <_printf_i+0xd8>
    1d3e:	0026      	movs	r6, r4
    1d40:	3642      	adds	r6, #66	; 0x42
    1d42:	7032      	strb	r2, [r6, #0]
    1d44:	e029      	b.n	1d9a <_printf_i+0x8a>
    1d46:	2a64      	cmp	r2, #100	; 0x64
    1d48:	d001      	beq.n	1d4e <_printf_i+0x3e>
    1d4a:	2a69      	cmp	r2, #105	; 0x69
    1d4c:	d1f7      	bne.n	1d3e <_printf_i+0x2e>
    1d4e:	6821      	ldr	r1, [r4, #0]
    1d50:	681a      	ldr	r2, [r3, #0]
    1d52:	0608      	lsls	r0, r1, #24
    1d54:	d523      	bpl.n	1d9e <_printf_i+0x8e>
    1d56:	1d11      	adds	r1, r2, #4
    1d58:	6019      	str	r1, [r3, #0]
    1d5a:	6815      	ldr	r5, [r2, #0]
    1d5c:	e025      	b.n	1daa <_printf_i+0x9a>
    1d5e:	2a73      	cmp	r2, #115	; 0x73
    1d60:	d100      	bne.n	1d64 <_printf_i+0x54>
    1d62:	e088      	b.n	1e76 <_printf_i+0x166>
    1d64:	d808      	bhi.n	1d78 <_printf_i+0x68>
    1d66:	2a6f      	cmp	r2, #111	; 0x6f
    1d68:	d029      	beq.n	1dbe <_printf_i+0xae>
    1d6a:	2a70      	cmp	r2, #112	; 0x70
    1d6c:	d1e7      	bne.n	1d3e <_printf_i+0x2e>
    1d6e:	2220      	movs	r2, #32
    1d70:	6809      	ldr	r1, [r1, #0]
    1d72:	430a      	orrs	r2, r1
    1d74:	6022      	str	r2, [r4, #0]
    1d76:	e003      	b.n	1d80 <_printf_i+0x70>
    1d78:	2a75      	cmp	r2, #117	; 0x75
    1d7a:	d020      	beq.n	1dbe <_printf_i+0xae>
    1d7c:	2a78      	cmp	r2, #120	; 0x78
    1d7e:	d1de      	bne.n	1d3e <_printf_i+0x2e>
    1d80:	0022      	movs	r2, r4
    1d82:	2178      	movs	r1, #120	; 0x78
    1d84:	3245      	adds	r2, #69	; 0x45
    1d86:	7011      	strb	r1, [r2, #0]
    1d88:	4a6c      	ldr	r2, [pc, #432]	; (1f3c <_printf_i+0x22c>)
    1d8a:	e030      	b.n	1dee <_printf_i+0xde>
    1d8c:	000e      	movs	r6, r1
    1d8e:	681a      	ldr	r2, [r3, #0]
    1d90:	3642      	adds	r6, #66	; 0x42
    1d92:	1d11      	adds	r1, r2, #4
    1d94:	6019      	str	r1, [r3, #0]
    1d96:	6813      	ldr	r3, [r2, #0]
    1d98:	7033      	strb	r3, [r6, #0]
    1d9a:	2301      	movs	r3, #1
    1d9c:	e079      	b.n	1e92 <_printf_i+0x182>
    1d9e:	0649      	lsls	r1, r1, #25
    1da0:	d5d9      	bpl.n	1d56 <_printf_i+0x46>
    1da2:	1d11      	adds	r1, r2, #4
    1da4:	6019      	str	r1, [r3, #0]
    1da6:	2300      	movs	r3, #0
    1da8:	5ed5      	ldrsh	r5, [r2, r3]
    1daa:	2d00      	cmp	r5, #0
    1dac:	da03      	bge.n	1db6 <_printf_i+0xa6>
    1dae:	232d      	movs	r3, #45	; 0x2d
    1db0:	9a04      	ldr	r2, [sp, #16]
    1db2:	426d      	negs	r5, r5
    1db4:	7013      	strb	r3, [r2, #0]
    1db6:	4b62      	ldr	r3, [pc, #392]	; (1f40 <_printf_i+0x230>)
    1db8:	270a      	movs	r7, #10
    1dba:	9303      	str	r3, [sp, #12]
    1dbc:	e02f      	b.n	1e1e <_printf_i+0x10e>
    1dbe:	6820      	ldr	r0, [r4, #0]
    1dc0:	6819      	ldr	r1, [r3, #0]
    1dc2:	0605      	lsls	r5, r0, #24
    1dc4:	d503      	bpl.n	1dce <_printf_i+0xbe>
    1dc6:	1d08      	adds	r0, r1, #4
    1dc8:	6018      	str	r0, [r3, #0]
    1dca:	680d      	ldr	r5, [r1, #0]
    1dcc:	e005      	b.n	1dda <_printf_i+0xca>
    1dce:	0640      	lsls	r0, r0, #25
    1dd0:	d5f9      	bpl.n	1dc6 <_printf_i+0xb6>
    1dd2:	680d      	ldr	r5, [r1, #0]
    1dd4:	1d08      	adds	r0, r1, #4
    1dd6:	6018      	str	r0, [r3, #0]
    1dd8:	b2ad      	uxth	r5, r5
    1dda:	4b59      	ldr	r3, [pc, #356]	; (1f40 <_printf_i+0x230>)
    1ddc:	2708      	movs	r7, #8
    1dde:	9303      	str	r3, [sp, #12]
    1de0:	2a6f      	cmp	r2, #111	; 0x6f
    1de2:	d018      	beq.n	1e16 <_printf_i+0x106>
    1de4:	270a      	movs	r7, #10
    1de6:	e016      	b.n	1e16 <_printf_i+0x106>
    1de8:	3145      	adds	r1, #69	; 0x45
    1dea:	700a      	strb	r2, [r1, #0]
    1dec:	4a54      	ldr	r2, [pc, #336]	; (1f40 <_printf_i+0x230>)
    1dee:	9203      	str	r2, [sp, #12]
    1df0:	681a      	ldr	r2, [r3, #0]
    1df2:	6821      	ldr	r1, [r4, #0]
    1df4:	1d10      	adds	r0, r2, #4
    1df6:	6018      	str	r0, [r3, #0]
    1df8:	6815      	ldr	r5, [r2, #0]
    1dfa:	0608      	lsls	r0, r1, #24
    1dfc:	d522      	bpl.n	1e44 <_printf_i+0x134>
    1dfe:	07cb      	lsls	r3, r1, #31
    1e00:	d502      	bpl.n	1e08 <_printf_i+0xf8>
    1e02:	2320      	movs	r3, #32
    1e04:	4319      	orrs	r1, r3
    1e06:	6021      	str	r1, [r4, #0]
    1e08:	2710      	movs	r7, #16
    1e0a:	2d00      	cmp	r5, #0
    1e0c:	d103      	bne.n	1e16 <_printf_i+0x106>
    1e0e:	2320      	movs	r3, #32
    1e10:	6822      	ldr	r2, [r4, #0]
    1e12:	439a      	bics	r2, r3
    1e14:	6022      	str	r2, [r4, #0]
    1e16:	0023      	movs	r3, r4
    1e18:	2200      	movs	r2, #0
    1e1a:	3343      	adds	r3, #67	; 0x43
    1e1c:	701a      	strb	r2, [r3, #0]
    1e1e:	6863      	ldr	r3, [r4, #4]
    1e20:	60a3      	str	r3, [r4, #8]
    1e22:	2b00      	cmp	r3, #0
    1e24:	db5c      	blt.n	1ee0 <_printf_i+0x1d0>
    1e26:	2204      	movs	r2, #4
    1e28:	6821      	ldr	r1, [r4, #0]
    1e2a:	4391      	bics	r1, r2
    1e2c:	6021      	str	r1, [r4, #0]
    1e2e:	2d00      	cmp	r5, #0
    1e30:	d158      	bne.n	1ee4 <_printf_i+0x1d4>
    1e32:	9e04      	ldr	r6, [sp, #16]
    1e34:	2b00      	cmp	r3, #0
    1e36:	d064      	beq.n	1f02 <_printf_i+0x1f2>
    1e38:	0026      	movs	r6, r4
    1e3a:	9b03      	ldr	r3, [sp, #12]
    1e3c:	3642      	adds	r6, #66	; 0x42
    1e3e:	781b      	ldrb	r3, [r3, #0]
    1e40:	7033      	strb	r3, [r6, #0]
    1e42:	e05e      	b.n	1f02 <_printf_i+0x1f2>
    1e44:	0648      	lsls	r0, r1, #25
    1e46:	d5da      	bpl.n	1dfe <_printf_i+0xee>
    1e48:	b2ad      	uxth	r5, r5
    1e4a:	e7d8      	b.n	1dfe <_printf_i+0xee>
    1e4c:	6809      	ldr	r1, [r1, #0]
    1e4e:	681a      	ldr	r2, [r3, #0]
    1e50:	0608      	lsls	r0, r1, #24
    1e52:	d505      	bpl.n	1e60 <_printf_i+0x150>
    1e54:	1d11      	adds	r1, r2, #4
    1e56:	6019      	str	r1, [r3, #0]
    1e58:	6813      	ldr	r3, [r2, #0]
    1e5a:	6962      	ldr	r2, [r4, #20]
    1e5c:	601a      	str	r2, [r3, #0]
    1e5e:	e006      	b.n	1e6e <_printf_i+0x15e>
    1e60:	0649      	lsls	r1, r1, #25
    1e62:	d5f7      	bpl.n	1e54 <_printf_i+0x144>
    1e64:	1d11      	adds	r1, r2, #4
    1e66:	6019      	str	r1, [r3, #0]
    1e68:	6813      	ldr	r3, [r2, #0]
    1e6a:	8aa2      	ldrh	r2, [r4, #20]
    1e6c:	801a      	strh	r2, [r3, #0]
    1e6e:	2300      	movs	r3, #0
    1e70:	9e04      	ldr	r6, [sp, #16]
    1e72:	6123      	str	r3, [r4, #16]
    1e74:	e054      	b.n	1f20 <_printf_i+0x210>
    1e76:	681a      	ldr	r2, [r3, #0]
    1e78:	1d11      	adds	r1, r2, #4
    1e7a:	6019      	str	r1, [r3, #0]
    1e7c:	6816      	ldr	r6, [r2, #0]
    1e7e:	2100      	movs	r1, #0
    1e80:	6862      	ldr	r2, [r4, #4]
    1e82:	0030      	movs	r0, r6
    1e84:	f000 f870 	bl	1f68 <memchr>
    1e88:	2800      	cmp	r0, #0
    1e8a:	d001      	beq.n	1e90 <_printf_i+0x180>
    1e8c:	1b80      	subs	r0, r0, r6
    1e8e:	6060      	str	r0, [r4, #4]
    1e90:	6863      	ldr	r3, [r4, #4]
    1e92:	6123      	str	r3, [r4, #16]
    1e94:	2300      	movs	r3, #0
    1e96:	9a04      	ldr	r2, [sp, #16]
    1e98:	7013      	strb	r3, [r2, #0]
    1e9a:	e041      	b.n	1f20 <_printf_i+0x210>
    1e9c:	6923      	ldr	r3, [r4, #16]
    1e9e:	0032      	movs	r2, r6
    1ea0:	9906      	ldr	r1, [sp, #24]
    1ea2:	9805      	ldr	r0, [sp, #20]
    1ea4:	9d07      	ldr	r5, [sp, #28]
    1ea6:	47a8      	blx	r5
    1ea8:	1c43      	adds	r3, r0, #1
    1eaa:	d043      	beq.n	1f34 <_printf_i+0x224>
    1eac:	6823      	ldr	r3, [r4, #0]
    1eae:	2500      	movs	r5, #0
    1eb0:	079b      	lsls	r3, r3, #30
    1eb2:	d40f      	bmi.n	1ed4 <_printf_i+0x1c4>
    1eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1eb6:	68e0      	ldr	r0, [r4, #12]
    1eb8:	4298      	cmp	r0, r3
    1eba:	da3d      	bge.n	1f38 <_printf_i+0x228>
    1ebc:	0018      	movs	r0, r3
    1ebe:	e03b      	b.n	1f38 <_printf_i+0x228>
    1ec0:	0022      	movs	r2, r4
    1ec2:	2301      	movs	r3, #1
    1ec4:	3219      	adds	r2, #25
    1ec6:	9906      	ldr	r1, [sp, #24]
    1ec8:	9805      	ldr	r0, [sp, #20]
    1eca:	9e07      	ldr	r6, [sp, #28]
    1ecc:	47b0      	blx	r6
    1ece:	1c43      	adds	r3, r0, #1
    1ed0:	d030      	beq.n	1f34 <_printf_i+0x224>
    1ed2:	3501      	adds	r5, #1
    1ed4:	68e3      	ldr	r3, [r4, #12]
    1ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1ed8:	1a9b      	subs	r3, r3, r2
    1eda:	429d      	cmp	r5, r3
    1edc:	dbf0      	blt.n	1ec0 <_printf_i+0x1b0>
    1ede:	e7e9      	b.n	1eb4 <_printf_i+0x1a4>
    1ee0:	2d00      	cmp	r5, #0
    1ee2:	d0a9      	beq.n	1e38 <_printf_i+0x128>
    1ee4:	9e04      	ldr	r6, [sp, #16]
    1ee6:	0028      	movs	r0, r5
    1ee8:	0039      	movs	r1, r7
    1eea:	f7ff fb61 	bl	15b0 <__aeabi_uidivmod>
    1eee:	9b03      	ldr	r3, [sp, #12]
    1ef0:	3e01      	subs	r6, #1
    1ef2:	5c5b      	ldrb	r3, [r3, r1]
    1ef4:	0028      	movs	r0, r5
    1ef6:	7033      	strb	r3, [r6, #0]
    1ef8:	0039      	movs	r1, r7
    1efa:	f7ff fad3 	bl	14a4 <__udivsi3>
    1efe:	1e05      	subs	r5, r0, #0
    1f00:	d1f1      	bne.n	1ee6 <_printf_i+0x1d6>
    1f02:	2f08      	cmp	r7, #8
    1f04:	d109      	bne.n	1f1a <_printf_i+0x20a>
    1f06:	6823      	ldr	r3, [r4, #0]
    1f08:	07db      	lsls	r3, r3, #31
    1f0a:	d506      	bpl.n	1f1a <_printf_i+0x20a>
    1f0c:	6863      	ldr	r3, [r4, #4]
    1f0e:	6922      	ldr	r2, [r4, #16]
    1f10:	4293      	cmp	r3, r2
    1f12:	dc02      	bgt.n	1f1a <_printf_i+0x20a>
    1f14:	2330      	movs	r3, #48	; 0x30
    1f16:	3e01      	subs	r6, #1
    1f18:	7033      	strb	r3, [r6, #0]
    1f1a:	9b04      	ldr	r3, [sp, #16]
    1f1c:	1b9b      	subs	r3, r3, r6
    1f1e:	6123      	str	r3, [r4, #16]
    1f20:	9b07      	ldr	r3, [sp, #28]
    1f22:	aa09      	add	r2, sp, #36	; 0x24
    1f24:	9300      	str	r3, [sp, #0]
    1f26:	0021      	movs	r1, r4
    1f28:	9b06      	ldr	r3, [sp, #24]
    1f2a:	9805      	ldr	r0, [sp, #20]
    1f2c:	f7ff fe82 	bl	1c34 <_printf_common>
    1f30:	1c43      	adds	r3, r0, #1
    1f32:	d1b3      	bne.n	1e9c <_printf_i+0x18c>
    1f34:	2001      	movs	r0, #1
    1f36:	4240      	negs	r0, r0
    1f38:	b00b      	add	sp, #44	; 0x2c
    1f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f3c:	000023c6 	.word	0x000023c6
    1f40:	000023b5 	.word	0x000023b5

00001f44 <_sbrk_r>:
    1f44:	2300      	movs	r3, #0
    1f46:	b570      	push	{r4, r5, r6, lr}
    1f48:	4c06      	ldr	r4, [pc, #24]	; (1f64 <_sbrk_r+0x20>)
    1f4a:	0005      	movs	r5, r0
    1f4c:	0008      	movs	r0, r1
    1f4e:	6023      	str	r3, [r4, #0]
    1f50:	f7fe fe16 	bl	b80 <_sbrk>
    1f54:	1c43      	adds	r3, r0, #1
    1f56:	d103      	bne.n	1f60 <_sbrk_r+0x1c>
    1f58:	6823      	ldr	r3, [r4, #0]
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d000      	beq.n	1f60 <_sbrk_r+0x1c>
    1f5e:	602b      	str	r3, [r5, #0]
    1f60:	bd70      	pop	{r4, r5, r6, pc}
    1f62:	46c0      	nop			; (mov r8, r8)
    1f64:	20000180 	.word	0x20000180

00001f68 <memchr>:
    1f68:	b2c9      	uxtb	r1, r1
    1f6a:	1882      	adds	r2, r0, r2
    1f6c:	4290      	cmp	r0, r2
    1f6e:	d101      	bne.n	1f74 <memchr+0xc>
    1f70:	2000      	movs	r0, #0
    1f72:	4770      	bx	lr
    1f74:	7803      	ldrb	r3, [r0, #0]
    1f76:	428b      	cmp	r3, r1
    1f78:	d0fb      	beq.n	1f72 <memchr+0xa>
    1f7a:	3001      	adds	r0, #1
    1f7c:	e7f6      	b.n	1f6c <memchr+0x4>

00001f7e <memcpy>:
    1f7e:	2300      	movs	r3, #0
    1f80:	b510      	push	{r4, lr}
    1f82:	429a      	cmp	r2, r3
    1f84:	d100      	bne.n	1f88 <memcpy+0xa>
    1f86:	bd10      	pop	{r4, pc}
    1f88:	5ccc      	ldrb	r4, [r1, r3]
    1f8a:	54c4      	strb	r4, [r0, r3]
    1f8c:	3301      	adds	r3, #1
    1f8e:	e7f8      	b.n	1f82 <memcpy+0x4>

00001f90 <memmove>:
    1f90:	b510      	push	{r4, lr}
    1f92:	4288      	cmp	r0, r1
    1f94:	d902      	bls.n	1f9c <memmove+0xc>
    1f96:	188b      	adds	r3, r1, r2
    1f98:	4298      	cmp	r0, r3
    1f9a:	d308      	bcc.n	1fae <memmove+0x1e>
    1f9c:	2300      	movs	r3, #0
    1f9e:	429a      	cmp	r2, r3
    1fa0:	d007      	beq.n	1fb2 <memmove+0x22>
    1fa2:	5ccc      	ldrb	r4, [r1, r3]
    1fa4:	54c4      	strb	r4, [r0, r3]
    1fa6:	3301      	adds	r3, #1
    1fa8:	e7f9      	b.n	1f9e <memmove+0xe>
    1faa:	5c8b      	ldrb	r3, [r1, r2]
    1fac:	5483      	strb	r3, [r0, r2]
    1fae:	3a01      	subs	r2, #1
    1fb0:	d2fb      	bcs.n	1faa <memmove+0x1a>
    1fb2:	bd10      	pop	{r4, pc}

00001fb4 <__malloc_lock>:
    1fb4:	4770      	bx	lr

00001fb6 <__malloc_unlock>:
    1fb6:	4770      	bx	lr

00001fb8 <_free_r>:
    1fb8:	b570      	push	{r4, r5, r6, lr}
    1fba:	0005      	movs	r5, r0
    1fbc:	2900      	cmp	r1, #0
    1fbe:	d010      	beq.n	1fe2 <_free_r+0x2a>
    1fc0:	1f0c      	subs	r4, r1, #4
    1fc2:	6823      	ldr	r3, [r4, #0]
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	da00      	bge.n	1fca <_free_r+0x12>
    1fc8:	18e4      	adds	r4, r4, r3
    1fca:	0028      	movs	r0, r5
    1fcc:	f7ff fff2 	bl	1fb4 <__malloc_lock>
    1fd0:	4a1d      	ldr	r2, [pc, #116]	; (2048 <STACK_SIZE+0x48>)
    1fd2:	6813      	ldr	r3, [r2, #0]
    1fd4:	2b00      	cmp	r3, #0
    1fd6:	d105      	bne.n	1fe4 <_free_r+0x2c>
    1fd8:	6063      	str	r3, [r4, #4]
    1fda:	6014      	str	r4, [r2, #0]
    1fdc:	0028      	movs	r0, r5
    1fde:	f7ff ffea 	bl	1fb6 <__malloc_unlock>
    1fe2:	bd70      	pop	{r4, r5, r6, pc}
    1fe4:	42a3      	cmp	r3, r4
    1fe6:	d909      	bls.n	1ffc <_free_r+0x44>
    1fe8:	6821      	ldr	r1, [r4, #0]
    1fea:	1860      	adds	r0, r4, r1
    1fec:	4283      	cmp	r3, r0
    1fee:	d1f3      	bne.n	1fd8 <_free_r+0x20>
    1ff0:	6818      	ldr	r0, [r3, #0]
    1ff2:	685b      	ldr	r3, [r3, #4]
    1ff4:	1841      	adds	r1, r0, r1
    1ff6:	6021      	str	r1, [r4, #0]
    1ff8:	e7ee      	b.n	1fd8 <_free_r+0x20>
    1ffa:	0013      	movs	r3, r2
    1ffc:	685a      	ldr	r2, [r3, #4]
    1ffe:	2a00      	cmp	r2, #0
    2000:	d001      	beq.n	2006 <STACK_SIZE+0x6>
    2002:	42a2      	cmp	r2, r4
    2004:	d9f9      	bls.n	1ffa <_free_r+0x42>
    2006:	6819      	ldr	r1, [r3, #0]
    2008:	1858      	adds	r0, r3, r1
    200a:	42a0      	cmp	r0, r4
    200c:	d10b      	bne.n	2026 <STACK_SIZE+0x26>
    200e:	6820      	ldr	r0, [r4, #0]
    2010:	1809      	adds	r1, r1, r0
    2012:	1858      	adds	r0, r3, r1
    2014:	6019      	str	r1, [r3, #0]
    2016:	4282      	cmp	r2, r0
    2018:	d1e0      	bne.n	1fdc <_free_r+0x24>
    201a:	6810      	ldr	r0, [r2, #0]
    201c:	6852      	ldr	r2, [r2, #4]
    201e:	1841      	adds	r1, r0, r1
    2020:	6019      	str	r1, [r3, #0]
    2022:	605a      	str	r2, [r3, #4]
    2024:	e7da      	b.n	1fdc <_free_r+0x24>
    2026:	42a0      	cmp	r0, r4
    2028:	d902      	bls.n	2030 <STACK_SIZE+0x30>
    202a:	230c      	movs	r3, #12
    202c:	602b      	str	r3, [r5, #0]
    202e:	e7d5      	b.n	1fdc <_free_r+0x24>
    2030:	6821      	ldr	r1, [r4, #0]
    2032:	1860      	adds	r0, r4, r1
    2034:	4282      	cmp	r2, r0
    2036:	d103      	bne.n	2040 <STACK_SIZE+0x40>
    2038:	6810      	ldr	r0, [r2, #0]
    203a:	6852      	ldr	r2, [r2, #4]
    203c:	1841      	adds	r1, r0, r1
    203e:	6021      	str	r1, [r4, #0]
    2040:	6062      	str	r2, [r4, #4]
    2042:	605c      	str	r4, [r3, #4]
    2044:	e7ca      	b.n	1fdc <_free_r+0x24>
    2046:	46c0      	nop			; (mov r8, r8)
    2048:	2000010c 	.word	0x2000010c

0000204c <_realloc_r>:
    204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    204e:	0007      	movs	r7, r0
    2050:	000d      	movs	r5, r1
    2052:	0016      	movs	r6, r2
    2054:	2900      	cmp	r1, #0
    2056:	d105      	bne.n	2064 <_realloc_r+0x18>
    2058:	0011      	movs	r1, r2
    205a:	f7ff fc27 	bl	18ac <_malloc_r>
    205e:	0004      	movs	r4, r0
    2060:	0020      	movs	r0, r4
    2062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2064:	2a00      	cmp	r2, #0
    2066:	d103      	bne.n	2070 <_realloc_r+0x24>
    2068:	f7ff ffa6 	bl	1fb8 <_free_r>
    206c:	0034      	movs	r4, r6
    206e:	e7f7      	b.n	2060 <_realloc_r+0x14>
    2070:	f000 f812 	bl	2098 <_malloc_usable_size_r>
    2074:	002c      	movs	r4, r5
    2076:	4286      	cmp	r6, r0
    2078:	d9f2      	bls.n	2060 <_realloc_r+0x14>
    207a:	0031      	movs	r1, r6
    207c:	0038      	movs	r0, r7
    207e:	f7ff fc15 	bl	18ac <_malloc_r>
    2082:	1e04      	subs	r4, r0, #0
    2084:	d0ec      	beq.n	2060 <_realloc_r+0x14>
    2086:	0029      	movs	r1, r5
    2088:	0032      	movs	r2, r6
    208a:	f7ff ff78 	bl	1f7e <memcpy>
    208e:	0029      	movs	r1, r5
    2090:	0038      	movs	r0, r7
    2092:	f7ff ff91 	bl	1fb8 <_free_r>
    2096:	e7e3      	b.n	2060 <_realloc_r+0x14>

00002098 <_malloc_usable_size_r>:
    2098:	1f0b      	subs	r3, r1, #4
    209a:	681b      	ldr	r3, [r3, #0]
    209c:	1f18      	subs	r0, r3, #4
    209e:	2b00      	cmp	r3, #0
    20a0:	da01      	bge.n	20a6 <_malloc_usable_size_r+0xe>
    20a2:	580b      	ldr	r3, [r1, r0]
    20a4:	18c0      	adds	r0, r0, r3
    20a6:	4770      	bx	lr
    20a8:	682f2e2e 	.word	0x682f2e2e
    20ac:	732f6c61 	.word	0x732f6c61
    20b0:	682f6372 	.word	0x682f6372
    20b4:	635f6c61 	.word	0x635f6c61
    20b8:	6e656c61 	.word	0x6e656c61
    20bc:	2e726164 	.word	0x2e726164
    20c0:	00000063 	.word	0x00000063
    20c4:	682f2e2e 	.word	0x682f2e2e
    20c8:	732f6c61 	.word	0x732f6c61
    20cc:	682f6372 	.word	0x682f6372
    20d0:	755f6c61 	.word	0x755f6c61
    20d4:	74726173 	.word	0x74726173
    20d8:	7973615f 	.word	0x7973615f
    20dc:	632e636e 	.word	0x632e636e
    20e0:	00000000 	.word	0x00000000
    20e4:	682f2e2e 	.word	0x682f2e2e
    20e8:	752f6c61 	.word	0x752f6c61
    20ec:	736c6974 	.word	0x736c6974
    20f0:	6372732f 	.word	0x6372732f
    20f4:	6974752f 	.word	0x6974752f
    20f8:	725f736c 	.word	0x725f736c
    20fc:	62676e69 	.word	0x62676e69
    2100:	65666675 	.word	0x65666675
    2104:	00632e72 	.word	0x00632e72

00002108 <_map>:
    2108:	0000000f 0000000f 682f2e2e 652f6c70     ........../hpl/e
    2118:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    2128:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    2138:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
    2148:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    2158:	0000632e 656d6974 25203d20 736d2064     .c..time = %d ms
    2168:	00000000 3d3d0a0d 3d3d3d3d 3d3d3d3d     ......==========
    2178:	3d3d3d3d 0a0d3d3d 72617473 676e6974     ======..starting
    2188:	5f756d20 745f6d76 0d747365 0000000a      mu_vm_test.....
    2198:	656d6974 66656220 2065726f 00207369     time before is .
    21a8:	00000a0d 706f6f6c 20676e69 20726f66     ....looping for 
    21b8:	20352e32 6f636573 2e73646e 00002e2e     2.5 seconds.....
    21c8:	656e6f64 7420202e 20656d69 65746661     done.  time afte
    21d8:	73692072 00000020 74696177 20676e69     r is ...waiting 
    21e8:	20352e32 6f636573 2073646e 20726f66     2.5 seconds for 
    21f8:	20435452 6374616d 2e2e2e68 00000000     RTC match.......
    2208:	656e6f64 7420202e 20656d69 6e207369     done.  time is n
    2218:	0020776f 73616c66 676e6968 44454c20     ow .flashing LED
    2228:	726f6620 352e3220 63657320 73646e6f      for 2.5 seconds
    2238:	002e2e2e 74696177 20676e69 20726f66     ....waiting for 
    2248:	74747562 70206e6f 73736572 79732820     button press (sy
    2258:	7268636e 756f6e6f 2e2e2973 0000002e     nchronous)......
    2268:	65636572 64657669 74756220 206e6f74     received button 
    2278:	73657270 0a0d2e73 00000000 74696177     press.......wait
    2288:	20676e69 20726f66 74747562 70206e6f     ing for button p
    2298:	73736572 73612820 68636e79 6f6e6f72     ress (asynchrono
    22a8:	2e297375 00002e2e 74696177 20676e69     us).....waiting 
    22b8:	20726f66 6279656b 6472616f 706e6920     for keyboard inp
    22c8:	2e2e7475 0000002e 65636572 64657669     ut......received
    22d8:	63252720 000a0d27 65656c73 676e6970      '%c'...sleeping
    22e8:	726f6620 352e3220 63657320 73646e6f      for 2.5 seconds
    22f8:	002e2e2e 65656c73 676e6970 746e7520     ....sleeping unt
    2308:	62206c69 6f747475 7270206e 2e737365     il button press.
    2318:	00002e2e 20646e65 6d20666f 6d765f75     ....end of mu_vm
    2328:	7365745f 3d0a0d74 3d3d3d3d 3d3d3d3d     _test..=========
    2338:	3d3d3d3d 0d3d3d3d 0000000a              =======.....

00002344 <__sf_fake_stderr>:
	...

00002364 <__sf_fake_stdin>:
	...

00002384 <__sf_fake_stdout>:
	...
    23a4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    23b4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    23c4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    23d4:	00006665                                ef..

000023d8 <_init>:
    23d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23da:	46c0      	nop			; (mov r8, r8)
    23dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    23de:	bc08      	pop	{r3}
    23e0:	469e      	mov	lr, r3
    23e2:	4770      	bx	lr

000023e4 <__init_array_start>:
    23e4:	000000dd 	.word	0x000000dd

000023e8 <_fini>:
    23e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23ea:	46c0      	nop			; (mov r8, r8)
    23ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    23ee:	bc08      	pop	{r3}
    23f0:	469e      	mov	lr, r3
    23f2:	4770      	bx	lr

000023f4 <__fini_array_start>:
    23f4:	000000b5 	.word	0x000000b5
