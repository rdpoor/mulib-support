
mulib_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ad0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00002ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001d8  20000064  00002b34  00020064  2**2
                  ALLOC
  3 .stack        00002004  2000023c  00002d0c  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002ec7f  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f15  00000000  00000000  0004ed64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e3af  00000000  00000000  00052c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d30  00000000  00000000  00061028  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001328  00000000  00000000  00061d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001996c  00000000  00000000  00063080  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011400  00000000  00000000  0007c9ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008b598  00000000  00000000  0008ddec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002874  00000000  00000000  00119384  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 22 00 20 55 06 00 00 51 06 00 00 51 06 00 00     @". U...Q...Q...
	...
      2c:	51 06 00 00 00 00 00 00 00 00 00 00 51 06 00 00     Q...........Q...
      3c:	51 06 00 00 51 06 00 00 51 06 00 00 51 06 00 00     Q...Q...Q...Q...
      4c:	11 11 00 00 b1 0e 00 00 51 06 00 00 51 06 00 00     ........Q...Q...
      5c:	51 06 00 00 51 06 00 00 51 06 00 00 51 06 00 00     Q...Q...Q...Q...
      6c:	51 06 00 00 ed 12 00 00 51 06 00 00 51 06 00 00     Q.......Q...Q...
      7c:	51 06 00 00 51 06 00 00 51 06 00 00 51 06 00 00     Q...Q...Q...Q...
      8c:	51 06 00 00 51 06 00 00 51 06 00 00 51 06 00 00     Q...Q...Q...Q...
      9c:	51 06 00 00 51 06 00 00 51 06 00 00 51 06 00 00     Q...Q...Q...Q...
      ac:	51 06 00 00 00 00 00 00                             Q.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	00002ad0 	.word	0x00002ad0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	00002ad0 	.word	0x00002ad0
     10c:	00002ad0 	.word	0x00002ad0
     110:	00000000 	.word	0x00000000

00000114 <default_idle_fn>:
}

static void *default_idle_fn(void *self, void *arg) {
  // the default idle task doesn't do much...
  return self;
}
     114:	4770      	bx	lr
	...

00000118 <sched_task_at>:
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
  }
  sched->event_queue_count -= 1;
}

static mu_sched_err_t sched_task_at(mu_sched_t *sched, mu_task_t *task, mu_time_t time) {
     118:	b5f0      	push	{r4, r5, r6, r7, lr}
     11a:	b083      	sub	sp, #12
     11c:	0004      	movs	r4, r0
     11e:	9101      	str	r1, [sp, #4]
     120:	9200      	str	r2, [sp, #0]
  mu_sched_event_t *event;
  size_t index;

  if (sched->event_queue_count >= sched->event_queue_capacity) {
     122:	6885      	ldr	r5, [r0, #8]
    return MU_SCHED_ERR_FULL;
     124:	2002      	movs	r0, #2
  if (sched->event_queue_count >= sched->event_queue_capacity) {
     126:	6863      	ldr	r3, [r4, #4]
     128:	429d      	cmp	r5, r3
     12a:	d301      	bcc.n	130 <sched_task_at+0x18>
  // fill in the event
  event = &sched->event_queue[index];
  event_init(event, task, time);
  sched->event_queue_count += 1;
  return MU_SCHED_ERR_NONE;
}
     12c:	b003      	add	sp, #12
     12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (sched->event_queue_count == 0) {
     130:	2d00      	cmp	r5, #0
     132:	d10c      	bne.n	14e <sched_task_at+0x36>
  event = &sched->event_queue[index];
     134:	00ed      	lsls	r5, r5, #3
     136:	6823      	ldr	r3, [r4, #0]
     138:	469c      	mov	ip, r3
     13a:	4465      	add	r5, ip
  event->task = task;
     13c:	9b01      	ldr	r3, [sp, #4]
     13e:	606b      	str	r3, [r5, #4]
  event->time = time;
     140:	9b00      	ldr	r3, [sp, #0]
     142:	602b      	str	r3, [r5, #0]
  sched->event_queue_count += 1;
     144:	68a3      	ldr	r3, [r4, #8]
     146:	3301      	adds	r3, #1
     148:	60a3      	str	r3, [r4, #8]
  return MU_SCHED_ERR_NONE;
     14a:	2000      	movs	r0, #0
     14c:	e7ee      	b.n	12c <sched_task_at+0x14>
#else
// linear search for insertion point
static size_t find_insertion_index(mu_sched_t *sched, mu_time_t time) {
  mu_sched_event_t *events = sched->event_queue;

  for (size_t i = sched->event_queue_count - 1; i >= 0; i--) {
     14e:	1e6f      	subs	r7, r5, #1
     150:	4b12      	ldr	r3, [pc, #72]	; (19c <sched_task_at+0x84>)
     152:	469c      	mov	ip, r3
     154:	4465      	add	r5, ip
     156:	00ed      	lsls	r5, r5, #3
     158:	6823      	ldr	r3, [r4, #0]
     15a:	469c      	mov	ip, r3
     15c:	4465      	add	r5, ip
    if (mu_time_precedes(time, events[i].time)) {
     15e:	4e10      	ldr	r6, [pc, #64]	; (1a0 <sched_task_at+0x88>)
     160:	6829      	ldr	r1, [r5, #0]
     162:	9800      	ldr	r0, [sp, #0]
     164:	47b0      	blx	r6
     166:	2800      	cmp	r0, #0
     168:	d104      	bne.n	174 <sched_task_at+0x5c>
     16a:	3d08      	subs	r5, #8
      return i+1;    // precedes incumbent
    } else if (i == 0) {
     16c:	2f00      	cmp	r7, #0
     16e:	d012      	beq.n	196 <sched_task_at+0x7e>
  for (size_t i = sched->event_queue_count - 1; i >= 0; i--) {
     170:	3f01      	subs	r7, #1
     172:	e7f5      	b.n	160 <sched_task_at+0x48>
      return i+1;    // precedes incumbent
     174:	1c7d      	adds	r5, r7, #1
  int to_move = sched->event_queue_count - index;
     176:	68a3      	ldr	r3, [r4, #8]
     178:	1b5a      	subs	r2, r3, r5
  if (to_move > 0) {
     17a:	2a00      	cmp	r2, #0
     17c:	ddda      	ble.n	134 <sched_task_at+0x1c>
    mu_sched_event_t *src = &sched->event_queue[index];
     17e:	00eb      	lsls	r3, r5, #3
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     180:	00d2      	lsls	r2, r2, #3
    mu_sched_event_t *src = &sched->event_queue[index];
     182:	6821      	ldr	r1, [r4, #0]
     184:	18c9      	adds	r1, r1, r3
    mu_sched_event_t *dst = &sched->event_queue[index + 1];
     186:	3308      	adds	r3, #8
     188:	0018      	movs	r0, r3
     18a:	6823      	ldr	r3, [r4, #0]
     18c:	469c      	mov	ip, r3
     18e:	4460      	add	r0, ip
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     190:	4b04      	ldr	r3, [pc, #16]	; (1a4 <sched_task_at+0x8c>)
     192:	4798      	blx	r3
     194:	e7ce      	b.n	134 <sched_task_at+0x1c>
      return 0;      // follows all
     196:	003d      	movs	r5, r7
     198:	e7ed      	b.n	176 <sched_task_at+0x5e>
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	1fffffff 	.word	0x1fffffff
     1a0:	00000419 	.word	0x00000419
     1a4:	00001967 	.word	0x00001967

000001a8 <mu_sched_reset>:
mu_sched_t *mu_sched_reset(mu_sched_t *sched) {
     1a8:	b570      	push	{r4, r5, r6, lr}
     1aa:	0004      	movs	r4, r0
  sched->event_queue_count = 0;
     1ac:	2500      	movs	r5, #0
     1ae:	6085      	str	r5, [r0, #8]
  mu_spscq_reset(sched->isr_queue);
     1b0:	68c0      	ldr	r0, [r0, #12]
     1b2:	4b02      	ldr	r3, [pc, #8]	; (1bc <mu_sched_reset+0x14>)
     1b4:	4798      	blx	r3
  sched->current_event.task = NULL;
     1b6:	61e5      	str	r5, [r4, #28]
}
     1b8:	0020      	movs	r0, r4
     1ba:	bd70      	pop	{r4, r5, r6, pc}
     1bc:	00000337 	.word	0x00000337

000001c0 <mu_sched_init>:
                          mu_spscq_t *isr_queue) {
     1c0:	b570      	push	{r4, r5, r6, lr}
     1c2:	0004      	movs	r4, r0
  sched->event_queue = event_queue;
     1c4:	6001      	str	r1, [r0, #0]
  sched->event_queue_capacity = event_queue_capacity;
     1c6:	6042      	str	r2, [r0, #4]
  sched->isr_queue = isr_queue;
     1c8:	60c3      	str	r3, [r0, #12]
  sched->clock_fn = mu_time_now;
     1ca:	4b06      	ldr	r3, [pc, #24]	; (1e4 <mu_sched_init+0x24>)
     1cc:	6103      	str	r3, [r0, #16]
  sched->idle_task = &s_default_idle_task;
     1ce:	4806      	ldr	r0, [pc, #24]	; (1e8 <mu_sched_init+0x28>)
     1d0:	6160      	str	r0, [r4, #20]
  mu_task_init(&s_default_idle_task, default_idle_fn, NULL, "Idle");
     1d2:	4b06      	ldr	r3, [pc, #24]	; (1ec <mu_sched_init+0x2c>)
     1d4:	2200      	movs	r2, #0
     1d6:	4906      	ldr	r1, [pc, #24]	; (1f0 <mu_sched_init+0x30>)
     1d8:	4d06      	ldr	r5, [pc, #24]	; (1f4 <mu_sched_init+0x34>)
     1da:	47a8      	blx	r5
  return mu_sched_reset(sched);
     1dc:	0020      	movs	r0, r4
     1de:	4b06      	ldr	r3, [pc, #24]	; (1f8 <mu_sched_init+0x38>)
     1e0:	4798      	blx	r3
}
     1e2:	bd70      	pop	{r4, r5, r6, pc}
     1e4:	00000445 	.word	0x00000445
     1e8:	20000080 	.word	0x20000080
     1ec:	000028d4 	.word	0x000028d4
     1f0:	00000115 	.word	0x00000115
     1f4:	000003af 	.word	0x000003af
     1f8:	000001a9 	.word	0x000001a9

000001fc <mu_sched_get_current_time>:
mu_time_t mu_sched_get_current_time(mu_sched_t *sched) {
     1fc:	b510      	push	{r4, lr}
  return sched->clock_fn();
     1fe:	6903      	ldr	r3, [r0, #16]
     200:	4798      	blx	r3
}
     202:	bd10      	pop	{r4, pc}

00000204 <mu_sched_get_next_event>:
  if (sched->event_queue_count == 0) {
     204:	6883      	ldr	r3, [r0, #8]
     206:	2b00      	cmp	r3, #0
     208:	d006      	beq.n	218 <mu_sched_get_next_event+0x14>
    return &sched->event_queue[sched->event_queue_count - 1];
     20a:	4a04      	ldr	r2, [pc, #16]	; (21c <mu_sched_get_next_event+0x18>)
     20c:	4694      	mov	ip, r2
     20e:	4463      	add	r3, ip
     210:	00db      	lsls	r3, r3, #3
     212:	6800      	ldr	r0, [r0, #0]
     214:	18c0      	adds	r0, r0, r3
}
     216:	4770      	bx	lr
    return NULL;
     218:	2000      	movs	r0, #0
     21a:	e7fc      	b.n	216 <mu_sched_get_next_event+0x12>
     21c:	1fffffff 	.word	0x1fffffff

00000220 <mu_sched_step>:
mu_sched_err_t mu_sched_step(mu_sched_t *sched) {
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	b083      	sub	sp, #12
     224:	0004      	movs	r4, r0
  mu_time_t now = mu_sched_get_current_time(sched);
     226:	4b1a      	ldr	r3, [pc, #104]	; (290 <mu_sched_step+0x70>)
     228:	4798      	blx	r3
     22a:	0005      	movs	r5, r0
  while (mu_spscq_get(sched->isr_queue, (void **)&task) != MU_CQUEUE_ERR_EMPTY) {
     22c:	4e19      	ldr	r6, [pc, #100]	; (294 <mu_sched_step+0x74>)
  return sched_task_at(sched, task, at);
     22e:	4f1a      	ldr	r7, [pc, #104]	; (298 <mu_sched_step+0x78>)
  while (mu_spscq_get(sched->isr_queue, (void **)&task) != MU_CQUEUE_ERR_EMPTY) {
     230:	a901      	add	r1, sp, #4
     232:	68e0      	ldr	r0, [r4, #12]
     234:	47b0      	blx	r6
     236:	2801      	cmp	r0, #1
     238:	d007      	beq.n	24a <mu_sched_step+0x2a>
  return sched_task_at(sched, task, at);
     23a:	002a      	movs	r2, r5
     23c:	9901      	ldr	r1, [sp, #4]
     23e:	0020      	movs	r0, r4
     240:	47b8      	blx	r7
    if (err != MU_SCHED_ERR_NONE) {
     242:	2800      	cmp	r0, #0
     244:	d0f4      	beq.n	230 <mu_sched_step+0x10>
}
     246:	b003      	add	sp, #12
     248:	bdf0      	pop	{r4, r5, r6, r7, pc}
  event = mu_sched_get_next_event(sched);
     24a:	0020      	movs	r0, r4
     24c:	4b13      	ldr	r3, [pc, #76]	; (29c <mu_sched_step+0x7c>)
     24e:	4798      	blx	r3
     250:	1e06      	subs	r6, r0, #0
  if (event != NULL) {
     252:	d005      	beq.n	260 <mu_sched_step+0x40>
    if (!mu_time_follows(mu_sched_event_get_time(event), now)) {
     254:	0029      	movs	r1, r5
     256:	6800      	ldr	r0, [r0, #0]
     258:	4b11      	ldr	r3, [pc, #68]	; (2a0 <mu_sched_step+0x80>)
     25a:	4798      	blx	r3
     25c:	2800      	cmp	r0, #0
     25e:	d005      	beq.n	26c <mu_sched_step+0x4c>
  mu_task_call(sched->idle_task, sched);
     260:	6960      	ldr	r0, [r4, #20]
     262:	0021      	movs	r1, r4
     264:	4b0f      	ldr	r3, [pc, #60]	; (2a4 <mu_sched_step+0x84>)
     266:	4798      	blx	r3
  return MU_SCHED_ERR_NONE;
     268:	2000      	movs	r0, #0
     26a:	e7ec      	b.n	246 <mu_sched_step+0x26>
      memcpy(&(sched->current_event), event, sizeof(mu_sched_event_t));
     26c:	0020      	movs	r0, r4
     26e:	3018      	adds	r0, #24
     270:	2208      	movs	r2, #8
     272:	0031      	movs	r1, r6
     274:	4b0c      	ldr	r3, [pc, #48]	; (2a8 <mu_sched_step+0x88>)
     276:	4798      	blx	r3
  return &sched->event_queue[--sched->event_queue_count];
     278:	68a3      	ldr	r3, [r4, #8]
     27a:	3b01      	subs	r3, #1
     27c:	60a3      	str	r3, [r4, #8]
      mu_task_call(sched->current_event.task, sched);
     27e:	0021      	movs	r1, r4
     280:	69e0      	ldr	r0, [r4, #28]
     282:	4b08      	ldr	r3, [pc, #32]	; (2a4 <mu_sched_step+0x84>)
     284:	4798      	blx	r3
      sched->current_event.task = NULL;
     286:	2300      	movs	r3, #0
     288:	61e3      	str	r3, [r4, #28]
      return MU_SCHED_ERR_NONE;
     28a:	2000      	movs	r0, #0
     28c:	e7db      	b.n	246 <mu_sched_step+0x26>
     28e:	46c0      	nop			; (mov r8, r8)
     290:	000001fd 	.word	0x000001fd
     294:	00000385 	.word	0x00000385
     298:	00000119 	.word	0x00000119
     29c:	00000205 	.word	0x00000205
     2a0:	00000425 	.word	0x00000425
     2a4:	000003c1 	.word	0x000003c1
     2a8:	00001955 	.word	0x00001955

000002ac <mu_sched_task_now>:
mu_sched_err_t mu_sched_task_now(mu_sched_t *sched, mu_task_t *task) {
     2ac:	b570      	push	{r4, r5, r6, lr}
     2ae:	0004      	movs	r4, r0
     2b0:	000d      	movs	r5, r1
  return sched_task_at(sched, task, mu_sched_get_current_time(sched));
     2b2:	4b04      	ldr	r3, [pc, #16]	; (2c4 <mu_sched_task_now+0x18>)
     2b4:	4798      	blx	r3
     2b6:	0002      	movs	r2, r0
     2b8:	0029      	movs	r1, r5
     2ba:	0020      	movs	r0, r4
     2bc:	4b02      	ldr	r3, [pc, #8]	; (2c8 <mu_sched_task_now+0x1c>)
     2be:	4798      	blx	r3
}
     2c0:	bd70      	pop	{r4, r5, r6, pc}
     2c2:	46c0      	nop			; (mov r8, r8)
     2c4:	000001fd 	.word	0x000001fd
     2c8:	00000119 	.word	0x00000119

000002cc <mu_sched_reschedule_in>:
mu_sched_err_t mu_sched_reschedule_in(mu_sched_t *sched, mu_time_dt in) {
     2cc:	b570      	push	{r4, r5, r6, lr}
     2ce:	0004      	movs	r4, r0
  if (sched->current_event.task == NULL) {
     2d0:	69c3      	ldr	r3, [r0, #28]
     2d2:	2b00      	cmp	r3, #0
     2d4:	d00d      	beq.n	2f2 <mu_sched_reschedule_in+0x26>
    return MU_SCHED_ERR_NOT_FOUND;
     2d6:	2003      	movs	r0, #3
  if (!event) {
     2d8:	0023      	movs	r3, r4
     2da:	3318      	adds	r3, #24
     2dc:	d008      	beq.n	2f0 <mu_sched_reschedule_in+0x24>
  mu_task_t *task = event->task;
     2de:	69e5      	ldr	r5, [r4, #28]
  return sched_task_at(sched, task, mu_time_offset(time, in));
     2e0:	69a0      	ldr	r0, [r4, #24]
     2e2:	4b05      	ldr	r3, [pc, #20]	; (2f8 <mu_sched_reschedule_in+0x2c>)
     2e4:	4798      	blx	r3
     2e6:	0002      	movs	r2, r0
     2e8:	0029      	movs	r1, r5
     2ea:	0020      	movs	r0, r4
     2ec:	4b03      	ldr	r3, [pc, #12]	; (2fc <mu_sched_reschedule_in+0x30>)
     2ee:	4798      	blx	r3
}
     2f0:	bd70      	pop	{r4, r5, r6, pc}
    return MU_SCHED_ERR_NOT_FOUND;
     2f2:	2003      	movs	r0, #3
     2f4:	e7fc      	b.n	2f0 <mu_sched_reschedule_in+0x24>
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	00000401 	.word	0x00000401
     2fc:	00000119 	.word	0x00000119

00000300 <mu_sched_task_from_isr>:
mu_sched_err_t mu_sched_task_from_isr(mu_sched_t *sched, mu_task_t *task) {
     300:	b510      	push	{r4, lr}
  if (mu_spscq_put(sched->isr_queue, task) == MU_CQUEUE_ERR_FULL) {
     302:	68c0      	ldr	r0, [r0, #12]
     304:	4b03      	ldr	r3, [pc, #12]	; (314 <mu_sched_task_from_isr+0x14>)
     306:	4798      	blx	r3
    return MU_SCHED_ERR_NONE;
     308:	3802      	subs	r0, #2
     30a:	4243      	negs	r3, r0
     30c:	4158      	adcs	r0, r3
     30e:	0040      	lsls	r0, r0, #1
}
     310:	bd10      	pop	{r4, pc}
     312:	46c0      	nop			; (mov r8, r8)
     314:	00000355 	.word	0x00000355

00000318 <mu_spscq_init>:
// =============================================================================
// public code

mu_spscq_err_t mu_spscq_init(mu_spscq_t *q,
                               mu_spscq_item_t *store,
                               uint16_t capacity) {
     318:	b510      	push	{r4, lr}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
    return MU_CQUEUE_ERR_SIZE;
     31a:	2303      	movs	r3, #3
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     31c:	2a00      	cmp	r2, #0
     31e:	d101      	bne.n	324 <mu_spscq_init+0xc>
  }
  q->mask = capacity - 1;
  q->store = store;
  return mu_spscq_reset(q);
}
     320:	0018      	movs	r0, r3
     322:	bd10      	pop	{r4, pc}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     324:	1e54      	subs	r4, r2, #1
     326:	4222      	tst	r2, r4
     328:	d1fa      	bne.n	320 <mu_spscq_init+0x8>
  q->mask = capacity - 1;
     32a:	8004      	strh	r4, [r0, #0]
  q->store = store;
     32c:	6081      	str	r1, [r0, #8]

mu_spscq_err_t mu_spscq_reset(mu_spscq_t *q) {
  q->head = 0;
     32e:	2300      	movs	r3, #0
     330:	8043      	strh	r3, [r0, #2]
  q->tail = 0;
     332:	8083      	strh	r3, [r0, #4]
  return mu_spscq_reset(q);
     334:	e7f4      	b.n	320 <mu_spscq_init+0x8>

00000336 <mu_spscq_reset>:
  q->head = 0;
     336:	2300      	movs	r3, #0
     338:	8043      	strh	r3, [r0, #2]
  q->tail = 0;
     33a:	8083      	strh	r3, [r0, #4]
  return MU_CQUEUE_ERR_NONE;
}
     33c:	2000      	movs	r0, #0
     33e:	4770      	bx	lr

00000340 <mu_spscq_is_full>:

bool mu_spscq_is_empty(mu_spscq_t *q) { return q->head == q->tail; }

bool mu_spscq_is_full(mu_spscq_t *q) {
  // would advancing tail by 1 make it catch up with head?
  return ((q->tail + 1) & q->mask) == q->head;
     340:	8883      	ldrh	r3, [r0, #4]
     342:	8842      	ldrh	r2, [r0, #2]
     344:	3301      	adds	r3, #1
     346:	8800      	ldrh	r0, [r0, #0]
     348:	4018      	ands	r0, r3
     34a:	1a80      	subs	r0, r0, r2
     34c:	4243      	negs	r3, r0
     34e:	4158      	adcs	r0, r3
     350:	b2c0      	uxtb	r0, r0
}
     352:	4770      	bx	lr

00000354 <mu_spscq_put>:

mu_spscq_err_t mu_spscq_put(mu_spscq_t *q, mu_spscq_item_t item) {
     354:	b570      	push	{r4, r5, r6, lr}
     356:	0004      	movs	r4, r0
     358:	000d      	movs	r5, r1
  if (mu_spscq_is_full(q)) {
     35a:	4b09      	ldr	r3, [pc, #36]	; (380 <mu_spscq_put+0x2c>)
     35c:	4798      	blx	r3
    return MU_CQUEUE_ERR_FULL;
     35e:	2302      	movs	r3, #2
  if (mu_spscq_is_full(q)) {
     360:	2800      	cmp	r0, #0
     362:	d001      	beq.n	368 <mu_spscq_put+0x14>
  }
  q->store[q->tail] = item;
  q->tail = (q->tail + 1) & q->mask;
  return MU_CQUEUE_ERR_NONE;
}
     364:	0018      	movs	r0, r3
     366:	bd70      	pop	{r4, r5, r6, pc}
  q->store[q->tail] = item;
     368:	88a3      	ldrh	r3, [r4, #4]
     36a:	009b      	lsls	r3, r3, #2
     36c:	68a2      	ldr	r2, [r4, #8]
     36e:	509d      	str	r5, [r3, r2]
  q->tail = (q->tail + 1) & q->mask;
     370:	88a2      	ldrh	r2, [r4, #4]
     372:	3201      	adds	r2, #1
     374:	8823      	ldrh	r3, [r4, #0]
     376:	4013      	ands	r3, r2
     378:	80a3      	strh	r3, [r4, #4]
  return MU_CQUEUE_ERR_NONE;
     37a:	2300      	movs	r3, #0
     37c:	e7f2      	b.n	364 <mu_spscq_put+0x10>
     37e:	46c0      	nop			; (mov r8, r8)
     380:	00000341 	.word	0x00000341

00000384 <mu_spscq_get>:
bool mu_spscq_is_empty(mu_spscq_t *q) { return q->head == q->tail; }
     384:	8843      	ldrh	r3, [r0, #2]
     386:	8882      	ldrh	r2, [r0, #4]
     388:	b29b      	uxth	r3, r3

mu_spscq_err_t mu_spscq_get(mu_spscq_t *q, mu_spscq_item_t *item) {
  if (mu_spscq_is_empty(q)) {
     38a:	4293      	cmp	r3, r2
     38c:	d00b      	beq.n	3a6 <mu_spscq_get+0x22>
    *item = NULL;
    return MU_CQUEUE_ERR_EMPTY;
  }
  *item = q->store[q->head];
     38e:	8843      	ldrh	r3, [r0, #2]
     390:	6882      	ldr	r2, [r0, #8]
     392:	009b      	lsls	r3, r3, #2
     394:	589b      	ldr	r3, [r3, r2]
     396:	600b      	str	r3, [r1, #0]
  q->head = (q->head + 1) & q->mask;
     398:	8842      	ldrh	r2, [r0, #2]
     39a:	3201      	adds	r2, #1
     39c:	8803      	ldrh	r3, [r0, #0]
     39e:	4013      	ands	r3, r2
     3a0:	8043      	strh	r3, [r0, #2]
  return MU_CQUEUE_ERR_NONE;
     3a2:	2000      	movs	r0, #0
}
     3a4:	4770      	bx	lr
    *item = NULL;
     3a6:	2300      	movs	r3, #0
     3a8:	600b      	str	r3, [r1, #0]
    return MU_CQUEUE_ERR_EMPTY;
     3aa:	2001      	movs	r0, #1
     3ac:	e7fa      	b.n	3a4 <mu_spscq_get+0x20>

000003ae <mu_task_init>:

mu_task_t *mu_task_init(mu_task_t *task,
                        mu_task_fn fn,
                        void *ctx,
                        const char *name) {
  task->fn = fn;
     3ae:	6001      	str	r1, [r0, #0]
  task->ctx = ctx;
     3b0:	6042      	str	r2, [r0, #4]
#if (MU_TASK_PROFILING)
  task->name = name;
     3b2:	6083      	str	r3, [r0, #8]
  task->call_count = 0;
     3b4:	2300      	movs	r3, #0
     3b6:	60c3      	str	r3, [r0, #12]
  task->runtime = 0;
     3b8:	6103      	str	r3, [r0, #16]
  task->max_duration = 0;
     3ba:	6143      	str	r3, [r0, #20]
#endif
  return task;
}
     3bc:	4770      	bx	lr
	...

000003c0 <mu_task_call>:
#else
  return "";
#endif
}

void *mu_task_call(mu_task_t *task, void *arg) {
     3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3c2:	0004      	movs	r4, r0
     3c4:	000d      	movs	r5, r1

#if (MU_TASK_PROFILING)
  mu_time_t called_at = mu_time_now();
     3c6:	4f0c      	ldr	r7, [pc, #48]	; (3f8 <mu_task_call+0x38>)
     3c8:	47b8      	blx	r7
     3ca:	0006      	movs	r6, r0
#endif
  void *result = task->fn(task->ctx, arg);
     3cc:	0029      	movs	r1, r5
     3ce:	6860      	ldr	r0, [r4, #4]
     3d0:	6823      	ldr	r3, [r4, #0]
     3d2:	4798      	blx	r3
     3d4:	0005      	movs	r5, r0
#if (MU_TASK_PROFILING)
  task->call_count += 1;
     3d6:	68e3      	ldr	r3, [r4, #12]
     3d8:	3301      	adds	r3, #1
     3da:	60e3      	str	r3, [r4, #12]
  mu_time_dt duration = mu_time_difference(mu_time_now(), called_at);
     3dc:	47b8      	blx	r7
     3de:	0031      	movs	r1, r6
     3e0:	4b06      	ldr	r3, [pc, #24]	; (3fc <mu_task_call+0x3c>)
     3e2:	4798      	blx	r3
  task->runtime += duration;
     3e4:	6923      	ldr	r3, [r4, #16]
     3e6:	181b      	adds	r3, r3, r0
     3e8:	6123      	str	r3, [r4, #16]
  if (duration > task->max_duration) task->max_duration = duration;
     3ea:	6963      	ldr	r3, [r4, #20]
     3ec:	4298      	cmp	r0, r3
     3ee:	dd00      	ble.n	3f2 <mu_task_call+0x32>
     3f0:	6160      	str	r0, [r4, #20]
#endif
  return result;
}
     3f2:	0028      	movs	r0, r5
     3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	00000445 	.word	0x00000445
     3fc:	0000040d 	.word	0x0000040d

00000400 <mu_time_offset>:

void mu_time_init(void) {
  // mu_vm_init() must be called separately
}

mu_time_t mu_time_offset(mu_time_t t1, mu_time_dt dt) {
     400:	b510      	push	{r4, lr}
  return mu_vm_time_offset(t1, dt);
     402:	4b01      	ldr	r3, [pc, #4]	; (408 <mu_time_offset+0x8>)
     404:	4798      	blx	r3
}
     406:	bd10      	pop	{r4, pc}
     408:	00000559 	.word	0x00000559

0000040c <mu_time_difference>:

mu_time_dt mu_time_difference(mu_time_t t1, mu_time_t t2) {
     40c:	b510      	push	{r4, lr}
  return mu_vm_time_difference(t1, t2);
     40e:	4b01      	ldr	r3, [pc, #4]	; (414 <mu_time_difference+0x8>)
     410:	4798      	blx	r3
}
     412:	bd10      	pop	{r4, pc}
     414:	0000055d 	.word	0x0000055d

00000418 <mu_time_precedes>:

bool mu_time_precedes(mu_time_t t1, mu_time_t t2) {
     418:	b510      	push	{r4, lr}
  return mu_vm_time_precedes(t1, t2);
     41a:	4b01      	ldr	r3, [pc, #4]	; (420 <mu_time_precedes+0x8>)
     41c:	4798      	blx	r3
}
     41e:	bd10      	pop	{r4, pc}
     420:	00000561 	.word	0x00000561

00000424 <mu_time_follows>:

bool mu_time_equals(mu_time_t t1, mu_time_t t2) {
  return mu_vm_time_equals(t1, t2);
}

bool mu_time_follows(mu_time_t t1, mu_time_t t2) {
     424:	b510      	push	{r4, lr}
     426:	000b      	movs	r3, r1
  return mu_vm_time_precedes(t2, t1);
     428:	0001      	movs	r1, r0
     42a:	0018      	movs	r0, r3
     42c:	4b01      	ldr	r3, [pc, #4]	; (434 <mu_time_follows+0x10>)
     42e:	4798      	blx	r3
}
     430:	bd10      	pop	{r4, pc}
     432:	46c0      	nop			; (mov r8, r8)
     434:	00000561 	.word	0x00000561

00000438 <mu_time_ms_to_duration>:

mu_time_ms_dt mu_time_duration_to_ms(mu_time_dt dt) {
  return mu_vm_time_duration_to_ms(dt);
}

mu_time_dt mu_time_ms_to_duration(mu_time_ms_dt ms) {
     438:	b510      	push	{r4, lr}
  return mu_vm_time_ms_to_duration(ms);
     43a:	4b01      	ldr	r3, [pc, #4]	; (440 <mu_time_ms_to_duration+0x8>)
     43c:	4798      	blx	r3
}
     43e:	bd10      	pop	{r4, pc}
     440:	00000569 	.word	0x00000569

00000444 <mu_time_now>:
mu_time_dt mu_time_s_to_duration(mu_time_s_dt s) {
  return mu_vm_time_s_to_duration(s);
}
#endif

mu_time_t mu_time_now() {
     444:	b510      	push	{r4, lr}
  return mu_vm_rtc_now();
     446:	4b01      	ldr	r3, [pc, #4]	; (44c <mu_time_now+0x8>)
     448:	4798      	blx	r3
}
     44a:	bd10      	pop	{r4, pc}
     44c:	00000591 	.word	0x00000591

00000450 <button_cb_trampoline>:
void mu_vm_sleep(void) { go_to_sleep(); }

// =============================================================================
// private (local) code

static void button_cb_trampoline(void) {
     450:	b510      	push	{r4, lr}
  if (s_port.button_cb) {
     452:	4b04      	ldr	r3, [pc, #16]	; (464 <button_cb_trampoline+0x14>)
     454:	681b      	ldr	r3, [r3, #0]
     456:	2b00      	cmp	r3, #0
     458:	d002      	beq.n	460 <button_cb_trampoline+0x10>
    s_port.button_cb(s_port.button_cb_arg);
     45a:	4a02      	ldr	r2, [pc, #8]	; (464 <button_cb_trampoline+0x14>)
     45c:	6850      	ldr	r0, [r2, #4]
     45e:	4798      	blx	r3
  }
}
     460:	bd10      	pop	{r4, pc}
     462:	46c0      	nop			; (mov r8, r8)
     464:	20000098 	.word	0x20000098

00000468 <tx_byte_sent>:
}

/**
 * Arrive here when the USART is ready to accept a new character.
 */
static void tx_byte_sent(struct _usart_async_device *device) {
     468:	b510      	push	{r4, lr}
  // notify user callback if set
  if (s_port.tx_cb) {
     46a:	4b04      	ldr	r3, [pc, #16]	; (47c <tx_byte_sent+0x14>)
     46c:	689b      	ldr	r3, [r3, #8]
     46e:	2b00      	cmp	r3, #0
     470:	d002      	beq.n	478 <tx_byte_sent+0x10>
    s_port.tx_cb(s_port.tx_cb_arg);
     472:	4a02      	ldr	r2, [pc, #8]	; (47c <tx_byte_sent+0x14>)
     474:	68d0      	ldr	r0, [r2, #12]
     476:	4798      	blx	r3
  }
}
     478:	bd10      	pop	{r4, pc}
     47a:	46c0      	nop			; (mov r8, r8)
     47c:	20000098 	.word	0x20000098

00000480 <rx_done_cb>:

/**
 * Arrive here when a character has been fully received.
 */
static void rx_done_cb(struct _usart_async_device *device, uint8_t data) {
     480:	b510      	push	{r4, lr}
  // The ASF4 serial interrupt handler reads the data register which clears the
  // RXD bit (as well as fetching the data).  The user needs to know if there is
  // data available, so we shadow the RXD bit and the data register with
  // s_rx_has_data and s_rx_data respectively.
  s_rx_data = data;
     482:	4b08      	ldr	r3, [pc, #32]	; (4a4 <rx_done_cb+0x24>)
     484:	2220      	movs	r2, #32
     486:	5499      	strb	r1, [r3, r2]
  s_rx_has_data = true;
     488:	2101      	movs	r1, #1
     48a:	3201      	adds	r2, #1
     48c:	5499      	strb	r1, [r3, r2]

  // clear the start of frame flag so mu_vm_serial_read_in_progress() will
  // return false.
  hri_sercomusart_clear_INTFLAG_RXS_bit(USART_0.device.hw);
     48e:	4a06      	ldr	r2, [pc, #24]	; (4a8 <rx_done_cb+0x28>)
     490:	6a12      	ldr	r2, [r2, #32]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXS) >> SERCOM_USART_INTFLAG_RXS_Pos;
}

static inline void hri_sercomusart_clear_INTFLAG_RXS_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     492:	3107      	adds	r1, #7
     494:	7611      	strb	r1, [r2, #24]

  // notify user callback if set
  if (s_port.rx_cb) {
     496:	691b      	ldr	r3, [r3, #16]
     498:	2b00      	cmp	r3, #0
     49a:	d002      	beq.n	4a2 <rx_done_cb+0x22>
    s_port.rx_cb(s_port.rx_cb_arg);
     49c:	4a01      	ldr	r2, [pc, #4]	; (4a4 <rx_done_cb+0x24>)
     49e:	6950      	ldr	r0, [r2, #20]
     4a0:	4798      	blx	r3
  }
}
     4a2:	bd10      	pop	{r4, pc}
     4a4:	20000098 	.word	0x20000098
     4a8:	200001e8 	.word	0x200001e8

000004ac <tx_done_cb>:
 * Arrive here when the previous character has been fully transmitted.
 */
static void tx_done_cb(struct _usart_async_device *device) {
  // No action.  In the future, we might use this for an async version of
  // mu_vm_serial_write_in_progress().
  asm("nop");
     4ac:	46c0      	nop			; (mov r8, r8)
}
     4ae:	4770      	bx	lr

000004b0 <error_cb>:

/**
 * Arrive here on an error condition.
 */
static void error_cb(struct _usart_async_device *device) {
  asm("nop");
     4b0:	46c0      	nop			; (mov r8, r8)
}
     4b2:	4770      	bx	lr

000004b4 <rtc_cb_trampoline>:

static void rtc_cb_trampoline(struct calendar_dev *const dev) {
     4b4:	b510      	push	{r4, lr}
  // Arrive here when the RTC count register matches the RTC compare register.
  // Even if the user hasn't registered a callback, this will wake the processor
  // from sleep...
  if (s_port.rtc_cb) {
     4b6:	4b04      	ldr	r3, [pc, #16]	; (4c8 <rtc_cb_trampoline+0x14>)
     4b8:	699b      	ldr	r3, [r3, #24]
     4ba:	2b00      	cmp	r3, #0
     4bc:	d002      	beq.n	4c4 <rtc_cb_trampoline+0x10>
    s_port.rtc_cb(s_port.rtc_cb_arg);
     4be:	4a02      	ldr	r2, [pc, #8]	; (4c8 <rtc_cb_trampoline+0x14>)
     4c0:	69d0      	ldr	r0, [r2, #28]
     4c2:	4798      	blx	r3
  }
}
     4c4:	bd10      	pop	{r4, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	20000098 	.word	0x20000098

000004cc <mu_vm_init>:
void mu_vm_init(void) {
     4cc:	b510      	push	{r4, lr}
  memset(&s_port, 0, sizeof(s_port));
     4ce:	2220      	movs	r2, #32
     4d0:	2100      	movs	r1, #0
     4d2:	4813      	ldr	r0, [pc, #76]	; (520 <mu_vm_init+0x54>)
     4d4:	4b13      	ldr	r3, [pc, #76]	; (524 <mu_vm_init+0x58>)
     4d6:	4798      	blx	r3
  ext_irq_register(PIN_PA15, button_cb_trampoline);
     4d8:	4913      	ldr	r1, [pc, #76]	; (528 <mu_vm_init+0x5c>)
     4da:	200f      	movs	r0, #15
     4dc:	4b13      	ldr	r3, [pc, #76]	; (52c <mu_vm_init+0x60>)
     4de:	4798      	blx	r3
  USART_0.device.usart_cb.tx_byte_sent = tx_byte_sent;
     4e0:	4b13      	ldr	r3, [pc, #76]	; (530 <mu_vm_init+0x64>)
     4e2:	4a14      	ldr	r2, [pc, #80]	; (534 <mu_vm_init+0x68>)
     4e4:	609a      	str	r2, [r3, #8]
  USART_0.device.usart_cb.rx_done_cb = rx_done_cb;
     4e6:	4a14      	ldr	r2, [pc, #80]	; (538 <mu_vm_init+0x6c>)
     4e8:	60da      	str	r2, [r3, #12]
  USART_0.device.usart_cb.tx_done_cb = tx_done_cb;
     4ea:	4a14      	ldr	r2, [pc, #80]	; (53c <mu_vm_init+0x70>)
     4ec:	611a      	str	r2, [r3, #16]
  USART_0.device.usart_cb.error_cb = error_cb;
     4ee:	4a14      	ldr	r2, [pc, #80]	; (540 <mu_vm_init+0x74>)
     4f0:	615a      	str	r2, [r3, #20]
  hri_sercomusart_set_CTRLB_SFDE_bit(USART_0.device.hw);
     4f2:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_sercomusart_set_CTRLB_SFDE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg |= SERCOM_USART_CTRLB_SFDE;
     4f4:	6851      	ldr	r1, [r2, #4]
     4f6:	2380      	movs	r3, #128	; 0x80
     4f8:	009b      	lsls	r3, r3, #2
     4fa:	430b      	orrs	r3, r1
     4fc:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     4fe:	2107      	movs	r1, #7
     500:	69d3      	ldr	r3, [r2, #28]
     502:	4219      	tst	r1, r3
     504:	d1fc      	bne.n	500 <mu_vm_init+0x34>
  usart_async_enable(&USART_0);
     506:	480a      	ldr	r0, [pc, #40]	; (530 <mu_vm_init+0x64>)
     508:	4b0e      	ldr	r3, [pc, #56]	; (544 <mu_vm_init+0x78>)
     50a:	4798      	blx	r3
  calendar_enable(&CALENDAR_0); // start RTC
     50c:	4c0e      	ldr	r4, [pc, #56]	; (548 <mu_vm_init+0x7c>)
     50e:	0020      	movs	r0, r4
     510:	4b0e      	ldr	r3, [pc, #56]	; (54c <mu_vm_init+0x80>)
     512:	4798      	blx	r3
  _calendar_register_callback(&CALENDAR_0.device, rtc_cb_trampoline);
     514:	490e      	ldr	r1, [pc, #56]	; (550 <mu_vm_init+0x84>)
     516:	0020      	movs	r0, r4
     518:	4b0e      	ldr	r3, [pc, #56]	; (554 <mu_vm_init+0x88>)
     51a:	4798      	blx	r3
}
     51c:	bd10      	pop	{r4, pc}
     51e:	46c0      	nop			; (mov r8, r8)
     520:	20000098 	.word	0x20000098
     524:	0000198b 	.word	0x0000198b
     528:	00000451 	.word	0x00000451
     52c:	000009a9 	.word	0x000009a9
     530:	200001e8 	.word	0x200001e8
     534:	00000469 	.word	0x00000469
     538:	00000481 	.word	0x00000481
     53c:	000004ad 	.word	0x000004ad
     540:	000004b1 	.word	0x000004b1
     544:	00000c4d 	.word	0x00000c4d
     548:	200001cc 	.word	0x200001cc
     54c:	00000921 	.word	0x00000921
     550:	000004b5 	.word	0x000004b5
     554:	00000ff5 	.word	0x00000ff5

00000558 <mu_vm_time_offset>:
  return t + dt;
     558:	1808      	adds	r0, r1, r0
}
     55a:	4770      	bx	lr

0000055c <mu_vm_time_difference>:
  return t1 - t2;
     55c:	1a40      	subs	r0, r0, r1
}
     55e:	4770      	bx	lr

00000560 <mu_vm_time_precedes>:
  return t1 - t2;
     560:	1a40      	subs	r0, r0, r1
  return mu_vm_time_difference(t1, t2) > MAX_DURATION;
     562:	0fc0      	lsrs	r0, r0, #31
}
     564:	4770      	bx	lr
	...

00000568 <mu_vm_time_ms_to_duration>:
mu_vm_time_dt mu_vm_time_ms_to_duration(mu_vm_time_ms_dt ms) {
     568:	b510      	push	{r4, lr}
  return quo_rounded(ms * CONF_GCLK_RTC_FREQUENCY, 1000);
     56a:	03c0      	lsls	r0, r0, #15
  //   (y < 0) is false (zero) if x is non-negative
  //   (x < 0) ^ (y < 0) is true if x and y have opposite signs
  //   x/y would be the quotient, but it is truncated towards zero.  To round:
  //   (x + y/2)/y is the rounded quotient when x and y have the same sign
  //   (x - y/2)/y is the rounded quotient when x and y have opposite signs
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
     56c:	d506      	bpl.n	57c <mu_vm_time_ms_to_duration+0x14>
     56e:	38f5      	subs	r0, #245	; 0xf5
     570:	38ff      	subs	r0, #255	; 0xff
     572:	21fa      	movs	r1, #250	; 0xfa
     574:	0089      	lsls	r1, r1, #2
     576:	4b05      	ldr	r3, [pc, #20]	; (58c <mu_vm_time_ms_to_duration+0x24>)
     578:	4798      	blx	r3
}
     57a:	bd10      	pop	{r4, pc}
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
     57c:	30f5      	adds	r0, #245	; 0xf5
     57e:	30ff      	adds	r0, #255	; 0xff
     580:	21fa      	movs	r1, #250	; 0xfa
     582:	0089      	lsls	r1, r1, #2
     584:	4b01      	ldr	r3, [pc, #4]	; (58c <mu_vm_time_ms_to_duration+0x24>)
     586:	4798      	blx	r3
     588:	e7f7      	b.n	57a <mu_vm_time_ms_to_duration+0x12>
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	000016e1 	.word	0x000016e1

00000590 <mu_vm_rtc_now>:
typedef uint8_t  hri_rtcmode2_intflag_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtc_wait_for_sync(const void *const hw)
{
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     590:	4a03      	ldr	r2, [pc, #12]	; (5a0 <mu_vm_rtc_now+0x10>)
     592:	7a93      	ldrb	r3, [r2, #10]
     594:	09db      	lsrs	r3, r3, #7
     596:	d1fc      	bne.n	592 <mu_vm_rtc_now+0x2>

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_COUNT_bf(const void *const hw)
{
	uint32_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
     598:	4b01      	ldr	r3, [pc, #4]	; (5a0 <mu_vm_rtc_now+0x10>)
     59a:	6918      	ldr	r0, [r3, #16]
}
     59c:	4770      	bx	lr
     59e:	46c0      	nop			; (mov r8, r8)
     5a0:	40001400 	.word	0x40001400

000005a4 <mu_vm_serial_can_write>:
  return hri_sercomusart_get_interrupt_DRE_bit(USART_0.device.hw);
     5a4:	4b02      	ldr	r3, [pc, #8]	; (5b0 <mu_vm_serial_can_write+0xc>)
     5a6:	6a1b      	ldr	r3, [r3, #32]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     5a8:	7e18      	ldrb	r0, [r3, #24]
     5aa:	2301      	movs	r3, #1
     5ac:	4018      	ands	r0, r3
}
     5ae:	4770      	bx	lr
     5b0:	200001e8 	.word	0x200001e8

000005b4 <mu_vm_serial_write>:
void mu_vm_serial_write(uint8_t byte) {
     5b4:	b570      	push	{r4, r5, r6, lr}
     5b6:	0005      	movs	r5, r0
  while (!mu_vm_serial_can_write()) {
     5b8:	4c09      	ldr	r4, [pc, #36]	; (5e0 <mu_vm_serial_write+0x2c>)
     5ba:	e000      	b.n	5be <mu_vm_serial_write+0xa>
    asm("nop");
     5bc:	46c0      	nop			; (mov r8, r8)
  while (!mu_vm_serial_can_write()) {
     5be:	47a0      	blx	r4
     5c0:	2800      	cmp	r0, #0
     5c2:	d0fb      	beq.n	5bc <mu_vm_serial_write+0x8>
  _usart_async_write_byte(&USART_0.device, byte);
     5c4:	0029      	movs	r1, r5
     5c6:	4807      	ldr	r0, [pc, #28]	; (5e4 <mu_vm_serial_write+0x30>)
     5c8:	4b07      	ldr	r3, [pc, #28]	; (5e8 <mu_vm_serial_write+0x34>)
     5ca:	4798      	blx	r3
  if (s_port.tx_cb) {
     5cc:	4b07      	ldr	r3, [pc, #28]	; (5ec <mu_vm_serial_write+0x38>)
     5ce:	689b      	ldr	r3, [r3, #8]
     5d0:	2b00      	cmp	r3, #0
     5d2:	d004      	beq.n	5de <mu_vm_serial_write+0x2a>
    _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_BYTE_SENT, true);
     5d4:	2201      	movs	r2, #1
     5d6:	2100      	movs	r1, #0
     5d8:	4802      	ldr	r0, [pc, #8]	; (5e4 <mu_vm_serial_write+0x30>)
     5da:	4b05      	ldr	r3, [pc, #20]	; (5f0 <mu_vm_serial_write+0x3c>)
     5dc:	4798      	blx	r3
}
     5de:	bd70      	pop	{r4, r5, r6, pc}
     5e0:	000005a5 	.word	0x000005a5
     5e4:	200001f0 	.word	0x200001f0
     5e8:	00001261 	.word	0x00001261
     5ec:	20000098 	.word	0x20000098
     5f0:	00001279 	.word	0x00001279

000005f4 <mu_vm_serial_read>:
uint8_t mu_vm_serial_read(void) {
     5f4:	b510      	push	{r4, lr}
  _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_RX_DONE, true);
     5f6:	2201      	movs	r2, #1
     5f8:	2101      	movs	r1, #1
     5fa:	480b      	ldr	r0, [pc, #44]	; (628 <mu_vm_serial_read+0x34>)
     5fc:	4b0b      	ldr	r3, [pc, #44]	; (62c <mu_vm_serial_read+0x38>)
     5fe:	4798      	blx	r3
  return s_rx_has_data;
     600:	2321      	movs	r3, #33	; 0x21
     602:	4a0b      	ldr	r2, [pc, #44]	; (630 <mu_vm_serial_read+0x3c>)
     604:	5cd3      	ldrb	r3, [r2, r3]
  while (!mu_vm_serial_can_read()) {
     606:	2b00      	cmp	r3, #0
     608:	d105      	bne.n	616 <mu_vm_serial_read+0x22>
  return s_rx_has_data;
     60a:	0011      	movs	r1, r2
     60c:	2221      	movs	r2, #33	; 0x21
    asm("nop");
     60e:	46c0      	nop			; (mov r8, r8)
  return s_rx_has_data;
     610:	5c8b      	ldrb	r3, [r1, r2]
  while (!mu_vm_serial_can_read()) {
     612:	2b00      	cmp	r3, #0
     614:	d0fb      	beq.n	60e <mu_vm_serial_read+0x1a>
  s_rx_has_data = false;       // clear the virtual RXD bit
     616:	4b06      	ldr	r3, [pc, #24]	; (630 <mu_vm_serial_read+0x3c>)
     618:	2100      	movs	r1, #0
     61a:	2221      	movs	r2, #33	; 0x21
     61c:	5499      	strb	r1, [r3, r2]
  return s_rx_data;
     61e:	3a01      	subs	r2, #1
     620:	5c98      	ldrb	r0, [r3, r2]
     622:	b2c0      	uxtb	r0, r0
}
     624:	bd10      	pop	{r4, pc}
     626:	46c0      	nop			; (mov r8, r8)
     628:	200001f0 	.word	0x200001f0
     62c:	00001279 	.word	0x00001279
     630:	20000098 	.word	0x20000098

00000634 <mu_vm_serial_can_read>:
  return s_rx_has_data;
     634:	2321      	movs	r3, #33	; 0x21
     636:	4a02      	ldr	r2, [pc, #8]	; (640 <mu_vm_serial_can_read+0xc>)
     638:	5cd0      	ldrb	r0, [r2, r3]
     63a:	b2c0      	uxtb	r0, r0
}
     63c:	4770      	bx	lr
     63e:	46c0      	nop			; (mov r8, r8)
     640:	20000098 	.word	0x20000098

00000644 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     644:	b510      	push	{r4, lr}
	system_init();
     646:	4b01      	ldr	r3, [pc, #4]	; (64c <atmel_start_init+0x8>)
     648:	4798      	blx	r3
}
     64a:	bd10      	pop	{r4, pc}
     64c:	0000086d 	.word	0x0000086d

00000650 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     650:	e7fe      	b.n	650 <Dummy_Handler>
	...

00000654 <Reset_Handler>:
{
     654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     656:	4a2a      	ldr	r2, [pc, #168]	; (700 <Reset_Handler+0xac>)
     658:	4b2a      	ldr	r3, [pc, #168]	; (704 <Reset_Handler+0xb0>)
     65a:	429a      	cmp	r2, r3
     65c:	d011      	beq.n	682 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     65e:	001a      	movs	r2, r3
     660:	4b29      	ldr	r3, [pc, #164]	; (708 <Reset_Handler+0xb4>)
     662:	429a      	cmp	r2, r3
     664:	d20d      	bcs.n	682 <Reset_Handler+0x2e>
     666:	4a29      	ldr	r2, [pc, #164]	; (70c <Reset_Handler+0xb8>)
     668:	3303      	adds	r3, #3
     66a:	1a9b      	subs	r3, r3, r2
     66c:	089b      	lsrs	r3, r3, #2
     66e:	3301      	adds	r3, #1
     670:	009b      	lsls	r3, r3, #2
     672:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     674:	4823      	ldr	r0, [pc, #140]	; (704 <Reset_Handler+0xb0>)
     676:	4922      	ldr	r1, [pc, #136]	; (700 <Reset_Handler+0xac>)
     678:	588c      	ldr	r4, [r1, r2]
     67a:	5084      	str	r4, [r0, r2]
     67c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     67e:	429a      	cmp	r2, r3
     680:	d1fa      	bne.n	678 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     682:	4a23      	ldr	r2, [pc, #140]	; (710 <Reset_Handler+0xbc>)
     684:	4b23      	ldr	r3, [pc, #140]	; (714 <Reset_Handler+0xc0>)
     686:	429a      	cmp	r2, r3
     688:	d20a      	bcs.n	6a0 <Reset_Handler+0x4c>
     68a:	43d3      	mvns	r3, r2
     68c:	4921      	ldr	r1, [pc, #132]	; (714 <Reset_Handler+0xc0>)
     68e:	185b      	adds	r3, r3, r1
     690:	2103      	movs	r1, #3
     692:	438b      	bics	r3, r1
     694:	3304      	adds	r3, #4
     696:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     698:	2100      	movs	r1, #0
     69a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     69c:	4293      	cmp	r3, r2
     69e:	d1fc      	bne.n	69a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     6a0:	4a1d      	ldr	r2, [pc, #116]	; (718 <Reset_Handler+0xc4>)
     6a2:	21ff      	movs	r1, #255	; 0xff
     6a4:	4b1d      	ldr	r3, [pc, #116]	; (71c <Reset_Handler+0xc8>)
     6a6:	438b      	bics	r3, r1
     6a8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     6aa:	39fd      	subs	r1, #253	; 0xfd
     6ac:	2390      	movs	r3, #144	; 0x90
     6ae:	005b      	lsls	r3, r3, #1
     6b0:	4a1b      	ldr	r2, [pc, #108]	; (720 <Reset_Handler+0xcc>)
     6b2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     6b4:	4a1b      	ldr	r2, [pc, #108]	; (724 <Reset_Handler+0xd0>)
     6b6:	78d3      	ldrb	r3, [r2, #3]
     6b8:	2503      	movs	r5, #3
     6ba:	43ab      	bics	r3, r5
     6bc:	2402      	movs	r4, #2
     6be:	4323      	orrs	r3, r4
     6c0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     6c2:	78d3      	ldrb	r3, [r2, #3]
     6c4:	270c      	movs	r7, #12
     6c6:	43bb      	bics	r3, r7
     6c8:	2608      	movs	r6, #8
     6ca:	4333      	orrs	r3, r6
     6cc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     6ce:	4b16      	ldr	r3, [pc, #88]	; (728 <Reset_Handler+0xd4>)
     6d0:	7b98      	ldrb	r0, [r3, #14]
     6d2:	2230      	movs	r2, #48	; 0x30
     6d4:	4390      	bics	r0, r2
     6d6:	2220      	movs	r2, #32
     6d8:	4310      	orrs	r0, r2
     6da:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     6dc:	7b99      	ldrb	r1, [r3, #14]
     6de:	43b9      	bics	r1, r7
     6e0:	4331      	orrs	r1, r6
     6e2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     6e4:	7b9a      	ldrb	r2, [r3, #14]
     6e6:	43aa      	bics	r2, r5
     6e8:	4322      	orrs	r2, r4
     6ea:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     6ec:	4a0f      	ldr	r2, [pc, #60]	; (72c <Reset_Handler+0xd8>)
     6ee:	6853      	ldr	r3, [r2, #4]
     6f0:	2180      	movs	r1, #128	; 0x80
     6f2:	430b      	orrs	r3, r1
     6f4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     6f6:	4b0e      	ldr	r3, [pc, #56]	; (730 <Reset_Handler+0xdc>)
     6f8:	4798      	blx	r3
        main();
     6fa:	4b0e      	ldr	r3, [pc, #56]	; (734 <Reset_Handler+0xe0>)
     6fc:	4798      	blx	r3
     6fe:	e7fe      	b.n	6fe <Reset_Handler+0xaa>
     700:	00002ad0 	.word	0x00002ad0
     704:	20000000 	.word	0x20000000
     708:	20000064 	.word	0x20000064
     70c:	20000004 	.word	0x20000004
     710:	20000064 	.word	0x20000064
     714:	2000023c 	.word	0x2000023c
     718:	e000ed00 	.word	0xe000ed00
     71c:	00000000 	.word	0x00000000
     720:	41007000 	.word	0x41007000
     724:	41005000 	.word	0x41005000
     728:	41004800 	.word	0x41004800
     72c:	41004000 	.word	0x41004000
     730:	0000190d 	.word	0x0000190d
     734:	00001541 	.word	0x00001541

00000738 <EXTERNAL_IRQ_0_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct calendar_descriptor CALENDAR_0;

void EXTERNAL_IRQ_0_init(void)
{
     738:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     73a:	4a10      	ldr	r2, [pc, #64]	; (77c <EXTERNAL_IRQ_0_init+0x44>)
     73c:	4b10      	ldr	r3, [pc, #64]	; (780 <EXTERNAL_IRQ_0_init+0x48>)
     73e:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     740:	22c0      	movs	r2, #192	; 0xc0
     742:	05d2      	lsls	r2, r2, #23
     744:	2080      	movs	r0, #128	; 0x80
     746:	0200      	lsls	r0, r0, #8
     748:	6050      	str	r0, [r2, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     74a:	4b0e      	ldr	r3, [pc, #56]	; (784 <EXTERNAL_IRQ_0_init+0x4c>)
     74c:	490e      	ldr	r1, [pc, #56]	; (788 <EXTERNAL_IRQ_0_init+0x50>)
     74e:	6299      	str	r1, [r3, #40]	; 0x28
     750:	490e      	ldr	r1, [pc, #56]	; (78c <EXTERNAL_IRQ_0_init+0x54>)
     752:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     754:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     756:	214f      	movs	r1, #79	; 0x4f
     758:	5c5c      	ldrb	r4, [r3, r1]
     75a:	2504      	movs	r5, #4
     75c:	432c      	orrs	r4, r5
     75e:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     760:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     762:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     764:	2001      	movs	r0, #1
     766:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     768:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     76a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     76c:	3918      	subs	r1, #24
     76e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     770:	300e      	adds	r0, #14
     772:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     774:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(USER_BUTTON_AL, PINMUX_PA15A_EIC_EXTINT15);

	ext_irq_init();
     776:	4b06      	ldr	r3, [pc, #24]	; (790 <EXTERNAL_IRQ_0_init+0x58>)
     778:	4798      	blx	r3
}
     77a:	bd70      	pop	{r4, r5, r6, pc}
     77c:	00004305 	.word	0x00004305
     780:	40000c00 	.word	0x40000c00
     784:	41004400 	.word	0x41004400
     788:	40028000 	.word	0x40028000
     78c:	c0020000 	.word	0xc0020000
     790:	00000985 	.word	0x00000985

00000794 <USART_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     794:	4a04      	ldr	r2, [pc, #16]	; (7a8 <USART_0_CLOCK_init+0x14>)
     796:	6a13      	ldr	r3, [r2, #32]
     798:	2120      	movs	r1, #32
     79a:	430b      	orrs	r3, r1
     79c:	6213      	str	r3, [r2, #32]
     79e:	4a03      	ldr	r2, [pc, #12]	; (7ac <USART_0_CLOCK_init+0x18>)
     7a0:	4b03      	ldr	r3, [pc, #12]	; (7b0 <USART_0_CLOCK_init+0x1c>)
     7a2:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     7a4:	4770      	bx	lr
     7a6:	46c0      	nop			; (mov r8, r8)
     7a8:	40000400 	.word	0x40000400
     7ac:	00004017 	.word	0x00004017
     7b0:	40000c00 	.word	0x40000c00

000007b4 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     7b4:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7b6:	4b0e      	ldr	r3, [pc, #56]	; (7f0 <USART_0_PORT_init+0x3c>)
     7b8:	2256      	movs	r2, #86	; 0x56
     7ba:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7bc:	2501      	movs	r5, #1
     7be:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c0:	2401      	movs	r4, #1
     7c2:	4321      	orrs	r1, r4
     7c4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7c6:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7c8:	203b      	movs	r0, #59	; 0x3b
     7ca:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7cc:	3a47      	subs	r2, #71	; 0x47
     7ce:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     7d0:	3a0d      	subs	r2, #13
     7d2:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7d4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7d6:	2157      	movs	r1, #87	; 0x57
     7d8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7da:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7dc:	4322      	orrs	r2, r4
     7de:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7e0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7e2:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7e4:	3948      	subs	r1, #72	; 0x48
     7e6:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     7e8:	3111      	adds	r1, #17
     7ea:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7ec:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     7ee:	bd30      	pop	{r4, r5, pc}
     7f0:	41004400 	.word	0x41004400

000007f4 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     7f4:	b510      	push	{r4, lr}
     7f6:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     7f8:	4b06      	ldr	r3, [pc, #24]	; (814 <USART_0_init+0x20>)
     7fa:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     7fc:	2300      	movs	r3, #0
     7fe:	9300      	str	r3, [sp, #0]
     800:	3310      	adds	r3, #16
     802:	4a05      	ldr	r2, [pc, #20]	; (818 <USART_0_init+0x24>)
     804:	4905      	ldr	r1, [pc, #20]	; (81c <USART_0_init+0x28>)
     806:	4806      	ldr	r0, [pc, #24]	; (820 <USART_0_init+0x2c>)
     808:	4c06      	ldr	r4, [pc, #24]	; (824 <USART_0_init+0x30>)
     80a:	47a0      	blx	r4
	USART_0_PORT_init();
     80c:	4b06      	ldr	r3, [pc, #24]	; (828 <USART_0_init+0x34>)
     80e:	4798      	blx	r3
}
     810:	b002      	add	sp, #8
     812:	bd10      	pop	{r4, pc}
     814:	00000795 	.word	0x00000795
     818:	200000bc 	.word	0x200000bc
     81c:	42001400 	.word	0x42001400
     820:	200001e8 	.word	0x200001e8
     824:	00000bb5 	.word	0x00000bb5
     828:	000007b5 	.word	0x000007b5

0000082c <CALENDAR_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     82c:	4a04      	ldr	r2, [pc, #16]	; (840 <CALENDAR_0_CLOCK_init+0x14>)
     82e:	6993      	ldr	r3, [r2, #24]
     830:	2120      	movs	r1, #32
     832:	430b      	orrs	r3, r1
     834:	6193      	str	r3, [r2, #24]
     836:	4a03      	ldr	r2, [pc, #12]	; (844 <CALENDAR_0_CLOCK_init+0x18>)
     838:	4b03      	ldr	r3, [pc, #12]	; (848 <CALENDAR_0_CLOCK_init+0x1c>)
     83a:	805a      	strh	r2, [r3, #2]

void CALENDAR_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
     83c:	4770      	bx	lr
     83e:	46c0      	nop			; (mov r8, r8)
     840:	40000400 	.word	0x40000400
     844:	00004304 	.word	0x00004304
     848:	40000c00 	.word	0x40000c00

0000084c <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     84c:	b510      	push	{r4, lr}
	CALENDAR_0_CLOCK_init();
     84e:	4b03      	ldr	r3, [pc, #12]	; (85c <CALENDAR_0_init+0x10>)
     850:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     852:	4903      	ldr	r1, [pc, #12]	; (860 <CALENDAR_0_init+0x14>)
     854:	4803      	ldr	r0, [pc, #12]	; (864 <CALENDAR_0_init+0x18>)
     856:	4b04      	ldr	r3, [pc, #16]	; (868 <CALENDAR_0_init+0x1c>)
     858:	4798      	blx	r3
}
     85a:	bd10      	pop	{r4, pc}
     85c:	0000082d 	.word	0x0000082d
     860:	40001400 	.word	0x40001400
     864:	200001cc 	.word	0x200001cc
     868:	000008d9 	.word	0x000008d9

0000086c <system_init>:

void system_init(void)
{
     86c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     86e:	4b0d      	ldr	r3, [pc, #52]	; (8a4 <system_init+0x38>)
     870:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     872:	23c0      	movs	r3, #192	; 0xc0
     874:	05db      	lsls	r3, r3, #23
     876:	2280      	movs	r2, #128	; 0x80
     878:	05d2      	lsls	r2, r2, #23
     87a:	2198      	movs	r1, #152	; 0x98
     87c:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     87e:	3910      	subs	r1, #16
     880:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     882:	4b09      	ldr	r3, [pc, #36]	; (8a8 <system_init+0x3c>)
     884:	3120      	adds	r1, #32
     886:	505a      	str	r2, [r3, r1]
     888:	4a08      	ldr	r2, [pc, #32]	; (8ac <system_init+0x40>)
     88a:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88c:	3136      	adds	r1, #54	; 0x36
     88e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     890:	2001      	movs	r0, #1
     892:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     894:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(USER_LED_AL, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(USER_LED_AL, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     896:	4b06      	ldr	r3, [pc, #24]	; (8b0 <system_init+0x44>)
     898:	4798      	blx	r3

	USART_0_init();
     89a:	4b06      	ldr	r3, [pc, #24]	; (8b4 <system_init+0x48>)
     89c:	4798      	blx	r3

	CALENDAR_0_init();
     89e:	4b06      	ldr	r3, [pc, #24]	; (8b8 <system_init+0x4c>)
     8a0:	4798      	blx	r3
}
     8a2:	bd10      	pop	{r4, pc}
     8a4:	00000dbd 	.word	0x00000dbd
     8a8:	41004400 	.word	0x41004400
     8ac:	c0004000 	.word	0xc0004000
     8b0:	00000739 	.word	0x00000739
     8b4:	000007f5 	.word	0x000007f5
     8b8:	0000084d 	.word	0x0000084d

000008bc <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     8bc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     8c0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     8c2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     8c4:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     8c8:	4770      	bx	lr

000008ca <atomic_leave_critical>:
     8ca:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     8ce:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     8d0:	f383 8810 	msr	PRIMASK, r3
}
     8d4:	4770      	bx	lr
	...

000008d8 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
     8d8:	b570      	push	{r4, r5, r6, lr}
     8da:	0004      	movs	r4, r0
     8dc:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
     8de:	1e43      	subs	r3, r0, #1
     8e0:	4198      	sbcs	r0, r3
     8e2:	b2c0      	uxtb	r0, r0
     8e4:	22e0      	movs	r2, #224	; 0xe0
     8e6:	0052      	lsls	r2, r2, #1
     8e8:	4909      	ldr	r1, [pc, #36]	; (910 <calendar_init+0x38>)
     8ea:	4b0a      	ldr	r3, [pc, #40]	; (914 <calendar_init+0x3c>)
     8ec:	4798      	blx	r3

	if (calendar->device.hw == hw) {
     8ee:	6823      	ldr	r3, [r4, #0]
     8f0:	42ab      	cmp	r3, r5
     8f2:	d008      	beq.n	906 <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
     8f4:	2b00      	cmp	r3, #0
     8f6:	d108      	bne.n	90a <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
     8f8:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
     8fa:	0020      	movs	r0, r4
     8fc:	4b06      	ldr	r3, [pc, #24]	; (918 <calendar_init+0x40>)
     8fe:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
     900:	4b06      	ldr	r3, [pc, #24]	; (91c <calendar_init+0x44>)
     902:	6163      	str	r3, [r4, #20]

	return ret;
}
     904:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
     906:	2000      	movs	r0, #0
     908:	e7fc      	b.n	904 <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
     90a:	2012      	movs	r0, #18
     90c:	4240      	negs	r0, r0
     90e:	e7f9      	b.n	904 <calendar_init+0x2c>
     910:	000028dc 	.word	0x000028dc
     914:	00000c79 	.word	0x00000c79
     918:	00001055 	.word	0x00001055
     91c:	000007b2 	.word	0x000007b2

00000920 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
     920:	b510      	push	{r4, lr}
     922:	0004      	movs	r4, r0
	/* Sanity check arguments */
	ASSERT(calendar);
     924:	1e43      	subs	r3, r0, #1
     926:	4198      	sbcs	r0, r3
     928:	b2c0      	uxtb	r0, r0
     92a:	22e6      	movs	r2, #230	; 0xe6
     92c:	32ff      	adds	r2, #255	; 0xff
     92e:	4904      	ldr	r1, [pc, #16]	; (940 <calendar_enable+0x20>)
     930:	4b04      	ldr	r3, [pc, #16]	; (944 <calendar_enable+0x24>)
     932:	4798      	blx	r3

	_calendar_enable(&calendar->device);
     934:	0020      	movs	r0, r4
     936:	4b04      	ldr	r3, [pc, #16]	; (948 <calendar_enable+0x28>)
     938:	4798      	blx	r3

	return ERR_NONE;
}
     93a:	2000      	movs	r0, #0
     93c:	bd10      	pop	{r4, pc}
     93e:	46c0      	nop			; (mov r8, r8)
     940:	000028dc 	.word	0x000028dc
     944:	00000c79 	.word	0x00000c79
     948:	000010d9 	.word	0x000010d9

0000094c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     94c:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     94e:	4b0c      	ldr	r3, [pc, #48]	; (980 <process_ext_irq+0x34>)
     950:	685c      	ldr	r4, [r3, #4]
     952:	42a0      	cmp	r0, r4
     954:	d00e      	beq.n	974 <process_ext_irq+0x28>
     956:	2201      	movs	r2, #1
     958:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     95a:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     95c:	25ff      	movs	r5, #255	; 0xff
     95e:	e003      	b.n	968 <process_ext_irq+0x1c>
     960:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     962:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     964:	085b      	lsrs	r3, r3, #1
     966:	d10a      	bne.n	97e <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     968:	42a0      	cmp	r0, r4
     96a:	d9f9      	bls.n	960 <process_ext_irq+0x14>
	while (upper >= lower) {
     96c:	2a00      	cmp	r2, #0
     96e:	d006      	beq.n	97e <process_ext_irq+0x32>
			lower = middle + 1;
     970:	0031      	movs	r1, r6
     972:	e7f6      	b.n	962 <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     974:	4b02      	ldr	r3, [pc, #8]	; (980 <process_ext_irq+0x34>)
     976:	681b      	ldr	r3, [r3, #0]
     978:	2b00      	cmp	r3, #0
     97a:	d000      	beq.n	97e <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     97c:	4798      	blx	r3
		}
	}
}
     97e:	bd70      	pop	{r4, r5, r6, pc}
     980:	200000cc 	.word	0x200000cc

00000984 <ext_irq_init>:
{
     984:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     986:	4b05      	ldr	r3, [pc, #20]	; (99c <ext_irq_init+0x18>)
     988:	2201      	movs	r2, #1
     98a:	4252      	negs	r2, r2
     98c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     98e:	2200      	movs	r2, #0
     990:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     992:	4803      	ldr	r0, [pc, #12]	; (9a0 <ext_irq_init+0x1c>)
     994:	4b03      	ldr	r3, [pc, #12]	; (9a4 <ext_irq_init+0x20>)
     996:	4798      	blx	r3
}
     998:	bd10      	pop	{r4, pc}
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	200000cc 	.word	0x200000cc
     9a0:	0000094d 	.word	0x0000094d
     9a4:	00000ded 	.word	0x00000ded

000009a8 <ext_irq_register>:
{
     9a8:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     9aa:	4b0f      	ldr	r3, [pc, #60]	; (9e8 <ext_irq_register+0x40>)
     9ac:	685b      	ldr	r3, [r3, #4]
     9ae:	4298      	cmp	r0, r3
     9b0:	d008      	beq.n	9c4 <ext_irq_register+0x1c>
	if (NULL == cb) {
     9b2:	2900      	cmp	r1, #0
     9b4:	d014      	beq.n	9e0 <ext_irq_register+0x38>
			if (NULL == ext_irqs[i].cb) {
     9b6:	4b0c      	ldr	r3, [pc, #48]	; (9e8 <ext_irq_register+0x40>)
     9b8:	681b      	ldr	r3, [r3, #0]
     9ba:	2b00      	cmp	r3, #0
     9bc:	d009      	beq.n	9d2 <ext_irq_register+0x2a>
		return ERR_INVALID_ARG;
     9be:	200d      	movs	r0, #13
     9c0:	4240      	negs	r0, r0
     9c2:	e00c      	b.n	9de <ext_irq_register+0x36>
			ext_irqs[i].cb = cb;
     9c4:	4b08      	ldr	r3, [pc, #32]	; (9e8 <ext_irq_register+0x40>)
     9c6:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     9c8:	2900      	cmp	r1, #0
     9ca:	d105      	bne.n	9d8 <ext_irq_register+0x30>
		return _ext_irq_enable(pin, false);
     9cc:	4b07      	ldr	r3, [pc, #28]	; (9ec <ext_irq_register+0x44>)
     9ce:	4798      	blx	r3
     9d0:	e005      	b.n	9de <ext_irq_register+0x36>
				ext_irqs[i].cb  = cb;
     9d2:	4b05      	ldr	r3, [pc, #20]	; (9e8 <ext_irq_register+0x40>)
     9d4:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     9d6:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     9d8:	2101      	movs	r1, #1
     9da:	4b04      	ldr	r3, [pc, #16]	; (9ec <ext_irq_register+0x44>)
     9dc:	4798      	blx	r3
}
     9de:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     9e0:	200d      	movs	r0, #13
     9e2:	4240      	negs	r0, r0
     9e4:	e7fb      	b.n	9de <ext_irq_register+0x36>
     9e6:	46c0      	nop			; (mov r8, r8)
     9e8:	200000cc 	.word	0x200000cc
     9ec:	00000e85 	.word	0x00000e85

000009f0 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     9f0:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     9f2:	3808      	subs	r0, #8

	descr->stat = 0;
     9f4:	2300      	movs	r3, #0
     9f6:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     9f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
     9fa:	2b00      	cmp	r3, #0
     9fc:	d000      	beq.n	a00 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     9fe:	4798      	blx	r3
	}
}
     a00:	bd10      	pop	{r4, pc}

00000a02 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     a02:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a04:	3808      	subs	r0, #8

	descr->stat = 0;
     a06:	2300      	movs	r3, #0
     a08:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     a0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     a0c:	2b00      	cmp	r3, #0
     a0e:	d000      	beq.n	a12 <usart_error+0x10>
		descr->usart_cb.error(descr);
     a10:	4798      	blx	r3
	}
}
     a12:	bd10      	pop	{r4, pc}

00000a14 <usart_fill_rx_buffer>:
{
     a14:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a16:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     a18:	302c      	adds	r0, #44	; 0x2c
     a1a:	4b04      	ldr	r3, [pc, #16]	; (a2c <usart_fill_rx_buffer+0x18>)
     a1c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     a1e:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a20:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     a22:	2b00      	cmp	r3, #0
     a24:	d001      	beq.n	a2a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     a26:	0020      	movs	r0, r4
     a28:	4798      	blx	r3
}
     a2a:	bd10      	pop	{r4, pc}
     a2c:	00000d1d 	.word	0x00000d1d

00000a30 <usart_async_write>:
{
     a30:	b570      	push	{r4, r5, r6, lr}
     a32:	0004      	movs	r4, r0
     a34:	000e      	movs	r6, r1
     a36:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     a38:	2800      	cmp	r0, #0
     a3a:	d01d      	beq.n	a78 <usart_async_write+0x48>
     a3c:	2900      	cmp	r1, #0
     a3e:	d01d      	beq.n	a7c <usart_async_write+0x4c>
     a40:	0010      	movs	r0, r2
     a42:	1e43      	subs	r3, r0, #1
     a44:	4198      	sbcs	r0, r3
     a46:	223c      	movs	r2, #60	; 0x3c
     a48:	32ff      	adds	r2, #255	; 0xff
     a4a:	490f      	ldr	r1, [pc, #60]	; (a88 <usart_async_write+0x58>)
     a4c:	4b0f      	ldr	r3, [pc, #60]	; (a8c <usart_async_write+0x5c>)
     a4e:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     a50:	2344      	movs	r3, #68	; 0x44
     a52:	5ae2      	ldrh	r2, [r4, r3]
     a54:	3308      	adds	r3, #8
     a56:	5ae3      	ldrh	r3, [r4, r3]
     a58:	429a      	cmp	r2, r3
     a5a:	d111      	bne.n	a80 <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
     a5c:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     a5e:	234c      	movs	r3, #76	; 0x4c
     a60:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     a62:	2200      	movs	r2, #0
     a64:	3b08      	subs	r3, #8
     a66:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     a68:	3b43      	subs	r3, #67	; 0x43
     a6a:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     a6c:	0020      	movs	r0, r4
     a6e:	3008      	adds	r0, #8
     a70:	4b07      	ldr	r3, [pc, #28]	; (a90 <usart_async_write+0x60>)
     a72:	4798      	blx	r3
	return (int32_t)length;
     a74:	0028      	movs	r0, r5
}
     a76:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     a78:	2000      	movs	r0, #0
     a7a:	e7e4      	b.n	a46 <usart_async_write+0x16>
     a7c:	2000      	movs	r0, #0
     a7e:	e7e2      	b.n	a46 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     a80:	201c      	movs	r0, #28
     a82:	4240      	negs	r0, r0
     a84:	e7f7      	b.n	a76 <usart_async_write+0x46>
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	000028f8 	.word	0x000028f8
     a8c:	00000c79 	.word	0x00000c79
     a90:	00001269 	.word	0x00001269

00000a94 <usart_process_byte_sent>:
{
     a94:	b570      	push	{r4, r5, r6, lr}
     a96:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     a98:	0001      	movs	r1, r0
     a9a:	3908      	subs	r1, #8
     a9c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     a9e:	224c      	movs	r2, #76	; 0x4c
     aa0:	5a8a      	ldrh	r2, [r1, r2]
     aa2:	429a      	cmp	r2, r3
     aa4:	d00c      	beq.n	ac0 <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     aa6:	000a      	movs	r2, r1
     aa8:	6c89      	ldr	r1, [r1, #72]	; 0x48
     aaa:	1c5d      	adds	r5, r3, #1
     aac:	2044      	movs	r0, #68	; 0x44
     aae:	5215      	strh	r5, [r2, r0]
     ab0:	5cc9      	ldrb	r1, [r1, r3]
     ab2:	0020      	movs	r0, r4
     ab4:	4b04      	ldr	r3, [pc, #16]	; (ac8 <usart_process_byte_sent+0x34>)
     ab6:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     ab8:	0020      	movs	r0, r4
     aba:	4b04      	ldr	r3, [pc, #16]	; (acc <usart_process_byte_sent+0x38>)
     abc:	4798      	blx	r3
}
     abe:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     ac0:	4b03      	ldr	r3, [pc, #12]	; (ad0 <usart_process_byte_sent+0x3c>)
     ac2:	4798      	blx	r3
}
     ac4:	e7fb      	b.n	abe <usart_process_byte_sent+0x2a>
     ac6:	46c0      	nop			; (mov r8, r8)
     ac8:	00001261 	.word	0x00001261
     acc:	00001269 	.word	0x00001269
     ad0:	00001271 	.word	0x00001271

00000ad4 <usart_async_read>:
{
     ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ad6:	46ce      	mov	lr, r9
     ad8:	4647      	mov	r7, r8
     ada:	b580      	push	{r7, lr}
     adc:	b085      	sub	sp, #20
     ade:	0005      	movs	r5, r0
     ae0:	000e      	movs	r6, r1
     ae2:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
     ae4:	2800      	cmp	r0, #0
     ae6:	d015      	beq.n	b14 <usart_async_read+0x40>
     ae8:	2900      	cmp	r1, #0
     aea:	d013      	beq.n	b14 <usart_async_read+0x40>
     aec:	2a00      	cmp	r2, #0
     aee:	d12a      	bne.n	b46 <usart_async_read+0x72>
     af0:	22ac      	movs	r2, #172	; 0xac
     af2:	0052      	lsls	r2, r2, #1
     af4:	4929      	ldr	r1, [pc, #164]	; (b9c <usart_async_read+0xc8>)
     af6:	2000      	movs	r0, #0
     af8:	4b29      	ldr	r3, [pc, #164]	; (ba0 <usart_async_read+0xcc>)
     afa:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     afc:	a803      	add	r0, sp, #12
     afe:	4b29      	ldr	r3, [pc, #164]	; (ba4 <usart_async_read+0xd0>)
     b00:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     b02:	0028      	movs	r0, r5
     b04:	3034      	adds	r0, #52	; 0x34
     b06:	4b28      	ldr	r3, [pc, #160]	; (ba8 <usart_async_read+0xd4>)
     b08:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     b0a:	a803      	add	r0, sp, #12
     b0c:	4b27      	ldr	r3, [pc, #156]	; (bac <usart_async_read+0xd8>)
     b0e:	4798      	blx	r3
	uint16_t                       was_read = 0;
     b10:	2500      	movs	r5, #0
	return (int32_t)was_read;
     b12:	e03c      	b.n	b8e <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     b14:	22ac      	movs	r2, #172	; 0xac
     b16:	0052      	lsls	r2, r2, #1
     b18:	4920      	ldr	r1, [pc, #128]	; (b9c <usart_async_read+0xc8>)
     b1a:	2000      	movs	r0, #0
     b1c:	4b20      	ldr	r3, [pc, #128]	; (ba0 <usart_async_read+0xcc>)
     b1e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     b20:	a803      	add	r0, sp, #12
     b22:	4b20      	ldr	r3, [pc, #128]	; (ba4 <usart_async_read+0xd0>)
     b24:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     b26:	3534      	adds	r5, #52	; 0x34
     b28:	0028      	movs	r0, r5
     b2a:	9501      	str	r5, [sp, #4]
     b2c:	4b1e      	ldr	r3, [pc, #120]	; (ba8 <usart_async_read+0xd4>)
     b2e:	4798      	blx	r3
     b30:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     b32:	a803      	add	r0, sp, #12
     b34:	4b1d      	ldr	r3, [pc, #116]	; (bac <usart_async_read+0xd8>)
     b36:	4798      	blx	r3
	uint16_t                       was_read = 0;
     b38:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     b3a:	4643      	mov	r3, r8
     b3c:	2b00      	cmp	r3, #0
     b3e:	d026      	beq.n	b8e <usart_async_read+0xba>
     b40:	2f00      	cmp	r7, #0
     b42:	d116      	bne.n	b72 <usart_async_read+0x9e>
     b44:	e023      	b.n	b8e <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     b46:	22ac      	movs	r2, #172	; 0xac
     b48:	0052      	lsls	r2, r2, #1
     b4a:	4914      	ldr	r1, [pc, #80]	; (b9c <usart_async_read+0xc8>)
     b4c:	2001      	movs	r0, #1
     b4e:	4b14      	ldr	r3, [pc, #80]	; (ba0 <usart_async_read+0xcc>)
     b50:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     b52:	a803      	add	r0, sp, #12
     b54:	4b13      	ldr	r3, [pc, #76]	; (ba4 <usart_async_read+0xd0>)
     b56:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     b58:	3534      	adds	r5, #52	; 0x34
     b5a:	0028      	movs	r0, r5
     b5c:	9501      	str	r5, [sp, #4]
     b5e:	4b12      	ldr	r3, [pc, #72]	; (ba8 <usart_async_read+0xd4>)
     b60:	4798      	blx	r3
     b62:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     b64:	a803      	add	r0, sp, #12
     b66:	4b11      	ldr	r3, [pc, #68]	; (bac <usart_async_read+0xd8>)
     b68:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     b6a:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
     b6c:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     b6e:	2b00      	cmp	r3, #0
     b70:	d00d      	beq.n	b8e <usart_async_read+0xba>
{
     b72:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     b74:	4b0e      	ldr	r3, [pc, #56]	; (bb0 <usart_async_read+0xdc>)
     b76:	4699      	mov	r9, r3
     b78:	1c65      	adds	r5, r4, #1
     b7a:	b2ad      	uxth	r5, r5
     b7c:	1931      	adds	r1, r6, r4
     b7e:	9801      	ldr	r0, [sp, #4]
     b80:	47c8      	blx	r9
     b82:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     b84:	4544      	cmp	r4, r8
     b86:	d202      	bcs.n	b8e <usart_async_read+0xba>
     b88:	b2a3      	uxth	r3, r4
     b8a:	429f      	cmp	r7, r3
     b8c:	d8f4      	bhi.n	b78 <usart_async_read+0xa4>
}
     b8e:	0028      	movs	r0, r5
     b90:	b005      	add	sp, #20
     b92:	bc0c      	pop	{r2, r3}
     b94:	4690      	mov	r8, r2
     b96:	4699      	mov	r9, r3
     b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	000028f8 	.word	0x000028f8
     ba0:	00000c79 	.word	0x00000c79
     ba4:	000008bd 	.word	0x000008bd
     ba8:	00000d5d 	.word	0x00000d5d
     bac:	000008cb 	.word	0x000008cb
     bb0:	00000cd5 	.word	0x00000cd5

00000bb4 <usart_async_init>:
{
     bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bb6:	0004      	movs	r4, r0
     bb8:	000d      	movs	r5, r1
     bba:	0016      	movs	r6, r2
     bbc:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     bbe:	2800      	cmp	r0, #0
     bc0:	d026      	beq.n	c10 <usart_async_init+0x5c>
     bc2:	2900      	cmp	r1, #0
     bc4:	d026      	beq.n	c14 <usart_async_init+0x60>
     bc6:	2a00      	cmp	r2, #0
     bc8:	d026      	beq.n	c18 <usart_async_init+0x64>
     bca:	0018      	movs	r0, r3
     bcc:	1e43      	subs	r3, r0, #1
     bce:	4198      	sbcs	r0, r3
     bd0:	223a      	movs	r2, #58	; 0x3a
     bd2:	4914      	ldr	r1, [pc, #80]	; (c24 <usart_async_init+0x70>)
     bd4:	4b14      	ldr	r3, [pc, #80]	; (c28 <usart_async_init+0x74>)
     bd6:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     bd8:	0020      	movs	r0, r4
     bda:	3034      	adds	r0, #52	; 0x34
     bdc:	003a      	movs	r2, r7
     bde:	0031      	movs	r1, r6
     be0:	4b12      	ldr	r3, [pc, #72]	; (c2c <usart_async_init+0x78>)
     be2:	4798      	blx	r3
     be4:	2800      	cmp	r0, #0
     be6:	d119      	bne.n	c1c <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
     be8:	0020      	movs	r0, r4
     bea:	3008      	adds	r0, #8
     bec:	0029      	movs	r1, r5
     bee:	4b10      	ldr	r3, [pc, #64]	; (c30 <usart_async_init+0x7c>)
     bf0:	4798      	blx	r3
	if (init_status) {
     bf2:	2800      	cmp	r0, #0
     bf4:	d10b      	bne.n	c0e <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     bf6:	4b0f      	ldr	r3, [pc, #60]	; (c34 <usart_async_init+0x80>)
     bf8:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     bfa:	4b0f      	ldr	r3, [pc, #60]	; (c38 <usart_async_init+0x84>)
     bfc:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     bfe:	4b0f      	ldr	r3, [pc, #60]	; (c3c <usart_async_init+0x88>)
     c00:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     c02:	4b0f      	ldr	r3, [pc, #60]	; (c40 <usart_async_init+0x8c>)
     c04:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     c06:	4b0f      	ldr	r3, [pc, #60]	; (c44 <usart_async_init+0x90>)
     c08:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     c0a:	4b0f      	ldr	r3, [pc, #60]	; (c48 <usart_async_init+0x94>)
     c0c:	6163      	str	r3, [r4, #20]
}
     c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     c10:	2000      	movs	r0, #0
     c12:	e7dd      	b.n	bd0 <usart_async_init+0x1c>
     c14:	2000      	movs	r0, #0
     c16:	e7db      	b.n	bd0 <usart_async_init+0x1c>
     c18:	2000      	movs	r0, #0
     c1a:	e7d9      	b.n	bd0 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     c1c:	200d      	movs	r0, #13
     c1e:	4240      	negs	r0, r0
     c20:	e7f5      	b.n	c0e <usart_async_init+0x5a>
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	000028f8 	.word	0x000028f8
     c28:	00000c79 	.word	0x00000c79
     c2c:	00000c81 	.word	0x00000c81
     c30:	000011d1 	.word	0x000011d1
     c34:	00000ad5 	.word	0x00000ad5
     c38:	00000a31 	.word	0x00000a31
     c3c:	00000a95 	.word	0x00000a95
     c40:	00000a15 	.word	0x00000a15
     c44:	000009f1 	.word	0x000009f1
     c48:	00000a03 	.word	0x00000a03

00000c4c <usart_async_enable>:
{
     c4c:	b510      	push	{r4, lr}
     c4e:	0004      	movs	r4, r0
	ASSERT(descr);
     c50:	1e43      	subs	r3, r0, #1
     c52:	4198      	sbcs	r0, r3
     c54:	b2c0      	uxtb	r0, r0
     c56:	2261      	movs	r2, #97	; 0x61
     c58:	4904      	ldr	r1, [pc, #16]	; (c6c <usart_async_enable+0x20>)
     c5a:	4b05      	ldr	r3, [pc, #20]	; (c70 <usart_async_enable+0x24>)
     c5c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     c5e:	0020      	movs	r0, r4
     c60:	3008      	adds	r0, #8
     c62:	4b04      	ldr	r3, [pc, #16]	; (c74 <usart_async_enable+0x28>)
     c64:	4798      	blx	r3
}
     c66:	2000      	movs	r0, #0
     c68:	bd10      	pop	{r4, pc}
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	000028f8 	.word	0x000028f8
     c70:	00000c79 	.word	0x00000c79
     c74:	0000124d 	.word	0x0000124d

00000c78 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     c78:	2800      	cmp	r0, #0
     c7a:	d100      	bne.n	c7e <assert+0x6>
		__asm("BKPT #0");
     c7c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     c7e:	4770      	bx	lr

00000c80 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     c80:	b570      	push	{r4, r5, r6, lr}
     c82:	0004      	movs	r4, r0
     c84:	000e      	movs	r6, r1
     c86:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     c88:	2800      	cmp	r0, #0
     c8a:	d00b      	beq.n	ca4 <ringbuffer_init+0x24>
     c8c:	2900      	cmp	r1, #0
     c8e:	d018      	beq.n	cc2 <ringbuffer_init+0x42>
     c90:	2001      	movs	r0, #1
     c92:	2a00      	cmp	r2, #0
     c94:	d107      	bne.n	ca6 <ringbuffer_init+0x26>
     c96:	2228      	movs	r2, #40	; 0x28
     c98:	490c      	ldr	r1, [pc, #48]	; (ccc <ringbuffer_init+0x4c>)
     c9a:	2000      	movs	r0, #0
     c9c:	4b0c      	ldr	r3, [pc, #48]	; (cd0 <ringbuffer_init+0x50>)
     c9e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     ca0:	1e6b      	subs	r3, r5, #1
     ca2:	e007      	b.n	cb4 <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
     ca4:	2000      	movs	r0, #0
     ca6:	2228      	movs	r2, #40	; 0x28
     ca8:	4908      	ldr	r1, [pc, #32]	; (ccc <ringbuffer_init+0x4c>)
     caa:	4b09      	ldr	r3, [pc, #36]	; (cd0 <ringbuffer_init+0x50>)
     cac:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
     cae:	1e6b      	subs	r3, r5, #1
     cb0:	422b      	tst	r3, r5
     cb2:	d108      	bne.n	cc6 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     cb4:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     cb6:	2300      	movs	r3, #0
     cb8:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     cba:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     cbc:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     cbe:	2000      	movs	r0, #0
}
     cc0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     cc2:	2000      	movs	r0, #0
     cc4:	e7ef      	b.n	ca6 <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
     cc6:	200d      	movs	r0, #13
     cc8:	4240      	negs	r0, r0
     cca:	e7f9      	b.n	cc0 <ringbuffer_init+0x40>
     ccc:	00002918 	.word	0x00002918
     cd0:	00000c79 	.word	0x00000c79

00000cd4 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     cd4:	b570      	push	{r4, r5, r6, lr}
     cd6:	0004      	movs	r4, r0
     cd8:	000d      	movs	r5, r1
	ASSERT(rb && data);
     cda:	2800      	cmp	r0, #0
     cdc:	d015      	beq.n	d0a <ringbuffer_get+0x36>
     cde:	0008      	movs	r0, r1
     ce0:	1e43      	subs	r3, r0, #1
     ce2:	4198      	sbcs	r0, r3
     ce4:	b2c0      	uxtb	r0, r0
     ce6:	2240      	movs	r2, #64	; 0x40
     ce8:	490a      	ldr	r1, [pc, #40]	; (d14 <ringbuffer_get+0x40>)
     cea:	4b0b      	ldr	r3, [pc, #44]	; (d18 <ringbuffer_get+0x44>)
     cec:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     cee:	68a3      	ldr	r3, [r4, #8]
     cf0:	68e2      	ldr	r2, [r4, #12]
     cf2:	429a      	cmp	r2, r3
     cf4:	d00b      	beq.n	d0e <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
     cf6:	6862      	ldr	r2, [r4, #4]
     cf8:	4013      	ands	r3, r2
     cfa:	6822      	ldr	r2, [r4, #0]
     cfc:	5cd3      	ldrb	r3, [r2, r3]
     cfe:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     d00:	68a3      	ldr	r3, [r4, #8]
     d02:	3301      	adds	r3, #1
     d04:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     d06:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     d08:	bd70      	pop	{r4, r5, r6, pc}
     d0a:	2000      	movs	r0, #0
     d0c:	e7eb      	b.n	ce6 <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
     d0e:	200a      	movs	r0, #10
     d10:	4240      	negs	r0, r0
     d12:	e7f9      	b.n	d08 <ringbuffer_get+0x34>
     d14:	00002918 	.word	0x00002918
     d18:	00000c79 	.word	0x00000c79

00000d1c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     d1c:	b570      	push	{r4, r5, r6, lr}
     d1e:	0004      	movs	r4, r0
     d20:	000d      	movs	r5, r1
	ASSERT(rb);
     d22:	1e43      	subs	r3, r0, #1
     d24:	4198      	sbcs	r0, r3
     d26:	b2c0      	uxtb	r0, r0
     d28:	2251      	movs	r2, #81	; 0x51
     d2a:	490a      	ldr	r1, [pc, #40]	; (d54 <ringbuffer_put+0x38>)
     d2c:	4b0a      	ldr	r3, [pc, #40]	; (d58 <ringbuffer_put+0x3c>)
     d2e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     d30:	6863      	ldr	r3, [r4, #4]
     d32:	68e2      	ldr	r2, [r4, #12]
     d34:	4013      	ands	r3, r2
     d36:	6822      	ldr	r2, [r4, #0]
     d38:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     d3a:	68e3      	ldr	r3, [r4, #12]
     d3c:	6861      	ldr	r1, [r4, #4]
     d3e:	68a2      	ldr	r2, [r4, #8]
     d40:	1a9a      	subs	r2, r3, r2
     d42:	428a      	cmp	r2, r1
     d44:	d901      	bls.n	d4a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     d46:	1a59      	subs	r1, r3, r1
     d48:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     d4a:	3301      	adds	r3, #1
     d4c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     d4e:	2000      	movs	r0, #0
     d50:	bd70      	pop	{r4, r5, r6, pc}
     d52:	46c0      	nop			; (mov r8, r8)
     d54:	00002918 	.word	0x00002918
     d58:	00000c79 	.word	0x00000c79

00000d5c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     d5c:	b510      	push	{r4, lr}
     d5e:	0004      	movs	r4, r0
	ASSERT(rb);
     d60:	1e43      	subs	r3, r0, #1
     d62:	4198      	sbcs	r0, r3
     d64:	b2c0      	uxtb	r0, r0
     d66:	2267      	movs	r2, #103	; 0x67
     d68:	4903      	ldr	r1, [pc, #12]	; (d78 <ringbuffer_num+0x1c>)
     d6a:	4b04      	ldr	r3, [pc, #16]	; (d7c <ringbuffer_num+0x20>)
     d6c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     d6e:	68e0      	ldr	r0, [r4, #12]
     d70:	68a3      	ldr	r3, [r4, #8]
     d72:	1ac0      	subs	r0, r0, r3
}
     d74:	bd10      	pop	{r4, pc}
     d76:	46c0      	nop			; (mov r8, r8)
     d78:	00002918 	.word	0x00002918
     d7c:	00000c79 	.word	0x00000c79

00000d80 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     d80:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     d82:	4a06      	ldr	r2, [pc, #24]	; (d9c <_sbrk+0x1c>)
     d84:	6812      	ldr	r2, [r2, #0]
     d86:	2a00      	cmp	r2, #0
     d88:	d004      	beq.n	d94 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     d8a:	4a04      	ldr	r2, [pc, #16]	; (d9c <_sbrk+0x1c>)
     d8c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     d8e:	18c3      	adds	r3, r0, r3
     d90:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     d92:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     d94:	4902      	ldr	r1, [pc, #8]	; (da0 <_sbrk+0x20>)
     d96:	4a01      	ldr	r2, [pc, #4]	; (d9c <_sbrk+0x1c>)
     d98:	6011      	str	r1, [r2, #0]
     d9a:	e7f6      	b.n	d8a <_sbrk+0xa>
     d9c:	200000d4 	.word	0x200000d4
     da0:	20002240 	.word	0x20002240

00000da4 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     da4:	2001      	movs	r0, #1
     da6:	4240      	negs	r0, r0
     da8:	4770      	bx	lr

00000daa <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     daa:	2380      	movs	r3, #128	; 0x80
     dac:	019b      	lsls	r3, r3, #6
     dae:	604b      	str	r3, [r1, #4]

	return 0;
}
     db0:	2000      	movs	r0, #0
     db2:	4770      	bx	lr

00000db4 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     db4:	2001      	movs	r0, #1
     db6:	4770      	bx	lr

00000db8 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     db8:	2000      	movs	r0, #0
     dba:	4770      	bx	lr

00000dbc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     dbc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     dbe:	4b06      	ldr	r3, [pc, #24]	; (dd8 <_init_chip+0x1c>)
     dc0:	685a      	ldr	r2, [r3, #4]
     dc2:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     dc4:	4b05      	ldr	r3, [pc, #20]	; (ddc <_init_chip+0x20>)
     dc6:	4798      	blx	r3
	_sysctrl_init_sources();
     dc8:	4b05      	ldr	r3, [pc, #20]	; (de0 <_init_chip+0x24>)
     dca:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     dcc:	4b05      	ldr	r3, [pc, #20]	; (de4 <_init_chip+0x28>)
     dce:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     dd0:	20ff      	movs	r0, #255	; 0xff
     dd2:	4b05      	ldr	r3, [pc, #20]	; (de8 <_init_chip+0x2c>)
     dd4:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     dd6:	bd10      	pop	{r4, pc}
     dd8:	41004000 	.word	0x41004000
     ddc:	00000fd5 	.word	0x00000fd5
     de0:	00001359 	.word	0x00001359
     de4:	0000139d 	.word	0x0000139d
     de8:	00000f99 	.word	0x00000f99

00000dec <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     dec:	4a22      	ldr	r2, [pc, #136]	; (e78 <_ext_irq_init+0x8c>)
     dee:	7853      	ldrb	r3, [r2, #1]
     df0:	09db      	lsrs	r3, r3, #7
     df2:	d1fc      	bne.n	dee <_ext_irq_init+0x2>
     df4:	4a20      	ldr	r2, [pc, #128]	; (e78 <_ext_irq_init+0x8c>)
     df6:	7853      	ldrb	r3, [r2, #1]
     df8:	09db      	lsrs	r3, r3, #7
     dfa:	d1fc      	bne.n	df6 <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     dfc:	4b1e      	ldr	r3, [pc, #120]	; (e78 <_ext_irq_init+0x8c>)
     dfe:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     e00:	079b      	lsls	r3, r3, #30
     e02:	d50a      	bpl.n	e1a <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     e04:	2200      	movs	r2, #0
     e06:	4b1c      	ldr	r3, [pc, #112]	; (e78 <_ext_irq_init+0x8c>)
     e08:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     e0a:	001a      	movs	r2, r3
     e0c:	7853      	ldrb	r3, [r2, #1]
     e0e:	09db      	lsrs	r3, r3, #7
     e10:	d1fc      	bne.n	e0c <_ext_irq_init+0x20>
     e12:	4a19      	ldr	r2, [pc, #100]	; (e78 <_ext_irq_init+0x8c>)
     e14:	7853      	ldrb	r3, [r2, #1]
     e16:	09db      	lsrs	r3, r3, #7
     e18:	d1fc      	bne.n	e14 <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
     e1a:	2201      	movs	r2, #1
     e1c:	4b16      	ldr	r3, [pc, #88]	; (e78 <_ext_irq_init+0x8c>)
     e1e:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     e20:	001a      	movs	r2, r3
     e22:	7853      	ldrb	r3, [r2, #1]
     e24:	09db      	lsrs	r3, r3, #7
     e26:	d1fc      	bne.n	e22 <_ext_irq_init+0x36>
     e28:	4a13      	ldr	r2, [pc, #76]	; (e78 <_ext_irq_init+0x8c>)
     e2a:	7853      	ldrb	r3, [r2, #1]
     e2c:	09db      	lsrs	r3, r3, #7
     e2e:	d1fc      	bne.n	e2a <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     e30:	4b11      	ldr	r3, [pc, #68]	; (e78 <_ext_irq_init+0x8c>)
     e32:	2200      	movs	r2, #0
     e34:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     e36:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     e38:	2180      	movs	r1, #128	; 0x80
     e3a:	0209      	lsls	r1, r1, #8
     e3c:	6159      	str	r1, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     e3e:	619a      	str	r2, [r3, #24]
     e40:	22a0      	movs	r2, #160	; 0xa0
     e42:	0612      	lsls	r2, r2, #24
     e44:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     e46:	781a      	ldrb	r2, [r3, #0]
     e48:	2102      	movs	r1, #2
     e4a:	430a      	orrs	r2, r1
     e4c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     e4e:	001a      	movs	r2, r3
     e50:	7853      	ldrb	r3, [r2, #1]
     e52:	09db      	lsrs	r3, r3, #7
     e54:	d1fc      	bne.n	e50 <_ext_irq_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e56:	4b09      	ldr	r3, [pc, #36]	; (e7c <_ext_irq_init+0x90>)
     e58:	2210      	movs	r2, #16
     e5a:	2180      	movs	r1, #128	; 0x80
     e5c:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     e5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e62:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e66:	3101      	adds	r1, #1
     e68:	31ff      	adds	r1, #255	; 0xff
     e6a:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e6c:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     e6e:	4b04      	ldr	r3, [pc, #16]	; (e80 <_ext_irq_init+0x94>)
     e70:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     e72:	2000      	movs	r0, #0
     e74:	4770      	bx	lr
     e76:	46c0      	nop			; (mov r8, r8)
     e78:	40001800 	.word	0x40001800
     e7c:	e000e100 	.word	0xe000e100
     e80:	200000d8 	.word	0x200000d8

00000e84 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
     e84:	280f      	cmp	r0, #15
     e86:	d002      	beq.n	e8e <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
     e88:	200d      	movs	r0, #13
     e8a:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
     e8c:	4770      	bx	lr
	if (enable) {
     e8e:	2900      	cmp	r1, #0
     e90:	d106      	bne.n	ea0 <_ext_irq_enable+0x1c>
	((Eic *)hw)->INTENCLR.reg = mask;
     e92:	4b06      	ldr	r3, [pc, #24]	; (eac <_ext_irq_enable+0x28>)
     e94:	2280      	movs	r2, #128	; 0x80
     e96:	0212      	lsls	r2, r2, #8
     e98:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     e9a:	611a      	str	r2, [r3, #16]
	return ERR_NONE;
     e9c:	2000      	movs	r0, #0
     e9e:	e7f5      	b.n	e8c <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
     ea0:	2280      	movs	r2, #128	; 0x80
     ea2:	0212      	lsls	r2, r2, #8
     ea4:	4b01      	ldr	r3, [pc, #4]	; (eac <_ext_irq_enable+0x28>)
     ea6:	60da      	str	r2, [r3, #12]
     ea8:	2000      	movs	r0, #0
     eaa:	e7ef      	b.n	e8c <_ext_irq_enable+0x8>
     eac:	40001800 	.word	0x40001800

00000eb0 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     eb2:	46ce      	mov	lr, r9
     eb4:	4647      	mov	r7, r8
     eb6:	b580      	push	{r7, lr}
     eb8:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
     eba:	4b31      	ldr	r3, [pc, #196]	; (f80 <EIC_Handler+0xd0>)
     ebc:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     ebe:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     ec0:	400a      	ands	r2, r1
     ec2:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     ec4:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     ec6:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     ec8:	4b2e      	ldr	r3, [pc, #184]	; (f84 <EIC_Handler+0xd4>)
     eca:	6818      	ldr	r0, [r3, #0]
     ecc:	1e43      	subs	r3, r0, #1
     ece:	4198      	sbcs	r0, r3
     ed0:	b2c0      	uxtb	r0, r0
     ed2:	22d2      	movs	r2, #210	; 0xd2
     ed4:	492c      	ldr	r1, [pc, #176]	; (f88 <EIC_Handler+0xd8>)
     ed6:	4b2d      	ldr	r3, [pc, #180]	; (f8c <EIC_Handler+0xdc>)
     ed8:	4798      	blx	r3

	while (flags) {
     eda:	9b01      	ldr	r3, [sp, #4]
     edc:	2b00      	cmp	r3, #0
     ede:	d049      	beq.n	f74 <EIC_Handler+0xc4>
     ee0:	2301      	movs	r3, #1
     ee2:	425b      	negs	r3, r3
     ee4:	4699      	mov	r9, r3
		pos = ffs(flags) - 1;
     ee6:	4b2a      	ldr	r3, [pc, #168]	; (f90 <EIC_Handler+0xe0>)
     ee8:	4698      	mov	r8, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
     eea:	4f26      	ldr	r7, [pc, #152]	; (f84 <EIC_Handler+0xd4>)
				if (_map[middle].extint == pos) {
     eec:	4d29      	ldr	r5, [pc, #164]	; (f94 <EIC_Handler+0xe4>)
     eee:	e03a      	b.n	f66 <EIC_Handler+0xb6>
					upper = middle - 1;
     ef0:	3a01      	subs	r2, #1
     ef2:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
     ef4:	42b1      	cmp	r1, r6
     ef6:	d80c      	bhi.n	f12 <EIC_Handler+0x62>
				middle = (upper + lower) >> 1;
     ef8:	1873      	adds	r3, r6, r1
     efa:	105b      	asrs	r3, r3, #1
     efc:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
     efe:	4003      	ands	r3, r0
     f00:	00db      	lsls	r3, r3, #3
     f02:	5d5b      	ldrb	r3, [r3, r5]
     f04:	42a3      	cmp	r3, r4
     f06:	d008      	beq.n	f1a <EIC_Handler+0x6a>
				if (_map[middle].extint < pos) {
     f08:	429c      	cmp	r4, r3
     f0a:	ddf1      	ble.n	ef0 <EIC_Handler+0x40>
					lower = middle + 1;
     f0c:	3201      	adds	r2, #1
     f0e:	b2d1      	uxtb	r1, r2
     f10:	e7f0      	b.n	ef4 <EIC_Handler+0x44>
			if (INVALID_PIN_NUMBER != pin) {
     f12:	464b      	mov	r3, r9
     f14:	3301      	adds	r3, #1
     f16:	d005      	beq.n	f24 <EIC_Handler+0x74>
     f18:	e001      	b.n	f1e <EIC_Handler+0x6e>
     f1a:	230f      	movs	r3, #15
     f1c:	4699      	mov	r9, r3
				callback(pin);
     f1e:	4648      	mov	r0, r9
     f20:	683b      	ldr	r3, [r7, #0]
     f22:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     f24:	9b01      	ldr	r3, [sp, #4]
     f26:	2201      	movs	r2, #1
     f28:	40a2      	lsls	r2, r4
     f2a:	4393      	bics	r3, r2
     f2c:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     f2e:	9801      	ldr	r0, [sp, #4]
     f30:	4b17      	ldr	r3, [pc, #92]	; (f90 <EIC_Handler+0xe0>)
     f32:	4798      	blx	r3
     f34:	3801      	subs	r0, #1
     f36:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     f38:	1c63      	adds	r3, r4, #1
     f3a:	d00a      	beq.n	f52 <EIC_Handler+0xa2>
				if (_map[middle].extint == pos) {
     f3c:	2c0f      	cmp	r4, #15
     f3e:	d005      	beq.n	f4c <EIC_Handler+0x9c>
     f40:	230f      	movs	r3, #15
     f42:	2200      	movs	r2, #0
     f44:	2601      	movs	r6, #1
     f46:	2100      	movs	r1, #0
     f48:	20ff      	movs	r0, #255	; 0xff
     f4a:	e7dd      	b.n	f08 <EIC_Handler+0x58>
     f4c:	230f      	movs	r3, #15
     f4e:	4699      	mov	r9, r3
     f50:	e7e5      	b.n	f1e <EIC_Handler+0x6e>
	return ((Eic *)hw)->INTFLAG.reg;
     f52:	4b0b      	ldr	r3, [pc, #44]	; (f80 <EIC_Handler+0xd0>)
     f54:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     f56:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     f58:	400a      	ands	r2, r1
     f5a:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     f5c:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     f5e:	611a      	str	r2, [r3, #16]
	while (flags) {
     f60:	9b01      	ldr	r3, [sp, #4]
     f62:	2b00      	cmp	r3, #0
     f64:	d006      	beq.n	f74 <EIC_Handler+0xc4>
		pos = ffs(flags) - 1;
     f66:	9801      	ldr	r0, [sp, #4]
     f68:	47c0      	blx	r8
     f6a:	3801      	subs	r0, #1
     f6c:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     f6e:	1c63      	adds	r3, r4, #1
     f70:	d1e4      	bne.n	f3c <EIC_Handler+0x8c>
     f72:	e7ee      	b.n	f52 <EIC_Handler+0xa2>
	}
}
     f74:	b003      	add	sp, #12
     f76:	bc0c      	pop	{r2, r3}
     f78:	4690      	mov	r8, r2
     f7a:	4699      	mov	r9, r3
     f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f7e:	46c0      	nop			; (mov r8, r8)
     f80:	40001800 	.word	0x40001800
     f84:	200000d8 	.word	0x200000d8
     f88:	00002944 	.word	0x00002944
     f8c:	00000c79 	.word	0x00000c79
     f90:	000018b9 	.word	0x000018b9
     f94:	0000293c 	.word	0x0000293c

00000f98 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     f98:	07c3      	lsls	r3, r0, #31
     f9a:	d50a      	bpl.n	fb2 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     f9c:	4b0b      	ldr	r3, [pc, #44]	; (fcc <_gclk_init_generators_by_fref+0x34>)
     f9e:	2280      	movs	r2, #128	; 0x80
     fa0:	0052      	lsls	r2, r2, #1
     fa2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     fa4:	2283      	movs	r2, #131	; 0x83
     fa6:	0252      	lsls	r2, r2, #9
     fa8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     faa:	001a      	movs	r2, r3
     fac:	7853      	ldrb	r3, [r2, #1]
     fae:	09db      	lsrs	r3, r3, #7
     fb0:	d1fc      	bne.n	fac <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     fb2:	0703      	lsls	r3, r0, #28
     fb4:	d509      	bpl.n	fca <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
     fb6:	4b05      	ldr	r3, [pc, #20]	; (fcc <_gclk_init_generators_by_fref+0x34>)
     fb8:	2204      	movs	r2, #4
     fba:	32ff      	adds	r2, #255	; 0xff
     fbc:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     fbe:	4a04      	ldr	r2, [pc, #16]	; (fd0 <_gclk_init_generators_by_fref+0x38>)
     fc0:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     fc2:	001a      	movs	r2, r3
     fc4:	7853      	ldrb	r3, [r2, #1]
     fc6:	09db      	lsrs	r3, r3, #7
     fc8:	d1fc      	bne.n	fc4 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     fca:	4770      	bx	lr
     fcc:	40000c00 	.word	0x40000c00
     fd0:	00210303 	.word	0x00210303

00000fd4 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     fd4:	4b06      	ldr	r3, [pc, #24]	; (ff0 <_pm_init+0x1c>)
     fd6:	7a1a      	ldrb	r2, [r3, #8]
     fd8:	b2d2      	uxtb	r2, r2
     fda:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     fdc:	7a5a      	ldrb	r2, [r3, #9]
     fde:	b2d2      	uxtb	r2, r2
     fe0:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     fe2:	7a9a      	ldrb	r2, [r3, #10]
     fe4:	b2d2      	uxtb	r2, r2
     fe6:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     fe8:	7ada      	ldrb	r2, [r3, #11]
     fea:	b2d2      	uxtb	r2, r2
     fec:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     fee:	4770      	bx	lr
     ff0:	40000400 	.word	0x40000400

00000ff4 <_calendar_register_callback>:

/**
 * \brief Registers callback for the specified callback type
 */
int32_t _calendar_register_callback(struct calendar_dev *const dev, calendar_drv_cb_alarm_t callback)
{
     ff4:	b570      	push	{r4, r5, r6, lr}
     ff6:	0004      	movs	r4, r0
     ff8:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     ffa:	2800      	cmp	r0, #0
     ffc:	d015      	beq.n	102a <_calendar_register_callback+0x36>
     ffe:	6800      	ldr	r0, [r0, #0]
    1000:	1e43      	subs	r3, r0, #1
    1002:	4198      	sbcs	r0, r3
    1004:	b2c0      	uxtb	r0, r0
    1006:	2233      	movs	r2, #51	; 0x33
    1008:	490f      	ldr	r1, [pc, #60]	; (1048 <_calendar_register_callback+0x54>)
    100a:	4b10      	ldr	r3, [pc, #64]	; (104c <_calendar_register_callback+0x58>)
    100c:	4798      	blx	r3

	/* Check callback */
	if (callback != NULL) {
    100e:	2d00      	cmp	r5, #0
    1010:	d00d      	beq.n	102e <_calendar_register_callback+0x3a>
		/* register the callback */
		dev->callback = callback;
    1012:	6065      	str	r5, [r4, #4]
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1014:	4b0e      	ldr	r3, [pc, #56]	; (1050 <_calendar_register_callback+0x5c>)
    1016:	2208      	movs	r2, #8
    1018:	21c0      	movs	r1, #192	; 0xc0
    101a:	0049      	lsls	r1, r1, #1
    101c:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    101e:	601a      	str	r2, [r3, #0]
		/* enable RTC_IRQn */
		NVIC_ClearPendingIRQ(RTC_IRQn);
		NVIC_EnableIRQ(RTC_IRQn);

		/* enable cmp */
		hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    1020:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1022:	3a07      	subs	r2, #7
    1024:	71da      	strb	r2, [r3, #7]
		/* disable RTC_IRQn */
		NVIC_DisableIRQ(RTC_IRQn);
	}

	return ERR_NONE;
}
    1026:	2000      	movs	r0, #0
    1028:	bd70      	pop	{r4, r5, r6, pc}
    102a:	2000      	movs	r0, #0
    102c:	e7eb      	b.n	1006 <_calendar_register_callback+0x12>
		hri_rtcmode0_clear_INTEN_CMP0_bit(dev->hw);
    102e:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_CMP0;
    1030:	2201      	movs	r2, #1
    1032:	719a      	strb	r2, [r3, #6]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1034:	2108      	movs	r1, #8
    1036:	2380      	movs	r3, #128	; 0x80
    1038:	4a05      	ldr	r2, [pc, #20]	; (1050 <_calendar_register_callback+0x5c>)
    103a:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    103c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1040:	f3bf 8f6f 	isb	sy
    1044:	e7ef      	b.n	1026 <_calendar_register_callback+0x32>
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	0000295c 	.word	0x0000295c
    104c:	00000c79 	.word	0x00000c79
    1050:	e000e100 	.word	0xe000e100

00001054 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    1054:	b510      	push	{r4, lr}
    1056:	1e04      	subs	r4, r0, #0
	uint16_t register_value;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1058:	d036      	beq.n	10c8 <_calendar_init+0x74>
    105a:	6800      	ldr	r0, [r0, #0]
    105c:	1e43      	subs	r3, r0, #1
    105e:	4198      	sbcs	r0, r3
    1060:	b2c0      	uxtb	r0, r0
    1062:	2278      	movs	r2, #120	; 0x78
    1064:	4919      	ldr	r1, [pc, #100]	; (10cc <_calendar_init+0x78>)
    1066:	4b1a      	ldr	r3, [pc, #104]	; (10d0 <_calendar_init+0x7c>)
    1068:	4798      	blx	r3

	_rtc_dev = dev;
    106a:	4b1a      	ldr	r3, [pc, #104]	; (10d4 <_calendar_init+0x80>)
    106c:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw);
    106e:	6822      	ldr	r2, [r4, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1070:	7a93      	ldrb	r3, [r2, #10]
    1072:	09db      	lsrs	r3, r3, #7
    1074:	d1fc      	bne.n	1070 <_calendar_init+0x1c>
    1076:	7a93      	ldrb	r3, [r2, #10]
    1078:	09db      	lsrs	r3, r3, #7
    107a:	d1fc      	bne.n	1076 <_calendar_init+0x22>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
    107c:	8813      	ldrh	r3, [r2, #0]
	if (hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw)) {
    107e:	079b      	lsls	r3, r3, #30
    1080:	d50a      	bpl.n	1098 <_calendar_init+0x44>
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    1082:	8813      	ldrh	r3, [r2, #0]
    1084:	2102      	movs	r1, #2
    1086:	438b      	bics	r3, r1
    1088:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    108a:	7a93      	ldrb	r3, [r2, #10]
    108c:	09db      	lsrs	r3, r3, #7
    108e:	d1fc      	bne.n	108a <_calendar_init+0x36>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw);
    1090:	6822      	ldr	r2, [r4, #0]
    1092:	7a93      	ldrb	r3, [r2, #10]
    1094:	09db      	lsrs	r3, r3, #7
    1096:	d1fc      	bne.n	1092 <_calendar_init+0x3e>
#endif
	}
	hri_rtcmode0_set_CTRL_SWRST_bit(dev->hw);
    1098:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    109a:	8813      	ldrh	r3, [r2, #0]
    109c:	2101      	movs	r1, #1
    109e:	430b      	orrs	r3, r1
    10a0:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    10a2:	7a93      	ldrb	r3, [r2, #10]
    10a4:	09db      	lsrs	r3, r3, #7
    10a6:	d1fc      	bne.n	10a2 <_calendar_init+0x4e>
	hri_rtcmode0_wait_for_sync(dev->hw);
    10a8:	6822      	ldr	r2, [r4, #0]
    10aa:	7a93      	ldrb	r3, [r2, #10]
    10ac:	09db      	lsrs	r3, r3, #7
    10ae:	d1fc      	bne.n	10aa <_calendar_init+0x56>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    10b0:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    10b2:	7a93      	ldrb	r3, [r2, #10]
    10b4:	09db      	lsrs	r3, r3, #7
    10b6:	d1fc      	bne.n	10b2 <_calendar_init+0x5e>
	register_value &= (~RTC_MODE0_CTRL_MATCHCLR);

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	/* set continuously clock read update mode */
	hri_rtcmode0_set_READREQ_RCONT_bit(dev->hw);
    10b8:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    10ba:	8853      	ldrh	r3, [r2, #2]
    10bc:	2180      	movs	r1, #128	; 0x80
    10be:	01c9      	lsls	r1, r1, #7
    10c0:	430b      	orrs	r3, r1
    10c2:	8053      	strh	r3, [r2, #2]
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	return ERR_NONE;
}
    10c4:	2000      	movs	r0, #0
    10c6:	bd10      	pop	{r4, pc}
    10c8:	2000      	movs	r0, #0
    10ca:	e7ca      	b.n	1062 <_calendar_init+0xe>
    10cc:	0000295c 	.word	0x0000295c
    10d0:	00000c79 	.word	0x00000c79
    10d4:	200000dc 	.word	0x200000dc

000010d8 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    10d8:	b510      	push	{r4, lr}
    10da:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    10dc:	d011      	beq.n	1102 <_calendar_enable+0x2a>
    10de:	6800      	ldr	r0, [r0, #0]
    10e0:	1e43      	subs	r3, r0, #1
    10e2:	4198      	sbcs	r0, r3
    10e4:	b2c0      	uxtb	r0, r0
    10e6:	22aa      	movs	r2, #170	; 0xaa
    10e8:	4907      	ldr	r1, [pc, #28]	; (1108 <_calendar_enable+0x30>)
    10ea:	4b08      	ldr	r3, [pc, #32]	; (110c <_calendar_enable+0x34>)
    10ec:	4798      	blx	r3

	/* Enable rtc */
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
    10ee:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    10f0:	8813      	ldrh	r3, [r2, #0]
    10f2:	2102      	movs	r1, #2
    10f4:	430b      	orrs	r3, r1
    10f6:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    10f8:	7a93      	ldrb	r3, [r2, #10]
    10fa:	09db      	lsrs	r3, r3, #7
    10fc:	d1fc      	bne.n	10f8 <_calendar_enable+0x20>

	return ERR_NONE;
}
    10fe:	2000      	movs	r0, #0
    1100:	bd10      	pop	{r4, pc}
    1102:	2000      	movs	r0, #0
    1104:	e7ef      	b.n	10e6 <_calendar_enable+0xe>
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	0000295c 	.word	0x0000295c
    110c:	00000c79 	.word	0x00000c79

00001110 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1110:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
    1112:	4b07      	ldr	r3, [pc, #28]	; (1130 <RTC_Handler+0x20>)
    1114:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1116:	6823      	ldr	r3, [r4, #0]
    1118:	7a1b      	ldrb	r3, [r3, #8]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
    111a:	07db      	lsls	r3, r3, #31
    111c:	d400      	bmi.n	1120 <RTC_Handler+0x10>
}
    111e:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    1120:	0020      	movs	r0, r4
    1122:	6863      	ldr	r3, [r4, #4]
    1124:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1126:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    1128:	2201      	movs	r2, #1
    112a:	721a      	strb	r2, [r3, #8]
}
    112c:	e7f7      	b.n	111e <RTC_Handler+0xe>
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	200000dc 	.word	0x200000dc

00001134 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1134:	b510      	push	{r4, lr}
    1136:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1138:	4b1f      	ldr	r3, [pc, #124]	; (11b8 <_usart_init+0x84>)
    113a:	18c3      	adds	r3, r0, r3
    113c:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    113e:	b2db      	uxtb	r3, r3
    1140:	2b03      	cmp	r3, #3
    1142:	d004      	beq.n	114e <_usart_init+0x1a>
	ASSERT(false);
    1144:	4a1d      	ldr	r2, [pc, #116]	; (11bc <_usart_init+0x88>)
    1146:	491e      	ldr	r1, [pc, #120]	; (11c0 <_usart_init+0x8c>)
    1148:	2000      	movs	r0, #0
    114a:	4b1e      	ldr	r3, [pc, #120]	; (11c4 <_usart_init+0x90>)
    114c:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    114e:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1150:	07db      	lsls	r3, r3, #31
    1152:	d418      	bmi.n	1186 <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1154:	2203      	movs	r2, #3
    1156:	69e3      	ldr	r3, [r4, #28]
    1158:	421a      	tst	r2, r3
    115a:	d1fc      	bne.n	1156 <_usart_init+0x22>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    115c:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    115e:	079b      	lsls	r3, r3, #30
    1160:	d50b      	bpl.n	117a <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1162:	6823      	ldr	r3, [r4, #0]
    1164:	2202      	movs	r2, #2
    1166:	4393      	bics	r3, r2
    1168:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    116a:	3201      	adds	r2, #1
    116c:	69e3      	ldr	r3, [r4, #28]
    116e:	421a      	tst	r2, r3
    1170:	d1fc      	bne.n	116c <_usart_init+0x38>
    1172:	2202      	movs	r2, #2
    1174:	69e3      	ldr	r3, [r4, #28]
    1176:	421a      	tst	r2, r3
    1178:	d1fc      	bne.n	1174 <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    117a:	2305      	movs	r3, #5
    117c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    117e:	2203      	movs	r2, #3
    1180:	69e3      	ldr	r3, [r4, #28]
    1182:	421a      	tst	r2, r3
    1184:	d1fc      	bne.n	1180 <_usart_init+0x4c>
    1186:	2201      	movs	r2, #1
    1188:	69e3      	ldr	r3, [r4, #28]
    118a:	421a      	tst	r2, r3
    118c:	d1fc      	bne.n	1188 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    118e:	4b0e      	ldr	r3, [pc, #56]	; (11c8 <_usart_init+0x94>)
    1190:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1192:	2203      	movs	r2, #3
    1194:	69e3      	ldr	r3, [r4, #28]
    1196:	421a      	tst	r2, r3
    1198:	d1fc      	bne.n	1194 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    119a:	23c0      	movs	r3, #192	; 0xc0
    119c:	029b      	lsls	r3, r3, #10
    119e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11a0:	2207      	movs	r2, #7
    11a2:	69e3      	ldr	r3, [r4, #28]
    11a4:	421a      	tst	r2, r3
    11a6:	d1fc      	bne.n	11a2 <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    11a8:	4b08      	ldr	r3, [pc, #32]	; (11cc <_usart_init+0x98>)
    11aa:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    11ac:	2300      	movs	r3, #0
    11ae:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    11b0:	2230      	movs	r2, #48	; 0x30
    11b2:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    11b4:	2000      	movs	r0, #0
    11b6:	bd10      	pop	{r4, pc}
    11b8:	bdfff800 	.word	0xbdfff800
    11bc:	0000025e 	.word	0x0000025e
    11c0:	00002974 	.word	0x00002974
    11c4:	00000c79 	.word	0x00000c79
    11c8:	40100004 	.word	0x40100004
    11cc:	ffffc504 	.word	0xffffc504

000011d0 <_usart_async_init>:
{
    11d0:	b570      	push	{r4, r5, r6, lr}
    11d2:	0005      	movs	r5, r0
    11d4:	000c      	movs	r4, r1
	ASSERT(device);
    11d6:	1e43      	subs	r3, r0, #1
    11d8:	4198      	sbcs	r0, r3
    11da:	b2c0      	uxtb	r0, r0
    11dc:	22c4      	movs	r2, #196	; 0xc4
    11de:	4914      	ldr	r1, [pc, #80]	; (1230 <_usart_async_init+0x60>)
    11e0:	4b14      	ldr	r3, [pc, #80]	; (1234 <_usart_async_init+0x64>)
    11e2:	4798      	blx	r3
	init_status = _usart_init(hw);
    11e4:	0020      	movs	r0, r4
    11e6:	4b14      	ldr	r3, [pc, #80]	; (1238 <_usart_async_init+0x68>)
    11e8:	4798      	blx	r3
	if (init_status) {
    11ea:	2800      	cmp	r0, #0
    11ec:	d000      	beq.n	11f0 <_usart_async_init+0x20>
}
    11ee:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    11f0:	61ac      	str	r4, [r5, #24]
	if (hw == SERCOM3) {
    11f2:	4b12      	ldr	r3, [pc, #72]	; (123c <_usart_async_init+0x6c>)
    11f4:	429c      	cmp	r4, r3
    11f6:	d017      	beq.n	1228 <_usart_async_init+0x58>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    11f8:	4b11      	ldr	r3, [pc, #68]	; (1240 <_usart_async_init+0x70>)
    11fa:	469c      	mov	ip, r3
    11fc:	4464      	add	r4, ip
    11fe:	0aa4      	lsrs	r4, r4, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1200:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
    1202:	b2e3      	uxtb	r3, r4
    1204:	0622      	lsls	r2, r4, #24
    1206:	d4f2      	bmi.n	11ee <_usart_async_init+0x1e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1208:	221f      	movs	r2, #31
    120a:	401a      	ands	r2, r3
    120c:	2301      	movs	r3, #1
    120e:	4093      	lsls	r3, r2
    1210:	4a0c      	ldr	r2, [pc, #48]	; (1244 <_usart_async_init+0x74>)
    1212:	2180      	movs	r1, #128	; 0x80
    1214:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1216:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    121a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    121e:	3101      	adds	r1, #1
    1220:	31ff      	adds	r1, #255	; 0xff
    1222:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1224:	6013      	str	r3, [r2, #0]
    1226:	e7e2      	b.n	11ee <_usart_async_init+0x1e>
		_sercom3_dev = (struct _usart_async_device *)dev;
    1228:	4b07      	ldr	r3, [pc, #28]	; (1248 <_usart_async_init+0x78>)
    122a:	601d      	str	r5, [r3, #0]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    122c:	230c      	movs	r3, #12
    122e:	e7eb      	b.n	1208 <_usart_async_init+0x38>
    1230:	00002974 	.word	0x00002974
    1234:	00000c79 	.word	0x00000c79
    1238:	00001135 	.word	0x00001135
    123c:	42001400 	.word	0x42001400
    1240:	bdfff800 	.word	0xbdfff800
    1244:	e000e100 	.word	0xe000e100
    1248:	200000e0 	.word	0x200000e0

0000124c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    124c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    124e:	6813      	ldr	r3, [r2, #0]
    1250:	2102      	movs	r1, #2
    1252:	430b      	orrs	r3, r1
    1254:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1256:	3101      	adds	r1, #1
    1258:	69d3      	ldr	r3, [r2, #28]
    125a:	4219      	tst	r1, r3
    125c:	d1fc      	bne.n	1258 <_usart_async_enable+0xc>
}
    125e:	4770      	bx	lr

00001260 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1260:	6983      	ldr	r3, [r0, #24]
    1262:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1264:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1266:	4770      	bx	lr

00001268 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1268:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    126a:	2201      	movs	r2, #1
    126c:	759a      	strb	r2, [r3, #22]
}
    126e:	4770      	bx	lr

00001270 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1270:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1272:	2202      	movs	r2, #2
    1274:	759a      	strb	r2, [r3, #22]
}
    1276:	4770      	bx	lr

00001278 <_usart_async_set_irq_state>:
{
    1278:	b570      	push	{r4, r5, r6, lr}
    127a:	0004      	movs	r4, r0
    127c:	000d      	movs	r5, r1
    127e:	0016      	movs	r6, r2
	ASSERT(device);
    1280:	1e43      	subs	r3, r0, #1
    1282:	4198      	sbcs	r0, r3
    1284:	b2c0      	uxtb	r0, r0
    1286:	4a16      	ldr	r2, [pc, #88]	; (12e0 <_usart_async_set_irq_state+0x68>)
    1288:	4916      	ldr	r1, [pc, #88]	; (12e4 <_usart_async_set_irq_state+0x6c>)
    128a:	4b17      	ldr	r3, [pc, #92]	; (12e8 <_usart_async_set_irq_state+0x70>)
    128c:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    128e:	2302      	movs	r3, #2
    1290:	002a      	movs	r2, r5
    1292:	439a      	bics	r2, r3
    1294:	d10e      	bne.n	12b4 <_usart_async_set_irq_state+0x3c>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1296:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1298:	2e00      	cmp	r6, #0
    129a:	d105      	bne.n	12a8 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    129c:	2201      	movs	r2, #1
    129e:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    12a0:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    12a2:	3201      	adds	r2, #1
    12a4:	751a      	strb	r2, [r3, #20]
}
    12a6:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    12a8:	2201      	movs	r2, #1
    12aa:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    12ac:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    12ae:	3201      	adds	r2, #1
    12b0:	759a      	strb	r2, [r3, #22]
    12b2:	e7f8      	b.n	12a6 <_usart_async_set_irq_state+0x2e>
	} else if (USART_ASYNC_RX_DONE == type) {
    12b4:	2d01      	cmp	r5, #1
    12b6:	d007      	beq.n	12c8 <_usart_async_set_irq_state+0x50>
	} else if (USART_ASYNC_ERROR == type) {
    12b8:	2d03      	cmp	r5, #3
    12ba:	d1f4      	bne.n	12a6 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    12bc:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    12be:	2e00      	cmp	r6, #0
    12c0:	d00b      	beq.n	12da <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    12c2:	2280      	movs	r2, #128	; 0x80
    12c4:	759a      	strb	r2, [r3, #22]
}
    12c6:	e7ee      	b.n	12a6 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    12c8:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    12ca:	2e00      	cmp	r6, #0
    12cc:	d102      	bne.n	12d4 <_usart_async_set_irq_state+0x5c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    12ce:	2204      	movs	r2, #4
    12d0:	751a      	strb	r2, [r3, #20]
    12d2:	e7e8      	b.n	12a6 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    12d4:	2204      	movs	r2, #4
    12d6:	759a      	strb	r2, [r3, #22]
    12d8:	e7e5      	b.n	12a6 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    12da:	2280      	movs	r2, #128	; 0x80
    12dc:	751a      	strb	r2, [r3, #20]
    12de:	e7e2      	b.n	12a6 <_usart_async_set_irq_state+0x2e>
    12e0:	0000021e 	.word	0x0000021e
    12e4:	00002974 	.word	0x00002974
    12e8:	00000c79 	.word	0x00000c79

000012ec <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    12ec:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    12ee:	4b19      	ldr	r3, [pc, #100]	; (1354 <SERCOM3_Handler+0x68>)
    12f0:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
    12f2:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    12f4:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    12f6:	07db      	lsls	r3, r3, #31
    12f8:	d502      	bpl.n	1300 <SERCOM3_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    12fa:	7da3      	ldrb	r3, [r4, #22]
    12fc:	07db      	lsls	r3, r3, #31
    12fe:	d40f      	bmi.n	1320 <SERCOM3_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1300:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1302:	079b      	lsls	r3, r3, #30
    1304:	d502      	bpl.n	130c <SERCOM3_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1306:	7da3      	ldrb	r3, [r4, #22]
    1308:	079b      	lsls	r3, r3, #30
    130a:	d40e      	bmi.n	132a <SERCOM3_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    130c:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    130e:	075b      	lsls	r3, r3, #29
    1310:	d515      	bpl.n	133e <SERCOM3_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    1312:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    1314:	2337      	movs	r3, #55	; 0x37
    1316:	421a      	tst	r2, r3
    1318:	d00c      	beq.n	1334 <SERCOM3_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    131a:	3308      	adds	r3, #8
    131c:	8363      	strh	r3, [r4, #26]
}
    131e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1320:	2301      	movs	r3, #1
    1322:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    1324:	6803      	ldr	r3, [r0, #0]
    1326:	4798      	blx	r3
    1328:	e7f9      	b.n	131e <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    132a:	2302      	movs	r3, #2
    132c:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    132e:	6883      	ldr	r3, [r0, #8]
    1330:	4798      	blx	r3
    1332:	e7f4      	b.n	131e <SERCOM3_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
    1334:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1336:	b2c9      	uxtb	r1, r1
    1338:	6843      	ldr	r3, [r0, #4]
    133a:	4798      	blx	r3
    133c:	e7ef      	b.n	131e <SERCOM3_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    133e:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1340:	09db      	lsrs	r3, r3, #7
    1342:	d0ec      	beq.n	131e <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1344:	2380      	movs	r3, #128	; 0x80
    1346:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    1348:	68c3      	ldr	r3, [r0, #12]
    134a:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    134c:	8b63      	ldrh	r3, [r4, #26]
    134e:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1350:	8363      	strh	r3, [r4, #26]
}
    1352:	e7e4      	b.n	131e <SERCOM3_Handler+0x32>
    1354:	200000e0 	.word	0x200000e0

00001358 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1358:	4b0e      	ldr	r3, [pc, #56]	; (1394 <_sysctrl_init_sources+0x3c>)
    135a:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    135c:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    135e:	480e      	ldr	r0, [pc, #56]	; (1398 <_sysctrl_init_sources+0x40>)
    1360:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1362:	0f92      	lsrs	r2, r2, #30
    1364:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    1366:	2002      	movs	r0, #2
    1368:	4302      	orrs	r2, r0
    136a:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    136c:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    136e:	699a      	ldr	r2, [r3, #24]
    1370:	4302      	orrs	r2, r0
    1372:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1374:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1376:	211f      	movs	r1, #31
    1378:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    137a:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    137c:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    137e:	2208      	movs	r2, #8
    1380:	68cb      	ldr	r3, [r1, #12]
    1382:	421a      	tst	r2, r3
    1384:	d0fc      	beq.n	1380 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1386:	4a03      	ldr	r2, [pc, #12]	; (1394 <_sysctrl_init_sources+0x3c>)
    1388:	6a13      	ldr	r3, [r2, #32]
    138a:	2180      	movs	r1, #128	; 0x80
    138c:	430b      	orrs	r3, r1
    138e:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1390:	4770      	bx	lr
    1392:	46c0      	nop			; (mov r8, r8)
    1394:	40000800 	.word	0x40000800
    1398:	0fff0000 	.word	0x0fff0000

0000139c <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    139c:	4a02      	ldr	r2, [pc, #8]	; (13a8 <_sysctrl_init_referenced_generators+0xc>)
    139e:	6993      	ldr	r3, [r2, #24]
    13a0:	2102      	movs	r1, #2
    13a2:	438b      	bics	r3, r1
    13a4:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    13a6:	4770      	bx	lr
    13a8:	40000800 	.word	0x40000800

000013ac <mulib_blinky_init>:
static button_ctx_t s_button_ctx;

// =============================================================================
// public code

void mulib_blinky_init() {
    13ac:	b570      	push	{r4, r5, r6, lr}
  // initialize the port-specific interface
  mu_vm_init();
    13ae:	4b16      	ldr	r3, [pc, #88]	; (1408 <mulib_blinky_init+0x5c>)
    13b0:	4798      	blx	r3

  printf("\r\n\r\n# ===========\r\n");
    13b2:	4816      	ldr	r0, [pc, #88]	; (140c <mulib_blinky_init+0x60>)
    13b4:	4b16      	ldr	r3, [pc, #88]	; (1410 <mulib_blinky_init+0x64>)
    13b6:	4798      	blx	r3
  printf("# mulib_blinky %s: see https://github.com/rdpoor/mulib\r\n", BLINKY_VERSION);
    13b8:	4916      	ldr	r1, [pc, #88]	; (1414 <mulib_blinky_init+0x68>)
    13ba:	4817      	ldr	r0, [pc, #92]	; (1418 <mulib_blinky_init+0x6c>)
    13bc:	4b17      	ldr	r3, [pc, #92]	; (141c <mulib_blinky_init+0x70>)
    13be:	4798      	blx	r3

  // set up the isr queue and the scheduler
  mu_spscq_init(&s_isr_queue, s_isr_queue_items, ISR_Q_CAPACITY);
    13c0:	4d17      	ldr	r5, [pc, #92]	; (1420 <mulib_blinky_init+0x74>)
    13c2:	002e      	movs	r6, r5
    13c4:	3620      	adds	r6, #32
    13c6:	2208      	movs	r2, #8
    13c8:	0029      	movs	r1, r5
    13ca:	0030      	movs	r0, r6
    13cc:	4b15      	ldr	r3, [pc, #84]	; (1424 <mulib_blinky_init+0x78>)
    13ce:	4798      	blx	r3
  mu_sched_init(&s_sched, s_event_queue, EVENT_QUEUE_CAPACITY, &s_isr_queue);
    13d0:	0029      	movs	r1, r5
    13d2:	312c      	adds	r1, #44	; 0x2c
    13d4:	357c      	adds	r5, #124	; 0x7c
    13d6:	0033      	movs	r3, r6
    13d8:	220a      	movs	r2, #10
    13da:	0028      	movs	r0, r5
    13dc:	4c12      	ldr	r4, [pc, #72]	; (1428 <mulib_blinky_init+0x7c>)
    13de:	47a0      	blx	r4

  // initialize tasks
  led_task_init(&s_led_task, &s_led_ctx);
    13e0:	4c12      	ldr	r4, [pc, #72]	; (142c <mulib_blinky_init+0x80>)
    13e2:	0021      	movs	r1, r4
    13e4:	311c      	adds	r1, #28
    13e6:	0026      	movs	r6, r4
    13e8:	3620      	adds	r6, #32
    13ea:	0030      	movs	r0, r6
    13ec:	4b10      	ldr	r3, [pc, #64]	; (1430 <mulib_blinky_init+0x84>)
    13ee:	4798      	blx	r3
  button_task_init(&s_button_task, &s_button_ctx, &s_sched);
    13f0:	0021      	movs	r1, r4
    13f2:	3138      	adds	r1, #56	; 0x38
    13f4:	0020      	movs	r0, r4
    13f6:	3040      	adds	r0, #64	; 0x40
    13f8:	002a      	movs	r2, r5
    13fa:	4b0e      	ldr	r3, [pc, #56]	; (1434 <mulib_blinky_init+0x88>)
    13fc:	4798      	blx	r3

  // schedule the initial call to the LED task
  mu_sched_task_now(&s_sched, &s_led_task);
    13fe:	0031      	movs	r1, r6
    1400:	0028      	movs	r0, r5
    1402:	4b0d      	ldr	r3, [pc, #52]	; (1438 <mulib_blinky_init+0x8c>)
    1404:	4798      	blx	r3
}
    1406:	bd70      	pop	{r4, r5, r6, pc}
    1408:	000004cd 	.word	0x000004cd
    140c:	00002990 	.word	0x00002990
    1410:	00001a91 	.word	0x00001a91
    1414:	000029a4 	.word	0x000029a4
    1418:	000029ac 	.word	0x000029ac
    141c:	0000199d 	.word	0x0000199d
    1420:	200000e4 	.word	0x200000e4
    1424:	00000319 	.word	0x00000319
    1428:	000001c1 	.word	0x000001c1
    142c:	20000164 	.word	0x20000164
    1430:	0000151d 	.word	0x0000151d
    1434:	00001489 	.word	0x00001489
    1438:	000002ad 	.word	0x000002ad

0000143c <mulib_blinky_step>:

void mulib_blinky_step() {
    143c:	b510      	push	{r4, lr}
  // called repeatedly from main(): run the scheduler
  mu_sched_step(&s_sched);
    143e:	4802      	ldr	r0, [pc, #8]	; (1448 <mulib_blinky_step+0xc>)
    1440:	307c      	adds	r0, #124	; 0x7c
    1442:	4b02      	ldr	r3, [pc, #8]	; (144c <mulib_blinky_step+0x10>)
    1444:	4798      	blx	r3
}
    1446:	bd10      	pop	{r4, pc}
    1448:	200000e4 	.word	0x200000e4
    144c:	00000221 	.word	0x00000221

00001450 <button_task_fn>:
}

// =============================================================================
// local (static) code

static void *button_task_fn(void *ctx, void *arg) {
    1450:	b510      	push	{r4, lr}
  // button context (unused) is passed as first arg, scheduler as second.
  mu_sched_t *sched = (mu_sched_t *)arg;
  mu_time_t now = mu_sched_get_current_time(sched);
    1452:	0008      	movs	r0, r1
    1454:	4b03      	ldr	r3, [pc, #12]	; (1464 <button_task_fn+0x14>)
    1456:	4798      	blx	r3
    1458:	0001      	movs	r1, r0

  printf("button pressed at %lu\r\n", now);
    145a:	4803      	ldr	r0, [pc, #12]	; (1468 <button_task_fn+0x18>)
    145c:	4b03      	ldr	r3, [pc, #12]	; (146c <button_task_fn+0x1c>)
    145e:	4798      	blx	r3
  return NULL;
}
    1460:	2000      	movs	r0, #0
    1462:	bd10      	pop	{r4, pc}
    1464:	000001fd 	.word	0x000001fd
    1468:	000029e8 	.word	0x000029e8
    146c:	0000199d 	.word	0x0000199d

00001470 <button_cb>:

// button_cb is triggered when a button press generates an interrupt.
// From interrupt level, schedule the button task upon leaving interrupt level.
static void button_cb(void) {
    1470:	b510      	push	{r4, lr}
  mu_sched_task_from_isr(s_sched, s_button_task);
    1472:	4b03      	ldr	r3, [pc, #12]	; (1480 <button_cb+0x10>)
    1474:	6819      	ldr	r1, [r3, #0]
    1476:	6858      	ldr	r0, [r3, #4]
    1478:	4b02      	ldr	r3, [pc, #8]	; (1484 <button_cb+0x14>)
    147a:	4798      	blx	r3
}
    147c:	bd10      	pop	{r4, pc}
    147e:	46c0      	nop			; (mov r8, r8)
    1480:	200001bc 	.word	0x200001bc
    1484:	00000301 	.word	0x00000301

00001488 <button_task_init>:
                            mu_sched_t *sched) {
    1488:	b570      	push	{r4, r5, r6, lr}
    148a:	0004      	movs	r4, r0
  s_button_task = button_task;
    148c:	4b07      	ldr	r3, [pc, #28]	; (14ac <button_task_init+0x24>)
    148e:	6018      	str	r0, [r3, #0]
  s_sched = sched;
    1490:	605a      	str	r2, [r3, #4]
  ext_irq_register(PIN_PA15, button_cb);
    1492:	4907      	ldr	r1, [pc, #28]	; (14b0 <button_task_init+0x28>)
    1494:	200f      	movs	r0, #15
    1496:	4b07      	ldr	r3, [pc, #28]	; (14b4 <button_task_init+0x2c>)
    1498:	4798      	blx	r3
  mu_task_init(button_task, button_task_fn, NULL, "Button Interrupt");
    149a:	4b07      	ldr	r3, [pc, #28]	; (14b8 <button_task_init+0x30>)
    149c:	2200      	movs	r2, #0
    149e:	4907      	ldr	r1, [pc, #28]	; (14bc <button_task_init+0x34>)
    14a0:	0020      	movs	r0, r4
    14a2:	4d07      	ldr	r5, [pc, #28]	; (14c0 <button_task_init+0x38>)
    14a4:	47a8      	blx	r5
}
    14a6:	0020      	movs	r0, r4
    14a8:	bd70      	pop	{r4, r5, r6, pc}
    14aa:	46c0      	nop			; (mov r8, r8)
    14ac:	200001bc 	.word	0x200001bc
    14b0:	00001471 	.word	0x00001471
    14b4:	000009a9 	.word	0x000009a9
    14b8:	00002a00 	.word	0x00002a00
    14bc:	00001451 	.word	0x00001451
    14c0:	000003af 	.word	0x000003af

000014c4 <led_task_fn>:
}

// =============================================================================
// local (static) code

static void *led_task_fn(void *ctx, void *arg) {
    14c4:	b510      	push	{r4, lr}
    14c6:	000c      	movs	r4, r1
  // "context" is passed as the first argument, scheduler is second
  led_ctx_t *led_ctx = (led_ctx_t *)ctx;
  mu_sched_t *sched = (mu_sched_t *)arg;

  if (led_ctx->state == LED_OFF) {
    14c8:	7803      	ldrb	r3, [r0, #0]
    14ca:	2b00      	cmp	r3, #0
    14cc:	d011      	beq.n	14f2 <led_task_fn+0x2e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    14ce:	2180      	movs	r1, #128	; 0x80
    14d0:	05c9      	lsls	r1, r1, #23
    14d2:	2398      	movs	r3, #152	; 0x98
    14d4:	22c0      	movs	r2, #192	; 0xc0
    14d6:	05d2      	lsls	r2, r2, #23
    14d8:	50d1      	str	r1, [r2, r3]
    led_ctx->state = LED_ON;
    mu_sched_reschedule_in(sched, mu_time_ms_to_duration(LED_ON_TIME_MS));

  } else {
    LED_Off();
    led_ctx->state = LED_OFF;
    14da:	2300      	movs	r3, #0
    14dc:	7003      	strb	r3, [r0, #0]
    mu_sched_reschedule_in(sched, mu_time_ms_to_duration(LED_OFF_TIME_MS));
    14de:	20f0      	movs	r0, #240	; 0xf0
    14e0:	30ff      	adds	r0, #255	; 0xff
    14e2:	4b0c      	ldr	r3, [pc, #48]	; (1514 <led_task_fn+0x50>)
    14e4:	4798      	blx	r3
    14e6:	0001      	movs	r1, r0
    14e8:	0020      	movs	r0, r4
    14ea:	4b0b      	ldr	r3, [pc, #44]	; (1518 <led_task_fn+0x54>)
    14ec:	4798      	blx	r3
  }

  return NULL;
}
    14ee:	2000      	movs	r0, #0
    14f0:	bd10      	pop	{r4, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    14f2:	2180      	movs	r1, #128	; 0x80
    14f4:	05c9      	lsls	r1, r1, #23
    14f6:	3394      	adds	r3, #148	; 0x94
    14f8:	22c0      	movs	r2, #192	; 0xc0
    14fa:	05d2      	lsls	r2, r2, #23
    14fc:	50d1      	str	r1, [r2, r3]
    led_ctx->state = LED_ON;
    14fe:	3b93      	subs	r3, #147	; 0x93
    1500:	7003      	strb	r3, [r0, #0]
    mu_sched_reschedule_in(sched, mu_time_ms_to_duration(LED_ON_TIME_MS));
    1502:	2005      	movs	r0, #5
    1504:	4b03      	ldr	r3, [pc, #12]	; (1514 <led_task_fn+0x50>)
    1506:	4798      	blx	r3
    1508:	0001      	movs	r1, r0
    150a:	0020      	movs	r0, r4
    150c:	4b02      	ldr	r3, [pc, #8]	; (1518 <led_task_fn+0x54>)
    150e:	4798      	blx	r3
    1510:	e7ed      	b.n	14ee <led_task_fn+0x2a>
    1512:	46c0      	nop			; (mov r8, r8)
    1514:	00000439 	.word	0x00000439
    1518:	000002cd 	.word	0x000002cd

0000151c <led_task_init>:
mu_task_t *led_task_init(mu_task_t *led_task, led_ctx_t *led_ctx) {
    151c:	b570      	push	{r4, r5, r6, lr}
    151e:	0004      	movs	r4, r0
    1520:	000a      	movs	r2, r1
  led_ctx->state = LED_OFF;
    1522:	2300      	movs	r3, #0
    1524:	700b      	strb	r3, [r1, #0]
  mu_task_init(led_task, led_task_fn, led_ctx, "LED");
    1526:	4b03      	ldr	r3, [pc, #12]	; (1534 <led_task_init+0x18>)
    1528:	4903      	ldr	r1, [pc, #12]	; (1538 <led_task_init+0x1c>)
    152a:	4d04      	ldr	r5, [pc, #16]	; (153c <led_task_init+0x20>)
    152c:	47a8      	blx	r5
}
    152e:	0020      	movs	r0, r4
    1530:	bd70      	pop	{r4, r5, r6, pc}
    1532:	46c0      	nop			; (mov r8, r8)
    1534:	00002a14 	.word	0x00002a14
    1538:	000014c5 	.word	0x000014c5
    153c:	000003af 	.word	0x000003af

00001540 <main>:

#include <atmel_start.h>
#include "mulib_blinky.h"

int main(void)
{
    1540:	b510      	push	{r4, lr}
  /* Initializes MCU, drivers and middleware */
  atmel_start_init();
    1542:	4b03      	ldr	r3, [pc, #12]	; (1550 <main+0x10>)
    1544:	4798      	blx	r3
  mulib_blinky_init();
    1546:	4b03      	ldr	r3, [pc, #12]	; (1554 <main+0x14>)
    1548:	4798      	blx	r3

  /* Replace with your application code */
  while (1) {
    mulib_blinky_step();
    154a:	4c03      	ldr	r4, [pc, #12]	; (1558 <main+0x18>)
    154c:	47a0      	blx	r4
    154e:	e7fd      	b.n	154c <main+0xc>
    1550:	00000645 	.word	0x00000645
    1554:	000013ad 	.word	0x000013ad
    1558:	0000143d 	.word	0x0000143d

0000155c <_write>:
#include "mu_vm.h"

// ================
// support for printf()

int _write(int file, char *ptr, int len) {
    155c:	b5f0      	push	{r4, r5, r6, r7, lr}
    155e:	46c6      	mov	lr, r8
    1560:	b500      	push	{lr}
    1562:	4690      	mov	r8, r2
  // void file;
  int n = len;

  while (n-- > 0) {
    1564:	2a00      	cmp	r2, #0
    1566:	dd0c      	ble.n	1582 <_write+0x26>
    1568:	000d      	movs	r5, r1
    156a:	4441      	add	r1, r8
    156c:	000e      	movs	r6, r1
    while (!mu_vm_serial_can_write())
    156e:	4c07      	ldr	r4, [pc, #28]	; (158c <_write+0x30>)
  		;
    mu_vm_serial_write(*ptr++);
    1570:	4f07      	ldr	r7, [pc, #28]	; (1590 <_write+0x34>)
    while (!mu_vm_serial_can_write())
    1572:	47a0      	blx	r4
    1574:	2800      	cmp	r0, #0
    1576:	d0fc      	beq.n	1572 <_write+0x16>
    mu_vm_serial_write(*ptr++);
    1578:	7828      	ldrb	r0, [r5, #0]
    157a:	47b8      	blx	r7
    157c:	3501      	adds	r5, #1
  while (n-- > 0) {
    157e:	42b5      	cmp	r5, r6
    1580:	d1f7      	bne.n	1572 <_write+0x16>
  }
  return len;
}
    1582:	4640      	mov	r0, r8
    1584:	bc04      	pop	{r2}
    1586:	4690      	mov	r8, r2
    1588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    158a:	46c0      	nop			; (mov r8, r8)
    158c:	000005a5 	.word	0x000005a5
    1590:	000005b5 	.word	0x000005b5

00001594 <_read>:

int _read(int file, char *ptr, int len) {
    1594:	b5f0      	push	{r4, r5, r6, r7, lr}
    1596:	46c6      	mov	lr, r8
    1598:	b500      	push	{lr}
    159a:	4690      	mov	r8, r2
  // void file;
  int n = len;

  while (n-- > 0) {
    159c:	2a00      	cmp	r2, #0
    159e:	dd0c      	ble.n	15ba <_read+0x26>
    15a0:	000d      	movs	r5, r1
    15a2:	4441      	add	r1, r8
    15a4:	000e      	movs	r6, r1
    while (!mu_vm_serial_can_read())
    15a6:	4c07      	ldr	r4, [pc, #28]	; (15c4 <_read+0x30>)
			;
    *ptr++ = mu_vm_serial_read();
    15a8:	4f07      	ldr	r7, [pc, #28]	; (15c8 <_read+0x34>)
    while (!mu_vm_serial_can_read())
    15aa:	47a0      	blx	r4
    15ac:	2800      	cmp	r0, #0
    15ae:	d0fc      	beq.n	15aa <_read+0x16>
    *ptr++ = mu_vm_serial_read();
    15b0:	47b8      	blx	r7
    15b2:	7028      	strb	r0, [r5, #0]
    15b4:	3501      	adds	r5, #1
  while (n-- > 0) {
    15b6:	42b5      	cmp	r5, r6
    15b8:	d1f7      	bne.n	15aa <_read+0x16>
  }
  return len;
}
    15ba:	4640      	mov	r0, r8
    15bc:	bc04      	pop	{r2}
    15be:	4690      	mov	r8, r2
    15c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15c2:	46c0      	nop			; (mov r8, r8)
    15c4:	00000635 	.word	0x00000635
    15c8:	000005f5 	.word	0x000005f5

000015cc <__udivsi3>:
    15cc:	2200      	movs	r2, #0
    15ce:	0843      	lsrs	r3, r0, #1
    15d0:	428b      	cmp	r3, r1
    15d2:	d374      	bcc.n	16be <__udivsi3+0xf2>
    15d4:	0903      	lsrs	r3, r0, #4
    15d6:	428b      	cmp	r3, r1
    15d8:	d35f      	bcc.n	169a <__udivsi3+0xce>
    15da:	0a03      	lsrs	r3, r0, #8
    15dc:	428b      	cmp	r3, r1
    15de:	d344      	bcc.n	166a <__udivsi3+0x9e>
    15e0:	0b03      	lsrs	r3, r0, #12
    15e2:	428b      	cmp	r3, r1
    15e4:	d328      	bcc.n	1638 <__udivsi3+0x6c>
    15e6:	0c03      	lsrs	r3, r0, #16
    15e8:	428b      	cmp	r3, r1
    15ea:	d30d      	bcc.n	1608 <__udivsi3+0x3c>
    15ec:	22ff      	movs	r2, #255	; 0xff
    15ee:	0209      	lsls	r1, r1, #8
    15f0:	ba12      	rev	r2, r2
    15f2:	0c03      	lsrs	r3, r0, #16
    15f4:	428b      	cmp	r3, r1
    15f6:	d302      	bcc.n	15fe <__udivsi3+0x32>
    15f8:	1212      	asrs	r2, r2, #8
    15fa:	0209      	lsls	r1, r1, #8
    15fc:	d065      	beq.n	16ca <__udivsi3+0xfe>
    15fe:	0b03      	lsrs	r3, r0, #12
    1600:	428b      	cmp	r3, r1
    1602:	d319      	bcc.n	1638 <__udivsi3+0x6c>
    1604:	e000      	b.n	1608 <__udivsi3+0x3c>
    1606:	0a09      	lsrs	r1, r1, #8
    1608:	0bc3      	lsrs	r3, r0, #15
    160a:	428b      	cmp	r3, r1
    160c:	d301      	bcc.n	1612 <__udivsi3+0x46>
    160e:	03cb      	lsls	r3, r1, #15
    1610:	1ac0      	subs	r0, r0, r3
    1612:	4152      	adcs	r2, r2
    1614:	0b83      	lsrs	r3, r0, #14
    1616:	428b      	cmp	r3, r1
    1618:	d301      	bcc.n	161e <__udivsi3+0x52>
    161a:	038b      	lsls	r3, r1, #14
    161c:	1ac0      	subs	r0, r0, r3
    161e:	4152      	adcs	r2, r2
    1620:	0b43      	lsrs	r3, r0, #13
    1622:	428b      	cmp	r3, r1
    1624:	d301      	bcc.n	162a <__udivsi3+0x5e>
    1626:	034b      	lsls	r3, r1, #13
    1628:	1ac0      	subs	r0, r0, r3
    162a:	4152      	adcs	r2, r2
    162c:	0b03      	lsrs	r3, r0, #12
    162e:	428b      	cmp	r3, r1
    1630:	d301      	bcc.n	1636 <__udivsi3+0x6a>
    1632:	030b      	lsls	r3, r1, #12
    1634:	1ac0      	subs	r0, r0, r3
    1636:	4152      	adcs	r2, r2
    1638:	0ac3      	lsrs	r3, r0, #11
    163a:	428b      	cmp	r3, r1
    163c:	d301      	bcc.n	1642 <__udivsi3+0x76>
    163e:	02cb      	lsls	r3, r1, #11
    1640:	1ac0      	subs	r0, r0, r3
    1642:	4152      	adcs	r2, r2
    1644:	0a83      	lsrs	r3, r0, #10
    1646:	428b      	cmp	r3, r1
    1648:	d301      	bcc.n	164e <__udivsi3+0x82>
    164a:	028b      	lsls	r3, r1, #10
    164c:	1ac0      	subs	r0, r0, r3
    164e:	4152      	adcs	r2, r2
    1650:	0a43      	lsrs	r3, r0, #9
    1652:	428b      	cmp	r3, r1
    1654:	d301      	bcc.n	165a <__udivsi3+0x8e>
    1656:	024b      	lsls	r3, r1, #9
    1658:	1ac0      	subs	r0, r0, r3
    165a:	4152      	adcs	r2, r2
    165c:	0a03      	lsrs	r3, r0, #8
    165e:	428b      	cmp	r3, r1
    1660:	d301      	bcc.n	1666 <__udivsi3+0x9a>
    1662:	020b      	lsls	r3, r1, #8
    1664:	1ac0      	subs	r0, r0, r3
    1666:	4152      	adcs	r2, r2
    1668:	d2cd      	bcs.n	1606 <__udivsi3+0x3a>
    166a:	09c3      	lsrs	r3, r0, #7
    166c:	428b      	cmp	r3, r1
    166e:	d301      	bcc.n	1674 <__udivsi3+0xa8>
    1670:	01cb      	lsls	r3, r1, #7
    1672:	1ac0      	subs	r0, r0, r3
    1674:	4152      	adcs	r2, r2
    1676:	0983      	lsrs	r3, r0, #6
    1678:	428b      	cmp	r3, r1
    167a:	d301      	bcc.n	1680 <__udivsi3+0xb4>
    167c:	018b      	lsls	r3, r1, #6
    167e:	1ac0      	subs	r0, r0, r3
    1680:	4152      	adcs	r2, r2
    1682:	0943      	lsrs	r3, r0, #5
    1684:	428b      	cmp	r3, r1
    1686:	d301      	bcc.n	168c <__udivsi3+0xc0>
    1688:	014b      	lsls	r3, r1, #5
    168a:	1ac0      	subs	r0, r0, r3
    168c:	4152      	adcs	r2, r2
    168e:	0903      	lsrs	r3, r0, #4
    1690:	428b      	cmp	r3, r1
    1692:	d301      	bcc.n	1698 <__udivsi3+0xcc>
    1694:	010b      	lsls	r3, r1, #4
    1696:	1ac0      	subs	r0, r0, r3
    1698:	4152      	adcs	r2, r2
    169a:	08c3      	lsrs	r3, r0, #3
    169c:	428b      	cmp	r3, r1
    169e:	d301      	bcc.n	16a4 <__udivsi3+0xd8>
    16a0:	00cb      	lsls	r3, r1, #3
    16a2:	1ac0      	subs	r0, r0, r3
    16a4:	4152      	adcs	r2, r2
    16a6:	0883      	lsrs	r3, r0, #2
    16a8:	428b      	cmp	r3, r1
    16aa:	d301      	bcc.n	16b0 <__udivsi3+0xe4>
    16ac:	008b      	lsls	r3, r1, #2
    16ae:	1ac0      	subs	r0, r0, r3
    16b0:	4152      	adcs	r2, r2
    16b2:	0843      	lsrs	r3, r0, #1
    16b4:	428b      	cmp	r3, r1
    16b6:	d301      	bcc.n	16bc <__udivsi3+0xf0>
    16b8:	004b      	lsls	r3, r1, #1
    16ba:	1ac0      	subs	r0, r0, r3
    16bc:	4152      	adcs	r2, r2
    16be:	1a41      	subs	r1, r0, r1
    16c0:	d200      	bcs.n	16c4 <__udivsi3+0xf8>
    16c2:	4601      	mov	r1, r0
    16c4:	4152      	adcs	r2, r2
    16c6:	4610      	mov	r0, r2
    16c8:	4770      	bx	lr
    16ca:	e7ff      	b.n	16cc <__udivsi3+0x100>
    16cc:	b501      	push	{r0, lr}
    16ce:	2000      	movs	r0, #0
    16d0:	f000 f8f0 	bl	18b4 <__aeabi_idiv0>
    16d4:	bd02      	pop	{r1, pc}
    16d6:	46c0      	nop			; (mov r8, r8)

000016d8 <__aeabi_uidivmod>:
    16d8:	2900      	cmp	r1, #0
    16da:	d0f7      	beq.n	16cc <__udivsi3+0x100>
    16dc:	e776      	b.n	15cc <__udivsi3>
    16de:	4770      	bx	lr

000016e0 <__divsi3>:
    16e0:	4603      	mov	r3, r0
    16e2:	430b      	orrs	r3, r1
    16e4:	d47f      	bmi.n	17e6 <__divsi3+0x106>
    16e6:	2200      	movs	r2, #0
    16e8:	0843      	lsrs	r3, r0, #1
    16ea:	428b      	cmp	r3, r1
    16ec:	d374      	bcc.n	17d8 <__divsi3+0xf8>
    16ee:	0903      	lsrs	r3, r0, #4
    16f0:	428b      	cmp	r3, r1
    16f2:	d35f      	bcc.n	17b4 <__divsi3+0xd4>
    16f4:	0a03      	lsrs	r3, r0, #8
    16f6:	428b      	cmp	r3, r1
    16f8:	d344      	bcc.n	1784 <__divsi3+0xa4>
    16fa:	0b03      	lsrs	r3, r0, #12
    16fc:	428b      	cmp	r3, r1
    16fe:	d328      	bcc.n	1752 <__divsi3+0x72>
    1700:	0c03      	lsrs	r3, r0, #16
    1702:	428b      	cmp	r3, r1
    1704:	d30d      	bcc.n	1722 <__divsi3+0x42>
    1706:	22ff      	movs	r2, #255	; 0xff
    1708:	0209      	lsls	r1, r1, #8
    170a:	ba12      	rev	r2, r2
    170c:	0c03      	lsrs	r3, r0, #16
    170e:	428b      	cmp	r3, r1
    1710:	d302      	bcc.n	1718 <__divsi3+0x38>
    1712:	1212      	asrs	r2, r2, #8
    1714:	0209      	lsls	r1, r1, #8
    1716:	d065      	beq.n	17e4 <__divsi3+0x104>
    1718:	0b03      	lsrs	r3, r0, #12
    171a:	428b      	cmp	r3, r1
    171c:	d319      	bcc.n	1752 <__divsi3+0x72>
    171e:	e000      	b.n	1722 <__divsi3+0x42>
    1720:	0a09      	lsrs	r1, r1, #8
    1722:	0bc3      	lsrs	r3, r0, #15
    1724:	428b      	cmp	r3, r1
    1726:	d301      	bcc.n	172c <__divsi3+0x4c>
    1728:	03cb      	lsls	r3, r1, #15
    172a:	1ac0      	subs	r0, r0, r3
    172c:	4152      	adcs	r2, r2
    172e:	0b83      	lsrs	r3, r0, #14
    1730:	428b      	cmp	r3, r1
    1732:	d301      	bcc.n	1738 <__divsi3+0x58>
    1734:	038b      	lsls	r3, r1, #14
    1736:	1ac0      	subs	r0, r0, r3
    1738:	4152      	adcs	r2, r2
    173a:	0b43      	lsrs	r3, r0, #13
    173c:	428b      	cmp	r3, r1
    173e:	d301      	bcc.n	1744 <__divsi3+0x64>
    1740:	034b      	lsls	r3, r1, #13
    1742:	1ac0      	subs	r0, r0, r3
    1744:	4152      	adcs	r2, r2
    1746:	0b03      	lsrs	r3, r0, #12
    1748:	428b      	cmp	r3, r1
    174a:	d301      	bcc.n	1750 <__divsi3+0x70>
    174c:	030b      	lsls	r3, r1, #12
    174e:	1ac0      	subs	r0, r0, r3
    1750:	4152      	adcs	r2, r2
    1752:	0ac3      	lsrs	r3, r0, #11
    1754:	428b      	cmp	r3, r1
    1756:	d301      	bcc.n	175c <__divsi3+0x7c>
    1758:	02cb      	lsls	r3, r1, #11
    175a:	1ac0      	subs	r0, r0, r3
    175c:	4152      	adcs	r2, r2
    175e:	0a83      	lsrs	r3, r0, #10
    1760:	428b      	cmp	r3, r1
    1762:	d301      	bcc.n	1768 <__divsi3+0x88>
    1764:	028b      	lsls	r3, r1, #10
    1766:	1ac0      	subs	r0, r0, r3
    1768:	4152      	adcs	r2, r2
    176a:	0a43      	lsrs	r3, r0, #9
    176c:	428b      	cmp	r3, r1
    176e:	d301      	bcc.n	1774 <__divsi3+0x94>
    1770:	024b      	lsls	r3, r1, #9
    1772:	1ac0      	subs	r0, r0, r3
    1774:	4152      	adcs	r2, r2
    1776:	0a03      	lsrs	r3, r0, #8
    1778:	428b      	cmp	r3, r1
    177a:	d301      	bcc.n	1780 <__divsi3+0xa0>
    177c:	020b      	lsls	r3, r1, #8
    177e:	1ac0      	subs	r0, r0, r3
    1780:	4152      	adcs	r2, r2
    1782:	d2cd      	bcs.n	1720 <__divsi3+0x40>
    1784:	09c3      	lsrs	r3, r0, #7
    1786:	428b      	cmp	r3, r1
    1788:	d301      	bcc.n	178e <__divsi3+0xae>
    178a:	01cb      	lsls	r3, r1, #7
    178c:	1ac0      	subs	r0, r0, r3
    178e:	4152      	adcs	r2, r2
    1790:	0983      	lsrs	r3, r0, #6
    1792:	428b      	cmp	r3, r1
    1794:	d301      	bcc.n	179a <__divsi3+0xba>
    1796:	018b      	lsls	r3, r1, #6
    1798:	1ac0      	subs	r0, r0, r3
    179a:	4152      	adcs	r2, r2
    179c:	0943      	lsrs	r3, r0, #5
    179e:	428b      	cmp	r3, r1
    17a0:	d301      	bcc.n	17a6 <__divsi3+0xc6>
    17a2:	014b      	lsls	r3, r1, #5
    17a4:	1ac0      	subs	r0, r0, r3
    17a6:	4152      	adcs	r2, r2
    17a8:	0903      	lsrs	r3, r0, #4
    17aa:	428b      	cmp	r3, r1
    17ac:	d301      	bcc.n	17b2 <__divsi3+0xd2>
    17ae:	010b      	lsls	r3, r1, #4
    17b0:	1ac0      	subs	r0, r0, r3
    17b2:	4152      	adcs	r2, r2
    17b4:	08c3      	lsrs	r3, r0, #3
    17b6:	428b      	cmp	r3, r1
    17b8:	d301      	bcc.n	17be <__divsi3+0xde>
    17ba:	00cb      	lsls	r3, r1, #3
    17bc:	1ac0      	subs	r0, r0, r3
    17be:	4152      	adcs	r2, r2
    17c0:	0883      	lsrs	r3, r0, #2
    17c2:	428b      	cmp	r3, r1
    17c4:	d301      	bcc.n	17ca <__divsi3+0xea>
    17c6:	008b      	lsls	r3, r1, #2
    17c8:	1ac0      	subs	r0, r0, r3
    17ca:	4152      	adcs	r2, r2
    17cc:	0843      	lsrs	r3, r0, #1
    17ce:	428b      	cmp	r3, r1
    17d0:	d301      	bcc.n	17d6 <__divsi3+0xf6>
    17d2:	004b      	lsls	r3, r1, #1
    17d4:	1ac0      	subs	r0, r0, r3
    17d6:	4152      	adcs	r2, r2
    17d8:	1a41      	subs	r1, r0, r1
    17da:	d200      	bcs.n	17de <__divsi3+0xfe>
    17dc:	4601      	mov	r1, r0
    17de:	4152      	adcs	r2, r2
    17e0:	4610      	mov	r0, r2
    17e2:	4770      	bx	lr
    17e4:	e05d      	b.n	18a2 <__divsi3+0x1c2>
    17e6:	0fca      	lsrs	r2, r1, #31
    17e8:	d000      	beq.n	17ec <__divsi3+0x10c>
    17ea:	4249      	negs	r1, r1
    17ec:	1003      	asrs	r3, r0, #32
    17ee:	d300      	bcc.n	17f2 <__divsi3+0x112>
    17f0:	4240      	negs	r0, r0
    17f2:	4053      	eors	r3, r2
    17f4:	2200      	movs	r2, #0
    17f6:	469c      	mov	ip, r3
    17f8:	0903      	lsrs	r3, r0, #4
    17fa:	428b      	cmp	r3, r1
    17fc:	d32d      	bcc.n	185a <__divsi3+0x17a>
    17fe:	0a03      	lsrs	r3, r0, #8
    1800:	428b      	cmp	r3, r1
    1802:	d312      	bcc.n	182a <__divsi3+0x14a>
    1804:	22fc      	movs	r2, #252	; 0xfc
    1806:	0189      	lsls	r1, r1, #6
    1808:	ba12      	rev	r2, r2
    180a:	0a03      	lsrs	r3, r0, #8
    180c:	428b      	cmp	r3, r1
    180e:	d30c      	bcc.n	182a <__divsi3+0x14a>
    1810:	0189      	lsls	r1, r1, #6
    1812:	1192      	asrs	r2, r2, #6
    1814:	428b      	cmp	r3, r1
    1816:	d308      	bcc.n	182a <__divsi3+0x14a>
    1818:	0189      	lsls	r1, r1, #6
    181a:	1192      	asrs	r2, r2, #6
    181c:	428b      	cmp	r3, r1
    181e:	d304      	bcc.n	182a <__divsi3+0x14a>
    1820:	0189      	lsls	r1, r1, #6
    1822:	d03a      	beq.n	189a <__divsi3+0x1ba>
    1824:	1192      	asrs	r2, r2, #6
    1826:	e000      	b.n	182a <__divsi3+0x14a>
    1828:	0989      	lsrs	r1, r1, #6
    182a:	09c3      	lsrs	r3, r0, #7
    182c:	428b      	cmp	r3, r1
    182e:	d301      	bcc.n	1834 <__divsi3+0x154>
    1830:	01cb      	lsls	r3, r1, #7
    1832:	1ac0      	subs	r0, r0, r3
    1834:	4152      	adcs	r2, r2
    1836:	0983      	lsrs	r3, r0, #6
    1838:	428b      	cmp	r3, r1
    183a:	d301      	bcc.n	1840 <__divsi3+0x160>
    183c:	018b      	lsls	r3, r1, #6
    183e:	1ac0      	subs	r0, r0, r3
    1840:	4152      	adcs	r2, r2
    1842:	0943      	lsrs	r3, r0, #5
    1844:	428b      	cmp	r3, r1
    1846:	d301      	bcc.n	184c <__divsi3+0x16c>
    1848:	014b      	lsls	r3, r1, #5
    184a:	1ac0      	subs	r0, r0, r3
    184c:	4152      	adcs	r2, r2
    184e:	0903      	lsrs	r3, r0, #4
    1850:	428b      	cmp	r3, r1
    1852:	d301      	bcc.n	1858 <__divsi3+0x178>
    1854:	010b      	lsls	r3, r1, #4
    1856:	1ac0      	subs	r0, r0, r3
    1858:	4152      	adcs	r2, r2
    185a:	08c3      	lsrs	r3, r0, #3
    185c:	428b      	cmp	r3, r1
    185e:	d301      	bcc.n	1864 <__divsi3+0x184>
    1860:	00cb      	lsls	r3, r1, #3
    1862:	1ac0      	subs	r0, r0, r3
    1864:	4152      	adcs	r2, r2
    1866:	0883      	lsrs	r3, r0, #2
    1868:	428b      	cmp	r3, r1
    186a:	d301      	bcc.n	1870 <__divsi3+0x190>
    186c:	008b      	lsls	r3, r1, #2
    186e:	1ac0      	subs	r0, r0, r3
    1870:	4152      	adcs	r2, r2
    1872:	d2d9      	bcs.n	1828 <__divsi3+0x148>
    1874:	0843      	lsrs	r3, r0, #1
    1876:	428b      	cmp	r3, r1
    1878:	d301      	bcc.n	187e <__divsi3+0x19e>
    187a:	004b      	lsls	r3, r1, #1
    187c:	1ac0      	subs	r0, r0, r3
    187e:	4152      	adcs	r2, r2
    1880:	1a41      	subs	r1, r0, r1
    1882:	d200      	bcs.n	1886 <__divsi3+0x1a6>
    1884:	4601      	mov	r1, r0
    1886:	4663      	mov	r3, ip
    1888:	4152      	adcs	r2, r2
    188a:	105b      	asrs	r3, r3, #1
    188c:	4610      	mov	r0, r2
    188e:	d301      	bcc.n	1894 <__divsi3+0x1b4>
    1890:	4240      	negs	r0, r0
    1892:	2b00      	cmp	r3, #0
    1894:	d500      	bpl.n	1898 <__divsi3+0x1b8>
    1896:	4249      	negs	r1, r1
    1898:	4770      	bx	lr
    189a:	4663      	mov	r3, ip
    189c:	105b      	asrs	r3, r3, #1
    189e:	d300      	bcc.n	18a2 <__divsi3+0x1c2>
    18a0:	4240      	negs	r0, r0
    18a2:	b501      	push	{r0, lr}
    18a4:	2000      	movs	r0, #0
    18a6:	f000 f805 	bl	18b4 <__aeabi_idiv0>
    18aa:	bd02      	pop	{r1, pc}

000018ac <__aeabi_idivmod>:
    18ac:	2900      	cmp	r1, #0
    18ae:	d0f8      	beq.n	18a2 <__divsi3+0x1c2>
    18b0:	e716      	b.n	16e0 <__divsi3>
    18b2:	4770      	bx	lr

000018b4 <__aeabi_idiv0>:
    18b4:	4770      	bx	lr
    18b6:	46c0      	nop			; (mov r8, r8)

000018b8 <__ffssi2>:
    18b8:	b510      	push	{r4, lr}
    18ba:	2300      	movs	r3, #0
    18bc:	2800      	cmp	r0, #0
    18be:	d002      	beq.n	18c6 <__ffssi2+0xe>
    18c0:	f000 f804 	bl	18cc <__ctzsi2>
    18c4:	1c43      	adds	r3, r0, #1
    18c6:	0018      	movs	r0, r3
    18c8:	bd10      	pop	{r4, pc}
    18ca:	46c0      	nop			; (mov r8, r8)

000018cc <__ctzsi2>:
    18cc:	4241      	negs	r1, r0
    18ce:	4008      	ands	r0, r1
    18d0:	211c      	movs	r1, #28
    18d2:	2301      	movs	r3, #1
    18d4:	041b      	lsls	r3, r3, #16
    18d6:	4298      	cmp	r0, r3
    18d8:	d301      	bcc.n	18de <__ctzsi2+0x12>
    18da:	0c00      	lsrs	r0, r0, #16
    18dc:	3910      	subs	r1, #16
    18de:	0a1b      	lsrs	r3, r3, #8
    18e0:	4298      	cmp	r0, r3
    18e2:	d301      	bcc.n	18e8 <__ctzsi2+0x1c>
    18e4:	0a00      	lsrs	r0, r0, #8
    18e6:	3908      	subs	r1, #8
    18e8:	091b      	lsrs	r3, r3, #4
    18ea:	4298      	cmp	r0, r3
    18ec:	d301      	bcc.n	18f2 <__ctzsi2+0x26>
    18ee:	0900      	lsrs	r0, r0, #4
    18f0:	3904      	subs	r1, #4
    18f2:	a202      	add	r2, pc, #8	; (adr r2, 18fc <__ctzsi2+0x30>)
    18f4:	5c10      	ldrb	r0, [r2, r0]
    18f6:	1a40      	subs	r0, r0, r1
    18f8:	4770      	bx	lr
    18fa:	46c0      	nop			; (mov r8, r8)
    18fc:	1d1d1c1b 	.word	0x1d1d1c1b
    1900:	1e1e1e1e 	.word	0x1e1e1e1e
    1904:	1f1f1f1f 	.word	0x1f1f1f1f
    1908:	1f1f1f1f 	.word	0x1f1f1f1f

0000190c <__libc_init_array>:
    190c:	b570      	push	{r4, r5, r6, lr}
    190e:	2600      	movs	r6, #0
    1910:	4d0c      	ldr	r5, [pc, #48]	; (1944 <__libc_init_array+0x38>)
    1912:	4c0d      	ldr	r4, [pc, #52]	; (1948 <__libc_init_array+0x3c>)
    1914:	1b64      	subs	r4, r4, r5
    1916:	10a4      	asrs	r4, r4, #2
    1918:	42a6      	cmp	r6, r4
    191a:	d109      	bne.n	1930 <__libc_init_array+0x24>
    191c:	2600      	movs	r6, #0
    191e:	f001 f8c7 	bl	2ab0 <_init>
    1922:	4d0a      	ldr	r5, [pc, #40]	; (194c <__libc_init_array+0x40>)
    1924:	4c0a      	ldr	r4, [pc, #40]	; (1950 <__libc_init_array+0x44>)
    1926:	1b64      	subs	r4, r4, r5
    1928:	10a4      	asrs	r4, r4, #2
    192a:	42a6      	cmp	r6, r4
    192c:	d105      	bne.n	193a <__libc_init_array+0x2e>
    192e:	bd70      	pop	{r4, r5, r6, pc}
    1930:	00b3      	lsls	r3, r6, #2
    1932:	58eb      	ldr	r3, [r5, r3]
    1934:	4798      	blx	r3
    1936:	3601      	adds	r6, #1
    1938:	e7ee      	b.n	1918 <__libc_init_array+0xc>
    193a:	00b3      	lsls	r3, r6, #2
    193c:	58eb      	ldr	r3, [r5, r3]
    193e:	4798      	blx	r3
    1940:	3601      	adds	r6, #1
    1942:	e7f2      	b.n	192a <__libc_init_array+0x1e>
    1944:	00002abc 	.word	0x00002abc
    1948:	00002abc 	.word	0x00002abc
    194c:	00002abc 	.word	0x00002abc
    1950:	00002ac0 	.word	0x00002ac0

00001954 <memcpy>:
    1954:	2300      	movs	r3, #0
    1956:	b510      	push	{r4, lr}
    1958:	429a      	cmp	r2, r3
    195a:	d100      	bne.n	195e <memcpy+0xa>
    195c:	bd10      	pop	{r4, pc}
    195e:	5ccc      	ldrb	r4, [r1, r3]
    1960:	54c4      	strb	r4, [r0, r3]
    1962:	3301      	adds	r3, #1
    1964:	e7f8      	b.n	1958 <memcpy+0x4>

00001966 <memmove>:
    1966:	b510      	push	{r4, lr}
    1968:	4288      	cmp	r0, r1
    196a:	d902      	bls.n	1972 <memmove+0xc>
    196c:	188b      	adds	r3, r1, r2
    196e:	4298      	cmp	r0, r3
    1970:	d308      	bcc.n	1984 <memmove+0x1e>
    1972:	2300      	movs	r3, #0
    1974:	429a      	cmp	r2, r3
    1976:	d007      	beq.n	1988 <memmove+0x22>
    1978:	5ccc      	ldrb	r4, [r1, r3]
    197a:	54c4      	strb	r4, [r0, r3]
    197c:	3301      	adds	r3, #1
    197e:	e7f9      	b.n	1974 <memmove+0xe>
    1980:	5c8b      	ldrb	r3, [r1, r2]
    1982:	5483      	strb	r3, [r0, r2]
    1984:	3a01      	subs	r2, #1
    1986:	d2fb      	bcs.n	1980 <memmove+0x1a>
    1988:	bd10      	pop	{r4, pc}

0000198a <memset>:
    198a:	0003      	movs	r3, r0
    198c:	1882      	adds	r2, r0, r2
    198e:	4293      	cmp	r3, r2
    1990:	d100      	bne.n	1994 <memset+0xa>
    1992:	4770      	bx	lr
    1994:	7019      	strb	r1, [r3, #0]
    1996:	3301      	adds	r3, #1
    1998:	e7f9      	b.n	198e <memset+0x4>
	...

0000199c <iprintf>:
    199c:	b40f      	push	{r0, r1, r2, r3}
    199e:	4b0b      	ldr	r3, [pc, #44]	; (19cc <iprintf+0x30>)
    19a0:	b513      	push	{r0, r1, r4, lr}
    19a2:	681c      	ldr	r4, [r3, #0]
    19a4:	2c00      	cmp	r4, #0
    19a6:	d005      	beq.n	19b4 <iprintf+0x18>
    19a8:	69a3      	ldr	r3, [r4, #24]
    19aa:	2b00      	cmp	r3, #0
    19ac:	d102      	bne.n	19b4 <iprintf+0x18>
    19ae:	0020      	movs	r0, r4
    19b0:	f000 fa3c 	bl	1e2c <__sinit>
    19b4:	ab05      	add	r3, sp, #20
    19b6:	9a04      	ldr	r2, [sp, #16]
    19b8:	68a1      	ldr	r1, [r4, #8]
    19ba:	0020      	movs	r0, r4
    19bc:	9301      	str	r3, [sp, #4]
    19be:	f000 fc07 	bl	21d0 <_vfiprintf_r>
    19c2:	bc16      	pop	{r1, r2, r4}
    19c4:	bc08      	pop	{r3}
    19c6:	b004      	add	sp, #16
    19c8:	4718      	bx	r3
    19ca:	46c0      	nop			; (mov r8, r8)
    19cc:	20000000 	.word	0x20000000

000019d0 <_puts_r>:
    19d0:	b570      	push	{r4, r5, r6, lr}
    19d2:	0005      	movs	r5, r0
    19d4:	000e      	movs	r6, r1
    19d6:	2800      	cmp	r0, #0
    19d8:	d004      	beq.n	19e4 <_puts_r+0x14>
    19da:	6983      	ldr	r3, [r0, #24]
    19dc:	2b00      	cmp	r3, #0
    19de:	d101      	bne.n	19e4 <_puts_r+0x14>
    19e0:	f000 fa24 	bl	1e2c <__sinit>
    19e4:	69ab      	ldr	r3, [r5, #24]
    19e6:	68ac      	ldr	r4, [r5, #8]
    19e8:	2b00      	cmp	r3, #0
    19ea:	d102      	bne.n	19f2 <_puts_r+0x22>
    19ec:	0028      	movs	r0, r5
    19ee:	f000 fa1d 	bl	1e2c <__sinit>
    19f2:	4b24      	ldr	r3, [pc, #144]	; (1a84 <_puts_r+0xb4>)
    19f4:	429c      	cmp	r4, r3
    19f6:	d10f      	bne.n	1a18 <_puts_r+0x48>
    19f8:	686c      	ldr	r4, [r5, #4]
    19fa:	89a3      	ldrh	r3, [r4, #12]
    19fc:	071b      	lsls	r3, r3, #28
    19fe:	d502      	bpl.n	1a06 <_puts_r+0x36>
    1a00:	6923      	ldr	r3, [r4, #16]
    1a02:	2b00      	cmp	r3, #0
    1a04:	d120      	bne.n	1a48 <_puts_r+0x78>
    1a06:	0021      	movs	r1, r4
    1a08:	0028      	movs	r0, r5
    1a0a:	f000 f8a1 	bl	1b50 <__swsetup_r>
    1a0e:	2800      	cmp	r0, #0
    1a10:	d01a      	beq.n	1a48 <_puts_r+0x78>
    1a12:	2001      	movs	r0, #1
    1a14:	4240      	negs	r0, r0
    1a16:	bd70      	pop	{r4, r5, r6, pc}
    1a18:	4b1b      	ldr	r3, [pc, #108]	; (1a88 <_puts_r+0xb8>)
    1a1a:	429c      	cmp	r4, r3
    1a1c:	d101      	bne.n	1a22 <_puts_r+0x52>
    1a1e:	68ac      	ldr	r4, [r5, #8]
    1a20:	e7eb      	b.n	19fa <_puts_r+0x2a>
    1a22:	4b1a      	ldr	r3, [pc, #104]	; (1a8c <_puts_r+0xbc>)
    1a24:	429c      	cmp	r4, r3
    1a26:	d1e8      	bne.n	19fa <_puts_r+0x2a>
    1a28:	68ec      	ldr	r4, [r5, #12]
    1a2a:	e7e6      	b.n	19fa <_puts_r+0x2a>
    1a2c:	3b01      	subs	r3, #1
    1a2e:	3601      	adds	r6, #1
    1a30:	60a3      	str	r3, [r4, #8]
    1a32:	2b00      	cmp	r3, #0
    1a34:	da04      	bge.n	1a40 <_puts_r+0x70>
    1a36:	69a2      	ldr	r2, [r4, #24]
    1a38:	4293      	cmp	r3, r2
    1a3a:	db16      	blt.n	1a6a <_puts_r+0x9a>
    1a3c:	290a      	cmp	r1, #10
    1a3e:	d014      	beq.n	1a6a <_puts_r+0x9a>
    1a40:	6823      	ldr	r3, [r4, #0]
    1a42:	1c5a      	adds	r2, r3, #1
    1a44:	6022      	str	r2, [r4, #0]
    1a46:	7019      	strb	r1, [r3, #0]
    1a48:	7831      	ldrb	r1, [r6, #0]
    1a4a:	68a3      	ldr	r3, [r4, #8]
    1a4c:	2900      	cmp	r1, #0
    1a4e:	d1ed      	bne.n	1a2c <_puts_r+0x5c>
    1a50:	3b01      	subs	r3, #1
    1a52:	60a3      	str	r3, [r4, #8]
    1a54:	2b00      	cmp	r3, #0
    1a56:	da0f      	bge.n	1a78 <_puts_r+0xa8>
    1a58:	0022      	movs	r2, r4
    1a5a:	310a      	adds	r1, #10
    1a5c:	0028      	movs	r0, r5
    1a5e:	f000 f821 	bl	1aa4 <__swbuf_r>
    1a62:	1c43      	adds	r3, r0, #1
    1a64:	d0d5      	beq.n	1a12 <_puts_r+0x42>
    1a66:	200a      	movs	r0, #10
    1a68:	e7d5      	b.n	1a16 <_puts_r+0x46>
    1a6a:	0022      	movs	r2, r4
    1a6c:	0028      	movs	r0, r5
    1a6e:	f000 f819 	bl	1aa4 <__swbuf_r>
    1a72:	1c43      	adds	r3, r0, #1
    1a74:	d1e8      	bne.n	1a48 <_puts_r+0x78>
    1a76:	e7cc      	b.n	1a12 <_puts_r+0x42>
    1a78:	200a      	movs	r0, #10
    1a7a:	6823      	ldr	r3, [r4, #0]
    1a7c:	1c5a      	adds	r2, r3, #1
    1a7e:	6022      	str	r2, [r4, #0]
    1a80:	7018      	strb	r0, [r3, #0]
    1a82:	e7c8      	b.n	1a16 <_puts_r+0x46>
    1a84:	00002a3c 	.word	0x00002a3c
    1a88:	00002a5c 	.word	0x00002a5c
    1a8c:	00002a1c 	.word	0x00002a1c

00001a90 <puts>:
    1a90:	b510      	push	{r4, lr}
    1a92:	4b03      	ldr	r3, [pc, #12]	; (1aa0 <puts+0x10>)
    1a94:	0001      	movs	r1, r0
    1a96:	6818      	ldr	r0, [r3, #0]
    1a98:	f7ff ff9a 	bl	19d0 <_puts_r>
    1a9c:	bd10      	pop	{r4, pc}
    1a9e:	46c0      	nop			; (mov r8, r8)
    1aa0:	20000000 	.word	0x20000000

00001aa4 <__swbuf_r>:
    1aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1aa6:	0005      	movs	r5, r0
    1aa8:	000e      	movs	r6, r1
    1aaa:	0014      	movs	r4, r2
    1aac:	2800      	cmp	r0, #0
    1aae:	d004      	beq.n	1aba <__swbuf_r+0x16>
    1ab0:	6983      	ldr	r3, [r0, #24]
    1ab2:	2b00      	cmp	r3, #0
    1ab4:	d101      	bne.n	1aba <__swbuf_r+0x16>
    1ab6:	f000 f9b9 	bl	1e2c <__sinit>
    1aba:	4b22      	ldr	r3, [pc, #136]	; (1b44 <__swbuf_r+0xa0>)
    1abc:	429c      	cmp	r4, r3
    1abe:	d12d      	bne.n	1b1c <__swbuf_r+0x78>
    1ac0:	686c      	ldr	r4, [r5, #4]
    1ac2:	69a3      	ldr	r3, [r4, #24]
    1ac4:	60a3      	str	r3, [r4, #8]
    1ac6:	89a3      	ldrh	r3, [r4, #12]
    1ac8:	071b      	lsls	r3, r3, #28
    1aca:	d531      	bpl.n	1b30 <__swbuf_r+0x8c>
    1acc:	6923      	ldr	r3, [r4, #16]
    1ace:	2b00      	cmp	r3, #0
    1ad0:	d02e      	beq.n	1b30 <__swbuf_r+0x8c>
    1ad2:	6823      	ldr	r3, [r4, #0]
    1ad4:	6922      	ldr	r2, [r4, #16]
    1ad6:	b2f7      	uxtb	r7, r6
    1ad8:	1a98      	subs	r0, r3, r2
    1ada:	6963      	ldr	r3, [r4, #20]
    1adc:	b2f6      	uxtb	r6, r6
    1ade:	4298      	cmp	r0, r3
    1ae0:	db05      	blt.n	1aee <__swbuf_r+0x4a>
    1ae2:	0021      	movs	r1, r4
    1ae4:	0028      	movs	r0, r5
    1ae6:	f000 f933 	bl	1d50 <_fflush_r>
    1aea:	2800      	cmp	r0, #0
    1aec:	d126      	bne.n	1b3c <__swbuf_r+0x98>
    1aee:	68a3      	ldr	r3, [r4, #8]
    1af0:	3001      	adds	r0, #1
    1af2:	3b01      	subs	r3, #1
    1af4:	60a3      	str	r3, [r4, #8]
    1af6:	6823      	ldr	r3, [r4, #0]
    1af8:	1c5a      	adds	r2, r3, #1
    1afa:	6022      	str	r2, [r4, #0]
    1afc:	701f      	strb	r7, [r3, #0]
    1afe:	6963      	ldr	r3, [r4, #20]
    1b00:	4298      	cmp	r0, r3
    1b02:	d004      	beq.n	1b0e <__swbuf_r+0x6a>
    1b04:	89a3      	ldrh	r3, [r4, #12]
    1b06:	07db      	lsls	r3, r3, #31
    1b08:	d51a      	bpl.n	1b40 <__swbuf_r+0x9c>
    1b0a:	2e0a      	cmp	r6, #10
    1b0c:	d118      	bne.n	1b40 <__swbuf_r+0x9c>
    1b0e:	0021      	movs	r1, r4
    1b10:	0028      	movs	r0, r5
    1b12:	f000 f91d 	bl	1d50 <_fflush_r>
    1b16:	2800      	cmp	r0, #0
    1b18:	d012      	beq.n	1b40 <__swbuf_r+0x9c>
    1b1a:	e00f      	b.n	1b3c <__swbuf_r+0x98>
    1b1c:	4b0a      	ldr	r3, [pc, #40]	; (1b48 <__swbuf_r+0xa4>)
    1b1e:	429c      	cmp	r4, r3
    1b20:	d101      	bne.n	1b26 <__swbuf_r+0x82>
    1b22:	68ac      	ldr	r4, [r5, #8]
    1b24:	e7cd      	b.n	1ac2 <__swbuf_r+0x1e>
    1b26:	4b09      	ldr	r3, [pc, #36]	; (1b4c <__swbuf_r+0xa8>)
    1b28:	429c      	cmp	r4, r3
    1b2a:	d1ca      	bne.n	1ac2 <__swbuf_r+0x1e>
    1b2c:	68ec      	ldr	r4, [r5, #12]
    1b2e:	e7c8      	b.n	1ac2 <__swbuf_r+0x1e>
    1b30:	0021      	movs	r1, r4
    1b32:	0028      	movs	r0, r5
    1b34:	f000 f80c 	bl	1b50 <__swsetup_r>
    1b38:	2800      	cmp	r0, #0
    1b3a:	d0ca      	beq.n	1ad2 <__swbuf_r+0x2e>
    1b3c:	2601      	movs	r6, #1
    1b3e:	4276      	negs	r6, r6
    1b40:	0030      	movs	r0, r6
    1b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b44:	00002a3c 	.word	0x00002a3c
    1b48:	00002a5c 	.word	0x00002a5c
    1b4c:	00002a1c 	.word	0x00002a1c

00001b50 <__swsetup_r>:
    1b50:	4b36      	ldr	r3, [pc, #216]	; (1c2c <__swsetup_r+0xdc>)
    1b52:	b570      	push	{r4, r5, r6, lr}
    1b54:	681d      	ldr	r5, [r3, #0]
    1b56:	0006      	movs	r6, r0
    1b58:	000c      	movs	r4, r1
    1b5a:	2d00      	cmp	r5, #0
    1b5c:	d005      	beq.n	1b6a <__swsetup_r+0x1a>
    1b5e:	69ab      	ldr	r3, [r5, #24]
    1b60:	2b00      	cmp	r3, #0
    1b62:	d102      	bne.n	1b6a <__swsetup_r+0x1a>
    1b64:	0028      	movs	r0, r5
    1b66:	f000 f961 	bl	1e2c <__sinit>
    1b6a:	4b31      	ldr	r3, [pc, #196]	; (1c30 <__swsetup_r+0xe0>)
    1b6c:	429c      	cmp	r4, r3
    1b6e:	d10f      	bne.n	1b90 <__swsetup_r+0x40>
    1b70:	686c      	ldr	r4, [r5, #4]
    1b72:	230c      	movs	r3, #12
    1b74:	5ee2      	ldrsh	r2, [r4, r3]
    1b76:	b293      	uxth	r3, r2
    1b78:	0719      	lsls	r1, r3, #28
    1b7a:	d42d      	bmi.n	1bd8 <__swsetup_r+0x88>
    1b7c:	06d9      	lsls	r1, r3, #27
    1b7e:	d411      	bmi.n	1ba4 <__swsetup_r+0x54>
    1b80:	2309      	movs	r3, #9
    1b82:	2001      	movs	r0, #1
    1b84:	6033      	str	r3, [r6, #0]
    1b86:	3337      	adds	r3, #55	; 0x37
    1b88:	4313      	orrs	r3, r2
    1b8a:	81a3      	strh	r3, [r4, #12]
    1b8c:	4240      	negs	r0, r0
    1b8e:	bd70      	pop	{r4, r5, r6, pc}
    1b90:	4b28      	ldr	r3, [pc, #160]	; (1c34 <__swsetup_r+0xe4>)
    1b92:	429c      	cmp	r4, r3
    1b94:	d101      	bne.n	1b9a <__swsetup_r+0x4a>
    1b96:	68ac      	ldr	r4, [r5, #8]
    1b98:	e7eb      	b.n	1b72 <__swsetup_r+0x22>
    1b9a:	4b27      	ldr	r3, [pc, #156]	; (1c38 <__swsetup_r+0xe8>)
    1b9c:	429c      	cmp	r4, r3
    1b9e:	d1e8      	bne.n	1b72 <__swsetup_r+0x22>
    1ba0:	68ec      	ldr	r4, [r5, #12]
    1ba2:	e7e6      	b.n	1b72 <__swsetup_r+0x22>
    1ba4:	075b      	lsls	r3, r3, #29
    1ba6:	d513      	bpl.n	1bd0 <__swsetup_r+0x80>
    1ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1baa:	2900      	cmp	r1, #0
    1bac:	d008      	beq.n	1bc0 <__swsetup_r+0x70>
    1bae:	0023      	movs	r3, r4
    1bb0:	3344      	adds	r3, #68	; 0x44
    1bb2:	4299      	cmp	r1, r3
    1bb4:	d002      	beq.n	1bbc <__swsetup_r+0x6c>
    1bb6:	0030      	movs	r0, r6
    1bb8:	f000 fa3a 	bl	2030 <_free_r>
    1bbc:	2300      	movs	r3, #0
    1bbe:	6363      	str	r3, [r4, #52]	; 0x34
    1bc0:	2224      	movs	r2, #36	; 0x24
    1bc2:	89a3      	ldrh	r3, [r4, #12]
    1bc4:	4393      	bics	r3, r2
    1bc6:	81a3      	strh	r3, [r4, #12]
    1bc8:	2300      	movs	r3, #0
    1bca:	6063      	str	r3, [r4, #4]
    1bcc:	6923      	ldr	r3, [r4, #16]
    1bce:	6023      	str	r3, [r4, #0]
    1bd0:	2308      	movs	r3, #8
    1bd2:	89a2      	ldrh	r2, [r4, #12]
    1bd4:	4313      	orrs	r3, r2
    1bd6:	81a3      	strh	r3, [r4, #12]
    1bd8:	6923      	ldr	r3, [r4, #16]
    1bda:	2b00      	cmp	r3, #0
    1bdc:	d10b      	bne.n	1bf6 <__swsetup_r+0xa6>
    1bde:	21a0      	movs	r1, #160	; 0xa0
    1be0:	2280      	movs	r2, #128	; 0x80
    1be2:	89a3      	ldrh	r3, [r4, #12]
    1be4:	0089      	lsls	r1, r1, #2
    1be6:	0092      	lsls	r2, r2, #2
    1be8:	400b      	ands	r3, r1
    1bea:	4293      	cmp	r3, r2
    1bec:	d003      	beq.n	1bf6 <__swsetup_r+0xa6>
    1bee:	0021      	movs	r1, r4
    1bf0:	0030      	movs	r0, r6
    1bf2:	f000 f9d9 	bl	1fa8 <__smakebuf_r>
    1bf6:	2301      	movs	r3, #1
    1bf8:	89a2      	ldrh	r2, [r4, #12]
    1bfa:	4013      	ands	r3, r2
    1bfc:	d011      	beq.n	1c22 <__swsetup_r+0xd2>
    1bfe:	2300      	movs	r3, #0
    1c00:	60a3      	str	r3, [r4, #8]
    1c02:	6963      	ldr	r3, [r4, #20]
    1c04:	425b      	negs	r3, r3
    1c06:	61a3      	str	r3, [r4, #24]
    1c08:	2000      	movs	r0, #0
    1c0a:	6923      	ldr	r3, [r4, #16]
    1c0c:	4283      	cmp	r3, r0
    1c0e:	d1be      	bne.n	1b8e <__swsetup_r+0x3e>
    1c10:	230c      	movs	r3, #12
    1c12:	5ee2      	ldrsh	r2, [r4, r3]
    1c14:	0613      	lsls	r3, r2, #24
    1c16:	d5ba      	bpl.n	1b8e <__swsetup_r+0x3e>
    1c18:	2340      	movs	r3, #64	; 0x40
    1c1a:	4313      	orrs	r3, r2
    1c1c:	81a3      	strh	r3, [r4, #12]
    1c1e:	3801      	subs	r0, #1
    1c20:	e7b5      	b.n	1b8e <__swsetup_r+0x3e>
    1c22:	0792      	lsls	r2, r2, #30
    1c24:	d400      	bmi.n	1c28 <__swsetup_r+0xd8>
    1c26:	6963      	ldr	r3, [r4, #20]
    1c28:	60a3      	str	r3, [r4, #8]
    1c2a:	e7ed      	b.n	1c08 <__swsetup_r+0xb8>
    1c2c:	20000000 	.word	0x20000000
    1c30:	00002a3c 	.word	0x00002a3c
    1c34:	00002a5c 	.word	0x00002a5c
    1c38:	00002a1c 	.word	0x00002a1c

00001c3c <__sflush_r>:
    1c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1c3e:	898a      	ldrh	r2, [r1, #12]
    1c40:	0005      	movs	r5, r0
    1c42:	000c      	movs	r4, r1
    1c44:	0713      	lsls	r3, r2, #28
    1c46:	d460      	bmi.n	1d0a <__sflush_r+0xce>
    1c48:	684b      	ldr	r3, [r1, #4]
    1c4a:	2b00      	cmp	r3, #0
    1c4c:	dc04      	bgt.n	1c58 <__sflush_r+0x1c>
    1c4e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1c50:	2b00      	cmp	r3, #0
    1c52:	dc01      	bgt.n	1c58 <__sflush_r+0x1c>
    1c54:	2000      	movs	r0, #0
    1c56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1c58:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1c5a:	2f00      	cmp	r7, #0
    1c5c:	d0fa      	beq.n	1c54 <__sflush_r+0x18>
    1c5e:	2300      	movs	r3, #0
    1c60:	682e      	ldr	r6, [r5, #0]
    1c62:	602b      	str	r3, [r5, #0]
    1c64:	2380      	movs	r3, #128	; 0x80
    1c66:	015b      	lsls	r3, r3, #5
    1c68:	401a      	ands	r2, r3
    1c6a:	d034      	beq.n	1cd6 <__sflush_r+0x9a>
    1c6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1c6e:	89a3      	ldrh	r3, [r4, #12]
    1c70:	075b      	lsls	r3, r3, #29
    1c72:	d506      	bpl.n	1c82 <__sflush_r+0x46>
    1c74:	6863      	ldr	r3, [r4, #4]
    1c76:	1ac0      	subs	r0, r0, r3
    1c78:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d001      	beq.n	1c82 <__sflush_r+0x46>
    1c7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1c80:	1ac0      	subs	r0, r0, r3
    1c82:	0002      	movs	r2, r0
    1c84:	6a21      	ldr	r1, [r4, #32]
    1c86:	2300      	movs	r3, #0
    1c88:	0028      	movs	r0, r5
    1c8a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1c8c:	47b8      	blx	r7
    1c8e:	89a1      	ldrh	r1, [r4, #12]
    1c90:	1c43      	adds	r3, r0, #1
    1c92:	d106      	bne.n	1ca2 <__sflush_r+0x66>
    1c94:	682b      	ldr	r3, [r5, #0]
    1c96:	2b1d      	cmp	r3, #29
    1c98:	d831      	bhi.n	1cfe <__sflush_r+0xc2>
    1c9a:	4a2c      	ldr	r2, [pc, #176]	; (1d4c <__sflush_r+0x110>)
    1c9c:	40da      	lsrs	r2, r3
    1c9e:	07d3      	lsls	r3, r2, #31
    1ca0:	d52d      	bpl.n	1cfe <__sflush_r+0xc2>
    1ca2:	2300      	movs	r3, #0
    1ca4:	6063      	str	r3, [r4, #4]
    1ca6:	6923      	ldr	r3, [r4, #16]
    1ca8:	6023      	str	r3, [r4, #0]
    1caa:	04cb      	lsls	r3, r1, #19
    1cac:	d505      	bpl.n	1cba <__sflush_r+0x7e>
    1cae:	1c43      	adds	r3, r0, #1
    1cb0:	d102      	bne.n	1cb8 <__sflush_r+0x7c>
    1cb2:	682b      	ldr	r3, [r5, #0]
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d100      	bne.n	1cba <__sflush_r+0x7e>
    1cb8:	6560      	str	r0, [r4, #84]	; 0x54
    1cba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1cbc:	602e      	str	r6, [r5, #0]
    1cbe:	2900      	cmp	r1, #0
    1cc0:	d0c8      	beq.n	1c54 <__sflush_r+0x18>
    1cc2:	0023      	movs	r3, r4
    1cc4:	3344      	adds	r3, #68	; 0x44
    1cc6:	4299      	cmp	r1, r3
    1cc8:	d002      	beq.n	1cd0 <__sflush_r+0x94>
    1cca:	0028      	movs	r0, r5
    1ccc:	f000 f9b0 	bl	2030 <_free_r>
    1cd0:	2000      	movs	r0, #0
    1cd2:	6360      	str	r0, [r4, #52]	; 0x34
    1cd4:	e7bf      	b.n	1c56 <__sflush_r+0x1a>
    1cd6:	2301      	movs	r3, #1
    1cd8:	6a21      	ldr	r1, [r4, #32]
    1cda:	0028      	movs	r0, r5
    1cdc:	47b8      	blx	r7
    1cde:	1c43      	adds	r3, r0, #1
    1ce0:	d1c5      	bne.n	1c6e <__sflush_r+0x32>
    1ce2:	682b      	ldr	r3, [r5, #0]
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	d0c2      	beq.n	1c6e <__sflush_r+0x32>
    1ce8:	2b1d      	cmp	r3, #29
    1cea:	d001      	beq.n	1cf0 <__sflush_r+0xb4>
    1cec:	2b16      	cmp	r3, #22
    1cee:	d101      	bne.n	1cf4 <__sflush_r+0xb8>
    1cf0:	602e      	str	r6, [r5, #0]
    1cf2:	e7af      	b.n	1c54 <__sflush_r+0x18>
    1cf4:	2340      	movs	r3, #64	; 0x40
    1cf6:	89a2      	ldrh	r2, [r4, #12]
    1cf8:	4313      	orrs	r3, r2
    1cfa:	81a3      	strh	r3, [r4, #12]
    1cfc:	e7ab      	b.n	1c56 <__sflush_r+0x1a>
    1cfe:	2340      	movs	r3, #64	; 0x40
    1d00:	430b      	orrs	r3, r1
    1d02:	2001      	movs	r0, #1
    1d04:	81a3      	strh	r3, [r4, #12]
    1d06:	4240      	negs	r0, r0
    1d08:	e7a5      	b.n	1c56 <__sflush_r+0x1a>
    1d0a:	690f      	ldr	r7, [r1, #16]
    1d0c:	2f00      	cmp	r7, #0
    1d0e:	d0a1      	beq.n	1c54 <__sflush_r+0x18>
    1d10:	680b      	ldr	r3, [r1, #0]
    1d12:	600f      	str	r7, [r1, #0]
    1d14:	1bdb      	subs	r3, r3, r7
    1d16:	9301      	str	r3, [sp, #4]
    1d18:	2300      	movs	r3, #0
    1d1a:	0792      	lsls	r2, r2, #30
    1d1c:	d100      	bne.n	1d20 <__sflush_r+0xe4>
    1d1e:	694b      	ldr	r3, [r1, #20]
    1d20:	60a3      	str	r3, [r4, #8]
    1d22:	9b01      	ldr	r3, [sp, #4]
    1d24:	2b00      	cmp	r3, #0
    1d26:	dc00      	bgt.n	1d2a <__sflush_r+0xee>
    1d28:	e794      	b.n	1c54 <__sflush_r+0x18>
    1d2a:	9b01      	ldr	r3, [sp, #4]
    1d2c:	003a      	movs	r2, r7
    1d2e:	6a21      	ldr	r1, [r4, #32]
    1d30:	0028      	movs	r0, r5
    1d32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1d34:	47b0      	blx	r6
    1d36:	2800      	cmp	r0, #0
    1d38:	dc03      	bgt.n	1d42 <__sflush_r+0x106>
    1d3a:	2340      	movs	r3, #64	; 0x40
    1d3c:	89a2      	ldrh	r2, [r4, #12]
    1d3e:	4313      	orrs	r3, r2
    1d40:	e7df      	b.n	1d02 <__sflush_r+0xc6>
    1d42:	9b01      	ldr	r3, [sp, #4]
    1d44:	183f      	adds	r7, r7, r0
    1d46:	1a1b      	subs	r3, r3, r0
    1d48:	9301      	str	r3, [sp, #4]
    1d4a:	e7ea      	b.n	1d22 <__sflush_r+0xe6>
    1d4c:	20400001 	.word	0x20400001

00001d50 <_fflush_r>:
    1d50:	690b      	ldr	r3, [r1, #16]
    1d52:	b570      	push	{r4, r5, r6, lr}
    1d54:	0005      	movs	r5, r0
    1d56:	000c      	movs	r4, r1
    1d58:	2b00      	cmp	r3, #0
    1d5a:	d101      	bne.n	1d60 <_fflush_r+0x10>
    1d5c:	2000      	movs	r0, #0
    1d5e:	bd70      	pop	{r4, r5, r6, pc}
    1d60:	2800      	cmp	r0, #0
    1d62:	d004      	beq.n	1d6e <_fflush_r+0x1e>
    1d64:	6983      	ldr	r3, [r0, #24]
    1d66:	2b00      	cmp	r3, #0
    1d68:	d101      	bne.n	1d6e <_fflush_r+0x1e>
    1d6a:	f000 f85f 	bl	1e2c <__sinit>
    1d6e:	4b0b      	ldr	r3, [pc, #44]	; (1d9c <_fflush_r+0x4c>)
    1d70:	429c      	cmp	r4, r3
    1d72:	d109      	bne.n	1d88 <_fflush_r+0x38>
    1d74:	686c      	ldr	r4, [r5, #4]
    1d76:	220c      	movs	r2, #12
    1d78:	5ea3      	ldrsh	r3, [r4, r2]
    1d7a:	2b00      	cmp	r3, #0
    1d7c:	d0ee      	beq.n	1d5c <_fflush_r+0xc>
    1d7e:	0021      	movs	r1, r4
    1d80:	0028      	movs	r0, r5
    1d82:	f7ff ff5b 	bl	1c3c <__sflush_r>
    1d86:	e7ea      	b.n	1d5e <_fflush_r+0xe>
    1d88:	4b05      	ldr	r3, [pc, #20]	; (1da0 <_fflush_r+0x50>)
    1d8a:	429c      	cmp	r4, r3
    1d8c:	d101      	bne.n	1d92 <_fflush_r+0x42>
    1d8e:	68ac      	ldr	r4, [r5, #8]
    1d90:	e7f1      	b.n	1d76 <_fflush_r+0x26>
    1d92:	4b04      	ldr	r3, [pc, #16]	; (1da4 <_fflush_r+0x54>)
    1d94:	429c      	cmp	r4, r3
    1d96:	d1ee      	bne.n	1d76 <_fflush_r+0x26>
    1d98:	68ec      	ldr	r4, [r5, #12]
    1d9a:	e7ec      	b.n	1d76 <_fflush_r+0x26>
    1d9c:	00002a3c 	.word	0x00002a3c
    1da0:	00002a5c 	.word	0x00002a5c
    1da4:	00002a1c 	.word	0x00002a1c

00001da8 <_cleanup_r>:
    1da8:	b510      	push	{r4, lr}
    1daa:	4902      	ldr	r1, [pc, #8]	; (1db4 <_cleanup_r+0xc>)
    1dac:	f000 f8b2 	bl	1f14 <_fwalk_reent>
    1db0:	bd10      	pop	{r4, pc}
    1db2:	46c0      	nop			; (mov r8, r8)
    1db4:	00001d51 	.word	0x00001d51

00001db8 <std.isra.0>:
    1db8:	2300      	movs	r3, #0
    1dba:	b510      	push	{r4, lr}
    1dbc:	0004      	movs	r4, r0
    1dbe:	6003      	str	r3, [r0, #0]
    1dc0:	6043      	str	r3, [r0, #4]
    1dc2:	6083      	str	r3, [r0, #8]
    1dc4:	8181      	strh	r1, [r0, #12]
    1dc6:	6643      	str	r3, [r0, #100]	; 0x64
    1dc8:	81c2      	strh	r2, [r0, #14]
    1dca:	6103      	str	r3, [r0, #16]
    1dcc:	6143      	str	r3, [r0, #20]
    1dce:	6183      	str	r3, [r0, #24]
    1dd0:	0019      	movs	r1, r3
    1dd2:	2208      	movs	r2, #8
    1dd4:	305c      	adds	r0, #92	; 0x5c
    1dd6:	f7ff fdd8 	bl	198a <memset>
    1dda:	4b05      	ldr	r3, [pc, #20]	; (1df0 <std.isra.0+0x38>)
    1ddc:	6224      	str	r4, [r4, #32]
    1dde:	6263      	str	r3, [r4, #36]	; 0x24
    1de0:	4b04      	ldr	r3, [pc, #16]	; (1df4 <std.isra.0+0x3c>)
    1de2:	62a3      	str	r3, [r4, #40]	; 0x28
    1de4:	4b04      	ldr	r3, [pc, #16]	; (1df8 <std.isra.0+0x40>)
    1de6:	62e3      	str	r3, [r4, #44]	; 0x2c
    1de8:	4b04      	ldr	r3, [pc, #16]	; (1dfc <std.isra.0+0x44>)
    1dea:	6323      	str	r3, [r4, #48]	; 0x30
    1dec:	bd10      	pop	{r4, pc}
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	0000273d 	.word	0x0000273d
    1df4:	00002765 	.word	0x00002765
    1df8:	0000279d 	.word	0x0000279d
    1dfc:	000027c9 	.word	0x000027c9

00001e00 <__sfmoreglue>:
    1e00:	b570      	push	{r4, r5, r6, lr}
    1e02:	2568      	movs	r5, #104	; 0x68
    1e04:	1e4a      	subs	r2, r1, #1
    1e06:	4355      	muls	r5, r2
    1e08:	000e      	movs	r6, r1
    1e0a:	0029      	movs	r1, r5
    1e0c:	3174      	adds	r1, #116	; 0x74
    1e0e:	f000 f959 	bl	20c4 <_malloc_r>
    1e12:	1e04      	subs	r4, r0, #0
    1e14:	d008      	beq.n	1e28 <__sfmoreglue+0x28>
    1e16:	2100      	movs	r1, #0
    1e18:	002a      	movs	r2, r5
    1e1a:	6001      	str	r1, [r0, #0]
    1e1c:	6046      	str	r6, [r0, #4]
    1e1e:	300c      	adds	r0, #12
    1e20:	60a0      	str	r0, [r4, #8]
    1e22:	3268      	adds	r2, #104	; 0x68
    1e24:	f7ff fdb1 	bl	198a <memset>
    1e28:	0020      	movs	r0, r4
    1e2a:	bd70      	pop	{r4, r5, r6, pc}

00001e2c <__sinit>:
    1e2c:	6983      	ldr	r3, [r0, #24]
    1e2e:	b513      	push	{r0, r1, r4, lr}
    1e30:	0004      	movs	r4, r0
    1e32:	2b00      	cmp	r3, #0
    1e34:	d128      	bne.n	1e88 <__sinit+0x5c>
    1e36:	6483      	str	r3, [r0, #72]	; 0x48
    1e38:	64c3      	str	r3, [r0, #76]	; 0x4c
    1e3a:	6503      	str	r3, [r0, #80]	; 0x50
    1e3c:	4b13      	ldr	r3, [pc, #76]	; (1e8c <__sinit+0x60>)
    1e3e:	4a14      	ldr	r2, [pc, #80]	; (1e90 <__sinit+0x64>)
    1e40:	681b      	ldr	r3, [r3, #0]
    1e42:	6282      	str	r2, [r0, #40]	; 0x28
    1e44:	9301      	str	r3, [sp, #4]
    1e46:	4298      	cmp	r0, r3
    1e48:	d101      	bne.n	1e4e <__sinit+0x22>
    1e4a:	2301      	movs	r3, #1
    1e4c:	6183      	str	r3, [r0, #24]
    1e4e:	0020      	movs	r0, r4
    1e50:	f000 f820 	bl	1e94 <__sfp>
    1e54:	6060      	str	r0, [r4, #4]
    1e56:	0020      	movs	r0, r4
    1e58:	f000 f81c 	bl	1e94 <__sfp>
    1e5c:	60a0      	str	r0, [r4, #8]
    1e5e:	0020      	movs	r0, r4
    1e60:	f000 f818 	bl	1e94 <__sfp>
    1e64:	2200      	movs	r2, #0
    1e66:	60e0      	str	r0, [r4, #12]
    1e68:	2104      	movs	r1, #4
    1e6a:	6860      	ldr	r0, [r4, #4]
    1e6c:	f7ff ffa4 	bl	1db8 <std.isra.0>
    1e70:	2201      	movs	r2, #1
    1e72:	2109      	movs	r1, #9
    1e74:	68a0      	ldr	r0, [r4, #8]
    1e76:	f7ff ff9f 	bl	1db8 <std.isra.0>
    1e7a:	2202      	movs	r2, #2
    1e7c:	2112      	movs	r1, #18
    1e7e:	68e0      	ldr	r0, [r4, #12]
    1e80:	f7ff ff9a 	bl	1db8 <std.isra.0>
    1e84:	2301      	movs	r3, #1
    1e86:	61a3      	str	r3, [r4, #24]
    1e88:	bd13      	pop	{r0, r1, r4, pc}
    1e8a:	46c0      	nop			; (mov r8, r8)
    1e8c:	00002a18 	.word	0x00002a18
    1e90:	00001da9 	.word	0x00001da9

00001e94 <__sfp>:
    1e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e96:	4b1e      	ldr	r3, [pc, #120]	; (1f10 <__sfp+0x7c>)
    1e98:	0007      	movs	r7, r0
    1e9a:	681e      	ldr	r6, [r3, #0]
    1e9c:	69b3      	ldr	r3, [r6, #24]
    1e9e:	2b00      	cmp	r3, #0
    1ea0:	d102      	bne.n	1ea8 <__sfp+0x14>
    1ea2:	0030      	movs	r0, r6
    1ea4:	f7ff ffc2 	bl	1e2c <__sinit>
    1ea8:	3648      	adds	r6, #72	; 0x48
    1eaa:	68b4      	ldr	r4, [r6, #8]
    1eac:	6873      	ldr	r3, [r6, #4]
    1eae:	3b01      	subs	r3, #1
    1eb0:	d504      	bpl.n	1ebc <__sfp+0x28>
    1eb2:	6833      	ldr	r3, [r6, #0]
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	d007      	beq.n	1ec8 <__sfp+0x34>
    1eb8:	6836      	ldr	r6, [r6, #0]
    1eba:	e7f6      	b.n	1eaa <__sfp+0x16>
    1ebc:	220c      	movs	r2, #12
    1ebe:	5ea5      	ldrsh	r5, [r4, r2]
    1ec0:	2d00      	cmp	r5, #0
    1ec2:	d00d      	beq.n	1ee0 <__sfp+0x4c>
    1ec4:	3468      	adds	r4, #104	; 0x68
    1ec6:	e7f2      	b.n	1eae <__sfp+0x1a>
    1ec8:	2104      	movs	r1, #4
    1eca:	0038      	movs	r0, r7
    1ecc:	f7ff ff98 	bl	1e00 <__sfmoreglue>
    1ed0:	6030      	str	r0, [r6, #0]
    1ed2:	2800      	cmp	r0, #0
    1ed4:	d1f0      	bne.n	1eb8 <__sfp+0x24>
    1ed6:	230c      	movs	r3, #12
    1ed8:	0004      	movs	r4, r0
    1eda:	603b      	str	r3, [r7, #0]
    1edc:	0020      	movs	r0, r4
    1ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ee0:	2301      	movs	r3, #1
    1ee2:	0020      	movs	r0, r4
    1ee4:	425b      	negs	r3, r3
    1ee6:	81e3      	strh	r3, [r4, #14]
    1ee8:	3302      	adds	r3, #2
    1eea:	81a3      	strh	r3, [r4, #12]
    1eec:	6665      	str	r5, [r4, #100]	; 0x64
    1eee:	6025      	str	r5, [r4, #0]
    1ef0:	60a5      	str	r5, [r4, #8]
    1ef2:	6065      	str	r5, [r4, #4]
    1ef4:	6125      	str	r5, [r4, #16]
    1ef6:	6165      	str	r5, [r4, #20]
    1ef8:	61a5      	str	r5, [r4, #24]
    1efa:	2208      	movs	r2, #8
    1efc:	0029      	movs	r1, r5
    1efe:	305c      	adds	r0, #92	; 0x5c
    1f00:	f7ff fd43 	bl	198a <memset>
    1f04:	6365      	str	r5, [r4, #52]	; 0x34
    1f06:	63a5      	str	r5, [r4, #56]	; 0x38
    1f08:	64a5      	str	r5, [r4, #72]	; 0x48
    1f0a:	64e5      	str	r5, [r4, #76]	; 0x4c
    1f0c:	e7e6      	b.n	1edc <__sfp+0x48>
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	00002a18 	.word	0x00002a18

00001f14 <_fwalk_reent>:
    1f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1f16:	0004      	movs	r4, r0
    1f18:	0007      	movs	r7, r0
    1f1a:	2600      	movs	r6, #0
    1f1c:	9101      	str	r1, [sp, #4]
    1f1e:	3448      	adds	r4, #72	; 0x48
    1f20:	2c00      	cmp	r4, #0
    1f22:	d101      	bne.n	1f28 <_fwalk_reent+0x14>
    1f24:	0030      	movs	r0, r6
    1f26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1f28:	6863      	ldr	r3, [r4, #4]
    1f2a:	68a5      	ldr	r5, [r4, #8]
    1f2c:	9300      	str	r3, [sp, #0]
    1f2e:	9b00      	ldr	r3, [sp, #0]
    1f30:	3b01      	subs	r3, #1
    1f32:	9300      	str	r3, [sp, #0]
    1f34:	d501      	bpl.n	1f3a <_fwalk_reent+0x26>
    1f36:	6824      	ldr	r4, [r4, #0]
    1f38:	e7f2      	b.n	1f20 <_fwalk_reent+0xc>
    1f3a:	89ab      	ldrh	r3, [r5, #12]
    1f3c:	2b01      	cmp	r3, #1
    1f3e:	d908      	bls.n	1f52 <_fwalk_reent+0x3e>
    1f40:	220e      	movs	r2, #14
    1f42:	5eab      	ldrsh	r3, [r5, r2]
    1f44:	3301      	adds	r3, #1
    1f46:	d004      	beq.n	1f52 <_fwalk_reent+0x3e>
    1f48:	0029      	movs	r1, r5
    1f4a:	0038      	movs	r0, r7
    1f4c:	9b01      	ldr	r3, [sp, #4]
    1f4e:	4798      	blx	r3
    1f50:	4306      	orrs	r6, r0
    1f52:	3568      	adds	r5, #104	; 0x68
    1f54:	e7eb      	b.n	1f2e <_fwalk_reent+0x1a>
	...

00001f58 <__swhatbuf_r>:
    1f58:	b570      	push	{r4, r5, r6, lr}
    1f5a:	000e      	movs	r6, r1
    1f5c:	001d      	movs	r5, r3
    1f5e:	230e      	movs	r3, #14
    1f60:	5ec9      	ldrsh	r1, [r1, r3]
    1f62:	b090      	sub	sp, #64	; 0x40
    1f64:	0014      	movs	r4, r2
    1f66:	2900      	cmp	r1, #0
    1f68:	da07      	bge.n	1f7a <__swhatbuf_r+0x22>
    1f6a:	2300      	movs	r3, #0
    1f6c:	602b      	str	r3, [r5, #0]
    1f6e:	89b3      	ldrh	r3, [r6, #12]
    1f70:	061b      	lsls	r3, r3, #24
    1f72:	d411      	bmi.n	1f98 <__swhatbuf_r+0x40>
    1f74:	2380      	movs	r3, #128	; 0x80
    1f76:	00db      	lsls	r3, r3, #3
    1f78:	e00f      	b.n	1f9a <__swhatbuf_r+0x42>
    1f7a:	aa01      	add	r2, sp, #4
    1f7c:	f000 fc50 	bl	2820 <_fstat_r>
    1f80:	2800      	cmp	r0, #0
    1f82:	dbf2      	blt.n	1f6a <__swhatbuf_r+0x12>
    1f84:	22f0      	movs	r2, #240	; 0xf0
    1f86:	9b02      	ldr	r3, [sp, #8]
    1f88:	0212      	lsls	r2, r2, #8
    1f8a:	4013      	ands	r3, r2
    1f8c:	4a05      	ldr	r2, [pc, #20]	; (1fa4 <__swhatbuf_r+0x4c>)
    1f8e:	189b      	adds	r3, r3, r2
    1f90:	425a      	negs	r2, r3
    1f92:	4153      	adcs	r3, r2
    1f94:	602b      	str	r3, [r5, #0]
    1f96:	e7ed      	b.n	1f74 <__swhatbuf_r+0x1c>
    1f98:	2340      	movs	r3, #64	; 0x40
    1f9a:	2000      	movs	r0, #0
    1f9c:	6023      	str	r3, [r4, #0]
    1f9e:	b010      	add	sp, #64	; 0x40
    1fa0:	bd70      	pop	{r4, r5, r6, pc}
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	ffffe000 	.word	0xffffe000

00001fa8 <__smakebuf_r>:
    1fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1faa:	2602      	movs	r6, #2
    1fac:	898b      	ldrh	r3, [r1, #12]
    1fae:	0005      	movs	r5, r0
    1fb0:	000c      	movs	r4, r1
    1fb2:	4233      	tst	r3, r6
    1fb4:	d006      	beq.n	1fc4 <__smakebuf_r+0x1c>
    1fb6:	0023      	movs	r3, r4
    1fb8:	3347      	adds	r3, #71	; 0x47
    1fba:	6023      	str	r3, [r4, #0]
    1fbc:	6123      	str	r3, [r4, #16]
    1fbe:	2301      	movs	r3, #1
    1fc0:	6163      	str	r3, [r4, #20]
    1fc2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1fc4:	ab01      	add	r3, sp, #4
    1fc6:	466a      	mov	r2, sp
    1fc8:	f7ff ffc6 	bl	1f58 <__swhatbuf_r>
    1fcc:	9900      	ldr	r1, [sp, #0]
    1fce:	0007      	movs	r7, r0
    1fd0:	0028      	movs	r0, r5
    1fd2:	f000 f877 	bl	20c4 <_malloc_r>
    1fd6:	2800      	cmp	r0, #0
    1fd8:	d108      	bne.n	1fec <__smakebuf_r+0x44>
    1fda:	220c      	movs	r2, #12
    1fdc:	5ea3      	ldrsh	r3, [r4, r2]
    1fde:	059a      	lsls	r2, r3, #22
    1fe0:	d4ef      	bmi.n	1fc2 <__smakebuf_r+0x1a>
    1fe2:	2203      	movs	r2, #3
    1fe4:	4393      	bics	r3, r2
    1fe6:	431e      	orrs	r6, r3
    1fe8:	81a6      	strh	r6, [r4, #12]
    1fea:	e7e4      	b.n	1fb6 <__smakebuf_r+0xe>
    1fec:	4b0f      	ldr	r3, [pc, #60]	; (202c <STACK_SIZE+0x2c>)
    1fee:	62ab      	str	r3, [r5, #40]	; 0x28
    1ff0:	2380      	movs	r3, #128	; 0x80
    1ff2:	89a2      	ldrh	r2, [r4, #12]
    1ff4:	6020      	str	r0, [r4, #0]
    1ff6:	4313      	orrs	r3, r2
    1ff8:	81a3      	strh	r3, [r4, #12]
    1ffa:	9b00      	ldr	r3, [sp, #0]
    1ffc:	6120      	str	r0, [r4, #16]
    1ffe:	6163      	str	r3, [r4, #20]
    2000:	9b01      	ldr	r3, [sp, #4]
    2002:	2b00      	cmp	r3, #0
    2004:	d00d      	beq.n	2022 <STACK_SIZE+0x22>
    2006:	230e      	movs	r3, #14
    2008:	5ee1      	ldrsh	r1, [r4, r3]
    200a:	0028      	movs	r0, r5
    200c:	f000 fc1a 	bl	2844 <_isatty_r>
    2010:	2800      	cmp	r0, #0
    2012:	d006      	beq.n	2022 <STACK_SIZE+0x22>
    2014:	2203      	movs	r2, #3
    2016:	89a3      	ldrh	r3, [r4, #12]
    2018:	4393      	bics	r3, r2
    201a:	001a      	movs	r2, r3
    201c:	2301      	movs	r3, #1
    201e:	4313      	orrs	r3, r2
    2020:	81a3      	strh	r3, [r4, #12]
    2022:	89a0      	ldrh	r0, [r4, #12]
    2024:	4338      	orrs	r0, r7
    2026:	81a0      	strh	r0, [r4, #12]
    2028:	e7cb      	b.n	1fc2 <__smakebuf_r+0x1a>
    202a:	46c0      	nop			; (mov r8, r8)
    202c:	00001da9 	.word	0x00001da9

00002030 <_free_r>:
    2030:	b570      	push	{r4, r5, r6, lr}
    2032:	0005      	movs	r5, r0
    2034:	2900      	cmp	r1, #0
    2036:	d010      	beq.n	205a <_free_r+0x2a>
    2038:	1f0c      	subs	r4, r1, #4
    203a:	6823      	ldr	r3, [r4, #0]
    203c:	2b00      	cmp	r3, #0
    203e:	da00      	bge.n	2042 <_free_r+0x12>
    2040:	18e4      	adds	r4, r4, r3
    2042:	0028      	movs	r0, r5
    2044:	f000 fc2f 	bl	28a6 <__malloc_lock>
    2048:	4a1d      	ldr	r2, [pc, #116]	; (20c0 <_free_r+0x90>)
    204a:	6813      	ldr	r3, [r2, #0]
    204c:	2b00      	cmp	r3, #0
    204e:	d105      	bne.n	205c <_free_r+0x2c>
    2050:	6063      	str	r3, [r4, #4]
    2052:	6014      	str	r4, [r2, #0]
    2054:	0028      	movs	r0, r5
    2056:	f000 fc27 	bl	28a8 <__malloc_unlock>
    205a:	bd70      	pop	{r4, r5, r6, pc}
    205c:	42a3      	cmp	r3, r4
    205e:	d909      	bls.n	2074 <_free_r+0x44>
    2060:	6821      	ldr	r1, [r4, #0]
    2062:	1860      	adds	r0, r4, r1
    2064:	4283      	cmp	r3, r0
    2066:	d1f3      	bne.n	2050 <_free_r+0x20>
    2068:	6818      	ldr	r0, [r3, #0]
    206a:	685b      	ldr	r3, [r3, #4]
    206c:	1841      	adds	r1, r0, r1
    206e:	6021      	str	r1, [r4, #0]
    2070:	e7ee      	b.n	2050 <_free_r+0x20>
    2072:	0013      	movs	r3, r2
    2074:	685a      	ldr	r2, [r3, #4]
    2076:	2a00      	cmp	r2, #0
    2078:	d001      	beq.n	207e <_free_r+0x4e>
    207a:	42a2      	cmp	r2, r4
    207c:	d9f9      	bls.n	2072 <_free_r+0x42>
    207e:	6819      	ldr	r1, [r3, #0]
    2080:	1858      	adds	r0, r3, r1
    2082:	42a0      	cmp	r0, r4
    2084:	d10b      	bne.n	209e <_free_r+0x6e>
    2086:	6820      	ldr	r0, [r4, #0]
    2088:	1809      	adds	r1, r1, r0
    208a:	1858      	adds	r0, r3, r1
    208c:	6019      	str	r1, [r3, #0]
    208e:	4282      	cmp	r2, r0
    2090:	d1e0      	bne.n	2054 <_free_r+0x24>
    2092:	6810      	ldr	r0, [r2, #0]
    2094:	6852      	ldr	r2, [r2, #4]
    2096:	1841      	adds	r1, r0, r1
    2098:	6019      	str	r1, [r3, #0]
    209a:	605a      	str	r2, [r3, #4]
    209c:	e7da      	b.n	2054 <_free_r+0x24>
    209e:	42a0      	cmp	r0, r4
    20a0:	d902      	bls.n	20a8 <_free_r+0x78>
    20a2:	230c      	movs	r3, #12
    20a4:	602b      	str	r3, [r5, #0]
    20a6:	e7d5      	b.n	2054 <_free_r+0x24>
    20a8:	6821      	ldr	r1, [r4, #0]
    20aa:	1860      	adds	r0, r4, r1
    20ac:	4282      	cmp	r2, r0
    20ae:	d103      	bne.n	20b8 <_free_r+0x88>
    20b0:	6810      	ldr	r0, [r2, #0]
    20b2:	6852      	ldr	r2, [r2, #4]
    20b4:	1841      	adds	r1, r0, r1
    20b6:	6021      	str	r1, [r4, #0]
    20b8:	6062      	str	r2, [r4, #4]
    20ba:	605c      	str	r4, [r3, #4]
    20bc:	e7ca      	b.n	2054 <_free_r+0x24>
    20be:	46c0      	nop			; (mov r8, r8)
    20c0:	200001c4 	.word	0x200001c4

000020c4 <_malloc_r>:
    20c4:	2303      	movs	r3, #3
    20c6:	b570      	push	{r4, r5, r6, lr}
    20c8:	1ccd      	adds	r5, r1, #3
    20ca:	439d      	bics	r5, r3
    20cc:	3508      	adds	r5, #8
    20ce:	0006      	movs	r6, r0
    20d0:	2d0c      	cmp	r5, #12
    20d2:	d21e      	bcs.n	2112 <_malloc_r+0x4e>
    20d4:	250c      	movs	r5, #12
    20d6:	42a9      	cmp	r1, r5
    20d8:	d81d      	bhi.n	2116 <_malloc_r+0x52>
    20da:	0030      	movs	r0, r6
    20dc:	f000 fbe3 	bl	28a6 <__malloc_lock>
    20e0:	4a25      	ldr	r2, [pc, #148]	; (2178 <_malloc_r+0xb4>)
    20e2:	6814      	ldr	r4, [r2, #0]
    20e4:	0021      	movs	r1, r4
    20e6:	2900      	cmp	r1, #0
    20e8:	d119      	bne.n	211e <_malloc_r+0x5a>
    20ea:	4c24      	ldr	r4, [pc, #144]	; (217c <_malloc_r+0xb8>)
    20ec:	6823      	ldr	r3, [r4, #0]
    20ee:	2b00      	cmp	r3, #0
    20f0:	d103      	bne.n	20fa <_malloc_r+0x36>
    20f2:	0030      	movs	r0, r6
    20f4:	f000 fb10 	bl	2718 <_sbrk_r>
    20f8:	6020      	str	r0, [r4, #0]
    20fa:	0029      	movs	r1, r5
    20fc:	0030      	movs	r0, r6
    20fe:	f000 fb0b 	bl	2718 <_sbrk_r>
    2102:	1c43      	adds	r3, r0, #1
    2104:	d12c      	bne.n	2160 <_malloc_r+0x9c>
    2106:	230c      	movs	r3, #12
    2108:	0030      	movs	r0, r6
    210a:	6033      	str	r3, [r6, #0]
    210c:	f000 fbcc 	bl	28a8 <__malloc_unlock>
    2110:	e003      	b.n	211a <_malloc_r+0x56>
    2112:	2d00      	cmp	r5, #0
    2114:	dadf      	bge.n	20d6 <_malloc_r+0x12>
    2116:	230c      	movs	r3, #12
    2118:	6033      	str	r3, [r6, #0]
    211a:	2000      	movs	r0, #0
    211c:	bd70      	pop	{r4, r5, r6, pc}
    211e:	680b      	ldr	r3, [r1, #0]
    2120:	1b5b      	subs	r3, r3, r5
    2122:	d41a      	bmi.n	215a <_malloc_r+0x96>
    2124:	2b0b      	cmp	r3, #11
    2126:	d903      	bls.n	2130 <_malloc_r+0x6c>
    2128:	600b      	str	r3, [r1, #0]
    212a:	18cc      	adds	r4, r1, r3
    212c:	6025      	str	r5, [r4, #0]
    212e:	e003      	b.n	2138 <_malloc_r+0x74>
    2130:	428c      	cmp	r4, r1
    2132:	d10e      	bne.n	2152 <_malloc_r+0x8e>
    2134:	6863      	ldr	r3, [r4, #4]
    2136:	6013      	str	r3, [r2, #0]
    2138:	0030      	movs	r0, r6
    213a:	f000 fbb5 	bl	28a8 <__malloc_unlock>
    213e:	0020      	movs	r0, r4
    2140:	2207      	movs	r2, #7
    2142:	300b      	adds	r0, #11
    2144:	1d23      	adds	r3, r4, #4
    2146:	4390      	bics	r0, r2
    2148:	1ac3      	subs	r3, r0, r3
    214a:	d0e7      	beq.n	211c <_malloc_r+0x58>
    214c:	425a      	negs	r2, r3
    214e:	50e2      	str	r2, [r4, r3]
    2150:	e7e4      	b.n	211c <_malloc_r+0x58>
    2152:	684b      	ldr	r3, [r1, #4]
    2154:	6063      	str	r3, [r4, #4]
    2156:	000c      	movs	r4, r1
    2158:	e7ee      	b.n	2138 <_malloc_r+0x74>
    215a:	000c      	movs	r4, r1
    215c:	6849      	ldr	r1, [r1, #4]
    215e:	e7c2      	b.n	20e6 <_malloc_r+0x22>
    2160:	2303      	movs	r3, #3
    2162:	1cc4      	adds	r4, r0, #3
    2164:	439c      	bics	r4, r3
    2166:	42a0      	cmp	r0, r4
    2168:	d0e0      	beq.n	212c <_malloc_r+0x68>
    216a:	1a21      	subs	r1, r4, r0
    216c:	0030      	movs	r0, r6
    216e:	f000 fad3 	bl	2718 <_sbrk_r>
    2172:	1c43      	adds	r3, r0, #1
    2174:	d1da      	bne.n	212c <_malloc_r+0x68>
    2176:	e7c6      	b.n	2106 <_malloc_r+0x42>
    2178:	200001c4 	.word	0x200001c4
    217c:	200001c8 	.word	0x200001c8

00002180 <__sfputc_r>:
    2180:	6893      	ldr	r3, [r2, #8]
    2182:	b510      	push	{r4, lr}
    2184:	3b01      	subs	r3, #1
    2186:	6093      	str	r3, [r2, #8]
    2188:	2b00      	cmp	r3, #0
    218a:	da05      	bge.n	2198 <__sfputc_r+0x18>
    218c:	6994      	ldr	r4, [r2, #24]
    218e:	42a3      	cmp	r3, r4
    2190:	db08      	blt.n	21a4 <__sfputc_r+0x24>
    2192:	b2cb      	uxtb	r3, r1
    2194:	2b0a      	cmp	r3, #10
    2196:	d005      	beq.n	21a4 <__sfputc_r+0x24>
    2198:	6813      	ldr	r3, [r2, #0]
    219a:	1c58      	adds	r0, r3, #1
    219c:	6010      	str	r0, [r2, #0]
    219e:	7019      	strb	r1, [r3, #0]
    21a0:	b2c8      	uxtb	r0, r1
    21a2:	bd10      	pop	{r4, pc}
    21a4:	f7ff fc7e 	bl	1aa4 <__swbuf_r>
    21a8:	e7fb      	b.n	21a2 <__sfputc_r+0x22>

000021aa <__sfputs_r>:
    21aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ac:	0006      	movs	r6, r0
    21ae:	000f      	movs	r7, r1
    21b0:	0014      	movs	r4, r2
    21b2:	18d5      	adds	r5, r2, r3
    21b4:	42ac      	cmp	r4, r5
    21b6:	d101      	bne.n	21bc <__sfputs_r+0x12>
    21b8:	2000      	movs	r0, #0
    21ba:	e007      	b.n	21cc <__sfputs_r+0x22>
    21bc:	7821      	ldrb	r1, [r4, #0]
    21be:	003a      	movs	r2, r7
    21c0:	0030      	movs	r0, r6
    21c2:	f7ff ffdd 	bl	2180 <__sfputc_r>
    21c6:	3401      	adds	r4, #1
    21c8:	1c43      	adds	r3, r0, #1
    21ca:	d1f3      	bne.n	21b4 <__sfputs_r+0xa>
    21cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000021d0 <_vfiprintf_r>:
    21d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21d2:	b09f      	sub	sp, #124	; 0x7c
    21d4:	0006      	movs	r6, r0
    21d6:	000f      	movs	r7, r1
    21d8:	0014      	movs	r4, r2
    21da:	9305      	str	r3, [sp, #20]
    21dc:	2800      	cmp	r0, #0
    21de:	d004      	beq.n	21ea <_vfiprintf_r+0x1a>
    21e0:	6983      	ldr	r3, [r0, #24]
    21e2:	2b00      	cmp	r3, #0
    21e4:	d101      	bne.n	21ea <_vfiprintf_r+0x1a>
    21e6:	f7ff fe21 	bl	1e2c <__sinit>
    21ea:	4b7f      	ldr	r3, [pc, #508]	; (23e8 <_vfiprintf_r+0x218>)
    21ec:	429f      	cmp	r7, r3
    21ee:	d15c      	bne.n	22aa <_vfiprintf_r+0xda>
    21f0:	6877      	ldr	r7, [r6, #4]
    21f2:	89bb      	ldrh	r3, [r7, #12]
    21f4:	071b      	lsls	r3, r3, #28
    21f6:	d562      	bpl.n	22be <_vfiprintf_r+0xee>
    21f8:	693b      	ldr	r3, [r7, #16]
    21fa:	2b00      	cmp	r3, #0
    21fc:	d05f      	beq.n	22be <_vfiprintf_r+0xee>
    21fe:	2300      	movs	r3, #0
    2200:	ad06      	add	r5, sp, #24
    2202:	616b      	str	r3, [r5, #20]
    2204:	3320      	adds	r3, #32
    2206:	766b      	strb	r3, [r5, #25]
    2208:	3310      	adds	r3, #16
    220a:	76ab      	strb	r3, [r5, #26]
    220c:	9402      	str	r4, [sp, #8]
    220e:	9c02      	ldr	r4, [sp, #8]
    2210:	7823      	ldrb	r3, [r4, #0]
    2212:	2b00      	cmp	r3, #0
    2214:	d15d      	bne.n	22d2 <_vfiprintf_r+0x102>
    2216:	9b02      	ldr	r3, [sp, #8]
    2218:	1ae3      	subs	r3, r4, r3
    221a:	9304      	str	r3, [sp, #16]
    221c:	d00d      	beq.n	223a <_vfiprintf_r+0x6a>
    221e:	9b04      	ldr	r3, [sp, #16]
    2220:	9a02      	ldr	r2, [sp, #8]
    2222:	0039      	movs	r1, r7
    2224:	0030      	movs	r0, r6
    2226:	f7ff ffc0 	bl	21aa <__sfputs_r>
    222a:	1c43      	adds	r3, r0, #1
    222c:	d100      	bne.n	2230 <_vfiprintf_r+0x60>
    222e:	e0cc      	b.n	23ca <_vfiprintf_r+0x1fa>
    2230:	696a      	ldr	r2, [r5, #20]
    2232:	9b04      	ldr	r3, [sp, #16]
    2234:	4694      	mov	ip, r2
    2236:	4463      	add	r3, ip
    2238:	616b      	str	r3, [r5, #20]
    223a:	7823      	ldrb	r3, [r4, #0]
    223c:	2b00      	cmp	r3, #0
    223e:	d100      	bne.n	2242 <_vfiprintf_r+0x72>
    2240:	e0c3      	b.n	23ca <_vfiprintf_r+0x1fa>
    2242:	2201      	movs	r2, #1
    2244:	2300      	movs	r3, #0
    2246:	4252      	negs	r2, r2
    2248:	606a      	str	r2, [r5, #4]
    224a:	a902      	add	r1, sp, #8
    224c:	3254      	adds	r2, #84	; 0x54
    224e:	1852      	adds	r2, r2, r1
    2250:	3401      	adds	r4, #1
    2252:	602b      	str	r3, [r5, #0]
    2254:	60eb      	str	r3, [r5, #12]
    2256:	60ab      	str	r3, [r5, #8]
    2258:	7013      	strb	r3, [r2, #0]
    225a:	65ab      	str	r3, [r5, #88]	; 0x58
    225c:	7821      	ldrb	r1, [r4, #0]
    225e:	2205      	movs	r2, #5
    2260:	4862      	ldr	r0, [pc, #392]	; (23ec <_vfiprintf_r+0x21c>)
    2262:	f000 fb15 	bl	2890 <memchr>
    2266:	1c63      	adds	r3, r4, #1
    2268:	469c      	mov	ip, r3
    226a:	2800      	cmp	r0, #0
    226c:	d135      	bne.n	22da <_vfiprintf_r+0x10a>
    226e:	6829      	ldr	r1, [r5, #0]
    2270:	06cb      	lsls	r3, r1, #27
    2272:	d504      	bpl.n	227e <_vfiprintf_r+0xae>
    2274:	2353      	movs	r3, #83	; 0x53
    2276:	aa02      	add	r2, sp, #8
    2278:	3020      	adds	r0, #32
    227a:	189b      	adds	r3, r3, r2
    227c:	7018      	strb	r0, [r3, #0]
    227e:	070b      	lsls	r3, r1, #28
    2280:	d504      	bpl.n	228c <_vfiprintf_r+0xbc>
    2282:	2353      	movs	r3, #83	; 0x53
    2284:	202b      	movs	r0, #43	; 0x2b
    2286:	aa02      	add	r2, sp, #8
    2288:	189b      	adds	r3, r3, r2
    228a:	7018      	strb	r0, [r3, #0]
    228c:	7823      	ldrb	r3, [r4, #0]
    228e:	2b2a      	cmp	r3, #42	; 0x2a
    2290:	d02c      	beq.n	22ec <_vfiprintf_r+0x11c>
    2292:	2000      	movs	r0, #0
    2294:	210a      	movs	r1, #10
    2296:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2298:	7822      	ldrb	r2, [r4, #0]
    229a:	3a30      	subs	r2, #48	; 0x30
    229c:	2a09      	cmp	r2, #9
    229e:	d800      	bhi.n	22a2 <_vfiprintf_r+0xd2>
    22a0:	e06b      	b.n	237a <_vfiprintf_r+0x1aa>
    22a2:	2800      	cmp	r0, #0
    22a4:	d02a      	beq.n	22fc <_vfiprintf_r+0x12c>
    22a6:	9309      	str	r3, [sp, #36]	; 0x24
    22a8:	e028      	b.n	22fc <_vfiprintf_r+0x12c>
    22aa:	4b51      	ldr	r3, [pc, #324]	; (23f0 <_vfiprintf_r+0x220>)
    22ac:	429f      	cmp	r7, r3
    22ae:	d101      	bne.n	22b4 <_vfiprintf_r+0xe4>
    22b0:	68b7      	ldr	r7, [r6, #8]
    22b2:	e79e      	b.n	21f2 <_vfiprintf_r+0x22>
    22b4:	4b4f      	ldr	r3, [pc, #316]	; (23f4 <_vfiprintf_r+0x224>)
    22b6:	429f      	cmp	r7, r3
    22b8:	d19b      	bne.n	21f2 <_vfiprintf_r+0x22>
    22ba:	68f7      	ldr	r7, [r6, #12]
    22bc:	e799      	b.n	21f2 <_vfiprintf_r+0x22>
    22be:	0039      	movs	r1, r7
    22c0:	0030      	movs	r0, r6
    22c2:	f7ff fc45 	bl	1b50 <__swsetup_r>
    22c6:	2800      	cmp	r0, #0
    22c8:	d099      	beq.n	21fe <_vfiprintf_r+0x2e>
    22ca:	2001      	movs	r0, #1
    22cc:	4240      	negs	r0, r0
    22ce:	b01f      	add	sp, #124	; 0x7c
    22d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22d2:	2b25      	cmp	r3, #37	; 0x25
    22d4:	d09f      	beq.n	2216 <_vfiprintf_r+0x46>
    22d6:	3401      	adds	r4, #1
    22d8:	e79a      	b.n	2210 <_vfiprintf_r+0x40>
    22da:	4b44      	ldr	r3, [pc, #272]	; (23ec <_vfiprintf_r+0x21c>)
    22dc:	6829      	ldr	r1, [r5, #0]
    22de:	1ac0      	subs	r0, r0, r3
    22e0:	2301      	movs	r3, #1
    22e2:	4083      	lsls	r3, r0
    22e4:	430b      	orrs	r3, r1
    22e6:	602b      	str	r3, [r5, #0]
    22e8:	4664      	mov	r4, ip
    22ea:	e7b7      	b.n	225c <_vfiprintf_r+0x8c>
    22ec:	9b05      	ldr	r3, [sp, #20]
    22ee:	1d18      	adds	r0, r3, #4
    22f0:	681b      	ldr	r3, [r3, #0]
    22f2:	9005      	str	r0, [sp, #20]
    22f4:	2b00      	cmp	r3, #0
    22f6:	db3a      	blt.n	236e <_vfiprintf_r+0x19e>
    22f8:	9309      	str	r3, [sp, #36]	; 0x24
    22fa:	4664      	mov	r4, ip
    22fc:	7823      	ldrb	r3, [r4, #0]
    22fe:	2b2e      	cmp	r3, #46	; 0x2e
    2300:	d10b      	bne.n	231a <_vfiprintf_r+0x14a>
    2302:	7863      	ldrb	r3, [r4, #1]
    2304:	1c62      	adds	r2, r4, #1
    2306:	2b2a      	cmp	r3, #42	; 0x2a
    2308:	d13f      	bne.n	238a <_vfiprintf_r+0x1ba>
    230a:	9b05      	ldr	r3, [sp, #20]
    230c:	3402      	adds	r4, #2
    230e:	1d1a      	adds	r2, r3, #4
    2310:	681b      	ldr	r3, [r3, #0]
    2312:	9205      	str	r2, [sp, #20]
    2314:	2b00      	cmp	r3, #0
    2316:	db35      	blt.n	2384 <_vfiprintf_r+0x1b4>
    2318:	9307      	str	r3, [sp, #28]
    231a:	7821      	ldrb	r1, [r4, #0]
    231c:	2203      	movs	r2, #3
    231e:	4836      	ldr	r0, [pc, #216]	; (23f8 <_vfiprintf_r+0x228>)
    2320:	f000 fab6 	bl	2890 <memchr>
    2324:	2800      	cmp	r0, #0
    2326:	d007      	beq.n	2338 <_vfiprintf_r+0x168>
    2328:	4b33      	ldr	r3, [pc, #204]	; (23f8 <_vfiprintf_r+0x228>)
    232a:	682a      	ldr	r2, [r5, #0]
    232c:	1ac0      	subs	r0, r0, r3
    232e:	2340      	movs	r3, #64	; 0x40
    2330:	4083      	lsls	r3, r0
    2332:	4313      	orrs	r3, r2
    2334:	602b      	str	r3, [r5, #0]
    2336:	3401      	adds	r4, #1
    2338:	7821      	ldrb	r1, [r4, #0]
    233a:	1c63      	adds	r3, r4, #1
    233c:	2206      	movs	r2, #6
    233e:	482f      	ldr	r0, [pc, #188]	; (23fc <_vfiprintf_r+0x22c>)
    2340:	9302      	str	r3, [sp, #8]
    2342:	7629      	strb	r1, [r5, #24]
    2344:	f000 faa4 	bl	2890 <memchr>
    2348:	2800      	cmp	r0, #0
    234a:	d044      	beq.n	23d6 <_vfiprintf_r+0x206>
    234c:	4b2c      	ldr	r3, [pc, #176]	; (2400 <_vfiprintf_r+0x230>)
    234e:	2b00      	cmp	r3, #0
    2350:	d12f      	bne.n	23b2 <_vfiprintf_r+0x1e2>
    2352:	6829      	ldr	r1, [r5, #0]
    2354:	9b05      	ldr	r3, [sp, #20]
    2356:	2207      	movs	r2, #7
    2358:	05c9      	lsls	r1, r1, #23
    235a:	d528      	bpl.n	23ae <_vfiprintf_r+0x1de>
    235c:	189b      	adds	r3, r3, r2
    235e:	4393      	bics	r3, r2
    2360:	3308      	adds	r3, #8
    2362:	9305      	str	r3, [sp, #20]
    2364:	696b      	ldr	r3, [r5, #20]
    2366:	9a03      	ldr	r2, [sp, #12]
    2368:	189b      	adds	r3, r3, r2
    236a:	616b      	str	r3, [r5, #20]
    236c:	e74f      	b.n	220e <_vfiprintf_r+0x3e>
    236e:	425b      	negs	r3, r3
    2370:	60eb      	str	r3, [r5, #12]
    2372:	2302      	movs	r3, #2
    2374:	430b      	orrs	r3, r1
    2376:	602b      	str	r3, [r5, #0]
    2378:	e7bf      	b.n	22fa <_vfiprintf_r+0x12a>
    237a:	434b      	muls	r3, r1
    237c:	3401      	adds	r4, #1
    237e:	189b      	adds	r3, r3, r2
    2380:	2001      	movs	r0, #1
    2382:	e789      	b.n	2298 <_vfiprintf_r+0xc8>
    2384:	2301      	movs	r3, #1
    2386:	425b      	negs	r3, r3
    2388:	e7c6      	b.n	2318 <_vfiprintf_r+0x148>
    238a:	2300      	movs	r3, #0
    238c:	0014      	movs	r4, r2
    238e:	200a      	movs	r0, #10
    2390:	001a      	movs	r2, r3
    2392:	606b      	str	r3, [r5, #4]
    2394:	7821      	ldrb	r1, [r4, #0]
    2396:	3930      	subs	r1, #48	; 0x30
    2398:	2909      	cmp	r1, #9
    239a:	d903      	bls.n	23a4 <_vfiprintf_r+0x1d4>
    239c:	2b00      	cmp	r3, #0
    239e:	d0bc      	beq.n	231a <_vfiprintf_r+0x14a>
    23a0:	9207      	str	r2, [sp, #28]
    23a2:	e7ba      	b.n	231a <_vfiprintf_r+0x14a>
    23a4:	4342      	muls	r2, r0
    23a6:	3401      	adds	r4, #1
    23a8:	1852      	adds	r2, r2, r1
    23aa:	2301      	movs	r3, #1
    23ac:	e7f2      	b.n	2394 <_vfiprintf_r+0x1c4>
    23ae:	3307      	adds	r3, #7
    23b0:	e7d5      	b.n	235e <_vfiprintf_r+0x18e>
    23b2:	ab05      	add	r3, sp, #20
    23b4:	9300      	str	r3, [sp, #0]
    23b6:	003a      	movs	r2, r7
    23b8:	4b12      	ldr	r3, [pc, #72]	; (2404 <_vfiprintf_r+0x234>)
    23ba:	0029      	movs	r1, r5
    23bc:	0030      	movs	r0, r6
    23be:	e000      	b.n	23c2 <_vfiprintf_r+0x1f2>
    23c0:	bf00      	nop
    23c2:	9003      	str	r0, [sp, #12]
    23c4:	9b03      	ldr	r3, [sp, #12]
    23c6:	3301      	adds	r3, #1
    23c8:	d1cc      	bne.n	2364 <_vfiprintf_r+0x194>
    23ca:	89bb      	ldrh	r3, [r7, #12]
    23cc:	065b      	lsls	r3, r3, #25
    23ce:	d500      	bpl.n	23d2 <_vfiprintf_r+0x202>
    23d0:	e77b      	b.n	22ca <_vfiprintf_r+0xfa>
    23d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    23d4:	e77b      	b.n	22ce <_vfiprintf_r+0xfe>
    23d6:	ab05      	add	r3, sp, #20
    23d8:	9300      	str	r3, [sp, #0]
    23da:	003a      	movs	r2, r7
    23dc:	4b09      	ldr	r3, [pc, #36]	; (2404 <_vfiprintf_r+0x234>)
    23de:	0029      	movs	r1, r5
    23e0:	0030      	movs	r0, r6
    23e2:	f000 f87f 	bl	24e4 <_printf_i>
    23e6:	e7ec      	b.n	23c2 <_vfiprintf_r+0x1f2>
    23e8:	00002a3c 	.word	0x00002a3c
    23ec:	00002a7c 	.word	0x00002a7c
    23f0:	00002a5c 	.word	0x00002a5c
    23f4:	00002a1c 	.word	0x00002a1c
    23f8:	00002a82 	.word	0x00002a82
    23fc:	00002a86 	.word	0x00002a86
    2400:	00000000 	.word	0x00000000
    2404:	000021ab 	.word	0x000021ab

00002408 <_printf_common>:
    2408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    240a:	0015      	movs	r5, r2
    240c:	9301      	str	r3, [sp, #4]
    240e:	688a      	ldr	r2, [r1, #8]
    2410:	690b      	ldr	r3, [r1, #16]
    2412:	9000      	str	r0, [sp, #0]
    2414:	000c      	movs	r4, r1
    2416:	4293      	cmp	r3, r2
    2418:	da00      	bge.n	241c <_printf_common+0x14>
    241a:	0013      	movs	r3, r2
    241c:	0022      	movs	r2, r4
    241e:	602b      	str	r3, [r5, #0]
    2420:	3243      	adds	r2, #67	; 0x43
    2422:	7812      	ldrb	r2, [r2, #0]
    2424:	2a00      	cmp	r2, #0
    2426:	d001      	beq.n	242c <_printf_common+0x24>
    2428:	3301      	adds	r3, #1
    242a:	602b      	str	r3, [r5, #0]
    242c:	6823      	ldr	r3, [r4, #0]
    242e:	069b      	lsls	r3, r3, #26
    2430:	d502      	bpl.n	2438 <_printf_common+0x30>
    2432:	682b      	ldr	r3, [r5, #0]
    2434:	3302      	adds	r3, #2
    2436:	602b      	str	r3, [r5, #0]
    2438:	2706      	movs	r7, #6
    243a:	6823      	ldr	r3, [r4, #0]
    243c:	401f      	ands	r7, r3
    243e:	d027      	beq.n	2490 <_printf_common+0x88>
    2440:	0023      	movs	r3, r4
    2442:	3343      	adds	r3, #67	; 0x43
    2444:	781b      	ldrb	r3, [r3, #0]
    2446:	1e5a      	subs	r2, r3, #1
    2448:	4193      	sbcs	r3, r2
    244a:	6822      	ldr	r2, [r4, #0]
    244c:	0692      	lsls	r2, r2, #26
    244e:	d430      	bmi.n	24b2 <_printf_common+0xaa>
    2450:	0022      	movs	r2, r4
    2452:	9901      	ldr	r1, [sp, #4]
    2454:	3243      	adds	r2, #67	; 0x43
    2456:	9800      	ldr	r0, [sp, #0]
    2458:	9e08      	ldr	r6, [sp, #32]
    245a:	47b0      	blx	r6
    245c:	1c43      	adds	r3, r0, #1
    245e:	d025      	beq.n	24ac <_printf_common+0xa4>
    2460:	2306      	movs	r3, #6
    2462:	6820      	ldr	r0, [r4, #0]
    2464:	682a      	ldr	r2, [r5, #0]
    2466:	68e1      	ldr	r1, [r4, #12]
    2468:	4003      	ands	r3, r0
    246a:	2500      	movs	r5, #0
    246c:	2b04      	cmp	r3, #4
    246e:	d103      	bne.n	2478 <_printf_common+0x70>
    2470:	1a8d      	subs	r5, r1, r2
    2472:	43eb      	mvns	r3, r5
    2474:	17db      	asrs	r3, r3, #31
    2476:	401d      	ands	r5, r3
    2478:	68a3      	ldr	r3, [r4, #8]
    247a:	6922      	ldr	r2, [r4, #16]
    247c:	4293      	cmp	r3, r2
    247e:	dd01      	ble.n	2484 <_printf_common+0x7c>
    2480:	1a9b      	subs	r3, r3, r2
    2482:	18ed      	adds	r5, r5, r3
    2484:	2700      	movs	r7, #0
    2486:	42bd      	cmp	r5, r7
    2488:	d120      	bne.n	24cc <_printf_common+0xc4>
    248a:	2000      	movs	r0, #0
    248c:	e010      	b.n	24b0 <_printf_common+0xa8>
    248e:	3701      	adds	r7, #1
    2490:	68e3      	ldr	r3, [r4, #12]
    2492:	682a      	ldr	r2, [r5, #0]
    2494:	1a9b      	subs	r3, r3, r2
    2496:	429f      	cmp	r7, r3
    2498:	dad2      	bge.n	2440 <_printf_common+0x38>
    249a:	0022      	movs	r2, r4
    249c:	2301      	movs	r3, #1
    249e:	3219      	adds	r2, #25
    24a0:	9901      	ldr	r1, [sp, #4]
    24a2:	9800      	ldr	r0, [sp, #0]
    24a4:	9e08      	ldr	r6, [sp, #32]
    24a6:	47b0      	blx	r6
    24a8:	1c43      	adds	r3, r0, #1
    24aa:	d1f0      	bne.n	248e <_printf_common+0x86>
    24ac:	2001      	movs	r0, #1
    24ae:	4240      	negs	r0, r0
    24b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    24b2:	2030      	movs	r0, #48	; 0x30
    24b4:	18e1      	adds	r1, r4, r3
    24b6:	3143      	adds	r1, #67	; 0x43
    24b8:	7008      	strb	r0, [r1, #0]
    24ba:	0021      	movs	r1, r4
    24bc:	1c5a      	adds	r2, r3, #1
    24be:	3145      	adds	r1, #69	; 0x45
    24c0:	7809      	ldrb	r1, [r1, #0]
    24c2:	18a2      	adds	r2, r4, r2
    24c4:	3243      	adds	r2, #67	; 0x43
    24c6:	3302      	adds	r3, #2
    24c8:	7011      	strb	r1, [r2, #0]
    24ca:	e7c1      	b.n	2450 <_printf_common+0x48>
    24cc:	0022      	movs	r2, r4
    24ce:	2301      	movs	r3, #1
    24d0:	321a      	adds	r2, #26
    24d2:	9901      	ldr	r1, [sp, #4]
    24d4:	9800      	ldr	r0, [sp, #0]
    24d6:	9e08      	ldr	r6, [sp, #32]
    24d8:	47b0      	blx	r6
    24da:	1c43      	adds	r3, r0, #1
    24dc:	d0e6      	beq.n	24ac <_printf_common+0xa4>
    24de:	3701      	adds	r7, #1
    24e0:	e7d1      	b.n	2486 <_printf_common+0x7e>
	...

000024e4 <_printf_i>:
    24e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24e6:	b08b      	sub	sp, #44	; 0x2c
    24e8:	9206      	str	r2, [sp, #24]
    24ea:	000a      	movs	r2, r1
    24ec:	3243      	adds	r2, #67	; 0x43
    24ee:	9307      	str	r3, [sp, #28]
    24f0:	9005      	str	r0, [sp, #20]
    24f2:	9204      	str	r2, [sp, #16]
    24f4:	7e0a      	ldrb	r2, [r1, #24]
    24f6:	000c      	movs	r4, r1
    24f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    24fa:	2a6e      	cmp	r2, #110	; 0x6e
    24fc:	d100      	bne.n	2500 <_printf_i+0x1c>
    24fe:	e08f      	b.n	2620 <_printf_i+0x13c>
    2500:	d817      	bhi.n	2532 <_printf_i+0x4e>
    2502:	2a63      	cmp	r2, #99	; 0x63
    2504:	d02c      	beq.n	2560 <_printf_i+0x7c>
    2506:	d808      	bhi.n	251a <_printf_i+0x36>
    2508:	2a00      	cmp	r2, #0
    250a:	d100      	bne.n	250e <_printf_i+0x2a>
    250c:	e099      	b.n	2642 <_printf_i+0x15e>
    250e:	2a58      	cmp	r2, #88	; 0x58
    2510:	d054      	beq.n	25bc <_printf_i+0xd8>
    2512:	0026      	movs	r6, r4
    2514:	3642      	adds	r6, #66	; 0x42
    2516:	7032      	strb	r2, [r6, #0]
    2518:	e029      	b.n	256e <_printf_i+0x8a>
    251a:	2a64      	cmp	r2, #100	; 0x64
    251c:	d001      	beq.n	2522 <_printf_i+0x3e>
    251e:	2a69      	cmp	r2, #105	; 0x69
    2520:	d1f7      	bne.n	2512 <_printf_i+0x2e>
    2522:	6821      	ldr	r1, [r4, #0]
    2524:	681a      	ldr	r2, [r3, #0]
    2526:	0608      	lsls	r0, r1, #24
    2528:	d523      	bpl.n	2572 <_printf_i+0x8e>
    252a:	1d11      	adds	r1, r2, #4
    252c:	6019      	str	r1, [r3, #0]
    252e:	6815      	ldr	r5, [r2, #0]
    2530:	e025      	b.n	257e <_printf_i+0x9a>
    2532:	2a73      	cmp	r2, #115	; 0x73
    2534:	d100      	bne.n	2538 <_printf_i+0x54>
    2536:	e088      	b.n	264a <_printf_i+0x166>
    2538:	d808      	bhi.n	254c <_printf_i+0x68>
    253a:	2a6f      	cmp	r2, #111	; 0x6f
    253c:	d029      	beq.n	2592 <_printf_i+0xae>
    253e:	2a70      	cmp	r2, #112	; 0x70
    2540:	d1e7      	bne.n	2512 <_printf_i+0x2e>
    2542:	2220      	movs	r2, #32
    2544:	6809      	ldr	r1, [r1, #0]
    2546:	430a      	orrs	r2, r1
    2548:	6022      	str	r2, [r4, #0]
    254a:	e003      	b.n	2554 <_printf_i+0x70>
    254c:	2a75      	cmp	r2, #117	; 0x75
    254e:	d020      	beq.n	2592 <_printf_i+0xae>
    2550:	2a78      	cmp	r2, #120	; 0x78
    2552:	d1de      	bne.n	2512 <_printf_i+0x2e>
    2554:	0022      	movs	r2, r4
    2556:	2178      	movs	r1, #120	; 0x78
    2558:	3245      	adds	r2, #69	; 0x45
    255a:	7011      	strb	r1, [r2, #0]
    255c:	4a6c      	ldr	r2, [pc, #432]	; (2710 <_printf_i+0x22c>)
    255e:	e030      	b.n	25c2 <_printf_i+0xde>
    2560:	000e      	movs	r6, r1
    2562:	681a      	ldr	r2, [r3, #0]
    2564:	3642      	adds	r6, #66	; 0x42
    2566:	1d11      	adds	r1, r2, #4
    2568:	6019      	str	r1, [r3, #0]
    256a:	6813      	ldr	r3, [r2, #0]
    256c:	7033      	strb	r3, [r6, #0]
    256e:	2301      	movs	r3, #1
    2570:	e079      	b.n	2666 <_printf_i+0x182>
    2572:	0649      	lsls	r1, r1, #25
    2574:	d5d9      	bpl.n	252a <_printf_i+0x46>
    2576:	1d11      	adds	r1, r2, #4
    2578:	6019      	str	r1, [r3, #0]
    257a:	2300      	movs	r3, #0
    257c:	5ed5      	ldrsh	r5, [r2, r3]
    257e:	2d00      	cmp	r5, #0
    2580:	da03      	bge.n	258a <_printf_i+0xa6>
    2582:	232d      	movs	r3, #45	; 0x2d
    2584:	9a04      	ldr	r2, [sp, #16]
    2586:	426d      	negs	r5, r5
    2588:	7013      	strb	r3, [r2, #0]
    258a:	4b62      	ldr	r3, [pc, #392]	; (2714 <_printf_i+0x230>)
    258c:	270a      	movs	r7, #10
    258e:	9303      	str	r3, [sp, #12]
    2590:	e02f      	b.n	25f2 <_printf_i+0x10e>
    2592:	6820      	ldr	r0, [r4, #0]
    2594:	6819      	ldr	r1, [r3, #0]
    2596:	0605      	lsls	r5, r0, #24
    2598:	d503      	bpl.n	25a2 <_printf_i+0xbe>
    259a:	1d08      	adds	r0, r1, #4
    259c:	6018      	str	r0, [r3, #0]
    259e:	680d      	ldr	r5, [r1, #0]
    25a0:	e005      	b.n	25ae <_printf_i+0xca>
    25a2:	0640      	lsls	r0, r0, #25
    25a4:	d5f9      	bpl.n	259a <_printf_i+0xb6>
    25a6:	680d      	ldr	r5, [r1, #0]
    25a8:	1d08      	adds	r0, r1, #4
    25aa:	6018      	str	r0, [r3, #0]
    25ac:	b2ad      	uxth	r5, r5
    25ae:	4b59      	ldr	r3, [pc, #356]	; (2714 <_printf_i+0x230>)
    25b0:	2708      	movs	r7, #8
    25b2:	9303      	str	r3, [sp, #12]
    25b4:	2a6f      	cmp	r2, #111	; 0x6f
    25b6:	d018      	beq.n	25ea <_printf_i+0x106>
    25b8:	270a      	movs	r7, #10
    25ba:	e016      	b.n	25ea <_printf_i+0x106>
    25bc:	3145      	adds	r1, #69	; 0x45
    25be:	700a      	strb	r2, [r1, #0]
    25c0:	4a54      	ldr	r2, [pc, #336]	; (2714 <_printf_i+0x230>)
    25c2:	9203      	str	r2, [sp, #12]
    25c4:	681a      	ldr	r2, [r3, #0]
    25c6:	6821      	ldr	r1, [r4, #0]
    25c8:	1d10      	adds	r0, r2, #4
    25ca:	6018      	str	r0, [r3, #0]
    25cc:	6815      	ldr	r5, [r2, #0]
    25ce:	0608      	lsls	r0, r1, #24
    25d0:	d522      	bpl.n	2618 <_printf_i+0x134>
    25d2:	07cb      	lsls	r3, r1, #31
    25d4:	d502      	bpl.n	25dc <_printf_i+0xf8>
    25d6:	2320      	movs	r3, #32
    25d8:	4319      	orrs	r1, r3
    25da:	6021      	str	r1, [r4, #0]
    25dc:	2710      	movs	r7, #16
    25de:	2d00      	cmp	r5, #0
    25e0:	d103      	bne.n	25ea <_printf_i+0x106>
    25e2:	2320      	movs	r3, #32
    25e4:	6822      	ldr	r2, [r4, #0]
    25e6:	439a      	bics	r2, r3
    25e8:	6022      	str	r2, [r4, #0]
    25ea:	0023      	movs	r3, r4
    25ec:	2200      	movs	r2, #0
    25ee:	3343      	adds	r3, #67	; 0x43
    25f0:	701a      	strb	r2, [r3, #0]
    25f2:	6863      	ldr	r3, [r4, #4]
    25f4:	60a3      	str	r3, [r4, #8]
    25f6:	2b00      	cmp	r3, #0
    25f8:	db5c      	blt.n	26b4 <_printf_i+0x1d0>
    25fa:	2204      	movs	r2, #4
    25fc:	6821      	ldr	r1, [r4, #0]
    25fe:	4391      	bics	r1, r2
    2600:	6021      	str	r1, [r4, #0]
    2602:	2d00      	cmp	r5, #0
    2604:	d158      	bne.n	26b8 <_printf_i+0x1d4>
    2606:	9e04      	ldr	r6, [sp, #16]
    2608:	2b00      	cmp	r3, #0
    260a:	d064      	beq.n	26d6 <_printf_i+0x1f2>
    260c:	0026      	movs	r6, r4
    260e:	9b03      	ldr	r3, [sp, #12]
    2610:	3642      	adds	r6, #66	; 0x42
    2612:	781b      	ldrb	r3, [r3, #0]
    2614:	7033      	strb	r3, [r6, #0]
    2616:	e05e      	b.n	26d6 <_printf_i+0x1f2>
    2618:	0648      	lsls	r0, r1, #25
    261a:	d5da      	bpl.n	25d2 <_printf_i+0xee>
    261c:	b2ad      	uxth	r5, r5
    261e:	e7d8      	b.n	25d2 <_printf_i+0xee>
    2620:	6809      	ldr	r1, [r1, #0]
    2622:	681a      	ldr	r2, [r3, #0]
    2624:	0608      	lsls	r0, r1, #24
    2626:	d505      	bpl.n	2634 <_printf_i+0x150>
    2628:	1d11      	adds	r1, r2, #4
    262a:	6019      	str	r1, [r3, #0]
    262c:	6813      	ldr	r3, [r2, #0]
    262e:	6962      	ldr	r2, [r4, #20]
    2630:	601a      	str	r2, [r3, #0]
    2632:	e006      	b.n	2642 <_printf_i+0x15e>
    2634:	0649      	lsls	r1, r1, #25
    2636:	d5f7      	bpl.n	2628 <_printf_i+0x144>
    2638:	1d11      	adds	r1, r2, #4
    263a:	6019      	str	r1, [r3, #0]
    263c:	6813      	ldr	r3, [r2, #0]
    263e:	8aa2      	ldrh	r2, [r4, #20]
    2640:	801a      	strh	r2, [r3, #0]
    2642:	2300      	movs	r3, #0
    2644:	9e04      	ldr	r6, [sp, #16]
    2646:	6123      	str	r3, [r4, #16]
    2648:	e054      	b.n	26f4 <_printf_i+0x210>
    264a:	681a      	ldr	r2, [r3, #0]
    264c:	1d11      	adds	r1, r2, #4
    264e:	6019      	str	r1, [r3, #0]
    2650:	6816      	ldr	r6, [r2, #0]
    2652:	2100      	movs	r1, #0
    2654:	6862      	ldr	r2, [r4, #4]
    2656:	0030      	movs	r0, r6
    2658:	f000 f91a 	bl	2890 <memchr>
    265c:	2800      	cmp	r0, #0
    265e:	d001      	beq.n	2664 <_printf_i+0x180>
    2660:	1b80      	subs	r0, r0, r6
    2662:	6060      	str	r0, [r4, #4]
    2664:	6863      	ldr	r3, [r4, #4]
    2666:	6123      	str	r3, [r4, #16]
    2668:	2300      	movs	r3, #0
    266a:	9a04      	ldr	r2, [sp, #16]
    266c:	7013      	strb	r3, [r2, #0]
    266e:	e041      	b.n	26f4 <_printf_i+0x210>
    2670:	6923      	ldr	r3, [r4, #16]
    2672:	0032      	movs	r2, r6
    2674:	9906      	ldr	r1, [sp, #24]
    2676:	9805      	ldr	r0, [sp, #20]
    2678:	9d07      	ldr	r5, [sp, #28]
    267a:	47a8      	blx	r5
    267c:	1c43      	adds	r3, r0, #1
    267e:	d043      	beq.n	2708 <_printf_i+0x224>
    2680:	6823      	ldr	r3, [r4, #0]
    2682:	2500      	movs	r5, #0
    2684:	079b      	lsls	r3, r3, #30
    2686:	d40f      	bmi.n	26a8 <_printf_i+0x1c4>
    2688:	9b09      	ldr	r3, [sp, #36]	; 0x24
    268a:	68e0      	ldr	r0, [r4, #12]
    268c:	4298      	cmp	r0, r3
    268e:	da3d      	bge.n	270c <_printf_i+0x228>
    2690:	0018      	movs	r0, r3
    2692:	e03b      	b.n	270c <_printf_i+0x228>
    2694:	0022      	movs	r2, r4
    2696:	2301      	movs	r3, #1
    2698:	3219      	adds	r2, #25
    269a:	9906      	ldr	r1, [sp, #24]
    269c:	9805      	ldr	r0, [sp, #20]
    269e:	9e07      	ldr	r6, [sp, #28]
    26a0:	47b0      	blx	r6
    26a2:	1c43      	adds	r3, r0, #1
    26a4:	d030      	beq.n	2708 <_printf_i+0x224>
    26a6:	3501      	adds	r5, #1
    26a8:	68e3      	ldr	r3, [r4, #12]
    26aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    26ac:	1a9b      	subs	r3, r3, r2
    26ae:	429d      	cmp	r5, r3
    26b0:	dbf0      	blt.n	2694 <_printf_i+0x1b0>
    26b2:	e7e9      	b.n	2688 <_printf_i+0x1a4>
    26b4:	2d00      	cmp	r5, #0
    26b6:	d0a9      	beq.n	260c <_printf_i+0x128>
    26b8:	9e04      	ldr	r6, [sp, #16]
    26ba:	0028      	movs	r0, r5
    26bc:	0039      	movs	r1, r7
    26be:	f7ff f80b 	bl	16d8 <__aeabi_uidivmod>
    26c2:	9b03      	ldr	r3, [sp, #12]
    26c4:	3e01      	subs	r6, #1
    26c6:	5c5b      	ldrb	r3, [r3, r1]
    26c8:	0028      	movs	r0, r5
    26ca:	7033      	strb	r3, [r6, #0]
    26cc:	0039      	movs	r1, r7
    26ce:	f7fe ff7d 	bl	15cc <__udivsi3>
    26d2:	1e05      	subs	r5, r0, #0
    26d4:	d1f1      	bne.n	26ba <_printf_i+0x1d6>
    26d6:	2f08      	cmp	r7, #8
    26d8:	d109      	bne.n	26ee <_printf_i+0x20a>
    26da:	6823      	ldr	r3, [r4, #0]
    26dc:	07db      	lsls	r3, r3, #31
    26de:	d506      	bpl.n	26ee <_printf_i+0x20a>
    26e0:	6863      	ldr	r3, [r4, #4]
    26e2:	6922      	ldr	r2, [r4, #16]
    26e4:	4293      	cmp	r3, r2
    26e6:	dc02      	bgt.n	26ee <_printf_i+0x20a>
    26e8:	2330      	movs	r3, #48	; 0x30
    26ea:	3e01      	subs	r6, #1
    26ec:	7033      	strb	r3, [r6, #0]
    26ee:	9b04      	ldr	r3, [sp, #16]
    26f0:	1b9b      	subs	r3, r3, r6
    26f2:	6123      	str	r3, [r4, #16]
    26f4:	9b07      	ldr	r3, [sp, #28]
    26f6:	aa09      	add	r2, sp, #36	; 0x24
    26f8:	9300      	str	r3, [sp, #0]
    26fa:	0021      	movs	r1, r4
    26fc:	9b06      	ldr	r3, [sp, #24]
    26fe:	9805      	ldr	r0, [sp, #20]
    2700:	f7ff fe82 	bl	2408 <_printf_common>
    2704:	1c43      	adds	r3, r0, #1
    2706:	d1b3      	bne.n	2670 <_printf_i+0x18c>
    2708:	2001      	movs	r0, #1
    270a:	4240      	negs	r0, r0
    270c:	b00b      	add	sp, #44	; 0x2c
    270e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2710:	00002a9e 	.word	0x00002a9e
    2714:	00002a8d 	.word	0x00002a8d

00002718 <_sbrk_r>:
    2718:	2300      	movs	r3, #0
    271a:	b570      	push	{r4, r5, r6, lr}
    271c:	4c06      	ldr	r4, [pc, #24]	; (2738 <_sbrk_r+0x20>)
    271e:	0005      	movs	r5, r0
    2720:	0008      	movs	r0, r1
    2722:	6023      	str	r3, [r4, #0]
    2724:	f7fe fb2c 	bl	d80 <_sbrk>
    2728:	1c43      	adds	r3, r0, #1
    272a:	d103      	bne.n	2734 <_sbrk_r+0x1c>
    272c:	6823      	ldr	r3, [r4, #0]
    272e:	2b00      	cmp	r3, #0
    2730:	d000      	beq.n	2734 <_sbrk_r+0x1c>
    2732:	602b      	str	r3, [r5, #0]
    2734:	bd70      	pop	{r4, r5, r6, pc}
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	20000238 	.word	0x20000238

0000273c <__sread>:
    273c:	b570      	push	{r4, r5, r6, lr}
    273e:	000c      	movs	r4, r1
    2740:	250e      	movs	r5, #14
    2742:	5f49      	ldrsh	r1, [r1, r5]
    2744:	f000 f8b2 	bl	28ac <_read_r>
    2748:	2800      	cmp	r0, #0
    274a:	db03      	blt.n	2754 <__sread+0x18>
    274c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    274e:	181b      	adds	r3, r3, r0
    2750:	6563      	str	r3, [r4, #84]	; 0x54
    2752:	bd70      	pop	{r4, r5, r6, pc}
    2754:	89a3      	ldrh	r3, [r4, #12]
    2756:	4a02      	ldr	r2, [pc, #8]	; (2760 <__sread+0x24>)
    2758:	4013      	ands	r3, r2
    275a:	81a3      	strh	r3, [r4, #12]
    275c:	e7f9      	b.n	2752 <__sread+0x16>
    275e:	46c0      	nop			; (mov r8, r8)
    2760:	ffffefff 	.word	0xffffefff

00002764 <__swrite>:
    2764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2766:	001f      	movs	r7, r3
    2768:	898b      	ldrh	r3, [r1, #12]
    276a:	0005      	movs	r5, r0
    276c:	000c      	movs	r4, r1
    276e:	0016      	movs	r6, r2
    2770:	05db      	lsls	r3, r3, #23
    2772:	d505      	bpl.n	2780 <__swrite+0x1c>
    2774:	230e      	movs	r3, #14
    2776:	5ec9      	ldrsh	r1, [r1, r3]
    2778:	2200      	movs	r2, #0
    277a:	2302      	movs	r3, #2
    277c:	f000 f874 	bl	2868 <_lseek_r>
    2780:	89a3      	ldrh	r3, [r4, #12]
    2782:	4a05      	ldr	r2, [pc, #20]	; (2798 <__swrite+0x34>)
    2784:	0028      	movs	r0, r5
    2786:	4013      	ands	r3, r2
    2788:	81a3      	strh	r3, [r4, #12]
    278a:	0032      	movs	r2, r6
    278c:	230e      	movs	r3, #14
    278e:	5ee1      	ldrsh	r1, [r4, r3]
    2790:	003b      	movs	r3, r7
    2792:	f000 f81f 	bl	27d4 <_write_r>
    2796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2798:	ffffefff 	.word	0xffffefff

0000279c <__sseek>:
    279c:	b570      	push	{r4, r5, r6, lr}
    279e:	000c      	movs	r4, r1
    27a0:	250e      	movs	r5, #14
    27a2:	5f49      	ldrsh	r1, [r1, r5]
    27a4:	f000 f860 	bl	2868 <_lseek_r>
    27a8:	89a3      	ldrh	r3, [r4, #12]
    27aa:	1c42      	adds	r2, r0, #1
    27ac:	d103      	bne.n	27b6 <__sseek+0x1a>
    27ae:	4a05      	ldr	r2, [pc, #20]	; (27c4 <__sseek+0x28>)
    27b0:	4013      	ands	r3, r2
    27b2:	81a3      	strh	r3, [r4, #12]
    27b4:	bd70      	pop	{r4, r5, r6, pc}
    27b6:	2280      	movs	r2, #128	; 0x80
    27b8:	0152      	lsls	r2, r2, #5
    27ba:	4313      	orrs	r3, r2
    27bc:	81a3      	strh	r3, [r4, #12]
    27be:	6560      	str	r0, [r4, #84]	; 0x54
    27c0:	e7f8      	b.n	27b4 <__sseek+0x18>
    27c2:	46c0      	nop			; (mov r8, r8)
    27c4:	ffffefff 	.word	0xffffefff

000027c8 <__sclose>:
    27c8:	b510      	push	{r4, lr}
    27ca:	230e      	movs	r3, #14
    27cc:	5ec9      	ldrsh	r1, [r1, r3]
    27ce:	f000 f815 	bl	27fc <_close_r>
    27d2:	bd10      	pop	{r4, pc}

000027d4 <_write_r>:
    27d4:	b570      	push	{r4, r5, r6, lr}
    27d6:	0005      	movs	r5, r0
    27d8:	0008      	movs	r0, r1
    27da:	0011      	movs	r1, r2
    27dc:	2200      	movs	r2, #0
    27de:	4c06      	ldr	r4, [pc, #24]	; (27f8 <_write_r+0x24>)
    27e0:	6022      	str	r2, [r4, #0]
    27e2:	001a      	movs	r2, r3
    27e4:	f7fe feba 	bl	155c <_write>
    27e8:	1c43      	adds	r3, r0, #1
    27ea:	d103      	bne.n	27f4 <_write_r+0x20>
    27ec:	6823      	ldr	r3, [r4, #0]
    27ee:	2b00      	cmp	r3, #0
    27f0:	d000      	beq.n	27f4 <_write_r+0x20>
    27f2:	602b      	str	r3, [r5, #0]
    27f4:	bd70      	pop	{r4, r5, r6, pc}
    27f6:	46c0      	nop			; (mov r8, r8)
    27f8:	20000238 	.word	0x20000238

000027fc <_close_r>:
    27fc:	2300      	movs	r3, #0
    27fe:	b570      	push	{r4, r5, r6, lr}
    2800:	4c06      	ldr	r4, [pc, #24]	; (281c <_close_r+0x20>)
    2802:	0005      	movs	r5, r0
    2804:	0008      	movs	r0, r1
    2806:	6023      	str	r3, [r4, #0]
    2808:	f7fe facc 	bl	da4 <_close>
    280c:	1c43      	adds	r3, r0, #1
    280e:	d103      	bne.n	2818 <_close_r+0x1c>
    2810:	6823      	ldr	r3, [r4, #0]
    2812:	2b00      	cmp	r3, #0
    2814:	d000      	beq.n	2818 <_close_r+0x1c>
    2816:	602b      	str	r3, [r5, #0]
    2818:	bd70      	pop	{r4, r5, r6, pc}
    281a:	46c0      	nop			; (mov r8, r8)
    281c:	20000238 	.word	0x20000238

00002820 <_fstat_r>:
    2820:	2300      	movs	r3, #0
    2822:	b570      	push	{r4, r5, r6, lr}
    2824:	4c06      	ldr	r4, [pc, #24]	; (2840 <_fstat_r+0x20>)
    2826:	0005      	movs	r5, r0
    2828:	0008      	movs	r0, r1
    282a:	0011      	movs	r1, r2
    282c:	6023      	str	r3, [r4, #0]
    282e:	f7fe fabc 	bl	daa <_fstat>
    2832:	1c43      	adds	r3, r0, #1
    2834:	d103      	bne.n	283e <_fstat_r+0x1e>
    2836:	6823      	ldr	r3, [r4, #0]
    2838:	2b00      	cmp	r3, #0
    283a:	d000      	beq.n	283e <_fstat_r+0x1e>
    283c:	602b      	str	r3, [r5, #0]
    283e:	bd70      	pop	{r4, r5, r6, pc}
    2840:	20000238 	.word	0x20000238

00002844 <_isatty_r>:
    2844:	2300      	movs	r3, #0
    2846:	b570      	push	{r4, r5, r6, lr}
    2848:	4c06      	ldr	r4, [pc, #24]	; (2864 <_isatty_r+0x20>)
    284a:	0005      	movs	r5, r0
    284c:	0008      	movs	r0, r1
    284e:	6023      	str	r3, [r4, #0]
    2850:	f7fe fab0 	bl	db4 <_isatty>
    2854:	1c43      	adds	r3, r0, #1
    2856:	d103      	bne.n	2860 <_isatty_r+0x1c>
    2858:	6823      	ldr	r3, [r4, #0]
    285a:	2b00      	cmp	r3, #0
    285c:	d000      	beq.n	2860 <_isatty_r+0x1c>
    285e:	602b      	str	r3, [r5, #0]
    2860:	bd70      	pop	{r4, r5, r6, pc}
    2862:	46c0      	nop			; (mov r8, r8)
    2864:	20000238 	.word	0x20000238

00002868 <_lseek_r>:
    2868:	b570      	push	{r4, r5, r6, lr}
    286a:	0005      	movs	r5, r0
    286c:	0008      	movs	r0, r1
    286e:	0011      	movs	r1, r2
    2870:	2200      	movs	r2, #0
    2872:	4c06      	ldr	r4, [pc, #24]	; (288c <_lseek_r+0x24>)
    2874:	6022      	str	r2, [r4, #0]
    2876:	001a      	movs	r2, r3
    2878:	f7fe fa9e 	bl	db8 <_lseek>
    287c:	1c43      	adds	r3, r0, #1
    287e:	d103      	bne.n	2888 <_lseek_r+0x20>
    2880:	6823      	ldr	r3, [r4, #0]
    2882:	2b00      	cmp	r3, #0
    2884:	d000      	beq.n	2888 <_lseek_r+0x20>
    2886:	602b      	str	r3, [r5, #0]
    2888:	bd70      	pop	{r4, r5, r6, pc}
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	20000238 	.word	0x20000238

00002890 <memchr>:
    2890:	b2c9      	uxtb	r1, r1
    2892:	1882      	adds	r2, r0, r2
    2894:	4290      	cmp	r0, r2
    2896:	d101      	bne.n	289c <memchr+0xc>
    2898:	2000      	movs	r0, #0
    289a:	4770      	bx	lr
    289c:	7803      	ldrb	r3, [r0, #0]
    289e:	428b      	cmp	r3, r1
    28a0:	d0fb      	beq.n	289a <memchr+0xa>
    28a2:	3001      	adds	r0, #1
    28a4:	e7f6      	b.n	2894 <memchr+0x4>

000028a6 <__malloc_lock>:
    28a6:	4770      	bx	lr

000028a8 <__malloc_unlock>:
    28a8:	4770      	bx	lr
	...

000028ac <_read_r>:
    28ac:	b570      	push	{r4, r5, r6, lr}
    28ae:	0005      	movs	r5, r0
    28b0:	0008      	movs	r0, r1
    28b2:	0011      	movs	r1, r2
    28b4:	2200      	movs	r2, #0
    28b6:	4c06      	ldr	r4, [pc, #24]	; (28d0 <_read_r+0x24>)
    28b8:	6022      	str	r2, [r4, #0]
    28ba:	001a      	movs	r2, r3
    28bc:	f7fe fe6a 	bl	1594 <_read>
    28c0:	1c43      	adds	r3, r0, #1
    28c2:	d103      	bne.n	28cc <_read_r+0x20>
    28c4:	6823      	ldr	r3, [r4, #0]
    28c6:	2b00      	cmp	r3, #0
    28c8:	d000      	beq.n	28cc <_read_r+0x20>
    28ca:	602b      	str	r3, [r5, #0]
    28cc:	bd70      	pop	{r4, r5, r6, pc}
    28ce:	46c0      	nop			; (mov r8, r8)
    28d0:	20000238 	.word	0x20000238
    28d4:	656c6449 	.word	0x656c6449
    28d8:	00000000 	.word	0x00000000
    28dc:	682f2e2e 	.word	0x682f2e2e
    28e0:	732f6c61 	.word	0x732f6c61
    28e4:	682f6372 	.word	0x682f6372
    28e8:	635f6c61 	.word	0x635f6c61
    28ec:	6e656c61 	.word	0x6e656c61
    28f0:	2e726164 	.word	0x2e726164
    28f4:	00000063 	.word	0x00000063
    28f8:	682f2e2e 	.word	0x682f2e2e
    28fc:	732f6c61 	.word	0x732f6c61
    2900:	682f6372 	.word	0x682f6372
    2904:	755f6c61 	.word	0x755f6c61
    2908:	74726173 	.word	0x74726173
    290c:	7973615f 	.word	0x7973615f
    2910:	632e636e 	.word	0x632e636e
    2914:	00000000 	.word	0x00000000
    2918:	682f2e2e 	.word	0x682f2e2e
    291c:	752f6c61 	.word	0x752f6c61
    2920:	736c6974 	.word	0x736c6974
    2924:	6372732f 	.word	0x6372732f
    2928:	6974752f 	.word	0x6974752f
    292c:	725f736c 	.word	0x725f736c
    2930:	62676e69 	.word	0x62676e69
    2934:	65666675 	.word	0x65666675
    2938:	00632e72 	.word	0x00632e72

0000293c <_map>:
    293c:	0000000f 0000000f 682f2e2e 652f6c70     ........../hpl/e
    294c:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    295c:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    296c:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
    297c:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    298c:	0000632e 0a0d0a0d 3d3d2023 3d3d3d3d     .c......# ======
    299c:	3d3d3d3d 00000d3d 2e302e31 00000030     =====...1.0.0...
    29ac:	756d2023 5f62696c 6e696c62 2520796b     # mulib_blinky %
    29bc:	73203a73 68206565 73707474 672f2f3a     s: see https://g
    29cc:	75687469 6f632e62 64722f6d 726f6f70     ithub.com/rdpoor
    29dc:	6c756d2f 0a0d6269 00000000 74747562     /mulib......butt
    29ec:	70206e6f 73736572 61206465 6c252074     on pressed at %l
    29fc:	000a0d75 74747542 49206e6f 7265746e     u...Button Inter
    2a0c:	74707572 00000000 0044454c              rupt....LED.

00002a18 <_global_impure_ptr>:
    2a18:	20000004                                ... 

00002a1c <__sf_fake_stderr>:
	...

00002a3c <__sf_fake_stdin>:
	...

00002a5c <__sf_fake_stdout>:
	...
    2a7c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2a8c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2a9c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2aac:	00006665                                ef..

00002ab0 <_init>:
    2ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ab2:	46c0      	nop			; (mov r8, r8)
    2ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2ab6:	bc08      	pop	{r3}
    2ab8:	469e      	mov	lr, r3
    2aba:	4770      	bx	lr

00002abc <__init_array_start>:
    2abc:	000000dd 	.word	0x000000dd

00002ac0 <_fini>:
    2ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ac2:	46c0      	nop			; (mov r8, r8)
    2ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2ac6:	bc08      	pop	{r3}
    2ac8:	469e      	mov	lr, r3
    2aca:	4770      	bx	lr

00002acc <__fini_array_start>:
    2acc:	000000b5 	.word	0x000000b5
