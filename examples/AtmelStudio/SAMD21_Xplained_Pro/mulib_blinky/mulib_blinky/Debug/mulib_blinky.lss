
mulib_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000219c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  0000219c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000154  20000064  00002200  00020064  2**2
                  ALLOC
  3 .stack        00002000  200001b8  00002354  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000203d0  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000342b  00000000  00000000  000404b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004c25  00000000  00000000  000438e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006b0  00000000  00000000  00048505  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000648  00000000  00000000  00048bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000184bf  00000000  00000000  000491fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d124  00000000  00000000  000616bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000866a3  00000000  00000000  0006e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000015d0  00000000  00000000  000f4e84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 21 00 20 6d 05 00 00 69 05 00 00 69 05 00 00     .!. m...i...i...
	...
      2c:	69 05 00 00 00 00 00 00 00 00 00 00 69 05 00 00     i...........i...
      3c:	69 05 00 00 69 05 00 00 69 05 00 00 69 05 00 00     i...i...i...i...
      4c:	09 0c 00 00 01 0a 00 00 69 05 00 00 69 05 00 00     ........i...i...
      5c:	69 05 00 00 69 05 00 00 69 05 00 00 69 05 00 00     i...i...i...i...
      6c:	69 05 00 00 69 05 00 00 69 05 00 00 69 05 00 00     i...i...i...i...
      7c:	69 05 00 00 69 05 00 00 69 05 00 00 69 05 00 00     i...i...i...i...
      8c:	69 05 00 00 69 05 00 00 69 05 00 00 69 05 00 00     i...i...i...i...
      9c:	69 05 00 00 69 05 00 00 69 05 00 00 69 05 00 00     i...i...i...i...
      ac:	69 05 00 00 00 00 00 00                             i.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	0000219c 	.word	0x0000219c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	0000219c 	.word	0x0000219c
     10c:	0000219c 	.word	0x0000219c
     110:	00000000 	.word	0x00000000

00000114 <default_idle_fn>:
}

static void *default_idle_fn(void *self, void *arg) {
  // the default idle task doesn't do much...
  return self;
}
     114:	4770      	bx	lr
	...

00000118 <sched_task_at>:
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
  }
  sched->event_queue_count -= 1;
}

static mu_sched_err_t sched_task_at(mu_sched_t *sched, mu_task_t *task, mu_time_t time) {
     118:	b5f0      	push	{r4, r5, r6, r7, lr}
     11a:	b083      	sub	sp, #12
     11c:	0004      	movs	r4, r0
     11e:	9101      	str	r1, [sp, #4]
     120:	9200      	str	r2, [sp, #0]
  mu_sched_event_t *event;
  size_t index;

  if (sched->event_queue_count >= sched->event_queue_capacity) {
     122:	6885      	ldr	r5, [r0, #8]
    return MU_SCHED_ERR_FULL;
     124:	2002      	movs	r0, #2
  if (sched->event_queue_count >= sched->event_queue_capacity) {
     126:	6863      	ldr	r3, [r4, #4]
     128:	429d      	cmp	r5, r3
     12a:	d301      	bcc.n	130 <sched_task_at+0x18>
  // fill in the event
  event = &sched->event_queue[index];
  event_init(event, task, time);
  sched->event_queue_count += 1;
  return MU_SCHED_ERR_NONE;
}
     12c:	b003      	add	sp, #12
     12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (sched->event_queue_count == 0) {
     130:	2d00      	cmp	r5, #0
     132:	d10c      	bne.n	14e <sched_task_at+0x36>
  event = &sched->event_queue[index];
     134:	00ed      	lsls	r5, r5, #3
     136:	6823      	ldr	r3, [r4, #0]
     138:	469c      	mov	ip, r3
     13a:	4465      	add	r5, ip
  event->task = task;
     13c:	9b01      	ldr	r3, [sp, #4]
     13e:	606b      	str	r3, [r5, #4]
  event->time = time;
     140:	9b00      	ldr	r3, [sp, #0]
     142:	602b      	str	r3, [r5, #0]
  sched->event_queue_count += 1;
     144:	68a3      	ldr	r3, [r4, #8]
     146:	3301      	adds	r3, #1
     148:	60a3      	str	r3, [r4, #8]
  return MU_SCHED_ERR_NONE;
     14a:	2000      	movs	r0, #0
     14c:	e7ee      	b.n	12c <sched_task_at+0x14>
#else
// linear search for insertion point
static size_t find_insertion_index(mu_sched_t *sched, mu_time_t time) {
  mu_sched_event_t *events = sched->event_queue;

  for (size_t i = sched->event_queue_count - 1; i >= 0; i--) {
     14e:	1e6f      	subs	r7, r5, #1
     150:	4b12      	ldr	r3, [pc, #72]	; (19c <sched_task_at+0x84>)
     152:	469c      	mov	ip, r3
     154:	4465      	add	r5, ip
     156:	00ed      	lsls	r5, r5, #3
     158:	6823      	ldr	r3, [r4, #0]
     15a:	469c      	mov	ip, r3
     15c:	4465      	add	r5, ip
    if (mu_time_precedes(time, events[i].time)) {
     15e:	4e10      	ldr	r6, [pc, #64]	; (1a0 <sched_task_at+0x88>)
     160:	6829      	ldr	r1, [r5, #0]
     162:	9800      	ldr	r0, [sp, #0]
     164:	47b0      	blx	r6
     166:	2800      	cmp	r0, #0
     168:	d104      	bne.n	174 <sched_task_at+0x5c>
     16a:	3d08      	subs	r5, #8
      return i+1;    // precedes incumbent
    } else if (i == 0) {
     16c:	2f00      	cmp	r7, #0
     16e:	d012      	beq.n	196 <sched_task_at+0x7e>
  for (size_t i = sched->event_queue_count - 1; i >= 0; i--) {
     170:	3f01      	subs	r7, #1
     172:	e7f5      	b.n	160 <sched_task_at+0x48>
      return i+1;    // precedes incumbent
     174:	1c7d      	adds	r5, r7, #1
  int to_move = sched->event_queue_count - index;
     176:	68a3      	ldr	r3, [r4, #8]
     178:	1b5a      	subs	r2, r3, r5
  if (to_move > 0) {
     17a:	2a00      	cmp	r2, #0
     17c:	ddda      	ble.n	134 <sched_task_at+0x1c>
    mu_sched_event_t *src = &sched->event_queue[index];
     17e:	00eb      	lsls	r3, r5, #3
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     180:	00d2      	lsls	r2, r2, #3
    mu_sched_event_t *src = &sched->event_queue[index];
     182:	6821      	ldr	r1, [r4, #0]
     184:	18c9      	adds	r1, r1, r3
    mu_sched_event_t *dst = &sched->event_queue[index + 1];
     186:	3308      	adds	r3, #8
     188:	0018      	movs	r0, r3
     18a:	6823      	ldr	r3, [r4, #0]
     18c:	469c      	mov	ip, r3
     18e:	4460      	add	r0, ip
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     190:	4b04      	ldr	r3, [pc, #16]	; (1a4 <sched_task_at+0x8c>)
     192:	4798      	blx	r3
     194:	e7ce      	b.n	134 <sched_task_at+0x1c>
      return 0;      // follows all
     196:	003d      	movs	r5, r7
     198:	e7ed      	b.n	176 <sched_task_at+0x5e>
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	1fffffff 	.word	0x1fffffff
     1a0:	00000419 	.word	0x00000419
     1a4:	00001093 	.word	0x00001093

000001a8 <mu_sched_reset>:
mu_sched_t *mu_sched_reset(mu_sched_t *sched) {
     1a8:	b570      	push	{r4, r5, r6, lr}
     1aa:	0004      	movs	r4, r0
  sched->event_queue_count = 0;
     1ac:	2500      	movs	r5, #0
     1ae:	6085      	str	r5, [r0, #8]
  mu_spscq_reset(sched->isr_queue);
     1b0:	68c0      	ldr	r0, [r0, #12]
     1b2:	4b02      	ldr	r3, [pc, #8]	; (1bc <mu_sched_reset+0x14>)
     1b4:	4798      	blx	r3
  sched->current_event.task = NULL;
     1b6:	61e5      	str	r5, [r4, #28]
}
     1b8:	0020      	movs	r0, r4
     1ba:	bd70      	pop	{r4, r5, r6, pc}
     1bc:	00000337 	.word	0x00000337

000001c0 <mu_sched_init>:
                          mu_spscq_t *isr_queue) {
     1c0:	b570      	push	{r4, r5, r6, lr}
     1c2:	0004      	movs	r4, r0
  sched->event_queue = event_queue;
     1c4:	6001      	str	r1, [r0, #0]
  sched->event_queue_capacity = event_queue_capacity;
     1c6:	6042      	str	r2, [r0, #4]
  sched->isr_queue = isr_queue;
     1c8:	60c3      	str	r3, [r0, #12]
  sched->clock_fn = mu_time_now;
     1ca:	4b06      	ldr	r3, [pc, #24]	; (1e4 <mu_sched_init+0x24>)
     1cc:	6103      	str	r3, [r0, #16]
  sched->idle_task = &s_default_idle_task;
     1ce:	4806      	ldr	r0, [pc, #24]	; (1e8 <mu_sched_init+0x28>)
     1d0:	6160      	str	r0, [r4, #20]
  mu_task_init(&s_default_idle_task, default_idle_fn, NULL, "Idle");
     1d2:	4b06      	ldr	r3, [pc, #24]	; (1ec <mu_sched_init+0x2c>)
     1d4:	2200      	movs	r2, #0
     1d6:	4906      	ldr	r1, [pc, #24]	; (1f0 <mu_sched_init+0x30>)
     1d8:	4d06      	ldr	r5, [pc, #24]	; (1f4 <mu_sched_init+0x34>)
     1da:	47a8      	blx	r5
  return mu_sched_reset(sched);
     1dc:	0020      	movs	r0, r4
     1de:	4b06      	ldr	r3, [pc, #24]	; (1f8 <mu_sched_init+0x38>)
     1e0:	4798      	blx	r3
}
     1e2:	bd70      	pop	{r4, r5, r6, pc}
     1e4:	00000439 	.word	0x00000439
     1e8:	20000080 	.word	0x20000080
     1ec:	00002000 	.word	0x00002000
     1f0:	00000115 	.word	0x00000115
     1f4:	000003af 	.word	0x000003af
     1f8:	000001a9 	.word	0x000001a9

000001fc <mu_sched_get_current_time>:
mu_time_t mu_sched_get_current_time(mu_sched_t *sched) {
     1fc:	b510      	push	{r4, lr}
  return sched->clock_fn();
     1fe:	6903      	ldr	r3, [r0, #16]
     200:	4798      	blx	r3
}
     202:	bd10      	pop	{r4, pc}

00000204 <mu_sched_get_next_event>:
  if (sched->event_queue_count == 0) {
     204:	6883      	ldr	r3, [r0, #8]
     206:	2b00      	cmp	r3, #0
     208:	d006      	beq.n	218 <mu_sched_get_next_event+0x14>
    return &sched->event_queue[sched->event_queue_count - 1];
     20a:	4a04      	ldr	r2, [pc, #16]	; (21c <mu_sched_get_next_event+0x18>)
     20c:	4694      	mov	ip, r2
     20e:	4463      	add	r3, ip
     210:	00db      	lsls	r3, r3, #3
     212:	6800      	ldr	r0, [r0, #0]
     214:	18c0      	adds	r0, r0, r3
}
     216:	4770      	bx	lr
    return NULL;
     218:	2000      	movs	r0, #0
     21a:	e7fc      	b.n	216 <mu_sched_get_next_event+0x12>
     21c:	1fffffff 	.word	0x1fffffff

00000220 <mu_sched_step>:
mu_sched_err_t mu_sched_step(mu_sched_t *sched) {
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	b083      	sub	sp, #12
     224:	0004      	movs	r4, r0
  mu_time_t now = mu_sched_get_current_time(sched);
     226:	4b1a      	ldr	r3, [pc, #104]	; (290 <mu_sched_step+0x70>)
     228:	4798      	blx	r3
     22a:	0005      	movs	r5, r0
  while (mu_spscq_get(sched->isr_queue, (void **)&task) != MU_CQUEUE_ERR_EMPTY) {
     22c:	4e19      	ldr	r6, [pc, #100]	; (294 <mu_sched_step+0x74>)
  return sched_task_at(sched, task, at);
     22e:	4f1a      	ldr	r7, [pc, #104]	; (298 <mu_sched_step+0x78>)
  while (mu_spscq_get(sched->isr_queue, (void **)&task) != MU_CQUEUE_ERR_EMPTY) {
     230:	a901      	add	r1, sp, #4
     232:	68e0      	ldr	r0, [r4, #12]
     234:	47b0      	blx	r6
     236:	2801      	cmp	r0, #1
     238:	d007      	beq.n	24a <mu_sched_step+0x2a>
  return sched_task_at(sched, task, at);
     23a:	002a      	movs	r2, r5
     23c:	9901      	ldr	r1, [sp, #4]
     23e:	0020      	movs	r0, r4
     240:	47b8      	blx	r7
    if (err != MU_SCHED_ERR_NONE) {
     242:	2800      	cmp	r0, #0
     244:	d0f4      	beq.n	230 <mu_sched_step+0x10>
}
     246:	b003      	add	sp, #12
     248:	bdf0      	pop	{r4, r5, r6, r7, pc}
  event = mu_sched_get_next_event(sched);
     24a:	0020      	movs	r0, r4
     24c:	4b13      	ldr	r3, [pc, #76]	; (29c <mu_sched_step+0x7c>)
     24e:	4798      	blx	r3
     250:	1e06      	subs	r6, r0, #0
  if (event != NULL) {
     252:	d005      	beq.n	260 <mu_sched_step+0x40>
    if (!mu_time_follows(mu_sched_event_get_time(event), now)) {
     254:	0029      	movs	r1, r5
     256:	6800      	ldr	r0, [r0, #0]
     258:	4b11      	ldr	r3, [pc, #68]	; (2a0 <mu_sched_step+0x80>)
     25a:	4798      	blx	r3
     25c:	2800      	cmp	r0, #0
     25e:	d005      	beq.n	26c <mu_sched_step+0x4c>
  mu_task_call(sched->idle_task, sched);
     260:	6960      	ldr	r0, [r4, #20]
     262:	0021      	movs	r1, r4
     264:	4b0f      	ldr	r3, [pc, #60]	; (2a4 <mu_sched_step+0x84>)
     266:	4798      	blx	r3
  return MU_SCHED_ERR_NONE;
     268:	2000      	movs	r0, #0
     26a:	e7ec      	b.n	246 <mu_sched_step+0x26>
      memcpy(&(sched->current_event), event, sizeof(mu_sched_event_t));
     26c:	0020      	movs	r0, r4
     26e:	3018      	adds	r0, #24
     270:	2208      	movs	r2, #8
     272:	0031      	movs	r1, r6
     274:	4b0c      	ldr	r3, [pc, #48]	; (2a8 <mu_sched_step+0x88>)
     276:	4798      	blx	r3
  return &sched->event_queue[--sched->event_queue_count];
     278:	68a3      	ldr	r3, [r4, #8]
     27a:	3b01      	subs	r3, #1
     27c:	60a3      	str	r3, [r4, #8]
      mu_task_call(sched->current_event.task, sched);
     27e:	0021      	movs	r1, r4
     280:	69e0      	ldr	r0, [r4, #28]
     282:	4b08      	ldr	r3, [pc, #32]	; (2a4 <mu_sched_step+0x84>)
     284:	4798      	blx	r3
      sched->current_event.task = NULL;
     286:	2300      	movs	r3, #0
     288:	61e3      	str	r3, [r4, #28]
      return MU_SCHED_ERR_NONE;
     28a:	2000      	movs	r0, #0
     28c:	e7db      	b.n	246 <mu_sched_step+0x26>
     28e:	46c0      	nop			; (mov r8, r8)
     290:	000001fd 	.word	0x000001fd
     294:	00000385 	.word	0x00000385
     298:	00000119 	.word	0x00000119
     29c:	00000205 	.word	0x00000205
     2a0:	00000425 	.word	0x00000425
     2a4:	000003c1 	.word	0x000003c1
     2a8:	00001081 	.word	0x00001081

000002ac <mu_sched_task_now>:
mu_sched_err_t mu_sched_task_now(mu_sched_t *sched, mu_task_t *task) {
     2ac:	b570      	push	{r4, r5, r6, lr}
     2ae:	0004      	movs	r4, r0
     2b0:	000d      	movs	r5, r1
  return sched_task_at(sched, task, mu_sched_get_current_time(sched));
     2b2:	4b04      	ldr	r3, [pc, #16]	; (2c4 <mu_sched_task_now+0x18>)
     2b4:	4798      	blx	r3
     2b6:	0002      	movs	r2, r0
     2b8:	0029      	movs	r1, r5
     2ba:	0020      	movs	r0, r4
     2bc:	4b02      	ldr	r3, [pc, #8]	; (2c8 <mu_sched_task_now+0x1c>)
     2be:	4798      	blx	r3
}
     2c0:	bd70      	pop	{r4, r5, r6, pc}
     2c2:	46c0      	nop			; (mov r8, r8)
     2c4:	000001fd 	.word	0x000001fd
     2c8:	00000119 	.word	0x00000119

000002cc <mu_sched_reschedule_in>:
mu_sched_err_t mu_sched_reschedule_in(mu_sched_t *sched, mu_time_dt in) {
     2cc:	b570      	push	{r4, r5, r6, lr}
     2ce:	0004      	movs	r4, r0
  if (sched->current_event.task == NULL) {
     2d0:	69c3      	ldr	r3, [r0, #28]
     2d2:	2b00      	cmp	r3, #0
     2d4:	d00d      	beq.n	2f2 <mu_sched_reschedule_in+0x26>
    return MU_SCHED_ERR_NOT_FOUND;
     2d6:	2003      	movs	r0, #3
  if (!event) {
     2d8:	0023      	movs	r3, r4
     2da:	3318      	adds	r3, #24
     2dc:	d008      	beq.n	2f0 <mu_sched_reschedule_in+0x24>
  mu_task_t *task = event->task;
     2de:	69e5      	ldr	r5, [r4, #28]
  return sched_task_at(sched, task, mu_time_offset(time, in));
     2e0:	69a0      	ldr	r0, [r4, #24]
     2e2:	4b05      	ldr	r3, [pc, #20]	; (2f8 <mu_sched_reschedule_in+0x2c>)
     2e4:	4798      	blx	r3
     2e6:	0002      	movs	r2, r0
     2e8:	0029      	movs	r1, r5
     2ea:	0020      	movs	r0, r4
     2ec:	4b03      	ldr	r3, [pc, #12]	; (2fc <mu_sched_reschedule_in+0x30>)
     2ee:	4798      	blx	r3
}
     2f0:	bd70      	pop	{r4, r5, r6, pc}
    return MU_SCHED_ERR_NOT_FOUND;
     2f2:	2003      	movs	r0, #3
     2f4:	e7fc      	b.n	2f0 <mu_sched_reschedule_in+0x24>
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	00000401 	.word	0x00000401
     2fc:	00000119 	.word	0x00000119

00000300 <mu_sched_task_from_isr>:
mu_sched_err_t mu_sched_task_from_isr(mu_sched_t *sched, mu_task_t *task) {
     300:	b510      	push	{r4, lr}
  if (mu_spscq_put(sched->isr_queue, task) == MU_CQUEUE_ERR_FULL) {
     302:	68c0      	ldr	r0, [r0, #12]
     304:	4b03      	ldr	r3, [pc, #12]	; (314 <mu_sched_task_from_isr+0x14>)
     306:	4798      	blx	r3
    return MU_SCHED_ERR_NONE;
     308:	3802      	subs	r0, #2
     30a:	4243      	negs	r3, r0
     30c:	4158      	adcs	r0, r3
     30e:	0040      	lsls	r0, r0, #1
}
     310:	bd10      	pop	{r4, pc}
     312:	46c0      	nop			; (mov r8, r8)
     314:	00000355 	.word	0x00000355

00000318 <mu_spscq_init>:
// =============================================================================
// public code

mu_spscq_err_t mu_spscq_init(mu_spscq_t *q,
                               mu_spscq_item_t *store,
                               uint16_t capacity) {
     318:	b510      	push	{r4, lr}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
    return MU_CQUEUE_ERR_SIZE;
     31a:	2303      	movs	r3, #3
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     31c:	2a00      	cmp	r2, #0
     31e:	d101      	bne.n	324 <mu_spscq_init+0xc>
  }
  q->mask = capacity - 1;
  q->store = store;
  return mu_spscq_reset(q);
}
     320:	0018      	movs	r0, r3
     322:	bd10      	pop	{r4, pc}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     324:	1e54      	subs	r4, r2, #1
     326:	4222      	tst	r2, r4
     328:	d1fa      	bne.n	320 <mu_spscq_init+0x8>
  q->mask = capacity - 1;
     32a:	8004      	strh	r4, [r0, #0]
  q->store = store;
     32c:	6081      	str	r1, [r0, #8]

mu_spscq_err_t mu_spscq_reset(mu_spscq_t *q) {
  q->head = 0;
     32e:	2300      	movs	r3, #0
     330:	8043      	strh	r3, [r0, #2]
  q->tail = 0;
     332:	8083      	strh	r3, [r0, #4]
  return mu_spscq_reset(q);
     334:	e7f4      	b.n	320 <mu_spscq_init+0x8>

00000336 <mu_spscq_reset>:
  q->head = 0;
     336:	2300      	movs	r3, #0
     338:	8043      	strh	r3, [r0, #2]
  q->tail = 0;
     33a:	8083      	strh	r3, [r0, #4]
  return MU_CQUEUE_ERR_NONE;
}
     33c:	2000      	movs	r0, #0
     33e:	4770      	bx	lr

00000340 <mu_spscq_is_full>:

bool mu_spscq_is_empty(mu_spscq_t *q) { return q->head == q->tail; }

bool mu_spscq_is_full(mu_spscq_t *q) {
  // would advancing tail by 1 make it catch up with head?
  return ((q->tail + 1) & q->mask) == q->head;
     340:	8883      	ldrh	r3, [r0, #4]
     342:	8842      	ldrh	r2, [r0, #2]
     344:	3301      	adds	r3, #1
     346:	8800      	ldrh	r0, [r0, #0]
     348:	4018      	ands	r0, r3
     34a:	1a80      	subs	r0, r0, r2
     34c:	4243      	negs	r3, r0
     34e:	4158      	adcs	r0, r3
     350:	b2c0      	uxtb	r0, r0
}
     352:	4770      	bx	lr

00000354 <mu_spscq_put>:

mu_spscq_err_t mu_spscq_put(mu_spscq_t *q, mu_spscq_item_t item) {
     354:	b570      	push	{r4, r5, r6, lr}
     356:	0004      	movs	r4, r0
     358:	000d      	movs	r5, r1
  if (mu_spscq_is_full(q)) {
     35a:	4b09      	ldr	r3, [pc, #36]	; (380 <mu_spscq_put+0x2c>)
     35c:	4798      	blx	r3
    return MU_CQUEUE_ERR_FULL;
     35e:	2302      	movs	r3, #2
  if (mu_spscq_is_full(q)) {
     360:	2800      	cmp	r0, #0
     362:	d001      	beq.n	368 <mu_spscq_put+0x14>
  }
  q->store[q->tail] = item;
  q->tail = (q->tail + 1) & q->mask;
  return MU_CQUEUE_ERR_NONE;
}
     364:	0018      	movs	r0, r3
     366:	bd70      	pop	{r4, r5, r6, pc}
  q->store[q->tail] = item;
     368:	88a3      	ldrh	r3, [r4, #4]
     36a:	009b      	lsls	r3, r3, #2
     36c:	68a2      	ldr	r2, [r4, #8]
     36e:	509d      	str	r5, [r3, r2]
  q->tail = (q->tail + 1) & q->mask;
     370:	88a2      	ldrh	r2, [r4, #4]
     372:	3201      	adds	r2, #1
     374:	8823      	ldrh	r3, [r4, #0]
     376:	4013      	ands	r3, r2
     378:	80a3      	strh	r3, [r4, #4]
  return MU_CQUEUE_ERR_NONE;
     37a:	2300      	movs	r3, #0
     37c:	e7f2      	b.n	364 <mu_spscq_put+0x10>
     37e:	46c0      	nop			; (mov r8, r8)
     380:	00000341 	.word	0x00000341

00000384 <mu_spscq_get>:
bool mu_spscq_is_empty(mu_spscq_t *q) { return q->head == q->tail; }
     384:	8843      	ldrh	r3, [r0, #2]
     386:	8882      	ldrh	r2, [r0, #4]
     388:	b29b      	uxth	r3, r3

mu_spscq_err_t mu_spscq_get(mu_spscq_t *q, mu_spscq_item_t *item) {
  if (mu_spscq_is_empty(q)) {
     38a:	4293      	cmp	r3, r2
     38c:	d00b      	beq.n	3a6 <mu_spscq_get+0x22>
    *item = NULL;
    return MU_CQUEUE_ERR_EMPTY;
  }
  *item = q->store[q->head];
     38e:	8843      	ldrh	r3, [r0, #2]
     390:	6882      	ldr	r2, [r0, #8]
     392:	009b      	lsls	r3, r3, #2
     394:	589b      	ldr	r3, [r3, r2]
     396:	600b      	str	r3, [r1, #0]
  q->head = (q->head + 1) & q->mask;
     398:	8842      	ldrh	r2, [r0, #2]
     39a:	3201      	adds	r2, #1
     39c:	8803      	ldrh	r3, [r0, #0]
     39e:	4013      	ands	r3, r2
     3a0:	8043      	strh	r3, [r0, #2]
  return MU_CQUEUE_ERR_NONE;
     3a2:	2000      	movs	r0, #0
}
     3a4:	4770      	bx	lr
    *item = NULL;
     3a6:	2300      	movs	r3, #0
     3a8:	600b      	str	r3, [r1, #0]
    return MU_CQUEUE_ERR_EMPTY;
     3aa:	2001      	movs	r0, #1
     3ac:	e7fa      	b.n	3a4 <mu_spscq_get+0x20>

000003ae <mu_task_init>:

mu_task_t *mu_task_init(mu_task_t *task,
                        mu_task_fn fn,
                        void *ctx,
                        const char *name) {
  task->fn = fn;
     3ae:	6001      	str	r1, [r0, #0]
  task->ctx = ctx;
     3b0:	6042      	str	r2, [r0, #4]
#if (MU_TASK_PROFILING)
  task->name = name;
     3b2:	6083      	str	r3, [r0, #8]
  task->call_count = 0;
     3b4:	2300      	movs	r3, #0
     3b6:	60c3      	str	r3, [r0, #12]
  task->runtime = 0;
     3b8:	6103      	str	r3, [r0, #16]
  task->max_duration = 0;
     3ba:	6143      	str	r3, [r0, #20]
#endif
  return task;
}
     3bc:	4770      	bx	lr
	...

000003c0 <mu_task_call>:
#else
  return "";
#endif
}

void *mu_task_call(mu_task_t *task, void *arg) {
     3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3c2:	0004      	movs	r4, r0
     3c4:	000d      	movs	r5, r1

#if (MU_TASK_PROFILING)
  mu_time_t called_at = mu_time_now();
     3c6:	4f0c      	ldr	r7, [pc, #48]	; (3f8 <mu_task_call+0x38>)
     3c8:	47b8      	blx	r7
     3ca:	0006      	movs	r6, r0
#endif
  void *result = task->fn(task->ctx, arg);
     3cc:	0029      	movs	r1, r5
     3ce:	6860      	ldr	r0, [r4, #4]
     3d0:	6823      	ldr	r3, [r4, #0]
     3d2:	4798      	blx	r3
     3d4:	0005      	movs	r5, r0
#if (MU_TASK_PROFILING)
  task->call_count += 1;
     3d6:	68e3      	ldr	r3, [r4, #12]
     3d8:	3301      	adds	r3, #1
     3da:	60e3      	str	r3, [r4, #12]
  mu_time_dt duration = mu_time_difference(mu_time_now(), called_at);
     3dc:	47b8      	blx	r7
     3de:	0031      	movs	r1, r6
     3e0:	4b06      	ldr	r3, [pc, #24]	; (3fc <mu_task_call+0x3c>)
     3e2:	4798      	blx	r3
  task->runtime += duration;
     3e4:	6923      	ldr	r3, [r4, #16]
     3e6:	181b      	adds	r3, r3, r0
     3e8:	6123      	str	r3, [r4, #16]
  if (duration > task->max_duration) task->max_duration = duration;
     3ea:	6963      	ldr	r3, [r4, #20]
     3ec:	4298      	cmp	r0, r3
     3ee:	dd00      	ble.n	3f2 <mu_task_call+0x32>
     3f0:	6160      	str	r0, [r4, #20]
#endif
  return result;
}
     3f2:	0028      	movs	r0, r5
     3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	00000439 	.word	0x00000439
     3fc:	0000040d 	.word	0x0000040d

00000400 <mu_time_offset>:

void mu_time_init(void) {
  // mu_port_init() must be called separately
}

mu_time_t mu_time_offset(mu_time_t t1, mu_time_dt dt) {
     400:	b510      	push	{r4, lr}
  return mu_port_time_offset(t1, dt);
     402:	4b01      	ldr	r3, [pc, #4]	; (408 <mu_time_offset+0x8>)
     404:	4798      	blx	r3
}
     406:	bd10      	pop	{r4, pc}
     408:	00000e39 	.word	0x00000e39

0000040c <mu_time_difference>:

mu_time_dt mu_time_difference(mu_time_t t1, mu_time_t t2) {
     40c:	b510      	push	{r4, lr}
  return mu_port_time_difference(t1, t2);
     40e:	4b01      	ldr	r3, [pc, #4]	; (414 <mu_time_difference+0x8>)
     410:	4798      	blx	r3
}
     412:	bd10      	pop	{r4, pc}
     414:	00000e3d 	.word	0x00000e3d

00000418 <mu_time_precedes>:

bool mu_time_precedes(mu_time_t t1, mu_time_t t2) {
     418:	b510      	push	{r4, lr}
  return mu_port_time_precedes(t1, t2);
     41a:	4b01      	ldr	r3, [pc, #4]	; (420 <mu_time_precedes+0x8>)
     41c:	4798      	blx	r3
}
     41e:	bd10      	pop	{r4, pc}
     420:	00000e41 	.word	0x00000e41

00000424 <mu_time_follows>:

bool mu_time_is_equal(mu_time_t t1, mu_time_t t2) {
  return mu_port_time_equals(t1, t2);
}

bool mu_time_follows(mu_time_t t1, mu_time_t t2) {
     424:	b510      	push	{r4, lr}
     426:	000b      	movs	r3, r1
  return mu_port_time_precedes(t2, t1);
     428:	0001      	movs	r1, r0
     42a:	0018      	movs	r0, r3
     42c:	4b01      	ldr	r3, [pc, #4]	; (434 <mu_time_follows+0x10>)
     42e:	4798      	blx	r3
}
     430:	bd10      	pop	{r4, pc}
     432:	46c0      	nop			; (mov r8, r8)
     434:	00000e41 	.word	0x00000e41

00000438 <mu_time_now>:

mu_time_dt mu_time_seconds_to_duration(mu_time_seconds_dt s) {
  return mu_port_time_seconds_to_duration(s);
}

mu_time_t mu_time_now() {
     438:	b510      	push	{r4, lr}
  return mu_port_rtc_now();
     43a:	4b01      	ldr	r3, [pc, #4]	; (440 <mu_time_now+0x8>)
     43c:	4798      	blx	r3
}
     43e:	bd10      	pop	{r4, pc}
     440:	00000e49 	.word	0x00000e49

00000444 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     444:	b510      	push	{r4, lr}
	system_init();
     446:	4b01      	ldr	r3, [pc, #4]	; (44c <atmel_start_init+0x8>)
     448:	4798      	blx	r3
}
     44a:	bd10      	pop	{r4, pc}
     44c:	00000751 	.word	0x00000751

00000450 <mulib_blinky_init>:
static button_ctx_t s_button_ctx;

// =============================================================================
// public code

void mulib_blinky_init() {
     450:	b570      	push	{r4, r5, r6, lr}
  printf("\r\n\r\n# ===========\r\n");
     452:	4816      	ldr	r0, [pc, #88]	; (4ac <mulib_blinky_init+0x5c>)
     454:	4b16      	ldr	r3, [pc, #88]	; (4b0 <mulib_blinky_init+0x60>)
     456:	4798      	blx	r3
  printf("# mulib_blinky %s: see https://github.com/rdpoor/mulib\r\n", BLINKY_VERSION);
     458:	4916      	ldr	r1, [pc, #88]	; (4b4 <mulib_blinky_init+0x64>)
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <mulib_blinky_init+0x68>)
     45c:	4b17      	ldr	r3, [pc, #92]	; (4bc <mulib_blinky_init+0x6c>)
     45e:	4798      	blx	r3

  // initialize the port-specific interface
  mu_port_init();
     460:	4b17      	ldr	r3, [pc, #92]	; (4c0 <mulib_blinky_init+0x70>)
     462:	4798      	blx	r3

  // set up the isr queue and the scheduler
  mu_spscq_init(&s_isr_queue, s_isr_queue_items, ISR_Q_CAPACITY);
     464:	4d17      	ldr	r5, [pc, #92]	; (4c4 <mulib_blinky_init+0x74>)
     466:	002e      	movs	r6, r5
     468:	3620      	adds	r6, #32
     46a:	2208      	movs	r2, #8
     46c:	0029      	movs	r1, r5
     46e:	0030      	movs	r0, r6
     470:	4b15      	ldr	r3, [pc, #84]	; (4c8 <mulib_blinky_init+0x78>)
     472:	4798      	blx	r3
  mu_sched_init(&s_sched, s_event_queue, EVENT_QUEUE_CAPACITY, &s_isr_queue);
     474:	0029      	movs	r1, r5
     476:	312c      	adds	r1, #44	; 0x2c
     478:	357c      	adds	r5, #124	; 0x7c
     47a:	0033      	movs	r3, r6
     47c:	220a      	movs	r2, #10
     47e:	0028      	movs	r0, r5
     480:	4c12      	ldr	r4, [pc, #72]	; (4cc <mulib_blinky_init+0x7c>)
     482:	47a0      	blx	r4

  // initialize tasks
  led_task_init(&s_led_task, &s_led_ctx);
     484:	4c12      	ldr	r4, [pc, #72]	; (4d0 <mulib_blinky_init+0x80>)
     486:	0021      	movs	r1, r4
     488:	311c      	adds	r1, #28
     48a:	0026      	movs	r6, r4
     48c:	3620      	adds	r6, #32
     48e:	0030      	movs	r0, r6
     490:	4b10      	ldr	r3, [pc, #64]	; (4d4 <mulib_blinky_init+0x84>)
     492:	4798      	blx	r3
  button_task_init(&s_button_task, &s_button_ctx, &s_sched);
     494:	0021      	movs	r1, r4
     496:	3138      	adds	r1, #56	; 0x38
     498:	0020      	movs	r0, r4
     49a:	3040      	adds	r0, #64	; 0x40
     49c:	002a      	movs	r2, r5
     49e:	4b0e      	ldr	r3, [pc, #56]	; (4d8 <mulib_blinky_init+0x88>)
     4a0:	4798      	blx	r3

  // schedule the initial call to the LED task
  mu_sched_task_now(&s_sched, &s_led_task);
     4a2:	0031      	movs	r1, r6
     4a4:	0028      	movs	r0, r5
     4a6:	4b0d      	ldr	r3, [pc, #52]	; (4dc <mulib_blinky_init+0x8c>)
     4a8:	4798      	blx	r3
}
     4aa:	bd70      	pop	{r4, r5, r6, pc}
     4ac:	00002008 	.word	0x00002008
     4b0:	000011bd 	.word	0x000011bd
     4b4:	0000201c 	.word	0x0000201c
     4b8:	00002024 	.word	0x00002024
     4bc:	000010c9 	.word	0x000010c9
     4c0:	00000e19 	.word	0x00000e19
     4c4:	20000098 	.word	0x20000098
     4c8:	00000319 	.word	0x00000319
     4cc:	000001c1 	.word	0x000001c1
     4d0:	20000118 	.word	0x20000118
     4d4:	00000dd9 	.word	0x00000dd9
     4d8:	0000052d 	.word	0x0000052d
     4dc:	000002ad 	.word	0x000002ad

000004e0 <mulib_blinky_step>:

void mulib_blinky_step() {
     4e0:	b510      	push	{r4, lr}
  // called repeatedly from main(): run the scheduler
  mu_sched_step(&s_sched);
     4e2:	4802      	ldr	r0, [pc, #8]	; (4ec <mulib_blinky_step+0xc>)
     4e4:	307c      	adds	r0, #124	; 0x7c
     4e6:	4b02      	ldr	r3, [pc, #8]	; (4f0 <mulib_blinky_step+0x10>)
     4e8:	4798      	blx	r3
}
     4ea:	bd10      	pop	{r4, pc}
     4ec:	20000098 	.word	0x20000098
     4f0:	00000221 	.word	0x00000221

000004f4 <button_task_fn>:
}

// =============================================================================
// local (static) code

static void *button_task_fn(void *ctx, void *arg) {
     4f4:	b510      	push	{r4, lr}
  // button context (unused) is passed as first arg, scheduler as second.
  mu_sched_t *sched = (mu_sched_t *)arg;
  mu_time_t now = mu_sched_get_current_time(sched);
     4f6:	0008      	movs	r0, r1
     4f8:	4b03      	ldr	r3, [pc, #12]	; (508 <button_task_fn+0x14>)
     4fa:	4798      	blx	r3
     4fc:	0001      	movs	r1, r0

  printf("button pressed at %lu\r\n", now);
     4fe:	4803      	ldr	r0, [pc, #12]	; (50c <button_task_fn+0x18>)
     500:	4b03      	ldr	r3, [pc, #12]	; (510 <button_task_fn+0x1c>)
     502:	4798      	blx	r3
  return NULL;
}
     504:	2000      	movs	r0, #0
     506:	bd10      	pop	{r4, pc}
     508:	000001fd 	.word	0x000001fd
     50c:	00002060 	.word	0x00002060
     510:	000010c9 	.word	0x000010c9

00000514 <button_cb>:

// button_cb is triggered when a button press generates an interrupt.
// From interrupt level, schedule the button task upon leaving interrupt level.
static void button_cb(void) {
     514:	b510      	push	{r4, lr}
  mu_sched_task_from_isr(s_sched, s_button_task);
     516:	4b03      	ldr	r3, [pc, #12]	; (524 <button_cb+0x10>)
     518:	6819      	ldr	r1, [r3, #0]
     51a:	6858      	ldr	r0, [r3, #4]
     51c:	4b02      	ldr	r3, [pc, #8]	; (528 <button_cb+0x14>)
     51e:	4798      	blx	r3
}
     520:	bd10      	pop	{r4, pc}
     522:	46c0      	nop			; (mov r8, r8)
     524:	20000170 	.word	0x20000170
     528:	00000301 	.word	0x00000301

0000052c <button_task_init>:
                            mu_sched_t *sched) {
     52c:	b570      	push	{r4, r5, r6, lr}
     52e:	0004      	movs	r4, r0
  s_button_task = button_task;
     530:	4b07      	ldr	r3, [pc, #28]	; (550 <button_task_init+0x24>)
     532:	6018      	str	r0, [r3, #0]
  s_sched = sched;
     534:	605a      	str	r2, [r3, #4]
  ext_irq_register(PIN_PA15, button_cb);
     536:	4907      	ldr	r1, [pc, #28]	; (554 <button_task_init+0x28>)
     538:	200f      	movs	r0, #15
     53a:	4b07      	ldr	r3, [pc, #28]	; (558 <button_task_init+0x2c>)
     53c:	4798      	blx	r3
  mu_task_init(button_task, button_task_fn, NULL, "Button Interrupt");
     53e:	4b07      	ldr	r3, [pc, #28]	; (55c <button_task_init+0x30>)
     540:	2200      	movs	r2, #0
     542:	4907      	ldr	r1, [pc, #28]	; (560 <button_task_init+0x34>)
     544:	0020      	movs	r0, r4
     546:	4d07      	ldr	r5, [pc, #28]	; (564 <button_task_init+0x38>)
     548:	47a8      	blx	r5
}
     54a:	0020      	movs	r0, r4
     54c:	bd70      	pop	{r4, r5, r6, pc}
     54e:	46c0      	nop			; (mov r8, r8)
     550:	20000170 	.word	0x20000170
     554:	00000515 	.word	0x00000515
     558:	00000881 	.word	0x00000881
     55c:	00002078 	.word	0x00002078
     560:	000004f5 	.word	0x000004f5
     564:	000003af 	.word	0x000003af

00000568 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     568:	e7fe      	b.n	568 <Dummy_Handler>
	...

0000056c <Reset_Handler>:
{
     56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     56e:	4a2a      	ldr	r2, [pc, #168]	; (618 <Reset_Handler+0xac>)
     570:	4b2a      	ldr	r3, [pc, #168]	; (61c <Reset_Handler+0xb0>)
     572:	429a      	cmp	r2, r3
     574:	d011      	beq.n	59a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     576:	001a      	movs	r2, r3
     578:	4b29      	ldr	r3, [pc, #164]	; (620 <Reset_Handler+0xb4>)
     57a:	429a      	cmp	r2, r3
     57c:	d20d      	bcs.n	59a <Reset_Handler+0x2e>
     57e:	4a29      	ldr	r2, [pc, #164]	; (624 <Reset_Handler+0xb8>)
     580:	3303      	adds	r3, #3
     582:	1a9b      	subs	r3, r3, r2
     584:	089b      	lsrs	r3, r3, #2
     586:	3301      	adds	r3, #1
     588:	009b      	lsls	r3, r3, #2
     58a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     58c:	4823      	ldr	r0, [pc, #140]	; (61c <Reset_Handler+0xb0>)
     58e:	4922      	ldr	r1, [pc, #136]	; (618 <Reset_Handler+0xac>)
     590:	588c      	ldr	r4, [r1, r2]
     592:	5084      	str	r4, [r0, r2]
     594:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     596:	429a      	cmp	r2, r3
     598:	d1fa      	bne.n	590 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     59a:	4a23      	ldr	r2, [pc, #140]	; (628 <Reset_Handler+0xbc>)
     59c:	4b23      	ldr	r3, [pc, #140]	; (62c <Reset_Handler+0xc0>)
     59e:	429a      	cmp	r2, r3
     5a0:	d20a      	bcs.n	5b8 <Reset_Handler+0x4c>
     5a2:	43d3      	mvns	r3, r2
     5a4:	4921      	ldr	r1, [pc, #132]	; (62c <Reset_Handler+0xc0>)
     5a6:	185b      	adds	r3, r3, r1
     5a8:	2103      	movs	r1, #3
     5aa:	438b      	bics	r3, r1
     5ac:	3304      	adds	r3, #4
     5ae:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     5b0:	2100      	movs	r1, #0
     5b2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     5b4:	4293      	cmp	r3, r2
     5b6:	d1fc      	bne.n	5b2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     5b8:	4a1d      	ldr	r2, [pc, #116]	; (630 <Reset_Handler+0xc4>)
     5ba:	21ff      	movs	r1, #255	; 0xff
     5bc:	4b1d      	ldr	r3, [pc, #116]	; (634 <Reset_Handler+0xc8>)
     5be:	438b      	bics	r3, r1
     5c0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     5c2:	39fd      	subs	r1, #253	; 0xfd
     5c4:	2390      	movs	r3, #144	; 0x90
     5c6:	005b      	lsls	r3, r3, #1
     5c8:	4a1b      	ldr	r2, [pc, #108]	; (638 <Reset_Handler+0xcc>)
     5ca:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     5cc:	4a1b      	ldr	r2, [pc, #108]	; (63c <Reset_Handler+0xd0>)
     5ce:	78d3      	ldrb	r3, [r2, #3]
     5d0:	2503      	movs	r5, #3
     5d2:	43ab      	bics	r3, r5
     5d4:	2402      	movs	r4, #2
     5d6:	4323      	orrs	r3, r4
     5d8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     5da:	78d3      	ldrb	r3, [r2, #3]
     5dc:	270c      	movs	r7, #12
     5de:	43bb      	bics	r3, r7
     5e0:	2608      	movs	r6, #8
     5e2:	4333      	orrs	r3, r6
     5e4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     5e6:	4b16      	ldr	r3, [pc, #88]	; (640 <Reset_Handler+0xd4>)
     5e8:	7b98      	ldrb	r0, [r3, #14]
     5ea:	2230      	movs	r2, #48	; 0x30
     5ec:	4390      	bics	r0, r2
     5ee:	2220      	movs	r2, #32
     5f0:	4310      	orrs	r0, r2
     5f2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     5f4:	7b99      	ldrb	r1, [r3, #14]
     5f6:	43b9      	bics	r1, r7
     5f8:	4331      	orrs	r1, r6
     5fa:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     5fc:	7b9a      	ldrb	r2, [r3, #14]
     5fe:	43aa      	bics	r2, r5
     600:	4322      	orrs	r2, r4
     602:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     604:	4a0f      	ldr	r2, [pc, #60]	; (644 <Reset_Handler+0xd8>)
     606:	6853      	ldr	r3, [r2, #4]
     608:	2180      	movs	r1, #128	; 0x80
     60a:	430b      	orrs	r3, r1
     60c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     60e:	4b0e      	ldr	r3, [pc, #56]	; (648 <Reset_Handler+0xdc>)
     610:	4798      	blx	r3
        main();
     612:	4b0e      	ldr	r3, [pc, #56]	; (64c <Reset_Handler+0xe0>)
     614:	4798      	blx	r3
     616:	e7fe      	b.n	616 <Reset_Handler+0xaa>
     618:	0000219c 	.word	0x0000219c
     61c:	20000000 	.word	0x20000000
     620:	20000064 	.word	0x20000064
     624:	20000004 	.word	0x20000004
     628:	20000064 	.word	0x20000064
     62c:	200001b8 	.word	0x200001b8
     630:	e000ed00 	.word	0xe000ed00
     634:	00000000 	.word	0x00000000
     638:	41007000 	.word	0x41007000
     63c:	41005000 	.word	0x41005000
     640:	41004800 	.word	0x41004800
     644:	41004000 	.word	0x41004000
     648:	00001039 	.word	0x00001039
     64c:	00000dfd 	.word	0x00000dfd

00000650 <EXTERNAL_IRQ_0_init>:
#include <hpl_pm_base.h>

struct calendar_descriptor CALENDAR_0;

void EXTERNAL_IRQ_0_init(void)
{
     650:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     652:	4a11      	ldr	r2, [pc, #68]	; (698 <EXTERNAL_IRQ_0_init+0x48>)
     654:	4b11      	ldr	r3, [pc, #68]	; (69c <EXTERNAL_IRQ_0_init+0x4c>)
     656:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     658:	22c0      	movs	r2, #192	; 0xc0
     65a:	05d2      	lsls	r2, r2, #23
     65c:	2080      	movs	r0, #128	; 0x80
     65e:	0200      	lsls	r0, r0, #8
     660:	6050      	str	r0, [r2, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     662:	4b0f      	ldr	r3, [pc, #60]	; (6a0 <EXTERNAL_IRQ_0_init+0x50>)
     664:	490f      	ldr	r1, [pc, #60]	; (6a4 <EXTERNAL_IRQ_0_init+0x54>)
     666:	6299      	str	r1, [r3, #40]	; 0x28
     668:	490f      	ldr	r1, [pc, #60]	; (6a8 <EXTERNAL_IRQ_0_init+0x58>)
     66a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     66c:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     66e:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     670:	214f      	movs	r1, #79	; 0x4f
     672:	5c5c      	ldrb	r4, [r3, r1]
     674:	2504      	movs	r5, #4
     676:	432c      	orrs	r4, r5
     678:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     67a:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     67c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     67e:	2001      	movs	r0, #1
     680:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     682:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     684:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     686:	3918      	subs	r1, #24
     688:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     68a:	300e      	adds	r0, #14
     68c:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     68e:	545a      	strb	r2, [r3, r1]
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA15A_EIC_EXTINT15);

	ext_irq_init();
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <EXTERNAL_IRQ_0_init+0x5c>)
     692:	4798      	blx	r3
}
     694:	bd70      	pop	{r4, r5, r6, pc}
     696:	46c0      	nop			; (mov r8, r8)
     698:	00004005 	.word	0x00004005
     69c:	40000c00 	.word	0x40000c00
     6a0:	41004400 	.word	0x41004400
     6a4:	40028000 	.word	0x40028000
     6a8:	c0020000 	.word	0xc0020000
     6ac:	0000085d 	.word	0x0000085d

000006b0 <USART_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     6b0:	4a04      	ldr	r2, [pc, #16]	; (6c4 <USART_0_CLOCK_init+0x14>)
     6b2:	6a13      	ldr	r3, [r2, #32]
     6b4:	2120      	movs	r1, #32
     6b6:	430b      	orrs	r3, r1
     6b8:	6213      	str	r3, [r2, #32]
     6ba:	4a03      	ldr	r2, [pc, #12]	; (6c8 <USART_0_CLOCK_init+0x18>)
     6bc:	4b03      	ldr	r3, [pc, #12]	; (6cc <USART_0_CLOCK_init+0x1c>)
     6be:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     6c0:	4770      	bx	lr
     6c2:	46c0      	nop			; (mov r8, r8)
     6c4:	40000400 	.word	0x40000400
     6c8:	00004017 	.word	0x00004017
     6cc:	40000c00 	.word	0x40000c00

000006d0 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     6d0:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6d2:	4b0e      	ldr	r3, [pc, #56]	; (70c <USART_0_PORT_init+0x3c>)
     6d4:	2256      	movs	r2, #86	; 0x56
     6d6:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6d8:	2501      	movs	r5, #1
     6da:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6dc:	2401      	movs	r4, #1
     6de:	4321      	orrs	r1, r4
     6e0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6e2:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6e4:	203b      	movs	r0, #59	; 0x3b
     6e6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6e8:	3a47      	subs	r2, #71	; 0x47
     6ea:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     6ec:	3a0d      	subs	r2, #13
     6ee:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6f0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6f2:	2157      	movs	r1, #87	; 0x57
     6f4:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6f6:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6f8:	4322      	orrs	r2, r4
     6fa:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6fc:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6fe:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     700:	3948      	subs	r1, #72	; 0x48
     702:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     704:	3111      	adds	r1, #17
     706:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     708:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(EDBG_TX, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(EDBG_RX, PINMUX_PA23C_SERCOM3_PAD1);
}
     70a:	bd30      	pop	{r4, r5, pc}
     70c:	41004400 	.word	0x41004400

00000710 <CALENDAR_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     710:	4a04      	ldr	r2, [pc, #16]	; (724 <CALENDAR_0_CLOCK_init+0x14>)
     712:	6993      	ldr	r3, [r2, #24]
     714:	2120      	movs	r1, #32
     716:	430b      	orrs	r3, r1
     718:	6193      	str	r3, [r2, #24]
     71a:	4a03      	ldr	r2, [pc, #12]	; (728 <CALENDAR_0_CLOCK_init+0x18>)
     71c:	4b03      	ldr	r3, [pc, #12]	; (72c <CALENDAR_0_CLOCK_init+0x1c>)
     71e:	805a      	strh	r2, [r3, #2]

void CALENDAR_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
     720:	4770      	bx	lr
     722:	46c0      	nop			; (mov r8, r8)
     724:	40000400 	.word	0x40000400
     728:	00004304 	.word	0x00004304
     72c:	40000c00 	.word	0x40000c00

00000730 <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     730:	b510      	push	{r4, lr}
	CALENDAR_0_CLOCK_init();
     732:	4b03      	ldr	r3, [pc, #12]	; (740 <CALENDAR_0_init+0x10>)
     734:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     736:	4903      	ldr	r1, [pc, #12]	; (744 <CALENDAR_0_init+0x14>)
     738:	4803      	ldr	r0, [pc, #12]	; (748 <CALENDAR_0_init+0x18>)
     73a:	4b04      	ldr	r3, [pc, #16]	; (74c <CALENDAR_0_init+0x1c>)
     73c:	4798      	blx	r3
}
     73e:	bd10      	pop	{r4, pc}
     740:	00000711 	.word	0x00000711
     744:	40001400 	.word	0x40001400
     748:	20000198 	.word	0x20000198
     74c:	000007b1 	.word	0x000007b1

00000750 <system_init>:

void system_init(void)
{
     750:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     752:	4b0f      	ldr	r3, [pc, #60]	; (790 <system_init+0x40>)
     754:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     756:	23c0      	movs	r3, #192	; 0xc0
     758:	05db      	lsls	r3, r3, #23
     75a:	2280      	movs	r2, #128	; 0x80
     75c:	05d2      	lsls	r2, r2, #23
     75e:	2198      	movs	r1, #152	; 0x98
     760:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     762:	3910      	subs	r1, #16
     764:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     766:	4b0b      	ldr	r3, [pc, #44]	; (794 <system_init+0x44>)
     768:	3120      	adds	r1, #32
     76a:	505a      	str	r2, [r3, r1]
     76c:	4a0a      	ldr	r2, [pc, #40]	; (798 <system_init+0x48>)
     76e:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     770:	3136      	adds	r1, #54	; 0x36
     772:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     774:	2001      	movs	r0, #1
     776:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     778:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(USER_LED_AL, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(USER_LED_AL, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     77a:	4b08      	ldr	r3, [pc, #32]	; (79c <system_init+0x4c>)
     77c:	4798      	blx	r3

	USART_0_CLOCK_init();
     77e:	4b08      	ldr	r3, [pc, #32]	; (7a0 <system_init+0x50>)
     780:	4798      	blx	r3
	USART_0_init();
     782:	4b08      	ldr	r3, [pc, #32]	; (7a4 <system_init+0x54>)
     784:	4798      	blx	r3
	USART_0_PORT_init();
     786:	4b08      	ldr	r3, [pc, #32]	; (7a8 <system_init+0x58>)
     788:	4798      	blx	r3

	CALENDAR_0_init();
     78a:	4b08      	ldr	r3, [pc, #32]	; (7ac <system_init+0x5c>)
     78c:	4798      	blx	r3
}
     78e:	bd10      	pop	{r4, pc}
     790:	0000090d 	.word	0x0000090d
     794:	41004400 	.word	0x41004400
     798:	c0004000 	.word	0xc0004000
     79c:	00000651 	.word	0x00000651
     7a0:	000006b1 	.word	0x000006b1
     7a4:	00000c81 	.word	0x00000c81
     7a8:	000006d1 	.word	0x000006d1
     7ac:	00000731 	.word	0x00000731

000007b0 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
     7b0:	b570      	push	{r4, r5, r6, lr}
     7b2:	0004      	movs	r4, r0
     7b4:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
     7b6:	1e43      	subs	r3, r0, #1
     7b8:	4198      	sbcs	r0, r3
     7ba:	b2c0      	uxtb	r0, r0
     7bc:	22e0      	movs	r2, #224	; 0xe0
     7be:	0052      	lsls	r2, r2, #1
     7c0:	4909      	ldr	r1, [pc, #36]	; (7e8 <calendar_init+0x38>)
     7c2:	4b0a      	ldr	r3, [pc, #40]	; (7ec <calendar_init+0x3c>)
     7c4:	4798      	blx	r3

	if (calendar->device.hw == hw) {
     7c6:	6823      	ldr	r3, [r4, #0]
     7c8:	42ab      	cmp	r3, r5
     7ca:	d008      	beq.n	7de <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
     7cc:	2b00      	cmp	r3, #0
     7ce:	d108      	bne.n	7e2 <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
     7d0:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
     7d2:	0020      	movs	r0, r4
     7d4:	4b06      	ldr	r3, [pc, #24]	; (7f0 <calendar_init+0x40>)
     7d6:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
     7d8:	4b06      	ldr	r3, [pc, #24]	; (7f4 <calendar_init+0x44>)
     7da:	6163      	str	r3, [r4, #20]

	return ret;
}
     7dc:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
     7de:	2000      	movs	r0, #0
     7e0:	e7fc      	b.n	7dc <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
     7e2:	2012      	movs	r0, #18
     7e4:	4240      	negs	r0, r0
     7e6:	e7f9      	b.n	7dc <calendar_init+0x2c>
     7e8:	0000208c 	.word	0x0000208c
     7ec:	000008c9 	.word	0x000008c9
     7f0:	00000b45 	.word	0x00000b45
     7f4:	000007b2 	.word	0x000007b2

000007f8 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
     7f8:	b510      	push	{r4, lr}
     7fa:	0004      	movs	r4, r0
	/* Sanity check arguments */
	ASSERT(calendar);
     7fc:	1e43      	subs	r3, r0, #1
     7fe:	4198      	sbcs	r0, r3
     800:	b2c0      	uxtb	r0, r0
     802:	22e6      	movs	r2, #230	; 0xe6
     804:	32ff      	adds	r2, #255	; 0xff
     806:	4904      	ldr	r1, [pc, #16]	; (818 <calendar_enable+0x20>)
     808:	4b04      	ldr	r3, [pc, #16]	; (81c <calendar_enable+0x24>)
     80a:	4798      	blx	r3

	_calendar_enable(&calendar->device);
     80c:	0020      	movs	r0, r4
     80e:	4b04      	ldr	r3, [pc, #16]	; (820 <calendar_enable+0x28>)
     810:	4798      	blx	r3

	return ERR_NONE;
}
     812:	2000      	movs	r0, #0
     814:	bd10      	pop	{r4, pc}
     816:	46c0      	nop			; (mov r8, r8)
     818:	0000208c 	.word	0x0000208c
     81c:	000008c9 	.word	0x000008c9
     820:	00000bd1 	.word	0x00000bd1

00000824 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     824:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     826:	4b0c      	ldr	r3, [pc, #48]	; (858 <process_ext_irq+0x34>)
     828:	685c      	ldr	r4, [r3, #4]
     82a:	42a0      	cmp	r0, r4
     82c:	d00e      	beq.n	84c <process_ext_irq+0x28>
     82e:	2201      	movs	r2, #1
     830:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     832:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     834:	25ff      	movs	r5, #255	; 0xff
     836:	e003      	b.n	840 <process_ext_irq+0x1c>
     838:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     83a:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     83c:	085b      	lsrs	r3, r3, #1
     83e:	d10a      	bne.n	856 <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     840:	42a0      	cmp	r0, r4
     842:	d9f9      	bls.n	838 <process_ext_irq+0x14>
	while (upper >= lower) {
     844:	2a00      	cmp	r2, #0
     846:	d006      	beq.n	856 <process_ext_irq+0x32>
			lower = middle + 1;
     848:	0031      	movs	r1, r6
     84a:	e7f6      	b.n	83a <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     84c:	4b02      	ldr	r3, [pc, #8]	; (858 <process_ext_irq+0x34>)
     84e:	681b      	ldr	r3, [r3, #0]
     850:	2b00      	cmp	r3, #0
     852:	d000      	beq.n	856 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     854:	4798      	blx	r3
		}
	}
}
     856:	bd70      	pop	{r4, r5, r6, pc}
     858:	20000178 	.word	0x20000178

0000085c <ext_irq_init>:
{
     85c:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     85e:	4b05      	ldr	r3, [pc, #20]	; (874 <ext_irq_init+0x18>)
     860:	2201      	movs	r2, #1
     862:	4252      	negs	r2, r2
     864:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     866:	2200      	movs	r2, #0
     868:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     86a:	4803      	ldr	r0, [pc, #12]	; (878 <ext_irq_init+0x1c>)
     86c:	4b03      	ldr	r3, [pc, #12]	; (87c <ext_irq_init+0x20>)
     86e:	4798      	blx	r3
}
     870:	bd10      	pop	{r4, pc}
     872:	46c0      	nop			; (mov r8, r8)
     874:	20000178 	.word	0x20000178
     878:	00000825 	.word	0x00000825
     87c:	0000093d 	.word	0x0000093d

00000880 <ext_irq_register>:
{
     880:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     882:	4b0f      	ldr	r3, [pc, #60]	; (8c0 <ext_irq_register+0x40>)
     884:	685b      	ldr	r3, [r3, #4]
     886:	4298      	cmp	r0, r3
     888:	d008      	beq.n	89c <ext_irq_register+0x1c>
	if (NULL == cb) {
     88a:	2900      	cmp	r1, #0
     88c:	d014      	beq.n	8b8 <ext_irq_register+0x38>
			if (NULL == ext_irqs[i].cb) {
     88e:	4b0c      	ldr	r3, [pc, #48]	; (8c0 <ext_irq_register+0x40>)
     890:	681b      	ldr	r3, [r3, #0]
     892:	2b00      	cmp	r3, #0
     894:	d009      	beq.n	8aa <ext_irq_register+0x2a>
		return ERR_INVALID_ARG;
     896:	200d      	movs	r0, #13
     898:	4240      	negs	r0, r0
     89a:	e00c      	b.n	8b6 <ext_irq_register+0x36>
			ext_irqs[i].cb = cb;
     89c:	4b08      	ldr	r3, [pc, #32]	; (8c0 <ext_irq_register+0x40>)
     89e:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     8a0:	2900      	cmp	r1, #0
     8a2:	d105      	bne.n	8b0 <ext_irq_register+0x30>
		return _ext_irq_enable(pin, false);
     8a4:	4b07      	ldr	r3, [pc, #28]	; (8c4 <ext_irq_register+0x44>)
     8a6:	4798      	blx	r3
     8a8:	e005      	b.n	8b6 <ext_irq_register+0x36>
				ext_irqs[i].cb  = cb;
     8aa:	4b05      	ldr	r3, [pc, #20]	; (8c0 <ext_irq_register+0x40>)
     8ac:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     8ae:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     8b0:	2101      	movs	r1, #1
     8b2:	4b04      	ldr	r3, [pc, #16]	; (8c4 <ext_irq_register+0x44>)
     8b4:	4798      	blx	r3
}
     8b6:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     8b8:	200d      	movs	r0, #13
     8ba:	4240      	negs	r0, r0
     8bc:	e7fb      	b.n	8b6 <ext_irq_register+0x36>
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	20000178 	.word	0x20000178
     8c4:	000009d5 	.word	0x000009d5

000008c8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     8c8:	2800      	cmp	r0, #0
     8ca:	d100      	bne.n	8ce <assert+0x6>
		__asm("BKPT #0");
     8cc:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     8ce:	4770      	bx	lr

000008d0 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     8d0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     8d2:	4a06      	ldr	r2, [pc, #24]	; (8ec <_sbrk+0x1c>)
     8d4:	6812      	ldr	r2, [r2, #0]
     8d6:	2a00      	cmp	r2, #0
     8d8:	d004      	beq.n	8e4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     8da:	4a04      	ldr	r2, [pc, #16]	; (8ec <_sbrk+0x1c>)
     8dc:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     8de:	18c3      	adds	r3, r0, r3
     8e0:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     8e2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     8e4:	4902      	ldr	r1, [pc, #8]	; (8f0 <_sbrk+0x20>)
     8e6:	4a01      	ldr	r2, [pc, #4]	; (8ec <_sbrk+0x1c>)
     8e8:	6011      	str	r1, [r2, #0]
     8ea:	e7f6      	b.n	8da <_sbrk+0xa>
     8ec:	20000180 	.word	0x20000180
     8f0:	200021b8 	.word	0x200021b8

000008f4 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     8f4:	2001      	movs	r0, #1
     8f6:	4240      	negs	r0, r0
     8f8:	4770      	bx	lr

000008fa <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     8fa:	2380      	movs	r3, #128	; 0x80
     8fc:	019b      	lsls	r3, r3, #6
     8fe:	604b      	str	r3, [r1, #4]

	return 0;
}
     900:	2000      	movs	r0, #0
     902:	4770      	bx	lr

00000904 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     904:	2001      	movs	r0, #1
     906:	4770      	bx	lr

00000908 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     908:	2000      	movs	r0, #0
     90a:	4770      	bx	lr

0000090c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     90c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     90e:	4b06      	ldr	r3, [pc, #24]	; (928 <_init_chip+0x1c>)
     910:	685a      	ldr	r2, [r3, #4]
     912:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     914:	4b05      	ldr	r3, [pc, #20]	; (92c <_init_chip+0x20>)
     916:	4798      	blx	r3
	_sysctrl_init_sources();
     918:	4b05      	ldr	r3, [pc, #20]	; (930 <_init_chip+0x24>)
     91a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     91c:	4b05      	ldr	r3, [pc, #20]	; (934 <_init_chip+0x28>)
     91e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     920:	20ff      	movs	r0, #255	; 0xff
     922:	4b05      	ldr	r3, [pc, #20]	; (938 <_init_chip+0x2c>)
     924:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     926:	bd10      	pop	{r4, pc}
     928:	41004000 	.word	0x41004000
     92c:	00000b25 	.word	0x00000b25
     930:	00000c2d 	.word	0x00000c2d
     934:	00000c71 	.word	0x00000c71
     938:	00000ae9 	.word	0x00000ae9

0000093c <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     93c:	4a22      	ldr	r2, [pc, #136]	; (9c8 <_ext_irq_init+0x8c>)
     93e:	7853      	ldrb	r3, [r2, #1]
     940:	09db      	lsrs	r3, r3, #7
     942:	d1fc      	bne.n	93e <_ext_irq_init+0x2>
     944:	4a20      	ldr	r2, [pc, #128]	; (9c8 <_ext_irq_init+0x8c>)
     946:	7853      	ldrb	r3, [r2, #1]
     948:	09db      	lsrs	r3, r3, #7
     94a:	d1fc      	bne.n	946 <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     94c:	4b1e      	ldr	r3, [pc, #120]	; (9c8 <_ext_irq_init+0x8c>)
     94e:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     950:	079b      	lsls	r3, r3, #30
     952:	d50a      	bpl.n	96a <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     954:	2200      	movs	r2, #0
     956:	4b1c      	ldr	r3, [pc, #112]	; (9c8 <_ext_irq_init+0x8c>)
     958:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     95a:	001a      	movs	r2, r3
     95c:	7853      	ldrb	r3, [r2, #1]
     95e:	09db      	lsrs	r3, r3, #7
     960:	d1fc      	bne.n	95c <_ext_irq_init+0x20>
     962:	4a19      	ldr	r2, [pc, #100]	; (9c8 <_ext_irq_init+0x8c>)
     964:	7853      	ldrb	r3, [r2, #1]
     966:	09db      	lsrs	r3, r3, #7
     968:	d1fc      	bne.n	964 <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
     96a:	2201      	movs	r2, #1
     96c:	4b16      	ldr	r3, [pc, #88]	; (9c8 <_ext_irq_init+0x8c>)
     96e:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     970:	001a      	movs	r2, r3
     972:	7853      	ldrb	r3, [r2, #1]
     974:	09db      	lsrs	r3, r3, #7
     976:	d1fc      	bne.n	972 <_ext_irq_init+0x36>
     978:	4a13      	ldr	r2, [pc, #76]	; (9c8 <_ext_irq_init+0x8c>)
     97a:	7853      	ldrb	r3, [r2, #1]
     97c:	09db      	lsrs	r3, r3, #7
     97e:	d1fc      	bne.n	97a <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     980:	4b11      	ldr	r3, [pc, #68]	; (9c8 <_ext_irq_init+0x8c>)
     982:	2200      	movs	r2, #0
     984:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     986:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     988:	2180      	movs	r1, #128	; 0x80
     98a:	0209      	lsls	r1, r1, #8
     98c:	6159      	str	r1, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     98e:	619a      	str	r2, [r3, #24]
     990:	22a0      	movs	r2, #160	; 0xa0
     992:	0612      	lsls	r2, r2, #24
     994:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     996:	781a      	ldrb	r2, [r3, #0]
     998:	2102      	movs	r1, #2
     99a:	430a      	orrs	r2, r1
     99c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     99e:	001a      	movs	r2, r3
     9a0:	7853      	ldrb	r3, [r2, #1]
     9a2:	09db      	lsrs	r3, r3, #7
     9a4:	d1fc      	bne.n	9a0 <_ext_irq_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     9a6:	4b09      	ldr	r3, [pc, #36]	; (9cc <_ext_irq_init+0x90>)
     9a8:	2210      	movs	r2, #16
     9aa:	2180      	movs	r1, #128	; 0x80
     9ac:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     9ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     9b2:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     9b6:	3101      	adds	r1, #1
     9b8:	31ff      	adds	r1, #255	; 0xff
     9ba:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     9bc:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     9be:	4b04      	ldr	r3, [pc, #16]	; (9d0 <_ext_irq_init+0x94>)
     9c0:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     9c2:	2000      	movs	r0, #0
     9c4:	4770      	bx	lr
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	40001800 	.word	0x40001800
     9cc:	e000e100 	.word	0xe000e100
     9d0:	20000184 	.word	0x20000184

000009d4 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
     9d4:	280f      	cmp	r0, #15
     9d6:	d002      	beq.n	9de <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
     9d8:	200d      	movs	r0, #13
     9da:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
     9dc:	4770      	bx	lr
	if (enable) {
     9de:	2900      	cmp	r1, #0
     9e0:	d106      	bne.n	9f0 <_ext_irq_enable+0x1c>
	((Eic *)hw)->INTENCLR.reg = mask;
     9e2:	4b06      	ldr	r3, [pc, #24]	; (9fc <_ext_irq_enable+0x28>)
     9e4:	2280      	movs	r2, #128	; 0x80
     9e6:	0212      	lsls	r2, r2, #8
     9e8:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     9ea:	611a      	str	r2, [r3, #16]
	return ERR_NONE;
     9ec:	2000      	movs	r0, #0
     9ee:	e7f5      	b.n	9dc <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
     9f0:	2280      	movs	r2, #128	; 0x80
     9f2:	0212      	lsls	r2, r2, #8
     9f4:	4b01      	ldr	r3, [pc, #4]	; (9fc <_ext_irq_enable+0x28>)
     9f6:	60da      	str	r2, [r3, #12]
     9f8:	2000      	movs	r0, #0
     9fa:	e7ef      	b.n	9dc <_ext_irq_enable+0x8>
     9fc:	40001800 	.word	0x40001800

00000a00 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     a00:	b5f0      	push	{r4, r5, r6, r7, lr}
     a02:	46ce      	mov	lr, r9
     a04:	4647      	mov	r7, r8
     a06:	b580      	push	{r7, lr}
     a08:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
     a0a:	4b31      	ldr	r3, [pc, #196]	; (ad0 <EIC_Handler+0xd0>)
     a0c:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     a0e:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     a10:	400a      	ands	r2, r1
     a12:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     a14:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     a16:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     a18:	4b2e      	ldr	r3, [pc, #184]	; (ad4 <EIC_Handler+0xd4>)
     a1a:	6818      	ldr	r0, [r3, #0]
     a1c:	1e43      	subs	r3, r0, #1
     a1e:	4198      	sbcs	r0, r3
     a20:	b2c0      	uxtb	r0, r0
     a22:	22d2      	movs	r2, #210	; 0xd2
     a24:	492c      	ldr	r1, [pc, #176]	; (ad8 <EIC_Handler+0xd8>)
     a26:	4b2d      	ldr	r3, [pc, #180]	; (adc <EIC_Handler+0xdc>)
     a28:	4798      	blx	r3

	while (flags) {
     a2a:	9b01      	ldr	r3, [sp, #4]
     a2c:	2b00      	cmp	r3, #0
     a2e:	d049      	beq.n	ac4 <EIC_Handler+0xc4>
     a30:	2301      	movs	r3, #1
     a32:	425b      	negs	r3, r3
     a34:	4699      	mov	r9, r3
		pos = ffs(flags) - 1;
     a36:	4b2a      	ldr	r3, [pc, #168]	; (ae0 <EIC_Handler+0xe0>)
     a38:	4698      	mov	r8, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
     a3a:	4f26      	ldr	r7, [pc, #152]	; (ad4 <EIC_Handler+0xd4>)
				if (_map[middle].extint == pos) {
     a3c:	4d29      	ldr	r5, [pc, #164]	; (ae4 <EIC_Handler+0xe4>)
     a3e:	e03a      	b.n	ab6 <EIC_Handler+0xb6>
					upper = middle - 1;
     a40:	3a01      	subs	r2, #1
     a42:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
     a44:	42b1      	cmp	r1, r6
     a46:	d80c      	bhi.n	a62 <EIC_Handler+0x62>
				middle = (upper + lower) >> 1;
     a48:	1873      	adds	r3, r6, r1
     a4a:	105b      	asrs	r3, r3, #1
     a4c:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
     a4e:	4003      	ands	r3, r0
     a50:	00db      	lsls	r3, r3, #3
     a52:	5d5b      	ldrb	r3, [r3, r5]
     a54:	42a3      	cmp	r3, r4
     a56:	d008      	beq.n	a6a <EIC_Handler+0x6a>
				if (_map[middle].extint < pos) {
     a58:	429c      	cmp	r4, r3
     a5a:	ddf1      	ble.n	a40 <EIC_Handler+0x40>
					lower = middle + 1;
     a5c:	3201      	adds	r2, #1
     a5e:	b2d1      	uxtb	r1, r2
     a60:	e7f0      	b.n	a44 <EIC_Handler+0x44>
			if (INVALID_PIN_NUMBER != pin) {
     a62:	464b      	mov	r3, r9
     a64:	3301      	adds	r3, #1
     a66:	d005      	beq.n	a74 <EIC_Handler+0x74>
     a68:	e001      	b.n	a6e <EIC_Handler+0x6e>
     a6a:	230f      	movs	r3, #15
     a6c:	4699      	mov	r9, r3
				callback(pin);
     a6e:	4648      	mov	r0, r9
     a70:	683b      	ldr	r3, [r7, #0]
     a72:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     a74:	9b01      	ldr	r3, [sp, #4]
     a76:	2201      	movs	r2, #1
     a78:	40a2      	lsls	r2, r4
     a7a:	4393      	bics	r3, r2
     a7c:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     a7e:	9801      	ldr	r0, [sp, #4]
     a80:	4b17      	ldr	r3, [pc, #92]	; (ae0 <EIC_Handler+0xe0>)
     a82:	4798      	blx	r3
     a84:	3801      	subs	r0, #1
     a86:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     a88:	1c63      	adds	r3, r4, #1
     a8a:	d00a      	beq.n	aa2 <EIC_Handler+0xa2>
				if (_map[middle].extint == pos) {
     a8c:	2c0f      	cmp	r4, #15
     a8e:	d005      	beq.n	a9c <EIC_Handler+0x9c>
     a90:	230f      	movs	r3, #15
     a92:	2200      	movs	r2, #0
     a94:	2601      	movs	r6, #1
     a96:	2100      	movs	r1, #0
     a98:	20ff      	movs	r0, #255	; 0xff
     a9a:	e7dd      	b.n	a58 <EIC_Handler+0x58>
     a9c:	230f      	movs	r3, #15
     a9e:	4699      	mov	r9, r3
     aa0:	e7e5      	b.n	a6e <EIC_Handler+0x6e>
	return ((Eic *)hw)->INTFLAG.reg;
     aa2:	4b0b      	ldr	r3, [pc, #44]	; (ad0 <EIC_Handler+0xd0>)
     aa4:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     aa6:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     aa8:	400a      	ands	r2, r1
     aaa:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     aac:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     aae:	611a      	str	r2, [r3, #16]
	while (flags) {
     ab0:	9b01      	ldr	r3, [sp, #4]
     ab2:	2b00      	cmp	r3, #0
     ab4:	d006      	beq.n	ac4 <EIC_Handler+0xc4>
		pos = ffs(flags) - 1;
     ab6:	9801      	ldr	r0, [sp, #4]
     ab8:	47c0      	blx	r8
     aba:	3801      	subs	r0, #1
     abc:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     abe:	1c63      	adds	r3, r4, #1
     ac0:	d1e4      	bne.n	a8c <EIC_Handler+0x8c>
     ac2:	e7ee      	b.n	aa2 <EIC_Handler+0xa2>
	}
}
     ac4:	b003      	add	sp, #12
     ac6:	bc0c      	pop	{r2, r3}
     ac8:	4690      	mov	r8, r2
     aca:	4699      	mov	r9, r3
     acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ace:	46c0      	nop			; (mov r8, r8)
     ad0:	40001800 	.word	0x40001800
     ad4:	20000184 	.word	0x20000184
     ad8:	000020b0 	.word	0x000020b0
     adc:	000008c9 	.word	0x000008c9
     ae0:	00000fe5 	.word	0x00000fe5
     ae4:	000020a8 	.word	0x000020a8

00000ae8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     ae8:	07c3      	lsls	r3, r0, #31
     aea:	d50a      	bpl.n	b02 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     aec:	4b0b      	ldr	r3, [pc, #44]	; (b1c <_gclk_init_generators_by_fref+0x34>)
     aee:	2280      	movs	r2, #128	; 0x80
     af0:	0052      	lsls	r2, r2, #1
     af2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     af4:	2283      	movs	r2, #131	; 0x83
     af6:	0252      	lsls	r2, r2, #9
     af8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     afa:	001a      	movs	r2, r3
     afc:	7853      	ldrb	r3, [r2, #1]
     afe:	09db      	lsrs	r3, r3, #7
     b00:	d1fc      	bne.n	afc <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     b02:	0703      	lsls	r3, r0, #28
     b04:	d509      	bpl.n	b1a <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
     b06:	4b05      	ldr	r3, [pc, #20]	; (b1c <_gclk_init_generators_by_fref+0x34>)
     b08:	2204      	movs	r2, #4
     b0a:	32ff      	adds	r2, #255	; 0xff
     b0c:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     b0e:	4a04      	ldr	r2, [pc, #16]	; (b20 <_gclk_init_generators_by_fref+0x38>)
     b10:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     b12:	001a      	movs	r2, r3
     b14:	7853      	ldrb	r3, [r2, #1]
     b16:	09db      	lsrs	r3, r3, #7
     b18:	d1fc      	bne.n	b14 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     b1a:	4770      	bx	lr
     b1c:	40000c00 	.word	0x40000c00
     b20:	00210303 	.word	0x00210303

00000b24 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     b24:	4b06      	ldr	r3, [pc, #24]	; (b40 <_pm_init+0x1c>)
     b26:	7a1a      	ldrb	r2, [r3, #8]
     b28:	b2d2      	uxtb	r2, r2
     b2a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     b2c:	7a5a      	ldrb	r2, [r3, #9]
     b2e:	b2d2      	uxtb	r2, r2
     b30:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     b32:	7a9a      	ldrb	r2, [r3, #10]
     b34:	b2d2      	uxtb	r2, r2
     b36:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     b38:	7ada      	ldrb	r2, [r3, #11]
     b3a:	b2d2      	uxtb	r2, r2
     b3c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     b3e:	4770      	bx	lr
     b40:	40000400 	.word	0x40000400

00000b44 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
     b44:	b510      	push	{r4, lr}
     b46:	1e04      	subs	r4, r0, #0
	uint16_t register_value;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     b48:	d039      	beq.n	bbe <_calendar_init+0x7a>
     b4a:	6800      	ldr	r0, [r0, #0]
     b4c:	1e43      	subs	r3, r0, #1
     b4e:	4198      	sbcs	r0, r3
     b50:	b2c0      	uxtb	r0, r0
     b52:	2278      	movs	r2, #120	; 0x78
     b54:	491b      	ldr	r1, [pc, #108]	; (bc4 <_calendar_init+0x80>)
     b56:	4b1c      	ldr	r3, [pc, #112]	; (bc8 <_calendar_init+0x84>)
     b58:	4798      	blx	r3

	_rtc_dev = dev;
     b5a:	4b1c      	ldr	r3, [pc, #112]	; (bcc <_calendar_init+0x88>)
     b5c:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw);
     b5e:	6822      	ldr	r2, [r4, #0]
typedef uint8_t  hri_rtcmode2_intflag_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtc_wait_for_sync(const void *const hw)
{
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     b60:	7a93      	ldrb	r3, [r2, #10]
     b62:	09db      	lsrs	r3, r3, #7
     b64:	d1fc      	bne.n	b60 <_calendar_init+0x1c>
     b66:	7a93      	ldrb	r3, [r2, #10]
     b68:	09db      	lsrs	r3, r3, #7
     b6a:	d1fc      	bne.n	b66 <_calendar_init+0x22>

static inline bool hri_rtcmode0_get_CTRL_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
     b6c:	8813      	ldrh	r3, [r2, #0]
	if (hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw)) {
     b6e:	079b      	lsls	r3, r3, #30
     b70:	d50a      	bpl.n	b88 <_calendar_init+0x44>
}

static inline void hri_rtcmode0_clear_CTRL_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     b72:	8813      	ldrh	r3, [r2, #0]
     b74:	2102      	movs	r1, #2
     b76:	438b      	bics	r3, r1
     b78:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     b7a:	7a93      	ldrb	r3, [r2, #10]
     b7c:	09db      	lsrs	r3, r3, #7
     b7e:	d1fc      	bne.n	b7a <_calendar_init+0x36>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw);
     b80:	6822      	ldr	r2, [r4, #0]
     b82:	7a93      	ldrb	r3, [r2, #10]
     b84:	09db      	lsrs	r3, r3, #7
     b86:	d1fc      	bne.n	b82 <_calendar_init+0x3e>
#endif
	}
	hri_rtcmode0_set_CTRL_SWRST_bit(dev->hw);
     b88:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     b8a:	8813      	ldrh	r3, [r2, #0]
     b8c:	2101      	movs	r1, #1
     b8e:	430b      	orrs	r3, r1
     b90:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     b92:	7a93      	ldrb	r3, [r2, #10]
     b94:	09db      	lsrs	r3, r3, #7
     b96:	d1fc      	bne.n	b92 <_calendar_init+0x4e>
	hri_rtcmode0_wait_for_sync(dev->hw);
     b98:	6822      	ldr	r2, [r4, #0]
     b9a:	7a93      	ldrb	r3, [r2, #10]
     b9c:	09db      	lsrs	r3, r3, #7
     b9e:	d1fc      	bne.n	b9a <_calendar_init+0x56>
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     ba0:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     ba2:	7a93      	ldrb	r3, [r2, #10]
     ba4:	09db      	lsrs	r3, r3, #7
     ba6:	d1fc      	bne.n	ba2 <_calendar_init+0x5e>
	register_value &= (~RTC_MODE0_CTRL_MATCHCLR);

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	/* set continuously clock read update mode */
	hri_rtcmode0_set_READREQ_RCONT_bit(dev->hw);
     ba8:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_rtc_set_READREQ_RCONT_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     baa:	8853      	ldrh	r3, [r2, #2]
     bac:	2180      	movs	r1, #128	; 0x80
     bae:	01c9      	lsls	r1, r1, #7
     bb0:	430b      	orrs	r3, r1
     bb2:	8053      	strh	r3, [r2, #2]

	/* set event control */
#if CONF_RTC_EVENT_CONTROL_ENABLE == 1
	hri_rtcmode0_write_EVCTRL_reg(
	    dev->hw,
     bb4:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
     bb6:	2200      	movs	r2, #0
     bb8:	809a      	strh	r2, [r3, #4]
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	return ERR_NONE;
}
     bba:	2000      	movs	r0, #0
     bbc:	bd10      	pop	{r4, pc}
     bbe:	2000      	movs	r0, #0
     bc0:	e7c7      	b.n	b52 <_calendar_init+0xe>
     bc2:	46c0      	nop			; (mov r8, r8)
     bc4:	000020c8 	.word	0x000020c8
     bc8:	000008c9 	.word	0x000008c9
     bcc:	20000188 	.word	0x20000188

00000bd0 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
     bd0:	b510      	push	{r4, lr}
     bd2:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     bd4:	d011      	beq.n	bfa <_calendar_enable+0x2a>
     bd6:	6800      	ldr	r0, [r0, #0]
     bd8:	1e43      	subs	r3, r0, #1
     bda:	4198      	sbcs	r0, r3
     bdc:	b2c0      	uxtb	r0, r0
     bde:	22aa      	movs	r2, #170	; 0xaa
     be0:	4907      	ldr	r1, [pc, #28]	; (c00 <_calendar_enable+0x30>)
     be2:	4b08      	ldr	r3, [pc, #32]	; (c04 <_calendar_enable+0x34>)
     be4:	4798      	blx	r3

	/* Enable rtc */
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
     be6:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     be8:	8813      	ldrh	r3, [r2, #0]
     bea:	2102      	movs	r1, #2
     bec:	430b      	orrs	r3, r1
     bee:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     bf0:	7a93      	ldrb	r3, [r2, #10]
     bf2:	09db      	lsrs	r3, r3, #7
     bf4:	d1fc      	bne.n	bf0 <_calendar_enable+0x20>

	return ERR_NONE;
}
     bf6:	2000      	movs	r0, #0
     bf8:	bd10      	pop	{r4, pc}
     bfa:	2000      	movs	r0, #0
     bfc:	e7ef      	b.n	bde <_calendar_enable+0xe>
     bfe:	46c0      	nop			; (mov r8, r8)
     c00:	000020c8 	.word	0x000020c8
     c04:	000008c9 	.word	0x000008c9

00000c08 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     c08:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
     c0a:	4b07      	ldr	r3, [pc, #28]	; (c28 <RTC_Handler+0x20>)
     c0c:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     c0e:	6823      	ldr	r3, [r4, #0]
     c10:	7a1b      	ldrb	r3, [r3, #8]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
     c12:	07db      	lsls	r3, r3, #31
     c14:	d400      	bmi.n	c18 <RTC_Handler+0x10>
}
     c16:	bd10      	pop	{r4, pc}
		dev->callback(dev);
     c18:	0020      	movs	r0, r4
     c1a:	6863      	ldr	r3, [r4, #4]
     c1c:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     c1e:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     c20:	2201      	movs	r2, #1
     c22:	721a      	strb	r2, [r3, #8]
}
     c24:	e7f7      	b.n	c16 <RTC_Handler+0xe>
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	20000188 	.word	0x20000188

00000c2c <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     c2c:	4b0e      	ldr	r3, [pc, #56]	; (c68 <_sysctrl_init_sources+0x3c>)
     c2e:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     c30:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     c32:	480e      	ldr	r0, [pc, #56]	; (c6c <_sysctrl_init_sources+0x40>)
     c34:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     c36:	0f92      	lsrs	r2, r2, #30
     c38:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
     c3a:	2002      	movs	r0, #2
     c3c:	4302      	orrs	r2, r0
     c3e:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     c40:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     c42:	699a      	ldr	r2, [r3, #24]
     c44:	4302      	orrs	r2, r0
     c46:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     c48:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     c4a:	211f      	movs	r1, #31
     c4c:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     c4e:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
     c50:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     c52:	2208      	movs	r2, #8
     c54:	68cb      	ldr	r3, [r1, #12]
     c56:	421a      	tst	r2, r3
     c58:	d0fc      	beq.n	c54 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
     c5a:	4a03      	ldr	r2, [pc, #12]	; (c68 <_sysctrl_init_sources+0x3c>)
     c5c:	6a13      	ldr	r3, [r2, #32]
     c5e:	2180      	movs	r1, #128	; 0x80
     c60:	430b      	orrs	r3, r1
     c62:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     c64:	4770      	bx	lr
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	40000800 	.word	0x40000800
     c6c:	0fff0000 	.word	0x0fff0000

00000c70 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
     c70:	4a02      	ldr	r2, [pc, #8]	; (c7c <_sysctrl_init_referenced_generators+0xc>)
     c72:	6993      	ldr	r3, [r2, #24]
     c74:	2102      	movs	r1, #2
     c76:	438b      	bics	r3, r1
     c78:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     c7a:	4770      	bx	lr
     c7c:	40000800 	.word	0x40000800

00000c80 <USART_0_init>:
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     c80:	4b30      	ldr	r3, [pc, #192]	; (d44 <USART_0_init+0xc4>)
     c82:	69db      	ldr	r3, [r3, #28]
 * \brief Initialize USART interface
 */
int8_t USART_0_init()
{

	if (!hri_sercomusart_is_syncing(SERCOM3, SERCOM_USART_SYNCBUSY_SWRST)) {
     c84:	07db      	lsls	r3, r3, #31
     c86:	d41f      	bmi.n	cc8 <USART_0_init+0x48>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c88:	492e      	ldr	r1, [pc, #184]	; (d44 <USART_0_init+0xc4>)
     c8a:	2203      	movs	r2, #3
     c8c:	69cb      	ldr	r3, [r1, #28]
     c8e:	421a      	tst	r2, r3
     c90:	d1fc      	bne.n	c8c <USART_0_init+0xc>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     c92:	4b2c      	ldr	r3, [pc, #176]	; (d44 <USART_0_init+0xc4>)
     c94:	681b      	ldr	r3, [r3, #0]
		uint32_t mode = SERCOM_USART_CTRLA_MODE(1);
		if (hri_sercomusart_get_CTRLA_reg(SERCOM3, SERCOM_USART_CTRLA_ENABLE)) {
     c96:	079b      	lsls	r3, r3, #30
     c98:	d50e      	bpl.n	cb8 <USART_0_init+0x38>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     c9a:	4a2a      	ldr	r2, [pc, #168]	; (d44 <USART_0_init+0xc4>)
     c9c:	6813      	ldr	r3, [r2, #0]
     c9e:	2102      	movs	r1, #2
     ca0:	438b      	bics	r3, r1
     ca2:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ca4:	0011      	movs	r1, r2
     ca6:	2203      	movs	r2, #3
     ca8:	69cb      	ldr	r3, [r1, #28]
     caa:	421a      	tst	r2, r3
     cac:	d1fc      	bne.n	ca8 <USART_0_init+0x28>
     cae:	4925      	ldr	r1, [pc, #148]	; (d44 <USART_0_init+0xc4>)
     cb0:	2202      	movs	r2, #2
     cb2:	69cb      	ldr	r3, [r1, #28]
     cb4:	421a      	tst	r2, r3
     cb6:	d1fc      	bne.n	cb2 <USART_0_init+0x32>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     cb8:	2205      	movs	r2, #5
     cba:	4b22      	ldr	r3, [pc, #136]	; (d44 <USART_0_init+0xc4>)
     cbc:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cbe:	0019      	movs	r1, r3
     cc0:	3a02      	subs	r2, #2
     cc2:	69cb      	ldr	r3, [r1, #28]
     cc4:	421a      	tst	r2, r3
     cc6:	d1fc      	bne.n	cc2 <USART_0_init+0x42>
     cc8:	491e      	ldr	r1, [pc, #120]	; (d44 <USART_0_init+0xc4>)
     cca:	2201      	movs	r2, #1
     ccc:	69cb      	ldr	r3, [r1, #28]
     cce:	421a      	tst	r2, r3
     cd0:	d1fc      	bne.n	ccc <USART_0_init+0x4c>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     cd2:	4a1d      	ldr	r2, [pc, #116]	; (d48 <USART_0_init+0xc8>)
     cd4:	4b1b      	ldr	r3, [pc, #108]	; (d44 <USART_0_init+0xc4>)
     cd6:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cd8:	0019      	movs	r1, r3
     cda:	2203      	movs	r2, #3
     cdc:	69cb      	ldr	r3, [r1, #28]
     cde:	421a      	tst	r2, r3
     ce0:	d1fc      	bne.n	cdc <USART_0_init+0x5c>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     ce2:	4a18      	ldr	r2, [pc, #96]	; (d44 <USART_0_init+0xc4>)
     ce4:	6813      	ldr	r3, [r2, #0]
	tmp &= ~SERCOM_USART_CTRLA_TXPO_Msk;
     ce6:	4919      	ldr	r1, [pc, #100]	; (d4c <USART_0_init+0xcc>)
     ce8:	400b      	ands	r3, r1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
     cea:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cec:	0011      	movs	r1, r2
     cee:	2207      	movs	r2, #7
     cf0:	69cb      	ldr	r3, [r1, #28]
     cf2:	421a      	tst	r2, r3
     cf4:	d1fc      	bne.n	cf0 <USART_0_init+0x70>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     cf6:	4913      	ldr	r1, [pc, #76]	; (d44 <USART_0_init+0xc4>)
     cf8:	680b      	ldr	r3, [r1, #0]
	tmp &= ~SERCOM_USART_CTRLA_RXPO_Msk;
     cfa:	4a15      	ldr	r2, [pc, #84]	; (d50 <USART_0_init+0xd0>)
     cfc:	401a      	ands	r2, r3
	tmp |= SERCOM_USART_CTRLA_RXPO(data);
     cfe:	2380      	movs	r3, #128	; 0x80
     d00:	035b      	lsls	r3, r3, #13
     d02:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
     d04:	600b      	str	r3, [r1, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     d06:	2207      	movs	r2, #7
     d08:	69cb      	ldr	r3, [r1, #28]
     d0a:	421a      	tst	r2, r3
     d0c:	d1fc      	bne.n	d08 <USART_0_init+0x88>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     d0e:	22c0      	movs	r2, #192	; 0xc0
     d10:	0292      	lsls	r2, r2, #10
     d12:	4b0c      	ldr	r3, [pc, #48]	; (d44 <USART_0_init+0xc4>)
     d14:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     d16:	0019      	movs	r1, r3
     d18:	2207      	movs	r2, #7
     d1a:	69cb      	ldr	r3, [r1, #28]
     d1c:	421a      	tst	r2, r3
     d1e:	d1fc      	bne.n	d1a <USART_0_init+0x9a>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     d20:	4b08      	ldr	r3, [pc, #32]	; (d44 <USART_0_init+0xc4>)
     d22:	4a0c      	ldr	r2, [pc, #48]	; (d54 <USART_0_init+0xd4>)
     d24:	819a      	strh	r2, [r3, #12]
	((Sercom *)hw)->USART.INTENSET.reg = data;
     d26:	2207      	movs	r2, #7
     d28:	759a      	strb	r2, [r3, #22]
	((Sercom *)hw)->USART.INTENCLR.reg = ~data;
     d2a:	32f1      	adds	r2, #241	; 0xf1
     d2c:	751a      	strb	r2, [r3, #20]
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     d2e:	681a      	ldr	r2, [r3, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
     d30:	2102      	movs	r1, #2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
     d32:	430a      	orrs	r2, r1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
     d34:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     d36:	0019      	movs	r1, r3
     d38:	2203      	movs	r2, #3
     d3a:	69cb      	ldr	r3, [r1, #28]
     d3c:	421a      	tst	r2, r3
     d3e:	d1fc      	bne.n	d3a <USART_0_init+0xba>
	        | 1 << SERCOM_USART_INTENSET_DRE_Pos); /* Data Register Empty Interrupt Enable: enabled */

	hri_sercomusart_write_CTRLA_ENABLE_bit(SERCOM3, 1 << SERCOM_USART_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
     d40:	2000      	movs	r0, #0
     d42:	4770      	bx	lr
     d44:	42001400 	.word	0x42001400
     d48:	40000084 	.word	0x40000084
     d4c:	fffcffff 	.word	0xfffcffff
     d50:	ffcfffff 	.word	0xffcfffff
     d54:	ffffc504 	.word	0xffffc504

00000d58 <USART_0_read_byte>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.DATA.reg;
     d58:	4b01      	ldr	r3, [pc, #4]	; (d60 <USART_0_read_byte+0x8>)
     d5a:	8d18      	ldrh	r0, [r3, #40]	; 0x28
/**
 * \brief Write a byte to the SERCOM USART instance
 */
uint8_t USART_0_read_byte()
{
	return hri_sercomusart_read_DATA_reg(SERCOM3);
     d5c:	b2c0      	uxtb	r0, r0
}
     d5e:	4770      	bx	lr
     d60:	42001400 	.word	0x42001400

00000d64 <USART_0_write_byte>:
/**
 * \brief Write a byte to the SERCOM USART instance
 */
void USART_0_write_byte(uint8_t data)
{
	hri_sercomusart_write_DATA_reg(SERCOM3, data);
     d64:	b280      	uxth	r0, r0
	((Sercom *)hw)->USART.DATA.reg = data;
     d66:	4b01      	ldr	r3, [pc, #4]	; (d6c <USART_0_write_byte+0x8>)
     d68:	8518      	strh	r0, [r3, #40]	; 0x28
}
     d6a:	4770      	bx	lr
     d6c:	42001400 	.word	0x42001400

00000d70 <USART_0_is_byte_sent>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     d70:	4b02      	ldr	r3, [pc, #8]	; (d7c <USART_0_is_byte_sent+0xc>)
     d72:	7e18      	ldrb	r0, [r3, #24]
/**
 * \brief Check if USART is ready to send next byte
 */
bool USART_0_is_byte_sent()
{
	return hri_sercomusart_get_interrupt_DRE_bit(SERCOM3);
     d74:	2301      	movs	r3, #1
     d76:	4018      	ands	r0, r3
}
     d78:	4770      	bx	lr
     d7a:	46c0      	nop			; (mov r8, r8)
     d7c:	42001400 	.word	0x42001400

00000d80 <USART_0_is_byte_received>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     d80:	4b02      	ldr	r3, [pc, #8]	; (d8c <USART_0_is_byte_received+0xc>)
     d82:	7e18      	ldrb	r0, [r3, #24]
     d84:	0740      	lsls	r0, r0, #29
/**
 * \brief Check if there is data received by USART
 */
bool USART_0_is_byte_received()
{
	return hri_sercomusart_get_interrupt_RXC_bit(SERCOM3);
     d86:	0fc0      	lsrs	r0, r0, #31
}
     d88:	4770      	bx	lr
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	42001400 	.word	0x42001400

00000d90 <led_task_fn>:
}

// =============================================================================
// local (static) code

static void *led_task_fn(void *ctx, void *arg) {
     d90:	b510      	push	{r4, lr}
     d92:	000b      	movs	r3, r1
  // "context" is passed as the first argument, scheduler is second
  led_ctx_t *led_ctx = (led_ctx_t *)ctx;
  mu_sched_t *sched = (mu_sched_t *)arg;

  if (led_ctx->state == LED_OFF) {
     d94:	7802      	ldrb	r2, [r0, #0]
     d96:	2a00      	cmp	r2, #0
     d98:	d00d      	beq.n	db6 <led_task_fn+0x26>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d9a:	2480      	movs	r4, #128	; 0x80
     d9c:	05e4      	lsls	r4, r4, #23
     d9e:	2298      	movs	r2, #152	; 0x98
     da0:	21c0      	movs	r1, #192	; 0xc0
     da2:	05c9      	lsls	r1, r1, #23
     da4:	508c      	str	r4, [r1, r2]
    led_ctx->state = LED_ON;
    mu_sched_reschedule_in(sched, MU_TIME_MS_TO_DURATION(LED_ON_TIME_MS));

  } else {
    LED_Off();
    led_ctx->state = LED_OFF;
     da6:	2200      	movs	r2, #0
     da8:	7002      	strb	r2, [r0, #0]
    mu_sched_reschedule_in(sched, MU_TIME_MS_TO_DURATION(LED_OFF_TIME_MS));
     daa:	4909      	ldr	r1, [pc, #36]	; (dd0 <led_task_fn+0x40>)
     dac:	0018      	movs	r0, r3
     dae:	4b09      	ldr	r3, [pc, #36]	; (dd4 <led_task_fn+0x44>)
     db0:	4798      	blx	r3
  }

  return NULL;
}
     db2:	2000      	movs	r0, #0
     db4:	bd10      	pop	{r4, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     db6:	2480      	movs	r4, #128	; 0x80
     db8:	05e4      	lsls	r4, r4, #23
     dba:	3294      	adds	r2, #148	; 0x94
     dbc:	21c0      	movs	r1, #192	; 0xc0
     dbe:	05c9      	lsls	r1, r1, #23
     dc0:	508c      	str	r4, [r1, r2]
    led_ctx->state = LED_ON;
     dc2:	3a93      	subs	r2, #147	; 0x93
     dc4:	7002      	strb	r2, [r0, #0]
    mu_sched_reschedule_in(sched, MU_TIME_MS_TO_DURATION(LED_ON_TIME_MS));
     dc6:	21a3      	movs	r1, #163	; 0xa3
     dc8:	0018      	movs	r0, r3
     dca:	4b02      	ldr	r3, [pc, #8]	; (dd4 <led_task_fn+0x44>)
     dcc:	4798      	blx	r3
     dce:	e7f0      	b.n	db2 <led_task_fn+0x22>
     dd0:	00003f5c 	.word	0x00003f5c
     dd4:	000002cd 	.word	0x000002cd

00000dd8 <led_task_init>:
mu_task_t *led_task_init(mu_task_t *led_task, led_ctx_t *led_ctx) {
     dd8:	b570      	push	{r4, r5, r6, lr}
     dda:	0004      	movs	r4, r0
     ddc:	000a      	movs	r2, r1
  led_ctx->state = LED_OFF;
     dde:	2300      	movs	r3, #0
     de0:	700b      	strb	r3, [r1, #0]
  mu_task_init(led_task, led_task_fn, led_ctx, "LED");
     de2:	4b03      	ldr	r3, [pc, #12]	; (df0 <led_task_init+0x18>)
     de4:	4903      	ldr	r1, [pc, #12]	; (df4 <led_task_init+0x1c>)
     de6:	4d04      	ldr	r5, [pc, #16]	; (df8 <led_task_init+0x20>)
     de8:	47a8      	blx	r5
}
     dea:	0020      	movs	r0, r4
     dec:	bd70      	pop	{r4, r5, r6, pc}
     dee:	46c0      	nop			; (mov r8, r8)
     df0:	000020e0 	.word	0x000020e0
     df4:	00000d91 	.word	0x00000d91
     df8:	000003af 	.word	0x000003af

00000dfc <main>:

#include <atmel_start.h>
#include "mulib_blinky.h"

int main(void)
{
     dfc:	b510      	push	{r4, lr}
  /* Initializes MCU, drivers and middleware */
  atmel_start_init();
     dfe:	4b03      	ldr	r3, [pc, #12]	; (e0c <main+0x10>)
     e00:	4798      	blx	r3
  mulib_blinky_init();
     e02:	4b03      	ldr	r3, [pc, #12]	; (e10 <main+0x14>)
     e04:	4798      	blx	r3

  /* Replace with your application code */
  while (1) {
    mulib_blinky_step();
     e06:	4c03      	ldr	r4, [pc, #12]	; (e14 <main+0x18>)
     e08:	47a0      	blx	r4
     e0a:	e7fd      	b.n	e08 <main+0xc>
     e0c:	00000445 	.word	0x00000445
     e10:	00000451 	.word	0x00000451
     e14:	000004e1 	.word	0x000004e1

00000e18 <mu_port_init>:
static mu_port_time_seconds_dt s_rtc_period;

// =============================================================================
// main code starts here

void mu_port_init() {
     e18:	b510      	push	{r4, lr}
  // Initialize the RTC.  Use CALENDAR_0 since that's the only published
  // interface for interacting with the underlying RTC.
	calendar_enable(&CALENDAR_0);  // start RTC
     e1a:	4804      	ldr	r0, [pc, #16]	; (e2c <mu_port_init+0x14>)
     e1c:	4b04      	ldr	r3, [pc, #16]	; (e30 <mu_port_init+0x18>)
     e1e:	4798      	blx	r3
  s_rtc_period = 1.0/(mu_port_time_seconds_dt)CONF_GCLK_RTC_FREQUENCY;
     e20:	22e0      	movs	r2, #224	; 0xe0
     e22:	0592      	lsls	r2, r2, #22
     e24:	4b03      	ldr	r3, [pc, #12]	; (e34 <mu_port_init+0x1c>)
     e26:	601a      	str	r2, [r3, #0]
}
     e28:	bd10      	pop	{r4, pc}
     e2a:	46c0      	nop			; (mov r8, r8)
     e2c:	20000198 	.word	0x20000198
     e30:	000007f9 	.word	0x000007f9
     e34:	2000018c 	.word	0x2000018c

00000e38 <mu_port_time_offset>:

mu_port_time_t mu_port_time_offset(mu_port_time_t t, mu_port_time_dt dt) {
  return t + dt;
     e38:	1808      	adds	r0, r1, r0
}
     e3a:	4770      	bx	lr

00000e3c <mu_port_time_difference>:

mu_port_time_dt mu_port_time_difference(mu_port_time_t t1, mu_port_time_t t2) {
  return t1 - t2;
     e3c:	1a40      	subs	r0, r0, r1
}
     e3e:	4770      	bx	lr

00000e40 <mu_port_time_precedes>:
  return t1 - t2;
     e40:	1a40      	subs	r0, r0, r1

bool mu_port_time_precedes(mu_port_time_t t1, mu_port_time_t t2) {
  return mu_port_time_difference(t1, t2) > MAX_DURATION;
     e42:	0fc0      	lsrs	r0, r0, #31
}
     e44:	4770      	bx	lr
	...

00000e48 <mu_port_rtc_now>:
mu_port_time_seconds_dt mu_port_time_duration_to_seconds(mu_port_time_dt dt) {
  return dt * s_rtc_period;
}

mu_port_time_t mu_port_rtc_now() {
	return hri_rtcmode0_read_COUNT_COUNT_bf(CALENDAR_0.device.hw);
     e48:	4b03      	ldr	r3, [pc, #12]	; (e58 <mu_port_rtc_now+0x10>)
     e4a:	681a      	ldr	r2, [r3, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     e4c:	7a93      	ldrb	r3, [r2, #10]
     e4e:	09db      	lsrs	r3, r3, #7
     e50:	d1fc      	bne.n	e4c <mu_port_rtc_now+0x4>

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_COUNT_bf(const void *const hw)
{
	uint32_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
     e52:	6910      	ldr	r0, [r2, #16]
}
     e54:	4770      	bx	lr
     e56:	46c0      	nop			; (mov r8, r8)
     e58:	20000198 	.word	0x20000198

00000e5c <_write>:

// ================
// support for printf()

int _write(int file, char *ptr, int len) {
     e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e5e:	46c6      	mov	lr, r8
     e60:	b500      	push	{lr}
     e62:	4690      	mov	r8, r2
  // void file;
  int n = len;

  while (n-- > 0) {
     e64:	2a00      	cmp	r2, #0
     e66:	dd0c      	ble.n	e82 <_write+0x26>
     e68:	000d      	movs	r5, r1
     e6a:	4441      	add	r1, r8
     e6c:	000e      	movs	r6, r1
    while (!USART_0_is_byte_sent())
     e6e:	4c07      	ldr	r4, [pc, #28]	; (e8c <_write+0x30>)
  		;
    USART_0_write_byte(*ptr++);
     e70:	4f07      	ldr	r7, [pc, #28]	; (e90 <_write+0x34>)
    while (!USART_0_is_byte_sent())
     e72:	47a0      	blx	r4
     e74:	2800      	cmp	r0, #0
     e76:	d0fc      	beq.n	e72 <_write+0x16>
    USART_0_write_byte(*ptr++);
     e78:	7828      	ldrb	r0, [r5, #0]
     e7a:	47b8      	blx	r7
     e7c:	3501      	adds	r5, #1
  while (n-- > 0) {
     e7e:	42b5      	cmp	r5, r6
     e80:	d1f7      	bne.n	e72 <_write+0x16>
  }
  return len;
}
     e82:	4640      	mov	r0, r8
     e84:	bc04      	pop	{r2}
     e86:	4690      	mov	r8, r2
     e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e8a:	46c0      	nop			; (mov r8, r8)
     e8c:	00000d71 	.word	0x00000d71
     e90:	00000d65 	.word	0x00000d65

00000e94 <_read>:

int _read(int file, char *ptr, int len) {
     e94:	b5f0      	push	{r4, r5, r6, r7, lr}
     e96:	46c6      	mov	lr, r8
     e98:	b500      	push	{lr}
     e9a:	4690      	mov	r8, r2
  // void file;
  int n = len;

  while (n-- > 0) {
     e9c:	2a00      	cmp	r2, #0
     e9e:	dd0c      	ble.n	eba <_read+0x26>
     ea0:	000d      	movs	r5, r1
     ea2:	4441      	add	r1, r8
     ea4:	000e      	movs	r6, r1
    while (!USART_0_is_byte_received())
     ea6:	4c07      	ldr	r4, [pc, #28]	; (ec4 <_read+0x30>)
			;
    *ptr++ = USART_0_read_byte();
     ea8:	4f07      	ldr	r7, [pc, #28]	; (ec8 <_read+0x34>)
    while (!USART_0_is_byte_received())
     eaa:	47a0      	blx	r4
     eac:	2800      	cmp	r0, #0
     eae:	d0fc      	beq.n	eaa <_read+0x16>
    *ptr++ = USART_0_read_byte();
     eb0:	47b8      	blx	r7
     eb2:	7028      	strb	r0, [r5, #0]
     eb4:	3501      	adds	r5, #1
  while (n-- > 0) {
     eb6:	42b5      	cmp	r5, r6
     eb8:	d1f7      	bne.n	eaa <_read+0x16>
  }
  return len;
}
     eba:	4640      	mov	r0, r8
     ebc:	bc04      	pop	{r2}
     ebe:	4690      	mov	r8, r2
     ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	00000d81 	.word	0x00000d81
     ec8:	00000d59 	.word	0x00000d59

00000ecc <__udivsi3>:
     ecc:	2200      	movs	r2, #0
     ece:	0843      	lsrs	r3, r0, #1
     ed0:	428b      	cmp	r3, r1
     ed2:	d374      	bcc.n	fbe <__udivsi3+0xf2>
     ed4:	0903      	lsrs	r3, r0, #4
     ed6:	428b      	cmp	r3, r1
     ed8:	d35f      	bcc.n	f9a <__udivsi3+0xce>
     eda:	0a03      	lsrs	r3, r0, #8
     edc:	428b      	cmp	r3, r1
     ede:	d344      	bcc.n	f6a <__udivsi3+0x9e>
     ee0:	0b03      	lsrs	r3, r0, #12
     ee2:	428b      	cmp	r3, r1
     ee4:	d328      	bcc.n	f38 <__udivsi3+0x6c>
     ee6:	0c03      	lsrs	r3, r0, #16
     ee8:	428b      	cmp	r3, r1
     eea:	d30d      	bcc.n	f08 <__udivsi3+0x3c>
     eec:	22ff      	movs	r2, #255	; 0xff
     eee:	0209      	lsls	r1, r1, #8
     ef0:	ba12      	rev	r2, r2
     ef2:	0c03      	lsrs	r3, r0, #16
     ef4:	428b      	cmp	r3, r1
     ef6:	d302      	bcc.n	efe <__udivsi3+0x32>
     ef8:	1212      	asrs	r2, r2, #8
     efa:	0209      	lsls	r1, r1, #8
     efc:	d065      	beq.n	fca <__udivsi3+0xfe>
     efe:	0b03      	lsrs	r3, r0, #12
     f00:	428b      	cmp	r3, r1
     f02:	d319      	bcc.n	f38 <__udivsi3+0x6c>
     f04:	e000      	b.n	f08 <__udivsi3+0x3c>
     f06:	0a09      	lsrs	r1, r1, #8
     f08:	0bc3      	lsrs	r3, r0, #15
     f0a:	428b      	cmp	r3, r1
     f0c:	d301      	bcc.n	f12 <__udivsi3+0x46>
     f0e:	03cb      	lsls	r3, r1, #15
     f10:	1ac0      	subs	r0, r0, r3
     f12:	4152      	adcs	r2, r2
     f14:	0b83      	lsrs	r3, r0, #14
     f16:	428b      	cmp	r3, r1
     f18:	d301      	bcc.n	f1e <__udivsi3+0x52>
     f1a:	038b      	lsls	r3, r1, #14
     f1c:	1ac0      	subs	r0, r0, r3
     f1e:	4152      	adcs	r2, r2
     f20:	0b43      	lsrs	r3, r0, #13
     f22:	428b      	cmp	r3, r1
     f24:	d301      	bcc.n	f2a <__udivsi3+0x5e>
     f26:	034b      	lsls	r3, r1, #13
     f28:	1ac0      	subs	r0, r0, r3
     f2a:	4152      	adcs	r2, r2
     f2c:	0b03      	lsrs	r3, r0, #12
     f2e:	428b      	cmp	r3, r1
     f30:	d301      	bcc.n	f36 <__udivsi3+0x6a>
     f32:	030b      	lsls	r3, r1, #12
     f34:	1ac0      	subs	r0, r0, r3
     f36:	4152      	adcs	r2, r2
     f38:	0ac3      	lsrs	r3, r0, #11
     f3a:	428b      	cmp	r3, r1
     f3c:	d301      	bcc.n	f42 <__udivsi3+0x76>
     f3e:	02cb      	lsls	r3, r1, #11
     f40:	1ac0      	subs	r0, r0, r3
     f42:	4152      	adcs	r2, r2
     f44:	0a83      	lsrs	r3, r0, #10
     f46:	428b      	cmp	r3, r1
     f48:	d301      	bcc.n	f4e <__udivsi3+0x82>
     f4a:	028b      	lsls	r3, r1, #10
     f4c:	1ac0      	subs	r0, r0, r3
     f4e:	4152      	adcs	r2, r2
     f50:	0a43      	lsrs	r3, r0, #9
     f52:	428b      	cmp	r3, r1
     f54:	d301      	bcc.n	f5a <__udivsi3+0x8e>
     f56:	024b      	lsls	r3, r1, #9
     f58:	1ac0      	subs	r0, r0, r3
     f5a:	4152      	adcs	r2, r2
     f5c:	0a03      	lsrs	r3, r0, #8
     f5e:	428b      	cmp	r3, r1
     f60:	d301      	bcc.n	f66 <__udivsi3+0x9a>
     f62:	020b      	lsls	r3, r1, #8
     f64:	1ac0      	subs	r0, r0, r3
     f66:	4152      	adcs	r2, r2
     f68:	d2cd      	bcs.n	f06 <__udivsi3+0x3a>
     f6a:	09c3      	lsrs	r3, r0, #7
     f6c:	428b      	cmp	r3, r1
     f6e:	d301      	bcc.n	f74 <__udivsi3+0xa8>
     f70:	01cb      	lsls	r3, r1, #7
     f72:	1ac0      	subs	r0, r0, r3
     f74:	4152      	adcs	r2, r2
     f76:	0983      	lsrs	r3, r0, #6
     f78:	428b      	cmp	r3, r1
     f7a:	d301      	bcc.n	f80 <__udivsi3+0xb4>
     f7c:	018b      	lsls	r3, r1, #6
     f7e:	1ac0      	subs	r0, r0, r3
     f80:	4152      	adcs	r2, r2
     f82:	0943      	lsrs	r3, r0, #5
     f84:	428b      	cmp	r3, r1
     f86:	d301      	bcc.n	f8c <__udivsi3+0xc0>
     f88:	014b      	lsls	r3, r1, #5
     f8a:	1ac0      	subs	r0, r0, r3
     f8c:	4152      	adcs	r2, r2
     f8e:	0903      	lsrs	r3, r0, #4
     f90:	428b      	cmp	r3, r1
     f92:	d301      	bcc.n	f98 <__udivsi3+0xcc>
     f94:	010b      	lsls	r3, r1, #4
     f96:	1ac0      	subs	r0, r0, r3
     f98:	4152      	adcs	r2, r2
     f9a:	08c3      	lsrs	r3, r0, #3
     f9c:	428b      	cmp	r3, r1
     f9e:	d301      	bcc.n	fa4 <__udivsi3+0xd8>
     fa0:	00cb      	lsls	r3, r1, #3
     fa2:	1ac0      	subs	r0, r0, r3
     fa4:	4152      	adcs	r2, r2
     fa6:	0883      	lsrs	r3, r0, #2
     fa8:	428b      	cmp	r3, r1
     faa:	d301      	bcc.n	fb0 <__udivsi3+0xe4>
     fac:	008b      	lsls	r3, r1, #2
     fae:	1ac0      	subs	r0, r0, r3
     fb0:	4152      	adcs	r2, r2
     fb2:	0843      	lsrs	r3, r0, #1
     fb4:	428b      	cmp	r3, r1
     fb6:	d301      	bcc.n	fbc <__udivsi3+0xf0>
     fb8:	004b      	lsls	r3, r1, #1
     fba:	1ac0      	subs	r0, r0, r3
     fbc:	4152      	adcs	r2, r2
     fbe:	1a41      	subs	r1, r0, r1
     fc0:	d200      	bcs.n	fc4 <__udivsi3+0xf8>
     fc2:	4601      	mov	r1, r0
     fc4:	4152      	adcs	r2, r2
     fc6:	4610      	mov	r0, r2
     fc8:	4770      	bx	lr
     fca:	e7ff      	b.n	fcc <__udivsi3+0x100>
     fcc:	b501      	push	{r0, lr}
     fce:	2000      	movs	r0, #0
     fd0:	f000 f806 	bl	fe0 <__aeabi_idiv0>
     fd4:	bd02      	pop	{r1, pc}
     fd6:	46c0      	nop			; (mov r8, r8)

00000fd8 <__aeabi_uidivmod>:
     fd8:	2900      	cmp	r1, #0
     fda:	d0f7      	beq.n	fcc <__udivsi3+0x100>
     fdc:	e776      	b.n	ecc <__udivsi3>
     fde:	4770      	bx	lr

00000fe0 <__aeabi_idiv0>:
     fe0:	4770      	bx	lr
     fe2:	46c0      	nop			; (mov r8, r8)

00000fe4 <__ffssi2>:
     fe4:	b510      	push	{r4, lr}
     fe6:	2300      	movs	r3, #0
     fe8:	2800      	cmp	r0, #0
     fea:	d002      	beq.n	ff2 <__ffssi2+0xe>
     fec:	f000 f804 	bl	ff8 <__ctzsi2>
     ff0:	1c43      	adds	r3, r0, #1
     ff2:	0018      	movs	r0, r3
     ff4:	bd10      	pop	{r4, pc}
     ff6:	46c0      	nop			; (mov r8, r8)

00000ff8 <__ctzsi2>:
     ff8:	4241      	negs	r1, r0
     ffa:	4008      	ands	r0, r1
     ffc:	211c      	movs	r1, #28
     ffe:	2301      	movs	r3, #1
    1000:	041b      	lsls	r3, r3, #16
    1002:	4298      	cmp	r0, r3
    1004:	d301      	bcc.n	100a <__ctzsi2+0x12>
    1006:	0c00      	lsrs	r0, r0, #16
    1008:	3910      	subs	r1, #16
    100a:	0a1b      	lsrs	r3, r3, #8
    100c:	4298      	cmp	r0, r3
    100e:	d301      	bcc.n	1014 <__ctzsi2+0x1c>
    1010:	0a00      	lsrs	r0, r0, #8
    1012:	3908      	subs	r1, #8
    1014:	091b      	lsrs	r3, r3, #4
    1016:	4298      	cmp	r0, r3
    1018:	d301      	bcc.n	101e <__ctzsi2+0x26>
    101a:	0900      	lsrs	r0, r0, #4
    101c:	3904      	subs	r1, #4
    101e:	a202      	add	r2, pc, #8	; (adr r2, 1028 <__ctzsi2+0x30>)
    1020:	5c10      	ldrb	r0, [r2, r0]
    1022:	1a40      	subs	r0, r0, r1
    1024:	4770      	bx	lr
    1026:	46c0      	nop			; (mov r8, r8)
    1028:	1d1d1c1b 	.word	0x1d1d1c1b
    102c:	1e1e1e1e 	.word	0x1e1e1e1e
    1030:	1f1f1f1f 	.word	0x1f1f1f1f
    1034:	1f1f1f1f 	.word	0x1f1f1f1f

00001038 <__libc_init_array>:
    1038:	b570      	push	{r4, r5, r6, lr}
    103a:	2600      	movs	r6, #0
    103c:	4d0c      	ldr	r5, [pc, #48]	; (1070 <__libc_init_array+0x38>)
    103e:	4c0d      	ldr	r4, [pc, #52]	; (1074 <__libc_init_array+0x3c>)
    1040:	1b64      	subs	r4, r4, r5
    1042:	10a4      	asrs	r4, r4, #2
    1044:	42a6      	cmp	r6, r4
    1046:	d109      	bne.n	105c <__libc_init_array+0x24>
    1048:	2600      	movs	r6, #0
    104a:	f001 f897 	bl	217c <_init>
    104e:	4d0a      	ldr	r5, [pc, #40]	; (1078 <__libc_init_array+0x40>)
    1050:	4c0a      	ldr	r4, [pc, #40]	; (107c <__libc_init_array+0x44>)
    1052:	1b64      	subs	r4, r4, r5
    1054:	10a4      	asrs	r4, r4, #2
    1056:	42a6      	cmp	r6, r4
    1058:	d105      	bne.n	1066 <__libc_init_array+0x2e>
    105a:	bd70      	pop	{r4, r5, r6, pc}
    105c:	00b3      	lsls	r3, r6, #2
    105e:	58eb      	ldr	r3, [r5, r3]
    1060:	4798      	blx	r3
    1062:	3601      	adds	r6, #1
    1064:	e7ee      	b.n	1044 <__libc_init_array+0xc>
    1066:	00b3      	lsls	r3, r6, #2
    1068:	58eb      	ldr	r3, [r5, r3]
    106a:	4798      	blx	r3
    106c:	3601      	adds	r6, #1
    106e:	e7f2      	b.n	1056 <__libc_init_array+0x1e>
    1070:	00002188 	.word	0x00002188
    1074:	00002188 	.word	0x00002188
    1078:	00002188 	.word	0x00002188
    107c:	0000218c 	.word	0x0000218c

00001080 <memcpy>:
    1080:	2300      	movs	r3, #0
    1082:	b510      	push	{r4, lr}
    1084:	429a      	cmp	r2, r3
    1086:	d100      	bne.n	108a <memcpy+0xa>
    1088:	bd10      	pop	{r4, pc}
    108a:	5ccc      	ldrb	r4, [r1, r3]
    108c:	54c4      	strb	r4, [r0, r3]
    108e:	3301      	adds	r3, #1
    1090:	e7f8      	b.n	1084 <memcpy+0x4>

00001092 <memmove>:
    1092:	b510      	push	{r4, lr}
    1094:	4288      	cmp	r0, r1
    1096:	d902      	bls.n	109e <memmove+0xc>
    1098:	188b      	adds	r3, r1, r2
    109a:	4298      	cmp	r0, r3
    109c:	d308      	bcc.n	10b0 <memmove+0x1e>
    109e:	2300      	movs	r3, #0
    10a0:	429a      	cmp	r2, r3
    10a2:	d007      	beq.n	10b4 <memmove+0x22>
    10a4:	5ccc      	ldrb	r4, [r1, r3]
    10a6:	54c4      	strb	r4, [r0, r3]
    10a8:	3301      	adds	r3, #1
    10aa:	e7f9      	b.n	10a0 <memmove+0xe>
    10ac:	5c8b      	ldrb	r3, [r1, r2]
    10ae:	5483      	strb	r3, [r0, r2]
    10b0:	3a01      	subs	r2, #1
    10b2:	d2fb      	bcs.n	10ac <memmove+0x1a>
    10b4:	bd10      	pop	{r4, pc}

000010b6 <memset>:
    10b6:	0003      	movs	r3, r0
    10b8:	1882      	adds	r2, r0, r2
    10ba:	4293      	cmp	r3, r2
    10bc:	d100      	bne.n	10c0 <memset+0xa>
    10be:	4770      	bx	lr
    10c0:	7019      	strb	r1, [r3, #0]
    10c2:	3301      	adds	r3, #1
    10c4:	e7f9      	b.n	10ba <memset+0x4>
	...

000010c8 <iprintf>:
    10c8:	b40f      	push	{r0, r1, r2, r3}
    10ca:	4b0b      	ldr	r3, [pc, #44]	; (10f8 <iprintf+0x30>)
    10cc:	b513      	push	{r0, r1, r4, lr}
    10ce:	681c      	ldr	r4, [r3, #0]
    10d0:	2c00      	cmp	r4, #0
    10d2:	d005      	beq.n	10e0 <iprintf+0x18>
    10d4:	69a3      	ldr	r3, [r4, #24]
    10d6:	2b00      	cmp	r3, #0
    10d8:	d102      	bne.n	10e0 <iprintf+0x18>
    10da:	0020      	movs	r0, r4
    10dc:	f000 fa3c 	bl	1558 <__sinit>
    10e0:	ab05      	add	r3, sp, #20
    10e2:	9a04      	ldr	r2, [sp, #16]
    10e4:	68a1      	ldr	r1, [r4, #8]
    10e6:	0020      	movs	r0, r4
    10e8:	9301      	str	r3, [sp, #4]
    10ea:	f000 fc07 	bl	18fc <_vfiprintf_r>
    10ee:	bc16      	pop	{r1, r2, r4}
    10f0:	bc08      	pop	{r3}
    10f2:	b004      	add	sp, #16
    10f4:	4718      	bx	r3
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	20000000 	.word	0x20000000

000010fc <_puts_r>:
    10fc:	b570      	push	{r4, r5, r6, lr}
    10fe:	0005      	movs	r5, r0
    1100:	000e      	movs	r6, r1
    1102:	2800      	cmp	r0, #0
    1104:	d004      	beq.n	1110 <_puts_r+0x14>
    1106:	6983      	ldr	r3, [r0, #24]
    1108:	2b00      	cmp	r3, #0
    110a:	d101      	bne.n	1110 <_puts_r+0x14>
    110c:	f000 fa24 	bl	1558 <__sinit>
    1110:	69ab      	ldr	r3, [r5, #24]
    1112:	68ac      	ldr	r4, [r5, #8]
    1114:	2b00      	cmp	r3, #0
    1116:	d102      	bne.n	111e <_puts_r+0x22>
    1118:	0028      	movs	r0, r5
    111a:	f000 fa1d 	bl	1558 <__sinit>
    111e:	4b24      	ldr	r3, [pc, #144]	; (11b0 <_puts_r+0xb4>)
    1120:	429c      	cmp	r4, r3
    1122:	d10f      	bne.n	1144 <_puts_r+0x48>
    1124:	686c      	ldr	r4, [r5, #4]
    1126:	89a3      	ldrh	r3, [r4, #12]
    1128:	071b      	lsls	r3, r3, #28
    112a:	d502      	bpl.n	1132 <_puts_r+0x36>
    112c:	6923      	ldr	r3, [r4, #16]
    112e:	2b00      	cmp	r3, #0
    1130:	d120      	bne.n	1174 <_puts_r+0x78>
    1132:	0021      	movs	r1, r4
    1134:	0028      	movs	r0, r5
    1136:	f000 f8a1 	bl	127c <__swsetup_r>
    113a:	2800      	cmp	r0, #0
    113c:	d01a      	beq.n	1174 <_puts_r+0x78>
    113e:	2001      	movs	r0, #1
    1140:	4240      	negs	r0, r0
    1142:	bd70      	pop	{r4, r5, r6, pc}
    1144:	4b1b      	ldr	r3, [pc, #108]	; (11b4 <_puts_r+0xb8>)
    1146:	429c      	cmp	r4, r3
    1148:	d101      	bne.n	114e <_puts_r+0x52>
    114a:	68ac      	ldr	r4, [r5, #8]
    114c:	e7eb      	b.n	1126 <_puts_r+0x2a>
    114e:	4b1a      	ldr	r3, [pc, #104]	; (11b8 <_puts_r+0xbc>)
    1150:	429c      	cmp	r4, r3
    1152:	d1e8      	bne.n	1126 <_puts_r+0x2a>
    1154:	68ec      	ldr	r4, [r5, #12]
    1156:	e7e6      	b.n	1126 <_puts_r+0x2a>
    1158:	3b01      	subs	r3, #1
    115a:	3601      	adds	r6, #1
    115c:	60a3      	str	r3, [r4, #8]
    115e:	2b00      	cmp	r3, #0
    1160:	da04      	bge.n	116c <_puts_r+0x70>
    1162:	69a2      	ldr	r2, [r4, #24]
    1164:	4293      	cmp	r3, r2
    1166:	db16      	blt.n	1196 <_puts_r+0x9a>
    1168:	290a      	cmp	r1, #10
    116a:	d014      	beq.n	1196 <_puts_r+0x9a>
    116c:	6823      	ldr	r3, [r4, #0]
    116e:	1c5a      	adds	r2, r3, #1
    1170:	6022      	str	r2, [r4, #0]
    1172:	7019      	strb	r1, [r3, #0]
    1174:	7831      	ldrb	r1, [r6, #0]
    1176:	68a3      	ldr	r3, [r4, #8]
    1178:	2900      	cmp	r1, #0
    117a:	d1ed      	bne.n	1158 <_puts_r+0x5c>
    117c:	3b01      	subs	r3, #1
    117e:	60a3      	str	r3, [r4, #8]
    1180:	2b00      	cmp	r3, #0
    1182:	da0f      	bge.n	11a4 <_puts_r+0xa8>
    1184:	0022      	movs	r2, r4
    1186:	310a      	adds	r1, #10
    1188:	0028      	movs	r0, r5
    118a:	f000 f821 	bl	11d0 <__swbuf_r>
    118e:	1c43      	adds	r3, r0, #1
    1190:	d0d5      	beq.n	113e <_puts_r+0x42>
    1192:	200a      	movs	r0, #10
    1194:	e7d5      	b.n	1142 <_puts_r+0x46>
    1196:	0022      	movs	r2, r4
    1198:	0028      	movs	r0, r5
    119a:	f000 f819 	bl	11d0 <__swbuf_r>
    119e:	1c43      	adds	r3, r0, #1
    11a0:	d1e8      	bne.n	1174 <_puts_r+0x78>
    11a2:	e7cc      	b.n	113e <_puts_r+0x42>
    11a4:	200a      	movs	r0, #10
    11a6:	6823      	ldr	r3, [r4, #0]
    11a8:	1c5a      	adds	r2, r3, #1
    11aa:	6022      	str	r2, [r4, #0]
    11ac:	7018      	strb	r0, [r3, #0]
    11ae:	e7c8      	b.n	1142 <_puts_r+0x46>
    11b0:	00002108 	.word	0x00002108
    11b4:	00002128 	.word	0x00002128
    11b8:	000020e8 	.word	0x000020e8

000011bc <puts>:
    11bc:	b510      	push	{r4, lr}
    11be:	4b03      	ldr	r3, [pc, #12]	; (11cc <puts+0x10>)
    11c0:	0001      	movs	r1, r0
    11c2:	6818      	ldr	r0, [r3, #0]
    11c4:	f7ff ff9a 	bl	10fc <_puts_r>
    11c8:	bd10      	pop	{r4, pc}
    11ca:	46c0      	nop			; (mov r8, r8)
    11cc:	20000000 	.word	0x20000000

000011d0 <__swbuf_r>:
    11d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11d2:	0005      	movs	r5, r0
    11d4:	000e      	movs	r6, r1
    11d6:	0014      	movs	r4, r2
    11d8:	2800      	cmp	r0, #0
    11da:	d004      	beq.n	11e6 <__swbuf_r+0x16>
    11dc:	6983      	ldr	r3, [r0, #24]
    11de:	2b00      	cmp	r3, #0
    11e0:	d101      	bne.n	11e6 <__swbuf_r+0x16>
    11e2:	f000 f9b9 	bl	1558 <__sinit>
    11e6:	4b22      	ldr	r3, [pc, #136]	; (1270 <__swbuf_r+0xa0>)
    11e8:	429c      	cmp	r4, r3
    11ea:	d12d      	bne.n	1248 <__swbuf_r+0x78>
    11ec:	686c      	ldr	r4, [r5, #4]
    11ee:	69a3      	ldr	r3, [r4, #24]
    11f0:	60a3      	str	r3, [r4, #8]
    11f2:	89a3      	ldrh	r3, [r4, #12]
    11f4:	071b      	lsls	r3, r3, #28
    11f6:	d531      	bpl.n	125c <__swbuf_r+0x8c>
    11f8:	6923      	ldr	r3, [r4, #16]
    11fa:	2b00      	cmp	r3, #0
    11fc:	d02e      	beq.n	125c <__swbuf_r+0x8c>
    11fe:	6823      	ldr	r3, [r4, #0]
    1200:	6922      	ldr	r2, [r4, #16]
    1202:	b2f7      	uxtb	r7, r6
    1204:	1a98      	subs	r0, r3, r2
    1206:	6963      	ldr	r3, [r4, #20]
    1208:	b2f6      	uxtb	r6, r6
    120a:	4298      	cmp	r0, r3
    120c:	db05      	blt.n	121a <__swbuf_r+0x4a>
    120e:	0021      	movs	r1, r4
    1210:	0028      	movs	r0, r5
    1212:	f000 f933 	bl	147c <_fflush_r>
    1216:	2800      	cmp	r0, #0
    1218:	d126      	bne.n	1268 <__swbuf_r+0x98>
    121a:	68a3      	ldr	r3, [r4, #8]
    121c:	3001      	adds	r0, #1
    121e:	3b01      	subs	r3, #1
    1220:	60a3      	str	r3, [r4, #8]
    1222:	6823      	ldr	r3, [r4, #0]
    1224:	1c5a      	adds	r2, r3, #1
    1226:	6022      	str	r2, [r4, #0]
    1228:	701f      	strb	r7, [r3, #0]
    122a:	6963      	ldr	r3, [r4, #20]
    122c:	4298      	cmp	r0, r3
    122e:	d004      	beq.n	123a <__swbuf_r+0x6a>
    1230:	89a3      	ldrh	r3, [r4, #12]
    1232:	07db      	lsls	r3, r3, #31
    1234:	d51a      	bpl.n	126c <__swbuf_r+0x9c>
    1236:	2e0a      	cmp	r6, #10
    1238:	d118      	bne.n	126c <__swbuf_r+0x9c>
    123a:	0021      	movs	r1, r4
    123c:	0028      	movs	r0, r5
    123e:	f000 f91d 	bl	147c <_fflush_r>
    1242:	2800      	cmp	r0, #0
    1244:	d012      	beq.n	126c <__swbuf_r+0x9c>
    1246:	e00f      	b.n	1268 <__swbuf_r+0x98>
    1248:	4b0a      	ldr	r3, [pc, #40]	; (1274 <__swbuf_r+0xa4>)
    124a:	429c      	cmp	r4, r3
    124c:	d101      	bne.n	1252 <__swbuf_r+0x82>
    124e:	68ac      	ldr	r4, [r5, #8]
    1250:	e7cd      	b.n	11ee <__swbuf_r+0x1e>
    1252:	4b09      	ldr	r3, [pc, #36]	; (1278 <__swbuf_r+0xa8>)
    1254:	429c      	cmp	r4, r3
    1256:	d1ca      	bne.n	11ee <__swbuf_r+0x1e>
    1258:	68ec      	ldr	r4, [r5, #12]
    125a:	e7c8      	b.n	11ee <__swbuf_r+0x1e>
    125c:	0021      	movs	r1, r4
    125e:	0028      	movs	r0, r5
    1260:	f000 f80c 	bl	127c <__swsetup_r>
    1264:	2800      	cmp	r0, #0
    1266:	d0ca      	beq.n	11fe <__swbuf_r+0x2e>
    1268:	2601      	movs	r6, #1
    126a:	4276      	negs	r6, r6
    126c:	0030      	movs	r0, r6
    126e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1270:	00002108 	.word	0x00002108
    1274:	00002128 	.word	0x00002128
    1278:	000020e8 	.word	0x000020e8

0000127c <__swsetup_r>:
    127c:	4b36      	ldr	r3, [pc, #216]	; (1358 <__swsetup_r+0xdc>)
    127e:	b570      	push	{r4, r5, r6, lr}
    1280:	681d      	ldr	r5, [r3, #0]
    1282:	0006      	movs	r6, r0
    1284:	000c      	movs	r4, r1
    1286:	2d00      	cmp	r5, #0
    1288:	d005      	beq.n	1296 <__swsetup_r+0x1a>
    128a:	69ab      	ldr	r3, [r5, #24]
    128c:	2b00      	cmp	r3, #0
    128e:	d102      	bne.n	1296 <__swsetup_r+0x1a>
    1290:	0028      	movs	r0, r5
    1292:	f000 f961 	bl	1558 <__sinit>
    1296:	4b31      	ldr	r3, [pc, #196]	; (135c <__swsetup_r+0xe0>)
    1298:	429c      	cmp	r4, r3
    129a:	d10f      	bne.n	12bc <__swsetup_r+0x40>
    129c:	686c      	ldr	r4, [r5, #4]
    129e:	230c      	movs	r3, #12
    12a0:	5ee2      	ldrsh	r2, [r4, r3]
    12a2:	b293      	uxth	r3, r2
    12a4:	0719      	lsls	r1, r3, #28
    12a6:	d42d      	bmi.n	1304 <__swsetup_r+0x88>
    12a8:	06d9      	lsls	r1, r3, #27
    12aa:	d411      	bmi.n	12d0 <__swsetup_r+0x54>
    12ac:	2309      	movs	r3, #9
    12ae:	2001      	movs	r0, #1
    12b0:	6033      	str	r3, [r6, #0]
    12b2:	3337      	adds	r3, #55	; 0x37
    12b4:	4313      	orrs	r3, r2
    12b6:	81a3      	strh	r3, [r4, #12]
    12b8:	4240      	negs	r0, r0
    12ba:	bd70      	pop	{r4, r5, r6, pc}
    12bc:	4b28      	ldr	r3, [pc, #160]	; (1360 <__swsetup_r+0xe4>)
    12be:	429c      	cmp	r4, r3
    12c0:	d101      	bne.n	12c6 <__swsetup_r+0x4a>
    12c2:	68ac      	ldr	r4, [r5, #8]
    12c4:	e7eb      	b.n	129e <__swsetup_r+0x22>
    12c6:	4b27      	ldr	r3, [pc, #156]	; (1364 <__swsetup_r+0xe8>)
    12c8:	429c      	cmp	r4, r3
    12ca:	d1e8      	bne.n	129e <__swsetup_r+0x22>
    12cc:	68ec      	ldr	r4, [r5, #12]
    12ce:	e7e6      	b.n	129e <__swsetup_r+0x22>
    12d0:	075b      	lsls	r3, r3, #29
    12d2:	d513      	bpl.n	12fc <__swsetup_r+0x80>
    12d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    12d6:	2900      	cmp	r1, #0
    12d8:	d008      	beq.n	12ec <__swsetup_r+0x70>
    12da:	0023      	movs	r3, r4
    12dc:	3344      	adds	r3, #68	; 0x44
    12de:	4299      	cmp	r1, r3
    12e0:	d002      	beq.n	12e8 <__swsetup_r+0x6c>
    12e2:	0030      	movs	r0, r6
    12e4:	f000 fa3a 	bl	175c <_free_r>
    12e8:	2300      	movs	r3, #0
    12ea:	6363      	str	r3, [r4, #52]	; 0x34
    12ec:	2224      	movs	r2, #36	; 0x24
    12ee:	89a3      	ldrh	r3, [r4, #12]
    12f0:	4393      	bics	r3, r2
    12f2:	81a3      	strh	r3, [r4, #12]
    12f4:	2300      	movs	r3, #0
    12f6:	6063      	str	r3, [r4, #4]
    12f8:	6923      	ldr	r3, [r4, #16]
    12fa:	6023      	str	r3, [r4, #0]
    12fc:	2308      	movs	r3, #8
    12fe:	89a2      	ldrh	r2, [r4, #12]
    1300:	4313      	orrs	r3, r2
    1302:	81a3      	strh	r3, [r4, #12]
    1304:	6923      	ldr	r3, [r4, #16]
    1306:	2b00      	cmp	r3, #0
    1308:	d10b      	bne.n	1322 <__swsetup_r+0xa6>
    130a:	21a0      	movs	r1, #160	; 0xa0
    130c:	2280      	movs	r2, #128	; 0x80
    130e:	89a3      	ldrh	r3, [r4, #12]
    1310:	0089      	lsls	r1, r1, #2
    1312:	0092      	lsls	r2, r2, #2
    1314:	400b      	ands	r3, r1
    1316:	4293      	cmp	r3, r2
    1318:	d003      	beq.n	1322 <__swsetup_r+0xa6>
    131a:	0021      	movs	r1, r4
    131c:	0030      	movs	r0, r6
    131e:	f000 f9d9 	bl	16d4 <__smakebuf_r>
    1322:	2301      	movs	r3, #1
    1324:	89a2      	ldrh	r2, [r4, #12]
    1326:	4013      	ands	r3, r2
    1328:	d011      	beq.n	134e <__swsetup_r+0xd2>
    132a:	2300      	movs	r3, #0
    132c:	60a3      	str	r3, [r4, #8]
    132e:	6963      	ldr	r3, [r4, #20]
    1330:	425b      	negs	r3, r3
    1332:	61a3      	str	r3, [r4, #24]
    1334:	2000      	movs	r0, #0
    1336:	6923      	ldr	r3, [r4, #16]
    1338:	4283      	cmp	r3, r0
    133a:	d1be      	bne.n	12ba <__swsetup_r+0x3e>
    133c:	230c      	movs	r3, #12
    133e:	5ee2      	ldrsh	r2, [r4, r3]
    1340:	0613      	lsls	r3, r2, #24
    1342:	d5ba      	bpl.n	12ba <__swsetup_r+0x3e>
    1344:	2340      	movs	r3, #64	; 0x40
    1346:	4313      	orrs	r3, r2
    1348:	81a3      	strh	r3, [r4, #12]
    134a:	3801      	subs	r0, #1
    134c:	e7b5      	b.n	12ba <__swsetup_r+0x3e>
    134e:	0792      	lsls	r2, r2, #30
    1350:	d400      	bmi.n	1354 <__swsetup_r+0xd8>
    1352:	6963      	ldr	r3, [r4, #20]
    1354:	60a3      	str	r3, [r4, #8]
    1356:	e7ed      	b.n	1334 <__swsetup_r+0xb8>
    1358:	20000000 	.word	0x20000000
    135c:	00002108 	.word	0x00002108
    1360:	00002128 	.word	0x00002128
    1364:	000020e8 	.word	0x000020e8

00001368 <__sflush_r>:
    1368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    136a:	898a      	ldrh	r2, [r1, #12]
    136c:	0005      	movs	r5, r0
    136e:	000c      	movs	r4, r1
    1370:	0713      	lsls	r3, r2, #28
    1372:	d460      	bmi.n	1436 <__sflush_r+0xce>
    1374:	684b      	ldr	r3, [r1, #4]
    1376:	2b00      	cmp	r3, #0
    1378:	dc04      	bgt.n	1384 <__sflush_r+0x1c>
    137a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    137c:	2b00      	cmp	r3, #0
    137e:	dc01      	bgt.n	1384 <__sflush_r+0x1c>
    1380:	2000      	movs	r0, #0
    1382:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1384:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1386:	2f00      	cmp	r7, #0
    1388:	d0fa      	beq.n	1380 <__sflush_r+0x18>
    138a:	2300      	movs	r3, #0
    138c:	682e      	ldr	r6, [r5, #0]
    138e:	602b      	str	r3, [r5, #0]
    1390:	2380      	movs	r3, #128	; 0x80
    1392:	015b      	lsls	r3, r3, #5
    1394:	401a      	ands	r2, r3
    1396:	d034      	beq.n	1402 <__sflush_r+0x9a>
    1398:	6d60      	ldr	r0, [r4, #84]	; 0x54
    139a:	89a3      	ldrh	r3, [r4, #12]
    139c:	075b      	lsls	r3, r3, #29
    139e:	d506      	bpl.n	13ae <__sflush_r+0x46>
    13a0:	6863      	ldr	r3, [r4, #4]
    13a2:	1ac0      	subs	r0, r0, r3
    13a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    13a6:	2b00      	cmp	r3, #0
    13a8:	d001      	beq.n	13ae <__sflush_r+0x46>
    13aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    13ac:	1ac0      	subs	r0, r0, r3
    13ae:	0002      	movs	r2, r0
    13b0:	6a21      	ldr	r1, [r4, #32]
    13b2:	2300      	movs	r3, #0
    13b4:	0028      	movs	r0, r5
    13b6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    13b8:	47b8      	blx	r7
    13ba:	89a1      	ldrh	r1, [r4, #12]
    13bc:	1c43      	adds	r3, r0, #1
    13be:	d106      	bne.n	13ce <__sflush_r+0x66>
    13c0:	682b      	ldr	r3, [r5, #0]
    13c2:	2b1d      	cmp	r3, #29
    13c4:	d831      	bhi.n	142a <__sflush_r+0xc2>
    13c6:	4a2c      	ldr	r2, [pc, #176]	; (1478 <__sflush_r+0x110>)
    13c8:	40da      	lsrs	r2, r3
    13ca:	07d3      	lsls	r3, r2, #31
    13cc:	d52d      	bpl.n	142a <__sflush_r+0xc2>
    13ce:	2300      	movs	r3, #0
    13d0:	6063      	str	r3, [r4, #4]
    13d2:	6923      	ldr	r3, [r4, #16]
    13d4:	6023      	str	r3, [r4, #0]
    13d6:	04cb      	lsls	r3, r1, #19
    13d8:	d505      	bpl.n	13e6 <__sflush_r+0x7e>
    13da:	1c43      	adds	r3, r0, #1
    13dc:	d102      	bne.n	13e4 <__sflush_r+0x7c>
    13de:	682b      	ldr	r3, [r5, #0]
    13e0:	2b00      	cmp	r3, #0
    13e2:	d100      	bne.n	13e6 <__sflush_r+0x7e>
    13e4:	6560      	str	r0, [r4, #84]	; 0x54
    13e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    13e8:	602e      	str	r6, [r5, #0]
    13ea:	2900      	cmp	r1, #0
    13ec:	d0c8      	beq.n	1380 <__sflush_r+0x18>
    13ee:	0023      	movs	r3, r4
    13f0:	3344      	adds	r3, #68	; 0x44
    13f2:	4299      	cmp	r1, r3
    13f4:	d002      	beq.n	13fc <__sflush_r+0x94>
    13f6:	0028      	movs	r0, r5
    13f8:	f000 f9b0 	bl	175c <_free_r>
    13fc:	2000      	movs	r0, #0
    13fe:	6360      	str	r0, [r4, #52]	; 0x34
    1400:	e7bf      	b.n	1382 <__sflush_r+0x1a>
    1402:	2301      	movs	r3, #1
    1404:	6a21      	ldr	r1, [r4, #32]
    1406:	0028      	movs	r0, r5
    1408:	47b8      	blx	r7
    140a:	1c43      	adds	r3, r0, #1
    140c:	d1c5      	bne.n	139a <__sflush_r+0x32>
    140e:	682b      	ldr	r3, [r5, #0]
    1410:	2b00      	cmp	r3, #0
    1412:	d0c2      	beq.n	139a <__sflush_r+0x32>
    1414:	2b1d      	cmp	r3, #29
    1416:	d001      	beq.n	141c <__sflush_r+0xb4>
    1418:	2b16      	cmp	r3, #22
    141a:	d101      	bne.n	1420 <__sflush_r+0xb8>
    141c:	602e      	str	r6, [r5, #0]
    141e:	e7af      	b.n	1380 <__sflush_r+0x18>
    1420:	2340      	movs	r3, #64	; 0x40
    1422:	89a2      	ldrh	r2, [r4, #12]
    1424:	4313      	orrs	r3, r2
    1426:	81a3      	strh	r3, [r4, #12]
    1428:	e7ab      	b.n	1382 <__sflush_r+0x1a>
    142a:	2340      	movs	r3, #64	; 0x40
    142c:	430b      	orrs	r3, r1
    142e:	2001      	movs	r0, #1
    1430:	81a3      	strh	r3, [r4, #12]
    1432:	4240      	negs	r0, r0
    1434:	e7a5      	b.n	1382 <__sflush_r+0x1a>
    1436:	690f      	ldr	r7, [r1, #16]
    1438:	2f00      	cmp	r7, #0
    143a:	d0a1      	beq.n	1380 <__sflush_r+0x18>
    143c:	680b      	ldr	r3, [r1, #0]
    143e:	600f      	str	r7, [r1, #0]
    1440:	1bdb      	subs	r3, r3, r7
    1442:	9301      	str	r3, [sp, #4]
    1444:	2300      	movs	r3, #0
    1446:	0792      	lsls	r2, r2, #30
    1448:	d100      	bne.n	144c <__sflush_r+0xe4>
    144a:	694b      	ldr	r3, [r1, #20]
    144c:	60a3      	str	r3, [r4, #8]
    144e:	9b01      	ldr	r3, [sp, #4]
    1450:	2b00      	cmp	r3, #0
    1452:	dc00      	bgt.n	1456 <__sflush_r+0xee>
    1454:	e794      	b.n	1380 <__sflush_r+0x18>
    1456:	9b01      	ldr	r3, [sp, #4]
    1458:	003a      	movs	r2, r7
    145a:	6a21      	ldr	r1, [r4, #32]
    145c:	0028      	movs	r0, r5
    145e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1460:	47b0      	blx	r6
    1462:	2800      	cmp	r0, #0
    1464:	dc03      	bgt.n	146e <__sflush_r+0x106>
    1466:	2340      	movs	r3, #64	; 0x40
    1468:	89a2      	ldrh	r2, [r4, #12]
    146a:	4313      	orrs	r3, r2
    146c:	e7df      	b.n	142e <__sflush_r+0xc6>
    146e:	9b01      	ldr	r3, [sp, #4]
    1470:	183f      	adds	r7, r7, r0
    1472:	1a1b      	subs	r3, r3, r0
    1474:	9301      	str	r3, [sp, #4]
    1476:	e7ea      	b.n	144e <__sflush_r+0xe6>
    1478:	20400001 	.word	0x20400001

0000147c <_fflush_r>:
    147c:	690b      	ldr	r3, [r1, #16]
    147e:	b570      	push	{r4, r5, r6, lr}
    1480:	0005      	movs	r5, r0
    1482:	000c      	movs	r4, r1
    1484:	2b00      	cmp	r3, #0
    1486:	d101      	bne.n	148c <_fflush_r+0x10>
    1488:	2000      	movs	r0, #0
    148a:	bd70      	pop	{r4, r5, r6, pc}
    148c:	2800      	cmp	r0, #0
    148e:	d004      	beq.n	149a <_fflush_r+0x1e>
    1490:	6983      	ldr	r3, [r0, #24]
    1492:	2b00      	cmp	r3, #0
    1494:	d101      	bne.n	149a <_fflush_r+0x1e>
    1496:	f000 f85f 	bl	1558 <__sinit>
    149a:	4b0b      	ldr	r3, [pc, #44]	; (14c8 <_fflush_r+0x4c>)
    149c:	429c      	cmp	r4, r3
    149e:	d109      	bne.n	14b4 <_fflush_r+0x38>
    14a0:	686c      	ldr	r4, [r5, #4]
    14a2:	220c      	movs	r2, #12
    14a4:	5ea3      	ldrsh	r3, [r4, r2]
    14a6:	2b00      	cmp	r3, #0
    14a8:	d0ee      	beq.n	1488 <_fflush_r+0xc>
    14aa:	0021      	movs	r1, r4
    14ac:	0028      	movs	r0, r5
    14ae:	f7ff ff5b 	bl	1368 <__sflush_r>
    14b2:	e7ea      	b.n	148a <_fflush_r+0xe>
    14b4:	4b05      	ldr	r3, [pc, #20]	; (14cc <_fflush_r+0x50>)
    14b6:	429c      	cmp	r4, r3
    14b8:	d101      	bne.n	14be <_fflush_r+0x42>
    14ba:	68ac      	ldr	r4, [r5, #8]
    14bc:	e7f1      	b.n	14a2 <_fflush_r+0x26>
    14be:	4b04      	ldr	r3, [pc, #16]	; (14d0 <_fflush_r+0x54>)
    14c0:	429c      	cmp	r4, r3
    14c2:	d1ee      	bne.n	14a2 <_fflush_r+0x26>
    14c4:	68ec      	ldr	r4, [r5, #12]
    14c6:	e7ec      	b.n	14a2 <_fflush_r+0x26>
    14c8:	00002108 	.word	0x00002108
    14cc:	00002128 	.word	0x00002128
    14d0:	000020e8 	.word	0x000020e8

000014d4 <_cleanup_r>:
    14d4:	b510      	push	{r4, lr}
    14d6:	4902      	ldr	r1, [pc, #8]	; (14e0 <_cleanup_r+0xc>)
    14d8:	f000 f8b2 	bl	1640 <_fwalk_reent>
    14dc:	bd10      	pop	{r4, pc}
    14de:	46c0      	nop			; (mov r8, r8)
    14e0:	0000147d 	.word	0x0000147d

000014e4 <std.isra.0>:
    14e4:	2300      	movs	r3, #0
    14e6:	b510      	push	{r4, lr}
    14e8:	0004      	movs	r4, r0
    14ea:	6003      	str	r3, [r0, #0]
    14ec:	6043      	str	r3, [r0, #4]
    14ee:	6083      	str	r3, [r0, #8]
    14f0:	8181      	strh	r1, [r0, #12]
    14f2:	6643      	str	r3, [r0, #100]	; 0x64
    14f4:	81c2      	strh	r2, [r0, #14]
    14f6:	6103      	str	r3, [r0, #16]
    14f8:	6143      	str	r3, [r0, #20]
    14fa:	6183      	str	r3, [r0, #24]
    14fc:	0019      	movs	r1, r3
    14fe:	2208      	movs	r2, #8
    1500:	305c      	adds	r0, #92	; 0x5c
    1502:	f7ff fdd8 	bl	10b6 <memset>
    1506:	4b05      	ldr	r3, [pc, #20]	; (151c <std.isra.0+0x38>)
    1508:	6224      	str	r4, [r4, #32]
    150a:	6263      	str	r3, [r4, #36]	; 0x24
    150c:	4b04      	ldr	r3, [pc, #16]	; (1520 <std.isra.0+0x3c>)
    150e:	62a3      	str	r3, [r4, #40]	; 0x28
    1510:	4b04      	ldr	r3, [pc, #16]	; (1524 <std.isra.0+0x40>)
    1512:	62e3      	str	r3, [r4, #44]	; 0x2c
    1514:	4b04      	ldr	r3, [pc, #16]	; (1528 <std.isra.0+0x44>)
    1516:	6323      	str	r3, [r4, #48]	; 0x30
    1518:	bd10      	pop	{r4, pc}
    151a:	46c0      	nop			; (mov r8, r8)
    151c:	00001e69 	.word	0x00001e69
    1520:	00001e91 	.word	0x00001e91
    1524:	00001ec9 	.word	0x00001ec9
    1528:	00001ef5 	.word	0x00001ef5

0000152c <__sfmoreglue>:
    152c:	b570      	push	{r4, r5, r6, lr}
    152e:	2568      	movs	r5, #104	; 0x68
    1530:	1e4a      	subs	r2, r1, #1
    1532:	4355      	muls	r5, r2
    1534:	000e      	movs	r6, r1
    1536:	0029      	movs	r1, r5
    1538:	3174      	adds	r1, #116	; 0x74
    153a:	f000 f959 	bl	17f0 <_malloc_r>
    153e:	1e04      	subs	r4, r0, #0
    1540:	d008      	beq.n	1554 <__sfmoreglue+0x28>
    1542:	2100      	movs	r1, #0
    1544:	002a      	movs	r2, r5
    1546:	6001      	str	r1, [r0, #0]
    1548:	6046      	str	r6, [r0, #4]
    154a:	300c      	adds	r0, #12
    154c:	60a0      	str	r0, [r4, #8]
    154e:	3268      	adds	r2, #104	; 0x68
    1550:	f7ff fdb1 	bl	10b6 <memset>
    1554:	0020      	movs	r0, r4
    1556:	bd70      	pop	{r4, r5, r6, pc}

00001558 <__sinit>:
    1558:	6983      	ldr	r3, [r0, #24]
    155a:	b513      	push	{r0, r1, r4, lr}
    155c:	0004      	movs	r4, r0
    155e:	2b00      	cmp	r3, #0
    1560:	d128      	bne.n	15b4 <__sinit+0x5c>
    1562:	6483      	str	r3, [r0, #72]	; 0x48
    1564:	64c3      	str	r3, [r0, #76]	; 0x4c
    1566:	6503      	str	r3, [r0, #80]	; 0x50
    1568:	4b13      	ldr	r3, [pc, #76]	; (15b8 <__sinit+0x60>)
    156a:	4a14      	ldr	r2, [pc, #80]	; (15bc <__sinit+0x64>)
    156c:	681b      	ldr	r3, [r3, #0]
    156e:	6282      	str	r2, [r0, #40]	; 0x28
    1570:	9301      	str	r3, [sp, #4]
    1572:	4298      	cmp	r0, r3
    1574:	d101      	bne.n	157a <__sinit+0x22>
    1576:	2301      	movs	r3, #1
    1578:	6183      	str	r3, [r0, #24]
    157a:	0020      	movs	r0, r4
    157c:	f000 f820 	bl	15c0 <__sfp>
    1580:	6060      	str	r0, [r4, #4]
    1582:	0020      	movs	r0, r4
    1584:	f000 f81c 	bl	15c0 <__sfp>
    1588:	60a0      	str	r0, [r4, #8]
    158a:	0020      	movs	r0, r4
    158c:	f000 f818 	bl	15c0 <__sfp>
    1590:	2200      	movs	r2, #0
    1592:	60e0      	str	r0, [r4, #12]
    1594:	2104      	movs	r1, #4
    1596:	6860      	ldr	r0, [r4, #4]
    1598:	f7ff ffa4 	bl	14e4 <std.isra.0>
    159c:	2201      	movs	r2, #1
    159e:	2109      	movs	r1, #9
    15a0:	68a0      	ldr	r0, [r4, #8]
    15a2:	f7ff ff9f 	bl	14e4 <std.isra.0>
    15a6:	2202      	movs	r2, #2
    15a8:	2112      	movs	r1, #18
    15aa:	68e0      	ldr	r0, [r4, #12]
    15ac:	f7ff ff9a 	bl	14e4 <std.isra.0>
    15b0:	2301      	movs	r3, #1
    15b2:	61a3      	str	r3, [r4, #24]
    15b4:	bd13      	pop	{r0, r1, r4, pc}
    15b6:	46c0      	nop			; (mov r8, r8)
    15b8:	000020e4 	.word	0x000020e4
    15bc:	000014d5 	.word	0x000014d5

000015c0 <__sfp>:
    15c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15c2:	4b1e      	ldr	r3, [pc, #120]	; (163c <__sfp+0x7c>)
    15c4:	0007      	movs	r7, r0
    15c6:	681e      	ldr	r6, [r3, #0]
    15c8:	69b3      	ldr	r3, [r6, #24]
    15ca:	2b00      	cmp	r3, #0
    15cc:	d102      	bne.n	15d4 <__sfp+0x14>
    15ce:	0030      	movs	r0, r6
    15d0:	f7ff ffc2 	bl	1558 <__sinit>
    15d4:	3648      	adds	r6, #72	; 0x48
    15d6:	68b4      	ldr	r4, [r6, #8]
    15d8:	6873      	ldr	r3, [r6, #4]
    15da:	3b01      	subs	r3, #1
    15dc:	d504      	bpl.n	15e8 <__sfp+0x28>
    15de:	6833      	ldr	r3, [r6, #0]
    15e0:	2b00      	cmp	r3, #0
    15e2:	d007      	beq.n	15f4 <__sfp+0x34>
    15e4:	6836      	ldr	r6, [r6, #0]
    15e6:	e7f6      	b.n	15d6 <__sfp+0x16>
    15e8:	220c      	movs	r2, #12
    15ea:	5ea5      	ldrsh	r5, [r4, r2]
    15ec:	2d00      	cmp	r5, #0
    15ee:	d00d      	beq.n	160c <__sfp+0x4c>
    15f0:	3468      	adds	r4, #104	; 0x68
    15f2:	e7f2      	b.n	15da <__sfp+0x1a>
    15f4:	2104      	movs	r1, #4
    15f6:	0038      	movs	r0, r7
    15f8:	f7ff ff98 	bl	152c <__sfmoreglue>
    15fc:	6030      	str	r0, [r6, #0]
    15fe:	2800      	cmp	r0, #0
    1600:	d1f0      	bne.n	15e4 <__sfp+0x24>
    1602:	230c      	movs	r3, #12
    1604:	0004      	movs	r4, r0
    1606:	603b      	str	r3, [r7, #0]
    1608:	0020      	movs	r0, r4
    160a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    160c:	2301      	movs	r3, #1
    160e:	0020      	movs	r0, r4
    1610:	425b      	negs	r3, r3
    1612:	81e3      	strh	r3, [r4, #14]
    1614:	3302      	adds	r3, #2
    1616:	81a3      	strh	r3, [r4, #12]
    1618:	6665      	str	r5, [r4, #100]	; 0x64
    161a:	6025      	str	r5, [r4, #0]
    161c:	60a5      	str	r5, [r4, #8]
    161e:	6065      	str	r5, [r4, #4]
    1620:	6125      	str	r5, [r4, #16]
    1622:	6165      	str	r5, [r4, #20]
    1624:	61a5      	str	r5, [r4, #24]
    1626:	2208      	movs	r2, #8
    1628:	0029      	movs	r1, r5
    162a:	305c      	adds	r0, #92	; 0x5c
    162c:	f7ff fd43 	bl	10b6 <memset>
    1630:	6365      	str	r5, [r4, #52]	; 0x34
    1632:	63a5      	str	r5, [r4, #56]	; 0x38
    1634:	64a5      	str	r5, [r4, #72]	; 0x48
    1636:	64e5      	str	r5, [r4, #76]	; 0x4c
    1638:	e7e6      	b.n	1608 <__sfp+0x48>
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	000020e4 	.word	0x000020e4

00001640 <_fwalk_reent>:
    1640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1642:	0004      	movs	r4, r0
    1644:	0007      	movs	r7, r0
    1646:	2600      	movs	r6, #0
    1648:	9101      	str	r1, [sp, #4]
    164a:	3448      	adds	r4, #72	; 0x48
    164c:	2c00      	cmp	r4, #0
    164e:	d101      	bne.n	1654 <_fwalk_reent+0x14>
    1650:	0030      	movs	r0, r6
    1652:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1654:	6863      	ldr	r3, [r4, #4]
    1656:	68a5      	ldr	r5, [r4, #8]
    1658:	9300      	str	r3, [sp, #0]
    165a:	9b00      	ldr	r3, [sp, #0]
    165c:	3b01      	subs	r3, #1
    165e:	9300      	str	r3, [sp, #0]
    1660:	d501      	bpl.n	1666 <_fwalk_reent+0x26>
    1662:	6824      	ldr	r4, [r4, #0]
    1664:	e7f2      	b.n	164c <_fwalk_reent+0xc>
    1666:	89ab      	ldrh	r3, [r5, #12]
    1668:	2b01      	cmp	r3, #1
    166a:	d908      	bls.n	167e <_fwalk_reent+0x3e>
    166c:	220e      	movs	r2, #14
    166e:	5eab      	ldrsh	r3, [r5, r2]
    1670:	3301      	adds	r3, #1
    1672:	d004      	beq.n	167e <_fwalk_reent+0x3e>
    1674:	0029      	movs	r1, r5
    1676:	0038      	movs	r0, r7
    1678:	9b01      	ldr	r3, [sp, #4]
    167a:	4798      	blx	r3
    167c:	4306      	orrs	r6, r0
    167e:	3568      	adds	r5, #104	; 0x68
    1680:	e7eb      	b.n	165a <_fwalk_reent+0x1a>
	...

00001684 <__swhatbuf_r>:
    1684:	b570      	push	{r4, r5, r6, lr}
    1686:	000e      	movs	r6, r1
    1688:	001d      	movs	r5, r3
    168a:	230e      	movs	r3, #14
    168c:	5ec9      	ldrsh	r1, [r1, r3]
    168e:	b090      	sub	sp, #64	; 0x40
    1690:	0014      	movs	r4, r2
    1692:	2900      	cmp	r1, #0
    1694:	da07      	bge.n	16a6 <__swhatbuf_r+0x22>
    1696:	2300      	movs	r3, #0
    1698:	602b      	str	r3, [r5, #0]
    169a:	89b3      	ldrh	r3, [r6, #12]
    169c:	061b      	lsls	r3, r3, #24
    169e:	d411      	bmi.n	16c4 <__swhatbuf_r+0x40>
    16a0:	2380      	movs	r3, #128	; 0x80
    16a2:	00db      	lsls	r3, r3, #3
    16a4:	e00f      	b.n	16c6 <__swhatbuf_r+0x42>
    16a6:	aa01      	add	r2, sp, #4
    16a8:	f000 fc50 	bl	1f4c <_fstat_r>
    16ac:	2800      	cmp	r0, #0
    16ae:	dbf2      	blt.n	1696 <__swhatbuf_r+0x12>
    16b0:	22f0      	movs	r2, #240	; 0xf0
    16b2:	9b02      	ldr	r3, [sp, #8]
    16b4:	0212      	lsls	r2, r2, #8
    16b6:	4013      	ands	r3, r2
    16b8:	4a05      	ldr	r2, [pc, #20]	; (16d0 <__swhatbuf_r+0x4c>)
    16ba:	189b      	adds	r3, r3, r2
    16bc:	425a      	negs	r2, r3
    16be:	4153      	adcs	r3, r2
    16c0:	602b      	str	r3, [r5, #0]
    16c2:	e7ed      	b.n	16a0 <__swhatbuf_r+0x1c>
    16c4:	2340      	movs	r3, #64	; 0x40
    16c6:	2000      	movs	r0, #0
    16c8:	6023      	str	r3, [r4, #0]
    16ca:	b010      	add	sp, #64	; 0x40
    16cc:	bd70      	pop	{r4, r5, r6, pc}
    16ce:	46c0      	nop			; (mov r8, r8)
    16d0:	ffffe000 	.word	0xffffe000

000016d4 <__smakebuf_r>:
    16d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    16d6:	2602      	movs	r6, #2
    16d8:	898b      	ldrh	r3, [r1, #12]
    16da:	0005      	movs	r5, r0
    16dc:	000c      	movs	r4, r1
    16de:	4233      	tst	r3, r6
    16e0:	d006      	beq.n	16f0 <__smakebuf_r+0x1c>
    16e2:	0023      	movs	r3, r4
    16e4:	3347      	adds	r3, #71	; 0x47
    16e6:	6023      	str	r3, [r4, #0]
    16e8:	6123      	str	r3, [r4, #16]
    16ea:	2301      	movs	r3, #1
    16ec:	6163      	str	r3, [r4, #20]
    16ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    16f0:	ab01      	add	r3, sp, #4
    16f2:	466a      	mov	r2, sp
    16f4:	f7ff ffc6 	bl	1684 <__swhatbuf_r>
    16f8:	9900      	ldr	r1, [sp, #0]
    16fa:	0007      	movs	r7, r0
    16fc:	0028      	movs	r0, r5
    16fe:	f000 f877 	bl	17f0 <_malloc_r>
    1702:	2800      	cmp	r0, #0
    1704:	d108      	bne.n	1718 <__smakebuf_r+0x44>
    1706:	220c      	movs	r2, #12
    1708:	5ea3      	ldrsh	r3, [r4, r2]
    170a:	059a      	lsls	r2, r3, #22
    170c:	d4ef      	bmi.n	16ee <__smakebuf_r+0x1a>
    170e:	2203      	movs	r2, #3
    1710:	4393      	bics	r3, r2
    1712:	431e      	orrs	r6, r3
    1714:	81a6      	strh	r6, [r4, #12]
    1716:	e7e4      	b.n	16e2 <__smakebuf_r+0xe>
    1718:	4b0f      	ldr	r3, [pc, #60]	; (1758 <__smakebuf_r+0x84>)
    171a:	62ab      	str	r3, [r5, #40]	; 0x28
    171c:	2380      	movs	r3, #128	; 0x80
    171e:	89a2      	ldrh	r2, [r4, #12]
    1720:	6020      	str	r0, [r4, #0]
    1722:	4313      	orrs	r3, r2
    1724:	81a3      	strh	r3, [r4, #12]
    1726:	9b00      	ldr	r3, [sp, #0]
    1728:	6120      	str	r0, [r4, #16]
    172a:	6163      	str	r3, [r4, #20]
    172c:	9b01      	ldr	r3, [sp, #4]
    172e:	2b00      	cmp	r3, #0
    1730:	d00d      	beq.n	174e <__smakebuf_r+0x7a>
    1732:	230e      	movs	r3, #14
    1734:	5ee1      	ldrsh	r1, [r4, r3]
    1736:	0028      	movs	r0, r5
    1738:	f000 fc1a 	bl	1f70 <_isatty_r>
    173c:	2800      	cmp	r0, #0
    173e:	d006      	beq.n	174e <__smakebuf_r+0x7a>
    1740:	2203      	movs	r2, #3
    1742:	89a3      	ldrh	r3, [r4, #12]
    1744:	4393      	bics	r3, r2
    1746:	001a      	movs	r2, r3
    1748:	2301      	movs	r3, #1
    174a:	4313      	orrs	r3, r2
    174c:	81a3      	strh	r3, [r4, #12]
    174e:	89a0      	ldrh	r0, [r4, #12]
    1750:	4338      	orrs	r0, r7
    1752:	81a0      	strh	r0, [r4, #12]
    1754:	e7cb      	b.n	16ee <__smakebuf_r+0x1a>
    1756:	46c0      	nop			; (mov r8, r8)
    1758:	000014d5 	.word	0x000014d5

0000175c <_free_r>:
    175c:	b570      	push	{r4, r5, r6, lr}
    175e:	0005      	movs	r5, r0
    1760:	2900      	cmp	r1, #0
    1762:	d010      	beq.n	1786 <_free_r+0x2a>
    1764:	1f0c      	subs	r4, r1, #4
    1766:	6823      	ldr	r3, [r4, #0]
    1768:	2b00      	cmp	r3, #0
    176a:	da00      	bge.n	176e <_free_r+0x12>
    176c:	18e4      	adds	r4, r4, r3
    176e:	0028      	movs	r0, r5
    1770:	f000 fc2f 	bl	1fd2 <__malloc_lock>
    1774:	4a1d      	ldr	r2, [pc, #116]	; (17ec <_free_r+0x90>)
    1776:	6813      	ldr	r3, [r2, #0]
    1778:	2b00      	cmp	r3, #0
    177a:	d105      	bne.n	1788 <_free_r+0x2c>
    177c:	6063      	str	r3, [r4, #4]
    177e:	6014      	str	r4, [r2, #0]
    1780:	0028      	movs	r0, r5
    1782:	f000 fc27 	bl	1fd4 <__malloc_unlock>
    1786:	bd70      	pop	{r4, r5, r6, pc}
    1788:	42a3      	cmp	r3, r4
    178a:	d909      	bls.n	17a0 <_free_r+0x44>
    178c:	6821      	ldr	r1, [r4, #0]
    178e:	1860      	adds	r0, r4, r1
    1790:	4283      	cmp	r3, r0
    1792:	d1f3      	bne.n	177c <_free_r+0x20>
    1794:	6818      	ldr	r0, [r3, #0]
    1796:	685b      	ldr	r3, [r3, #4]
    1798:	1841      	adds	r1, r0, r1
    179a:	6021      	str	r1, [r4, #0]
    179c:	e7ee      	b.n	177c <_free_r+0x20>
    179e:	0013      	movs	r3, r2
    17a0:	685a      	ldr	r2, [r3, #4]
    17a2:	2a00      	cmp	r2, #0
    17a4:	d001      	beq.n	17aa <_free_r+0x4e>
    17a6:	42a2      	cmp	r2, r4
    17a8:	d9f9      	bls.n	179e <_free_r+0x42>
    17aa:	6819      	ldr	r1, [r3, #0]
    17ac:	1858      	adds	r0, r3, r1
    17ae:	42a0      	cmp	r0, r4
    17b0:	d10b      	bne.n	17ca <_free_r+0x6e>
    17b2:	6820      	ldr	r0, [r4, #0]
    17b4:	1809      	adds	r1, r1, r0
    17b6:	1858      	adds	r0, r3, r1
    17b8:	6019      	str	r1, [r3, #0]
    17ba:	4282      	cmp	r2, r0
    17bc:	d1e0      	bne.n	1780 <_free_r+0x24>
    17be:	6810      	ldr	r0, [r2, #0]
    17c0:	6852      	ldr	r2, [r2, #4]
    17c2:	1841      	adds	r1, r0, r1
    17c4:	6019      	str	r1, [r3, #0]
    17c6:	605a      	str	r2, [r3, #4]
    17c8:	e7da      	b.n	1780 <_free_r+0x24>
    17ca:	42a0      	cmp	r0, r4
    17cc:	d902      	bls.n	17d4 <_free_r+0x78>
    17ce:	230c      	movs	r3, #12
    17d0:	602b      	str	r3, [r5, #0]
    17d2:	e7d5      	b.n	1780 <_free_r+0x24>
    17d4:	6821      	ldr	r1, [r4, #0]
    17d6:	1860      	adds	r0, r4, r1
    17d8:	4282      	cmp	r2, r0
    17da:	d103      	bne.n	17e4 <_free_r+0x88>
    17dc:	6810      	ldr	r0, [r2, #0]
    17de:	6852      	ldr	r2, [r2, #4]
    17e0:	1841      	adds	r1, r0, r1
    17e2:	6021      	str	r1, [r4, #0]
    17e4:	6062      	str	r2, [r4, #4]
    17e6:	605c      	str	r4, [r3, #4]
    17e8:	e7ca      	b.n	1780 <_free_r+0x24>
    17ea:	46c0      	nop			; (mov r8, r8)
    17ec:	20000190 	.word	0x20000190

000017f0 <_malloc_r>:
    17f0:	2303      	movs	r3, #3
    17f2:	b570      	push	{r4, r5, r6, lr}
    17f4:	1ccd      	adds	r5, r1, #3
    17f6:	439d      	bics	r5, r3
    17f8:	3508      	adds	r5, #8
    17fa:	0006      	movs	r6, r0
    17fc:	2d0c      	cmp	r5, #12
    17fe:	d21e      	bcs.n	183e <_malloc_r+0x4e>
    1800:	250c      	movs	r5, #12
    1802:	42a9      	cmp	r1, r5
    1804:	d81d      	bhi.n	1842 <_malloc_r+0x52>
    1806:	0030      	movs	r0, r6
    1808:	f000 fbe3 	bl	1fd2 <__malloc_lock>
    180c:	4a25      	ldr	r2, [pc, #148]	; (18a4 <_malloc_r+0xb4>)
    180e:	6814      	ldr	r4, [r2, #0]
    1810:	0021      	movs	r1, r4
    1812:	2900      	cmp	r1, #0
    1814:	d119      	bne.n	184a <_malloc_r+0x5a>
    1816:	4c24      	ldr	r4, [pc, #144]	; (18a8 <_malloc_r+0xb8>)
    1818:	6823      	ldr	r3, [r4, #0]
    181a:	2b00      	cmp	r3, #0
    181c:	d103      	bne.n	1826 <_malloc_r+0x36>
    181e:	0030      	movs	r0, r6
    1820:	f000 fb10 	bl	1e44 <_sbrk_r>
    1824:	6020      	str	r0, [r4, #0]
    1826:	0029      	movs	r1, r5
    1828:	0030      	movs	r0, r6
    182a:	f000 fb0b 	bl	1e44 <_sbrk_r>
    182e:	1c43      	adds	r3, r0, #1
    1830:	d12c      	bne.n	188c <_malloc_r+0x9c>
    1832:	230c      	movs	r3, #12
    1834:	0030      	movs	r0, r6
    1836:	6033      	str	r3, [r6, #0]
    1838:	f000 fbcc 	bl	1fd4 <__malloc_unlock>
    183c:	e003      	b.n	1846 <_malloc_r+0x56>
    183e:	2d00      	cmp	r5, #0
    1840:	dadf      	bge.n	1802 <_malloc_r+0x12>
    1842:	230c      	movs	r3, #12
    1844:	6033      	str	r3, [r6, #0]
    1846:	2000      	movs	r0, #0
    1848:	bd70      	pop	{r4, r5, r6, pc}
    184a:	680b      	ldr	r3, [r1, #0]
    184c:	1b5b      	subs	r3, r3, r5
    184e:	d41a      	bmi.n	1886 <_malloc_r+0x96>
    1850:	2b0b      	cmp	r3, #11
    1852:	d903      	bls.n	185c <_malloc_r+0x6c>
    1854:	600b      	str	r3, [r1, #0]
    1856:	18cc      	adds	r4, r1, r3
    1858:	6025      	str	r5, [r4, #0]
    185a:	e003      	b.n	1864 <_malloc_r+0x74>
    185c:	428c      	cmp	r4, r1
    185e:	d10e      	bne.n	187e <_malloc_r+0x8e>
    1860:	6863      	ldr	r3, [r4, #4]
    1862:	6013      	str	r3, [r2, #0]
    1864:	0030      	movs	r0, r6
    1866:	f000 fbb5 	bl	1fd4 <__malloc_unlock>
    186a:	0020      	movs	r0, r4
    186c:	2207      	movs	r2, #7
    186e:	300b      	adds	r0, #11
    1870:	1d23      	adds	r3, r4, #4
    1872:	4390      	bics	r0, r2
    1874:	1ac3      	subs	r3, r0, r3
    1876:	d0e7      	beq.n	1848 <_malloc_r+0x58>
    1878:	425a      	negs	r2, r3
    187a:	50e2      	str	r2, [r4, r3]
    187c:	e7e4      	b.n	1848 <_malloc_r+0x58>
    187e:	684b      	ldr	r3, [r1, #4]
    1880:	6063      	str	r3, [r4, #4]
    1882:	000c      	movs	r4, r1
    1884:	e7ee      	b.n	1864 <_malloc_r+0x74>
    1886:	000c      	movs	r4, r1
    1888:	6849      	ldr	r1, [r1, #4]
    188a:	e7c2      	b.n	1812 <_malloc_r+0x22>
    188c:	2303      	movs	r3, #3
    188e:	1cc4      	adds	r4, r0, #3
    1890:	439c      	bics	r4, r3
    1892:	42a0      	cmp	r0, r4
    1894:	d0e0      	beq.n	1858 <_malloc_r+0x68>
    1896:	1a21      	subs	r1, r4, r0
    1898:	0030      	movs	r0, r6
    189a:	f000 fad3 	bl	1e44 <_sbrk_r>
    189e:	1c43      	adds	r3, r0, #1
    18a0:	d1da      	bne.n	1858 <_malloc_r+0x68>
    18a2:	e7c6      	b.n	1832 <_malloc_r+0x42>
    18a4:	20000190 	.word	0x20000190
    18a8:	20000194 	.word	0x20000194

000018ac <__sfputc_r>:
    18ac:	6893      	ldr	r3, [r2, #8]
    18ae:	b510      	push	{r4, lr}
    18b0:	3b01      	subs	r3, #1
    18b2:	6093      	str	r3, [r2, #8]
    18b4:	2b00      	cmp	r3, #0
    18b6:	da05      	bge.n	18c4 <__sfputc_r+0x18>
    18b8:	6994      	ldr	r4, [r2, #24]
    18ba:	42a3      	cmp	r3, r4
    18bc:	db08      	blt.n	18d0 <__sfputc_r+0x24>
    18be:	b2cb      	uxtb	r3, r1
    18c0:	2b0a      	cmp	r3, #10
    18c2:	d005      	beq.n	18d0 <__sfputc_r+0x24>
    18c4:	6813      	ldr	r3, [r2, #0]
    18c6:	1c58      	adds	r0, r3, #1
    18c8:	6010      	str	r0, [r2, #0]
    18ca:	7019      	strb	r1, [r3, #0]
    18cc:	b2c8      	uxtb	r0, r1
    18ce:	bd10      	pop	{r4, pc}
    18d0:	f7ff fc7e 	bl	11d0 <__swbuf_r>
    18d4:	e7fb      	b.n	18ce <__sfputc_r+0x22>

000018d6 <__sfputs_r>:
    18d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18d8:	0006      	movs	r6, r0
    18da:	000f      	movs	r7, r1
    18dc:	0014      	movs	r4, r2
    18de:	18d5      	adds	r5, r2, r3
    18e0:	42ac      	cmp	r4, r5
    18e2:	d101      	bne.n	18e8 <__sfputs_r+0x12>
    18e4:	2000      	movs	r0, #0
    18e6:	e007      	b.n	18f8 <__sfputs_r+0x22>
    18e8:	7821      	ldrb	r1, [r4, #0]
    18ea:	003a      	movs	r2, r7
    18ec:	0030      	movs	r0, r6
    18ee:	f7ff ffdd 	bl	18ac <__sfputc_r>
    18f2:	3401      	adds	r4, #1
    18f4:	1c43      	adds	r3, r0, #1
    18f6:	d1f3      	bne.n	18e0 <__sfputs_r+0xa>
    18f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000018fc <_vfiprintf_r>:
    18fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    18fe:	b09f      	sub	sp, #124	; 0x7c
    1900:	0006      	movs	r6, r0
    1902:	000f      	movs	r7, r1
    1904:	0014      	movs	r4, r2
    1906:	9305      	str	r3, [sp, #20]
    1908:	2800      	cmp	r0, #0
    190a:	d004      	beq.n	1916 <_vfiprintf_r+0x1a>
    190c:	6983      	ldr	r3, [r0, #24]
    190e:	2b00      	cmp	r3, #0
    1910:	d101      	bne.n	1916 <_vfiprintf_r+0x1a>
    1912:	f7ff fe21 	bl	1558 <__sinit>
    1916:	4b7f      	ldr	r3, [pc, #508]	; (1b14 <_vfiprintf_r+0x218>)
    1918:	429f      	cmp	r7, r3
    191a:	d15c      	bne.n	19d6 <_vfiprintf_r+0xda>
    191c:	6877      	ldr	r7, [r6, #4]
    191e:	89bb      	ldrh	r3, [r7, #12]
    1920:	071b      	lsls	r3, r3, #28
    1922:	d562      	bpl.n	19ea <_vfiprintf_r+0xee>
    1924:	693b      	ldr	r3, [r7, #16]
    1926:	2b00      	cmp	r3, #0
    1928:	d05f      	beq.n	19ea <_vfiprintf_r+0xee>
    192a:	2300      	movs	r3, #0
    192c:	ad06      	add	r5, sp, #24
    192e:	616b      	str	r3, [r5, #20]
    1930:	3320      	adds	r3, #32
    1932:	766b      	strb	r3, [r5, #25]
    1934:	3310      	adds	r3, #16
    1936:	76ab      	strb	r3, [r5, #26]
    1938:	9402      	str	r4, [sp, #8]
    193a:	9c02      	ldr	r4, [sp, #8]
    193c:	7823      	ldrb	r3, [r4, #0]
    193e:	2b00      	cmp	r3, #0
    1940:	d15d      	bne.n	19fe <_vfiprintf_r+0x102>
    1942:	9b02      	ldr	r3, [sp, #8]
    1944:	1ae3      	subs	r3, r4, r3
    1946:	9304      	str	r3, [sp, #16]
    1948:	d00d      	beq.n	1966 <_vfiprintf_r+0x6a>
    194a:	9b04      	ldr	r3, [sp, #16]
    194c:	9a02      	ldr	r2, [sp, #8]
    194e:	0039      	movs	r1, r7
    1950:	0030      	movs	r0, r6
    1952:	f7ff ffc0 	bl	18d6 <__sfputs_r>
    1956:	1c43      	adds	r3, r0, #1
    1958:	d100      	bne.n	195c <_vfiprintf_r+0x60>
    195a:	e0cc      	b.n	1af6 <_vfiprintf_r+0x1fa>
    195c:	696a      	ldr	r2, [r5, #20]
    195e:	9b04      	ldr	r3, [sp, #16]
    1960:	4694      	mov	ip, r2
    1962:	4463      	add	r3, ip
    1964:	616b      	str	r3, [r5, #20]
    1966:	7823      	ldrb	r3, [r4, #0]
    1968:	2b00      	cmp	r3, #0
    196a:	d100      	bne.n	196e <_vfiprintf_r+0x72>
    196c:	e0c3      	b.n	1af6 <_vfiprintf_r+0x1fa>
    196e:	2201      	movs	r2, #1
    1970:	2300      	movs	r3, #0
    1972:	4252      	negs	r2, r2
    1974:	606a      	str	r2, [r5, #4]
    1976:	a902      	add	r1, sp, #8
    1978:	3254      	adds	r2, #84	; 0x54
    197a:	1852      	adds	r2, r2, r1
    197c:	3401      	adds	r4, #1
    197e:	602b      	str	r3, [r5, #0]
    1980:	60eb      	str	r3, [r5, #12]
    1982:	60ab      	str	r3, [r5, #8]
    1984:	7013      	strb	r3, [r2, #0]
    1986:	65ab      	str	r3, [r5, #88]	; 0x58
    1988:	7821      	ldrb	r1, [r4, #0]
    198a:	2205      	movs	r2, #5
    198c:	4862      	ldr	r0, [pc, #392]	; (1b18 <_vfiprintf_r+0x21c>)
    198e:	f000 fb15 	bl	1fbc <memchr>
    1992:	1c63      	adds	r3, r4, #1
    1994:	469c      	mov	ip, r3
    1996:	2800      	cmp	r0, #0
    1998:	d135      	bne.n	1a06 <_vfiprintf_r+0x10a>
    199a:	6829      	ldr	r1, [r5, #0]
    199c:	06cb      	lsls	r3, r1, #27
    199e:	d504      	bpl.n	19aa <_vfiprintf_r+0xae>
    19a0:	2353      	movs	r3, #83	; 0x53
    19a2:	aa02      	add	r2, sp, #8
    19a4:	3020      	adds	r0, #32
    19a6:	189b      	adds	r3, r3, r2
    19a8:	7018      	strb	r0, [r3, #0]
    19aa:	070b      	lsls	r3, r1, #28
    19ac:	d504      	bpl.n	19b8 <_vfiprintf_r+0xbc>
    19ae:	2353      	movs	r3, #83	; 0x53
    19b0:	202b      	movs	r0, #43	; 0x2b
    19b2:	aa02      	add	r2, sp, #8
    19b4:	189b      	adds	r3, r3, r2
    19b6:	7018      	strb	r0, [r3, #0]
    19b8:	7823      	ldrb	r3, [r4, #0]
    19ba:	2b2a      	cmp	r3, #42	; 0x2a
    19bc:	d02c      	beq.n	1a18 <_vfiprintf_r+0x11c>
    19be:	2000      	movs	r0, #0
    19c0:	210a      	movs	r1, #10
    19c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19c4:	7822      	ldrb	r2, [r4, #0]
    19c6:	3a30      	subs	r2, #48	; 0x30
    19c8:	2a09      	cmp	r2, #9
    19ca:	d800      	bhi.n	19ce <_vfiprintf_r+0xd2>
    19cc:	e06b      	b.n	1aa6 <_vfiprintf_r+0x1aa>
    19ce:	2800      	cmp	r0, #0
    19d0:	d02a      	beq.n	1a28 <_vfiprintf_r+0x12c>
    19d2:	9309      	str	r3, [sp, #36]	; 0x24
    19d4:	e028      	b.n	1a28 <_vfiprintf_r+0x12c>
    19d6:	4b51      	ldr	r3, [pc, #324]	; (1b1c <_vfiprintf_r+0x220>)
    19d8:	429f      	cmp	r7, r3
    19da:	d101      	bne.n	19e0 <_vfiprintf_r+0xe4>
    19dc:	68b7      	ldr	r7, [r6, #8]
    19de:	e79e      	b.n	191e <_vfiprintf_r+0x22>
    19e0:	4b4f      	ldr	r3, [pc, #316]	; (1b20 <_vfiprintf_r+0x224>)
    19e2:	429f      	cmp	r7, r3
    19e4:	d19b      	bne.n	191e <_vfiprintf_r+0x22>
    19e6:	68f7      	ldr	r7, [r6, #12]
    19e8:	e799      	b.n	191e <_vfiprintf_r+0x22>
    19ea:	0039      	movs	r1, r7
    19ec:	0030      	movs	r0, r6
    19ee:	f7ff fc45 	bl	127c <__swsetup_r>
    19f2:	2800      	cmp	r0, #0
    19f4:	d099      	beq.n	192a <_vfiprintf_r+0x2e>
    19f6:	2001      	movs	r0, #1
    19f8:	4240      	negs	r0, r0
    19fa:	b01f      	add	sp, #124	; 0x7c
    19fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19fe:	2b25      	cmp	r3, #37	; 0x25
    1a00:	d09f      	beq.n	1942 <_vfiprintf_r+0x46>
    1a02:	3401      	adds	r4, #1
    1a04:	e79a      	b.n	193c <_vfiprintf_r+0x40>
    1a06:	4b44      	ldr	r3, [pc, #272]	; (1b18 <_vfiprintf_r+0x21c>)
    1a08:	6829      	ldr	r1, [r5, #0]
    1a0a:	1ac0      	subs	r0, r0, r3
    1a0c:	2301      	movs	r3, #1
    1a0e:	4083      	lsls	r3, r0
    1a10:	430b      	orrs	r3, r1
    1a12:	602b      	str	r3, [r5, #0]
    1a14:	4664      	mov	r4, ip
    1a16:	e7b7      	b.n	1988 <_vfiprintf_r+0x8c>
    1a18:	9b05      	ldr	r3, [sp, #20]
    1a1a:	1d18      	adds	r0, r3, #4
    1a1c:	681b      	ldr	r3, [r3, #0]
    1a1e:	9005      	str	r0, [sp, #20]
    1a20:	2b00      	cmp	r3, #0
    1a22:	db3a      	blt.n	1a9a <_vfiprintf_r+0x19e>
    1a24:	9309      	str	r3, [sp, #36]	; 0x24
    1a26:	4664      	mov	r4, ip
    1a28:	7823      	ldrb	r3, [r4, #0]
    1a2a:	2b2e      	cmp	r3, #46	; 0x2e
    1a2c:	d10b      	bne.n	1a46 <_vfiprintf_r+0x14a>
    1a2e:	7863      	ldrb	r3, [r4, #1]
    1a30:	1c62      	adds	r2, r4, #1
    1a32:	2b2a      	cmp	r3, #42	; 0x2a
    1a34:	d13f      	bne.n	1ab6 <_vfiprintf_r+0x1ba>
    1a36:	9b05      	ldr	r3, [sp, #20]
    1a38:	3402      	adds	r4, #2
    1a3a:	1d1a      	adds	r2, r3, #4
    1a3c:	681b      	ldr	r3, [r3, #0]
    1a3e:	9205      	str	r2, [sp, #20]
    1a40:	2b00      	cmp	r3, #0
    1a42:	db35      	blt.n	1ab0 <_vfiprintf_r+0x1b4>
    1a44:	9307      	str	r3, [sp, #28]
    1a46:	7821      	ldrb	r1, [r4, #0]
    1a48:	2203      	movs	r2, #3
    1a4a:	4836      	ldr	r0, [pc, #216]	; (1b24 <_vfiprintf_r+0x228>)
    1a4c:	f000 fab6 	bl	1fbc <memchr>
    1a50:	2800      	cmp	r0, #0
    1a52:	d007      	beq.n	1a64 <_vfiprintf_r+0x168>
    1a54:	4b33      	ldr	r3, [pc, #204]	; (1b24 <_vfiprintf_r+0x228>)
    1a56:	682a      	ldr	r2, [r5, #0]
    1a58:	1ac0      	subs	r0, r0, r3
    1a5a:	2340      	movs	r3, #64	; 0x40
    1a5c:	4083      	lsls	r3, r0
    1a5e:	4313      	orrs	r3, r2
    1a60:	602b      	str	r3, [r5, #0]
    1a62:	3401      	adds	r4, #1
    1a64:	7821      	ldrb	r1, [r4, #0]
    1a66:	1c63      	adds	r3, r4, #1
    1a68:	2206      	movs	r2, #6
    1a6a:	482f      	ldr	r0, [pc, #188]	; (1b28 <_vfiprintf_r+0x22c>)
    1a6c:	9302      	str	r3, [sp, #8]
    1a6e:	7629      	strb	r1, [r5, #24]
    1a70:	f000 faa4 	bl	1fbc <memchr>
    1a74:	2800      	cmp	r0, #0
    1a76:	d044      	beq.n	1b02 <_vfiprintf_r+0x206>
    1a78:	4b2c      	ldr	r3, [pc, #176]	; (1b2c <_vfiprintf_r+0x230>)
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	d12f      	bne.n	1ade <_vfiprintf_r+0x1e2>
    1a7e:	6829      	ldr	r1, [r5, #0]
    1a80:	9b05      	ldr	r3, [sp, #20]
    1a82:	2207      	movs	r2, #7
    1a84:	05c9      	lsls	r1, r1, #23
    1a86:	d528      	bpl.n	1ada <_vfiprintf_r+0x1de>
    1a88:	189b      	adds	r3, r3, r2
    1a8a:	4393      	bics	r3, r2
    1a8c:	3308      	adds	r3, #8
    1a8e:	9305      	str	r3, [sp, #20]
    1a90:	696b      	ldr	r3, [r5, #20]
    1a92:	9a03      	ldr	r2, [sp, #12]
    1a94:	189b      	adds	r3, r3, r2
    1a96:	616b      	str	r3, [r5, #20]
    1a98:	e74f      	b.n	193a <_vfiprintf_r+0x3e>
    1a9a:	425b      	negs	r3, r3
    1a9c:	60eb      	str	r3, [r5, #12]
    1a9e:	2302      	movs	r3, #2
    1aa0:	430b      	orrs	r3, r1
    1aa2:	602b      	str	r3, [r5, #0]
    1aa4:	e7bf      	b.n	1a26 <_vfiprintf_r+0x12a>
    1aa6:	434b      	muls	r3, r1
    1aa8:	3401      	adds	r4, #1
    1aaa:	189b      	adds	r3, r3, r2
    1aac:	2001      	movs	r0, #1
    1aae:	e789      	b.n	19c4 <_vfiprintf_r+0xc8>
    1ab0:	2301      	movs	r3, #1
    1ab2:	425b      	negs	r3, r3
    1ab4:	e7c6      	b.n	1a44 <_vfiprintf_r+0x148>
    1ab6:	2300      	movs	r3, #0
    1ab8:	0014      	movs	r4, r2
    1aba:	200a      	movs	r0, #10
    1abc:	001a      	movs	r2, r3
    1abe:	606b      	str	r3, [r5, #4]
    1ac0:	7821      	ldrb	r1, [r4, #0]
    1ac2:	3930      	subs	r1, #48	; 0x30
    1ac4:	2909      	cmp	r1, #9
    1ac6:	d903      	bls.n	1ad0 <_vfiprintf_r+0x1d4>
    1ac8:	2b00      	cmp	r3, #0
    1aca:	d0bc      	beq.n	1a46 <_vfiprintf_r+0x14a>
    1acc:	9207      	str	r2, [sp, #28]
    1ace:	e7ba      	b.n	1a46 <_vfiprintf_r+0x14a>
    1ad0:	4342      	muls	r2, r0
    1ad2:	3401      	adds	r4, #1
    1ad4:	1852      	adds	r2, r2, r1
    1ad6:	2301      	movs	r3, #1
    1ad8:	e7f2      	b.n	1ac0 <_vfiprintf_r+0x1c4>
    1ada:	3307      	adds	r3, #7
    1adc:	e7d5      	b.n	1a8a <_vfiprintf_r+0x18e>
    1ade:	ab05      	add	r3, sp, #20
    1ae0:	9300      	str	r3, [sp, #0]
    1ae2:	003a      	movs	r2, r7
    1ae4:	4b12      	ldr	r3, [pc, #72]	; (1b30 <_vfiprintf_r+0x234>)
    1ae6:	0029      	movs	r1, r5
    1ae8:	0030      	movs	r0, r6
    1aea:	e000      	b.n	1aee <_vfiprintf_r+0x1f2>
    1aec:	bf00      	nop
    1aee:	9003      	str	r0, [sp, #12]
    1af0:	9b03      	ldr	r3, [sp, #12]
    1af2:	3301      	adds	r3, #1
    1af4:	d1cc      	bne.n	1a90 <_vfiprintf_r+0x194>
    1af6:	89bb      	ldrh	r3, [r7, #12]
    1af8:	065b      	lsls	r3, r3, #25
    1afa:	d500      	bpl.n	1afe <_vfiprintf_r+0x202>
    1afc:	e77b      	b.n	19f6 <_vfiprintf_r+0xfa>
    1afe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1b00:	e77b      	b.n	19fa <_vfiprintf_r+0xfe>
    1b02:	ab05      	add	r3, sp, #20
    1b04:	9300      	str	r3, [sp, #0]
    1b06:	003a      	movs	r2, r7
    1b08:	4b09      	ldr	r3, [pc, #36]	; (1b30 <_vfiprintf_r+0x234>)
    1b0a:	0029      	movs	r1, r5
    1b0c:	0030      	movs	r0, r6
    1b0e:	f000 f87f 	bl	1c10 <_printf_i>
    1b12:	e7ec      	b.n	1aee <_vfiprintf_r+0x1f2>
    1b14:	00002108 	.word	0x00002108
    1b18:	00002148 	.word	0x00002148
    1b1c:	00002128 	.word	0x00002128
    1b20:	000020e8 	.word	0x000020e8
    1b24:	0000214e 	.word	0x0000214e
    1b28:	00002152 	.word	0x00002152
    1b2c:	00000000 	.word	0x00000000
    1b30:	000018d7 	.word	0x000018d7

00001b34 <_printf_common>:
    1b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1b36:	0015      	movs	r5, r2
    1b38:	9301      	str	r3, [sp, #4]
    1b3a:	688a      	ldr	r2, [r1, #8]
    1b3c:	690b      	ldr	r3, [r1, #16]
    1b3e:	9000      	str	r0, [sp, #0]
    1b40:	000c      	movs	r4, r1
    1b42:	4293      	cmp	r3, r2
    1b44:	da00      	bge.n	1b48 <_printf_common+0x14>
    1b46:	0013      	movs	r3, r2
    1b48:	0022      	movs	r2, r4
    1b4a:	602b      	str	r3, [r5, #0]
    1b4c:	3243      	adds	r2, #67	; 0x43
    1b4e:	7812      	ldrb	r2, [r2, #0]
    1b50:	2a00      	cmp	r2, #0
    1b52:	d001      	beq.n	1b58 <_printf_common+0x24>
    1b54:	3301      	adds	r3, #1
    1b56:	602b      	str	r3, [r5, #0]
    1b58:	6823      	ldr	r3, [r4, #0]
    1b5a:	069b      	lsls	r3, r3, #26
    1b5c:	d502      	bpl.n	1b64 <_printf_common+0x30>
    1b5e:	682b      	ldr	r3, [r5, #0]
    1b60:	3302      	adds	r3, #2
    1b62:	602b      	str	r3, [r5, #0]
    1b64:	2706      	movs	r7, #6
    1b66:	6823      	ldr	r3, [r4, #0]
    1b68:	401f      	ands	r7, r3
    1b6a:	d027      	beq.n	1bbc <_printf_common+0x88>
    1b6c:	0023      	movs	r3, r4
    1b6e:	3343      	adds	r3, #67	; 0x43
    1b70:	781b      	ldrb	r3, [r3, #0]
    1b72:	1e5a      	subs	r2, r3, #1
    1b74:	4193      	sbcs	r3, r2
    1b76:	6822      	ldr	r2, [r4, #0]
    1b78:	0692      	lsls	r2, r2, #26
    1b7a:	d430      	bmi.n	1bde <_printf_common+0xaa>
    1b7c:	0022      	movs	r2, r4
    1b7e:	9901      	ldr	r1, [sp, #4]
    1b80:	3243      	adds	r2, #67	; 0x43
    1b82:	9800      	ldr	r0, [sp, #0]
    1b84:	9e08      	ldr	r6, [sp, #32]
    1b86:	47b0      	blx	r6
    1b88:	1c43      	adds	r3, r0, #1
    1b8a:	d025      	beq.n	1bd8 <_printf_common+0xa4>
    1b8c:	2306      	movs	r3, #6
    1b8e:	6820      	ldr	r0, [r4, #0]
    1b90:	682a      	ldr	r2, [r5, #0]
    1b92:	68e1      	ldr	r1, [r4, #12]
    1b94:	4003      	ands	r3, r0
    1b96:	2500      	movs	r5, #0
    1b98:	2b04      	cmp	r3, #4
    1b9a:	d103      	bne.n	1ba4 <_printf_common+0x70>
    1b9c:	1a8d      	subs	r5, r1, r2
    1b9e:	43eb      	mvns	r3, r5
    1ba0:	17db      	asrs	r3, r3, #31
    1ba2:	401d      	ands	r5, r3
    1ba4:	68a3      	ldr	r3, [r4, #8]
    1ba6:	6922      	ldr	r2, [r4, #16]
    1ba8:	4293      	cmp	r3, r2
    1baa:	dd01      	ble.n	1bb0 <_printf_common+0x7c>
    1bac:	1a9b      	subs	r3, r3, r2
    1bae:	18ed      	adds	r5, r5, r3
    1bb0:	2700      	movs	r7, #0
    1bb2:	42bd      	cmp	r5, r7
    1bb4:	d120      	bne.n	1bf8 <_printf_common+0xc4>
    1bb6:	2000      	movs	r0, #0
    1bb8:	e010      	b.n	1bdc <_printf_common+0xa8>
    1bba:	3701      	adds	r7, #1
    1bbc:	68e3      	ldr	r3, [r4, #12]
    1bbe:	682a      	ldr	r2, [r5, #0]
    1bc0:	1a9b      	subs	r3, r3, r2
    1bc2:	429f      	cmp	r7, r3
    1bc4:	dad2      	bge.n	1b6c <_printf_common+0x38>
    1bc6:	0022      	movs	r2, r4
    1bc8:	2301      	movs	r3, #1
    1bca:	3219      	adds	r2, #25
    1bcc:	9901      	ldr	r1, [sp, #4]
    1bce:	9800      	ldr	r0, [sp, #0]
    1bd0:	9e08      	ldr	r6, [sp, #32]
    1bd2:	47b0      	blx	r6
    1bd4:	1c43      	adds	r3, r0, #1
    1bd6:	d1f0      	bne.n	1bba <_printf_common+0x86>
    1bd8:	2001      	movs	r0, #1
    1bda:	4240      	negs	r0, r0
    1bdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1bde:	2030      	movs	r0, #48	; 0x30
    1be0:	18e1      	adds	r1, r4, r3
    1be2:	3143      	adds	r1, #67	; 0x43
    1be4:	7008      	strb	r0, [r1, #0]
    1be6:	0021      	movs	r1, r4
    1be8:	1c5a      	adds	r2, r3, #1
    1bea:	3145      	adds	r1, #69	; 0x45
    1bec:	7809      	ldrb	r1, [r1, #0]
    1bee:	18a2      	adds	r2, r4, r2
    1bf0:	3243      	adds	r2, #67	; 0x43
    1bf2:	3302      	adds	r3, #2
    1bf4:	7011      	strb	r1, [r2, #0]
    1bf6:	e7c1      	b.n	1b7c <_printf_common+0x48>
    1bf8:	0022      	movs	r2, r4
    1bfa:	2301      	movs	r3, #1
    1bfc:	321a      	adds	r2, #26
    1bfe:	9901      	ldr	r1, [sp, #4]
    1c00:	9800      	ldr	r0, [sp, #0]
    1c02:	9e08      	ldr	r6, [sp, #32]
    1c04:	47b0      	blx	r6
    1c06:	1c43      	adds	r3, r0, #1
    1c08:	d0e6      	beq.n	1bd8 <_printf_common+0xa4>
    1c0a:	3701      	adds	r7, #1
    1c0c:	e7d1      	b.n	1bb2 <_printf_common+0x7e>
	...

00001c10 <_printf_i>:
    1c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c12:	b08b      	sub	sp, #44	; 0x2c
    1c14:	9206      	str	r2, [sp, #24]
    1c16:	000a      	movs	r2, r1
    1c18:	3243      	adds	r2, #67	; 0x43
    1c1a:	9307      	str	r3, [sp, #28]
    1c1c:	9005      	str	r0, [sp, #20]
    1c1e:	9204      	str	r2, [sp, #16]
    1c20:	7e0a      	ldrb	r2, [r1, #24]
    1c22:	000c      	movs	r4, r1
    1c24:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1c26:	2a6e      	cmp	r2, #110	; 0x6e
    1c28:	d100      	bne.n	1c2c <_printf_i+0x1c>
    1c2a:	e08f      	b.n	1d4c <_printf_i+0x13c>
    1c2c:	d817      	bhi.n	1c5e <_printf_i+0x4e>
    1c2e:	2a63      	cmp	r2, #99	; 0x63
    1c30:	d02c      	beq.n	1c8c <_printf_i+0x7c>
    1c32:	d808      	bhi.n	1c46 <_printf_i+0x36>
    1c34:	2a00      	cmp	r2, #0
    1c36:	d100      	bne.n	1c3a <_printf_i+0x2a>
    1c38:	e099      	b.n	1d6e <_printf_i+0x15e>
    1c3a:	2a58      	cmp	r2, #88	; 0x58
    1c3c:	d054      	beq.n	1ce8 <_printf_i+0xd8>
    1c3e:	0026      	movs	r6, r4
    1c40:	3642      	adds	r6, #66	; 0x42
    1c42:	7032      	strb	r2, [r6, #0]
    1c44:	e029      	b.n	1c9a <_printf_i+0x8a>
    1c46:	2a64      	cmp	r2, #100	; 0x64
    1c48:	d001      	beq.n	1c4e <_printf_i+0x3e>
    1c4a:	2a69      	cmp	r2, #105	; 0x69
    1c4c:	d1f7      	bne.n	1c3e <_printf_i+0x2e>
    1c4e:	6821      	ldr	r1, [r4, #0]
    1c50:	681a      	ldr	r2, [r3, #0]
    1c52:	0608      	lsls	r0, r1, #24
    1c54:	d523      	bpl.n	1c9e <_printf_i+0x8e>
    1c56:	1d11      	adds	r1, r2, #4
    1c58:	6019      	str	r1, [r3, #0]
    1c5a:	6815      	ldr	r5, [r2, #0]
    1c5c:	e025      	b.n	1caa <_printf_i+0x9a>
    1c5e:	2a73      	cmp	r2, #115	; 0x73
    1c60:	d100      	bne.n	1c64 <_printf_i+0x54>
    1c62:	e088      	b.n	1d76 <_printf_i+0x166>
    1c64:	d808      	bhi.n	1c78 <_printf_i+0x68>
    1c66:	2a6f      	cmp	r2, #111	; 0x6f
    1c68:	d029      	beq.n	1cbe <_printf_i+0xae>
    1c6a:	2a70      	cmp	r2, #112	; 0x70
    1c6c:	d1e7      	bne.n	1c3e <_printf_i+0x2e>
    1c6e:	2220      	movs	r2, #32
    1c70:	6809      	ldr	r1, [r1, #0]
    1c72:	430a      	orrs	r2, r1
    1c74:	6022      	str	r2, [r4, #0]
    1c76:	e003      	b.n	1c80 <_printf_i+0x70>
    1c78:	2a75      	cmp	r2, #117	; 0x75
    1c7a:	d020      	beq.n	1cbe <_printf_i+0xae>
    1c7c:	2a78      	cmp	r2, #120	; 0x78
    1c7e:	d1de      	bne.n	1c3e <_printf_i+0x2e>
    1c80:	0022      	movs	r2, r4
    1c82:	2178      	movs	r1, #120	; 0x78
    1c84:	3245      	adds	r2, #69	; 0x45
    1c86:	7011      	strb	r1, [r2, #0]
    1c88:	4a6c      	ldr	r2, [pc, #432]	; (1e3c <_printf_i+0x22c>)
    1c8a:	e030      	b.n	1cee <_printf_i+0xde>
    1c8c:	000e      	movs	r6, r1
    1c8e:	681a      	ldr	r2, [r3, #0]
    1c90:	3642      	adds	r6, #66	; 0x42
    1c92:	1d11      	adds	r1, r2, #4
    1c94:	6019      	str	r1, [r3, #0]
    1c96:	6813      	ldr	r3, [r2, #0]
    1c98:	7033      	strb	r3, [r6, #0]
    1c9a:	2301      	movs	r3, #1
    1c9c:	e079      	b.n	1d92 <_printf_i+0x182>
    1c9e:	0649      	lsls	r1, r1, #25
    1ca0:	d5d9      	bpl.n	1c56 <_printf_i+0x46>
    1ca2:	1d11      	adds	r1, r2, #4
    1ca4:	6019      	str	r1, [r3, #0]
    1ca6:	2300      	movs	r3, #0
    1ca8:	5ed5      	ldrsh	r5, [r2, r3]
    1caa:	2d00      	cmp	r5, #0
    1cac:	da03      	bge.n	1cb6 <_printf_i+0xa6>
    1cae:	232d      	movs	r3, #45	; 0x2d
    1cb0:	9a04      	ldr	r2, [sp, #16]
    1cb2:	426d      	negs	r5, r5
    1cb4:	7013      	strb	r3, [r2, #0]
    1cb6:	4b62      	ldr	r3, [pc, #392]	; (1e40 <_printf_i+0x230>)
    1cb8:	270a      	movs	r7, #10
    1cba:	9303      	str	r3, [sp, #12]
    1cbc:	e02f      	b.n	1d1e <_printf_i+0x10e>
    1cbe:	6820      	ldr	r0, [r4, #0]
    1cc0:	6819      	ldr	r1, [r3, #0]
    1cc2:	0605      	lsls	r5, r0, #24
    1cc4:	d503      	bpl.n	1cce <_printf_i+0xbe>
    1cc6:	1d08      	adds	r0, r1, #4
    1cc8:	6018      	str	r0, [r3, #0]
    1cca:	680d      	ldr	r5, [r1, #0]
    1ccc:	e005      	b.n	1cda <_printf_i+0xca>
    1cce:	0640      	lsls	r0, r0, #25
    1cd0:	d5f9      	bpl.n	1cc6 <_printf_i+0xb6>
    1cd2:	680d      	ldr	r5, [r1, #0]
    1cd4:	1d08      	adds	r0, r1, #4
    1cd6:	6018      	str	r0, [r3, #0]
    1cd8:	b2ad      	uxth	r5, r5
    1cda:	4b59      	ldr	r3, [pc, #356]	; (1e40 <_printf_i+0x230>)
    1cdc:	2708      	movs	r7, #8
    1cde:	9303      	str	r3, [sp, #12]
    1ce0:	2a6f      	cmp	r2, #111	; 0x6f
    1ce2:	d018      	beq.n	1d16 <_printf_i+0x106>
    1ce4:	270a      	movs	r7, #10
    1ce6:	e016      	b.n	1d16 <_printf_i+0x106>
    1ce8:	3145      	adds	r1, #69	; 0x45
    1cea:	700a      	strb	r2, [r1, #0]
    1cec:	4a54      	ldr	r2, [pc, #336]	; (1e40 <_printf_i+0x230>)
    1cee:	9203      	str	r2, [sp, #12]
    1cf0:	681a      	ldr	r2, [r3, #0]
    1cf2:	6821      	ldr	r1, [r4, #0]
    1cf4:	1d10      	adds	r0, r2, #4
    1cf6:	6018      	str	r0, [r3, #0]
    1cf8:	6815      	ldr	r5, [r2, #0]
    1cfa:	0608      	lsls	r0, r1, #24
    1cfc:	d522      	bpl.n	1d44 <_printf_i+0x134>
    1cfe:	07cb      	lsls	r3, r1, #31
    1d00:	d502      	bpl.n	1d08 <_printf_i+0xf8>
    1d02:	2320      	movs	r3, #32
    1d04:	4319      	orrs	r1, r3
    1d06:	6021      	str	r1, [r4, #0]
    1d08:	2710      	movs	r7, #16
    1d0a:	2d00      	cmp	r5, #0
    1d0c:	d103      	bne.n	1d16 <_printf_i+0x106>
    1d0e:	2320      	movs	r3, #32
    1d10:	6822      	ldr	r2, [r4, #0]
    1d12:	439a      	bics	r2, r3
    1d14:	6022      	str	r2, [r4, #0]
    1d16:	0023      	movs	r3, r4
    1d18:	2200      	movs	r2, #0
    1d1a:	3343      	adds	r3, #67	; 0x43
    1d1c:	701a      	strb	r2, [r3, #0]
    1d1e:	6863      	ldr	r3, [r4, #4]
    1d20:	60a3      	str	r3, [r4, #8]
    1d22:	2b00      	cmp	r3, #0
    1d24:	db5c      	blt.n	1de0 <_printf_i+0x1d0>
    1d26:	2204      	movs	r2, #4
    1d28:	6821      	ldr	r1, [r4, #0]
    1d2a:	4391      	bics	r1, r2
    1d2c:	6021      	str	r1, [r4, #0]
    1d2e:	2d00      	cmp	r5, #0
    1d30:	d158      	bne.n	1de4 <_printf_i+0x1d4>
    1d32:	9e04      	ldr	r6, [sp, #16]
    1d34:	2b00      	cmp	r3, #0
    1d36:	d064      	beq.n	1e02 <_printf_i+0x1f2>
    1d38:	0026      	movs	r6, r4
    1d3a:	9b03      	ldr	r3, [sp, #12]
    1d3c:	3642      	adds	r6, #66	; 0x42
    1d3e:	781b      	ldrb	r3, [r3, #0]
    1d40:	7033      	strb	r3, [r6, #0]
    1d42:	e05e      	b.n	1e02 <_printf_i+0x1f2>
    1d44:	0648      	lsls	r0, r1, #25
    1d46:	d5da      	bpl.n	1cfe <_printf_i+0xee>
    1d48:	b2ad      	uxth	r5, r5
    1d4a:	e7d8      	b.n	1cfe <_printf_i+0xee>
    1d4c:	6809      	ldr	r1, [r1, #0]
    1d4e:	681a      	ldr	r2, [r3, #0]
    1d50:	0608      	lsls	r0, r1, #24
    1d52:	d505      	bpl.n	1d60 <_printf_i+0x150>
    1d54:	1d11      	adds	r1, r2, #4
    1d56:	6019      	str	r1, [r3, #0]
    1d58:	6813      	ldr	r3, [r2, #0]
    1d5a:	6962      	ldr	r2, [r4, #20]
    1d5c:	601a      	str	r2, [r3, #0]
    1d5e:	e006      	b.n	1d6e <_printf_i+0x15e>
    1d60:	0649      	lsls	r1, r1, #25
    1d62:	d5f7      	bpl.n	1d54 <_printf_i+0x144>
    1d64:	1d11      	adds	r1, r2, #4
    1d66:	6019      	str	r1, [r3, #0]
    1d68:	6813      	ldr	r3, [r2, #0]
    1d6a:	8aa2      	ldrh	r2, [r4, #20]
    1d6c:	801a      	strh	r2, [r3, #0]
    1d6e:	2300      	movs	r3, #0
    1d70:	9e04      	ldr	r6, [sp, #16]
    1d72:	6123      	str	r3, [r4, #16]
    1d74:	e054      	b.n	1e20 <_printf_i+0x210>
    1d76:	681a      	ldr	r2, [r3, #0]
    1d78:	1d11      	adds	r1, r2, #4
    1d7a:	6019      	str	r1, [r3, #0]
    1d7c:	6816      	ldr	r6, [r2, #0]
    1d7e:	2100      	movs	r1, #0
    1d80:	6862      	ldr	r2, [r4, #4]
    1d82:	0030      	movs	r0, r6
    1d84:	f000 f91a 	bl	1fbc <memchr>
    1d88:	2800      	cmp	r0, #0
    1d8a:	d001      	beq.n	1d90 <_printf_i+0x180>
    1d8c:	1b80      	subs	r0, r0, r6
    1d8e:	6060      	str	r0, [r4, #4]
    1d90:	6863      	ldr	r3, [r4, #4]
    1d92:	6123      	str	r3, [r4, #16]
    1d94:	2300      	movs	r3, #0
    1d96:	9a04      	ldr	r2, [sp, #16]
    1d98:	7013      	strb	r3, [r2, #0]
    1d9a:	e041      	b.n	1e20 <_printf_i+0x210>
    1d9c:	6923      	ldr	r3, [r4, #16]
    1d9e:	0032      	movs	r2, r6
    1da0:	9906      	ldr	r1, [sp, #24]
    1da2:	9805      	ldr	r0, [sp, #20]
    1da4:	9d07      	ldr	r5, [sp, #28]
    1da6:	47a8      	blx	r5
    1da8:	1c43      	adds	r3, r0, #1
    1daa:	d043      	beq.n	1e34 <_printf_i+0x224>
    1dac:	6823      	ldr	r3, [r4, #0]
    1dae:	2500      	movs	r5, #0
    1db0:	079b      	lsls	r3, r3, #30
    1db2:	d40f      	bmi.n	1dd4 <_printf_i+0x1c4>
    1db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1db6:	68e0      	ldr	r0, [r4, #12]
    1db8:	4298      	cmp	r0, r3
    1dba:	da3d      	bge.n	1e38 <_printf_i+0x228>
    1dbc:	0018      	movs	r0, r3
    1dbe:	e03b      	b.n	1e38 <_printf_i+0x228>
    1dc0:	0022      	movs	r2, r4
    1dc2:	2301      	movs	r3, #1
    1dc4:	3219      	adds	r2, #25
    1dc6:	9906      	ldr	r1, [sp, #24]
    1dc8:	9805      	ldr	r0, [sp, #20]
    1dca:	9e07      	ldr	r6, [sp, #28]
    1dcc:	47b0      	blx	r6
    1dce:	1c43      	adds	r3, r0, #1
    1dd0:	d030      	beq.n	1e34 <_printf_i+0x224>
    1dd2:	3501      	adds	r5, #1
    1dd4:	68e3      	ldr	r3, [r4, #12]
    1dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1dd8:	1a9b      	subs	r3, r3, r2
    1dda:	429d      	cmp	r5, r3
    1ddc:	dbf0      	blt.n	1dc0 <_printf_i+0x1b0>
    1dde:	e7e9      	b.n	1db4 <_printf_i+0x1a4>
    1de0:	2d00      	cmp	r5, #0
    1de2:	d0a9      	beq.n	1d38 <_printf_i+0x128>
    1de4:	9e04      	ldr	r6, [sp, #16]
    1de6:	0028      	movs	r0, r5
    1de8:	0039      	movs	r1, r7
    1dea:	f7ff f8f5 	bl	fd8 <__aeabi_uidivmod>
    1dee:	9b03      	ldr	r3, [sp, #12]
    1df0:	3e01      	subs	r6, #1
    1df2:	5c5b      	ldrb	r3, [r3, r1]
    1df4:	0028      	movs	r0, r5
    1df6:	7033      	strb	r3, [r6, #0]
    1df8:	0039      	movs	r1, r7
    1dfa:	f7ff f867 	bl	ecc <__udivsi3>
    1dfe:	1e05      	subs	r5, r0, #0
    1e00:	d1f1      	bne.n	1de6 <_printf_i+0x1d6>
    1e02:	2f08      	cmp	r7, #8
    1e04:	d109      	bne.n	1e1a <_printf_i+0x20a>
    1e06:	6823      	ldr	r3, [r4, #0]
    1e08:	07db      	lsls	r3, r3, #31
    1e0a:	d506      	bpl.n	1e1a <_printf_i+0x20a>
    1e0c:	6863      	ldr	r3, [r4, #4]
    1e0e:	6922      	ldr	r2, [r4, #16]
    1e10:	4293      	cmp	r3, r2
    1e12:	dc02      	bgt.n	1e1a <_printf_i+0x20a>
    1e14:	2330      	movs	r3, #48	; 0x30
    1e16:	3e01      	subs	r6, #1
    1e18:	7033      	strb	r3, [r6, #0]
    1e1a:	9b04      	ldr	r3, [sp, #16]
    1e1c:	1b9b      	subs	r3, r3, r6
    1e1e:	6123      	str	r3, [r4, #16]
    1e20:	9b07      	ldr	r3, [sp, #28]
    1e22:	aa09      	add	r2, sp, #36	; 0x24
    1e24:	9300      	str	r3, [sp, #0]
    1e26:	0021      	movs	r1, r4
    1e28:	9b06      	ldr	r3, [sp, #24]
    1e2a:	9805      	ldr	r0, [sp, #20]
    1e2c:	f7ff fe82 	bl	1b34 <_printf_common>
    1e30:	1c43      	adds	r3, r0, #1
    1e32:	d1b3      	bne.n	1d9c <_printf_i+0x18c>
    1e34:	2001      	movs	r0, #1
    1e36:	4240      	negs	r0, r0
    1e38:	b00b      	add	sp, #44	; 0x2c
    1e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e3c:	0000216a 	.word	0x0000216a
    1e40:	00002159 	.word	0x00002159

00001e44 <_sbrk_r>:
    1e44:	2300      	movs	r3, #0
    1e46:	b570      	push	{r4, r5, r6, lr}
    1e48:	4c06      	ldr	r4, [pc, #24]	; (1e64 <_sbrk_r+0x20>)
    1e4a:	0005      	movs	r5, r0
    1e4c:	0008      	movs	r0, r1
    1e4e:	6023      	str	r3, [r4, #0]
    1e50:	f7fe fd3e 	bl	8d0 <_sbrk>
    1e54:	1c43      	adds	r3, r0, #1
    1e56:	d103      	bne.n	1e60 <_sbrk_r+0x1c>
    1e58:	6823      	ldr	r3, [r4, #0]
    1e5a:	2b00      	cmp	r3, #0
    1e5c:	d000      	beq.n	1e60 <_sbrk_r+0x1c>
    1e5e:	602b      	str	r3, [r5, #0]
    1e60:	bd70      	pop	{r4, r5, r6, pc}
    1e62:	46c0      	nop			; (mov r8, r8)
    1e64:	200001b4 	.word	0x200001b4

00001e68 <__sread>:
    1e68:	b570      	push	{r4, r5, r6, lr}
    1e6a:	000c      	movs	r4, r1
    1e6c:	250e      	movs	r5, #14
    1e6e:	5f49      	ldrsh	r1, [r1, r5]
    1e70:	f000 f8b2 	bl	1fd8 <_read_r>
    1e74:	2800      	cmp	r0, #0
    1e76:	db03      	blt.n	1e80 <__sread+0x18>
    1e78:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1e7a:	181b      	adds	r3, r3, r0
    1e7c:	6563      	str	r3, [r4, #84]	; 0x54
    1e7e:	bd70      	pop	{r4, r5, r6, pc}
    1e80:	89a3      	ldrh	r3, [r4, #12]
    1e82:	4a02      	ldr	r2, [pc, #8]	; (1e8c <__sread+0x24>)
    1e84:	4013      	ands	r3, r2
    1e86:	81a3      	strh	r3, [r4, #12]
    1e88:	e7f9      	b.n	1e7e <__sread+0x16>
    1e8a:	46c0      	nop			; (mov r8, r8)
    1e8c:	ffffefff 	.word	0xffffefff

00001e90 <__swrite>:
    1e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e92:	001f      	movs	r7, r3
    1e94:	898b      	ldrh	r3, [r1, #12]
    1e96:	0005      	movs	r5, r0
    1e98:	000c      	movs	r4, r1
    1e9a:	0016      	movs	r6, r2
    1e9c:	05db      	lsls	r3, r3, #23
    1e9e:	d505      	bpl.n	1eac <__swrite+0x1c>
    1ea0:	230e      	movs	r3, #14
    1ea2:	5ec9      	ldrsh	r1, [r1, r3]
    1ea4:	2200      	movs	r2, #0
    1ea6:	2302      	movs	r3, #2
    1ea8:	f000 f874 	bl	1f94 <_lseek_r>
    1eac:	89a3      	ldrh	r3, [r4, #12]
    1eae:	4a05      	ldr	r2, [pc, #20]	; (1ec4 <__swrite+0x34>)
    1eb0:	0028      	movs	r0, r5
    1eb2:	4013      	ands	r3, r2
    1eb4:	81a3      	strh	r3, [r4, #12]
    1eb6:	0032      	movs	r2, r6
    1eb8:	230e      	movs	r3, #14
    1eba:	5ee1      	ldrsh	r1, [r4, r3]
    1ebc:	003b      	movs	r3, r7
    1ebe:	f000 f81f 	bl	1f00 <_write_r>
    1ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ec4:	ffffefff 	.word	0xffffefff

00001ec8 <__sseek>:
    1ec8:	b570      	push	{r4, r5, r6, lr}
    1eca:	000c      	movs	r4, r1
    1ecc:	250e      	movs	r5, #14
    1ece:	5f49      	ldrsh	r1, [r1, r5]
    1ed0:	f000 f860 	bl	1f94 <_lseek_r>
    1ed4:	89a3      	ldrh	r3, [r4, #12]
    1ed6:	1c42      	adds	r2, r0, #1
    1ed8:	d103      	bne.n	1ee2 <__sseek+0x1a>
    1eda:	4a05      	ldr	r2, [pc, #20]	; (1ef0 <__sseek+0x28>)
    1edc:	4013      	ands	r3, r2
    1ede:	81a3      	strh	r3, [r4, #12]
    1ee0:	bd70      	pop	{r4, r5, r6, pc}
    1ee2:	2280      	movs	r2, #128	; 0x80
    1ee4:	0152      	lsls	r2, r2, #5
    1ee6:	4313      	orrs	r3, r2
    1ee8:	81a3      	strh	r3, [r4, #12]
    1eea:	6560      	str	r0, [r4, #84]	; 0x54
    1eec:	e7f8      	b.n	1ee0 <__sseek+0x18>
    1eee:	46c0      	nop			; (mov r8, r8)
    1ef0:	ffffefff 	.word	0xffffefff

00001ef4 <__sclose>:
    1ef4:	b510      	push	{r4, lr}
    1ef6:	230e      	movs	r3, #14
    1ef8:	5ec9      	ldrsh	r1, [r1, r3]
    1efa:	f000 f815 	bl	1f28 <_close_r>
    1efe:	bd10      	pop	{r4, pc}

00001f00 <_write_r>:
    1f00:	b570      	push	{r4, r5, r6, lr}
    1f02:	0005      	movs	r5, r0
    1f04:	0008      	movs	r0, r1
    1f06:	0011      	movs	r1, r2
    1f08:	2200      	movs	r2, #0
    1f0a:	4c06      	ldr	r4, [pc, #24]	; (1f24 <_write_r+0x24>)
    1f0c:	6022      	str	r2, [r4, #0]
    1f0e:	001a      	movs	r2, r3
    1f10:	f7fe ffa4 	bl	e5c <_write>
    1f14:	1c43      	adds	r3, r0, #1
    1f16:	d103      	bne.n	1f20 <_write_r+0x20>
    1f18:	6823      	ldr	r3, [r4, #0]
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	d000      	beq.n	1f20 <_write_r+0x20>
    1f1e:	602b      	str	r3, [r5, #0]
    1f20:	bd70      	pop	{r4, r5, r6, pc}
    1f22:	46c0      	nop			; (mov r8, r8)
    1f24:	200001b4 	.word	0x200001b4

00001f28 <_close_r>:
    1f28:	2300      	movs	r3, #0
    1f2a:	b570      	push	{r4, r5, r6, lr}
    1f2c:	4c06      	ldr	r4, [pc, #24]	; (1f48 <_close_r+0x20>)
    1f2e:	0005      	movs	r5, r0
    1f30:	0008      	movs	r0, r1
    1f32:	6023      	str	r3, [r4, #0]
    1f34:	f7fe fcde 	bl	8f4 <_close>
    1f38:	1c43      	adds	r3, r0, #1
    1f3a:	d103      	bne.n	1f44 <_close_r+0x1c>
    1f3c:	6823      	ldr	r3, [r4, #0]
    1f3e:	2b00      	cmp	r3, #0
    1f40:	d000      	beq.n	1f44 <_close_r+0x1c>
    1f42:	602b      	str	r3, [r5, #0]
    1f44:	bd70      	pop	{r4, r5, r6, pc}
    1f46:	46c0      	nop			; (mov r8, r8)
    1f48:	200001b4 	.word	0x200001b4

00001f4c <_fstat_r>:
    1f4c:	2300      	movs	r3, #0
    1f4e:	b570      	push	{r4, r5, r6, lr}
    1f50:	4c06      	ldr	r4, [pc, #24]	; (1f6c <_fstat_r+0x20>)
    1f52:	0005      	movs	r5, r0
    1f54:	0008      	movs	r0, r1
    1f56:	0011      	movs	r1, r2
    1f58:	6023      	str	r3, [r4, #0]
    1f5a:	f7fe fcce 	bl	8fa <_fstat>
    1f5e:	1c43      	adds	r3, r0, #1
    1f60:	d103      	bne.n	1f6a <_fstat_r+0x1e>
    1f62:	6823      	ldr	r3, [r4, #0]
    1f64:	2b00      	cmp	r3, #0
    1f66:	d000      	beq.n	1f6a <_fstat_r+0x1e>
    1f68:	602b      	str	r3, [r5, #0]
    1f6a:	bd70      	pop	{r4, r5, r6, pc}
    1f6c:	200001b4 	.word	0x200001b4

00001f70 <_isatty_r>:
    1f70:	2300      	movs	r3, #0
    1f72:	b570      	push	{r4, r5, r6, lr}
    1f74:	4c06      	ldr	r4, [pc, #24]	; (1f90 <_isatty_r+0x20>)
    1f76:	0005      	movs	r5, r0
    1f78:	0008      	movs	r0, r1
    1f7a:	6023      	str	r3, [r4, #0]
    1f7c:	f7fe fcc2 	bl	904 <_isatty>
    1f80:	1c43      	adds	r3, r0, #1
    1f82:	d103      	bne.n	1f8c <_isatty_r+0x1c>
    1f84:	6823      	ldr	r3, [r4, #0]
    1f86:	2b00      	cmp	r3, #0
    1f88:	d000      	beq.n	1f8c <_isatty_r+0x1c>
    1f8a:	602b      	str	r3, [r5, #0]
    1f8c:	bd70      	pop	{r4, r5, r6, pc}
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	200001b4 	.word	0x200001b4

00001f94 <_lseek_r>:
    1f94:	b570      	push	{r4, r5, r6, lr}
    1f96:	0005      	movs	r5, r0
    1f98:	0008      	movs	r0, r1
    1f9a:	0011      	movs	r1, r2
    1f9c:	2200      	movs	r2, #0
    1f9e:	4c06      	ldr	r4, [pc, #24]	; (1fb8 <_lseek_r+0x24>)
    1fa0:	6022      	str	r2, [r4, #0]
    1fa2:	001a      	movs	r2, r3
    1fa4:	f7fe fcb0 	bl	908 <_lseek>
    1fa8:	1c43      	adds	r3, r0, #1
    1faa:	d103      	bne.n	1fb4 <_lseek_r+0x20>
    1fac:	6823      	ldr	r3, [r4, #0]
    1fae:	2b00      	cmp	r3, #0
    1fb0:	d000      	beq.n	1fb4 <_lseek_r+0x20>
    1fb2:	602b      	str	r3, [r5, #0]
    1fb4:	bd70      	pop	{r4, r5, r6, pc}
    1fb6:	46c0      	nop			; (mov r8, r8)
    1fb8:	200001b4 	.word	0x200001b4

00001fbc <memchr>:
    1fbc:	b2c9      	uxtb	r1, r1
    1fbe:	1882      	adds	r2, r0, r2
    1fc0:	4290      	cmp	r0, r2
    1fc2:	d101      	bne.n	1fc8 <memchr+0xc>
    1fc4:	2000      	movs	r0, #0
    1fc6:	4770      	bx	lr
    1fc8:	7803      	ldrb	r3, [r0, #0]
    1fca:	428b      	cmp	r3, r1
    1fcc:	d0fb      	beq.n	1fc6 <memchr+0xa>
    1fce:	3001      	adds	r0, #1
    1fd0:	e7f6      	b.n	1fc0 <memchr+0x4>

00001fd2 <__malloc_lock>:
    1fd2:	4770      	bx	lr

00001fd4 <__malloc_unlock>:
    1fd4:	4770      	bx	lr
	...

00001fd8 <_read_r>:
    1fd8:	b570      	push	{r4, r5, r6, lr}
    1fda:	0005      	movs	r5, r0
    1fdc:	0008      	movs	r0, r1
    1fde:	0011      	movs	r1, r2
    1fe0:	2200      	movs	r2, #0
    1fe2:	4c06      	ldr	r4, [pc, #24]	; (1ffc <_read_r+0x24>)
    1fe4:	6022      	str	r2, [r4, #0]
    1fe6:	001a      	movs	r2, r3
    1fe8:	f7fe ff54 	bl	e94 <_read>
    1fec:	1c43      	adds	r3, r0, #1
    1fee:	d103      	bne.n	1ff8 <_read_r+0x20>
    1ff0:	6823      	ldr	r3, [r4, #0]
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	d000      	beq.n	1ff8 <_read_r+0x20>
    1ff6:	602b      	str	r3, [r5, #0]
    1ff8:	bd70      	pop	{r4, r5, r6, pc}
    1ffa:	46c0      	nop			; (mov r8, r8)
    1ffc:	200001b4 	.word	0x200001b4
    2000:	656c6449 	.word	0x656c6449
    2004:	00000000 	.word	0x00000000
    2008:	0a0d0a0d 	.word	0x0a0d0a0d
    200c:	3d3d2023 	.word	0x3d3d2023
    2010:	3d3d3d3d 	.word	0x3d3d3d3d
    2014:	3d3d3d3d 	.word	0x3d3d3d3d
    2018:	00000d3d 	.word	0x00000d3d
    201c:	2e302e31 	.word	0x2e302e31
    2020:	00000030 	.word	0x00000030
    2024:	756d2023 	.word	0x756d2023
    2028:	5f62696c 	.word	0x5f62696c
    202c:	6e696c62 	.word	0x6e696c62
    2030:	2520796b 	.word	0x2520796b
    2034:	73203a73 	.word	0x73203a73
    2038:	68206565 	.word	0x68206565
    203c:	73707474 	.word	0x73707474
    2040:	672f2f3a 	.word	0x672f2f3a
    2044:	75687469 	.word	0x75687469
    2048:	6f632e62 	.word	0x6f632e62
    204c:	64722f6d 	.word	0x64722f6d
    2050:	726f6f70 	.word	0x726f6f70
    2054:	6c756d2f 	.word	0x6c756d2f
    2058:	0a0d6269 	.word	0x0a0d6269
    205c:	00000000 	.word	0x00000000
    2060:	74747562 	.word	0x74747562
    2064:	70206e6f 	.word	0x70206e6f
    2068:	73736572 	.word	0x73736572
    206c:	61206465 	.word	0x61206465
    2070:	6c252074 	.word	0x6c252074
    2074:	000a0d75 	.word	0x000a0d75
    2078:	74747542 	.word	0x74747542
    207c:	49206e6f 	.word	0x49206e6f
    2080:	7265746e 	.word	0x7265746e
    2084:	74707572 	.word	0x74707572
    2088:	00000000 	.word	0x00000000
    208c:	682f2e2e 	.word	0x682f2e2e
    2090:	732f6c61 	.word	0x732f6c61
    2094:	682f6372 	.word	0x682f6372
    2098:	635f6c61 	.word	0x635f6c61
    209c:	6e656c61 	.word	0x6e656c61
    20a0:	2e726164 	.word	0x2e726164
    20a4:	00000063 	.word	0x00000063

000020a8 <_map>:
    20a8:	0000000f 0000000f 682f2e2e 652f6c70     ........../hpl/e
    20b8:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    20c8:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    20d8:	632e6374 00000000 0044454c              tc.c....LED.

000020e4 <_global_impure_ptr>:
    20e4:	20000004                                ... 

000020e8 <__sf_fake_stderr>:
	...

00002108 <__sf_fake_stdin>:
	...

00002128 <__sf_fake_stdout>:
	...
    2148:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2158:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2168:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2178:	00006665                                ef..

0000217c <_init>:
    217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    217e:	46c0      	nop			; (mov r8, r8)
    2180:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2182:	bc08      	pop	{r3}
    2184:	469e      	mov	lr, r3
    2186:	4770      	bx	lr

00002188 <__init_array_start>:
    2188:	000000dd 	.word	0x000000dd

0000218c <_fini>:
    218c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    218e:	46c0      	nop			; (mov r8, r8)
    2190:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2192:	bc08      	pop	{r3}
    2194:	469e      	mov	lr, r3
    2196:	4770      	bx	lr

00002198 <__fini_array_start>:
    2198:	000000b5 	.word	0x000000b5
