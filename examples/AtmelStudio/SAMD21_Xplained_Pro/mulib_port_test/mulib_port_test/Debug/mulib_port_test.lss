
mulib_port_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000055f4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  000055f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000184  20000078  0000566c  00020078  2**2
                  ALLOC
  3 .stack        00002004  200001fc  000057f0  00020078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   00025d73  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c6f  00000000  00000000  00045e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007a2a  00000000  00000000  00048adb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000013c8  00000000  00000000  00050505  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001268  00000000  00000000  000518cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a1c9  00000000  00000000  00052b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001058c  00000000  00000000  0006ccfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a9d8  00000000  00000000  0007d28a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004c78  00000000  00000000  00107c64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 22 00 20 29 01 00 00 21 02 00 00 21 02 00 00     .". )...!...!...
	...
      2c:	21 02 00 00 00 00 00 00 00 00 00 00 21 02 00 00     !...........!...
      3c:	21 02 00 00 21 02 00 00 21 02 00 00 21 02 00 00     !...!...!...!...
      4c:	b9 29 00 00 a9 20 00 00 21 02 00 00 21 02 00 00     .)... ..!...!...
      5c:	21 02 00 00 21 02 00 00 21 02 00 00 21 02 00 00     !...!...!...!...
      6c:	21 02 00 00 49 34 00 00 21 02 00 00 21 02 00 00     !...I4..!...!...
      7c:	21 02 00 00 21 02 00 00 21 02 00 00 21 02 00 00     !...!...!...!...
      8c:	21 02 00 00 21 02 00 00 21 02 00 00 21 02 00 00     !...!...!...!...
      9c:	21 02 00 00 21 02 00 00 21 02 00 00 21 02 00 00     !...!...!...!...
      ac:	21 02 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000078 	.word	0x20000078
      d4:	00000000 	.word	0x00000000
      d8:	000055f4 	.word	0x000055f4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000007c 	.word	0x2000007c
     108:	000055f4 	.word	0x000055f4
     10c:	000055f4 	.word	0x000055f4
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	system_init();
     118:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11a:	4798      	blx	r3
}
     11c:	46c0      	nop			; (mov r8, r8)
     11e:	46bd      	mov	sp, r7
     120:	bd80      	pop	{r7, pc}
     122:	46c0      	nop			; (mov r8, r8)
     124:	00000cb5 	.word	0x00000cb5

00000128 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     128:	b580      	push	{r7, lr}
     12a:	b082      	sub	sp, #8
     12c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     12e:	4b2f      	ldr	r3, [pc, #188]	; (1ec <Reset_Handler+0xc4>)
     130:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     132:	4b2f      	ldr	r3, [pc, #188]	; (1f0 <Reset_Handler+0xc8>)
     134:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     136:	687a      	ldr	r2, [r7, #4]
     138:	683b      	ldr	r3, [r7, #0]
     13a:	429a      	cmp	r2, r3
     13c:	d00c      	beq.n	158 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     13e:	e007      	b.n	150 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     140:	683b      	ldr	r3, [r7, #0]
     142:	1d1a      	adds	r2, r3, #4
     144:	603a      	str	r2, [r7, #0]
     146:	687a      	ldr	r2, [r7, #4]
     148:	1d11      	adds	r1, r2, #4
     14a:	6079      	str	r1, [r7, #4]
     14c:	6812      	ldr	r2, [r2, #0]
     14e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     150:	683a      	ldr	r2, [r7, #0]
     152:	4b28      	ldr	r3, [pc, #160]	; (1f4 <Reset_Handler+0xcc>)
     154:	429a      	cmp	r2, r3
     156:	d3f3      	bcc.n	140 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     158:	4b27      	ldr	r3, [pc, #156]	; (1f8 <Reset_Handler+0xd0>)
     15a:	603b      	str	r3, [r7, #0]
     15c:	e004      	b.n	168 <Reset_Handler+0x40>
                *pDest++ = 0;
     15e:	683b      	ldr	r3, [r7, #0]
     160:	1d1a      	adds	r2, r3, #4
     162:	603a      	str	r2, [r7, #0]
     164:	2200      	movs	r2, #0
     166:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     168:	683a      	ldr	r2, [r7, #0]
     16a:	4b24      	ldr	r3, [pc, #144]	; (1fc <Reset_Handler+0xd4>)
     16c:	429a      	cmp	r2, r3
     16e:	d3f6      	bcc.n	15e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     170:	4b23      	ldr	r3, [pc, #140]	; (200 <Reset_Handler+0xd8>)
     172:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     174:	4b23      	ldr	r3, [pc, #140]	; (204 <Reset_Handler+0xdc>)
     176:	687a      	ldr	r2, [r7, #4]
     178:	21ff      	movs	r1, #255	; 0xff
     17a:	438a      	bics	r2, r1
     17c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17e:	4a22      	ldr	r2, [pc, #136]	; (208 <Reset_Handler+0xe0>)
     180:	2390      	movs	r3, #144	; 0x90
     182:	005b      	lsls	r3, r3, #1
     184:	2102      	movs	r1, #2
     186:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     188:	4a20      	ldr	r2, [pc, #128]	; (20c <Reset_Handler+0xe4>)
     18a:	78d3      	ldrb	r3, [r2, #3]
     18c:	2103      	movs	r1, #3
     18e:	438b      	bics	r3, r1
     190:	1c19      	adds	r1, r3, #0
     192:	2302      	movs	r3, #2
     194:	430b      	orrs	r3, r1
     196:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     198:	4a1c      	ldr	r2, [pc, #112]	; (20c <Reset_Handler+0xe4>)
     19a:	78d3      	ldrb	r3, [r2, #3]
     19c:	210c      	movs	r1, #12
     19e:	438b      	bics	r3, r1
     1a0:	1c19      	adds	r1, r3, #0
     1a2:	2308      	movs	r3, #8
     1a4:	430b      	orrs	r3, r1
     1a6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a8:	4a19      	ldr	r2, [pc, #100]	; (210 <Reset_Handler+0xe8>)
     1aa:	7b93      	ldrb	r3, [r2, #14]
     1ac:	2130      	movs	r1, #48	; 0x30
     1ae:	438b      	bics	r3, r1
     1b0:	1c19      	adds	r1, r3, #0
     1b2:	2320      	movs	r3, #32
     1b4:	430b      	orrs	r3, r1
     1b6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b8:	4a15      	ldr	r2, [pc, #84]	; (210 <Reset_Handler+0xe8>)
     1ba:	7b93      	ldrb	r3, [r2, #14]
     1bc:	210c      	movs	r1, #12
     1be:	438b      	bics	r3, r1
     1c0:	1c19      	adds	r1, r3, #0
     1c2:	2308      	movs	r3, #8
     1c4:	430b      	orrs	r3, r1
     1c6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1c8:	4a11      	ldr	r2, [pc, #68]	; (210 <Reset_Handler+0xe8>)
     1ca:	7b93      	ldrb	r3, [r2, #14]
     1cc:	2103      	movs	r1, #3
     1ce:	438b      	bics	r3, r1
     1d0:	1c19      	adds	r1, r3, #0
     1d2:	2302      	movs	r3, #2
     1d4:	430b      	orrs	r3, r1
     1d6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1d8:	4a0e      	ldr	r2, [pc, #56]	; (214 <Reset_Handler+0xec>)
     1da:	6853      	ldr	r3, [r2, #4]
     1dc:	2180      	movs	r1, #128	; 0x80
     1de:	430b      	orrs	r3, r1
     1e0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1e2:	4b0d      	ldr	r3, [pc, #52]	; (218 <Reset_Handler+0xf0>)
     1e4:	4798      	blx	r3

        /* Branch to main function */
        main();
     1e6:	4b0d      	ldr	r3, [pc, #52]	; (21c <Reset_Handler+0xf4>)
     1e8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     1ea:	e7fe      	b.n	1ea <Reset_Handler+0xc2>
     1ec:	000055f4 	.word	0x000055f4
     1f0:	20000000 	.word	0x20000000
     1f4:	20000078 	.word	0x20000078
     1f8:	20000078 	.word	0x20000078
     1fc:	200001fc 	.word	0x200001fc
     200:	00000000 	.word	0x00000000
     204:	e000ed00 	.word	0xe000ed00
     208:	41007000 	.word	0x41007000
     20c:	41005000 	.word	0x41005000
     210:	41004800 	.word	0x41004800
     214:	41004000 	.word	0x41004000
     218:	00004895 	.word	0x00004895
     21c:	00003665 	.word	0x00003665

00000220 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     220:	b580      	push	{r7, lr}
     222:	af00      	add	r7, sp, #0
        while (1) {
     224:	e7fe      	b.n	224 <Dummy_Handler+0x4>

00000226 <hri_gclk_write_CLKCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
     226:	b580      	push	{r7, lr}
     228:	b082      	sub	sp, #8
     22a:	af00      	add	r7, sp, #0
     22c:	6078      	str	r0, [r7, #4]
     22e:	000a      	movs	r2, r1
     230:	1cbb      	adds	r3, r7, #2
     232:	801a      	strh	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     234:	687b      	ldr	r3, [r7, #4]
     236:	1cba      	adds	r2, r7, #2
     238:	8812      	ldrh	r2, [r2, #0]
     23a:	805a      	strh	r2, [r3, #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     23c:	46c0      	nop			; (mov r8, r8)
     23e:	46bd      	mov	sp, r7
     240:	b002      	add	sp, #8
     242:	bd80      	pop	{r7, pc}

00000244 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     244:	b580      	push	{r7, lr}
     246:	b084      	sub	sp, #16
     248:	af00      	add	r7, sp, #0
     24a:	60f8      	str	r0, [r7, #12]
     24c:	607a      	str	r2, [r7, #4]
     24e:	230b      	movs	r3, #11
     250:	18fb      	adds	r3, r7, r3
     252:	1c0a      	adds	r2, r1, #0
     254:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     256:	230b      	movs	r3, #11
     258:	18fb      	adds	r3, r7, r3
     25a:	781b      	ldrb	r3, [r3, #0]
     25c:	68fa      	ldr	r2, [r7, #12]
     25e:	01db      	lsls	r3, r3, #7
     260:	18d3      	adds	r3, r2, r3
     262:	3308      	adds	r3, #8
     264:	687a      	ldr	r2, [r7, #4]
     266:	601a      	str	r2, [r3, #0]
}
     268:	46c0      	nop			; (mov r8, r8)
     26a:	46bd      	mov	sp, r7
     26c:	b004      	add	sp, #16
     26e:	bd80      	pop	{r7, pc}

00000270 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     270:	b580      	push	{r7, lr}
     272:	b084      	sub	sp, #16
     274:	af00      	add	r7, sp, #0
     276:	60f8      	str	r0, [r7, #12]
     278:	607a      	str	r2, [r7, #4]
     27a:	230b      	movs	r3, #11
     27c:	18fb      	adds	r3, r7, r3
     27e:	1c0a      	adds	r2, r1, #0
     280:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     282:	230b      	movs	r3, #11
     284:	18fb      	adds	r3, r7, r3
     286:	781b      	ldrb	r3, [r3, #0]
     288:	68fa      	ldr	r2, [r7, #12]
     28a:	01db      	lsls	r3, r3, #7
     28c:	18d3      	adds	r3, r2, r3
     28e:	3304      	adds	r3, #4
     290:	687a      	ldr	r2, [r7, #4]
     292:	601a      	str	r2, [r3, #0]
}
     294:	46c0      	nop			; (mov r8, r8)
     296:	46bd      	mov	sp, r7
     298:	b004      	add	sp, #16
     29a:	bd80      	pop	{r7, pc}

0000029c <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     29c:	b580      	push	{r7, lr}
     29e:	b084      	sub	sp, #16
     2a0:	af00      	add	r7, sp, #0
     2a2:	60f8      	str	r0, [r7, #12]
     2a4:	607a      	str	r2, [r7, #4]
     2a6:	230b      	movs	r3, #11
     2a8:	18fb      	adds	r3, r7, r3
     2aa:	1c0a      	adds	r2, r1, #0
     2ac:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2ae:	230b      	movs	r3, #11
     2b0:	18fb      	adds	r3, r7, r3
     2b2:	781b      	ldrb	r3, [r3, #0]
     2b4:	68fa      	ldr	r2, [r7, #12]
     2b6:	01db      	lsls	r3, r3, #7
     2b8:	18d3      	adds	r3, r2, r3
     2ba:	3318      	adds	r3, #24
     2bc:	687a      	ldr	r2, [r7, #4]
     2be:	601a      	str	r2, [r3, #0]
}
     2c0:	46c0      	nop			; (mov r8, r8)
     2c2:	46bd      	mov	sp, r7
     2c4:	b004      	add	sp, #16
     2c6:	bd80      	pop	{r7, pc}

000002c8 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     2c8:	b580      	push	{r7, lr}
     2ca:	b084      	sub	sp, #16
     2cc:	af00      	add	r7, sp, #0
     2ce:	60f8      	str	r0, [r7, #12]
     2d0:	607a      	str	r2, [r7, #4]
     2d2:	230b      	movs	r3, #11
     2d4:	18fb      	adds	r3, r7, r3
     2d6:	1c0a      	adds	r2, r1, #0
     2d8:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2da:	230b      	movs	r3, #11
     2dc:	18fb      	adds	r3, r7, r3
     2de:	781b      	ldrb	r3, [r3, #0]
     2e0:	68fa      	ldr	r2, [r7, #12]
     2e2:	01db      	lsls	r3, r3, #7
     2e4:	18d3      	adds	r3, r2, r3
     2e6:	3314      	adds	r3, #20
     2e8:	687a      	ldr	r2, [r7, #4]
     2ea:	601a      	str	r2, [r3, #0]
}
     2ec:	46c0      	nop			; (mov r8, r8)
     2ee:	46bd      	mov	sp, r7
     2f0:	b004      	add	sp, #16
     2f2:	bd80      	pop	{r7, pc}

000002f4 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     2f4:	b590      	push	{r4, r7, lr}
     2f6:	b085      	sub	sp, #20
     2f8:	af00      	add	r7, sp, #0
     2fa:	6078      	str	r0, [r7, #4]
     2fc:	000c      	movs	r4, r1
     2fe:	0010      	movs	r0, r2
     300:	0019      	movs	r1, r3
     302:	1cfb      	adds	r3, r7, #3
     304:	1c22      	adds	r2, r4, #0
     306:	701a      	strb	r2, [r3, #0]
     308:	1cbb      	adds	r3, r7, #2
     30a:	1c02      	adds	r2, r0, #0
     30c:	701a      	strb	r2, [r3, #0]
     30e:	1c7b      	adds	r3, r7, #1
     310:	1c0a      	adds	r2, r1, #0
     312:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     314:	1cfb      	adds	r3, r7, #3
     316:	7819      	ldrb	r1, [r3, #0]
     318:	1cbb      	adds	r3, r7, #2
     31a:	781a      	ldrb	r2, [r3, #0]
     31c:	230f      	movs	r3, #15
     31e:	18fb      	adds	r3, r7, r3
     320:	6878      	ldr	r0, [r7, #4]
     322:	2430      	movs	r4, #48	; 0x30
     324:	01c9      	lsls	r1, r1, #7
     326:	1841      	adds	r1, r0, r1
     328:	188a      	adds	r2, r1, r2
     32a:	1912      	adds	r2, r2, r4
     32c:	7812      	ldrb	r2, [r2, #0]
     32e:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     330:	230f      	movs	r3, #15
     332:	18fb      	adds	r3, r7, r3
     334:	220f      	movs	r2, #15
     336:	18ba      	adds	r2, r7, r2
     338:	7812      	ldrb	r2, [r2, #0]
     33a:	210f      	movs	r1, #15
     33c:	438a      	bics	r2, r1
     33e:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     340:	1c7b      	adds	r3, r7, #1
     342:	781b      	ldrb	r3, [r3, #0]
     344:	220f      	movs	r2, #15
     346:	4013      	ands	r3, r2
     348:	b2d9      	uxtb	r1, r3
     34a:	230f      	movs	r3, #15
     34c:	18fb      	adds	r3, r7, r3
     34e:	220f      	movs	r2, #15
     350:	18ba      	adds	r2, r7, r2
     352:	7812      	ldrb	r2, [r2, #0]
     354:	430a      	orrs	r2, r1
     356:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     358:	1cfb      	adds	r3, r7, #3
     35a:	781a      	ldrb	r2, [r3, #0]
     35c:	1cbb      	adds	r3, r7, #2
     35e:	781b      	ldrb	r3, [r3, #0]
     360:	6879      	ldr	r1, [r7, #4]
     362:	2030      	movs	r0, #48	; 0x30
     364:	01d2      	lsls	r2, r2, #7
     366:	188a      	adds	r2, r1, r2
     368:	18d3      	adds	r3, r2, r3
     36a:	181b      	adds	r3, r3, r0
     36c:	220f      	movs	r2, #15
     36e:	18ba      	adds	r2, r7, r2
     370:	7812      	ldrb	r2, [r2, #0]
     372:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     374:	46c0      	nop			; (mov r8, r8)
     376:	46bd      	mov	sp, r7
     378:	b005      	add	sp, #20
     37a:	bd90      	pop	{r4, r7, pc}

0000037c <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     37c:	b590      	push	{r4, r7, lr}
     37e:	b085      	sub	sp, #20
     380:	af00      	add	r7, sp, #0
     382:	6078      	str	r0, [r7, #4]
     384:	000c      	movs	r4, r1
     386:	0010      	movs	r0, r2
     388:	0019      	movs	r1, r3
     38a:	1cfb      	adds	r3, r7, #3
     38c:	1c22      	adds	r2, r4, #0
     38e:	701a      	strb	r2, [r3, #0]
     390:	1cbb      	adds	r3, r7, #2
     392:	1c02      	adds	r2, r0, #0
     394:	701a      	strb	r2, [r3, #0]
     396:	1c7b      	adds	r3, r7, #1
     398:	1c0a      	adds	r2, r1, #0
     39a:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     39c:	1cfb      	adds	r3, r7, #3
     39e:	7819      	ldrb	r1, [r3, #0]
     3a0:	1cbb      	adds	r3, r7, #2
     3a2:	781a      	ldrb	r2, [r3, #0]
     3a4:	230f      	movs	r3, #15
     3a6:	18fb      	adds	r3, r7, r3
     3a8:	6878      	ldr	r0, [r7, #4]
     3aa:	2430      	movs	r4, #48	; 0x30
     3ac:	01c9      	lsls	r1, r1, #7
     3ae:	1841      	adds	r1, r0, r1
     3b0:	188a      	adds	r2, r1, r2
     3b2:	1912      	adds	r2, r2, r4
     3b4:	7812      	ldrb	r2, [r2, #0]
     3b6:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3b8:	230f      	movs	r3, #15
     3ba:	18fb      	adds	r3, r7, r3
     3bc:	220f      	movs	r2, #15
     3be:	18ba      	adds	r2, r7, r2
     3c0:	7812      	ldrb	r2, [r2, #0]
     3c2:	210f      	movs	r1, #15
     3c4:	400a      	ands	r2, r1
     3c6:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     3c8:	1c7b      	adds	r3, r7, #1
     3ca:	781b      	ldrb	r3, [r3, #0]
     3cc:	011b      	lsls	r3, r3, #4
     3ce:	b2d9      	uxtb	r1, r3
     3d0:	230f      	movs	r3, #15
     3d2:	18fb      	adds	r3, r7, r3
     3d4:	220f      	movs	r2, #15
     3d6:	18ba      	adds	r2, r7, r2
     3d8:	7812      	ldrb	r2, [r2, #0]
     3da:	430a      	orrs	r2, r1
     3dc:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3de:	1cfb      	adds	r3, r7, #3
     3e0:	781a      	ldrb	r2, [r3, #0]
     3e2:	1cbb      	adds	r3, r7, #2
     3e4:	781b      	ldrb	r3, [r3, #0]
     3e6:	6879      	ldr	r1, [r7, #4]
     3e8:	2030      	movs	r0, #48	; 0x30
     3ea:	01d2      	lsls	r2, r2, #7
     3ec:	188a      	adds	r2, r1, r2
     3ee:	18d3      	adds	r3, r2, r3
     3f0:	181b      	adds	r3, r3, r0
     3f2:	220f      	movs	r2, #15
     3f4:	18ba      	adds	r2, r7, r2
     3f6:	7812      	ldrb	r2, [r2, #0]
     3f8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	46bd      	mov	sp, r7
     3fe:	b005      	add	sp, #20
     400:	bd90      	pop	{r4, r7, pc}

00000402 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     402:	b590      	push	{r4, r7, lr}
     404:	b085      	sub	sp, #20
     406:	af00      	add	r7, sp, #0
     408:	6078      	str	r0, [r7, #4]
     40a:	000c      	movs	r4, r1
     40c:	0010      	movs	r0, r2
     40e:	0019      	movs	r1, r3
     410:	1cfb      	adds	r3, r7, #3
     412:	1c22      	adds	r2, r4, #0
     414:	701a      	strb	r2, [r3, #0]
     416:	1cbb      	adds	r3, r7, #2
     418:	1c02      	adds	r2, r0, #0
     41a:	701a      	strb	r2, [r3, #0]
     41c:	1c7b      	adds	r3, r7, #1
     41e:	1c0a      	adds	r2, r1, #0
     420:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     422:	1cfb      	adds	r3, r7, #3
     424:	7819      	ldrb	r1, [r3, #0]
     426:	1cbb      	adds	r3, r7, #2
     428:	781a      	ldrb	r2, [r3, #0]
     42a:	230f      	movs	r3, #15
     42c:	18fb      	adds	r3, r7, r3
     42e:	6878      	ldr	r0, [r7, #4]
     430:	2440      	movs	r4, #64	; 0x40
     432:	01c9      	lsls	r1, r1, #7
     434:	1841      	adds	r1, r0, r1
     436:	188a      	adds	r2, r1, r2
     438:	1912      	adds	r2, r2, r4
     43a:	7812      	ldrb	r2, [r2, #0]
     43c:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     43e:	230f      	movs	r3, #15
     440:	18fb      	adds	r3, r7, r3
     442:	220f      	movs	r2, #15
     444:	18ba      	adds	r2, r7, r2
     446:	7812      	ldrb	r2, [r2, #0]
     448:	2101      	movs	r1, #1
     44a:	438a      	bics	r2, r1
     44c:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     44e:	1c7b      	adds	r3, r7, #1
     450:	7819      	ldrb	r1, [r3, #0]
     452:	230f      	movs	r3, #15
     454:	18fb      	adds	r3, r7, r3
     456:	220f      	movs	r2, #15
     458:	18ba      	adds	r2, r7, r2
     45a:	7812      	ldrb	r2, [r2, #0]
     45c:	430a      	orrs	r2, r1
     45e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     460:	1cfb      	adds	r3, r7, #3
     462:	781a      	ldrb	r2, [r3, #0]
     464:	1cbb      	adds	r3, r7, #2
     466:	781b      	ldrb	r3, [r3, #0]
     468:	6879      	ldr	r1, [r7, #4]
     46a:	2040      	movs	r0, #64	; 0x40
     46c:	01d2      	lsls	r2, r2, #7
     46e:	188a      	adds	r2, r1, r2
     470:	18d3      	adds	r3, r2, r3
     472:	181b      	adds	r3, r3, r0
     474:	220f      	movs	r2, #15
     476:	18ba      	adds	r2, r7, r2
     478:	7812      	ldrb	r2, [r2, #0]
     47a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     47c:	46c0      	nop			; (mov r8, r8)
     47e:	46bd      	mov	sp, r7
     480:	b005      	add	sp, #20
     482:	bd90      	pop	{r4, r7, pc}

00000484 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     484:	b5b0      	push	{r4, r5, r7, lr}
     486:	b082      	sub	sp, #8
     488:	af00      	add	r7, sp, #0
     48a:	6078      	str	r0, [r7, #4]
     48c:	0008      	movs	r0, r1
     48e:	0011      	movs	r1, r2
     490:	1cfb      	adds	r3, r7, #3
     492:	1c02      	adds	r2, r0, #0
     494:	701a      	strb	r2, [r3, #0]
     496:	1cbb      	adds	r3, r7, #2
     498:	1c0a      	adds	r2, r1, #0
     49a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     49c:	1cfb      	adds	r3, r7, #3
     49e:	781a      	ldrb	r2, [r3, #0]
     4a0:	1cbb      	adds	r3, r7, #2
     4a2:	781b      	ldrb	r3, [r3, #0]
     4a4:	1cf9      	adds	r1, r7, #3
     4a6:	7808      	ldrb	r0, [r1, #0]
     4a8:	1cb9      	adds	r1, r7, #2
     4aa:	7809      	ldrb	r1, [r1, #0]
     4ac:	687c      	ldr	r4, [r7, #4]
     4ae:	2540      	movs	r5, #64	; 0x40
     4b0:	01c0      	lsls	r0, r0, #7
     4b2:	1820      	adds	r0, r4, r0
     4b4:	1841      	adds	r1, r0, r1
     4b6:	1949      	adds	r1, r1, r5
     4b8:	7809      	ldrb	r1, [r1, #0]
     4ba:	b2c9      	uxtb	r1, r1
     4bc:	2004      	movs	r0, #4
     4be:	4301      	orrs	r1, r0
     4c0:	b2cc      	uxtb	r4, r1
     4c2:	6879      	ldr	r1, [r7, #4]
     4c4:	2040      	movs	r0, #64	; 0x40
     4c6:	01d2      	lsls	r2, r2, #7
     4c8:	188a      	adds	r2, r1, r2
     4ca:	18d3      	adds	r3, r2, r3
     4cc:	181b      	adds	r3, r3, r0
     4ce:	1c22      	adds	r2, r4, #0
     4d0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	46bd      	mov	sp, r7
     4d6:	b002      	add	sp, #8
     4d8:	bdb0      	pop	{r4, r5, r7, pc}

000004da <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     4da:	b5b0      	push	{r4, r5, r7, lr}
     4dc:	b082      	sub	sp, #8
     4de:	af00      	add	r7, sp, #0
     4e0:	6078      	str	r0, [r7, #4]
     4e2:	0008      	movs	r0, r1
     4e4:	0011      	movs	r1, r2
     4e6:	1cfb      	adds	r3, r7, #3
     4e8:	1c02      	adds	r2, r0, #0
     4ea:	701a      	strb	r2, [r3, #0]
     4ec:	1cbb      	adds	r3, r7, #2
     4ee:	1c0a      	adds	r2, r1, #0
     4f0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4f2:	1cfb      	adds	r3, r7, #3
     4f4:	781a      	ldrb	r2, [r3, #0]
     4f6:	1cbb      	adds	r3, r7, #2
     4f8:	781b      	ldrb	r3, [r3, #0]
     4fa:	1cf9      	adds	r1, r7, #3
     4fc:	7808      	ldrb	r0, [r1, #0]
     4fe:	1cb9      	adds	r1, r7, #2
     500:	7809      	ldrb	r1, [r1, #0]
     502:	687c      	ldr	r4, [r7, #4]
     504:	2540      	movs	r5, #64	; 0x40
     506:	01c0      	lsls	r0, r0, #7
     508:	1820      	adds	r0, r4, r0
     50a:	1841      	adds	r1, r0, r1
     50c:	1949      	adds	r1, r1, r5
     50e:	7809      	ldrb	r1, [r1, #0]
     510:	b2c9      	uxtb	r1, r1
     512:	2004      	movs	r0, #4
     514:	4381      	bics	r1, r0
     516:	b2cc      	uxtb	r4, r1
     518:	6879      	ldr	r1, [r7, #4]
     51a:	2040      	movs	r0, #64	; 0x40
     51c:	01d2      	lsls	r2, r2, #7
     51e:	188a      	adds	r2, r1, r2
     520:	18d3      	adds	r3, r2, r3
     522:	181b      	adds	r3, r3, r0
     524:	1c22      	adds	r2, r4, #0
     526:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     528:	46c0      	nop			; (mov r8, r8)
     52a:	46bd      	mov	sp, r7
     52c:	b002      	add	sp, #8
     52e:	bdb0      	pop	{r4, r5, r7, pc}

00000530 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     530:	b580      	push	{r7, lr}
     532:	b084      	sub	sp, #16
     534:	af00      	add	r7, sp, #0
     536:	60f8      	str	r0, [r7, #12]
     538:	607a      	str	r2, [r7, #4]
     53a:	230b      	movs	r3, #11
     53c:	18fb      	adds	r3, r7, r3
     53e:	1c0a      	adds	r2, r1, #0
     540:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     542:	230b      	movs	r3, #11
     544:	18fb      	adds	r3, r7, r3
     546:	781b      	ldrb	r3, [r3, #0]
     548:	68fa      	ldr	r2, [r7, #12]
     54a:	01db      	lsls	r3, r3, #7
     54c:	18d3      	adds	r3, r2, r3
     54e:	3328      	adds	r3, #40	; 0x28
     550:	687a      	ldr	r2, [r7, #4]
     552:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     554:	46c0      	nop			; (mov r8, r8)
     556:	46bd      	mov	sp, r7
     558:	b004      	add	sp, #16
     55a:	bd80      	pop	{r7, pc}

0000055c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     55c:	b580      	push	{r7, lr}
     55e:	b082      	sub	sp, #8
     560:	af00      	add	r7, sp, #0
     562:	6039      	str	r1, [r7, #0]
     564:	0011      	movs	r1, r2
     566:	1dfb      	adds	r3, r7, #7
     568:	1c02      	adds	r2, r0, #0
     56a:	701a      	strb	r2, [r3, #0]
     56c:	1dbb      	adds	r3, r7, #6
     56e:	1c0a      	adds	r2, r1, #0
     570:	701a      	strb	r2, [r3, #0]
	switch (direction) {
     572:	1dbb      	adds	r3, r7, #6
     574:	781b      	ldrb	r3, [r3, #0]
     576:	2b01      	cmp	r3, #1
     578:	d023      	beq.n	5c2 <_gpio_set_direction+0x66>
     57a:	2b02      	cmp	r3, #2
     57c:	d03f      	beq.n	5fe <_gpio_set_direction+0xa2>
     57e:	2b00      	cmp	r3, #0
     580:	d15d      	bne.n	63e <_gpio_set_direction+0xe2>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     582:	683a      	ldr	r2, [r7, #0]
     584:	1dfb      	adds	r3, r7, #7
     586:	7819      	ldrb	r1, [r3, #0]
     588:	23c0      	movs	r3, #192	; 0xc0
     58a:	05db      	lsls	r3, r3, #23
     58c:	0018      	movs	r0, r3
     58e:	4b31      	ldr	r3, [pc, #196]	; (654 <_gpio_set_direction+0xf8>)
     590:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     592:	683b      	ldr	r3, [r7, #0]
     594:	041b      	lsls	r3, r3, #16
     596:	0c1b      	lsrs	r3, r3, #16
     598:	2280      	movs	r2, #128	; 0x80
     59a:	05d2      	lsls	r2, r2, #23
     59c:	431a      	orrs	r2, r3
     59e:	1dfb      	adds	r3, r7, #7
     5a0:	781b      	ldrb	r3, [r3, #0]
     5a2:	482d      	ldr	r0, [pc, #180]	; (658 <_gpio_set_direction+0xfc>)
     5a4:	0019      	movs	r1, r3
     5a6:	4b2d      	ldr	r3, [pc, #180]	; (65c <_gpio_set_direction+0x100>)
     5a8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     5aa:	683b      	ldr	r3, [r7, #0]
     5ac:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     5ae:	22c0      	movs	r2, #192	; 0xc0
     5b0:	0612      	lsls	r2, r2, #24
     5b2:	431a      	orrs	r2, r3
     5b4:	1dfb      	adds	r3, r7, #7
     5b6:	781b      	ldrb	r3, [r3, #0]
     5b8:	4827      	ldr	r0, [pc, #156]	; (658 <_gpio_set_direction+0xfc>)
     5ba:	0019      	movs	r1, r3
     5bc:	4b27      	ldr	r3, [pc, #156]	; (65c <_gpio_set_direction+0x100>)
     5be:	4798      	blx	r3
		break;
     5c0:	e043      	b.n	64a <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     5c2:	683a      	ldr	r2, [r7, #0]
     5c4:	1dfb      	adds	r3, r7, #7
     5c6:	7819      	ldrb	r1, [r3, #0]
     5c8:	23c0      	movs	r3, #192	; 0xc0
     5ca:	05db      	lsls	r3, r3, #23
     5cc:	0018      	movs	r0, r3
     5ce:	4b21      	ldr	r3, [pc, #132]	; (654 <_gpio_set_direction+0xf8>)
     5d0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     5d2:	683b      	ldr	r3, [r7, #0]
     5d4:	041b      	lsls	r3, r3, #16
     5d6:	0c1b      	lsrs	r3, r3, #16
     5d8:	4a21      	ldr	r2, [pc, #132]	; (660 <_gpio_set_direction+0x104>)
     5da:	431a      	orrs	r2, r3
     5dc:	1dfb      	adds	r3, r7, #7
     5de:	781b      	ldrb	r3, [r3, #0]
     5e0:	481d      	ldr	r0, [pc, #116]	; (658 <_gpio_set_direction+0xfc>)
     5e2:	0019      	movs	r1, r3
     5e4:	4b1d      	ldr	r3, [pc, #116]	; (65c <_gpio_set_direction+0x100>)
     5e6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     5e8:	683b      	ldr	r3, [r7, #0]
     5ea:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     5ec:	4a1d      	ldr	r2, [pc, #116]	; (664 <_gpio_set_direction+0x108>)
     5ee:	431a      	orrs	r2, r3
     5f0:	1dfb      	adds	r3, r7, #7
     5f2:	781b      	ldrb	r3, [r3, #0]
     5f4:	4818      	ldr	r0, [pc, #96]	; (658 <_gpio_set_direction+0xfc>)
     5f6:	0019      	movs	r1, r3
     5f8:	4b18      	ldr	r3, [pc, #96]	; (65c <_gpio_set_direction+0x100>)
     5fa:	4798      	blx	r3
		break;
     5fc:	e025      	b.n	64a <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
     5fe:	683a      	ldr	r2, [r7, #0]
     600:	1dfb      	adds	r3, r7, #7
     602:	7819      	ldrb	r1, [r3, #0]
     604:	23c0      	movs	r3, #192	; 0xc0
     606:	05db      	lsls	r3, r3, #23
     608:	0018      	movs	r0, r3
     60a:	4b17      	ldr	r3, [pc, #92]	; (668 <_gpio_set_direction+0x10c>)
     60c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     60e:	683b      	ldr	r3, [r7, #0]
     610:	041b      	lsls	r3, r3, #16
     612:	0c1b      	lsrs	r3, r3, #16
     614:	2280      	movs	r2, #128	; 0x80
     616:	05d2      	lsls	r2, r2, #23
     618:	431a      	orrs	r2, r3
     61a:	1dfb      	adds	r3, r7, #7
     61c:	781b      	ldrb	r3, [r3, #0]
     61e:	480e      	ldr	r0, [pc, #56]	; (658 <_gpio_set_direction+0xfc>)
     620:	0019      	movs	r1, r3
     622:	4b0e      	ldr	r3, [pc, #56]	; (65c <_gpio_set_direction+0x100>)
     624:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     626:	683b      	ldr	r3, [r7, #0]
     628:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     62a:	22c0      	movs	r2, #192	; 0xc0
     62c:	0612      	lsls	r2, r2, #24
     62e:	431a      	orrs	r2, r3
     630:	1dfb      	adds	r3, r7, #7
     632:	781b      	ldrb	r3, [r3, #0]
     634:	4808      	ldr	r0, [pc, #32]	; (658 <_gpio_set_direction+0xfc>)
     636:	0019      	movs	r1, r3
     638:	4b08      	ldr	r3, [pc, #32]	; (65c <_gpio_set_direction+0x100>)
     63a:	4798      	blx	r3
		break;
     63c:	e005      	b.n	64a <_gpio_set_direction+0xee>

	default:
		ASSERT(false);
     63e:	4b0b      	ldr	r3, [pc, #44]	; (66c <_gpio_set_direction+0x110>)
     640:	2245      	movs	r2, #69	; 0x45
     642:	0019      	movs	r1, r3
     644:	2000      	movs	r0, #0
     646:	4b0a      	ldr	r3, [pc, #40]	; (670 <_gpio_set_direction+0x114>)
     648:	4798      	blx	r3
	}
}
     64a:	46c0      	nop			; (mov r8, r8)
     64c:	46bd      	mov	sp, r7
     64e:	b002      	add	sp, #8
     650:	bd80      	pop	{r7, pc}
     652:	46c0      	nop			; (mov r8, r8)
     654:	00000271 	.word	0x00000271
     658:	41004400 	.word	0x41004400
     65c:	00000531 	.word	0x00000531
     660:	40020000 	.word	0x40020000
     664:	c0020000 	.word	0xc0020000
     668:	00000245 	.word	0x00000245
     66c:	00005158 	.word	0x00005158
     670:	00001a3f 	.word	0x00001a3f

00000674 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     674:	b580      	push	{r7, lr}
     676:	b082      	sub	sp, #8
     678:	af00      	add	r7, sp, #0
     67a:	6039      	str	r1, [r7, #0]
     67c:	0011      	movs	r1, r2
     67e:	1dfb      	adds	r3, r7, #7
     680:	1c02      	adds	r2, r0, #0
     682:	701a      	strb	r2, [r3, #0]
     684:	1dbb      	adds	r3, r7, #6
     686:	1c0a      	adds	r2, r1, #0
     688:	701a      	strb	r2, [r3, #0]
	if (level) {
     68a:	1dbb      	adds	r3, r7, #6
     68c:	781b      	ldrb	r3, [r3, #0]
     68e:	2b00      	cmp	r3, #0
     690:	d008      	beq.n	6a4 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     692:	683a      	ldr	r2, [r7, #0]
     694:	1dfb      	adds	r3, r7, #7
     696:	7819      	ldrb	r1, [r3, #0]
     698:	23c0      	movs	r3, #192	; 0xc0
     69a:	05db      	lsls	r3, r3, #23
     69c:	0018      	movs	r0, r3
     69e:	4b07      	ldr	r3, [pc, #28]	; (6bc <_gpio_set_level+0x48>)
     6a0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     6a2:	e007      	b.n	6b4 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     6a4:	683a      	ldr	r2, [r7, #0]
     6a6:	1dfb      	adds	r3, r7, #7
     6a8:	7819      	ldrb	r1, [r3, #0]
     6aa:	23c0      	movs	r3, #192	; 0xc0
     6ac:	05db      	lsls	r3, r3, #23
     6ae:	0018      	movs	r0, r3
     6b0:	4b03      	ldr	r3, [pc, #12]	; (6c0 <_gpio_set_level+0x4c>)
     6b2:	4798      	blx	r3
}
     6b4:	46c0      	nop			; (mov r8, r8)
     6b6:	46bd      	mov	sp, r7
     6b8:	b002      	add	sp, #8
     6ba:	bd80      	pop	{r7, pc}
     6bc:	0000029d 	.word	0x0000029d
     6c0:	000002c9 	.word	0x000002c9

000006c4 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     6c4:	b590      	push	{r4, r7, lr}
     6c6:	b083      	sub	sp, #12
     6c8:	af00      	add	r7, sp, #0
     6ca:	0004      	movs	r4, r0
     6cc:	0008      	movs	r0, r1
     6ce:	0011      	movs	r1, r2
     6d0:	1dfb      	adds	r3, r7, #7
     6d2:	1c22      	adds	r2, r4, #0
     6d4:	701a      	strb	r2, [r3, #0]
     6d6:	1dbb      	adds	r3, r7, #6
     6d8:	1c02      	adds	r2, r0, #0
     6da:	701a      	strb	r2, [r3, #0]
     6dc:	1d7b      	adds	r3, r7, #5
     6de:	1c0a      	adds	r2, r1, #0
     6e0:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
     6e2:	1d7b      	adds	r3, r7, #5
     6e4:	781b      	ldrb	r3, [r3, #0]
     6e6:	2b01      	cmp	r3, #1
     6e8:	d00c      	beq.n	704 <_gpio_set_pin_pull_mode+0x40>
     6ea:	2b02      	cmp	r3, #2
     6ec:	d029      	beq.n	742 <_gpio_set_pin_pull_mode+0x7e>
     6ee:	2b00      	cmp	r3, #0
     6f0:	d146      	bne.n	780 <_gpio_set_pin_pull_mode+0xbc>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     6f2:	1dbb      	adds	r3, r7, #6
     6f4:	781a      	ldrb	r2, [r3, #0]
     6f6:	1dfb      	adds	r3, r7, #7
     6f8:	781b      	ldrb	r3, [r3, #0]
     6fa:	4827      	ldr	r0, [pc, #156]	; (798 <_gpio_set_pin_pull_mode+0xd4>)
     6fc:	0019      	movs	r1, r3
     6fe:	4b27      	ldr	r3, [pc, #156]	; (79c <_gpio_set_pin_pull_mode+0xd8>)
     700:	4798      	blx	r3
		break;
     702:	e044      	b.n	78e <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     704:	1dbb      	adds	r3, r7, #6
     706:	781b      	ldrb	r3, [r3, #0]
     708:	2201      	movs	r2, #1
     70a:	409a      	lsls	r2, r3
     70c:	1dfb      	adds	r3, r7, #7
     70e:	7819      	ldrb	r1, [r3, #0]
     710:	23c0      	movs	r3, #192	; 0xc0
     712:	05db      	lsls	r3, r3, #23
     714:	0018      	movs	r0, r3
     716:	4b22      	ldr	r3, [pc, #136]	; (7a0 <_gpio_set_pin_pull_mode+0xdc>)
     718:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     71a:	1dbb      	adds	r3, r7, #6
     71c:	781a      	ldrb	r2, [r3, #0]
     71e:	1dfb      	adds	r3, r7, #7
     720:	781b      	ldrb	r3, [r3, #0]
     722:	481d      	ldr	r0, [pc, #116]	; (798 <_gpio_set_pin_pull_mode+0xd4>)
     724:	0019      	movs	r1, r3
     726:	4b1f      	ldr	r3, [pc, #124]	; (7a4 <_gpio_set_pin_pull_mode+0xe0>)
     728:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
     72a:	1dbb      	adds	r3, r7, #6
     72c:	781b      	ldrb	r3, [r3, #0]
     72e:	2201      	movs	r2, #1
     730:	409a      	lsls	r2, r3
     732:	1dfb      	adds	r3, r7, #7
     734:	7819      	ldrb	r1, [r3, #0]
     736:	23c0      	movs	r3, #192	; 0xc0
     738:	05db      	lsls	r3, r3, #23
     73a:	0018      	movs	r0, r3
     73c:	4b1a      	ldr	r3, [pc, #104]	; (7a8 <_gpio_set_pin_pull_mode+0xe4>)
     73e:	4798      	blx	r3
		break;
     740:	e025      	b.n	78e <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     742:	1dbb      	adds	r3, r7, #6
     744:	781b      	ldrb	r3, [r3, #0]
     746:	2201      	movs	r2, #1
     748:	409a      	lsls	r2, r3
     74a:	1dfb      	adds	r3, r7, #7
     74c:	7819      	ldrb	r1, [r3, #0]
     74e:	23c0      	movs	r3, #192	; 0xc0
     750:	05db      	lsls	r3, r3, #23
     752:	0018      	movs	r0, r3
     754:	4b12      	ldr	r3, [pc, #72]	; (7a0 <_gpio_set_pin_pull_mode+0xdc>)
     756:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     758:	1dbb      	adds	r3, r7, #6
     75a:	781a      	ldrb	r2, [r3, #0]
     75c:	1dfb      	adds	r3, r7, #7
     75e:	781b      	ldrb	r3, [r3, #0]
     760:	480d      	ldr	r0, [pc, #52]	; (798 <_gpio_set_pin_pull_mode+0xd4>)
     762:	0019      	movs	r1, r3
     764:	4b0f      	ldr	r3, [pc, #60]	; (7a4 <_gpio_set_pin_pull_mode+0xe0>)
     766:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
     768:	1dbb      	adds	r3, r7, #6
     76a:	781b      	ldrb	r3, [r3, #0]
     76c:	2201      	movs	r2, #1
     76e:	409a      	lsls	r2, r3
     770:	1dfb      	adds	r3, r7, #7
     772:	7819      	ldrb	r1, [r3, #0]
     774:	23c0      	movs	r3, #192	; 0xc0
     776:	05db      	lsls	r3, r3, #23
     778:	0018      	movs	r0, r3
     77a:	4b0c      	ldr	r3, [pc, #48]	; (7ac <_gpio_set_pin_pull_mode+0xe8>)
     77c:	4798      	blx	r3
		break;
     77e:	e006      	b.n	78e <_gpio_set_pin_pull_mode+0xca>

	default:
		ASSERT(false);
     780:	4b0b      	ldr	r3, [pc, #44]	; (7b0 <_gpio_set_pin_pull_mode+0xec>)
     782:	2288      	movs	r2, #136	; 0x88
     784:	0019      	movs	r1, r3
     786:	2000      	movs	r0, #0
     788:	4b0a      	ldr	r3, [pc, #40]	; (7b4 <_gpio_set_pin_pull_mode+0xf0>)
     78a:	4798      	blx	r3
		break;
     78c:	46c0      	nop			; (mov r8, r8)
	}
}
     78e:	46c0      	nop			; (mov r8, r8)
     790:	46bd      	mov	sp, r7
     792:	b003      	add	sp, #12
     794:	bd90      	pop	{r4, r7, pc}
     796:	46c0      	nop			; (mov r8, r8)
     798:	41004400 	.word	0x41004400
     79c:	000004db 	.word	0x000004db
     7a0:	00000271 	.word	0x00000271
     7a4:	00000485 	.word	0x00000485
     7a8:	0000029d 	.word	0x0000029d
     7ac:	000002c9 	.word	0x000002c9
     7b0:	00005158 	.word	0x00005158
     7b4:	00001a3f 	.word	0x00001a3f

000007b8 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     7b8:	b590      	push	{r4, r7, lr}
     7ba:	b085      	sub	sp, #20
     7bc:	af00      	add	r7, sp, #0
     7be:	6078      	str	r0, [r7, #4]
     7c0:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     7c2:	687b      	ldr	r3, [r7, #4]
     7c4:	095a      	lsrs	r2, r3, #5
     7c6:	230f      	movs	r3, #15
     7c8:	18fb      	adds	r3, r7, r3
     7ca:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
     7cc:	687b      	ldr	r3, [r7, #4]
     7ce:	b2da      	uxtb	r2, r3
     7d0:	230e      	movs	r3, #14
     7d2:	18fb      	adds	r3, r7, r3
     7d4:	211f      	movs	r1, #31
     7d6:	400a      	ands	r2, r1
     7d8:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     7da:	683b      	ldr	r3, [r7, #0]
     7dc:	3301      	adds	r3, #1
     7de:	d10a      	bne.n	7f6 <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     7e0:	230e      	movs	r3, #14
     7e2:	18fb      	adds	r3, r7, r3
     7e4:	781a      	ldrb	r2, [r3, #0]
     7e6:	230f      	movs	r3, #15
     7e8:	18fb      	adds	r3, r7, r3
     7ea:	7819      	ldrb	r1, [r3, #0]
     7ec:	481b      	ldr	r0, [pc, #108]	; (85c <_gpio_set_pin_function+0xa4>)
     7ee:	2300      	movs	r3, #0
     7f0:	4c1b      	ldr	r4, [pc, #108]	; (860 <_gpio_set_pin_function+0xa8>)
     7f2:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     7f4:	e02e      	b.n	854 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     7f6:	230e      	movs	r3, #14
     7f8:	18fb      	adds	r3, r7, r3
     7fa:	781a      	ldrb	r2, [r3, #0]
     7fc:	230f      	movs	r3, #15
     7fe:	18fb      	adds	r3, r7, r3
     800:	7819      	ldrb	r1, [r3, #0]
     802:	4816      	ldr	r0, [pc, #88]	; (85c <_gpio_set_pin_function+0xa4>)
     804:	2301      	movs	r3, #1
     806:	4c16      	ldr	r4, [pc, #88]	; (860 <_gpio_set_pin_function+0xa8>)
     808:	47a0      	blx	r4
		if (pin & 1) {
     80a:	230e      	movs	r3, #14
     80c:	18fb      	adds	r3, r7, r3
     80e:	781b      	ldrb	r3, [r3, #0]
     810:	2201      	movs	r2, #1
     812:	4013      	ands	r3, r2
     814:	d00f      	beq.n	836 <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     816:	230e      	movs	r3, #14
     818:	18fb      	adds	r3, r7, r3
     81a:	781b      	ldrb	r3, [r3, #0]
     81c:	085b      	lsrs	r3, r3, #1
     81e:	b2da      	uxtb	r2, r3
     820:	683b      	ldr	r3, [r7, #0]
     822:	b2d8      	uxtb	r0, r3
     824:	230f      	movs	r3, #15
     826:	18fb      	adds	r3, r7, r3
     828:	7819      	ldrb	r1, [r3, #0]
     82a:	4c0c      	ldr	r4, [pc, #48]	; (85c <_gpio_set_pin_function+0xa4>)
     82c:	0003      	movs	r3, r0
     82e:	0020      	movs	r0, r4
     830:	4c0c      	ldr	r4, [pc, #48]	; (864 <_gpio_set_pin_function+0xac>)
     832:	47a0      	blx	r4
}
     834:	e00e      	b.n	854 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     836:	230e      	movs	r3, #14
     838:	18fb      	adds	r3, r7, r3
     83a:	781b      	ldrb	r3, [r3, #0]
     83c:	085b      	lsrs	r3, r3, #1
     83e:	b2da      	uxtb	r2, r3
     840:	683b      	ldr	r3, [r7, #0]
     842:	b2d8      	uxtb	r0, r3
     844:	230f      	movs	r3, #15
     846:	18fb      	adds	r3, r7, r3
     848:	7819      	ldrb	r1, [r3, #0]
     84a:	4c04      	ldr	r4, [pc, #16]	; (85c <_gpio_set_pin_function+0xa4>)
     84c:	0003      	movs	r3, r0
     84e:	0020      	movs	r0, r4
     850:	4c05      	ldr	r4, [pc, #20]	; (868 <_gpio_set_pin_function+0xb0>)
     852:	47a0      	blx	r4
}
     854:	46c0      	nop			; (mov r8, r8)
     856:	46bd      	mov	sp, r7
     858:	b005      	add	sp, #20
     85a:	bd90      	pop	{r4, r7, pc}
     85c:	41004400 	.word	0x41004400
     860:	00000403 	.word	0x00000403
     864:	0000037d 	.word	0x0000037d
     868:	000002f5 	.word	0x000002f5

0000086c <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     86c:	b580      	push	{r7, lr}
     86e:	b082      	sub	sp, #8
     870:	af00      	add	r7, sp, #0
     872:	0002      	movs	r2, r0
     874:	1dfb      	adds	r3, r7, #7
     876:	701a      	strb	r2, [r3, #0]
     878:	1dbb      	adds	r3, r7, #6
     87a:	1c0a      	adds	r2, r1, #0
     87c:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     87e:	1dfb      	adds	r3, r7, #7
     880:	781b      	ldrb	r3, [r3, #0]
     882:	095b      	lsrs	r3, r3, #5
     884:	b2d8      	uxtb	r0, r3
     886:	1dfb      	adds	r3, r7, #7
     888:	781b      	ldrb	r3, [r3, #0]
     88a:	221f      	movs	r2, #31
     88c:	4013      	ands	r3, r2
     88e:	b2d9      	uxtb	r1, r3
     890:	1dbb      	adds	r3, r7, #6
     892:	781b      	ldrb	r3, [r3, #0]
     894:	001a      	movs	r2, r3
     896:	4b03      	ldr	r3, [pc, #12]	; (8a4 <gpio_set_pin_pull_mode+0x38>)
     898:	4798      	blx	r3
}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	46bd      	mov	sp, r7
     89e:	b002      	add	sp, #8
     8a0:	bd80      	pop	{r7, pc}
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	000006c5 	.word	0x000006c5

000008a8 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     8a8:	b580      	push	{r7, lr}
     8aa:	b082      	sub	sp, #8
     8ac:	af00      	add	r7, sp, #0
     8ae:	6078      	str	r0, [r7, #4]
     8b0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     8b2:	683a      	ldr	r2, [r7, #0]
     8b4:	687b      	ldr	r3, [r7, #4]
     8b6:	0011      	movs	r1, r2
     8b8:	0018      	movs	r0, r3
     8ba:	4b03      	ldr	r3, [pc, #12]	; (8c8 <gpio_set_pin_function+0x20>)
     8bc:	4798      	blx	r3
}
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	46bd      	mov	sp, r7
     8c2:	b002      	add	sp, #8
     8c4:	bd80      	pop	{r7, pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	000007b9 	.word	0x000007b9

000008cc <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     8cc:	b580      	push	{r7, lr}
     8ce:	b082      	sub	sp, #8
     8d0:	af00      	add	r7, sp, #0
     8d2:	0002      	movs	r2, r0
     8d4:	1dfb      	adds	r3, r7, #7
     8d6:	701a      	strb	r2, [r3, #0]
     8d8:	1dbb      	adds	r3, r7, #6
     8da:	1c0a      	adds	r2, r1, #0
     8dc:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     8de:	1dfb      	adds	r3, r7, #7
     8e0:	781b      	ldrb	r3, [r3, #0]
     8e2:	095b      	lsrs	r3, r3, #5
     8e4:	b2d8      	uxtb	r0, r3
     8e6:	1dfb      	adds	r3, r7, #7
     8e8:	781b      	ldrb	r3, [r3, #0]
     8ea:	221f      	movs	r2, #31
     8ec:	4013      	ands	r3, r2
     8ee:	2201      	movs	r2, #1
     8f0:	409a      	lsls	r2, r3
     8f2:	0011      	movs	r1, r2
     8f4:	1dbb      	adds	r3, r7, #6
     8f6:	781b      	ldrb	r3, [r3, #0]
     8f8:	001a      	movs	r2, r3
     8fa:	4b03      	ldr	r3, [pc, #12]	; (908 <gpio_set_pin_direction+0x3c>)
     8fc:	4798      	blx	r3
}
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	46bd      	mov	sp, r7
     902:	b002      	add	sp, #8
     904:	bd80      	pop	{r7, pc}
     906:	46c0      	nop			; (mov r8, r8)
     908:	0000055d 	.word	0x0000055d

0000090c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     90c:	b580      	push	{r7, lr}
     90e:	b082      	sub	sp, #8
     910:	af00      	add	r7, sp, #0
     912:	0002      	movs	r2, r0
     914:	1dfb      	adds	r3, r7, #7
     916:	701a      	strb	r2, [r3, #0]
     918:	1dbb      	adds	r3, r7, #6
     91a:	1c0a      	adds	r2, r1, #0
     91c:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     91e:	1dfb      	adds	r3, r7, #7
     920:	781b      	ldrb	r3, [r3, #0]
     922:	095b      	lsrs	r3, r3, #5
     924:	b2d8      	uxtb	r0, r3
     926:	1dfb      	adds	r3, r7, #7
     928:	781b      	ldrb	r3, [r3, #0]
     92a:	221f      	movs	r2, #31
     92c:	4013      	ands	r3, r2
     92e:	2201      	movs	r2, #1
     930:	409a      	lsls	r2, r3
     932:	0011      	movs	r1, r2
     934:	1dbb      	adds	r3, r7, #6
     936:	781b      	ldrb	r3, [r3, #0]
     938:	001a      	movs	r2, r3
     93a:	4b03      	ldr	r3, [pc, #12]	; (948 <gpio_set_pin_level+0x3c>)
     93c:	4798      	blx	r3
}
     93e:	46c0      	nop			; (mov r8, r8)
     940:	46bd      	mov	sp, r7
     942:	b002      	add	sp, #8
     944:	bd80      	pop	{r7, pc}
     946:	46c0      	nop			; (mov r8, r8)
     948:	00000675 	.word	0x00000675

0000094c <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     94c:	b580      	push	{r7, lr}
     94e:	af00      	add	r7, sp, #0
	_init_chip();
     950:	4b02      	ldr	r3, [pc, #8]	; (95c <init_mcu+0x10>)
     952:	4798      	blx	r3
}
     954:	46c0      	nop			; (mov r8, r8)
     956:	46bd      	mov	sp, r7
     958:	bd80      	pop	{r7, pc}
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	00001c6d 	.word	0x00001c6d

00000960 <_gclk_enable_channel>:
 *
 * \param[in] channel The channel to enable clock for
 * \param[in] source The clock source for the given channel
 */
static inline void _gclk_enable_channel(const uint8_t channel, const uint8_t source)
{
     960:	b580      	push	{r7, lr}
     962:	b082      	sub	sp, #8
     964:	af00      	add	r7, sp, #0
     966:	0002      	movs	r2, r0
     968:	1dfb      	adds	r3, r7, #7
     96a:	701a      	strb	r2, [r3, #0]
     96c:	1dbb      	adds	r3, r7, #6
     96e:	1c0a      	adds	r2, r1, #0
     970:	701a      	strb	r2, [r3, #0]

	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(channel) | GCLK_CLKCTRL_GEN(source) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
     972:	1dfb      	adds	r3, r7, #7
     974:	781b      	ldrb	r3, [r3, #0]
     976:	b29b      	uxth	r3, r3
     978:	223f      	movs	r2, #63	; 0x3f
     97a:	4013      	ands	r3, r2
     97c:	b29a      	uxth	r2, r3
     97e:	1dbb      	adds	r3, r7, #6
     980:	781b      	ldrb	r3, [r3, #0]
     982:	b29b      	uxth	r3, r3
     984:	021b      	lsls	r3, r3, #8
     986:	b299      	uxth	r1, r3
     988:	23f0      	movs	r3, #240	; 0xf0
     98a:	011b      	lsls	r3, r3, #4
     98c:	400b      	ands	r3, r1
     98e:	b29b      	uxth	r3, r3
     990:	4313      	orrs	r3, r2
     992:	b29b      	uxth	r3, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
     994:	2280      	movs	r2, #128	; 0x80
     996:	01d2      	lsls	r2, r2, #7
     998:	4313      	orrs	r3, r2
     99a:	b29b      	uxth	r3, r3
     99c:	4a04      	ldr	r2, [pc, #16]	; (9b0 <_gclk_enable_channel+0x50>)
     99e:	0019      	movs	r1, r3
     9a0:	0010      	movs	r0, r2
     9a2:	4b04      	ldr	r3, [pc, #16]	; (9b4 <_gclk_enable_channel+0x54>)
     9a4:	4798      	blx	r3
}
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	46bd      	mov	sp, r7
     9aa:	b002      	add	sp, #8
     9ac:	bd80      	pop	{r7, pc}
     9ae:	46c0      	nop			; (mov r8, r8)
     9b0:	40000c00 	.word	0x40000c00
     9b4:	00000227 	.word	0x00000227

000009b8 <_pm_get_ahb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_ahb_index(const void *const module)
{
     9b8:	b580      	push	{r7, lr}
     9ba:	b082      	sub	sp, #8
     9bc:	af00      	add	r7, sp, #0
     9be:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PM_BUS_APBA) {
     9c0:	687b      	ldr	r3, [r7, #4]
     9c2:	2b01      	cmp	r3, #1
     9c4:	d101      	bne.n	9ca <_pm_get_ahb_index+0x12>
		return 0;
     9c6:	2300      	movs	r3, #0
     9c8:	e023      	b.n	a12 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBB) {
     9ca:	687b      	ldr	r3, [r7, #4]
     9cc:	2b02      	cmp	r3, #2
     9ce:	d101      	bne.n	9d4 <_pm_get_ahb_index+0x1c>
		return 1;
     9d0:	2301      	movs	r3, #1
     9d2:	e01e      	b.n	a12 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBC) {
     9d4:	687b      	ldr	r3, [r7, #4]
     9d6:	2b03      	cmp	r3, #3
     9d8:	d101      	bne.n	9de <_pm_get_ahb_index+0x26>
		return 2;
     9da:	2302      	movs	r3, #2
     9dc:	e019      	b.n	a12 <_pm_get_ahb_index+0x5a>
	}
	if ((uint32_t)module == (uint32_t)DSU) {
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4a0e      	ldr	r2, [pc, #56]	; (a1c <_pm_get_ahb_index+0x64>)
     9e2:	4293      	cmp	r3, r2
     9e4:	d101      	bne.n	9ea <_pm_get_ahb_index+0x32>
		return 3;
     9e6:	2303      	movs	r3, #3
     9e8:	e013      	b.n	a12 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	4a0c      	ldr	r2, [pc, #48]	; (a20 <_pm_get_ahb_index+0x68>)
     9ee:	4293      	cmp	r3, r2
     9f0:	d101      	bne.n	9f6 <_pm_get_ahb_index+0x3e>
		return 4;
     9f2:	2304      	movs	r3, #4
     9f4:	e00d      	b.n	a12 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)DMAC) {
     9f6:	687b      	ldr	r3, [r7, #4]
     9f8:	4a0a      	ldr	r2, [pc, #40]	; (a24 <_pm_get_ahb_index+0x6c>)
     9fa:	4293      	cmp	r3, r2
     9fc:	d101      	bne.n	a02 <_pm_get_ahb_index+0x4a>
		return 5;
     9fe:	2305      	movs	r3, #5
     a00:	e007      	b.n	a12 <_pm_get_ahb_index+0x5a>
	}
#ifdef USB
	else if ((uint32_t)module == (uint32_t)USB) {
     a02:	687b      	ldr	r3, [r7, #4]
     a04:	4a08      	ldr	r2, [pc, #32]	; (a28 <_pm_get_ahb_index+0x70>)
     a06:	4293      	cmp	r3, r2
     a08:	d101      	bne.n	a0e <_pm_get_ahb_index+0x56>
		return 6;
     a0a:	2306      	movs	r3, #6
     a0c:	e001      	b.n	a12 <_pm_get_ahb_index+0x5a>
	}
#endif

	return ERR_INVALID_ARG;
     a0e:	230d      	movs	r3, #13
     a10:	425b      	negs	r3, r3
}
     a12:	0018      	movs	r0, r3
     a14:	46bd      	mov	sp, r7
     a16:	b002      	add	sp, #8
     a18:	bd80      	pop	{r7, pc}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	41002000 	.word	0x41002000
     a20:	41004000 	.word	0x41004000
     a24:	41004800 	.word	0x41004800
     a28:	41005000 	.word	0x41005000

00000a2c <_pm_get_apbb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_apbb_index(const void *const module)
{
     a2c:	b580      	push	{r7, lr}
     a2e:	b082      	sub	sp, #8
     a30:	af00      	add	r7, sp, #0
     a32:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PAC1) {
     a34:	687a      	ldr	r2, [r7, #4]
     a36:	2382      	movs	r3, #130	; 0x82
     a38:	05db      	lsls	r3, r3, #23
     a3a:	429a      	cmp	r2, r3
     a3c:	d101      	bne.n	a42 <_pm_get_apbb_index+0x16>
		return 0;
     a3e:	2300      	movs	r3, #0
     a40:	e01f      	b.n	a82 <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)DSU) {
     a42:	687b      	ldr	r3, [r7, #4]
     a44:	4a11      	ldr	r2, [pc, #68]	; (a8c <_pm_get_apbb_index+0x60>)
     a46:	4293      	cmp	r3, r2
     a48:	d101      	bne.n	a4e <_pm_get_apbb_index+0x22>
		return 1;
     a4a:	2301      	movs	r3, #1
     a4c:	e019      	b.n	a82 <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
     a4e:	687b      	ldr	r3, [r7, #4]
     a50:	4a0f      	ldr	r2, [pc, #60]	; (a90 <_pm_get_apbb_index+0x64>)
     a52:	4293      	cmp	r3, r2
     a54:	d101      	bne.n	a5a <_pm_get_apbb_index+0x2e>
		return 2;
     a56:	2302      	movs	r3, #2
     a58:	e013      	b.n	a82 <_pm_get_apbb_index+0x56>
	}
	if ((uint32_t)module == (uint32_t)PORT) {
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	4a0d      	ldr	r2, [pc, #52]	; (a94 <_pm_get_apbb_index+0x68>)
     a5e:	4293      	cmp	r3, r2
     a60:	d101      	bne.n	a66 <_pm_get_apbb_index+0x3a>
		return 3;
     a62:	2303      	movs	r3, #3
     a64:	e00d      	b.n	a82 <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)DMAC) {
     a66:	687b      	ldr	r3, [r7, #4]
     a68:	4a0b      	ldr	r2, [pc, #44]	; (a98 <_pm_get_apbb_index+0x6c>)
     a6a:	4293      	cmp	r3, r2
     a6c:	d101      	bne.n	a72 <_pm_get_apbb_index+0x46>
		return 4;
     a6e:	2304      	movs	r3, #4
     a70:	e007      	b.n	a82 <_pm_get_apbb_index+0x56>
	}
#ifdef USB
	else if ((uint32_t)module == (uint32_t)USB) {
     a72:	687b      	ldr	r3, [r7, #4]
     a74:	4a09      	ldr	r2, [pc, #36]	; (a9c <_pm_get_apbb_index+0x70>)
     a76:	4293      	cmp	r3, r2
     a78:	d101      	bne.n	a7e <_pm_get_apbb_index+0x52>
		return 5;
     a7a:	2305      	movs	r3, #5
     a7c:	e001      	b.n	a82 <_pm_get_apbb_index+0x56>
	}
#endif

	return ERR_INVALID_ARG;
     a7e:	230d      	movs	r3, #13
     a80:	425b      	negs	r3, r3
}
     a82:	0018      	movs	r0, r3
     a84:	46bd      	mov	sp, r7
     a86:	b002      	add	sp, #8
     a88:	bd80      	pop	{r7, pc}
     a8a:	46c0      	nop			; (mov r8, r8)
     a8c:	41002000 	.word	0x41002000
     a90:	41004000 	.word	0x41004000
     a94:	41004400 	.word	0x41004400
     a98:	41004800 	.word	0x41004800
     a9c:	41005000 	.word	0x41005000

00000aa0 <_pm_enable_bus_clock>:
 *
 * \param[in] bus A bus to enable clock on
 * \param[in] module A hardware module to enable clock for
 */
static inline void _pm_enable_bus_clock(const enum _pm_bus bus, const void *const module)
{
     aa0:	b580      	push	{r7, lr}
     aa2:	b084      	sub	sp, #16
     aa4:	af00      	add	r7, sp, #0
     aa6:	0002      	movs	r2, r0
     aa8:	6039      	str	r1, [r7, #0]
     aaa:	1dfb      	adds	r3, r7, #7
     aac:	701a      	strb	r2, [r3, #0]
	uint32_t peripheral = ((uint32_t)module & 0x0000ff00) >> 10;
     aae:	683b      	ldr	r3, [r7, #0]
     ab0:	0a9b      	lsrs	r3, r3, #10
     ab2:	223f      	movs	r2, #63	; 0x3f
     ab4:	4013      	ands	r3, r2
     ab6:	60fb      	str	r3, [r7, #12]

	switch (bus) {
     ab8:	1dfb      	adds	r3, r7, #7
     aba:	781b      	ldrb	r3, [r3, #0]
     abc:	2b01      	cmp	r3, #1
     abe:	d01e      	beq.n	afe <_pm_enable_bus_clock+0x5e>
     ac0:	dc02      	bgt.n	ac8 <_pm_enable_bus_clock+0x28>
     ac2:	2b00      	cmp	r3, #0
     ac4:	d005      	beq.n	ad2 <_pm_enable_bus_clock+0x32>
     ac6:	e044      	b.n	b52 <_pm_enable_bus_clock+0xb2>
     ac8:	2b02      	cmp	r3, #2
     aca:	d022      	beq.n	b12 <_pm_enable_bus_clock+0x72>
     acc:	2b03      	cmp	r3, #3
     ace:	d036      	beq.n	b3e <_pm_enable_bus_clock+0x9e>
     ad0:	e03f      	b.n	b52 <_pm_enable_bus_clock+0xb2>
	case PM_BUS_AHB:
		if (_pm_get_ahb_index(module) >= 0) {
     ad2:	683b      	ldr	r3, [r7, #0]
     ad4:	0018      	movs	r0, r3
     ad6:	4b26      	ldr	r3, [pc, #152]	; (b70 <_pm_enable_bus_clock+0xd0>)
     ad8:	4798      	blx	r3
     ada:	1e03      	subs	r3, r0, #0
     adc:	db40      	blt.n	b60 <_pm_enable_bus_clock+0xc0>
			peripheral = (uint32_t)_pm_get_ahb_index(module);
     ade:	683b      	ldr	r3, [r7, #0]
     ae0:	0018      	movs	r0, r3
     ae2:	4b23      	ldr	r3, [pc, #140]	; (b70 <_pm_enable_bus_clock+0xd0>)
     ae4:	4798      	blx	r3
     ae6:	0003      	movs	r3, r0
     ae8:	60fb      	str	r3, [r7, #12]
			PM->AHBMASK.reg |= 1 << peripheral;
     aea:	4b22      	ldr	r3, [pc, #136]	; (b74 <_pm_enable_bus_clock+0xd4>)
     aec:	4a21      	ldr	r2, [pc, #132]	; (b74 <_pm_enable_bus_clock+0xd4>)
     aee:	6952      	ldr	r2, [r2, #20]
     af0:	2001      	movs	r0, #1
     af2:	68f9      	ldr	r1, [r7, #12]
     af4:	4088      	lsls	r0, r1
     af6:	0001      	movs	r1, r0
     af8:	430a      	orrs	r2, r1
     afa:	615a      	str	r2, [r3, #20]
		}
		break;
     afc:	e030      	b.n	b60 <_pm_enable_bus_clock+0xc0>
	case PM_BUS_APBA:
		PM->APBAMASK.reg |= 1 << peripheral;
     afe:	4b1d      	ldr	r3, [pc, #116]	; (b74 <_pm_enable_bus_clock+0xd4>)
     b00:	4a1c      	ldr	r2, [pc, #112]	; (b74 <_pm_enable_bus_clock+0xd4>)
     b02:	6992      	ldr	r2, [r2, #24]
     b04:	2001      	movs	r0, #1
     b06:	68f9      	ldr	r1, [r7, #12]
     b08:	4088      	lsls	r0, r1
     b0a:	0001      	movs	r1, r0
     b0c:	430a      	orrs	r2, r1
     b0e:	619a      	str	r2, [r3, #24]
		break;
     b10:	e029      	b.n	b66 <_pm_enable_bus_clock+0xc6>
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
     b12:	683b      	ldr	r3, [r7, #0]
     b14:	0018      	movs	r0, r3
     b16:	4b18      	ldr	r3, [pc, #96]	; (b78 <_pm_enable_bus_clock+0xd8>)
     b18:	4798      	blx	r3
     b1a:	1e03      	subs	r3, r0, #0
     b1c:	db22      	blt.n	b64 <_pm_enable_bus_clock+0xc4>
			peripheral = (uint32_t)_pm_get_apbb_index(module);
     b1e:	683b      	ldr	r3, [r7, #0]
     b20:	0018      	movs	r0, r3
     b22:	4b15      	ldr	r3, [pc, #84]	; (b78 <_pm_enable_bus_clock+0xd8>)
     b24:	4798      	blx	r3
     b26:	0003      	movs	r3, r0
     b28:	60fb      	str	r3, [r7, #12]
			PM->APBBMASK.reg |= 1 << peripheral;
     b2a:	4b12      	ldr	r3, [pc, #72]	; (b74 <_pm_enable_bus_clock+0xd4>)
     b2c:	4a11      	ldr	r2, [pc, #68]	; (b74 <_pm_enable_bus_clock+0xd4>)
     b2e:	69d2      	ldr	r2, [r2, #28]
     b30:	2001      	movs	r0, #1
     b32:	68f9      	ldr	r1, [r7, #12]
     b34:	4088      	lsls	r0, r1
     b36:	0001      	movs	r1, r0
     b38:	430a      	orrs	r2, r1
     b3a:	61da      	str	r2, [r3, #28]
		}
		break;
     b3c:	e012      	b.n	b64 <_pm_enable_bus_clock+0xc4>
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     b3e:	4b0d      	ldr	r3, [pc, #52]	; (b74 <_pm_enable_bus_clock+0xd4>)
     b40:	4a0c      	ldr	r2, [pc, #48]	; (b74 <_pm_enable_bus_clock+0xd4>)
     b42:	6a12      	ldr	r2, [r2, #32]
     b44:	2001      	movs	r0, #1
     b46:	68f9      	ldr	r1, [r7, #12]
     b48:	4088      	lsls	r0, r1
     b4a:	0001      	movs	r1, r0
     b4c:	430a      	orrs	r2, r1
     b4e:	621a      	str	r2, [r3, #32]
		break;
     b50:	e009      	b.n	b66 <_pm_enable_bus_clock+0xc6>
	default:
		ASSERT(false);
     b52:	4b0a      	ldr	r3, [pc, #40]	; (b7c <_pm_enable_bus_clock+0xdc>)
     b54:	229b      	movs	r2, #155	; 0x9b
     b56:	0019      	movs	r1, r3
     b58:	2000      	movs	r0, #0
     b5a:	4b09      	ldr	r3, [pc, #36]	; (b80 <_pm_enable_bus_clock+0xe0>)
     b5c:	4798      	blx	r3
		break;
     b5e:	e002      	b.n	b66 <_pm_enable_bus_clock+0xc6>
		break;
     b60:	46c0      	nop			; (mov r8, r8)
     b62:	e000      	b.n	b66 <_pm_enable_bus_clock+0xc6>
		break;
     b64:	46c0      	nop			; (mov r8, r8)
	}
}
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	46bd      	mov	sp, r7
     b6a:	b004      	add	sp, #16
     b6c:	bd80      	pop	{r7, pc}
     b6e:	46c0      	nop			; (mov r8, r8)
     b70:	000009b9 	.word	0x000009b9
     b74:	40000400 	.word	0x40000400
     b78:	00000a2d 	.word	0x00000a2d
     b7c:	00005174 	.word	0x00005174
     b80:	00001a3f 	.word	0x00001a3f

00000b84 <EXTERNAL_IRQ_0_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct calendar_descriptor CALENDAR_0;

void EXTERNAL_IRQ_0_init(void)
{
     b84:	b580      	push	{r7, lr}
     b86:	af00      	add	r7, sp, #0
	_gclk_enable_channel(EIC_GCLK_ID, CONF_GCLK_EIC_SRC);
     b88:	2103      	movs	r1, #3
     b8a:	2005      	movs	r0, #5
     b8c:	4b0a      	ldr	r3, [pc, #40]	; (bb8 <EXTERNAL_IRQ_0_init+0x34>)
     b8e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(USER_BUTTON_AL, GPIO_DIRECTION_IN);
     b90:	2101      	movs	r1, #1
     b92:	200f      	movs	r0, #15
     b94:	4b09      	ldr	r3, [pc, #36]	; (bbc <EXTERNAL_IRQ_0_init+0x38>)
     b96:	4798      	blx	r3

	gpio_set_pin_pull_mode(USER_BUTTON_AL,
     b98:	2101      	movs	r1, #1
     b9a:	200f      	movs	r0, #15
     b9c:	4b08      	ldr	r3, [pc, #32]	; (bc0 <EXTERNAL_IRQ_0_init+0x3c>)
     b9e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(USER_BUTTON_AL, PINMUX_PA15A_EIC_EXTINT15);
     ba0:	23f0      	movs	r3, #240	; 0xf0
     ba2:	031b      	lsls	r3, r3, #12
     ba4:	0019      	movs	r1, r3
     ba6:	200f      	movs	r0, #15
     ba8:	4b06      	ldr	r3, [pc, #24]	; (bc4 <EXTERNAL_IRQ_0_init+0x40>)
     baa:	4798      	blx	r3

	ext_irq_init();
     bac:	4b06      	ldr	r3, [pc, #24]	; (bc8 <EXTERNAL_IRQ_0_init+0x44>)
     bae:	4798      	blx	r3
}
     bb0:	46c0      	nop			; (mov r8, r8)
     bb2:	46bd      	mov	sp, r7
     bb4:	bd80      	pop	{r7, pc}
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	00000961 	.word	0x00000961
     bbc:	000008cd 	.word	0x000008cd
     bc0:	0000086d 	.word	0x0000086d
     bc4:	000008a9 	.word	0x000008a9
     bc8:	0000136d 	.word	0x0000136d

00000bcc <USART_0_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void USART_0_CLOCK_init()
{
     bcc:	b580      	push	{r7, lr}
     bce:	af00      	add	r7, sp, #0

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
     bd0:	4b05      	ldr	r3, [pc, #20]	; (be8 <USART_0_CLOCK_init+0x1c>)
     bd2:	0019      	movs	r1, r3
     bd4:	2003      	movs	r0, #3
     bd6:	4b05      	ldr	r3, [pc, #20]	; (bec <USART_0_CLOCK_init+0x20>)
     bd8:	4798      	blx	r3
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
     bda:	2100      	movs	r1, #0
     bdc:	2017      	movs	r0, #23
     bde:	4b04      	ldr	r3, [pc, #16]	; (bf0 <USART_0_CLOCK_init+0x24>)
     be0:	4798      	blx	r3
}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	46bd      	mov	sp, r7
     be6:	bd80      	pop	{r7, pc}
     be8:	42001400 	.word	0x42001400
     bec:	00000aa1 	.word	0x00000aa1
     bf0:	00000961 	.word	0x00000961

00000bf4 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     bf4:	b580      	push	{r7, lr}
     bf6:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);
     bf8:	4b06      	ldr	r3, [pc, #24]	; (c14 <USART_0_PORT_init+0x20>)
     bfa:	0019      	movs	r1, r3
     bfc:	2016      	movs	r0, #22
     bfe:	4b06      	ldr	r3, [pc, #24]	; (c18 <USART_0_PORT_init+0x24>)
     c00:	4798      	blx	r3

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
     c02:	4b06      	ldr	r3, [pc, #24]	; (c1c <USART_0_PORT_init+0x28>)
     c04:	0019      	movs	r1, r3
     c06:	2017      	movs	r0, #23
     c08:	4b03      	ldr	r3, [pc, #12]	; (c18 <USART_0_PORT_init+0x24>)
     c0a:	4798      	blx	r3
}
     c0c:	46c0      	nop			; (mov r8, r8)
     c0e:	46bd      	mov	sp, r7
     c10:	bd80      	pop	{r7, pc}
     c12:	46c0      	nop			; (mov r8, r8)
     c14:	00160002 	.word	0x00160002
     c18:	000008a9 	.word	0x000008a9
     c1c:	00170002 	.word	0x00170002

00000c20 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     c20:	b590      	push	{r4, r7, lr}
     c22:	b083      	sub	sp, #12
     c24:	af02      	add	r7, sp, #8
	USART_0_CLOCK_init();
     c26:	4b08      	ldr	r3, [pc, #32]	; (c48 <USART_0_init+0x28>)
     c28:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     c2a:	4a08      	ldr	r2, [pc, #32]	; (c4c <USART_0_init+0x2c>)
     c2c:	4908      	ldr	r1, [pc, #32]	; (c50 <USART_0_init+0x30>)
     c2e:	4809      	ldr	r0, [pc, #36]	; (c54 <USART_0_init+0x34>)
     c30:	2300      	movs	r3, #0
     c32:	9300      	str	r3, [sp, #0]
     c34:	2310      	movs	r3, #16
     c36:	4c08      	ldr	r4, [pc, #32]	; (c58 <USART_0_init+0x38>)
     c38:	47a0      	blx	r4
	USART_0_PORT_init();
     c3a:	4b08      	ldr	r3, [pc, #32]	; (c5c <USART_0_init+0x3c>)
     c3c:	4798      	blx	r3
}
     c3e:	46c0      	nop			; (mov r8, r8)
     c40:	46bd      	mov	sp, r7
     c42:	b001      	add	sp, #4
     c44:	bd90      	pop	{r4, r7, pc}
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	00000bcd 	.word	0x00000bcd
     c4c:	20000094 	.word	0x20000094
     c50:	42001400 	.word	0x42001400
     c54:	200001a8 	.word	0x200001a8
     c58:	000016b9 	.word	0x000016b9
     c5c:	00000bf5 	.word	0x00000bf5

00000c60 <CALENDAR_0_CLOCK_init>:

void CALENDAR_0_CLOCK_init(void)
{
     c60:	b580      	push	{r7, lr}
     c62:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
     c64:	4b05      	ldr	r3, [pc, #20]	; (c7c <CALENDAR_0_CLOCK_init+0x1c>)
     c66:	0019      	movs	r1, r3
     c68:	2001      	movs	r0, #1
     c6a:	4b05      	ldr	r3, [pc, #20]	; (c80 <CALENDAR_0_CLOCK_init+0x20>)
     c6c:	4798      	blx	r3
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
     c6e:	2103      	movs	r1, #3
     c70:	2004      	movs	r0, #4
     c72:	4b04      	ldr	r3, [pc, #16]	; (c84 <CALENDAR_0_CLOCK_init+0x24>)
     c74:	4798      	blx	r3
}
     c76:	46c0      	nop			; (mov r8, r8)
     c78:	46bd      	mov	sp, r7
     c7a:	bd80      	pop	{r7, pc}
     c7c:	40001400 	.word	0x40001400
     c80:	00000aa1 	.word	0x00000aa1
     c84:	00000961 	.word	0x00000961

00000c88 <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     c88:	b580      	push	{r7, lr}
     c8a:	af00      	add	r7, sp, #0
	CALENDAR_0_CLOCK_init();
     c8c:	4b05      	ldr	r3, [pc, #20]	; (ca4 <CALENDAR_0_init+0x1c>)
     c8e:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     c90:	4a05      	ldr	r2, [pc, #20]	; (ca8 <CALENDAR_0_init+0x20>)
     c92:	4b06      	ldr	r3, [pc, #24]	; (cac <CALENDAR_0_init+0x24>)
     c94:	0011      	movs	r1, r2
     c96:	0018      	movs	r0, r3
     c98:	4b05      	ldr	r3, [pc, #20]	; (cb0 <CALENDAR_0_init+0x28>)
     c9a:	4798      	blx	r3
}
     c9c:	46c0      	nop			; (mov r8, r8)
     c9e:	46bd      	mov	sp, r7
     ca0:	bd80      	pop	{r7, pc}
     ca2:	46c0      	nop			; (mov r8, r8)
     ca4:	00000c61 	.word	0x00000c61
     ca8:	40001400 	.word	0x40001400
     cac:	2000018c 	.word	0x2000018c
     cb0:	000012c1 	.word	0x000012c1

00000cb4 <system_init>:

void system_init(void)
{
     cb4:	b580      	push	{r7, lr}
     cb6:	af00      	add	r7, sp, #0
	init_mcu();
     cb8:	4b0c      	ldr	r3, [pc, #48]	; (cec <system_init+0x38>)
     cba:	4798      	blx	r3

	// GPIO on PB30

	gpio_set_pin_level(USER_LED_AL,
     cbc:	2101      	movs	r1, #1
     cbe:	203e      	movs	r0, #62	; 0x3e
     cc0:	4b0b      	ldr	r3, [pc, #44]	; (cf0 <system_init+0x3c>)
     cc2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(USER_LED_AL, GPIO_DIRECTION_OUT);
     cc4:	2102      	movs	r1, #2
     cc6:	203e      	movs	r0, #62	; 0x3e
     cc8:	4b0a      	ldr	r3, [pc, #40]	; (cf4 <system_init+0x40>)
     cca:	4798      	blx	r3

	gpio_set_pin_function(USER_LED_AL, GPIO_PIN_FUNCTION_OFF);
     ccc:	2301      	movs	r3, #1
     cce:	425b      	negs	r3, r3
     cd0:	0019      	movs	r1, r3
     cd2:	203e      	movs	r0, #62	; 0x3e
     cd4:	4b08      	ldr	r3, [pc, #32]	; (cf8 <system_init+0x44>)
     cd6:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     cd8:	4b08      	ldr	r3, [pc, #32]	; (cfc <system_init+0x48>)
     cda:	4798      	blx	r3

	USART_0_init();
     cdc:	4b08      	ldr	r3, [pc, #32]	; (d00 <system_init+0x4c>)
     cde:	4798      	blx	r3

	CALENDAR_0_init();
     ce0:	4b08      	ldr	r3, [pc, #32]	; (d04 <system_init+0x50>)
     ce2:	4798      	blx	r3
}
     ce4:	46c0      	nop			; (mov r8, r8)
     ce6:	46bd      	mov	sp, r7
     ce8:	bd80      	pop	{r7, pc}
     cea:	46c0      	nop			; (mov r8, r8)
     cec:	0000094d 	.word	0x0000094d
     cf0:	0000090d 	.word	0x0000090d
     cf4:	000008cd 	.word	0x000008cd
     cf8:	000008a9 	.word	0x000008a9
     cfc:	00000b85 	.word	0x00000b85
     d00:	00000c21 	.word	0x00000c21
     d04:	00000c89 	.word	0x00000c89

00000d08 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
     d08:	b580      	push	{r7, lr}
     d0a:	b084      	sub	sp, #16
     d0c:	af00      	add	r7, sp, #0
     d0e:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d10:	f3ef 8310 	mrs	r3, PRIMASK
     d14:	60fb      	str	r3, [r7, #12]
  return(result);
     d16:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
     d18:	687b      	ldr	r3, [r7, #4]
     d1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     d1c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     d1e:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	46bd      	mov	sp, r7
     d26:	b004      	add	sp, #16
     d28:	bd80      	pop	{r7, pc}

00000d2a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
     d2a:	b580      	push	{r7, lr}
     d2c:	b084      	sub	sp, #16
     d2e:	af00      	add	r7, sp, #0
     d30:	6078      	str	r0, [r7, #4]
     d32:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
     d36:	687b      	ldr	r3, [r7, #4]
     d38:	681b      	ldr	r3, [r3, #0]
     d3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d3c:	68fb      	ldr	r3, [r7, #12]
     d3e:	f383 8810 	msr	PRIMASK, r3
}
     d42:	46c0      	nop			; (mov r8, r8)
     d44:	46bd      	mov	sp, r7
     d46:	b004      	add	sp, #16
     d48:	bd80      	pop	{r7, pc}

00000d4a <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
     d4a:	b580      	push	{r7, lr}
     d4c:	b082      	sub	sp, #8
     d4e:	af00      	add	r7, sp, #0
     d50:	0002      	movs	r2, r0
     d52:	1dbb      	adds	r3, r7, #6
     d54:	801a      	strh	r2, [r3, #0]
	if (year & 3) {
     d56:	1dbb      	adds	r3, r7, #6
     d58:	881b      	ldrh	r3, [r3, #0]
     d5a:	2203      	movs	r2, #3
     d5c:	4013      	ands	r3, r2
     d5e:	d001      	beq.n	d64 <leap_year+0x1a>
		return false;
     d60:	2300      	movs	r3, #0
     d62:	e000      	b.n	d66 <leap_year+0x1c>
	} else {
		return true;
     d64:	2301      	movs	r3, #1
	}
}
     d66:	0018      	movs	r0, r3
     d68:	46bd      	mov	sp, r7
     d6a:	b002      	add	sp, #8
     d6c:	bd80      	pop	{r7, pc}
	...

00000d70 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
     d70:	b580      	push	{r7, lr}
     d72:	b084      	sub	sp, #16
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	000a      	movs	r2, r1
     d7a:	1cfb      	adds	r3, r7, #3
     d7c:	701a      	strb	r2, [r3, #0]
	uint32_t sec_in_month = 0;
     d7e:	2300      	movs	r3, #0
     d80:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
     d82:	687b      	ldr	r3, [r7, #4]
     d84:	b29b      	uxth	r3, r3
     d86:	0018      	movs	r0, r3
     d88:	4b17      	ldr	r3, [pc, #92]	; (de8 <get_secs_in_month+0x78>)
     d8a:	4798      	blx	r3
     d8c:	1e03      	subs	r3, r0, #0
     d8e:	d011      	beq.n	db4 <get_secs_in_month+0x44>
		switch (month) {
     d90:	1cfb      	adds	r3, r7, #3
     d92:	781b      	ldrb	r3, [r3, #0]
     d94:	2b0c      	cmp	r3, #12
     d96:	d81f      	bhi.n	dd8 <get_secs_in_month+0x68>
     d98:	009a      	lsls	r2, r3, #2
     d9a:	4b14      	ldr	r3, [pc, #80]	; (dec <get_secs_in_month+0x7c>)
     d9c:	18d3      	adds	r3, r2, r3
     d9e:	681b      	ldr	r3, [r3, #0]
     da0:	469f      	mov	pc, r3
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
     da2:	4b13      	ldr	r3, [pc, #76]	; (df0 <get_secs_in_month+0x80>)
     da4:	60fb      	str	r3, [r7, #12]
			break;
     da6:	e01a      	b.n	dde <get_secs_in_month+0x6e>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
     da8:	4b12      	ldr	r3, [pc, #72]	; (df4 <get_secs_in_month+0x84>)
     daa:	60fb      	str	r3, [r7, #12]
			break;
     dac:	e017      	b.n	dde <get_secs_in_month+0x6e>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
     dae:	4b12      	ldr	r3, [pc, #72]	; (df8 <get_secs_in_month+0x88>)
     db0:	60fb      	str	r3, [r7, #12]
			break;
     db2:	e014      	b.n	dde <get_secs_in_month+0x6e>
		default:
			break;
		}
	} else {
		switch (month) {
     db4:	1cfb      	adds	r3, r7, #3
     db6:	781b      	ldrb	r3, [r3, #0]
     db8:	2b0c      	cmp	r3, #12
     dba:	d80f      	bhi.n	ddc <get_secs_in_month+0x6c>
     dbc:	009a      	lsls	r2, r3, #2
     dbe:	4b0f      	ldr	r3, [pc, #60]	; (dfc <get_secs_in_month+0x8c>)
     dc0:	18d3      	adds	r3, r2, r3
     dc2:	681b      	ldr	r3, [r3, #0]
     dc4:	469f      	mov	pc, r3
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
     dc6:	4b0a      	ldr	r3, [pc, #40]	; (df0 <get_secs_in_month+0x80>)
     dc8:	60fb      	str	r3, [r7, #12]
			break;
     dca:	e008      	b.n	dde <get_secs_in_month+0x6e>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
     dcc:	4b0c      	ldr	r3, [pc, #48]	; (e00 <get_secs_in_month+0x90>)
     dce:	60fb      	str	r3, [r7, #12]
			break;
     dd0:	e005      	b.n	dde <get_secs_in_month+0x6e>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
     dd2:	4b09      	ldr	r3, [pc, #36]	; (df8 <get_secs_in_month+0x88>)
     dd4:	60fb      	str	r3, [r7, #12]
			break;
     dd6:	e002      	b.n	dde <get_secs_in_month+0x6e>
			break;
     dd8:	46c0      	nop			; (mov r8, r8)
     dda:	e000      	b.n	dde <get_secs_in_month+0x6e>
		default:
			break;
     ddc:	46c0      	nop			; (mov r8, r8)
		}
	}

	return sec_in_month;
     dde:	68fb      	ldr	r3, [r7, #12]
}
     de0:	0018      	movs	r0, r3
     de2:	46bd      	mov	sp, r7
     de4:	b004      	add	sp, #16
     de6:	bd80      	pop	{r7, pc}
     de8:	00000d4b 	.word	0x00000d4b
     dec:	0000518c 	.word	0x0000518c
     df0:	0028de80 	.word	0x0028de80
     df4:	00263b80 	.word	0x00263b80
     df8:	00278d00 	.word	0x00278d00
     dfc:	000051c0 	.word	0x000051c0
     e00:	0024ea00 	.word	0x0024ea00

00000e04 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
     e04:	b580      	push	{r7, lr}
     e06:	b08a      	sub	sp, #40	; 0x28
     e08:	af00      	add	r7, sp, #0
     e0a:	60f8      	str	r0, [r7, #12]
     e0c:	60b9      	str	r1, [r7, #8]
     e0e:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
     e10:	68fb      	ldr	r3, [r7, #12]
     e12:	695b      	ldr	r3, [r3, #20]
     e14:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
     e16:	231f      	movs	r3, #31
     e18:	18fb      	adds	r3, r7, r3
     e1a:	2201      	movs	r2, #1
     e1c:	701a      	strb	r2, [r3, #0]
	uint8_t  tmp_day     = 1;
     e1e:	231e      	movs	r3, #30
     e20:	18fb      	adds	r3, r7, r3
     e22:	2201      	movs	r2, #1
     e24:	701a      	strb	r2, [r3, #0]
	uint8_t  tmp_hour    = 0;
     e26:	231d      	movs	r3, #29
     e28:	18fb      	adds	r3, r7, r3
     e2a:	2200      	movs	r2, #0
     e2c:	701a      	strb	r2, [r3, #0]
	uint8_t  tmp_minutes = 0;
     e2e:	231c      	movs	r3, #28
     e30:	18fb      	adds	r3, r7, r3
     e32:	2200      	movs	r2, #0
     e34:	701a      	strb	r2, [r3, #0]

	tmp = ts;
     e36:	68bb      	ldr	r3, [r7, #8]
     e38:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
     e3a:	6a3b      	ldr	r3, [r7, #32]
     e3c:	b29b      	uxth	r3, r3
     e3e:	0018      	movs	r0, r3
     e40:	4b3f      	ldr	r3, [pc, #252]	; (f40 <convert_timestamp_to_datetime+0x13c>)
     e42:	4798      	blx	r3
     e44:	1e03      	subs	r3, r0, #0
     e46:	d001      	beq.n	e4c <convert_timestamp_to_datetime+0x48>
     e48:	4b3e      	ldr	r3, [pc, #248]	; (f44 <convert_timestamp_to_datetime+0x140>)
     e4a:	e000      	b.n	e4e <convert_timestamp_to_datetime+0x4a>
     e4c:	4b3e      	ldr	r3, [pc, #248]	; (f48 <convert_timestamp_to_datetime+0x144>)
     e4e:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
     e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e52:	69bb      	ldr	r3, [r7, #24]
     e54:	429a      	cmp	r2, r3
     e56:	d307      	bcc.n	e68 <convert_timestamp_to_datetime+0x64>
			tmp -= sec_in_year;
     e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e5a:	69bb      	ldr	r3, [r7, #24]
     e5c:	1ad3      	subs	r3, r2, r3
     e5e:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
     e60:	6a3b      	ldr	r3, [r7, #32]
     e62:	3301      	adds	r3, #1
     e64:	623b      	str	r3, [r7, #32]
     e66:	e7e8      	b.n	e3a <convert_timestamp_to_datetime+0x36>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
     e68:	231f      	movs	r3, #31
     e6a:	18fb      	adds	r3, r7, r3
     e6c:	781a      	ldrb	r2, [r3, #0]
     e6e:	6a3b      	ldr	r3, [r7, #32]
     e70:	0011      	movs	r1, r2
     e72:	0018      	movs	r0, r3
     e74:	4b35      	ldr	r3, [pc, #212]	; (f4c <convert_timestamp_to_datetime+0x148>)
     e76:	4798      	blx	r3
     e78:	0003      	movs	r3, r0
     e7a:	617b      	str	r3, [r7, #20]

		if (tmp >= sec_in_month) {
     e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e7e:	697b      	ldr	r3, [r7, #20]
     e80:	429a      	cmp	r2, r3
     e82:	d30b      	bcc.n	e9c <convert_timestamp_to_datetime+0x98>
			tmp -= sec_in_month;
     e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e86:	697b      	ldr	r3, [r7, #20]
     e88:	1ad3      	subs	r3, r2, r3
     e8a:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
     e8c:	231f      	movs	r3, #31
     e8e:	18fb      	adds	r3, r7, r3
     e90:	781a      	ldrb	r2, [r3, #0]
     e92:	231f      	movs	r3, #31
     e94:	18fb      	adds	r3, r7, r3
     e96:	3201      	adds	r2, #1
     e98:	701a      	strb	r2, [r3, #0]
     e9a:	e7e5      	b.n	e68 <convert_timestamp_to_datetime+0x64>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
     e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e9e:	4a2c      	ldr	r2, [pc, #176]	; (f50 <convert_timestamp_to_datetime+0x14c>)
     ea0:	4293      	cmp	r3, r2
     ea2:	d90c      	bls.n	ebe <convert_timestamp_to_datetime+0xba>
			tmp -= SECS_IN_DAY;
     ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ea6:	4a2b      	ldr	r2, [pc, #172]	; (f54 <convert_timestamp_to_datetime+0x150>)
     ea8:	4694      	mov	ip, r2
     eaa:	4463      	add	r3, ip
     eac:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
     eae:	231e      	movs	r3, #30
     eb0:	18fb      	adds	r3, r7, r3
     eb2:	781a      	ldrb	r2, [r3, #0]
     eb4:	231e      	movs	r3, #30
     eb6:	18fb      	adds	r3, r7, r3
     eb8:	3201      	adds	r2, #1
     eba:	701a      	strb	r2, [r3, #0]
     ebc:	e7ee      	b.n	e9c <convert_timestamp_to_datetime+0x98>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
     ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ec0:	4a25      	ldr	r2, [pc, #148]	; (f58 <convert_timestamp_to_datetime+0x154>)
     ec2:	4293      	cmp	r3, r2
     ec4:	d90c      	bls.n	ee0 <convert_timestamp_to_datetime+0xdc>
			tmp -= SECS_IN_HOUR;
     ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ec8:	4a24      	ldr	r2, [pc, #144]	; (f5c <convert_timestamp_to_datetime+0x158>)
     eca:	4694      	mov	ip, r2
     ecc:	4463      	add	r3, ip
     ece:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
     ed0:	231d      	movs	r3, #29
     ed2:	18fb      	adds	r3, r7, r3
     ed4:	781a      	ldrb	r2, [r3, #0]
     ed6:	231d      	movs	r3, #29
     ed8:	18fb      	adds	r3, r7, r3
     eda:	3201      	adds	r2, #1
     edc:	701a      	strb	r2, [r3, #0]
     ede:	e7ee      	b.n	ebe <convert_timestamp_to_datetime+0xba>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
     ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ee2:	2b3b      	cmp	r3, #59	; 0x3b
     ee4:	d90a      	bls.n	efc <convert_timestamp_to_datetime+0xf8>
			tmp -= SECS_IN_MINUTE;
     ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ee8:	3b3c      	subs	r3, #60	; 0x3c
     eea:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
     eec:	231c      	movs	r3, #28
     eee:	18fb      	adds	r3, r7, r3
     ef0:	781a      	ldrb	r2, [r3, #0]
     ef2:	231c      	movs	r3, #28
     ef4:	18fb      	adds	r3, r7, r3
     ef6:	3201      	adds	r2, #1
     ef8:	701a      	strb	r2, [r3, #0]
		if (tmp >= SECS_IN_MINUTE) {
     efa:	e7f1      	b.n	ee0 <convert_timestamp_to_datetime+0xdc>
		} else {
			break;
     efc:	46c0      	nop			; (mov r8, r8)
		}
	}

	dt->date.year  = tmp_year;
     efe:	6a3b      	ldr	r3, [r7, #32]
     f00:	b29a      	uxth	r2, r3
     f02:	687b      	ldr	r3, [r7, #4]
     f04:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
     f06:	687b      	ldr	r3, [r7, #4]
     f08:	221f      	movs	r2, #31
     f0a:	18ba      	adds	r2, r7, r2
     f0c:	7812      	ldrb	r2, [r2, #0]
     f0e:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
     f10:	687b      	ldr	r3, [r7, #4]
     f12:	221e      	movs	r2, #30
     f14:	18ba      	adds	r2, r7, r2
     f16:	7812      	ldrb	r2, [r2, #0]
     f18:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
     f1a:	687b      	ldr	r3, [r7, #4]
     f1c:	221d      	movs	r2, #29
     f1e:	18ba      	adds	r2, r7, r2
     f20:	7812      	ldrb	r2, [r2, #0]
     f22:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
     f24:	687b      	ldr	r3, [r7, #4]
     f26:	221c      	movs	r2, #28
     f28:	18ba      	adds	r2, r7, r2
     f2a:	7812      	ldrb	r2, [r2, #0]
     f2c:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
     f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f30:	b2da      	uxtb	r2, r3
     f32:	687b      	ldr	r3, [r7, #4]
     f34:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
     f36:	2300      	movs	r3, #0
}
     f38:	0018      	movs	r0, r3
     f3a:	46bd      	mov	sp, r7
     f3c:	b00a      	add	sp, #40	; 0x28
     f3e:	bd80      	pop	{r7, pc}
     f40:	00000d4b 	.word	0x00000d4b
     f44:	01e28500 	.word	0x01e28500
     f48:	01e13380 	.word	0x01e13380
     f4c:	00000d71 	.word	0x00000d71
     f50:	0001517f 	.word	0x0001517f
     f54:	fffeae80 	.word	0xfffeae80
     f58:	00000e0f 	.word	0x00000e0f
     f5c:	fffff1f0 	.word	0xfffff1f0

00000f60 <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
     f60:	b580      	push	{r7, lr}
     f62:	b086      	sub	sp, #24
     f64:	af00      	add	r7, sp, #0
     f66:	6078      	str	r0, [r7, #4]
     f68:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
     f6e:	2300      	movs	r3, #0
     f70:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
     f72:	683b      	ldr	r3, [r7, #0]
     f74:	88db      	ldrh	r3, [r3, #6]
     f76:	b2d9      	uxtb	r1, r3
     f78:	687b      	ldr	r3, [r7, #4]
     f7a:	695b      	ldr	r3, [r3, #20]
     f7c:	b2da      	uxtb	r2, r3
     f7e:	230f      	movs	r3, #15
     f80:	18fb      	adds	r3, r7, r3
     f82:	1a8a      	subs	r2, r1, r2
     f84:	701a      	strb	r2, [r3, #0]
	month   = dt->date.month;
     f86:	230e      	movs	r3, #14
     f88:	18fb      	adds	r3, r7, r3
     f8a:	683a      	ldr	r2, [r7, #0]
     f8c:	7952      	ldrb	r2, [r2, #5]
     f8e:	701a      	strb	r2, [r3, #0]
	day     = dt->date.day;
     f90:	230d      	movs	r3, #13
     f92:	18fb      	adds	r3, r7, r3
     f94:	683a      	ldr	r2, [r7, #0]
     f96:	7912      	ldrb	r2, [r2, #4]
     f98:	701a      	strb	r2, [r3, #0]
	hour    = dt->time.hour;
     f9a:	230c      	movs	r3, #12
     f9c:	18fb      	adds	r3, r7, r3
     f9e:	683a      	ldr	r2, [r7, #0]
     fa0:	7892      	ldrb	r2, [r2, #2]
     fa2:	701a      	strb	r2, [r3, #0]
	minutes = dt->time.min;
     fa4:	230b      	movs	r3, #11
     fa6:	18fb      	adds	r3, r7, r3
     fa8:	683a      	ldr	r2, [r7, #0]
     faa:	7852      	ldrb	r2, [r2, #1]
     fac:	701a      	strb	r2, [r3, #0]
	seconds = dt->time.sec;
     fae:	230a      	movs	r3, #10
     fb0:	18fb      	adds	r3, r7, r3
     fb2:	683a      	ldr	r2, [r7, #0]
     fb4:	7812      	ldrb	r2, [r2, #0]
     fb6:	701a      	strb	r2, [r3, #0]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
     fb8:	2300      	movs	r3, #0
     fba:	613b      	str	r3, [r7, #16]
     fbc:	e019      	b.n	ff2 <convert_datetime_to_timestamp+0x92>
		if (leap_year(calendar->base_year + i)) {
     fbe:	687b      	ldr	r3, [r7, #4]
     fc0:	695b      	ldr	r3, [r3, #20]
     fc2:	b29a      	uxth	r2, r3
     fc4:	693b      	ldr	r3, [r7, #16]
     fc6:	b29b      	uxth	r3, r3
     fc8:	18d3      	adds	r3, r2, r3
     fca:	b29b      	uxth	r3, r3
     fcc:	0018      	movs	r0, r3
     fce:	4b2d      	ldr	r3, [pc, #180]	; (1084 <convert_datetime_to_timestamp+0x124>)
     fd0:	4798      	blx	r3
     fd2:	1e03      	subs	r3, r0, #0
     fd4:	d005      	beq.n	fe2 <convert_datetime_to_timestamp+0x82>
			tmp += SECS_IN_LEAP_YEAR;
     fd6:	697b      	ldr	r3, [r7, #20]
     fd8:	4a2b      	ldr	r2, [pc, #172]	; (1088 <convert_datetime_to_timestamp+0x128>)
     fda:	4694      	mov	ip, r2
     fdc:	4463      	add	r3, ip
     fde:	617b      	str	r3, [r7, #20]
     fe0:	e004      	b.n	fec <convert_datetime_to_timestamp+0x8c>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
     fe2:	697b      	ldr	r3, [r7, #20]
     fe4:	4a29      	ldr	r2, [pc, #164]	; (108c <convert_datetime_to_timestamp+0x12c>)
     fe6:	4694      	mov	ip, r2
     fe8:	4463      	add	r3, ip
     fea:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
     fec:	693b      	ldr	r3, [r7, #16]
     fee:	3301      	adds	r3, #1
     ff0:	613b      	str	r3, [r7, #16]
     ff2:	230f      	movs	r3, #15
     ff4:	18fb      	adds	r3, r7, r3
     ff6:	781a      	ldrb	r2, [r3, #0]
     ff8:	693b      	ldr	r3, [r7, #16]
     ffa:	429a      	cmp	r2, r3
     ffc:	d8df      	bhi.n	fbe <convert_datetime_to_timestamp+0x5e>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
     ffe:	2301      	movs	r3, #1
    1000:	613b      	str	r3, [r7, #16]
    1002:	e00f      	b.n	1024 <convert_datetime_to_timestamp+0xc4>
		tmp += get_secs_in_month(dt->date.year, i);
    1004:	683b      	ldr	r3, [r7, #0]
    1006:	88db      	ldrh	r3, [r3, #6]
    1008:	001a      	movs	r2, r3
    100a:	693b      	ldr	r3, [r7, #16]
    100c:	b2db      	uxtb	r3, r3
    100e:	0019      	movs	r1, r3
    1010:	0010      	movs	r0, r2
    1012:	4b1f      	ldr	r3, [pc, #124]	; (1090 <convert_datetime_to_timestamp+0x130>)
    1014:	4798      	blx	r3
    1016:	0002      	movs	r2, r0
    1018:	697b      	ldr	r3, [r7, #20]
    101a:	189b      	adds	r3, r3, r2
    101c:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    101e:	693b      	ldr	r3, [r7, #16]
    1020:	3301      	adds	r3, #1
    1022:	613b      	str	r3, [r7, #16]
    1024:	230e      	movs	r3, #14
    1026:	18fb      	adds	r3, r7, r3
    1028:	781a      	ldrb	r2, [r3, #0]
    102a:	693b      	ldr	r3, [r7, #16]
    102c:	429a      	cmp	r2, r3
    102e:	d8e9      	bhi.n	1004 <convert_datetime_to_timestamp+0xa4>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    1030:	230d      	movs	r3, #13
    1032:	18fb      	adds	r3, r7, r3
    1034:	781b      	ldrb	r3, [r3, #0]
    1036:	3b01      	subs	r3, #1
    1038:	4a16      	ldr	r2, [pc, #88]	; (1094 <convert_datetime_to_timestamp+0x134>)
    103a:	4353      	muls	r3, r2
    103c:	001a      	movs	r2, r3
    103e:	697b      	ldr	r3, [r7, #20]
    1040:	189b      	adds	r3, r3, r2
    1042:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    1044:	230c      	movs	r3, #12
    1046:	18fb      	adds	r3, r7, r3
    1048:	781b      	ldrb	r3, [r3, #0]
    104a:	22e1      	movs	r2, #225	; 0xe1
    104c:	0112      	lsls	r2, r2, #4
    104e:	4353      	muls	r3, r2
    1050:	001a      	movs	r2, r3
    1052:	697b      	ldr	r3, [r7, #20]
    1054:	189b      	adds	r3, r3, r2
    1056:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    1058:	230b      	movs	r3, #11
    105a:	18fb      	adds	r3, r7, r3
    105c:	781a      	ldrb	r2, [r3, #0]
    105e:	0013      	movs	r3, r2
    1060:	011b      	lsls	r3, r3, #4
    1062:	1a9b      	subs	r3, r3, r2
    1064:	009b      	lsls	r3, r3, #2
    1066:	001a      	movs	r2, r3
    1068:	697b      	ldr	r3, [r7, #20]
    106a:	189b      	adds	r3, r3, r2
    106c:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    106e:	230a      	movs	r3, #10
    1070:	18fb      	adds	r3, r7, r3
    1072:	781b      	ldrb	r3, [r3, #0]
    1074:	697a      	ldr	r2, [r7, #20]
    1076:	18d3      	adds	r3, r2, r3
    1078:	617b      	str	r3, [r7, #20]

	return tmp;
    107a:	697b      	ldr	r3, [r7, #20]
}
    107c:	0018      	movs	r0, r3
    107e:	46bd      	mov	sp, r7
    1080:	b006      	add	sp, #24
    1082:	bd80      	pop	{r7, pc}
    1084:	00000d4b 	.word	0x00000d4b
    1088:	01e28500 	.word	0x01e28500
    108c:	01e13380 	.word	0x01e13380
    1090:	00000d71 	.word	0x00000d71
    1094:	00015180 	.word	0x00015180

00001098 <calibrate_timestamp>:

/** \brief calibrate timestamp to make desired timestamp ahead of current timestamp
 */
static void calibrate_timestamp(struct calendar_descriptor *const calendar, struct calendar_alarm *alarm,
                                struct calendar_alarm *current_dt)
{
    1098:	b580      	push	{r7, lr}
    109a:	b086      	sub	sp, #24
    109c:	af00      	add	r7, sp, #0
    109e:	60f8      	str	r0, [r7, #12]
    10a0:	60b9      	str	r1, [r7, #8]
    10a2:	607a      	str	r2, [r7, #4]
	uint32_t alarm_ts;
	uint32_t current_ts = current_dt->cal_alarm.timestamp;
    10a4:	687b      	ldr	r3, [r7, #4]
    10a6:	68db      	ldr	r3, [r3, #12]
    10a8:	613b      	str	r3, [r7, #16]

	alarm_ts = alarm->cal_alarm.timestamp;
    10aa:	68bb      	ldr	r3, [r7, #8]
    10ac:	68db      	ldr	r3, [r3, #12]
    10ae:	617b      	str	r3, [r7, #20]

	/* calibrate timestamp */
	switch (alarm->cal_alarm.option) {
    10b0:	68bb      	ldr	r3, [r7, #8]
    10b2:	7c1b      	ldrb	r3, [r3, #16]
    10b4:	2b05      	cmp	r3, #5
    10b6:	d84a      	bhi.n	114e <calibrate_timestamp+0xb6>
    10b8:	009a      	lsls	r2, r3, #2
    10ba:	4b2e      	ldr	r3, [pc, #184]	; (1174 <calibrate_timestamp+0xdc>)
    10bc:	18d3      	adds	r3, r2, r3
    10be:	681b      	ldr	r3, [r3, #0]
    10c0:	469f      	mov	pc, r3
	case CALENDAR_ALARM_MATCH_SEC:

		if (alarm_ts <= current_ts) {
    10c2:	697a      	ldr	r2, [r7, #20]
    10c4:	693b      	ldr	r3, [r7, #16]
    10c6:	429a      	cmp	r2, r3
    10c8:	d843      	bhi.n	1152 <calibrate_timestamp+0xba>
			alarm_ts += SECS_IN_MINUTE;
    10ca:	697b      	ldr	r3, [r7, #20]
    10cc:	333c      	adds	r3, #60	; 0x3c
    10ce:	617b      	str	r3, [r7, #20]
		}

		break;
    10d0:	e03f      	b.n	1152 <calibrate_timestamp+0xba>
	case CALENDAR_ALARM_MATCH_MIN:

		if (alarm_ts <= current_ts) {
    10d2:	697a      	ldr	r2, [r7, #20]
    10d4:	693b      	ldr	r3, [r7, #16]
    10d6:	429a      	cmp	r2, r3
    10d8:	d83d      	bhi.n	1156 <calibrate_timestamp+0xbe>
			alarm_ts += SECS_IN_HOUR;
    10da:	697b      	ldr	r3, [r7, #20]
    10dc:	22e1      	movs	r2, #225	; 0xe1
    10de:	0112      	lsls	r2, r2, #4
    10e0:	4694      	mov	ip, r2
    10e2:	4463      	add	r3, ip
    10e4:	617b      	str	r3, [r7, #20]
		}

		break;
    10e6:	e036      	b.n	1156 <calibrate_timestamp+0xbe>
	case CALENDAR_ALARM_MATCH_HOUR:

		if (alarm_ts <= current_ts) {
    10e8:	697a      	ldr	r2, [r7, #20]
    10ea:	693b      	ldr	r3, [r7, #16]
    10ec:	429a      	cmp	r2, r3
    10ee:	d834      	bhi.n	115a <calibrate_timestamp+0xc2>
			alarm_ts += SECS_IN_DAY;
    10f0:	697b      	ldr	r3, [r7, #20]
    10f2:	4a21      	ldr	r2, [pc, #132]	; (1178 <calibrate_timestamp+0xe0>)
    10f4:	4694      	mov	ip, r2
    10f6:	4463      	add	r3, ip
    10f8:	617b      	str	r3, [r7, #20]
		}

		break;
    10fa:	e02e      	b.n	115a <calibrate_timestamp+0xc2>
	case CALENDAR_ALARM_MATCH_DAY:

		if (alarm_ts <= current_ts) {
    10fc:	697a      	ldr	r2, [r7, #20]
    10fe:	693b      	ldr	r3, [r7, #16]
    1100:	429a      	cmp	r2, r3
    1102:	d82c      	bhi.n	115e <calibrate_timestamp+0xc6>
			alarm_ts += get_secs_in_month(current_dt->cal_alarm.datetime.date.year,
    1104:	687b      	ldr	r3, [r7, #4]
    1106:	895b      	ldrh	r3, [r3, #10]
    1108:	001a      	movs	r2, r3
    110a:	687b      	ldr	r3, [r7, #4]
    110c:	7a5b      	ldrb	r3, [r3, #9]
    110e:	0019      	movs	r1, r3
    1110:	0010      	movs	r0, r2
    1112:	4b1a      	ldr	r3, [pc, #104]	; (117c <calibrate_timestamp+0xe4>)
    1114:	4798      	blx	r3
    1116:	0002      	movs	r2, r0
    1118:	697b      	ldr	r3, [r7, #20]
    111a:	189b      	adds	r3, r3, r2
    111c:	617b      	str	r3, [r7, #20]
			                              current_dt->cal_alarm.datetime.date.month);
		}

		break;
    111e:	e01e      	b.n	115e <calibrate_timestamp+0xc6>
	case CALENDAR_ALARM_MATCH_MONTH:

		if (alarm_ts <= current_ts) {
    1120:	697a      	ldr	r2, [r7, #20]
    1122:	693b      	ldr	r3, [r7, #16]
    1124:	429a      	cmp	r2, r3
    1126:	d81c      	bhi.n	1162 <calibrate_timestamp+0xca>
			if (leap_year(current_dt->cal_alarm.datetime.date.year)) {
    1128:	687b      	ldr	r3, [r7, #4]
    112a:	895b      	ldrh	r3, [r3, #10]
    112c:	0018      	movs	r0, r3
    112e:	4b14      	ldr	r3, [pc, #80]	; (1180 <calibrate_timestamp+0xe8>)
    1130:	4798      	blx	r3
    1132:	1e03      	subs	r3, r0, #0
    1134:	d005      	beq.n	1142 <calibrate_timestamp+0xaa>
				alarm_ts += SECS_IN_LEAP_YEAR;
    1136:	697b      	ldr	r3, [r7, #20]
    1138:	4a12      	ldr	r2, [pc, #72]	; (1184 <calibrate_timestamp+0xec>)
    113a:	4694      	mov	ip, r2
    113c:	4463      	add	r3, ip
    113e:	617b      	str	r3, [r7, #20]
			} else {
				alarm_ts += SECS_IN_NON_LEAP_YEAR;
			}
		}

		break;
    1140:	e00f      	b.n	1162 <calibrate_timestamp+0xca>
				alarm_ts += SECS_IN_NON_LEAP_YEAR;
    1142:	697b      	ldr	r3, [r7, #20]
    1144:	4a10      	ldr	r2, [pc, #64]	; (1188 <calibrate_timestamp+0xf0>)
    1146:	4694      	mov	ip, r2
    1148:	4463      	add	r3, ip
    114a:	617b      	str	r3, [r7, #20]
		break;
    114c:	e009      	b.n	1162 <calibrate_timestamp+0xca>
	/* do nothing for year match */
	case CALENDAR_ALARM_MATCH_YEAR:
	default:
		break;
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	e008      	b.n	1164 <calibrate_timestamp+0xcc>
		break;
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	e006      	b.n	1164 <calibrate_timestamp+0xcc>
		break;
    1156:	46c0      	nop			; (mov r8, r8)
    1158:	e004      	b.n	1164 <calibrate_timestamp+0xcc>
		break;
    115a:	46c0      	nop			; (mov r8, r8)
    115c:	e002      	b.n	1164 <calibrate_timestamp+0xcc>
		break;
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	e000      	b.n	1164 <calibrate_timestamp+0xcc>
		break;
    1162:	46c0      	nop			; (mov r8, r8)
	}

	/* desired timestamp after calibration */
	alarm->cal_alarm.timestamp = alarm_ts;
    1164:	68bb      	ldr	r3, [r7, #8]
    1166:	697a      	ldr	r2, [r7, #20]
    1168:	60da      	str	r2, [r3, #12]
}
    116a:	46c0      	nop			; (mov r8, r8)
    116c:	46bd      	mov	sp, r7
    116e:	b006      	add	sp, #24
    1170:	bd80      	pop	{r7, pc}
    1172:	46c0      	nop			; (mov r8, r8)
    1174:	000051f4 	.word	0x000051f4
    1178:	00015180 	.word	0x00015180
    117c:	00000d71 	.word	0x00000d71
    1180:	00000d4b 	.word	0x00000d4b
    1184:	01e28500 	.word	0x01e28500
    1188:	01e13380 	.word	0x01e13380

0000118c <fill_alarm>:

/** \brief complete alarm to absolute date/time, then fill up the timestamp
 */
static void fill_alarm(struct calendar_descriptor *const calendar, struct calendar_alarm *alarm)
{
    118c:	b580      	push	{r7, lr}
    118e:	b08a      	sub	sp, #40	; 0x28
    1190:	af00      	add	r7, sp, #0
    1192:	6078      	str	r0, [r7, #4]
    1194:	6039      	str	r1, [r7, #0]
	struct calendar_alarm current_dt;
	uint32_t              tmp, current_ts;

	/* get current date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    1196:	687b      	ldr	r3, [r7, #4]
    1198:	0018      	movs	r0, r3
    119a:	4b44      	ldr	r3, [pc, #272]	; (12ac <fill_alarm+0x120>)
    119c:	4798      	blx	r3
    119e:	0003      	movs	r3, r0
    11a0:	627b      	str	r3, [r7, #36]	; 0x24
	convert_timestamp_to_datetime(calendar, current_ts, &current_dt.cal_alarm.datetime);
    11a2:	2308      	movs	r3, #8
    11a4:	18fb      	adds	r3, r7, r3
    11a6:	1d1a      	adds	r2, r3, #4
    11a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    11aa:	687b      	ldr	r3, [r7, #4]
    11ac:	0018      	movs	r0, r3
    11ae:	4b40      	ldr	r3, [pc, #256]	; (12b0 <fill_alarm+0x124>)
    11b0:	4798      	blx	r3

	current_dt.cal_alarm.timestamp = current_ts;
    11b2:	2308      	movs	r3, #8
    11b4:	18fb      	adds	r3, r7, r3
    11b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    11b8:	60da      	str	r2, [r3, #12]

	/* complete alarm */
	switch (alarm->cal_alarm.option) {
    11ba:	683b      	ldr	r3, [r7, #0]
    11bc:	7c1b      	ldrb	r3, [r3, #16]
    11be:	2b06      	cmp	r3, #6
    11c0:	d854      	bhi.n	126c <fill_alarm+0xe0>
    11c2:	009a      	lsls	r2, r3, #2
    11c4:	4b3b      	ldr	r3, [pc, #236]	; (12b4 <fill_alarm+0x128>)
    11c6:	18d3      	adds	r3, r2, r3
    11c8:	681b      	ldr	r3, [r3, #0]
    11ca:	469f      	mov	pc, r3
	case CALENDAR_ALARM_MATCH_SEC:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    11cc:	2308      	movs	r3, #8
    11ce:	18fb      	adds	r3, r7, r3
    11d0:	895a      	ldrh	r2, [r3, #10]
    11d2:	683b      	ldr	r3, [r7, #0]
    11d4:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    11d6:	2308      	movs	r3, #8
    11d8:	18fb      	adds	r3, r7, r3
    11da:	7a5a      	ldrb	r2, [r3, #9]
    11dc:	683b      	ldr	r3, [r7, #0]
    11de:	725a      	strb	r2, [r3, #9]
		alarm->cal_alarm.datetime.date.day   = current_dt.cal_alarm.datetime.date.day;
    11e0:	2308      	movs	r3, #8
    11e2:	18fb      	adds	r3, r7, r3
    11e4:	7a1a      	ldrb	r2, [r3, #8]
    11e6:	683b      	ldr	r3, [r7, #0]
    11e8:	721a      	strb	r2, [r3, #8]
		alarm->cal_alarm.datetime.time.hour  = current_dt.cal_alarm.datetime.time.hour;
    11ea:	2308      	movs	r3, #8
    11ec:	18fb      	adds	r3, r7, r3
    11ee:	799a      	ldrb	r2, [r3, #6]
    11f0:	683b      	ldr	r3, [r7, #0]
    11f2:	719a      	strb	r2, [r3, #6]
		alarm->cal_alarm.datetime.time.min   = current_dt.cal_alarm.datetime.time.min;
    11f4:	2308      	movs	r3, #8
    11f6:	18fb      	adds	r3, r7, r3
    11f8:	795a      	ldrb	r2, [r3, #5]
    11fa:	683b      	ldr	r3, [r7, #0]
    11fc:	715a      	strb	r2, [r3, #5]
		break;
    11fe:	e036      	b.n	126e <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_MIN:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    1200:	2308      	movs	r3, #8
    1202:	18fb      	adds	r3, r7, r3
    1204:	895a      	ldrh	r2, [r3, #10]
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    120a:	2308      	movs	r3, #8
    120c:	18fb      	adds	r3, r7, r3
    120e:	7a5a      	ldrb	r2, [r3, #9]
    1210:	683b      	ldr	r3, [r7, #0]
    1212:	725a      	strb	r2, [r3, #9]
		alarm->cal_alarm.datetime.date.day   = current_dt.cal_alarm.datetime.date.day;
    1214:	2308      	movs	r3, #8
    1216:	18fb      	adds	r3, r7, r3
    1218:	7a1a      	ldrb	r2, [r3, #8]
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	721a      	strb	r2, [r3, #8]
		alarm->cal_alarm.datetime.time.hour  = current_dt.cal_alarm.datetime.time.hour;
    121e:	2308      	movs	r3, #8
    1220:	18fb      	adds	r3, r7, r3
    1222:	799a      	ldrb	r2, [r3, #6]
    1224:	683b      	ldr	r3, [r7, #0]
    1226:	719a      	strb	r2, [r3, #6]
		break;
    1228:	e021      	b.n	126e <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_HOUR:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    122a:	2308      	movs	r3, #8
    122c:	18fb      	adds	r3, r7, r3
    122e:	895a      	ldrh	r2, [r3, #10]
    1230:	683b      	ldr	r3, [r7, #0]
    1232:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    1234:	2308      	movs	r3, #8
    1236:	18fb      	adds	r3, r7, r3
    1238:	7a5a      	ldrb	r2, [r3, #9]
    123a:	683b      	ldr	r3, [r7, #0]
    123c:	725a      	strb	r2, [r3, #9]
		alarm->cal_alarm.datetime.date.day   = current_dt.cal_alarm.datetime.date.day;
    123e:	2308      	movs	r3, #8
    1240:	18fb      	adds	r3, r7, r3
    1242:	7a1a      	ldrb	r2, [r3, #8]
    1244:	683b      	ldr	r3, [r7, #0]
    1246:	721a      	strb	r2, [r3, #8]
		break;
    1248:	e011      	b.n	126e <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_DAY:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    124a:	2308      	movs	r3, #8
    124c:	18fb      	adds	r3, r7, r3
    124e:	895a      	ldrh	r2, [r3, #10]
    1250:	683b      	ldr	r3, [r7, #0]
    1252:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    1254:	2308      	movs	r3, #8
    1256:	18fb      	adds	r3, r7, r3
    1258:	7a5a      	ldrb	r2, [r3, #9]
    125a:	683b      	ldr	r3, [r7, #0]
    125c:	725a      	strb	r2, [r3, #9]
		break;
    125e:	e006      	b.n	126e <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_MONTH:
		alarm->cal_alarm.datetime.date.year = current_dt.cal_alarm.datetime.date.year;
    1260:	2308      	movs	r3, #8
    1262:	18fb      	adds	r3, r7, r3
    1264:	895a      	ldrh	r2, [r3, #10]
    1266:	683b      	ldr	r3, [r7, #0]
    1268:	815a      	strh	r2, [r3, #10]
		break;
    126a:	e000      	b.n	126e <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_YEAR:
		break;
	default:
		break;
    126c:	46c0      	nop			; (mov r8, r8)
	}

	/* fill up the timestamp */
	tmp                        = convert_datetime_to_timestamp(calendar, &alarm->cal_alarm.datetime);
    126e:	683b      	ldr	r3, [r7, #0]
    1270:	1d1a      	adds	r2, r3, #4
    1272:	687b      	ldr	r3, [r7, #4]
    1274:	0011      	movs	r1, r2
    1276:	0018      	movs	r0, r3
    1278:	4b0f      	ldr	r3, [pc, #60]	; (12b8 <fill_alarm+0x12c>)
    127a:	4798      	blx	r3
    127c:	0003      	movs	r3, r0
    127e:	623b      	str	r3, [r7, #32]
	alarm->cal_alarm.timestamp = tmp;
    1280:	683b      	ldr	r3, [r7, #0]
    1282:	6a3a      	ldr	r2, [r7, #32]
    1284:	60da      	str	r2, [r3, #12]

	/* calibrate the timestamp */
	calibrate_timestamp(calendar, alarm, &current_dt);
    1286:	2308      	movs	r3, #8
    1288:	18fa      	adds	r2, r7, r3
    128a:	6839      	ldr	r1, [r7, #0]
    128c:	687b      	ldr	r3, [r7, #4]
    128e:	0018      	movs	r0, r3
    1290:	4b0a      	ldr	r3, [pc, #40]	; (12bc <fill_alarm+0x130>)
    1292:	4798      	blx	r3
	convert_timestamp_to_datetime(calendar, alarm->cal_alarm.timestamp, &alarm->cal_alarm.datetime);
    1294:	683b      	ldr	r3, [r7, #0]
    1296:	68d9      	ldr	r1, [r3, #12]
    1298:	683b      	ldr	r3, [r7, #0]
    129a:	1d1a      	adds	r2, r3, #4
    129c:	687b      	ldr	r3, [r7, #4]
    129e:	0018      	movs	r0, r3
    12a0:	4b03      	ldr	r3, [pc, #12]	; (12b0 <fill_alarm+0x124>)
    12a2:	4798      	blx	r3
}
    12a4:	46c0      	nop			; (mov r8, r8)
    12a6:	46bd      	mov	sp, r7
    12a8:	b00a      	add	sp, #40	; 0x28
    12aa:	bd80      	pop	{r7, pc}
    12ac:	00002911 	.word	0x00002911
    12b0:	00000e05 	.word	0x00000e05
    12b4:	0000520c 	.word	0x0000520c
    12b8:	00000f61 	.word	0x00000f61
    12bc:	00001099 	.word	0x00001099

000012c0 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    12c0:	b580      	push	{r7, lr}
    12c2:	b084      	sub	sp, #16
    12c4:	af00      	add	r7, sp, #0
    12c6:	6078      	str	r0, [r7, #4]
    12c8:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    12ca:	2300      	movs	r3, #0
    12cc:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	1e5a      	subs	r2, r3, #1
    12d2:	4193      	sbcs	r3, r2
    12d4:	b2d8      	uxtb	r0, r3
    12d6:	23e0      	movs	r3, #224	; 0xe0
    12d8:	005a      	lsls	r2, r3, #1
    12da:	4b11      	ldr	r3, [pc, #68]	; (1320 <calendar_init+0x60>)
    12dc:	0019      	movs	r1, r3
    12de:	4b11      	ldr	r3, [pc, #68]	; (1324 <calendar_init+0x64>)
    12e0:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    12e2:	687b      	ldr	r3, [r7, #4]
    12e4:	681a      	ldr	r2, [r3, #0]
    12e6:	683b      	ldr	r3, [r7, #0]
    12e8:	429a      	cmp	r2, r3
    12ea:	d101      	bne.n	12f0 <calendar_init+0x30>
		/* Already initialized with current configuration */
		return ERR_NONE;
    12ec:	2300      	movs	r3, #0
    12ee:	e013      	b.n	1318 <calendar_init+0x58>
	} else if (calendar->device.hw != NULL) {
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	681b      	ldr	r3, [r3, #0]
    12f4:	2b00      	cmp	r3, #0
    12f6:	d002      	beq.n	12fe <calendar_init+0x3e>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    12f8:	2312      	movs	r3, #18
    12fa:	425b      	negs	r3, r3
    12fc:	e00c      	b.n	1318 <calendar_init+0x58>
	}
	calendar->device.hw = (void *)hw;
    12fe:	687b      	ldr	r3, [r7, #4]
    1300:	683a      	ldr	r2, [r7, #0]
    1302:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1304:	687b      	ldr	r3, [r7, #4]
    1306:	0018      	movs	r0, r3
    1308:	4b07      	ldr	r3, [pc, #28]	; (1328 <calendar_init+0x68>)
    130a:	4798      	blx	r3
    130c:	0003      	movs	r3, r0
    130e:	60fb      	str	r3, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    1310:	687b      	ldr	r3, [r7, #4]
    1312:	4a06      	ldr	r2, [pc, #24]	; (132c <calendar_init+0x6c>)
    1314:	615a      	str	r2, [r3, #20]

	return ret;
    1316:	68fb      	ldr	r3, [r7, #12]
}
    1318:	0018      	movs	r0, r3
    131a:	46bd      	mov	sp, r7
    131c:	b004      	add	sp, #16
    131e:	bd80      	pop	{r7, pc}
    1320:	00005228 	.word	0x00005228
    1324:	00001a3f 	.word	0x00001a3f
    1328:	000027dd 	.word	0x000027dd
    132c:	000007b2 	.word	0x000007b2

00001330 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    1330:	b580      	push	{r7, lr}
    1332:	b082      	sub	sp, #8
    1334:	af00      	add	r7, sp, #0
    1336:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(calendar);
    1338:	687b      	ldr	r3, [r7, #4]
    133a:	1e5a      	subs	r2, r3, #1
    133c:	4193      	sbcs	r3, r2
    133e:	b2d8      	uxtb	r0, r3
    1340:	23e6      	movs	r3, #230	; 0xe6
    1342:	33ff      	adds	r3, #255	; 0xff
    1344:	001a      	movs	r2, r3
    1346:	4b06      	ldr	r3, [pc, #24]	; (1360 <calendar_enable+0x30>)
    1348:	0019      	movs	r1, r3
    134a:	4b06      	ldr	r3, [pc, #24]	; (1364 <calendar_enable+0x34>)
    134c:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    134e:	687b      	ldr	r3, [r7, #4]
    1350:	0018      	movs	r0, r3
    1352:	4b05      	ldr	r3, [pc, #20]	; (1368 <calendar_enable+0x38>)
    1354:	4798      	blx	r3

	return ERR_NONE;
    1356:	2300      	movs	r3, #0
}
    1358:	0018      	movs	r0, r3
    135a:	46bd      	mov	sp, r7
    135c:	b002      	add	sp, #8
    135e:	bd80      	pop	{r7, pc}
    1360:	00005228 	.word	0x00005228
    1364:	00001a3f 	.word	0x00001a3f
    1368:	000028c1 	.word	0x000028c1

0000136c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    136c:	b580      	push	{r7, lr}
    136e:	b082      	sub	sp, #8
    1370:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1372:	1dbb      	adds	r3, r7, #6
    1374:	2200      	movs	r2, #0
    1376:	801a      	strh	r2, [r3, #0]
    1378:	e013      	b.n	13a2 <ext_irq_init+0x36>
		ext_irqs[i].pin = 0xFFFFFFFF;
    137a:	1dbb      	adds	r3, r7, #6
    137c:	881b      	ldrh	r3, [r3, #0]
    137e:	4a0f      	ldr	r2, [pc, #60]	; (13bc <ext_irq_init+0x50>)
    1380:	00db      	lsls	r3, r3, #3
    1382:	18d3      	adds	r3, r2, r3
    1384:	3304      	adds	r3, #4
    1386:	2201      	movs	r2, #1
    1388:	4252      	negs	r2, r2
    138a:	601a      	str	r2, [r3, #0]
		ext_irqs[i].cb  = NULL;
    138c:	1dbb      	adds	r3, r7, #6
    138e:	881a      	ldrh	r2, [r3, #0]
    1390:	4b0a      	ldr	r3, [pc, #40]	; (13bc <ext_irq_init+0x50>)
    1392:	00d2      	lsls	r2, r2, #3
    1394:	2100      	movs	r1, #0
    1396:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1398:	1dbb      	adds	r3, r7, #6
    139a:	881a      	ldrh	r2, [r3, #0]
    139c:	1dbb      	adds	r3, r7, #6
    139e:	3201      	adds	r2, #1
    13a0:	801a      	strh	r2, [r3, #0]
    13a2:	1dbb      	adds	r3, r7, #6
    13a4:	881b      	ldrh	r3, [r3, #0]
    13a6:	2b00      	cmp	r3, #0
    13a8:	d0e7      	beq.n	137a <ext_irq_init+0xe>
	}

	return _ext_irq_init(process_ext_irq);
    13aa:	4b05      	ldr	r3, [pc, #20]	; (13c0 <ext_irq_init+0x54>)
    13ac:	0018      	movs	r0, r3
    13ae:	4b05      	ldr	r3, [pc, #20]	; (13c4 <ext_irq_init+0x58>)
    13b0:	4798      	blx	r3
    13b2:	0003      	movs	r3, r0
}
    13b4:	0018      	movs	r0, r3
    13b6:	46bd      	mov	sp, r7
    13b8:	b002      	add	sp, #8
    13ba:	bd80      	pop	{r7, pc}
    13bc:	200000a4 	.word	0x200000a4
    13c0:	000015a1 	.word	0x000015a1
    13c4:	00001efd 	.word	0x00001efd

000013c8 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    13c8:	b580      	push	{r7, lr}
    13ca:	b086      	sub	sp, #24
    13cc:	af00      	add	r7, sp, #0
    13ce:	6078      	str	r0, [r7, #4]
    13d0:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    13d2:	2317      	movs	r3, #23
    13d4:	18fb      	adds	r3, r7, r3
    13d6:	2200      	movs	r2, #0
    13d8:	701a      	strb	r2, [r3, #0]
    13da:	2316      	movs	r3, #22
    13dc:	18fb      	adds	r3, r7, r3
    13de:	2200      	movs	r2, #0
    13e0:	701a      	strb	r2, [r3, #0]
	bool    found = false;
    13e2:	2315      	movs	r3, #21
    13e4:	18fb      	adds	r3, r7, r3
    13e6:	2200      	movs	r2, #0
    13e8:	701a      	strb	r2, [r3, #0]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    13ea:	e01d      	b.n	1428 <ext_irq_register+0x60>
		if (ext_irqs[i].pin == pin) {
    13ec:	2317      	movs	r3, #23
    13ee:	18fb      	adds	r3, r7, r3
    13f0:	781b      	ldrb	r3, [r3, #0]
    13f2:	4a69      	ldr	r2, [pc, #420]	; (1598 <ext_irq_register+0x1d0>)
    13f4:	00db      	lsls	r3, r3, #3
    13f6:	18d3      	adds	r3, r2, r3
    13f8:	3304      	adds	r3, #4
    13fa:	681a      	ldr	r2, [r3, #0]
    13fc:	687b      	ldr	r3, [r7, #4]
    13fe:	429a      	cmp	r2, r3
    1400:	d10b      	bne.n	141a <ext_irq_register+0x52>
			ext_irqs[i].cb = cb;
    1402:	2317      	movs	r3, #23
    1404:	18fb      	adds	r3, r7, r3
    1406:	781a      	ldrb	r2, [r3, #0]
    1408:	4b63      	ldr	r3, [pc, #396]	; (1598 <ext_irq_register+0x1d0>)
    140a:	00d2      	lsls	r2, r2, #3
    140c:	6839      	ldr	r1, [r7, #0]
    140e:	50d1      	str	r1, [r2, r3]
			found          = true;
    1410:	2315      	movs	r3, #21
    1412:	18fb      	adds	r3, r7, r3
    1414:	2201      	movs	r2, #1
    1416:	701a      	strb	r2, [r3, #0]
			break;
    1418:	e00b      	b.n	1432 <ext_irq_register+0x6a>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    141a:	2317      	movs	r3, #23
    141c:	18fb      	adds	r3, r7, r3
    141e:	781a      	ldrb	r2, [r3, #0]
    1420:	2317      	movs	r3, #23
    1422:	18fb      	adds	r3, r7, r3
    1424:	3201      	adds	r2, #1
    1426:	701a      	strb	r2, [r3, #0]
    1428:	2317      	movs	r3, #23
    142a:	18fb      	adds	r3, r7, r3
    142c:	781b      	ldrb	r3, [r3, #0]
    142e:	2b00      	cmp	r3, #0
    1430:	d0dc      	beq.n	13ec <ext_irq_register+0x24>
		}
	}

	if (NULL == cb) {
    1432:	683b      	ldr	r3, [r7, #0]
    1434:	2b00      	cmp	r3, #0
    1436:	d111      	bne.n	145c <ext_irq_register+0x94>
		if (!found) {
    1438:	2315      	movs	r3, #21
    143a:	18fb      	adds	r3, r7, r3
    143c:	781b      	ldrb	r3, [r3, #0]
    143e:	2201      	movs	r2, #1
    1440:	4053      	eors	r3, r2
    1442:	b2db      	uxtb	r3, r3
    1444:	2b00      	cmp	r3, #0
    1446:	d002      	beq.n	144e <ext_irq_register+0x86>
			return ERR_INVALID_ARG;
    1448:	230d      	movs	r3, #13
    144a:	425b      	negs	r3, r3
    144c:	e09f      	b.n	158e <ext_irq_register+0x1c6>
		}
		return _ext_irq_enable(pin, false);
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	2100      	movs	r1, #0
    1452:	0018      	movs	r0, r3
    1454:	4b51      	ldr	r3, [pc, #324]	; (159c <ext_irq_register+0x1d4>)
    1456:	4798      	blx	r3
    1458:	0003      	movs	r3, r0
    145a:	e098      	b.n	158e <ext_irq_register+0x1c6>
	}

	if (!found) {
    145c:	2315      	movs	r3, #21
    145e:	18fb      	adds	r3, r7, r3
    1460:	781b      	ldrb	r3, [r3, #0]
    1462:	2201      	movs	r2, #1
    1464:	4053      	eors	r3, r2
    1466:	b2db      	uxtb	r3, r3
    1468:	2b00      	cmp	r3, #0
    146a:	d100      	bne.n	146e <ext_irq_register+0xa6>
    146c:	e07e      	b.n	156c <ext_irq_register+0x1a4>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    146e:	2317      	movs	r3, #23
    1470:	18fb      	adds	r3, r7, r3
    1472:	2200      	movs	r2, #0
    1474:	701a      	strb	r2, [r3, #0]
    1476:	e023      	b.n	14c0 <ext_irq_register+0xf8>
			if (NULL == ext_irqs[i].cb) {
    1478:	2317      	movs	r3, #23
    147a:	18fb      	adds	r3, r7, r3
    147c:	781a      	ldrb	r2, [r3, #0]
    147e:	4b46      	ldr	r3, [pc, #280]	; (1598 <ext_irq_register+0x1d0>)
    1480:	00d2      	lsls	r2, r2, #3
    1482:	58d3      	ldr	r3, [r2, r3]
    1484:	2b00      	cmp	r3, #0
    1486:	d114      	bne.n	14b2 <ext_irq_register+0xea>
				ext_irqs[i].cb  = cb;
    1488:	2317      	movs	r3, #23
    148a:	18fb      	adds	r3, r7, r3
    148c:	781a      	ldrb	r2, [r3, #0]
    148e:	4b42      	ldr	r3, [pc, #264]	; (1598 <ext_irq_register+0x1d0>)
    1490:	00d2      	lsls	r2, r2, #3
    1492:	6839      	ldr	r1, [r7, #0]
    1494:	50d1      	str	r1, [r2, r3]
				ext_irqs[i].pin = pin;
    1496:	2317      	movs	r3, #23
    1498:	18fb      	adds	r3, r7, r3
    149a:	781b      	ldrb	r3, [r3, #0]
    149c:	4a3e      	ldr	r2, [pc, #248]	; (1598 <ext_irq_register+0x1d0>)
    149e:	00db      	lsls	r3, r3, #3
    14a0:	18d3      	adds	r3, r2, r3
    14a2:	3304      	adds	r3, #4
    14a4:	687a      	ldr	r2, [r7, #4]
    14a6:	601a      	str	r2, [r3, #0]
				found           = true;
    14a8:	2315      	movs	r3, #21
    14aa:	18fb      	adds	r3, r7, r3
    14ac:	2201      	movs	r2, #1
    14ae:	701a      	strb	r2, [r3, #0]
				break;
    14b0:	e00b      	b.n	14ca <ext_irq_register+0x102>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    14b2:	2317      	movs	r3, #23
    14b4:	18fb      	adds	r3, r7, r3
    14b6:	781a      	ldrb	r2, [r3, #0]
    14b8:	2317      	movs	r3, #23
    14ba:	18fb      	adds	r3, r7, r3
    14bc:	3201      	adds	r2, #1
    14be:	701a      	strb	r2, [r3, #0]
    14c0:	2317      	movs	r3, #23
    14c2:	18fb      	adds	r3, r7, r3
    14c4:	781b      	ldrb	r3, [r3, #0]
    14c6:	2b00      	cmp	r3, #0
    14c8:	d0d6      	beq.n	1478 <ext_irq_register+0xb0>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    14ca:	e045      	b.n	1558 <ext_irq_register+0x190>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    14cc:	2317      	movs	r3, #23
    14ce:	18fb      	adds	r3, r7, r3
    14d0:	781b      	ldrb	r3, [r3, #0]
    14d2:	4a31      	ldr	r2, [pc, #196]	; (1598 <ext_irq_register+0x1d0>)
    14d4:	00db      	lsls	r3, r3, #3
    14d6:	18d3      	adds	r3, r2, r3
    14d8:	3304      	adds	r3, #4
    14da:	681a      	ldr	r2, [r3, #0]
    14dc:	2316      	movs	r3, #22
    14de:	18fb      	adds	r3, r7, r3
    14e0:	781b      	ldrb	r3, [r3, #0]
    14e2:	492d      	ldr	r1, [pc, #180]	; (1598 <ext_irq_register+0x1d0>)
    14e4:	00db      	lsls	r3, r3, #3
    14e6:	18cb      	adds	r3, r1, r3
    14e8:	3304      	adds	r3, #4
    14ea:	681b      	ldr	r3, [r3, #0]
    14ec:	429a      	cmp	r2, r3
    14ee:	d22c      	bcs.n	154a <ext_irq_register+0x182>
    14f0:	2316      	movs	r3, #22
    14f2:	18fb      	adds	r3, r7, r3
    14f4:	781b      	ldrb	r3, [r3, #0]
    14f6:	4a28      	ldr	r2, [pc, #160]	; (1598 <ext_irq_register+0x1d0>)
    14f8:	00db      	lsls	r3, r3, #3
    14fa:	18d3      	adds	r3, r2, r3
    14fc:	3304      	adds	r3, #4
    14fe:	681b      	ldr	r3, [r3, #0]
    1500:	3301      	adds	r3, #1
    1502:	d022      	beq.n	154a <ext_irq_register+0x182>
				struct ext_irq tmp = ext_irqs[j];
    1504:	2316      	movs	r3, #22
    1506:	18fb      	adds	r3, r7, r3
    1508:	781b      	ldrb	r3, [r3, #0]
    150a:	220c      	movs	r2, #12
    150c:	18ba      	adds	r2, r7, r2
    150e:	4922      	ldr	r1, [pc, #136]	; (1598 <ext_irq_register+0x1d0>)
    1510:	00db      	lsls	r3, r3, #3
    1512:	18cb      	adds	r3, r1, r3
    1514:	cb03      	ldmia	r3!, {r0, r1}
    1516:	c203      	stmia	r2!, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    1518:	2316      	movs	r3, #22
    151a:	18fb      	adds	r3, r7, r3
    151c:	781b      	ldrb	r3, [r3, #0]
    151e:	2217      	movs	r2, #23
    1520:	18ba      	adds	r2, r7, r2
    1522:	7812      	ldrb	r2, [r2, #0]
    1524:	481c      	ldr	r0, [pc, #112]	; (1598 <ext_irq_register+0x1d0>)
    1526:	00db      	lsls	r3, r3, #3
    1528:	491b      	ldr	r1, [pc, #108]	; (1598 <ext_irq_register+0x1d0>)
    152a:	00d2      	lsls	r2, r2, #3
    152c:	18c3      	adds	r3, r0, r3
    152e:	188a      	adds	r2, r1, r2
    1530:	ca03      	ldmia	r2!, {r0, r1}
    1532:	c303      	stmia	r3!, {r0, r1}
				ext_irqs[i] = tmp;
    1534:	2317      	movs	r3, #23
    1536:	18fb      	adds	r3, r7, r3
    1538:	781b      	ldrb	r3, [r3, #0]
    153a:	4a17      	ldr	r2, [pc, #92]	; (1598 <ext_irq_register+0x1d0>)
    153c:	00db      	lsls	r3, r3, #3
    153e:	210c      	movs	r1, #12
    1540:	1879      	adds	r1, r7, r1
    1542:	18d3      	adds	r3, r2, r3
    1544:	000a      	movs	r2, r1
    1546:	ca03      	ldmia	r2!, {r0, r1}
    1548:	c303      	stmia	r3!, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    154a:	2316      	movs	r3, #22
    154c:	18fb      	adds	r3, r7, r3
    154e:	781a      	ldrb	r2, [r3, #0]
    1550:	2316      	movs	r3, #22
    1552:	18fb      	adds	r3, r7, r3
    1554:	3201      	adds	r2, #1
    1556:	701a      	strb	r2, [r3, #0]
    1558:	2316      	movs	r3, #22
    155a:	18fb      	adds	r3, r7, r3
    155c:	781b      	ldrb	r3, [r3, #0]
    155e:	2b00      	cmp	r3, #0
    1560:	d104      	bne.n	156c <ext_irq_register+0x1a4>
    1562:	2317      	movs	r3, #23
    1564:	18fb      	adds	r3, r7, r3
    1566:	781b      	ldrb	r3, [r3, #0]
    1568:	2b00      	cmp	r3, #0
    156a:	d0af      	beq.n	14cc <ext_irq_register+0x104>
			}
		}
	}

	if (!found) {
    156c:	2315      	movs	r3, #21
    156e:	18fb      	adds	r3, r7, r3
    1570:	781b      	ldrb	r3, [r3, #0]
    1572:	2201      	movs	r2, #1
    1574:	4053      	eors	r3, r2
    1576:	b2db      	uxtb	r3, r3
    1578:	2b00      	cmp	r3, #0
    157a:	d002      	beq.n	1582 <ext_irq_register+0x1ba>
		return ERR_INVALID_ARG;
    157c:	230d      	movs	r3, #13
    157e:	425b      	negs	r3, r3
    1580:	e005      	b.n	158e <ext_irq_register+0x1c6>
	}

	return _ext_irq_enable(pin, true);
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	2101      	movs	r1, #1
    1586:	0018      	movs	r0, r3
    1588:	4b04      	ldr	r3, [pc, #16]	; (159c <ext_irq_register+0x1d4>)
    158a:	4798      	blx	r3
    158c:	0003      	movs	r3, r0
}
    158e:	0018      	movs	r0, r3
    1590:	46bd      	mov	sp, r7
    1592:	b006      	add	sp, #24
    1594:	bd80      	pop	{r7, pc}
    1596:	46c0      	nop			; (mov r8, r8)
    1598:	200000a4 	.word	0x200000a4
    159c:	00001fd9 	.word	0x00001fd9

000015a0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    15a0:	b580      	push	{r7, lr}
    15a2:	b084      	sub	sp, #16
    15a4:	af00      	add	r7, sp, #0
    15a6:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    15a8:	230f      	movs	r3, #15
    15aa:	18fb      	adds	r3, r7, r3
    15ac:	2200      	movs	r2, #0
    15ae:	701a      	strb	r2, [r3, #0]
    15b0:	230e      	movs	r3, #14
    15b2:	18fb      	adds	r3, r7, r3
    15b4:	2201      	movs	r2, #1
    15b6:	701a      	strb	r2, [r3, #0]

	while (upper >= lower) {
    15b8:	e050      	b.n	165c <process_ext_irq+0xbc>
		middle = (upper + lower) >> 1;
    15ba:	230e      	movs	r3, #14
    15bc:	18fb      	adds	r3, r7, r3
    15be:	781a      	ldrb	r2, [r3, #0]
    15c0:	230f      	movs	r3, #15
    15c2:	18fb      	adds	r3, r7, r3
    15c4:	781b      	ldrb	r3, [r3, #0]
    15c6:	18d3      	adds	r3, r2, r3
    15c8:	105a      	asrs	r2, r3, #1
    15ca:	230d      	movs	r3, #13
    15cc:	18fb      	adds	r3, r7, r3
    15ce:	701a      	strb	r2, [r3, #0]
		if (middle >= EXT_IRQ_AMOUNT) {
    15d0:	230d      	movs	r3, #13
    15d2:	18fb      	adds	r3, r7, r3
    15d4:	781b      	ldrb	r3, [r3, #0]
    15d6:	2b00      	cmp	r3, #0
    15d8:	d149      	bne.n	166e <process_ext_irq+0xce>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    15da:	230d      	movs	r3, #13
    15dc:	18fb      	adds	r3, r7, r3
    15de:	781b      	ldrb	r3, [r3, #0]
    15e0:	4a26      	ldr	r2, [pc, #152]	; (167c <process_ext_irq+0xdc>)
    15e2:	00db      	lsls	r3, r3, #3
    15e4:	18d3      	adds	r3, r2, r3
    15e6:	3304      	adds	r3, #4
    15e8:	681a      	ldr	r2, [r3, #0]
    15ea:	687b      	ldr	r3, [r7, #4]
    15ec:	429a      	cmp	r2, r3
    15ee:	d10f      	bne.n	1610 <process_ext_irq+0x70>
			if (ext_irqs[middle].cb) {
    15f0:	230d      	movs	r3, #13
    15f2:	18fb      	adds	r3, r7, r3
    15f4:	781a      	ldrb	r2, [r3, #0]
    15f6:	4b21      	ldr	r3, [pc, #132]	; (167c <process_ext_irq+0xdc>)
    15f8:	00d2      	lsls	r2, r2, #3
    15fa:	58d3      	ldr	r3, [r2, r3]
    15fc:	2b00      	cmp	r3, #0
    15fe:	d038      	beq.n	1672 <process_ext_irq+0xd2>
				ext_irqs[middle].cb();
    1600:	230d      	movs	r3, #13
    1602:	18fb      	adds	r3, r7, r3
    1604:	781a      	ldrb	r2, [r3, #0]
    1606:	4b1d      	ldr	r3, [pc, #116]	; (167c <process_ext_irq+0xdc>)
    1608:	00d2      	lsls	r2, r2, #3
    160a:	58d3      	ldr	r3, [r2, r3]
    160c:	4798      	blx	r3
			}
			return;
    160e:	e030      	b.n	1672 <process_ext_irq+0xd2>
		}

		if (ext_irqs[middle].pin < pin) {
    1610:	230d      	movs	r3, #13
    1612:	18fb      	adds	r3, r7, r3
    1614:	781b      	ldrb	r3, [r3, #0]
    1616:	4a19      	ldr	r2, [pc, #100]	; (167c <process_ext_irq+0xdc>)
    1618:	00db      	lsls	r3, r3, #3
    161a:	18d3      	adds	r3, r2, r3
    161c:	3304      	adds	r3, #4
    161e:	681a      	ldr	r2, [r3, #0]
    1620:	687b      	ldr	r3, [r7, #4]
    1622:	429a      	cmp	r2, r3
    1624:	d20d      	bcs.n	1642 <process_ext_irq+0xa2>
			lower = middle + 1;
    1626:	230f      	movs	r3, #15
    1628:	18fb      	adds	r3, r7, r3
    162a:	220d      	movs	r2, #13
    162c:	18ba      	adds	r2, r7, r2
    162e:	7812      	ldrb	r2, [r2, #0]
    1630:	3201      	adds	r2, #1
    1632:	701a      	strb	r2, [r3, #0]
    1634:	230e      	movs	r3, #14
    1636:	18fb      	adds	r3, r7, r3
    1638:	220e      	movs	r2, #14
    163a:	18ba      	adds	r2, r7, r2
    163c:	7812      	ldrb	r2, [r2, #0]
    163e:	701a      	strb	r2, [r3, #0]
    1640:	e00c      	b.n	165c <process_ext_irq+0xbc>
		} else {
			upper = middle - 1;
    1642:	230e      	movs	r3, #14
    1644:	18fb      	adds	r3, r7, r3
    1646:	220d      	movs	r2, #13
    1648:	18ba      	adds	r2, r7, r2
    164a:	7812      	ldrb	r2, [r2, #0]
    164c:	3a01      	subs	r2, #1
    164e:	701a      	strb	r2, [r3, #0]
    1650:	230f      	movs	r3, #15
    1652:	18fb      	adds	r3, r7, r3
    1654:	220f      	movs	r2, #15
    1656:	18ba      	adds	r2, r7, r2
    1658:	7812      	ldrb	r2, [r2, #0]
    165a:	701a      	strb	r2, [r3, #0]
	while (upper >= lower) {
    165c:	230e      	movs	r3, #14
    165e:	18fa      	adds	r2, r7, r3
    1660:	230f      	movs	r3, #15
    1662:	18fb      	adds	r3, r7, r3
    1664:	7812      	ldrb	r2, [r2, #0]
    1666:	781b      	ldrb	r3, [r3, #0]
    1668:	429a      	cmp	r2, r3
    166a:	d2a6      	bcs.n	15ba <process_ext_irq+0x1a>
    166c:	e002      	b.n	1674 <process_ext_irq+0xd4>
			return;
    166e:	46c0      	nop			; (mov r8, r8)
    1670:	e000      	b.n	1674 <process_ext_irq+0xd4>
			return;
    1672:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    1674:	46bd      	mov	sp, r7
    1676:	b004      	add	sp, #16
    1678:	bd80      	pop	{r7, pc}
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	200000a4 	.word	0x200000a4

00001680 <sleep>:
 * \retval -1 The requested sleep mode was invalid or not available
 * \retval  0 The operation completed successfully, returned after leaving the
 *            sleep
 */
int sleep(const uint8_t mode)
{
    1680:	b580      	push	{r7, lr}
    1682:	b082      	sub	sp, #8
    1684:	af00      	add	r7, sp, #0
    1686:	0002      	movs	r2, r0
    1688:	1dfb      	adds	r3, r7, #7
    168a:	701a      	strb	r2, [r3, #0]
	if (ERR_NONE != _set_sleep_mode(mode))
    168c:	1dfb      	adds	r3, r7, #7
    168e:	781b      	ldrb	r3, [r3, #0]
    1690:	0018      	movs	r0, r3
    1692:	4b07      	ldr	r3, [pc, #28]	; (16b0 <sleep+0x30>)
    1694:	4798      	blx	r3
    1696:	1e03      	subs	r3, r0, #0
    1698:	d002      	beq.n	16a0 <sleep+0x20>
		return ERR_INVALID_ARG;
    169a:	230d      	movs	r3, #13
    169c:	425b      	negs	r3, r3
    169e:	e002      	b.n	16a6 <sleep+0x26>

	_go_to_sleep();
    16a0:	4b04      	ldr	r3, [pc, #16]	; (16b4 <sleep+0x34>)
    16a2:	4798      	blx	r3

	return ERR_NONE;
    16a4:	2300      	movs	r3, #0
}
    16a6:	0018      	movs	r0, r3
    16a8:	46bd      	mov	sp, r7
    16aa:	b002      	add	sp, #8
    16ac:	bd80      	pop	{r7, pc}
    16ae:	46c0      	nop			; (mov r8, r8)
    16b0:	000023a9 	.word	0x000023a9
    16b4:	00001c39 	.word	0x00001c39

000016b8 <usart_async_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_async_init(struct usart_async_descriptor *const descr, void *const hw, uint8_t *rx_buffer,
                         uint16_t rx_buffer_length, void *const func)
{
    16b8:	b580      	push	{r7, lr}
    16ba:	b086      	sub	sp, #24
    16bc:	af00      	add	r7, sp, #0
    16be:	60f8      	str	r0, [r7, #12]
    16c0:	60b9      	str	r1, [r7, #8]
    16c2:	607a      	str	r2, [r7, #4]
    16c4:	001a      	movs	r2, r3
    16c6:	1cbb      	adds	r3, r7, #2
    16c8:	801a      	strh	r2, [r3, #0]
	int32_t init_status;
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    16ca:	68fb      	ldr	r3, [r7, #12]
    16cc:	2b00      	cmp	r3, #0
    16ce:	d00b      	beq.n	16e8 <usart_async_init+0x30>
    16d0:	68bb      	ldr	r3, [r7, #8]
    16d2:	2b00      	cmp	r3, #0
    16d4:	d008      	beq.n	16e8 <usart_async_init+0x30>
    16d6:	687b      	ldr	r3, [r7, #4]
    16d8:	2b00      	cmp	r3, #0
    16da:	d005      	beq.n	16e8 <usart_async_init+0x30>
    16dc:	1cbb      	adds	r3, r7, #2
    16de:	881b      	ldrh	r3, [r3, #0]
    16e0:	2b00      	cmp	r3, #0
    16e2:	d001      	beq.n	16e8 <usart_async_init+0x30>
    16e4:	2301      	movs	r3, #1
    16e6:	e000      	b.n	16ea <usart_async_init+0x32>
    16e8:	2300      	movs	r3, #0
    16ea:	1c1a      	adds	r2, r3, #0
    16ec:	2301      	movs	r3, #1
    16ee:	4013      	ands	r3, r2
    16f0:	b2db      	uxtb	r3, r3
    16f2:	491c      	ldr	r1, [pc, #112]	; (1764 <usart_async_init+0xac>)
    16f4:	223a      	movs	r2, #58	; 0x3a
    16f6:	0018      	movs	r0, r3
    16f8:	4b1b      	ldr	r3, [pc, #108]	; (1768 <usart_async_init+0xb0>)
    16fa:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    16fc:	68fb      	ldr	r3, [r7, #12]
    16fe:	3334      	adds	r3, #52	; 0x34
    1700:	0018      	movs	r0, r3
    1702:	1cbb      	adds	r3, r7, #2
    1704:	881a      	ldrh	r2, [r3, #0]
    1706:	687b      	ldr	r3, [r7, #4]
    1708:	0019      	movs	r1, r3
    170a:	4b18      	ldr	r3, [pc, #96]	; (176c <usart_async_init+0xb4>)
    170c:	4798      	blx	r3
    170e:	1e03      	subs	r3, r0, #0
    1710:	d002      	beq.n	1718 <usart_async_init+0x60>
		return ERR_INVALID_ARG;
    1712:	230d      	movs	r3, #13
    1714:	425b      	negs	r3, r3
    1716:	e020      	b.n	175a <usart_async_init+0xa2>
	}
	init_status = _usart_async_init(&descr->device, hw);
    1718:	68fb      	ldr	r3, [r7, #12]
    171a:	3308      	adds	r3, #8
    171c:	68ba      	ldr	r2, [r7, #8]
    171e:	0011      	movs	r1, r2
    1720:	0018      	movs	r0, r3
    1722:	4b13      	ldr	r3, [pc, #76]	; (1770 <usart_async_init+0xb8>)
    1724:	4798      	blx	r3
    1726:	0003      	movs	r3, r0
    1728:	617b      	str	r3, [r7, #20]
	if (init_status) {
    172a:	697b      	ldr	r3, [r7, #20]
    172c:	2b00      	cmp	r3, #0
    172e:	d001      	beq.n	1734 <usart_async_init+0x7c>
		return init_status;
    1730:	697b      	ldr	r3, [r7, #20]
    1732:	e012      	b.n	175a <usart_async_init+0xa2>
	}

	descr->io.read  = usart_async_read;
    1734:	68fb      	ldr	r3, [r7, #12]
    1736:	4a0f      	ldr	r2, [pc, #60]	; (1774 <usart_async_init+0xbc>)
    1738:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_async_write;
    173a:	68fb      	ldr	r3, [r7, #12]
    173c:	4a0e      	ldr	r2, [pc, #56]	; (1778 <usart_async_init+0xc0>)
    173e:	601a      	str	r2, [r3, #0]

	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1740:	68fb      	ldr	r3, [r7, #12]
    1742:	4a0e      	ldr	r2, [pc, #56]	; (177c <usart_async_init+0xc4>)
    1744:	609a      	str	r2, [r3, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1746:	68fb      	ldr	r3, [r7, #12]
    1748:	4a0d      	ldr	r2, [pc, #52]	; (1780 <usart_async_init+0xc8>)
    174a:	60da      	str	r2, [r3, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    174c:	68fb      	ldr	r3, [r7, #12]
    174e:	4a0d      	ldr	r2, [pc, #52]	; (1784 <usart_async_init+0xcc>)
    1750:	611a      	str	r2, [r3, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1752:	68fb      	ldr	r3, [r7, #12]
    1754:	4a0c      	ldr	r2, [pc, #48]	; (1788 <usart_async_init+0xd0>)
    1756:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    1758:	2300      	movs	r3, #0
}
    175a:	0018      	movs	r0, r3
    175c:	46bd      	mov	sp, r7
    175e:	b006      	add	sp, #24
    1760:	bd80      	pop	{r7, pc}
    1762:	46c0      	nop			; (mov r8, r8)
    1764:	00005244 	.word	0x00005244
    1768:	00001a3f 	.word	0x00001a3f
    176c:	00001a6d 	.word	0x00001a6d
    1770:	00002e5d 	.word	0x00002e5d
    1774:	00001861 	.word	0x00001861
    1778:	000017c9 	.word	0x000017c9
    177c:	0000192d 	.word	0x0000192d
    1780:	000019cd 	.word	0x000019cd
    1784:	0000199d 	.word	0x0000199d
    1788:	00001a11 	.word	0x00001a11

0000178c <usart_async_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_async_enable(struct usart_async_descriptor *const descr)
{
    178c:	b580      	push	{r7, lr}
    178e:	b082      	sub	sp, #8
    1790:	af00      	add	r7, sp, #0
    1792:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1794:	687b      	ldr	r3, [r7, #4]
    1796:	1e5a      	subs	r2, r3, #1
    1798:	4193      	sbcs	r3, r2
    179a:	b2db      	uxtb	r3, r3
    179c:	4907      	ldr	r1, [pc, #28]	; (17bc <usart_async_enable+0x30>)
    179e:	2261      	movs	r2, #97	; 0x61
    17a0:	0018      	movs	r0, r3
    17a2:	4b07      	ldr	r3, [pc, #28]	; (17c0 <usart_async_enable+0x34>)
    17a4:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    17a6:	687b      	ldr	r3, [r7, #4]
    17a8:	3308      	adds	r3, #8
    17aa:	0018      	movs	r0, r3
    17ac:	4b05      	ldr	r3, [pc, #20]	; (17c4 <usart_async_enable+0x38>)
    17ae:	4798      	blx	r3

	return ERR_NONE;
    17b0:	2300      	movs	r3, #0
}
    17b2:	0018      	movs	r0, r3
    17b4:	46bd      	mov	sp, r7
    17b6:	b002      	add	sp, #8
    17b8:	bd80      	pop	{r7, pc}
    17ba:	46c0      	nop			; (mov r8, r8)
    17bc:	00005244 	.word	0x00005244
    17c0:	00001a3f 	.word	0x00001a3f
    17c4:	00002f01 	.word	0x00002f01

000017c8 <usart_async_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_async_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    17c8:	b580      	push	{r7, lr}
    17ca:	b086      	sub	sp, #24
    17cc:	af00      	add	r7, sp, #0
    17ce:	60f8      	str	r0, [r7, #12]
    17d0:	60b9      	str	r1, [r7, #8]
    17d2:	1dbb      	adds	r3, r7, #6
    17d4:	801a      	strh	r2, [r3, #0]
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    17d6:	68fb      	ldr	r3, [r7, #12]
    17d8:	617b      	str	r3, [r7, #20]

	ASSERT(descr && buf && length);
    17da:	697b      	ldr	r3, [r7, #20]
    17dc:	2b00      	cmp	r3, #0
    17de:	d008      	beq.n	17f2 <usart_async_write+0x2a>
    17e0:	68bb      	ldr	r3, [r7, #8]
    17e2:	2b00      	cmp	r3, #0
    17e4:	d005      	beq.n	17f2 <usart_async_write+0x2a>
    17e6:	1dbb      	adds	r3, r7, #6
    17e8:	881b      	ldrh	r3, [r3, #0]
    17ea:	2b00      	cmp	r3, #0
    17ec:	d001      	beq.n	17f2 <usart_async_write+0x2a>
    17ee:	2301      	movs	r3, #1
    17f0:	e000      	b.n	17f4 <usart_async_write+0x2c>
    17f2:	2300      	movs	r3, #0
    17f4:	1c1a      	adds	r2, r3, #0
    17f6:	2301      	movs	r3, #1
    17f8:	4013      	ands	r3, r2
    17fa:	b2d8      	uxtb	r0, r3
    17fc:	233c      	movs	r3, #60	; 0x3c
    17fe:	33ff      	adds	r3, #255	; 0xff
    1800:	001a      	movs	r2, r3
    1802:	4b14      	ldr	r3, [pc, #80]	; (1854 <usart_async_write+0x8c>)
    1804:	0019      	movs	r1, r3
    1806:	4b14      	ldr	r3, [pc, #80]	; (1858 <usart_async_write+0x90>)
    1808:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
    180a:	697b      	ldr	r3, [r7, #20]
    180c:	2244      	movs	r2, #68	; 0x44
    180e:	5a9a      	ldrh	r2, [r3, r2]
    1810:	697b      	ldr	r3, [r7, #20]
    1812:	214c      	movs	r1, #76	; 0x4c
    1814:	5a5b      	ldrh	r3, [r3, r1]
    1816:	429a      	cmp	r2, r3
    1818:	d002      	beq.n	1820 <usart_async_write+0x58>
		return ERR_NO_RESOURCE;
    181a:	231c      	movs	r3, #28
    181c:	425b      	negs	r3, r3
    181e:	e015      	b.n	184c <usart_async_write+0x84>
	}
	descr->tx_buffer        = (uint8_t *)buf;
    1820:	697b      	ldr	r3, [r7, #20]
    1822:	68ba      	ldr	r2, [r7, #8]
    1824:	649a      	str	r2, [r3, #72]	; 0x48
	descr->tx_buffer_length = length;
    1826:	697b      	ldr	r3, [r7, #20]
    1828:	1dba      	adds	r2, r7, #6
    182a:	214c      	movs	r1, #76	; 0x4c
    182c:	8812      	ldrh	r2, [r2, #0]
    182e:	525a      	strh	r2, [r3, r1]
	descr->tx_por           = 0;
    1830:	697b      	ldr	r3, [r7, #20]
    1832:	2244      	movs	r2, #68	; 0x44
    1834:	2100      	movs	r1, #0
    1836:	5299      	strh	r1, [r3, r2]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1838:	697b      	ldr	r3, [r7, #20]
    183a:	2201      	movs	r2, #1
    183c:	631a      	str	r2, [r3, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    183e:	697b      	ldr	r3, [r7, #20]
    1840:	3308      	adds	r3, #8
    1842:	0018      	movs	r0, r3
    1844:	4b05      	ldr	r3, [pc, #20]	; (185c <usart_async_write+0x94>)
    1846:	4798      	blx	r3

	return (int32_t)length;
    1848:	1dbb      	adds	r3, r7, #6
    184a:	881b      	ldrh	r3, [r3, #0]
}
    184c:	0018      	movs	r0, r3
    184e:	46bd      	mov	sp, r7
    1850:	b006      	add	sp, #24
    1852:	bd80      	pop	{r7, pc}
    1854:	00005244 	.word	0x00005244
    1858:	00001a3f 	.word	0x00001a3f
    185c:	00002f4d 	.word	0x00002f4d

00001860 <usart_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1860:	b580      	push	{r7, lr}
    1862:	b088      	sub	sp, #32
    1864:	af00      	add	r7, sp, #0
    1866:	60f8      	str	r0, [r7, #12]
    1868:	60b9      	str	r1, [r7, #8]
    186a:	1dbb      	adds	r3, r7, #6
    186c:	801a      	strh	r2, [r3, #0]
	uint16_t                       was_read = 0;
    186e:	231e      	movs	r3, #30
    1870:	18fb      	adds	r3, r7, r3
    1872:	2200      	movs	r2, #0
    1874:	801a      	strh	r2, [r3, #0]
	uint32_t                       num;
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    1876:	68fb      	ldr	r3, [r7, #12]
    1878:	61bb      	str	r3, [r7, #24]

	ASSERT(descr && buf && length);
    187a:	69bb      	ldr	r3, [r7, #24]
    187c:	2b00      	cmp	r3, #0
    187e:	d008      	beq.n	1892 <usart_async_read+0x32>
    1880:	68bb      	ldr	r3, [r7, #8]
    1882:	2b00      	cmp	r3, #0
    1884:	d005      	beq.n	1892 <usart_async_read+0x32>
    1886:	1dbb      	adds	r3, r7, #6
    1888:	881b      	ldrh	r3, [r3, #0]
    188a:	2b00      	cmp	r3, #0
    188c:	d001      	beq.n	1892 <usart_async_read+0x32>
    188e:	2301      	movs	r3, #1
    1890:	e000      	b.n	1894 <usart_async_read+0x34>
    1892:	2300      	movs	r3, #0
    1894:	1c1a      	adds	r2, r3, #0
    1896:	2301      	movs	r3, #1
    1898:	4013      	ands	r3, r2
    189a:	b2d8      	uxtb	r0, r3
    189c:	23ac      	movs	r3, #172	; 0xac
    189e:	005a      	lsls	r2, r3, #1
    18a0:	4b1c      	ldr	r3, [pc, #112]	; (1914 <usart_async_read+0xb4>)
    18a2:	0019      	movs	r1, r3
    18a4:	4b1c      	ldr	r3, [pc, #112]	; (1918 <usart_async_read+0xb8>)
    18a6:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    18a8:	2310      	movs	r3, #16
    18aa:	18fb      	adds	r3, r7, r3
    18ac:	0018      	movs	r0, r3
    18ae:	4b1b      	ldr	r3, [pc, #108]	; (191c <usart_async_read+0xbc>)
    18b0:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    18b2:	69bb      	ldr	r3, [r7, #24]
    18b4:	3334      	adds	r3, #52	; 0x34
    18b6:	0018      	movs	r0, r3
    18b8:	4b19      	ldr	r3, [pc, #100]	; (1920 <usart_async_read+0xc0>)
    18ba:	4798      	blx	r3
    18bc:	0003      	movs	r3, r0
    18be:	617b      	str	r3, [r7, #20]
	CRITICAL_SECTION_LEAVE()
    18c0:	2310      	movs	r3, #16
    18c2:	18fb      	adds	r3, r7, r3
    18c4:	0018      	movs	r0, r3
    18c6:	4b17      	ldr	r3, [pc, #92]	; (1924 <usart_async_read+0xc4>)
    18c8:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
    18ca:	e00f      	b.n	18ec <usart_async_read+0x8c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    18cc:	69bb      	ldr	r3, [r7, #24]
    18ce:	3334      	adds	r3, #52	; 0x34
    18d0:	0018      	movs	r0, r3
    18d2:	231e      	movs	r3, #30
    18d4:	18fb      	adds	r3, r7, r3
    18d6:	881b      	ldrh	r3, [r3, #0]
    18d8:	221e      	movs	r2, #30
    18da:	18ba      	adds	r2, r7, r2
    18dc:	1c59      	adds	r1, r3, #1
    18de:	8011      	strh	r1, [r2, #0]
    18e0:	001a      	movs	r2, r3
    18e2:	68bb      	ldr	r3, [r7, #8]
    18e4:	189b      	adds	r3, r3, r2
    18e6:	0019      	movs	r1, r3
    18e8:	4b0f      	ldr	r3, [pc, #60]	; (1928 <usart_async_read+0xc8>)
    18ea:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    18ec:	231e      	movs	r3, #30
    18ee:	18fb      	adds	r3, r7, r3
    18f0:	881a      	ldrh	r2, [r3, #0]
    18f2:	697b      	ldr	r3, [r7, #20]
    18f4:	429a      	cmp	r2, r3
    18f6:	d206      	bcs.n	1906 <usart_async_read+0xa6>
    18f8:	231e      	movs	r3, #30
    18fa:	18fa      	adds	r2, r7, r3
    18fc:	1dbb      	adds	r3, r7, #6
    18fe:	8812      	ldrh	r2, [r2, #0]
    1900:	881b      	ldrh	r3, [r3, #0]
    1902:	429a      	cmp	r2, r3
    1904:	d3e2      	bcc.n	18cc <usart_async_read+0x6c>
	}

	return (int32_t)was_read;
    1906:	231e      	movs	r3, #30
    1908:	18fb      	adds	r3, r7, r3
    190a:	881b      	ldrh	r3, [r3, #0]
}
    190c:	0018      	movs	r0, r3
    190e:	46bd      	mov	sp, r7
    1910:	b008      	add	sp, #32
    1912:	bd80      	pop	{r7, pc}
    1914:	00005244 	.word	0x00005244
    1918:	00001a3f 	.word	0x00001a3f
    191c:	00000d09 	.word	0x00000d09
    1920:	00001bc9 	.word	0x00001bc9
    1924:	00000d2b 	.word	0x00000d2b
    1928:	00001ae1 	.word	0x00001ae1

0000192c <usart_process_byte_sent>:
 * \brief Process "byte is sent" interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_process_byte_sent(struct _usart_async_device *device)
{
    192c:	b5b0      	push	{r4, r5, r7, lr}
    192e:	b084      	sub	sp, #16
    1930:	af00      	add	r7, sp, #0
    1932:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1934:	687b      	ldr	r3, [r7, #4]
    1936:	3b08      	subs	r3, #8
    1938:	60fb      	str	r3, [r7, #12]
	if (descr->tx_por != descr->tx_buffer_length) {
    193a:	68fb      	ldr	r3, [r7, #12]
    193c:	2244      	movs	r2, #68	; 0x44
    193e:	5a9a      	ldrh	r2, [r3, r2]
    1940:	68fb      	ldr	r3, [r7, #12]
    1942:	214c      	movs	r1, #76	; 0x4c
    1944:	5a5b      	ldrh	r3, [r3, r1]
    1946:	429a      	cmp	r2, r3
    1948:	d018      	beq.n	197c <usart_process_byte_sent+0x50>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    194a:	68fb      	ldr	r3, [r7, #12]
    194c:	3308      	adds	r3, #8
    194e:	001c      	movs	r4, r3
    1950:	68fb      	ldr	r3, [r7, #12]
    1952:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    1954:	68fb      	ldr	r3, [r7, #12]
    1956:	2144      	movs	r1, #68	; 0x44
    1958:	5a5b      	ldrh	r3, [r3, r1]
    195a:	1c59      	adds	r1, r3, #1
    195c:	b28d      	uxth	r5, r1
    195e:	68f9      	ldr	r1, [r7, #12]
    1960:	2044      	movs	r0, #68	; 0x44
    1962:	520d      	strh	r5, [r1, r0]
    1964:	18d3      	adds	r3, r2, r3
    1966:	781b      	ldrb	r3, [r3, #0]
    1968:	0019      	movs	r1, r3
    196a:	0020      	movs	r0, r4
    196c:	4b08      	ldr	r3, [pc, #32]	; (1990 <usart_process_byte_sent+0x64>)
    196e:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1970:	68fb      	ldr	r3, [r7, #12]
    1972:	3308      	adds	r3, #8
    1974:	0018      	movs	r0, r3
    1976:	4b07      	ldr	r3, [pc, #28]	; (1994 <usart_process_byte_sent+0x68>)
    1978:	4798      	blx	r3
	} else {
		_usart_async_enable_tx_done_irq(&descr->device);
	}
}
    197a:	e004      	b.n	1986 <usart_process_byte_sent+0x5a>
		_usart_async_enable_tx_done_irq(&descr->device);
    197c:	68fb      	ldr	r3, [r7, #12]
    197e:	3308      	adds	r3, #8
    1980:	0018      	movs	r0, r3
    1982:	4b05      	ldr	r3, [pc, #20]	; (1998 <usart_process_byte_sent+0x6c>)
    1984:	4798      	blx	r3
}
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	46bd      	mov	sp, r7
    198a:	b004      	add	sp, #16
    198c:	bdb0      	pop	{r4, r5, r7, pc}
    198e:	46c0      	nop			; (mov r8, r8)
    1990:	00002f21 	.word	0x00002f21
    1994:	00002f4d 	.word	0x00002f4d
    1998:	00002f6d 	.word	0x00002f6d

0000199c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    199c:	b580      	push	{r7, lr}
    199e:	b084      	sub	sp, #16
    19a0:	af00      	add	r7, sp, #0
    19a2:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	3b08      	subs	r3, #8
    19a8:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    19aa:	68fb      	ldr	r3, [r7, #12]
    19ac:	2200      	movs	r2, #0
    19ae:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    19b0:	68fb      	ldr	r3, [r7, #12]
    19b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    19b4:	2b00      	cmp	r3, #0
    19b6:	d004      	beq.n	19c2 <usart_transmission_complete+0x26>
		descr->usart_cb.tx_done(descr);
    19b8:	68fb      	ldr	r3, [r7, #12]
    19ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    19bc:	68fa      	ldr	r2, [r7, #12]
    19be:	0010      	movs	r0, r2
    19c0:	4798      	blx	r3
	}
}
    19c2:	46c0      	nop			; (mov r8, r8)
    19c4:	46bd      	mov	sp, r7
    19c6:	b004      	add	sp, #16
    19c8:	bd80      	pop	{r7, pc}
	...

000019cc <usart_fill_rx_buffer>:
 *
 * \param[in] device The pointer to device structure
 * \param[in] data Data read
 */
static void usart_fill_rx_buffer(struct _usart_async_device *device, uint8_t data)
{
    19cc:	b580      	push	{r7, lr}
    19ce:	b084      	sub	sp, #16
    19d0:	af00      	add	r7, sp, #0
    19d2:	6078      	str	r0, [r7, #4]
    19d4:	000a      	movs	r2, r1
    19d6:	1cfb      	adds	r3, r7, #3
    19d8:	701a      	strb	r2, [r3, #0]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    19da:	687b      	ldr	r3, [r7, #4]
    19dc:	3b08      	subs	r3, #8
    19de:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
    19e0:	68fb      	ldr	r3, [r7, #12]
    19e2:	3334      	adds	r3, #52	; 0x34
    19e4:	001a      	movs	r2, r3
    19e6:	1cfb      	adds	r3, r7, #3
    19e8:	781b      	ldrb	r3, [r3, #0]
    19ea:	0019      	movs	r1, r3
    19ec:	0010      	movs	r0, r2
    19ee:	4b07      	ldr	r3, [pc, #28]	; (1a0c <usart_fill_rx_buffer+0x40>)
    19f0:	4798      	blx	r3

	if (descr->usart_cb.rx_done) {
    19f2:	68fb      	ldr	r3, [r7, #12]
    19f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    19f6:	2b00      	cmp	r3, #0
    19f8:	d004      	beq.n	1a04 <usart_fill_rx_buffer+0x38>
		descr->usart_cb.rx_done(descr);
    19fa:	68fb      	ldr	r3, [r7, #12]
    19fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    19fe:	68fa      	ldr	r2, [r7, #12]
    1a00:	0010      	movs	r0, r2
    1a02:	4798      	blx	r3
	}
}
    1a04:	46c0      	nop			; (mov r8, r8)
    1a06:	46bd      	mov	sp, r7
    1a08:	b004      	add	sp, #16
    1a0a:	bd80      	pop	{r7, pc}
    1a0c:	00001b55 	.word	0x00001b55

00001a10 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1a10:	b580      	push	{r7, lr}
    1a12:	b084      	sub	sp, #16
    1a14:	af00      	add	r7, sp, #0
    1a16:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1a18:	687b      	ldr	r3, [r7, #4]
    1a1a:	3b08      	subs	r3, #8
    1a1c:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    1a1e:	68fb      	ldr	r3, [r7, #12]
    1a20:	2200      	movs	r2, #0
    1a22:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.error) {
    1a24:	68fb      	ldr	r3, [r7, #12]
    1a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d004      	beq.n	1a36 <usart_error+0x26>
		descr->usart_cb.error(descr);
    1a2c:	68fb      	ldr	r3, [r7, #12]
    1a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a30:	68fa      	ldr	r2, [r7, #12]
    1a32:	0010      	movs	r0, r2
    1a34:	4798      	blx	r3
	}
}
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	46bd      	mov	sp, r7
    1a3a:	b004      	add	sp, #16
    1a3c:	bd80      	pop	{r7, pc}

00001a3e <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    1a3e:	b580      	push	{r7, lr}
    1a40:	b084      	sub	sp, #16
    1a42:	af00      	add	r7, sp, #0
    1a44:	60b9      	str	r1, [r7, #8]
    1a46:	607a      	str	r2, [r7, #4]
    1a48:	230f      	movs	r3, #15
    1a4a:	18fb      	adds	r3, r7, r3
    1a4c:	1c02      	adds	r2, r0, #0
    1a4e:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
    1a50:	230f      	movs	r3, #15
    1a52:	18fb      	adds	r3, r7, r3
    1a54:	781b      	ldrb	r3, [r3, #0]
    1a56:	2201      	movs	r2, #1
    1a58:	4053      	eors	r3, r2
    1a5a:	b2db      	uxtb	r3, r3
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	d000      	beq.n	1a62 <assert+0x24>
		__asm("BKPT #0");
    1a60:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1a62:	46c0      	nop			; (mov r8, r8)
    1a64:	46bd      	mov	sp, r7
    1a66:	b004      	add	sp, #16
    1a68:	bd80      	pop	{r7, pc}
	...

00001a6c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1a6c:	b580      	push	{r7, lr}
    1a6e:	b084      	sub	sp, #16
    1a70:	af00      	add	r7, sp, #0
    1a72:	60f8      	str	r0, [r7, #12]
    1a74:	60b9      	str	r1, [r7, #8]
    1a76:	607a      	str	r2, [r7, #4]
	ASSERT(rb && buf && size);
    1a78:	68fb      	ldr	r3, [r7, #12]
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	d007      	beq.n	1a8e <ringbuffer_init+0x22>
    1a7e:	68bb      	ldr	r3, [r7, #8]
    1a80:	2b00      	cmp	r3, #0
    1a82:	d004      	beq.n	1a8e <ringbuffer_init+0x22>
    1a84:	687b      	ldr	r3, [r7, #4]
    1a86:	2b00      	cmp	r3, #0
    1a88:	d001      	beq.n	1a8e <ringbuffer_init+0x22>
    1a8a:	2301      	movs	r3, #1
    1a8c:	e000      	b.n	1a90 <ringbuffer_init+0x24>
    1a8e:	2300      	movs	r3, #0
    1a90:	1c1a      	adds	r2, r3, #0
    1a92:	2301      	movs	r3, #1
    1a94:	4013      	ands	r3, r2
    1a96:	b2db      	uxtb	r3, r3
    1a98:	490f      	ldr	r1, [pc, #60]	; (1ad8 <ringbuffer_init+0x6c>)
    1a9a:	2228      	movs	r2, #40	; 0x28
    1a9c:	0018      	movs	r0, r3
    1a9e:	4b0f      	ldr	r3, [pc, #60]	; (1adc <ringbuffer_init+0x70>)
    1aa0:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1aa2:	687b      	ldr	r3, [r7, #4]
    1aa4:	3b01      	subs	r3, #1
    1aa6:	687a      	ldr	r2, [r7, #4]
    1aa8:	4013      	ands	r3, r2
    1aaa:	d002      	beq.n	1ab2 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
    1aac:	230d      	movs	r3, #13
    1aae:	425b      	negs	r3, r3
    1ab0:	e00e      	b.n	1ad0 <ringbuffer_init+0x64>
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1ab2:	687b      	ldr	r3, [r7, #4]
    1ab4:	1e5a      	subs	r2, r3, #1
    1ab6:	68fb      	ldr	r3, [r7, #12]
    1ab8:	605a      	str	r2, [r3, #4]
	rb->read_index  = 0;
    1aba:	68fb      	ldr	r3, [r7, #12]
    1abc:	2200      	movs	r2, #0
    1abe:	609a      	str	r2, [r3, #8]
	rb->write_index = rb->read_index;
    1ac0:	68fb      	ldr	r3, [r7, #12]
    1ac2:	689a      	ldr	r2, [r3, #8]
    1ac4:	68fb      	ldr	r3, [r7, #12]
    1ac6:	60da      	str	r2, [r3, #12]
	rb->buf         = (uint8_t *)buf;
    1ac8:	68fb      	ldr	r3, [r7, #12]
    1aca:	68ba      	ldr	r2, [r7, #8]
    1acc:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    1ace:	2300      	movs	r3, #0
}
    1ad0:	0018      	movs	r0, r3
    1ad2:	46bd      	mov	sp, r7
    1ad4:	b004      	add	sp, #16
    1ad6:	bd80      	pop	{r7, pc}
    1ad8:	00005264 	.word	0x00005264
    1adc:	00001a3f 	.word	0x00001a3f

00001ae0 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1ae0:	b580      	push	{r7, lr}
    1ae2:	b082      	sub	sp, #8
    1ae4:	af00      	add	r7, sp, #0
    1ae6:	6078      	str	r0, [r7, #4]
    1ae8:	6039      	str	r1, [r7, #0]
	ASSERT(rb && data);
    1aea:	687b      	ldr	r3, [r7, #4]
    1aec:	2b00      	cmp	r3, #0
    1aee:	d004      	beq.n	1afa <ringbuffer_get+0x1a>
    1af0:	683b      	ldr	r3, [r7, #0]
    1af2:	2b00      	cmp	r3, #0
    1af4:	d001      	beq.n	1afa <ringbuffer_get+0x1a>
    1af6:	2301      	movs	r3, #1
    1af8:	e000      	b.n	1afc <ringbuffer_get+0x1c>
    1afa:	2300      	movs	r3, #0
    1afc:	1c1a      	adds	r2, r3, #0
    1afe:	2301      	movs	r3, #1
    1b00:	4013      	ands	r3, r2
    1b02:	b2db      	uxtb	r3, r3
    1b04:	4911      	ldr	r1, [pc, #68]	; (1b4c <ringbuffer_get+0x6c>)
    1b06:	2240      	movs	r2, #64	; 0x40
    1b08:	0018      	movs	r0, r3
    1b0a:	4b11      	ldr	r3, [pc, #68]	; (1b50 <ringbuffer_get+0x70>)
    1b0c:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	68da      	ldr	r2, [r3, #12]
    1b12:	687b      	ldr	r3, [r7, #4]
    1b14:	689b      	ldr	r3, [r3, #8]
    1b16:	429a      	cmp	r2, r3
    1b18:	d011      	beq.n	1b3e <ringbuffer_get+0x5e>
		*data = rb->buf[rb->read_index & rb->size];
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	681a      	ldr	r2, [r3, #0]
    1b1e:	687b      	ldr	r3, [r7, #4]
    1b20:	6899      	ldr	r1, [r3, #8]
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	685b      	ldr	r3, [r3, #4]
    1b26:	400b      	ands	r3, r1
    1b28:	18d3      	adds	r3, r2, r3
    1b2a:	781a      	ldrb	r2, [r3, #0]
    1b2c:	683b      	ldr	r3, [r7, #0]
    1b2e:	701a      	strb	r2, [r3, #0]
		rb->read_index++;
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	689b      	ldr	r3, [r3, #8]
    1b34:	1c5a      	adds	r2, r3, #1
    1b36:	687b      	ldr	r3, [r7, #4]
    1b38:	609a      	str	r2, [r3, #8]
		return ERR_NONE;
    1b3a:	2300      	movs	r3, #0
    1b3c:	e001      	b.n	1b42 <ringbuffer_get+0x62>
	}

	return ERR_NOT_FOUND;
    1b3e:	230a      	movs	r3, #10
    1b40:	425b      	negs	r3, r3
}
    1b42:	0018      	movs	r0, r3
    1b44:	46bd      	mov	sp, r7
    1b46:	b002      	add	sp, #8
    1b48:	bd80      	pop	{r7, pc}
    1b4a:	46c0      	nop			; (mov r8, r8)
    1b4c:	00005264 	.word	0x00005264
    1b50:	00001a3f 	.word	0x00001a3f

00001b54 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1b54:	b580      	push	{r7, lr}
    1b56:	b082      	sub	sp, #8
    1b58:	af00      	add	r7, sp, #0
    1b5a:	6078      	str	r0, [r7, #4]
    1b5c:	000a      	movs	r2, r1
    1b5e:	1cfb      	adds	r3, r7, #3
    1b60:	701a      	strb	r2, [r3, #0]
	ASSERT(rb);
    1b62:	687b      	ldr	r3, [r7, #4]
    1b64:	1e5a      	subs	r2, r3, #1
    1b66:	4193      	sbcs	r3, r2
    1b68:	b2db      	uxtb	r3, r3
    1b6a:	4915      	ldr	r1, [pc, #84]	; (1bc0 <ringbuffer_put+0x6c>)
    1b6c:	2251      	movs	r2, #81	; 0x51
    1b6e:	0018      	movs	r0, r3
    1b70:	4b14      	ldr	r3, [pc, #80]	; (1bc4 <ringbuffer_put+0x70>)
    1b72:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1b74:	687b      	ldr	r3, [r7, #4]
    1b76:	681a      	ldr	r2, [r3, #0]
    1b78:	687b      	ldr	r3, [r7, #4]
    1b7a:	68d9      	ldr	r1, [r3, #12]
    1b7c:	687b      	ldr	r3, [r7, #4]
    1b7e:	685b      	ldr	r3, [r3, #4]
    1b80:	400b      	ands	r3, r1
    1b82:	18d3      	adds	r3, r2, r3
    1b84:	1cfa      	adds	r2, r7, #3
    1b86:	7812      	ldrb	r2, [r2, #0]
    1b88:	701a      	strb	r2, [r3, #0]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1b8a:	687b      	ldr	r3, [r7, #4]
    1b8c:	68da      	ldr	r2, [r3, #12]
    1b8e:	687b      	ldr	r3, [r7, #4]
    1b90:	689b      	ldr	r3, [r3, #8]
    1b92:	1ad2      	subs	r2, r2, r3
    1b94:	687b      	ldr	r3, [r7, #4]
    1b96:	685b      	ldr	r3, [r3, #4]
    1b98:	429a      	cmp	r2, r3
    1b9a:	d906      	bls.n	1baa <ringbuffer_put+0x56>
		rb->read_index = rb->write_index - rb->size;
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	68da      	ldr	r2, [r3, #12]
    1ba0:	687b      	ldr	r3, [r7, #4]
    1ba2:	685b      	ldr	r3, [r3, #4]
    1ba4:	1ad2      	subs	r2, r2, r3
    1ba6:	687b      	ldr	r3, [r7, #4]
    1ba8:	609a      	str	r2, [r3, #8]
	}

	rb->write_index++;
    1baa:	687b      	ldr	r3, [r7, #4]
    1bac:	68db      	ldr	r3, [r3, #12]
    1bae:	1c5a      	adds	r2, r3, #1
    1bb0:	687b      	ldr	r3, [r7, #4]
    1bb2:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1bb4:	2300      	movs	r3, #0
}
    1bb6:	0018      	movs	r0, r3
    1bb8:	46bd      	mov	sp, r7
    1bba:	b002      	add	sp, #8
    1bbc:	bd80      	pop	{r7, pc}
    1bbe:	46c0      	nop			; (mov r8, r8)
    1bc0:	00005264 	.word	0x00005264
    1bc4:	00001a3f 	.word	0x00001a3f

00001bc8 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1bc8:	b580      	push	{r7, lr}
    1bca:	b082      	sub	sp, #8
    1bcc:	af00      	add	r7, sp, #0
    1bce:	6078      	str	r0, [r7, #4]
	ASSERT(rb);
    1bd0:	687b      	ldr	r3, [r7, #4]
    1bd2:	1e5a      	subs	r2, r3, #1
    1bd4:	4193      	sbcs	r3, r2
    1bd6:	b2db      	uxtb	r3, r3
    1bd8:	4906      	ldr	r1, [pc, #24]	; (1bf4 <ringbuffer_num+0x2c>)
    1bda:	2267      	movs	r2, #103	; 0x67
    1bdc:	0018      	movs	r0, r3
    1bde:	4b06      	ldr	r3, [pc, #24]	; (1bf8 <ringbuffer_num+0x30>)
    1be0:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1be2:	687b      	ldr	r3, [r7, #4]
    1be4:	68da      	ldr	r2, [r3, #12]
    1be6:	687b      	ldr	r3, [r7, #4]
    1be8:	689b      	ldr	r3, [r3, #8]
    1bea:	1ad3      	subs	r3, r2, r3
}
    1bec:	0018      	movs	r0, r3
    1bee:	46bd      	mov	sp, r7
    1bf0:	b002      	add	sp, #8
    1bf2:	bd80      	pop	{r7, pc}
    1bf4:	00005264 	.word	0x00005264
    1bf8:	00001a3f 	.word	0x00001a3f

00001bfc <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1bfc:	b580      	push	{r7, lr}
    1bfe:	b084      	sub	sp, #16
    1c00:	af00      	add	r7, sp, #0
    1c02:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1c04:	4b0a      	ldr	r3, [pc, #40]	; (1c30 <_sbrk+0x34>)
    1c06:	681b      	ldr	r3, [r3, #0]
    1c08:	2b00      	cmp	r3, #0
    1c0a:	d102      	bne.n	1c12 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    1c0c:	4b08      	ldr	r3, [pc, #32]	; (1c30 <_sbrk+0x34>)
    1c0e:	4a09      	ldr	r2, [pc, #36]	; (1c34 <_sbrk+0x38>)
    1c10:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    1c12:	4b07      	ldr	r3, [pc, #28]	; (1c30 <_sbrk+0x34>)
    1c14:	681b      	ldr	r3, [r3, #0]
    1c16:	60fb      	str	r3, [r7, #12]

	heap += incr;
    1c18:	4b05      	ldr	r3, [pc, #20]	; (1c30 <_sbrk+0x34>)
    1c1a:	681a      	ldr	r2, [r3, #0]
    1c1c:	687b      	ldr	r3, [r7, #4]
    1c1e:	18d2      	adds	r2, r2, r3
    1c20:	4b03      	ldr	r3, [pc, #12]	; (1c30 <_sbrk+0x34>)
    1c22:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap;
    1c24:	68fb      	ldr	r3, [r7, #12]
}
    1c26:	0018      	movs	r0, r3
    1c28:	46bd      	mov	sp, r7
    1c2a:	b004      	add	sp, #16
    1c2c:	bd80      	pop	{r7, pc}
    1c2e:	46c0      	nop			; (mov r8, r8)
    1c30:	200000ac 	.word	0x200000ac
    1c34:	20002200 	.word	0x20002200

00001c38 <_go_to_sleep>:

/**
 * \brief Put MCU to sleep
 */
void _go_to_sleep(void)
{
    1c38:	b580      	push	{r7, lr}
    1c3a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
    1c3c:	f3bf 8f4f 	dsb	sy
	__DSB();
	__WFI();
    1c40:	bf30      	wfi
}
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	46bd      	mov	sp, r7
    1c46:	bd80      	pop	{r7, pc}

00001c48 <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_CACHEDIS;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    1c48:	b580      	push	{r7, lr}
    1c4a:	b082      	sub	sp, #8
    1c4c:	af00      	add	r7, sp, #0
    1c4e:	6078      	str	r0, [r7, #4]
    1c50:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1c52:	687b      	ldr	r3, [r7, #4]
    1c54:	685a      	ldr	r2, [r3, #4]
    1c56:	683b      	ldr	r3, [r7, #0]
    1c58:	005b      	lsls	r3, r3, #1
    1c5a:	211e      	movs	r1, #30
    1c5c:	400b      	ands	r3, r1
    1c5e:	431a      	orrs	r2, r3
    1c60:	687b      	ldr	r3, [r7, #4]
    1c62:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    1c64:	46c0      	nop			; (mov r8, r8)
    1c66:	46bd      	mov	sp, r7
    1c68:	b002      	add	sp, #8
    1c6a:	bd80      	pop	{r7, pc}

00001c6c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1c6c:	b580      	push	{r7, lr}
    1c6e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    1c70:	4b08      	ldr	r3, [pc, #32]	; (1c94 <_init_chip+0x28>)
    1c72:	2100      	movs	r1, #0
    1c74:	0018      	movs	r0, r3
    1c76:	4b08      	ldr	r3, [pc, #32]	; (1c98 <_init_chip+0x2c>)
    1c78:	4798      	blx	r3

	_pm_init();
    1c7a:	4b08      	ldr	r3, [pc, #32]	; (1c9c <_init_chip+0x30>)
    1c7c:	4798      	blx	r3
	_sysctrl_init_sources();
    1c7e:	4b08      	ldr	r3, [pc, #32]	; (1ca0 <_init_chip+0x34>)
    1c80:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    1c82:	4b08      	ldr	r3, [pc, #32]	; (1ca4 <_init_chip+0x38>)
    1c84:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1c86:	20ff      	movs	r0, #255	; 0xff
    1c88:	4b07      	ldr	r3, [pc, #28]	; (1ca8 <_init_chip+0x3c>)
    1c8a:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    1c8c:	46c0      	nop			; (mov r8, r8)
    1c8e:	46bd      	mov	sp, r7
    1c90:	bd80      	pop	{r7, pc}
    1c92:	46c0      	nop			; (mov r8, r8)
    1c94:	41004000 	.word	0x41004000
    1c98:	00001c49 	.word	0x00001c49
    1c9c:	00002405 	.word	0x00002405
    1ca0:	00003581 	.word	0x00003581
    1ca4:	00003641 	.word	0x00003641
    1ca8:	00002289 	.word	0x00002289

00001cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1cac:	b580      	push	{r7, lr}
    1cae:	b082      	sub	sp, #8
    1cb0:	af00      	add	r7, sp, #0
    1cb2:	0002      	movs	r2, r0
    1cb4:	1dfb      	adds	r3, r7, #7
    1cb6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    1cb8:	1dfb      	adds	r3, r7, #7
    1cba:	781b      	ldrb	r3, [r3, #0]
    1cbc:	2b7f      	cmp	r3, #127	; 0x7f
    1cbe:	d809      	bhi.n	1cd4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cc0:	4b06      	ldr	r3, [pc, #24]	; (1cdc <__NVIC_EnableIRQ+0x30>)
    1cc2:	1dfa      	adds	r2, r7, #7
    1cc4:	7812      	ldrb	r2, [r2, #0]
    1cc6:	0011      	movs	r1, r2
    1cc8:	221f      	movs	r2, #31
    1cca:	400a      	ands	r2, r1
    1ccc:	2101      	movs	r1, #1
    1cce:	4091      	lsls	r1, r2
    1cd0:	000a      	movs	r2, r1
    1cd2:	601a      	str	r2, [r3, #0]
  }
}
    1cd4:	46c0      	nop			; (mov r8, r8)
    1cd6:	46bd      	mov	sp, r7
    1cd8:	b002      	add	sp, #8
    1cda:	bd80      	pop	{r7, pc}
    1cdc:	e000e100 	.word	0xe000e100

00001ce0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    1ce0:	b580      	push	{r7, lr}
    1ce2:	b082      	sub	sp, #8
    1ce4:	af00      	add	r7, sp, #0
    1ce6:	0002      	movs	r2, r0
    1ce8:	1dfb      	adds	r3, r7, #7
    1cea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    1cec:	1dfb      	adds	r3, r7, #7
    1cee:	781b      	ldrb	r3, [r3, #0]
    1cf0:	2b7f      	cmp	r3, #127	; 0x7f
    1cf2:	d80e      	bhi.n	1d12 <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cf4:	4909      	ldr	r1, [pc, #36]	; (1d1c <__NVIC_DisableIRQ+0x3c>)
    1cf6:	1dfb      	adds	r3, r7, #7
    1cf8:	781b      	ldrb	r3, [r3, #0]
    1cfa:	001a      	movs	r2, r3
    1cfc:	231f      	movs	r3, #31
    1cfe:	4013      	ands	r3, r2
    1d00:	2201      	movs	r2, #1
    1d02:	409a      	lsls	r2, r3
    1d04:	0013      	movs	r3, r2
    1d06:	2280      	movs	r2, #128	; 0x80
    1d08:	508b      	str	r3, [r1, r2]
    1d0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d0e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    1d12:	46c0      	nop			; (mov r8, r8)
    1d14:	46bd      	mov	sp, r7
    1d16:	b002      	add	sp, #8
    1d18:	bd80      	pop	{r7, pc}
    1d1a:	46c0      	nop			; (mov r8, r8)
    1d1c:	e000e100 	.word	0xe000e100

00001d20 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    1d20:	b580      	push	{r7, lr}
    1d22:	b082      	sub	sp, #8
    1d24:	af00      	add	r7, sp, #0
    1d26:	0002      	movs	r2, r0
    1d28:	1dfb      	adds	r3, r7, #7
    1d2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    1d2c:	1dfb      	adds	r3, r7, #7
    1d2e:	781b      	ldrb	r3, [r3, #0]
    1d30:	2b7f      	cmp	r3, #127	; 0x7f
    1d32:	d80a      	bhi.n	1d4a <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d34:	4907      	ldr	r1, [pc, #28]	; (1d54 <__NVIC_ClearPendingIRQ+0x34>)
    1d36:	1dfb      	adds	r3, r7, #7
    1d38:	781b      	ldrb	r3, [r3, #0]
    1d3a:	001a      	movs	r2, r3
    1d3c:	231f      	movs	r3, #31
    1d3e:	4013      	ands	r3, r2
    1d40:	2201      	movs	r2, #1
    1d42:	409a      	lsls	r2, r3
    1d44:	23c0      	movs	r3, #192	; 0xc0
    1d46:	005b      	lsls	r3, r3, #1
    1d48:	50ca      	str	r2, [r1, r3]
  }
}
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	46bd      	mov	sp, r7
    1d4e:	b002      	add	sp, #8
    1d50:	bd80      	pop	{r7, pc}
    1d52:	46c0      	nop			; (mov r8, r8)
    1d54:	e000e100 	.word	0xe000e100

00001d58 <hri_eic_wait_for_sync>:
typedef uint8_t  hri_eic_nmictrl_reg_t;
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
    1d58:	b580      	push	{r7, lr}
    1d5a:	b082      	sub	sp, #8
    1d5c:	af00      	add	r7, sp, #0
    1d5e:	6078      	str	r0, [r7, #4]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1d60:	46c0      	nop			; (mov r8, r8)
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	785b      	ldrb	r3, [r3, #1]
    1d66:	061b      	lsls	r3, r3, #24
    1d68:	0fdb      	lsrs	r3, r3, #31
    1d6a:	b2db      	uxtb	r3, r3
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	d1f8      	bne.n	1d62 <hri_eic_wait_for_sync+0xa>
		;
}
    1d70:	46c0      	nop			; (mov r8, r8)
    1d72:	46bd      	mov	sp, r7
    1d74:	b002      	add	sp, #8
    1d76:	bd80      	pop	{r7, pc}

00001d78 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    1d78:	b580      	push	{r7, lr}
    1d7a:	b082      	sub	sp, #8
    1d7c:	af00      	add	r7, sp, #0
    1d7e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    1d80:	687b      	ldr	r3, [r7, #4]
    1d82:	691b      	ldr	r3, [r3, #16]
}
    1d84:	0018      	movs	r0, r3
    1d86:	46bd      	mov	sp, r7
    1d88:	b002      	add	sp, #8
    1d8a:	bd80      	pop	{r7, pc}

00001d8c <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    1d8c:	b580      	push	{r7, lr}
    1d8e:	b082      	sub	sp, #8
    1d90:	af00      	add	r7, sp, #0
    1d92:	6078      	str	r0, [r7, #4]
    1d94:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    1d96:	687b      	ldr	r3, [r7, #4]
    1d98:	683a      	ldr	r2, [r7, #0]
    1d9a:	611a      	str	r2, [r3, #16]
}
    1d9c:	46c0      	nop			; (mov r8, r8)
    1d9e:	46bd      	mov	sp, r7
    1da0:	b002      	add	sp, #8
    1da2:	bd80      	pop	{r7, pc}

00001da4 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT15;
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    1da4:	b580      	push	{r7, lr}
    1da6:	b082      	sub	sp, #8
    1da8:	af00      	add	r7, sp, #0
    1daa:	6078      	str	r0, [r7, #4]
    1dac:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    1dae:	687b      	ldr	r3, [r7, #4]
    1db0:	683a      	ldr	r2, [r7, #0]
    1db2:	60da      	str	r2, [r3, #12]
}
    1db4:	46c0      	nop			; (mov r8, r8)
    1db6:	46bd      	mov	sp, r7
    1db8:	b002      	add	sp, #8
    1dba:	bd80      	pop	{r7, pc}

00001dbc <hri_eic_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intenset_reg_t hri_eic_read_INTEN_reg(const void *const hw)
{
    1dbc:	b580      	push	{r7, lr}
    1dbe:	b082      	sub	sp, #8
    1dc0:	af00      	add	r7, sp, #0
    1dc2:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTENSET.reg;
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	68db      	ldr	r3, [r3, #12]
}
    1dc8:	0018      	movs	r0, r3
    1dca:	46bd      	mov	sp, r7
    1dcc:	b002      	add	sp, #8
    1dce:	bd80      	pop	{r7, pc}

00001dd0 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    1dd0:	b580      	push	{r7, lr}
    1dd2:	b082      	sub	sp, #8
    1dd4:	af00      	add	r7, sp, #0
    1dd6:	6078      	str	r0, [r7, #4]
    1dd8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    1dda:	687b      	ldr	r3, [r7, #4]
    1ddc:	683a      	ldr	r2, [r7, #0]
    1dde:	609a      	str	r2, [r3, #8]
}
    1de0:	46c0      	nop			; (mov r8, r8)
    1de2:	46bd      	mov	sp, r7
    1de4:	b002      	add	sp, #8
    1de6:	bd80      	pop	{r7, pc}

00001de8 <hri_eic_set_CTRL_ENABLE_bit>:
	tmp = (tmp & EIC_CTRL_SWRST) >> EIC_CTRL_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRL_ENABLE_bit(const void *const hw)
{
    1de8:	b580      	push	{r7, lr}
    1dea:	b082      	sub	sp, #8
    1dec:	af00      	add	r7, sp, #0
    1dee:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	781b      	ldrb	r3, [r3, #0]
    1df4:	b2db      	uxtb	r3, r3
    1df6:	2202      	movs	r2, #2
    1df8:	4313      	orrs	r3, r2
    1dfa:	b2da      	uxtb	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw);
    1e00:	687b      	ldr	r3, [r7, #4]
    1e02:	0018      	movs	r0, r3
    1e04:	4b02      	ldr	r3, [pc, #8]	; (1e10 <hri_eic_set_CTRL_ENABLE_bit+0x28>)
    1e06:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    1e08:	46c0      	nop			; (mov r8, r8)
    1e0a:	46bd      	mov	sp, r7
    1e0c:	b002      	add	sp, #8
    1e0e:	bd80      	pop	{r7, pc}
    1e10:	00001d59 	.word	0x00001d59

00001e14 <hri_eic_get_CTRL_reg>:
	hri_eic_wait_for_sync(hw);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
    1e14:	b580      	push	{r7, lr}
    1e16:	b084      	sub	sp, #16
    1e18:	af00      	add	r7, sp, #0
    1e1a:	6078      	str	r0, [r7, #4]
    1e1c:	000a      	movs	r2, r1
    1e1e:	1cfb      	adds	r3, r7, #3
    1e20:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
    1e22:	687b      	ldr	r3, [r7, #4]
    1e24:	0018      	movs	r0, r3
    1e26:	4b0b      	ldr	r3, [pc, #44]	; (1e54 <hri_eic_get_CTRL_reg+0x40>)
    1e28:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRL.reg;
    1e2a:	230f      	movs	r3, #15
    1e2c:	18fb      	adds	r3, r7, r3
    1e2e:	687a      	ldr	r2, [r7, #4]
    1e30:	7812      	ldrb	r2, [r2, #0]
    1e32:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    1e34:	230f      	movs	r3, #15
    1e36:	18fb      	adds	r3, r7, r3
    1e38:	220f      	movs	r2, #15
    1e3a:	18ba      	adds	r2, r7, r2
    1e3c:	1cf9      	adds	r1, r7, #3
    1e3e:	7812      	ldrb	r2, [r2, #0]
    1e40:	7809      	ldrb	r1, [r1, #0]
    1e42:	400a      	ands	r2, r1
    1e44:	701a      	strb	r2, [r3, #0]
	return tmp;
    1e46:	230f      	movs	r3, #15
    1e48:	18fb      	adds	r3, r7, r3
    1e4a:	781b      	ldrb	r3, [r3, #0]
}
    1e4c:	0018      	movs	r0, r3
    1e4e:	46bd      	mov	sp, r7
    1e50:	b004      	add	sp, #16
    1e52:	bd80      	pop	{r7, pc}
    1e54:	00001d59 	.word	0x00001d59

00001e58 <hri_eic_write_CTRL_reg>:

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
    1e58:	b580      	push	{r7, lr}
    1e5a:	b082      	sub	sp, #8
    1e5c:	af00      	add	r7, sp, #0
    1e5e:	6078      	str	r0, [r7, #4]
    1e60:	000a      	movs	r2, r1
    1e62:	1cfb      	adds	r3, r7, #3
    1e64:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    1e66:	687b      	ldr	r3, [r7, #4]
    1e68:	1cfa      	adds	r2, r7, #3
    1e6a:	7812      	ldrb	r2, [r2, #0]
    1e6c:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw);
    1e6e:	687b      	ldr	r3, [r7, #4]
    1e70:	0018      	movs	r0, r3
    1e72:	4b03      	ldr	r3, [pc, #12]	; (1e80 <hri_eic_write_CTRL_reg+0x28>)
    1e74:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	46bd      	mov	sp, r7
    1e7a:	b002      	add	sp, #8
    1e7c:	bd80      	pop	{r7, pc}
    1e7e:	46c0      	nop			; (mov r8, r8)
    1e80:	00001d59 	.word	0x00001d59

00001e84 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    1e84:	b580      	push	{r7, lr}
    1e86:	b082      	sub	sp, #8
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	000a      	movs	r2, r1
    1e8e:	1cfb      	adds	r3, r7, #3
    1e90:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1e92:	687b      	ldr	r3, [r7, #4]
    1e94:	1cfa      	adds	r2, r7, #3
    1e96:	7812      	ldrb	r2, [r2, #0]
    1e98:	709a      	strb	r2, [r3, #2]
	EIC_CRITICAL_SECTION_LEAVE();
}
    1e9a:	46c0      	nop			; (mov r8, r8)
    1e9c:	46bd      	mov	sp, r7
    1e9e:	b002      	add	sp, #8
    1ea0:	bd80      	pop	{r7, pc}

00001ea2 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    1ea2:	b580      	push	{r7, lr}
    1ea4:	b082      	sub	sp, #8
    1ea6:	af00      	add	r7, sp, #0
    1ea8:	6078      	str	r0, [r7, #4]
    1eaa:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1eac:	687b      	ldr	r3, [r7, #4]
    1eae:	683a      	ldr	r2, [r7, #0]
    1eb0:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    1eb2:	46c0      	nop			; (mov r8, r8)
    1eb4:	46bd      	mov	sp, r7
    1eb6:	b002      	add	sp, #8
    1eb8:	bd80      	pop	{r7, pc}

00001eba <hri_eic_write_WAKEUP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
    1eba:	b580      	push	{r7, lr}
    1ebc:	b082      	sub	sp, #8
    1ebe:	af00      	add	r7, sp, #0
    1ec0:	6078      	str	r0, [r7, #4]
    1ec2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    1ec4:	687b      	ldr	r3, [r7, #4]
    1ec6:	683a      	ldr	r2, [r7, #0]
    1ec8:	615a      	str	r2, [r3, #20]
	EIC_CRITICAL_SECTION_LEAVE();
}
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	46bd      	mov	sp, r7
    1ece:	b002      	add	sp, #8
    1ed0:	bd80      	pop	{r7, pc}

00001ed2 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    1ed2:	b580      	push	{r7, lr}
    1ed4:	b084      	sub	sp, #16
    1ed6:	af00      	add	r7, sp, #0
    1ed8:	60f8      	str	r0, [r7, #12]
    1eda:	607a      	str	r2, [r7, #4]
    1edc:	230b      	movs	r3, #11
    1ede:	18fb      	adds	r3, r7, r3
    1ee0:	1c0a      	adds	r2, r1, #0
    1ee2:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    1ee4:	230b      	movs	r3, #11
    1ee6:	18fb      	adds	r3, r7, r3
    1ee8:	781a      	ldrb	r2, [r3, #0]
    1eea:	68fb      	ldr	r3, [r7, #12]
    1eec:	3206      	adds	r2, #6
    1eee:	0092      	lsls	r2, r2, #2
    1ef0:	6879      	ldr	r1, [r7, #4]
    1ef2:	50d1      	str	r1, [r2, r3]
	EIC_CRITICAL_SECTION_LEAVE();
}
    1ef4:	46c0      	nop			; (mov r8, r8)
    1ef6:	46bd      	mov	sp, r7
    1ef8:	b004      	add	sp, #16
    1efa:	bd80      	pop	{r7, pc}

00001efc <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    1efc:	b580      	push	{r7, lr}
    1efe:	b082      	sub	sp, #8
    1f00:	af00      	add	r7, sp, #0
    1f02:	6078      	str	r0, [r7, #4]
	hri_eic_wait_for_sync(EIC);
    1f04:	4b27      	ldr	r3, [pc, #156]	; (1fa4 <_ext_irq_init+0xa8>)
    1f06:	0018      	movs	r0, r3
    1f08:	4b27      	ldr	r3, [pc, #156]	; (1fa8 <_ext_irq_init+0xac>)
    1f0a:	4798      	blx	r3
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    1f0c:	4b25      	ldr	r3, [pc, #148]	; (1fa4 <_ext_irq_init+0xa8>)
    1f0e:	2102      	movs	r1, #2
    1f10:	0018      	movs	r0, r3
    1f12:	4b26      	ldr	r3, [pc, #152]	; (1fac <_ext_irq_init+0xb0>)
    1f14:	4798      	blx	r3
    1f16:	1e03      	subs	r3, r0, #0
    1f18:	d008      	beq.n	1f2c <_ext_irq_init+0x30>
		hri_eic_write_CTRL_reg(EIC, 0);
    1f1a:	4b22      	ldr	r3, [pc, #136]	; (1fa4 <_ext_irq_init+0xa8>)
    1f1c:	2100      	movs	r1, #0
    1f1e:	0018      	movs	r0, r3
    1f20:	4b23      	ldr	r3, [pc, #140]	; (1fb0 <_ext_irq_init+0xb4>)
    1f22:	4798      	blx	r3
		hri_eic_wait_for_sync(EIC);
    1f24:	4b1f      	ldr	r3, [pc, #124]	; (1fa4 <_ext_irq_init+0xa8>)
    1f26:	0018      	movs	r0, r3
    1f28:	4b1f      	ldr	r3, [pc, #124]	; (1fa8 <_ext_irq_init+0xac>)
    1f2a:	4798      	blx	r3
	}
	hri_eic_write_CTRL_reg(EIC, EIC_CTRL_SWRST);
    1f2c:	4b1d      	ldr	r3, [pc, #116]	; (1fa4 <_ext_irq_init+0xa8>)
    1f2e:	2101      	movs	r1, #1
    1f30:	0018      	movs	r0, r3
    1f32:	4b1f      	ldr	r3, [pc, #124]	; (1fb0 <_ext_irq_init+0xb4>)
    1f34:	4798      	blx	r3
	hri_eic_wait_for_sync(EIC);
    1f36:	4b1b      	ldr	r3, [pc, #108]	; (1fa4 <_ext_irq_init+0xa8>)
    1f38:	0018      	movs	r0, r3
    1f3a:	4b1b      	ldr	r3, [pc, #108]	; (1fa8 <_ext_irq_init+0xac>)
    1f3c:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(
    1f3e:	4b19      	ldr	r3, [pc, #100]	; (1fa4 <_ext_irq_init+0xa8>)
    1f40:	2100      	movs	r1, #0
    1f42:	0018      	movs	r0, r3
    1f44:	4b1b      	ldr	r3, [pc, #108]	; (1fb4 <_ext_irq_init+0xb8>)
    1f46:	4798      	blx	r3
	    EIC, (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos) | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE));
	hri_eic_write_EVCTRL_reg(EIC,
    1f48:	4b16      	ldr	r3, [pc, #88]	; (1fa4 <_ext_irq_init+0xa8>)
    1f4a:	2100      	movs	r1, #0
    1f4c:	0018      	movs	r0, r3
    1f4e:	4b1a      	ldr	r3, [pc, #104]	; (1fb8 <_ext_irq_init+0xbc>)
    1f50:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);

	hri_eic_write_WAKEUP_reg(EIC,
    1f52:	2380      	movs	r3, #128	; 0x80
    1f54:	021b      	lsls	r3, r3, #8
    1f56:	4a13      	ldr	r2, [pc, #76]	; (1fa4 <_ext_irq_init+0xa8>)
    1f58:	0019      	movs	r1, r3
    1f5a:	0010      	movs	r0, r2
    1f5c:	4b17      	ldr	r3, [pc, #92]	; (1fbc <_ext_irq_init+0xc0>)
    1f5e:	4798      	blx	r3
	                             | (CONF_EIC_WAKEUPEN3 << 3) | (CONF_EIC_WAKEUPEN4 << 4) | (CONF_EIC_WAKEUPEN5 << 5)
	                             | (CONF_EIC_WAKEUPEN6 << 6) | (CONF_EIC_WAKEUPEN7 << 7) | (CONF_EIC_WAKEUPEN8 << 8)
	                             | (CONF_EIC_WAKEUPEN9 << 9) | (CONF_EIC_WAKEUPEN10 << 10) | (CONF_EIC_WAKEUPEN11 << 11)
	                             | (CONF_EIC_WAKEUPEN12 << 12) | (CONF_EIC_WAKEUPEN13 << 13)
	                             | (CONF_EIC_WAKEUPEN14 << 14) | (CONF_EIC_WAKEUPEN15 << 15) | 0);
	hri_eic_write_CONFIG_reg(EIC,
    1f60:	4b10      	ldr	r3, [pc, #64]	; (1fa4 <_ext_irq_init+0xa8>)
    1f62:	2200      	movs	r2, #0
    1f64:	2100      	movs	r1, #0
    1f66:	0018      	movs	r0, r3
    1f68:	4b15      	ldr	r3, [pc, #84]	; (1fc0 <_ext_irq_init+0xc4>)
    1f6a:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    1f6c:	23a0      	movs	r3, #160	; 0xa0
    1f6e:	061b      	lsls	r3, r3, #24
    1f70:	480c      	ldr	r0, [pc, #48]	; (1fa4 <_ext_irq_init+0xa8>)
    1f72:	001a      	movs	r2, r3
    1f74:	2101      	movs	r1, #1
    1f76:	4b12      	ldr	r3, [pc, #72]	; (1fc0 <_ext_irq_init+0xc4>)
    1f78:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRL_ENABLE_bit(EIC);
    1f7a:	4b0a      	ldr	r3, [pc, #40]	; (1fa4 <_ext_irq_init+0xa8>)
    1f7c:	0018      	movs	r0, r3
    1f7e:	4b11      	ldr	r3, [pc, #68]	; (1fc4 <_ext_irq_init+0xc8>)
    1f80:	4798      	blx	r3

	NVIC_DisableIRQ(EIC_IRQn);
    1f82:	2004      	movs	r0, #4
    1f84:	4b10      	ldr	r3, [pc, #64]	; (1fc8 <_ext_irq_init+0xcc>)
    1f86:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_IRQn);
    1f88:	2004      	movs	r0, #4
    1f8a:	4b10      	ldr	r3, [pc, #64]	; (1fcc <_ext_irq_init+0xd0>)
    1f8c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_IRQn);
    1f8e:	2004      	movs	r0, #4
    1f90:	4b0f      	ldr	r3, [pc, #60]	; (1fd0 <_ext_irq_init+0xd4>)
    1f92:	4798      	blx	r3

	callback = cb;
    1f94:	4b0f      	ldr	r3, [pc, #60]	; (1fd4 <_ext_irq_init+0xd8>)
    1f96:	687a      	ldr	r2, [r7, #4]
    1f98:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    1f9a:	2300      	movs	r3, #0
}
    1f9c:	0018      	movs	r0, r3
    1f9e:	46bd      	mov	sp, r7
    1fa0:	b002      	add	sp, #8
    1fa2:	bd80      	pop	{r7, pc}
    1fa4:	40001800 	.word	0x40001800
    1fa8:	00001d59 	.word	0x00001d59
    1fac:	00001e15 	.word	0x00001e15
    1fb0:	00001e59 	.word	0x00001e59
    1fb4:	00001e85 	.word	0x00001e85
    1fb8:	00001ea3 	.word	0x00001ea3
    1fbc:	00001ebb 	.word	0x00001ebb
    1fc0:	00001ed3 	.word	0x00001ed3
    1fc4:	00001de9 	.word	0x00001de9
    1fc8:	00001ce1 	.word	0x00001ce1
    1fcc:	00001d21 	.word	0x00001d21
    1fd0:	00001cad 	.word	0x00001cad
    1fd4:	200000b0 	.word	0x200000b0

00001fd8 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    1fd8:	b580      	push	{r7, lr}
    1fda:	b084      	sub	sp, #16
    1fdc:	af00      	add	r7, sp, #0
    1fde:	6078      	str	r0, [r7, #4]
    1fe0:	000a      	movs	r2, r1
    1fe2:	1cfb      	adds	r3, r7, #3
    1fe4:	701a      	strb	r2, [r3, #0]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    1fe6:	230f      	movs	r3, #15
    1fe8:	18fb      	adds	r3, r7, r3
    1fea:	22ff      	movs	r2, #255	; 0xff
    1fec:	701a      	strb	r2, [r3, #0]
	uint8_t i      = 0;
    1fee:	230e      	movs	r3, #14
    1ff0:	18fb      	adds	r3, r7, r3
    1ff2:	2200      	movs	r2, #0
    1ff4:	701a      	strb	r2, [r3, #0]

	for (; i < ARRAY_SIZE(_map); i++) {
    1ff6:	e014      	b.n	2022 <STACK_SIZE+0x22>
		if (_map[i].pin == pin) {
    1ff8:	220f      	movs	r2, #15
    1ffa:	687b      	ldr	r3, [r7, #4]
    1ffc:	429a      	cmp	r2, r3
    1ffe:	d109      	bne.n	2014 <STACK_SIZE+0x14>
			extint = _map[i].extint;
    2000:	230e      	movs	r3, #14
    2002:	18fb      	adds	r3, r7, r3
    2004:	7819      	ldrb	r1, [r3, #0]
    2006:	230f      	movs	r3, #15
    2008:	18fb      	adds	r3, r7, r3
    200a:	4a22      	ldr	r2, [pc, #136]	; (2094 <STACK_SIZE+0x94>)
    200c:	00c9      	lsls	r1, r1, #3
    200e:	5c8a      	ldrb	r2, [r1, r2]
    2010:	701a      	strb	r2, [r3, #0]
			break;
    2012:	e00b      	b.n	202c <STACK_SIZE+0x2c>
	for (; i < ARRAY_SIZE(_map); i++) {
    2014:	230e      	movs	r3, #14
    2016:	18fb      	adds	r3, r7, r3
    2018:	781a      	ldrb	r2, [r3, #0]
    201a:	230e      	movs	r3, #14
    201c:	18fb      	adds	r3, r7, r3
    201e:	3201      	adds	r2, #1
    2020:	701a      	strb	r2, [r3, #0]
    2022:	230e      	movs	r3, #14
    2024:	18fb      	adds	r3, r7, r3
    2026:	781b      	ldrb	r3, [r3, #0]
    2028:	2b00      	cmp	r3, #0
    202a:	d0e5      	beq.n	1ff8 <_ext_irq_enable+0x20>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    202c:	230f      	movs	r3, #15
    202e:	18fb      	adds	r3, r7, r3
    2030:	781b      	ldrb	r3, [r3, #0]
    2032:	2bff      	cmp	r3, #255	; 0xff
    2034:	d102      	bne.n	203c <STACK_SIZE+0x3c>
		return ERR_INVALID_ARG;
    2036:	230d      	movs	r3, #13
    2038:	425b      	negs	r3, r3
    203a:	e026      	b.n	208a <STACK_SIZE+0x8a>
	}

	if (enable) {
    203c:	1cfb      	adds	r3, r7, #3
    203e:	781b      	ldrb	r3, [r3, #0]
    2040:	2b00      	cmp	r3, #0
    2042:	d00b      	beq.n	205c <STACK_SIZE+0x5c>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    2044:	230f      	movs	r3, #15
    2046:	18fb      	adds	r3, r7, r3
    2048:	781b      	ldrb	r3, [r3, #0]
    204a:	2201      	movs	r2, #1
    204c:	409a      	lsls	r2, r3
    204e:	0013      	movs	r3, r2
    2050:	4a11      	ldr	r2, [pc, #68]	; (2098 <STACK_SIZE+0x98>)
    2052:	0019      	movs	r1, r3
    2054:	0010      	movs	r0, r2
    2056:	4b11      	ldr	r3, [pc, #68]	; (209c <STACK_SIZE+0x9c>)
    2058:	4798      	blx	r3
    205a:	e015      	b.n	2088 <STACK_SIZE+0x88>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    205c:	230f      	movs	r3, #15
    205e:	18fb      	adds	r3, r7, r3
    2060:	781b      	ldrb	r3, [r3, #0]
    2062:	2201      	movs	r2, #1
    2064:	409a      	lsls	r2, r3
    2066:	0013      	movs	r3, r2
    2068:	4a0b      	ldr	r2, [pc, #44]	; (2098 <STACK_SIZE+0x98>)
    206a:	0019      	movs	r1, r3
    206c:	0010      	movs	r0, r2
    206e:	4b0c      	ldr	r3, [pc, #48]	; (20a0 <STACK_SIZE+0xa0>)
    2070:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    2072:	230f      	movs	r3, #15
    2074:	18fb      	adds	r3, r7, r3
    2076:	781b      	ldrb	r3, [r3, #0]
    2078:	2201      	movs	r2, #1
    207a:	409a      	lsls	r2, r3
    207c:	0013      	movs	r3, r2
    207e:	4a06      	ldr	r2, [pc, #24]	; (2098 <STACK_SIZE+0x98>)
    2080:	0019      	movs	r1, r3
    2082:	0010      	movs	r0, r2
    2084:	4b07      	ldr	r3, [pc, #28]	; (20a4 <STACK_SIZE+0xa4>)
    2086:	4798      	blx	r3
	}

	return ERR_NONE;
    2088:	2300      	movs	r3, #0
}
    208a:	0018      	movs	r0, r3
    208c:	46bd      	mov	sp, r7
    208e:	b004      	add	sp, #16
    2090:	bd80      	pop	{r7, pc}
    2092:	46c0      	nop			; (mov r8, r8)
    2094:	00005288 	.word	0x00005288
    2098:	40001800 	.word	0x40001800
    209c:	00001da5 	.word	0x00001da5
    20a0:	00001dd1 	.word	0x00001dd1
    20a4:	00001d8d 	.word	0x00001d8d

000020a8 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    20a8:	b590      	push	{r4, r7, lr}
    20aa:	b085      	sub	sp, #20
    20ac:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    20ae:	4b56      	ldr	r3, [pc, #344]	; (2208 <EIC_Handler+0x160>)
    20b0:	0018      	movs	r0, r3
    20b2:	4b56      	ldr	r3, [pc, #344]	; (220c <EIC_Handler+0x164>)
    20b4:	4798      	blx	r3
    20b6:	0004      	movs	r4, r0
    20b8:	4b53      	ldr	r3, [pc, #332]	; (2208 <EIC_Handler+0x160>)
    20ba:	0018      	movs	r0, r3
    20bc:	4b54      	ldr	r3, [pc, #336]	; (2210 <EIC_Handler+0x168>)
    20be:	4798      	blx	r3
    20c0:	0003      	movs	r3, r0
    20c2:	4023      	ands	r3, r4
    20c4:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    20c6:	2301      	movs	r3, #1
    20c8:	425b      	negs	r3, r3
    20ca:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    20cc:	683b      	ldr	r3, [r7, #0]
    20ce:	4a4e      	ldr	r2, [pc, #312]	; (2208 <EIC_Handler+0x160>)
    20d0:	0019      	movs	r1, r3
    20d2:	0010      	movs	r0, r2
    20d4:	4b4f      	ldr	r3, [pc, #316]	; (2214 <EIC_Handler+0x16c>)
    20d6:	4798      	blx	r3

	ASSERT(callback);
    20d8:	4b4f      	ldr	r3, [pc, #316]	; (2218 <EIC_Handler+0x170>)
    20da:	681b      	ldr	r3, [r3, #0]
    20dc:	1e5a      	subs	r2, r3, #1
    20de:	4193      	sbcs	r3, r2
    20e0:	b2db      	uxtb	r3, r3
    20e2:	494e      	ldr	r1, [pc, #312]	; (221c <EIC_Handler+0x174>)
    20e4:	22d2      	movs	r2, #210	; 0xd2
    20e6:	0018      	movs	r0, r3
    20e8:	4b4d      	ldr	r3, [pc, #308]	; (2220 <EIC_Handler+0x178>)
    20ea:	4798      	blx	r3

	while (flags) {
    20ec:	e084      	b.n	21f8 <EIC_Handler+0x150>
		pos = ffs(flags) - 1;
    20ee:	683b      	ldr	r3, [r7, #0]
    20f0:	0018      	movs	r0, r3
    20f2:	4b4c      	ldr	r3, [pc, #304]	; (2224 <EIC_Handler+0x17c>)
    20f4:	4798      	blx	r3
    20f6:	0003      	movs	r3, r0
    20f8:	b2db      	uxtb	r3, r3
    20fa:	3b01      	subs	r3, #1
    20fc:	b2da      	uxtb	r2, r3
    20fe:	230f      	movs	r3, #15
    2100:	18fb      	adds	r3, r7, r3
    2102:	701a      	strb	r2, [r3, #0]
		while (-1 != pos) {
    2104:	e060      	b.n	21c8 <EIC_Handler+0x120>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2106:	1dfb      	adds	r3, r7, #7
    2108:	2200      	movs	r2, #0
    210a:	701a      	strb	r2, [r3, #0]
    210c:	1dbb      	adds	r3, r7, #6
    210e:	2201      	movs	r2, #1
    2110:	701a      	strb	r2, [r3, #0]

			while (upper >= lower) {
    2112:	e035      	b.n	2180 <EIC_Handler+0xd8>
				middle = (upper + lower) >> 1;
    2114:	1dbb      	adds	r3, r7, #6
    2116:	781a      	ldrb	r2, [r3, #0]
    2118:	1dfb      	adds	r3, r7, #7
    211a:	781b      	ldrb	r3, [r3, #0]
    211c:	18d3      	adds	r3, r2, r3
    211e:	105a      	asrs	r2, r3, #1
    2120:	1d7b      	adds	r3, r7, #5
    2122:	701a      	strb	r2, [r3, #0]
				if (_map[middle].extint == pos) {
    2124:	1d7b      	adds	r3, r7, #5
    2126:	781a      	ldrb	r2, [r3, #0]
    2128:	4b3f      	ldr	r3, [pc, #252]	; (2228 <EIC_Handler+0x180>)
    212a:	00d2      	lsls	r2, r2, #3
    212c:	5cd3      	ldrb	r3, [r2, r3]
    212e:	001a      	movs	r2, r3
    2130:	230f      	movs	r3, #15
    2132:	18fb      	adds	r3, r7, r3
    2134:	781b      	ldrb	r3, [r3, #0]
    2136:	b25b      	sxtb	r3, r3
    2138:	429a      	cmp	r2, r3
    213a:	d102      	bne.n	2142 <EIC_Handler+0x9a>
					pin = _map[middle].pin;
    213c:	230f      	movs	r3, #15
    213e:	60bb      	str	r3, [r7, #8]
					break;
    2140:	e024      	b.n	218c <EIC_Handler+0xe4>
				}
				if (_map[middle].extint < pos) {
    2142:	1d7b      	adds	r3, r7, #5
    2144:	781a      	ldrb	r2, [r3, #0]
    2146:	4b38      	ldr	r3, [pc, #224]	; (2228 <EIC_Handler+0x180>)
    2148:	00d2      	lsls	r2, r2, #3
    214a:	5cd3      	ldrb	r3, [r2, r3]
    214c:	001a      	movs	r2, r3
    214e:	230f      	movs	r3, #15
    2150:	18fb      	adds	r3, r7, r3
    2152:	781b      	ldrb	r3, [r3, #0]
    2154:	b25b      	sxtb	r3, r3
    2156:	429a      	cmp	r2, r3
    2158:	da09      	bge.n	216e <EIC_Handler+0xc6>
					lower = middle + 1;
    215a:	1dfb      	adds	r3, r7, #7
    215c:	1d7a      	adds	r2, r7, #5
    215e:	7812      	ldrb	r2, [r2, #0]
    2160:	3201      	adds	r2, #1
    2162:	701a      	strb	r2, [r3, #0]
    2164:	1dbb      	adds	r3, r7, #6
    2166:	1dba      	adds	r2, r7, #6
    2168:	7812      	ldrb	r2, [r2, #0]
    216a:	701a      	strb	r2, [r3, #0]
    216c:	e008      	b.n	2180 <EIC_Handler+0xd8>
				} else {
					upper = middle - 1;
    216e:	1dbb      	adds	r3, r7, #6
    2170:	1d7a      	adds	r2, r7, #5
    2172:	7812      	ldrb	r2, [r2, #0]
    2174:	3a01      	subs	r2, #1
    2176:	701a      	strb	r2, [r3, #0]
    2178:	1dfb      	adds	r3, r7, #7
    217a:	1dfa      	adds	r2, r7, #7
    217c:	7812      	ldrb	r2, [r2, #0]
    217e:	701a      	strb	r2, [r3, #0]
			while (upper >= lower) {
    2180:	1dba      	adds	r2, r7, #6
    2182:	1dfb      	adds	r3, r7, #7
    2184:	7812      	ldrb	r2, [r2, #0]
    2186:	781b      	ldrb	r3, [r3, #0]
    2188:	429a      	cmp	r2, r3
    218a:	d2c3      	bcs.n	2114 <EIC_Handler+0x6c>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    218c:	68bb      	ldr	r3, [r7, #8]
    218e:	3301      	adds	r3, #1
    2190:	d004      	beq.n	219c <EIC_Handler+0xf4>
				callback(pin);
    2192:	4b21      	ldr	r3, [pc, #132]	; (2218 <EIC_Handler+0x170>)
    2194:	681b      	ldr	r3, [r3, #0]
    2196:	68ba      	ldr	r2, [r7, #8]
    2198:	0010      	movs	r0, r2
    219a:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    219c:	230f      	movs	r3, #15
    219e:	18fb      	adds	r3, r7, r3
    21a0:	781b      	ldrb	r3, [r3, #0]
    21a2:	b25b      	sxtb	r3, r3
    21a4:	2201      	movs	r2, #1
    21a6:	409a      	lsls	r2, r3
    21a8:	0013      	movs	r3, r2
    21aa:	43db      	mvns	r3, r3
    21ac:	683a      	ldr	r2, [r7, #0]
    21ae:	4013      	ands	r3, r2
    21b0:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    21b2:	683b      	ldr	r3, [r7, #0]
    21b4:	0018      	movs	r0, r3
    21b6:	4b1b      	ldr	r3, [pc, #108]	; (2224 <EIC_Handler+0x17c>)
    21b8:	4798      	blx	r3
    21ba:	0003      	movs	r3, r0
    21bc:	b2db      	uxtb	r3, r3
    21be:	3b01      	subs	r3, #1
    21c0:	b2da      	uxtb	r2, r3
    21c2:	230f      	movs	r3, #15
    21c4:	18fb      	adds	r3, r7, r3
    21c6:	701a      	strb	r2, [r3, #0]
		while (-1 != pos) {
    21c8:	230f      	movs	r3, #15
    21ca:	18fb      	adds	r3, r7, r3
    21cc:	781b      	ldrb	r3, [r3, #0]
    21ce:	b25b      	sxtb	r3, r3
    21d0:	3301      	adds	r3, #1
    21d2:	d198      	bne.n	2106 <EIC_Handler+0x5e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    21d4:	4b0c      	ldr	r3, [pc, #48]	; (2208 <EIC_Handler+0x160>)
    21d6:	0018      	movs	r0, r3
    21d8:	4b0c      	ldr	r3, [pc, #48]	; (220c <EIC_Handler+0x164>)
    21da:	4798      	blx	r3
    21dc:	0004      	movs	r4, r0
    21de:	4b0a      	ldr	r3, [pc, #40]	; (2208 <EIC_Handler+0x160>)
    21e0:	0018      	movs	r0, r3
    21e2:	4b0b      	ldr	r3, [pc, #44]	; (2210 <EIC_Handler+0x168>)
    21e4:	4798      	blx	r3
    21e6:	0003      	movs	r3, r0
    21e8:	4023      	ands	r3, r4
    21ea:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    21ec:	683b      	ldr	r3, [r7, #0]
    21ee:	4a06      	ldr	r2, [pc, #24]	; (2208 <EIC_Handler+0x160>)
    21f0:	0019      	movs	r1, r3
    21f2:	0010      	movs	r0, r2
    21f4:	4b07      	ldr	r3, [pc, #28]	; (2214 <EIC_Handler+0x16c>)
    21f6:	4798      	blx	r3
	while (flags) {
    21f8:	683b      	ldr	r3, [r7, #0]
    21fa:	2b00      	cmp	r3, #0
    21fc:	d000      	beq.n	2200 <EIC_Handler+0x158>
    21fe:	e776      	b.n	20ee <EIC_Handler+0x46>
	}
}
    2200:	46c0      	nop			; (mov r8, r8)
    2202:	46bd      	mov	sp, r7
    2204:	b005      	add	sp, #20
    2206:	bd90      	pop	{r4, r7, pc}
    2208:	40001800 	.word	0x40001800
    220c:	00001d79 	.word	0x00001d79
    2210:	00001dbd 	.word	0x00001dbd
    2214:	00001d8d 	.word	0x00001d8d
    2218:	200000b0 	.word	0x200000b0
    221c:	00005290 	.word	0x00005290
    2220:	00001a3f 	.word	0x00001a3f
    2224:	00004879 	.word	0x00004879
    2228:	00005288 	.word	0x00005288

0000222c <hri_gclk_wait_for_sync>:
{
    222c:	b580      	push	{r7, lr}
    222e:	b082      	sub	sp, #8
    2230:	af00      	add	r7, sp, #0
    2232:	6078      	str	r0, [r7, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2234:	46c0      	nop			; (mov r8, r8)
    2236:	687b      	ldr	r3, [r7, #4]
    2238:	785b      	ldrb	r3, [r3, #1]
    223a:	061b      	lsls	r3, r3, #24
    223c:	0fdb      	lsrs	r3, r3, #31
    223e:	b2db      	uxtb	r3, r3
    2240:	2b00      	cmp	r3, #0
    2242:	d1f8      	bne.n	2236 <hri_gclk_wait_for_sync+0xa>
}
    2244:	46c0      	nop			; (mov r8, r8)
    2246:	46bd      	mov	sp, r7
    2248:	b002      	add	sp, #8
    224a:	bd80      	pop	{r7, pc}

0000224c <hri_gclk_write_GENCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, hri_gclk_genctrl_reg_t data)
{
    224c:	b580      	push	{r7, lr}
    224e:	b082      	sub	sp, #8
    2250:	af00      	add	r7, sp, #0
    2252:	6078      	str	r0, [r7, #4]
    2254:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL.reg = data;
    2256:	687b      	ldr	r3, [r7, #4]
    2258:	683a      	ldr	r2, [r7, #0]
    225a:	605a      	str	r2, [r3, #4]
	hri_gclk_wait_for_sync(hw);
    225c:	687b      	ldr	r3, [r7, #4]
    225e:	0018      	movs	r0, r3
    2260:	4b02      	ldr	r3, [pc, #8]	; (226c <hri_gclk_write_GENCTRL_reg+0x20>)
    2262:	4798      	blx	r3
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2264:	46c0      	nop			; (mov r8, r8)
    2266:	46bd      	mov	sp, r7
    2268:	b002      	add	sp, #8
    226a:	bd80      	pop	{r7, pc}
    226c:	0000222d 	.word	0x0000222d

00002270 <hri_gclk_write_GENDIV_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
    2270:	b580      	push	{r7, lr}
    2272:	b082      	sub	sp, #8
    2274:	af00      	add	r7, sp, #0
    2276:	6078      	str	r0, [r7, #4]
    2278:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    227a:	687b      	ldr	r3, [r7, #4]
    227c:	683a      	ldr	r2, [r7, #0]
    227e:	609a      	str	r2, [r3, #8]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2280:	46c0      	nop			; (mov r8, r8)
    2282:	46bd      	mov	sp, r7
    2284:	b002      	add	sp, #8
    2286:	bd80      	pop	{r7, pc}

00002288 <_gclk_init_generators_by_fref>:
	        | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    2288:	b580      	push	{r7, lr}
    228a:	b082      	sub	sp, #8
    228c:	af00      	add	r7, sp, #0
    228e:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2290:	687b      	ldr	r3, [r7, #4]
    2292:	2201      	movs	r2, #1
    2294:	4013      	ands	r3, r2
    2296:	d00d      	beq.n	22b4 <_gclk_init_generators_by_fref+0x2c>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_0_DIV) | GCLK_GENDIV_ID(0));
    2298:	2380      	movs	r3, #128	; 0x80
    229a:	005b      	lsls	r3, r3, #1
    229c:	4a10      	ldr	r2, [pc, #64]	; (22e0 <_gclk_init_generators_by_fref+0x58>)
    229e:	0019      	movs	r1, r3
    22a0:	0010      	movs	r0, r2
    22a2:	4b10      	ldr	r3, [pc, #64]	; (22e4 <_gclk_init_generators_by_fref+0x5c>)
    22a4:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    22a6:	2383      	movs	r3, #131	; 0x83
    22a8:	025b      	lsls	r3, r3, #9
    22aa:	4a0d      	ldr	r2, [pc, #52]	; (22e0 <_gclk_init_generators_by_fref+0x58>)
    22ac:	0019      	movs	r1, r3
    22ae:	0010      	movs	r0, r2
    22b0:	4b0d      	ldr	r3, [pc, #52]	; (22e8 <_gclk_init_generators_by_fref+0x60>)
    22b2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    22b4:	687b      	ldr	r3, [r7, #4]
    22b6:	2208      	movs	r2, #8
    22b8:	4013      	ands	r3, r2
    22ba:	d00c      	beq.n	22d6 <_gclk_init_generators_by_fref+0x4e>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_3_DIV) | GCLK_GENDIV_ID(3));
    22bc:	2304      	movs	r3, #4
    22be:	33ff      	adds	r3, #255	; 0xff
    22c0:	4a07      	ldr	r2, [pc, #28]	; (22e0 <_gclk_init_generators_by_fref+0x58>)
    22c2:	0019      	movs	r1, r3
    22c4:	0010      	movs	r0, r2
    22c6:	4b07      	ldr	r3, [pc, #28]	; (22e4 <_gclk_init_generators_by_fref+0x5c>)
    22c8:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    22ca:	4a08      	ldr	r2, [pc, #32]	; (22ec <_gclk_init_generators_by_fref+0x64>)
    22cc:	4b04      	ldr	r3, [pc, #16]	; (22e0 <_gclk_init_generators_by_fref+0x58>)
    22ce:	0011      	movs	r1, r2
    22d0:	0018      	movs	r0, r3
    22d2:	4b05      	ldr	r3, [pc, #20]	; (22e8 <_gclk_init_generators_by_fref+0x60>)
    22d4:	4798      	blx	r3
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    22d6:	46c0      	nop			; (mov r8, r8)
    22d8:	46bd      	mov	sp, r7
    22da:	b002      	add	sp, #8
    22dc:	bd80      	pop	{r7, pc}
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	40000c00 	.word	0x40000c00
    22e4:	00002271 	.word	0x00002271
    22e8:	0000224d 	.word	0x0000224d
    22ec:	00210303 	.word	0x00210303

000022f0 <hri_pm_set_CPUSEL_CPUDIV_bf>:
{
	return ((Pm *)hw)->SLEEP.reg;
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
    22f0:	b580      	push	{r7, lr}
    22f2:	b082      	sub	sp, #8
    22f4:	af00      	add	r7, sp, #0
    22f6:	6078      	str	r0, [r7, #4]
    22f8:	000a      	movs	r2, r1
    22fa:	1cfb      	adds	r3, r7, #3
    22fc:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    22fe:	687b      	ldr	r3, [r7, #4]
    2300:	7a1b      	ldrb	r3, [r3, #8]
    2302:	b2da      	uxtb	r2, r3
    2304:	1cfb      	adds	r3, r7, #3
    2306:	781b      	ldrb	r3, [r3, #0]
    2308:	2107      	movs	r1, #7
    230a:	400b      	ands	r3, r1
    230c:	b2db      	uxtb	r3, r3
    230e:	4313      	orrs	r3, r2
    2310:	b2da      	uxtb	r2, r3
    2312:	687b      	ldr	r3, [r7, #4]
    2314:	721a      	strb	r2, [r3, #8]
	PM_CRITICAL_SECTION_LEAVE();
}
    2316:	46c0      	nop			; (mov r8, r8)
    2318:	46bd      	mov	sp, r7
    231a:	b002      	add	sp, #8
    231c:	bd80      	pop	{r7, pc}

0000231e <hri_pm_set_APBASEL_APBADIV_bf>:
{
	return ((Pm *)hw)->CPUSEL.reg;
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
    231e:	b580      	push	{r7, lr}
    2320:	b082      	sub	sp, #8
    2322:	af00      	add	r7, sp, #0
    2324:	6078      	str	r0, [r7, #4]
    2326:	000a      	movs	r2, r1
    2328:	1cfb      	adds	r3, r7, #3
    232a:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    232c:	687b      	ldr	r3, [r7, #4]
    232e:	7a5b      	ldrb	r3, [r3, #9]
    2330:	b2da      	uxtb	r2, r3
    2332:	1cfb      	adds	r3, r7, #3
    2334:	781b      	ldrb	r3, [r3, #0]
    2336:	2107      	movs	r1, #7
    2338:	400b      	ands	r3, r1
    233a:	b2db      	uxtb	r3, r3
    233c:	4313      	orrs	r3, r2
    233e:	b2da      	uxtb	r2, r3
    2340:	687b      	ldr	r3, [r7, #4]
    2342:	725a      	strb	r2, [r3, #9]
	PM_CRITICAL_SECTION_LEAVE();
}
    2344:	46c0      	nop			; (mov r8, r8)
    2346:	46bd      	mov	sp, r7
    2348:	b002      	add	sp, #8
    234a:	bd80      	pop	{r7, pc}

0000234c <hri_pm_set_APBBSEL_APBBDIV_bf>:
{
	return ((Pm *)hw)->APBASEL.reg;
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
    234c:	b580      	push	{r7, lr}
    234e:	b082      	sub	sp, #8
    2350:	af00      	add	r7, sp, #0
    2352:	6078      	str	r0, [r7, #4]
    2354:	000a      	movs	r2, r1
    2356:	1cfb      	adds	r3, r7, #3
    2358:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	7a9b      	ldrb	r3, [r3, #10]
    235e:	b2da      	uxtb	r2, r3
    2360:	1cfb      	adds	r3, r7, #3
    2362:	781b      	ldrb	r3, [r3, #0]
    2364:	2107      	movs	r1, #7
    2366:	400b      	ands	r3, r1
    2368:	b2db      	uxtb	r3, r3
    236a:	4313      	orrs	r3, r2
    236c:	b2da      	uxtb	r2, r3
    236e:	687b      	ldr	r3, [r7, #4]
    2370:	729a      	strb	r2, [r3, #10]
	PM_CRITICAL_SECTION_LEAVE();
}
    2372:	46c0      	nop			; (mov r8, r8)
    2374:	46bd      	mov	sp, r7
    2376:	b002      	add	sp, #8
    2378:	bd80      	pop	{r7, pc}

0000237a <hri_pm_set_APBCSEL_APBCDIV_bf>:
{
	return ((Pm *)hw)->APBBSEL.reg;
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
    237a:	b580      	push	{r7, lr}
    237c:	b082      	sub	sp, #8
    237e:	af00      	add	r7, sp, #0
    2380:	6078      	str	r0, [r7, #4]
    2382:	000a      	movs	r2, r1
    2384:	1cfb      	adds	r3, r7, #3
    2386:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    2388:	687b      	ldr	r3, [r7, #4]
    238a:	7adb      	ldrb	r3, [r3, #11]
    238c:	b2da      	uxtb	r2, r3
    238e:	1cfb      	adds	r3, r7, #3
    2390:	781b      	ldrb	r3, [r3, #0]
    2392:	2107      	movs	r1, #7
    2394:	400b      	ands	r3, r1
    2396:	b2db      	uxtb	r3, r3
    2398:	4313      	orrs	r3, r2
    239a:	b2da      	uxtb	r2, r3
    239c:	687b      	ldr	r3, [r7, #4]
    239e:	72da      	strb	r2, [r3, #11]
	PM_CRITICAL_SECTION_LEAVE();
}
    23a0:	46c0      	nop			; (mov r8, r8)
    23a2:	46bd      	mov	sp, r7
    23a4:	b002      	add	sp, #8
    23a6:	bd80      	pop	{r7, pc}

000023a8 <_set_sleep_mode>:

/**
 * \brief Set the sleep mode for the device
 */
int32_t _set_sleep_mode(const uint8_t mode)
{
    23a8:	b580      	push	{r7, lr}
    23aa:	b082      	sub	sp, #8
    23ac:	af00      	add	r7, sp, #0
    23ae:	0002      	movs	r2, r0
    23b0:	1dfb      	adds	r3, r7, #7
    23b2:	701a      	strb	r2, [r3, #0]
	switch (mode) {
    23b4:	1dfb      	adds	r3, r7, #7
    23b6:	781b      	ldrb	r3, [r3, #0]
    23b8:	2b00      	cmp	r3, #0
    23ba:	db18      	blt.n	23ee <_set_sleep_mode+0x46>
    23bc:	2b02      	cmp	r3, #2
    23be:	dd02      	ble.n	23c6 <_set_sleep_mode+0x1e>
    23c0:	2b03      	cmp	r3, #3
    23c2:	d00c      	beq.n	23de <_set_sleep_mode+0x36>
    23c4:	e013      	b.n	23ee <_set_sleep_mode+0x46>
	case 0:
	case 1:
	case 2:
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    23c6:	4b0d      	ldr	r3, [pc, #52]	; (23fc <_set_sleep_mode+0x54>)
    23c8:	4a0c      	ldr	r2, [pc, #48]	; (23fc <_set_sleep_mode+0x54>)
    23ca:	6912      	ldr	r2, [r2, #16]
    23cc:	2104      	movs	r1, #4
    23ce:	438a      	bics	r2, r1
    23d0:	611a      	str	r2, [r3, #16]
		PM->SLEEP.reg = mode;
    23d2:	4a0b      	ldr	r2, [pc, #44]	; (2400 <_set_sleep_mode+0x58>)
    23d4:	1dfb      	adds	r3, r7, #7
    23d6:	781b      	ldrb	r3, [r3, #0]
    23d8:	7053      	strb	r3, [r2, #1]
		return ERR_NONE;
    23da:	2300      	movs	r3, #0
    23dc:	e009      	b.n	23f2 <_set_sleep_mode+0x4a>
	case 3:
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    23de:	4b07      	ldr	r3, [pc, #28]	; (23fc <_set_sleep_mode+0x54>)
    23e0:	4a06      	ldr	r2, [pc, #24]	; (23fc <_set_sleep_mode+0x54>)
    23e2:	6912      	ldr	r2, [r2, #16]
    23e4:	2104      	movs	r1, #4
    23e6:	430a      	orrs	r2, r1
    23e8:	611a      	str	r2, [r3, #16]
		return ERR_NONE;
    23ea:	2300      	movs	r3, #0
    23ec:	e001      	b.n	23f2 <_set_sleep_mode+0x4a>
	default:
		return ERR_INVALID_ARG;
    23ee:	230d      	movs	r3, #13
    23f0:	425b      	negs	r3, r3
	}
}
    23f2:	0018      	movs	r0, r3
    23f4:	46bd      	mov	sp, r7
    23f6:	b002      	add	sp, #8
    23f8:	bd80      	pop	{r7, pc}
    23fa:	46c0      	nop			; (mov r8, r8)
    23fc:	e000ed00 	.word	0xe000ed00
    2400:	40000400 	.word	0x40000400

00002404 <_pm_init>:

/**
 * \brief Power Manager Init
 */
void _pm_init(void)
{
    2404:	b580      	push	{r7, lr}
    2406:	af00      	add	r7, sp, #0
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
    2408:	4b0b      	ldr	r3, [pc, #44]	; (2438 <_pm_init+0x34>)
    240a:	2100      	movs	r1, #0
    240c:	0018      	movs	r0, r3
    240e:	4b0b      	ldr	r3, [pc, #44]	; (243c <_pm_init+0x38>)
    2410:	4798      	blx	r3
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
    2412:	4b09      	ldr	r3, [pc, #36]	; (2438 <_pm_init+0x34>)
    2414:	2100      	movs	r1, #0
    2416:	0018      	movs	r0, r3
    2418:	4b09      	ldr	r3, [pc, #36]	; (2440 <_pm_init+0x3c>)
    241a:	4798      	blx	r3
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
    241c:	4b06      	ldr	r3, [pc, #24]	; (2438 <_pm_init+0x34>)
    241e:	2100      	movs	r1, #0
    2420:	0018      	movs	r0, r3
    2422:	4b08      	ldr	r3, [pc, #32]	; (2444 <_pm_init+0x40>)
    2424:	4798      	blx	r3
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
    2426:	4b04      	ldr	r3, [pc, #16]	; (2438 <_pm_init+0x34>)
    2428:	2100      	movs	r1, #0
    242a:	0018      	movs	r0, r3
    242c:	4b06      	ldr	r3, [pc, #24]	; (2448 <_pm_init+0x44>)
    242e:	4798      	blx	r3
}
    2430:	46c0      	nop			; (mov r8, r8)
    2432:	46bd      	mov	sp, r7
    2434:	bd80      	pop	{r7, pc}
    2436:	46c0      	nop			; (mov r8, r8)
    2438:	40000400 	.word	0x40000400
    243c:	000022f1 	.word	0x000022f1
    2440:	0000231f 	.word	0x0000231f
    2444:	0000234d 	.word	0x0000234d
    2448:	0000237b 	.word	0x0000237b

0000244c <__NVIC_EnableIRQ>:
{
    244c:	b580      	push	{r7, lr}
    244e:	b082      	sub	sp, #8
    2450:	af00      	add	r7, sp, #0
    2452:	0002      	movs	r2, r0
    2454:	1dfb      	adds	r3, r7, #7
    2456:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    2458:	1dfb      	adds	r3, r7, #7
    245a:	781b      	ldrb	r3, [r3, #0]
    245c:	2b7f      	cmp	r3, #127	; 0x7f
    245e:	d809      	bhi.n	2474 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2460:	4b06      	ldr	r3, [pc, #24]	; (247c <__NVIC_EnableIRQ+0x30>)
    2462:	1dfa      	adds	r2, r7, #7
    2464:	7812      	ldrb	r2, [r2, #0]
    2466:	0011      	movs	r1, r2
    2468:	221f      	movs	r2, #31
    246a:	400a      	ands	r2, r1
    246c:	2101      	movs	r1, #1
    246e:	4091      	lsls	r1, r2
    2470:	000a      	movs	r2, r1
    2472:	601a      	str	r2, [r3, #0]
}
    2474:	46c0      	nop			; (mov r8, r8)
    2476:	46bd      	mov	sp, r7
    2478:	b002      	add	sp, #8
    247a:	bd80      	pop	{r7, pc}
    247c:	e000e100 	.word	0xe000e100

00002480 <__NVIC_DisableIRQ>:
{
    2480:	b580      	push	{r7, lr}
    2482:	b082      	sub	sp, #8
    2484:	af00      	add	r7, sp, #0
    2486:	0002      	movs	r2, r0
    2488:	1dfb      	adds	r3, r7, #7
    248a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    248c:	1dfb      	adds	r3, r7, #7
    248e:	781b      	ldrb	r3, [r3, #0]
    2490:	2b7f      	cmp	r3, #127	; 0x7f
    2492:	d80e      	bhi.n	24b2 <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2494:	4909      	ldr	r1, [pc, #36]	; (24bc <__NVIC_DisableIRQ+0x3c>)
    2496:	1dfb      	adds	r3, r7, #7
    2498:	781b      	ldrb	r3, [r3, #0]
    249a:	001a      	movs	r2, r3
    249c:	231f      	movs	r3, #31
    249e:	4013      	ands	r3, r2
    24a0:	2201      	movs	r2, #1
    24a2:	409a      	lsls	r2, r3
    24a4:	0013      	movs	r3, r2
    24a6:	2280      	movs	r2, #128	; 0x80
    24a8:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    24aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    24ae:	f3bf 8f6f 	isb	sy
}
    24b2:	46c0      	nop			; (mov r8, r8)
    24b4:	46bd      	mov	sp, r7
    24b6:	b002      	add	sp, #8
    24b8:	bd80      	pop	{r7, pc}
    24ba:	46c0      	nop			; (mov r8, r8)
    24bc:	e000e100 	.word	0xe000e100

000024c0 <__NVIC_ClearPendingIRQ>:
{
    24c0:	b580      	push	{r7, lr}
    24c2:	b082      	sub	sp, #8
    24c4:	af00      	add	r7, sp, #0
    24c6:	0002      	movs	r2, r0
    24c8:	1dfb      	adds	r3, r7, #7
    24ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    24cc:	1dfb      	adds	r3, r7, #7
    24ce:	781b      	ldrb	r3, [r3, #0]
    24d0:	2b7f      	cmp	r3, #127	; 0x7f
    24d2:	d80a      	bhi.n	24ea <__NVIC_ClearPendingIRQ+0x2a>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    24d4:	4907      	ldr	r1, [pc, #28]	; (24f4 <__NVIC_ClearPendingIRQ+0x34>)
    24d6:	1dfb      	adds	r3, r7, #7
    24d8:	781b      	ldrb	r3, [r3, #0]
    24da:	001a      	movs	r2, r3
    24dc:	231f      	movs	r3, #31
    24de:	4013      	ands	r3, r2
    24e0:	2201      	movs	r2, #1
    24e2:	409a      	lsls	r2, r3
    24e4:	23c0      	movs	r3, #192	; 0xc0
    24e6:	005b      	lsls	r3, r3, #1
    24e8:	50ca      	str	r2, [r1, r3]
}
    24ea:	46c0      	nop			; (mov r8, r8)
    24ec:	46bd      	mov	sp, r7
    24ee:	b002      	add	sp, #8
    24f0:	bd80      	pop	{r7, pc}
    24f2:	46c0      	nop			; (mov r8, r8)
    24f4:	e000e100 	.word	0xe000e100

000024f8 <hri_rtc_wait_for_sync>:
typedef uint8_t  hri_rtcmode2_intenset_reg_t;
typedef uint8_t  hri_rtcmode2_intflag_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtc_wait_for_sync(const void *const hw)
{
    24f8:	b580      	push	{r7, lr}
    24fa:	b082      	sub	sp, #8
    24fc:	af00      	add	r7, sp, #0
    24fe:	6078      	str	r0, [r7, #4]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    2500:	46c0      	nop			; (mov r8, r8)
    2502:	687b      	ldr	r3, [r7, #4]
    2504:	7a9b      	ldrb	r3, [r3, #10]
    2506:	061b      	lsls	r3, r3, #24
    2508:	0fdb      	lsrs	r3, r3, #31
    250a:	b2db      	uxtb	r3, r3
    250c:	2b00      	cmp	r3, #0
    250e:	d1f8      	bne.n	2502 <hri_rtc_wait_for_sync+0xa>
		;
}
    2510:	46c0      	nop			; (mov r8, r8)
    2512:	46bd      	mov	sp, r7
    2514:	b002      	add	sp, #8
    2516:	bd80      	pop	{r7, pc}

00002518 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    2518:	b580      	push	{r7, lr}
    251a:	b082      	sub	sp, #8
    251c:	af00      	add	r7, sp, #0
    251e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    2520:	687b      	ldr	r3, [r7, #4]
    2522:	2201      	movs	r2, #1
    2524:	721a      	strb	r2, [r3, #8]
}
    2526:	46c0      	nop			; (mov r8, r8)
    2528:	46bd      	mov	sp, r7
    252a:	b002      	add	sp, #8
    252c:	bd80      	pop	{r7, pc}

0000252e <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    252e:	b580      	push	{r7, lr}
    2530:	b082      	sub	sp, #8
    2532:	af00      	add	r7, sp, #0
    2534:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    2536:	687b      	ldr	r3, [r7, #4]
    2538:	7a1b      	ldrb	r3, [r3, #8]
    253a:	b2db      	uxtb	r3, r3
}
    253c:	0018      	movs	r0, r3
    253e:	46bd      	mov	sp, r7
    2540:	b002      	add	sp, #8
    2542:	bd80      	pop	{r7, pc}

00002544 <hri_rtcmode0_set_INTEN_CMP0_bit>:
{
	((Rtc *)hw)->MODE2.INTFLAG.reg = mask;
}

static inline void hri_rtcmode0_set_INTEN_CMP0_bit(const void *const hw)
{
    2544:	b580      	push	{r7, lr}
    2546:	b082      	sub	sp, #8
    2548:	af00      	add	r7, sp, #0
    254a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    254c:	687b      	ldr	r3, [r7, #4]
    254e:	2201      	movs	r2, #1
    2550:	71da      	strb	r2, [r3, #7]
}
    2552:	46c0      	nop			; (mov r8, r8)
    2554:	46bd      	mov	sp, r7
    2556:	b002      	add	sp, #8
    2558:	bd80      	pop	{r7, pc}

0000255a <hri_rtcmode0_clear_INTEN_CMP0_bit>:
		((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
	}
}

static inline void hri_rtcmode0_clear_INTEN_CMP0_bit(const void *const hw)
{
    255a:	b580      	push	{r7, lr}
    255c:	b082      	sub	sp, #8
    255e:	af00      	add	r7, sp, #0
    2560:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_CMP0;
    2562:	687b      	ldr	r3, [r7, #4]
    2564:	2201      	movs	r2, #1
    2566:	719a      	strb	r2, [r3, #6]
}
    2568:	46c0      	nop			; (mov r8, r8)
    256a:	46bd      	mov	sp, r7
    256c:	b002      	add	sp, #8
    256e:	bd80      	pop	{r7, pc}

00002570 <hri_rtcmode0_set_CTRL_SWRST_bit>:
{
	((Rtc *)hw)->MODE2.INTENCLR.reg = mask;
}

static inline void hri_rtcmode0_set_CTRL_SWRST_bit(const void *const hw)
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
    2576:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    2578:	687b      	ldr	r3, [r7, #4]
    257a:	881b      	ldrh	r3, [r3, #0]
    257c:	b29b      	uxth	r3, r3
    257e:	2201      	movs	r2, #1
    2580:	4313      	orrs	r3, r2
    2582:	b29a      	uxth	r2, r3
    2584:	687b      	ldr	r3, [r7, #4]
    2586:	801a      	strh	r2, [r3, #0]
	hri_rtc_wait_for_sync(hw);
    2588:	687b      	ldr	r3, [r7, #4]
    258a:	0018      	movs	r0, r3
    258c:	4b02      	ldr	r3, [pc, #8]	; (2598 <hri_rtcmode0_set_CTRL_SWRST_bit+0x28>)
    258e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    2590:	46c0      	nop			; (mov r8, r8)
    2592:	46bd      	mov	sp, r7
    2594:	b002      	add	sp, #8
    2596:	bd80      	pop	{r7, pc}
    2598:	000024f9 	.word	0x000024f9

0000259c <hri_rtcmode0_set_CTRL_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRL_SWRST) >> RTC_MODE0_CTRL_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRL_ENABLE_bit(const void *const hw)
{
    259c:	b580      	push	{r7, lr}
    259e:	b082      	sub	sp, #8
    25a0:	af00      	add	r7, sp, #0
    25a2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    25a4:	687b      	ldr	r3, [r7, #4]
    25a6:	881b      	ldrh	r3, [r3, #0]
    25a8:	b29b      	uxth	r3, r3
    25aa:	2202      	movs	r2, #2
    25ac:	4313      	orrs	r3, r2
    25ae:	b29a      	uxth	r2, r3
    25b0:	687b      	ldr	r3, [r7, #4]
    25b2:	801a      	strh	r2, [r3, #0]
	hri_rtc_wait_for_sync(hw);
    25b4:	687b      	ldr	r3, [r7, #4]
    25b6:	0018      	movs	r0, r3
    25b8:	4b02      	ldr	r3, [pc, #8]	; (25c4 <hri_rtcmode0_set_CTRL_ENABLE_bit+0x28>)
    25ba:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    25bc:	46c0      	nop			; (mov r8, r8)
    25be:	46bd      	mov	sp, r7
    25c0:	b002      	add	sp, #8
    25c2:	bd80      	pop	{r7, pc}
    25c4:	000024f9 	.word	0x000024f9

000025c8 <hri_rtcmode0_get_CTRL_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRL_ENABLE_bit(const void *const hw)
{
    25c8:	b580      	push	{r7, lr}
    25ca:	b084      	sub	sp, #16
    25cc:	af00      	add	r7, sp, #0
    25ce:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtc_wait_for_sync(hw);
    25d0:	687b      	ldr	r3, [r7, #4]
    25d2:	0018      	movs	r0, r3
    25d4:	4b0d      	ldr	r3, [pc, #52]	; (260c <hri_rtcmode0_get_CTRL_ENABLE_bit+0x44>)
    25d6:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
    25d8:	230e      	movs	r3, #14
    25da:	18fb      	adds	r3, r7, r3
    25dc:	687a      	ldr	r2, [r7, #4]
    25de:	8812      	ldrh	r2, [r2, #0]
    25e0:	801a      	strh	r2, [r3, #0]
	tmp = (tmp & RTC_MODE0_CTRL_ENABLE) >> RTC_MODE0_CTRL_ENABLE_Pos;
    25e2:	230e      	movs	r3, #14
    25e4:	18fb      	adds	r3, r7, r3
    25e6:	881b      	ldrh	r3, [r3, #0]
    25e8:	085b      	lsrs	r3, r3, #1
    25ea:	b29a      	uxth	r2, r3
    25ec:	230e      	movs	r3, #14
    25ee:	18fb      	adds	r3, r7, r3
    25f0:	2101      	movs	r1, #1
    25f2:	400a      	ands	r2, r1
    25f4:	801a      	strh	r2, [r3, #0]
	return (bool)tmp;
    25f6:	230e      	movs	r3, #14
    25f8:	18fb      	adds	r3, r7, r3
    25fa:	881b      	ldrh	r3, [r3, #0]
    25fc:	1e5a      	subs	r2, r3, #1
    25fe:	4193      	sbcs	r3, r2
    2600:	b2db      	uxtb	r3, r3
}
    2602:	0018      	movs	r0, r3
    2604:	46bd      	mov	sp, r7
    2606:	b004      	add	sp, #16
    2608:	bd80      	pop	{r7, pc}
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	000024f9 	.word	0x000024f9

00002610 <hri_rtcmode0_clear_CTRL_ENABLE_bit>:
	hri_rtc_wait_for_sync(hw);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRL_ENABLE_bit(const void *const hw)
{
    2610:	b580      	push	{r7, lr}
    2612:	b082      	sub	sp, #8
    2614:	af00      	add	r7, sp, #0
    2616:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    2618:	687b      	ldr	r3, [r7, #4]
    261a:	881b      	ldrh	r3, [r3, #0]
    261c:	b29b      	uxth	r3, r3
    261e:	2202      	movs	r2, #2
    2620:	4393      	bics	r3, r2
    2622:	b29a      	uxth	r2, r3
    2624:	687b      	ldr	r3, [r7, #4]
    2626:	801a      	strh	r2, [r3, #0]
	hri_rtc_wait_for_sync(hw);
    2628:	687b      	ldr	r3, [r7, #4]
    262a:	0018      	movs	r0, r3
    262c:	4b02      	ldr	r3, [pc, #8]	; (2638 <hri_rtcmode0_clear_CTRL_ENABLE_bit+0x28>)
    262e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    2630:	46c0      	nop			; (mov r8, r8)
    2632:	46bd      	mov	sp, r7
    2634:	b002      	add	sp, #8
    2636:	bd80      	pop	{r7, pc}
    2638:	000024f9 	.word	0x000024f9

0000263c <hri_rtcmode0_write_CTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
    263c:	b580      	push	{r7, lr}
    263e:	b082      	sub	sp, #8
    2640:	af00      	add	r7, sp, #0
    2642:	6078      	str	r0, [r7, #4]
    2644:	000a      	movs	r2, r1
    2646:	1cbb      	adds	r3, r7, #2
    2648:	801a      	strh	r2, [r3, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    264a:	687b      	ldr	r3, [r7, #4]
    264c:	1cba      	adds	r2, r7, #2
    264e:	8812      	ldrh	r2, [r2, #0]
    2650:	801a      	strh	r2, [r3, #0]
	hri_rtc_wait_for_sync(hw);
    2652:	687b      	ldr	r3, [r7, #4]
    2654:	0018      	movs	r0, r3
    2656:	4b03      	ldr	r3, [pc, #12]	; (2664 <hri_rtcmode0_write_CTRL_reg+0x28>)
    2658:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    265a:	46c0      	nop			; (mov r8, r8)
    265c:	46bd      	mov	sp, r7
    265e:	b002      	add	sp, #8
    2660:	bd80      	pop	{r7, pc}
    2662:	46c0      	nop			; (mov r8, r8)
    2664:	000024f9 	.word	0x000024f9

00002668 <hri_rtc_set_READREQ_RCONT_bit>:
	hri_rtc_wait_for_sync(hw);
	return ((Rtc *)hw)->MODE2.CTRL.reg;
}

static inline void hri_rtc_set_READREQ_RCONT_bit(const void *const hw)
{
    2668:	b580      	push	{r7, lr}
    266a:	b082      	sub	sp, #8
    266c:	af00      	add	r7, sp, #0
    266e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    2670:	687b      	ldr	r3, [r7, #4]
    2672:	885b      	ldrh	r3, [r3, #2]
    2674:	b29b      	uxth	r3, r3
    2676:	2280      	movs	r2, #128	; 0x80
    2678:	01d2      	lsls	r2, r2, #7
    267a:	4313      	orrs	r3, r2
    267c:	b29a      	uxth	r2, r3
    267e:	687b      	ldr	r3, [r7, #4]
    2680:	805a      	strh	r2, [r3, #2]
	RTC_CRITICAL_SECTION_LEAVE();
}
    2682:	46c0      	nop			; (mov r8, r8)
    2684:	46bd      	mov	sp, r7
    2686:	b002      	add	sp, #8
    2688:	bd80      	pop	{r7, pc}
	...

0000268c <hri_rtcmode0_read_COUNT_COUNT_bf>:
	hri_rtc_wait_for_sync(hw);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_COUNT_bf(const void *const hw)
{
    268c:	b580      	push	{r7, lr}
    268e:	b084      	sub	sp, #16
    2690:	af00      	add	r7, sp, #0
    2692:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_rtc_wait_for_sync(hw);
    2694:	687b      	ldr	r3, [r7, #4]
    2696:	0018      	movs	r0, r3
    2698:	4b04      	ldr	r3, [pc, #16]	; (26ac <hri_rtcmode0_read_COUNT_COUNT_bf+0x20>)
    269a:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
    269c:	687b      	ldr	r3, [r7, #4]
    269e:	691b      	ldr	r3, [r3, #16]
    26a0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & RTC_MODE0_COUNT_COUNT_Msk) >> RTC_MODE0_COUNT_COUNT_Pos;
	return tmp;
    26a2:	68fb      	ldr	r3, [r7, #12]
}
    26a4:	0018      	movs	r0, r3
    26a6:	46bd      	mov	sp, r7
    26a8:	b004      	add	sp, #16
    26aa:	bd80      	pop	{r7, pc}
    26ac:	000024f9 	.word	0x000024f9

000026b0 <hri_rtcmode0_write_COMP_COMP_bf>:
	tmp = (tmp & RTC_MODE0_COMP_COMP(mask)) >> RTC_MODE0_COMP_COMP_Pos;
	return tmp;
}

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
    26b0:	b580      	push	{r7, lr}
    26b2:	b086      	sub	sp, #24
    26b4:	af00      	add	r7, sp, #0
    26b6:	60f8      	str	r0, [r7, #12]
    26b8:	607a      	str	r2, [r7, #4]
    26ba:	230b      	movs	r3, #11
    26bc:	18fb      	adds	r3, r7, r3
    26be:	1c0a      	adds	r2, r1, #0
    26c0:	701a      	strb	r2, [r3, #0]
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
    26c2:	230b      	movs	r3, #11
    26c4:	18fb      	adds	r3, r7, r3
    26c6:	781a      	ldrb	r2, [r3, #0]
    26c8:	68fb      	ldr	r3, [r7, #12]
    26ca:	3206      	adds	r2, #6
    26cc:	0092      	lsls	r2, r2, #2
    26ce:	58d3      	ldr	r3, [r2, r3]
    26d0:	617b      	str	r3, [r7, #20]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
    26d2:	2300      	movs	r3, #0
    26d4:	617b      	str	r3, [r7, #20]
	tmp |= RTC_MODE0_COMP_COMP(data);
    26d6:	697a      	ldr	r2, [r7, #20]
    26d8:	687b      	ldr	r3, [r7, #4]
    26da:	4313      	orrs	r3, r2
    26dc:	617b      	str	r3, [r7, #20]
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
    26de:	230b      	movs	r3, #11
    26e0:	18fb      	adds	r3, r7, r3
    26e2:	781a      	ldrb	r2, [r3, #0]
    26e4:	68fb      	ldr	r3, [r7, #12]
    26e6:	3206      	adds	r2, #6
    26e8:	0092      	lsls	r2, r2, #2
    26ea:	6979      	ldr	r1, [r7, #20]
    26ec:	50d1      	str	r1, [r2, r3]
	hri_rtc_wait_for_sync(hw);
    26ee:	68fb      	ldr	r3, [r7, #12]
    26f0:	0018      	movs	r0, r3
    26f2:	4b03      	ldr	r3, [pc, #12]	; (2700 <hri_rtcmode0_write_COMP_COMP_bf+0x50>)
    26f4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    26f6:	46c0      	nop			; (mov r8, r8)
    26f8:	46bd      	mov	sp, r7
    26fa:	b006      	add	sp, #24
    26fc:	bd80      	pop	{r7, pc}
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	000024f9 	.word	0x000024f9

00002704 <_calendar_register_callback>:

/**
 * \brief Registers callback for the specified callback type
 */
int32_t _calendar_register_callback(struct calendar_dev *const dev, calendar_drv_cb_alarm_t callback)
{
    2704:	b580      	push	{r7, lr}
    2706:	b082      	sub	sp, #8
    2708:	af00      	add	r7, sp, #0
    270a:	6078      	str	r0, [r7, #4]
    270c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    270e:	687b      	ldr	r3, [r7, #4]
    2710:	2b00      	cmp	r3, #0
    2712:	d005      	beq.n	2720 <_calendar_register_callback+0x1c>
    2714:	687b      	ldr	r3, [r7, #4]
    2716:	681b      	ldr	r3, [r3, #0]
    2718:	2b00      	cmp	r3, #0
    271a:	d001      	beq.n	2720 <_calendar_register_callback+0x1c>
    271c:	2301      	movs	r3, #1
    271e:	e000      	b.n	2722 <_calendar_register_callback+0x1e>
    2720:	2300      	movs	r3, #0
    2722:	1c1a      	adds	r2, r3, #0
    2724:	2301      	movs	r3, #1
    2726:	4013      	ands	r3, r2
    2728:	b2db      	uxtb	r3, r3
    272a:	4912      	ldr	r1, [pc, #72]	; (2774 <_calendar_register_callback+0x70>)
    272c:	2233      	movs	r2, #51	; 0x33
    272e:	0018      	movs	r0, r3
    2730:	4b11      	ldr	r3, [pc, #68]	; (2778 <_calendar_register_callback+0x74>)
    2732:	4798      	blx	r3

	/* Check callback */
	if (callback != NULL) {
    2734:	683b      	ldr	r3, [r7, #0]
    2736:	2b00      	cmp	r3, #0
    2738:	d00e      	beq.n	2758 <_calendar_register_callback+0x54>
		/* register the callback */
		dev->callback = callback;
    273a:	687b      	ldr	r3, [r7, #4]
    273c:	683a      	ldr	r2, [r7, #0]
    273e:	605a      	str	r2, [r3, #4]

		/* enable RTC_IRQn */
		NVIC_ClearPendingIRQ(RTC_IRQn);
    2740:	2003      	movs	r0, #3
    2742:	4b0e      	ldr	r3, [pc, #56]	; (277c <_calendar_register_callback+0x78>)
    2744:	4798      	blx	r3
		NVIC_EnableIRQ(RTC_IRQn);
    2746:	2003      	movs	r0, #3
    2748:	4b0d      	ldr	r3, [pc, #52]	; (2780 <_calendar_register_callback+0x7c>)
    274a:	4798      	blx	r3

		/* enable cmp */
		hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    274c:	687b      	ldr	r3, [r7, #4]
    274e:	681b      	ldr	r3, [r3, #0]
    2750:	0018      	movs	r0, r3
    2752:	4b0c      	ldr	r3, [pc, #48]	; (2784 <_calendar_register_callback+0x80>)
    2754:	4798      	blx	r3
    2756:	e007      	b.n	2768 <_calendar_register_callback+0x64>
	} else {
		/* disable cmp */
		hri_rtcmode0_clear_INTEN_CMP0_bit(dev->hw);
    2758:	687b      	ldr	r3, [r7, #4]
    275a:	681b      	ldr	r3, [r3, #0]
    275c:	0018      	movs	r0, r3
    275e:	4b0a      	ldr	r3, [pc, #40]	; (2788 <_calendar_register_callback+0x84>)
    2760:	4798      	blx	r3

		/* disable RTC_IRQn */
		NVIC_DisableIRQ(RTC_IRQn);
    2762:	2003      	movs	r0, #3
    2764:	4b09      	ldr	r3, [pc, #36]	; (278c <_calendar_register_callback+0x88>)
    2766:	4798      	blx	r3
	}

	return ERR_NONE;
    2768:	2300      	movs	r3, #0
}
    276a:	0018      	movs	r0, r3
    276c:	46bd      	mov	sp, r7
    276e:	b002      	add	sp, #8
    2770:	bd80      	pop	{r7, pc}
    2772:	46c0      	nop			; (mov r8, r8)
    2774:	000052a8 	.word	0x000052a8
    2778:	00001a3f 	.word	0x00001a3f
    277c:	000024c1 	.word	0x000024c1
    2780:	0000244d 	.word	0x0000244d
    2784:	00002545 	.word	0x00002545
    2788:	0000255b 	.word	0x0000255b
    278c:	00002481 	.word	0x00002481

00002790 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    2790:	b580      	push	{r7, lr}
    2792:	b084      	sub	sp, #16
    2794:	af00      	add	r7, sp, #0
    2796:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2798:	687b      	ldr	r3, [r7, #4]
    279a:	681b      	ldr	r3, [r3, #0]
    279c:	0018      	movs	r0, r3
    279e:	4b0d      	ldr	r3, [pc, #52]	; (27d4 <_rtc_interrupt_handler+0x44>)
    27a0:	4798      	blx	r3
    27a2:	0003      	movs	r3, r0
    27a4:	001a      	movs	r2, r3
    27a6:	230e      	movs	r3, #14
    27a8:	18fb      	adds	r3, r7, r3
    27aa:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
    27ac:	230e      	movs	r3, #14
    27ae:	18fb      	adds	r3, r7, r3
    27b0:	881b      	ldrh	r3, [r3, #0]
    27b2:	2201      	movs	r2, #1
    27b4:	4013      	ands	r3, r2
    27b6:	d009      	beq.n	27cc <_rtc_interrupt_handler+0x3c>
		dev->callback(dev);
    27b8:	687b      	ldr	r3, [r7, #4]
    27ba:	685b      	ldr	r3, [r3, #4]
    27bc:	687a      	ldr	r2, [r7, #4]
    27be:	0010      	movs	r0, r2
    27c0:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    27c2:	687b      	ldr	r3, [r7, #4]
    27c4:	681b      	ldr	r3, [r3, #0]
    27c6:	0018      	movs	r0, r3
    27c8:	4b03      	ldr	r3, [pc, #12]	; (27d8 <_rtc_interrupt_handler+0x48>)
    27ca:	4798      	blx	r3
	}
}
    27cc:	46c0      	nop			; (mov r8, r8)
    27ce:	46bd      	mov	sp, r7
    27d0:	b004      	add	sp, #16
    27d2:	bd80      	pop	{r7, pc}
    27d4:	0000252f 	.word	0x0000252f
    27d8:	00002519 	.word	0x00002519

000027dc <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    27dc:	b580      	push	{r7, lr}
    27de:	b084      	sub	sp, #16
    27e0:	af00      	add	r7, sp, #0
    27e2:	6078      	str	r0, [r7, #4]
	uint16_t register_value;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    27e4:	687b      	ldr	r3, [r7, #4]
    27e6:	2b00      	cmp	r3, #0
    27e8:	d005      	beq.n	27f6 <_calendar_init+0x1a>
    27ea:	687b      	ldr	r3, [r7, #4]
    27ec:	681b      	ldr	r3, [r3, #0]
    27ee:	2b00      	cmp	r3, #0
    27f0:	d001      	beq.n	27f6 <_calendar_init+0x1a>
    27f2:	2301      	movs	r3, #1
    27f4:	e000      	b.n	27f8 <_calendar_init+0x1c>
    27f6:	2300      	movs	r3, #0
    27f8:	1c1a      	adds	r2, r3, #0
    27fa:	2301      	movs	r3, #1
    27fc:	4013      	ands	r3, r2
    27fe:	b2db      	uxtb	r3, r3
    2800:	4926      	ldr	r1, [pc, #152]	; (289c <_calendar_init+0xc0>)
    2802:	2278      	movs	r2, #120	; 0x78
    2804:	0018      	movs	r0, r3
    2806:	4b26      	ldr	r3, [pc, #152]	; (28a0 <_calendar_init+0xc4>)
    2808:	4798      	blx	r3

	_rtc_dev = dev;
    280a:	4b26      	ldr	r3, [pc, #152]	; (28a4 <_calendar_init+0xc8>)
    280c:	687a      	ldr	r2, [r7, #4]
    280e:	601a      	str	r2, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw);
    2810:	687b      	ldr	r3, [r7, #4]
    2812:	681b      	ldr	r3, [r3, #0]
    2814:	0018      	movs	r0, r3
    2816:	4b24      	ldr	r3, [pc, #144]	; (28a8 <_calendar_init+0xcc>)
    2818:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw)) {
    281a:	687b      	ldr	r3, [r7, #4]
    281c:	681b      	ldr	r3, [r3, #0]
    281e:	0018      	movs	r0, r3
    2820:	4b22      	ldr	r3, [pc, #136]	; (28ac <_calendar_init+0xd0>)
    2822:	4798      	blx	r3
    2824:	1e03      	subs	r3, r0, #0
    2826:	d009      	beq.n	283c <_calendar_init+0x60>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
    2828:	687b      	ldr	r3, [r7, #4]
    282a:	681b      	ldr	r3, [r3, #0]
    282c:	0018      	movs	r0, r3
    282e:	4b20      	ldr	r3, [pc, #128]	; (28b0 <_calendar_init+0xd4>)
    2830:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw);
    2832:	687b      	ldr	r3, [r7, #4]
    2834:	681b      	ldr	r3, [r3, #0]
    2836:	0018      	movs	r0, r3
    2838:	4b1b      	ldr	r3, [pc, #108]	; (28a8 <_calendar_init+0xcc>)
    283a:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRL_SWRST_bit(dev->hw);
    283c:	687b      	ldr	r3, [r7, #4]
    283e:	681b      	ldr	r3, [r3, #0]
    2840:	0018      	movs	r0, r3
    2842:	4b1c      	ldr	r3, [pc, #112]	; (28b4 <_calendar_init+0xd8>)
    2844:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw);
    2846:	687b      	ldr	r3, [r7, #4]
    2848:	681b      	ldr	r3, [r3, #0]
    284a:	0018      	movs	r0, r3
    284c:	4b16      	ldr	r3, [pc, #88]	; (28a8 <_calendar_init+0xcc>)
    284e:	4798      	blx	r3

	/* Set mode 0 */
	register_value = RTC_MODE0_CTRL_MODE(0);
    2850:	230e      	movs	r3, #14
    2852:	18fb      	adds	r3, r7, r3
    2854:	2200      	movs	r2, #0
    2856:	801a      	strh	r2, [r3, #0]

	/* Set prescaler */
	register_value |= RTC_MODE0_CTRL_PRESCALER(CONF_RTC_PRESCALER);
    2858:	230e      	movs	r3, #14
    285a:	18fb      	adds	r3, r7, r3
    285c:	220e      	movs	r2, #14
    285e:	18ba      	adds	r2, r7, r2
    2860:	8812      	ldrh	r2, [r2, #0]
    2862:	801a      	strh	r2, [r3, #0]

	/* not clear counter on compare/alarm match */
	register_value &= (~RTC_MODE0_CTRL_MATCHCLR);
    2864:	230e      	movs	r3, #14
    2866:	18fb      	adds	r3, r7, r3
    2868:	220e      	movs	r2, #14
    286a:	18ba      	adds	r2, r7, r2
    286c:	8812      	ldrh	r2, [r2, #0]
    286e:	2180      	movs	r1, #128	; 0x80
    2870:	438a      	bics	r2, r1
    2872:	801a      	strh	r2, [r3, #0]

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);
    2874:	687b      	ldr	r3, [r7, #4]
    2876:	681a      	ldr	r2, [r3, #0]
    2878:	230e      	movs	r3, #14
    287a:	18fb      	adds	r3, r7, r3
    287c:	881b      	ldrh	r3, [r3, #0]
    287e:	0019      	movs	r1, r3
    2880:	0010      	movs	r0, r2
    2882:	4b0d      	ldr	r3, [pc, #52]	; (28b8 <_calendar_init+0xdc>)
    2884:	4798      	blx	r3

	/* set continuously clock read update mode */
	hri_rtcmode0_set_READREQ_RCONT_bit(dev->hw);
    2886:	687b      	ldr	r3, [r7, #4]
    2888:	681b      	ldr	r3, [r3, #0]
    288a:	0018      	movs	r0, r3
    288c:	4b0b      	ldr	r3, [pc, #44]	; (28bc <_calendar_init+0xe0>)
    288e:	4798      	blx	r3
	        | (CONF_RTC_PEREO4 << RTC_MODE0_EVCTRL_PEREO4_Pos) | (CONF_RTC_PEREO5 << RTC_MODE0_EVCTRL_PEREO5_Pos)
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	return ERR_NONE;
    2890:	2300      	movs	r3, #0
}
    2892:	0018      	movs	r0, r3
    2894:	46bd      	mov	sp, r7
    2896:	b004      	add	sp, #16
    2898:	bd80      	pop	{r7, pc}
    289a:	46c0      	nop			; (mov r8, r8)
    289c:	000052a8 	.word	0x000052a8
    28a0:	00001a3f 	.word	0x00001a3f
    28a4:	200000b4 	.word	0x200000b4
    28a8:	000024f9 	.word	0x000024f9
    28ac:	000025c9 	.word	0x000025c9
    28b0:	00002611 	.word	0x00002611
    28b4:	00002571 	.word	0x00002571
    28b8:	0000263d 	.word	0x0000263d
    28bc:	00002669 	.word	0x00002669

000028c0 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    28c0:	b580      	push	{r7, lr}
    28c2:	b082      	sub	sp, #8
    28c4:	af00      	add	r7, sp, #0
    28c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    28c8:	687b      	ldr	r3, [r7, #4]
    28ca:	2b00      	cmp	r3, #0
    28cc:	d005      	beq.n	28da <_calendar_enable+0x1a>
    28ce:	687b      	ldr	r3, [r7, #4]
    28d0:	681b      	ldr	r3, [r3, #0]
    28d2:	2b00      	cmp	r3, #0
    28d4:	d001      	beq.n	28da <_calendar_enable+0x1a>
    28d6:	2301      	movs	r3, #1
    28d8:	e000      	b.n	28dc <_calendar_enable+0x1c>
    28da:	2300      	movs	r3, #0
    28dc:	1c1a      	adds	r2, r3, #0
    28de:	2301      	movs	r3, #1
    28e0:	4013      	ands	r3, r2
    28e2:	b2db      	uxtb	r3, r3
    28e4:	4907      	ldr	r1, [pc, #28]	; (2904 <_calendar_enable+0x44>)
    28e6:	22aa      	movs	r2, #170	; 0xaa
    28e8:	0018      	movs	r0, r3
    28ea:	4b07      	ldr	r3, [pc, #28]	; (2908 <_calendar_enable+0x48>)
    28ec:	4798      	blx	r3

	/* Enable rtc */
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
    28ee:	687b      	ldr	r3, [r7, #4]
    28f0:	681b      	ldr	r3, [r3, #0]
    28f2:	0018      	movs	r0, r3
    28f4:	4b05      	ldr	r3, [pc, #20]	; (290c <_calendar_enable+0x4c>)
    28f6:	4798      	blx	r3

	return ERR_NONE;
    28f8:	2300      	movs	r3, #0
}
    28fa:	0018      	movs	r0, r3
    28fc:	46bd      	mov	sp, r7
    28fe:	b002      	add	sp, #8
    2900:	bd80      	pop	{r7, pc}
    2902:	46c0      	nop			; (mov r8, r8)
    2904:	000052a8 	.word	0x000052a8
    2908:	00001a3f 	.word	0x00001a3f
    290c:	0000259d 	.word	0x0000259d

00002910 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    2910:	b580      	push	{r7, lr}
    2912:	b084      	sub	sp, #16
    2914:	af00      	add	r7, sp, #0
    2916:	6078      	str	r0, [r7, #4]
	uint32_t tmp;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2918:	687b      	ldr	r3, [r7, #4]
    291a:	2b00      	cmp	r3, #0
    291c:	d005      	beq.n	292a <_calendar_get_counter+0x1a>
    291e:	687b      	ldr	r3, [r7, #4]
    2920:	681b      	ldr	r3, [r3, #0]
    2922:	2b00      	cmp	r3, #0
    2924:	d001      	beq.n	292a <_calendar_get_counter+0x1a>
    2926:	2301      	movs	r3, #1
    2928:	e000      	b.n	292c <_calendar_get_counter+0x1c>
    292a:	2300      	movs	r3, #0
    292c:	1c1a      	adds	r2, r3, #0
    292e:	2301      	movs	r3, #1
    2930:	4013      	ands	r3, r2
    2932:	b2db      	uxtb	r3, r3
    2934:	4908      	ldr	r1, [pc, #32]	; (2958 <_calendar_get_counter+0x48>)
    2936:	22d6      	movs	r2, #214	; 0xd6
    2938:	0018      	movs	r0, r3
    293a:	4b08      	ldr	r3, [pc, #32]	; (295c <_calendar_get_counter+0x4c>)
    293c:	4798      	blx	r3

	/* Get counter. */
	tmp = hri_rtcmode0_read_COUNT_COUNT_bf(dev->hw);
    293e:	687b      	ldr	r3, [r7, #4]
    2940:	681b      	ldr	r3, [r3, #0]
    2942:	0018      	movs	r0, r3
    2944:	4b06      	ldr	r3, [pc, #24]	; (2960 <_calendar_get_counter+0x50>)
    2946:	4798      	blx	r3
    2948:	0003      	movs	r3, r0
    294a:	60fb      	str	r3, [r7, #12]

	return tmp;
    294c:	68fb      	ldr	r3, [r7, #12]
}
    294e:	0018      	movs	r0, r3
    2950:	46bd      	mov	sp, r7
    2952:	b004      	add	sp, #16
    2954:	bd80      	pop	{r7, pc}
    2956:	46c0      	nop			; (mov r8, r8)
    2958:	000052a8 	.word	0x000052a8
    295c:	00001a3f 	.word	0x00001a3f
    2960:	0000268d 	.word	0x0000268d

00002964 <_calendar_set_comp>:

/**
 * \brief Set the compare for the specified value.
 */
int32_t _calendar_set_comp(struct calendar_dev *const dev, const uint32_t comp)
{
    2964:	b580      	push	{r7, lr}
    2966:	b082      	sub	sp, #8
    2968:	af00      	add	r7, sp, #0
    296a:	6078      	str	r0, [r7, #4]
    296c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    296e:	687b      	ldr	r3, [r7, #4]
    2970:	2b00      	cmp	r3, #0
    2972:	d005      	beq.n	2980 <_calendar_set_comp+0x1c>
    2974:	687b      	ldr	r3, [r7, #4]
    2976:	681b      	ldr	r3, [r3, #0]
    2978:	2b00      	cmp	r3, #0
    297a:	d001      	beq.n	2980 <_calendar_set_comp+0x1c>
    297c:	2301      	movs	r3, #1
    297e:	e000      	b.n	2982 <_calendar_set_comp+0x1e>
    2980:	2300      	movs	r3, #0
    2982:	1c1a      	adds	r2, r3, #0
    2984:	2301      	movs	r3, #1
    2986:	4013      	ands	r3, r2
    2988:	b2db      	uxtb	r3, r3
    298a:	4908      	ldr	r1, [pc, #32]	; (29ac <_calendar_set_comp+0x48>)
    298c:	22e4      	movs	r2, #228	; 0xe4
    298e:	0018      	movs	r0, r3
    2990:	4b07      	ldr	r3, [pc, #28]	; (29b0 <_calendar_set_comp+0x4c>)
    2992:	4798      	blx	r3

	/* Set value into alarm register. */
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, comp);
    2994:	687b      	ldr	r3, [r7, #4]
    2996:	681b      	ldr	r3, [r3, #0]
    2998:	683a      	ldr	r2, [r7, #0]
    299a:	2100      	movs	r1, #0
    299c:	0018      	movs	r0, r3
    299e:	4b05      	ldr	r3, [pc, #20]	; (29b4 <_calendar_set_comp+0x50>)
    29a0:	4798      	blx	r3

	return ERR_NONE;
    29a2:	2300      	movs	r3, #0
}
    29a4:	0018      	movs	r0, r3
    29a6:	46bd      	mov	sp, r7
    29a8:	b002      	add	sp, #8
    29aa:	bd80      	pop	{r7, pc}
    29ac:	000052a8 	.word	0x000052a8
    29b0:	00001a3f 	.word	0x00001a3f
    29b4:	000026b1 	.word	0x000026b1

000029b8 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    29b8:	b580      	push	{r7, lr}
    29ba:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    29bc:	4b03      	ldr	r3, [pc, #12]	; (29cc <RTC_Handler+0x14>)
    29be:	681b      	ldr	r3, [r3, #0]
    29c0:	0018      	movs	r0, r3
    29c2:	4b03      	ldr	r3, [pc, #12]	; (29d0 <RTC_Handler+0x18>)
    29c4:	4798      	blx	r3
}
    29c6:	46c0      	nop			; (mov r8, r8)
    29c8:	46bd      	mov	sp, r7
    29ca:	bd80      	pop	{r7, pc}
    29cc:	200000b4 	.word	0x200000b4
    29d0:	00002791 	.word	0x00002791

000029d4 <__NVIC_EnableIRQ>:
{
    29d4:	b580      	push	{r7, lr}
    29d6:	b082      	sub	sp, #8
    29d8:	af00      	add	r7, sp, #0
    29da:	0002      	movs	r2, r0
    29dc:	1dfb      	adds	r3, r7, #7
    29de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    29e0:	1dfb      	adds	r3, r7, #7
    29e2:	781b      	ldrb	r3, [r3, #0]
    29e4:	2b7f      	cmp	r3, #127	; 0x7f
    29e6:	d809      	bhi.n	29fc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    29e8:	4b06      	ldr	r3, [pc, #24]	; (2a04 <__NVIC_EnableIRQ+0x30>)
    29ea:	1dfa      	adds	r2, r7, #7
    29ec:	7812      	ldrb	r2, [r2, #0]
    29ee:	0011      	movs	r1, r2
    29f0:	221f      	movs	r2, #31
    29f2:	400a      	ands	r2, r1
    29f4:	2101      	movs	r1, #1
    29f6:	4091      	lsls	r1, r2
    29f8:	000a      	movs	r2, r1
    29fa:	601a      	str	r2, [r3, #0]
}
    29fc:	46c0      	nop			; (mov r8, r8)
    29fe:	46bd      	mov	sp, r7
    2a00:	b002      	add	sp, #8
    2a02:	bd80      	pop	{r7, pc}
    2a04:	e000e100 	.word	0xe000e100

00002a08 <__NVIC_DisableIRQ>:
{
    2a08:	b580      	push	{r7, lr}
    2a0a:	b082      	sub	sp, #8
    2a0c:	af00      	add	r7, sp, #0
    2a0e:	0002      	movs	r2, r0
    2a10:	1dfb      	adds	r3, r7, #7
    2a12:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    2a14:	1dfb      	adds	r3, r7, #7
    2a16:	781b      	ldrb	r3, [r3, #0]
    2a18:	2b7f      	cmp	r3, #127	; 0x7f
    2a1a:	d80e      	bhi.n	2a3a <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a1c:	4909      	ldr	r1, [pc, #36]	; (2a44 <__NVIC_DisableIRQ+0x3c>)
    2a1e:	1dfb      	adds	r3, r7, #7
    2a20:	781b      	ldrb	r3, [r3, #0]
    2a22:	001a      	movs	r2, r3
    2a24:	231f      	movs	r3, #31
    2a26:	4013      	ands	r3, r2
    2a28:	2201      	movs	r2, #1
    2a2a:	409a      	lsls	r2, r3
    2a2c:	0013      	movs	r3, r2
    2a2e:	2280      	movs	r2, #128	; 0x80
    2a30:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    2a32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a36:	f3bf 8f6f 	isb	sy
}
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	46bd      	mov	sp, r7
    2a3e:	b002      	add	sp, #8
    2a40:	bd80      	pop	{r7, pc}
    2a42:	46c0      	nop			; (mov r8, r8)
    2a44:	e000e100 	.word	0xe000e100

00002a48 <__NVIC_ClearPendingIRQ>:
{
    2a48:	b580      	push	{r7, lr}
    2a4a:	b082      	sub	sp, #8
    2a4c:	af00      	add	r7, sp, #0
    2a4e:	0002      	movs	r2, r0
    2a50:	1dfb      	adds	r3, r7, #7
    2a52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    2a54:	1dfb      	adds	r3, r7, #7
    2a56:	781b      	ldrb	r3, [r3, #0]
    2a58:	2b7f      	cmp	r3, #127	; 0x7f
    2a5a:	d80a      	bhi.n	2a72 <__NVIC_ClearPendingIRQ+0x2a>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a5c:	4907      	ldr	r1, [pc, #28]	; (2a7c <__NVIC_ClearPendingIRQ+0x34>)
    2a5e:	1dfb      	adds	r3, r7, #7
    2a60:	781b      	ldrb	r3, [r3, #0]
    2a62:	001a      	movs	r2, r3
    2a64:	231f      	movs	r3, #31
    2a66:	4013      	ands	r3, r2
    2a68:	2201      	movs	r2, #1
    2a6a:	409a      	lsls	r2, r3
    2a6c:	23c0      	movs	r3, #192	; 0xc0
    2a6e:	005b      	lsls	r3, r3, #1
    2a70:	50ca      	str	r2, [r1, r3]
}
    2a72:	46c0      	nop			; (mov r8, r8)
    2a74:	46bd      	mov	sp, r7
    2a76:	b002      	add	sp, #8
    2a78:	bd80      	pop	{r7, pc}
    2a7a:	46c0      	nop			; (mov r8, r8)
    2a7c:	e000e100 	.word	0xe000e100

00002a80 <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    2a80:	b580      	push	{r7, lr}
    2a82:	b082      	sub	sp, #8
    2a84:	af00      	add	r7, sp, #0
    2a86:	6078      	str	r0, [r7, #4]
    2a88:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2a8a:	46c0      	nop			; (mov r8, r8)
    2a8c:	687b      	ldr	r3, [r7, #4]
    2a8e:	69db      	ldr	r3, [r3, #28]
    2a90:	683a      	ldr	r2, [r7, #0]
    2a92:	4013      	ands	r3, r2
    2a94:	d1fa      	bne.n	2a8c <hri_sercomusart_wait_for_sync+0xc>
	};
}
    2a96:	46c0      	nop			; (mov r8, r8)
    2a98:	46bd      	mov	sp, r7
    2a9a:	b002      	add	sp, #8
    2a9c:	bd80      	pop	{r7, pc}

00002a9e <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    2a9e:	b580      	push	{r7, lr}
    2aa0:	b082      	sub	sp, #8
    2aa2:	af00      	add	r7, sp, #0
    2aa4:	6078      	str	r0, [r7, #4]
    2aa6:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2aa8:	687b      	ldr	r3, [r7, #4]
    2aaa:	69db      	ldr	r3, [r3, #28]
    2aac:	683a      	ldr	r2, [r7, #0]
    2aae:	4013      	ands	r3, r2
    2ab0:	1e5a      	subs	r2, r3, #1
    2ab2:	4193      	sbcs	r3, r2
    2ab4:	b2db      	uxtb	r3, r3
}
    2ab6:	0018      	movs	r0, r3
    2ab8:	46bd      	mov	sp, r7
    2aba:	b002      	add	sp, #8
    2abc:	bd80      	pop	{r7, pc}

00002abe <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    2abe:	b580      	push	{r7, lr}
    2ac0:	b082      	sub	sp, #8
    2ac2:	af00      	add	r7, sp, #0
    2ac4:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2ac6:	687b      	ldr	r3, [r7, #4]
    2ac8:	7e1b      	ldrb	r3, [r3, #24]
    2aca:	b2db      	uxtb	r3, r3
    2acc:	001a      	movs	r2, r3
    2ace:	2301      	movs	r3, #1
    2ad0:	4013      	ands	r3, r2
    2ad2:	1e5a      	subs	r2, r3, #1
    2ad4:	4193      	sbcs	r3, r2
    2ad6:	b2db      	uxtb	r3, r3
}
    2ad8:	0018      	movs	r0, r3
    2ada:	46bd      	mov	sp, r7
    2adc:	b002      	add	sp, #8
    2ade:	bd80      	pop	{r7, pc}

00002ae0 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    2ae0:	b580      	push	{r7, lr}
    2ae2:	b082      	sub	sp, #8
    2ae4:	af00      	add	r7, sp, #0
    2ae6:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2ae8:	687b      	ldr	r3, [r7, #4]
    2aea:	7e1b      	ldrb	r3, [r3, #24]
    2aec:	b2db      	uxtb	r3, r3
    2aee:	085b      	lsrs	r3, r3, #1
    2af0:	2201      	movs	r2, #1
    2af2:	4013      	ands	r3, r2
    2af4:	1e5a      	subs	r2, r3, #1
    2af6:	4193      	sbcs	r3, r2
    2af8:	b2db      	uxtb	r3, r3
}
    2afa:	0018      	movs	r0, r3
    2afc:	46bd      	mov	sp, r7
    2afe:	b002      	add	sp, #8
    2b00:	bd80      	pop	{r7, pc}

00002b02 <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    2b02:	b580      	push	{r7, lr}
    2b04:	b082      	sub	sp, #8
    2b06:	af00      	add	r7, sp, #0
    2b08:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2b0a:	687b      	ldr	r3, [r7, #4]
    2b0c:	7e1b      	ldrb	r3, [r3, #24]
    2b0e:	b2db      	uxtb	r3, r3
    2b10:	089b      	lsrs	r3, r3, #2
    2b12:	2201      	movs	r2, #1
    2b14:	4013      	ands	r3, r2
    2b16:	1e5a      	subs	r2, r3, #1
    2b18:	4193      	sbcs	r3, r2
    2b1a:	b2db      	uxtb	r3, r3
}
    2b1c:	0018      	movs	r0, r3
    2b1e:	46bd      	mov	sp, r7
    2b20:	b002      	add	sp, #8
    2b22:	bd80      	pop	{r7, pc}

00002b24 <hri_sercomusart_get_interrupt_ERROR_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
}

static inline bool hri_sercomusart_get_interrupt_ERROR_bit(const void *const hw)
{
    2b24:	b580      	push	{r7, lr}
    2b26:	b082      	sub	sp, #8
    2b28:	af00      	add	r7, sp, #0
    2b2a:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2b2c:	687b      	ldr	r3, [r7, #4]
    2b2e:	7e1b      	ldrb	r3, [r3, #24]
    2b30:	b2db      	uxtb	r3, r3
    2b32:	09db      	lsrs	r3, r3, #7
    2b34:	2201      	movs	r2, #1
    2b36:	4013      	ands	r3, r2
    2b38:	1e5a      	subs	r2, r3, #1
    2b3a:	4193      	sbcs	r3, r2
    2b3c:	b2db      	uxtb	r3, r3
}
    2b3e:	0018      	movs	r0, r3
    2b40:	46bd      	mov	sp, r7
    2b42:	b002      	add	sp, #8
    2b44:	bd80      	pop	{r7, pc}

00002b46 <hri_sercomusart_clear_interrupt_ERROR_bit>:

static inline void hri_sercomusart_clear_interrupt_ERROR_bit(const void *const hw)
{
    2b46:	b580      	push	{r7, lr}
    2b48:	b082      	sub	sp, #8
    2b4a:	af00      	add	r7, sp, #0
    2b4c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2b4e:	687b      	ldr	r3, [r7, #4]
    2b50:	2280      	movs	r2, #128	; 0x80
    2b52:	761a      	strb	r2, [r3, #24]
}
    2b54:	46c0      	nop			; (mov r8, r8)
    2b56:	46bd      	mov	sp, r7
    2b58:	b002      	add	sp, #8
    2b5a:	bd80      	pop	{r7, pc}

00002b5c <hri_sercomusart_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->SPI.INTENCLR.reg = mask;
}

static inline void hri_sercomusart_set_INTEN_DRE_bit(const void *const hw)
{
    2b5c:	b580      	push	{r7, lr}
    2b5e:	b082      	sub	sp, #8
    2b60:	af00      	add	r7, sp, #0
    2b62:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2b64:	687b      	ldr	r3, [r7, #4]
    2b66:	2201      	movs	r2, #1
    2b68:	759a      	strb	r2, [r3, #22]
}
    2b6a:	46c0      	nop			; (mov r8, r8)
    2b6c:	46bd      	mov	sp, r7
    2b6e:	b002      	add	sp, #8
    2b70:	bd80      	pop	{r7, pc}

00002b72 <hri_sercomusart_get_INTEN_DRE_bit>:

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
    2b72:	b580      	push	{r7, lr}
    2b74:	b082      	sub	sp, #8
    2b76:	af00      	add	r7, sp, #0
    2b78:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    2b7a:	687b      	ldr	r3, [r7, #4]
    2b7c:	7d9b      	ldrb	r3, [r3, #22]
    2b7e:	b2db      	uxtb	r3, r3
    2b80:	001a      	movs	r2, r3
    2b82:	2301      	movs	r3, #1
    2b84:	4013      	ands	r3, r2
    2b86:	1e5a      	subs	r2, r3, #1
    2b88:	4193      	sbcs	r3, r2
    2b8a:	b2db      	uxtb	r3, r3
}
    2b8c:	0018      	movs	r0, r3
    2b8e:	46bd      	mov	sp, r7
    2b90:	b002      	add	sp, #8
    2b92:	bd80      	pop	{r7, pc}

00002b94 <hri_sercomusart_write_INTEN_DRE_bit>:

static inline void hri_sercomusart_write_INTEN_DRE_bit(const void *const hw, bool value)
{
    2b94:	b580      	push	{r7, lr}
    2b96:	b082      	sub	sp, #8
    2b98:	af00      	add	r7, sp, #0
    2b9a:	6078      	str	r0, [r7, #4]
    2b9c:	000a      	movs	r2, r1
    2b9e:	1cfb      	adds	r3, r7, #3
    2ba0:	701a      	strb	r2, [r3, #0]
	if (value == 0x0) {
    2ba2:	1cfb      	adds	r3, r7, #3
    2ba4:	781b      	ldrb	r3, [r3, #0]
    2ba6:	2201      	movs	r2, #1
    2ba8:	4053      	eors	r3, r2
    2baa:	b2db      	uxtb	r3, r3
    2bac:	2b00      	cmp	r3, #0
    2bae:	d003      	beq.n	2bb8 <hri_sercomusart_write_INTEN_DRE_bit+0x24>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2bb0:	687b      	ldr	r3, [r7, #4]
    2bb2:	2201      	movs	r2, #1
    2bb4:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
	}
}
    2bb6:	e002      	b.n	2bbe <hri_sercomusart_write_INTEN_DRE_bit+0x2a>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2bb8:	687b      	ldr	r3, [r7, #4]
    2bba:	2201      	movs	r2, #1
    2bbc:	759a      	strb	r2, [r3, #22]
}
    2bbe:	46c0      	nop			; (mov r8, r8)
    2bc0:	46bd      	mov	sp, r7
    2bc2:	b002      	add	sp, #8
    2bc4:	bd80      	pop	{r7, pc}

00002bc6 <hri_sercomusart_clear_INTEN_DRE_bit>:

static inline void hri_sercomusart_clear_INTEN_DRE_bit(const void *const hw)
{
    2bc6:	b580      	push	{r7, lr}
    2bc8:	b082      	sub	sp, #8
    2bca:	af00      	add	r7, sp, #0
    2bcc:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	2201      	movs	r2, #1
    2bd2:	751a      	strb	r2, [r3, #20]
}
    2bd4:	46c0      	nop			; (mov r8, r8)
    2bd6:	46bd      	mov	sp, r7
    2bd8:	b002      	add	sp, #8
    2bda:	bd80      	pop	{r7, pc}

00002bdc <hri_sercomusart_set_INTEN_TXC_bit>:

static inline void hri_sercomusart_set_INTEN_TXC_bit(const void *const hw)
{
    2bdc:	b580      	push	{r7, lr}
    2bde:	b082      	sub	sp, #8
    2be0:	af00      	add	r7, sp, #0
    2be2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2be4:	687b      	ldr	r3, [r7, #4]
    2be6:	2202      	movs	r2, #2
    2be8:	759a      	strb	r2, [r3, #22]
}
    2bea:	46c0      	nop			; (mov r8, r8)
    2bec:	46bd      	mov	sp, r7
    2bee:	b002      	add	sp, #8
    2bf0:	bd80      	pop	{r7, pc}

00002bf2 <hri_sercomusart_get_INTEN_TXC_bit>:

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
    2bf2:	b580      	push	{r7, lr}
    2bf4:	b082      	sub	sp, #8
    2bf6:	af00      	add	r7, sp, #0
    2bf8:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    2bfa:	687b      	ldr	r3, [r7, #4]
    2bfc:	7d9b      	ldrb	r3, [r3, #22]
    2bfe:	b2db      	uxtb	r3, r3
    2c00:	085b      	lsrs	r3, r3, #1
    2c02:	2201      	movs	r2, #1
    2c04:	4013      	ands	r3, r2
    2c06:	1e5a      	subs	r2, r3, #1
    2c08:	4193      	sbcs	r3, r2
    2c0a:	b2db      	uxtb	r3, r3
}
    2c0c:	0018      	movs	r0, r3
    2c0e:	46bd      	mov	sp, r7
    2c10:	b002      	add	sp, #8
    2c12:	bd80      	pop	{r7, pc}

00002c14 <hri_sercomusart_write_INTEN_TXC_bit>:

static inline void hri_sercomusart_write_INTEN_TXC_bit(const void *const hw, bool value)
{
    2c14:	b580      	push	{r7, lr}
    2c16:	b082      	sub	sp, #8
    2c18:	af00      	add	r7, sp, #0
    2c1a:	6078      	str	r0, [r7, #4]
    2c1c:	000a      	movs	r2, r1
    2c1e:	1cfb      	adds	r3, r7, #3
    2c20:	701a      	strb	r2, [r3, #0]
	if (value == 0x0) {
    2c22:	1cfb      	adds	r3, r7, #3
    2c24:	781b      	ldrb	r3, [r3, #0]
    2c26:	2201      	movs	r2, #1
    2c28:	4053      	eors	r3, r2
    2c2a:	b2db      	uxtb	r3, r3
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	d003      	beq.n	2c38 <hri_sercomusart_write_INTEN_TXC_bit+0x24>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2c30:	687b      	ldr	r3, [r7, #4]
    2c32:	2202      	movs	r2, #2
    2c34:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
	}
}
    2c36:	e002      	b.n	2c3e <hri_sercomusart_write_INTEN_TXC_bit+0x2a>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2c38:	687b      	ldr	r3, [r7, #4]
    2c3a:	2202      	movs	r2, #2
    2c3c:	759a      	strb	r2, [r3, #22]
}
    2c3e:	46c0      	nop			; (mov r8, r8)
    2c40:	46bd      	mov	sp, r7
    2c42:	b002      	add	sp, #8
    2c44:	bd80      	pop	{r7, pc}

00002c46 <hri_sercomusart_clear_INTEN_TXC_bit>:

static inline void hri_sercomusart_clear_INTEN_TXC_bit(const void *const hw)
{
    2c46:	b580      	push	{r7, lr}
    2c48:	b082      	sub	sp, #8
    2c4a:	af00      	add	r7, sp, #0
    2c4c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2c4e:	687b      	ldr	r3, [r7, #4]
    2c50:	2202      	movs	r2, #2
    2c52:	751a      	strb	r2, [r3, #20]
}
    2c54:	46c0      	nop			; (mov r8, r8)
    2c56:	46bd      	mov	sp, r7
    2c58:	b002      	add	sp, #8
    2c5a:	bd80      	pop	{r7, pc}

00002c5c <hri_sercomusart_write_INTEN_RXC_bit>:
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_RXC) >> SERCOM_USART_INTENSET_RXC_Pos;
}

static inline void hri_sercomusart_write_INTEN_RXC_bit(const void *const hw, bool value)
{
    2c5c:	b580      	push	{r7, lr}
    2c5e:	b082      	sub	sp, #8
    2c60:	af00      	add	r7, sp, #0
    2c62:	6078      	str	r0, [r7, #4]
    2c64:	000a      	movs	r2, r1
    2c66:	1cfb      	adds	r3, r7, #3
    2c68:	701a      	strb	r2, [r3, #0]
	if (value == 0x0) {
    2c6a:	1cfb      	adds	r3, r7, #3
    2c6c:	781b      	ldrb	r3, [r3, #0]
    2c6e:	2201      	movs	r2, #1
    2c70:	4053      	eors	r3, r2
    2c72:	b2db      	uxtb	r3, r3
    2c74:	2b00      	cmp	r3, #0
    2c76:	d003      	beq.n	2c80 <hri_sercomusart_write_INTEN_RXC_bit+0x24>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    2c78:	687b      	ldr	r3, [r7, #4]
    2c7a:	2204      	movs	r2, #4
    2c7c:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
	}
}
    2c7e:	e002      	b.n	2c86 <hri_sercomusart_write_INTEN_RXC_bit+0x2a>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    2c80:	687b      	ldr	r3, [r7, #4]
    2c82:	2204      	movs	r2, #4
    2c84:	759a      	strb	r2, [r3, #22]
}
    2c86:	46c0      	nop			; (mov r8, r8)
    2c88:	46bd      	mov	sp, r7
    2c8a:	b002      	add	sp, #8
    2c8c:	bd80      	pop	{r7, pc}

00002c8e <hri_sercomusart_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_ERROR) >> SERCOM_USART_INTENSET_ERROR_Pos;
}

static inline void hri_sercomusart_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    2c8e:	b580      	push	{r7, lr}
    2c90:	b082      	sub	sp, #8
    2c92:	af00      	add	r7, sp, #0
    2c94:	6078      	str	r0, [r7, #4]
    2c96:	000a      	movs	r2, r1
    2c98:	1cfb      	adds	r3, r7, #3
    2c9a:	701a      	strb	r2, [r3, #0]
	if (value == 0x0) {
    2c9c:	1cfb      	adds	r3, r7, #3
    2c9e:	781b      	ldrb	r3, [r3, #0]
    2ca0:	2201      	movs	r2, #1
    2ca2:	4053      	eors	r3, r2
    2ca4:	b2db      	uxtb	r3, r3
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d003      	beq.n	2cb2 <hri_sercomusart_write_INTEN_ERROR_bit+0x24>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    2caa:	687b      	ldr	r3, [r7, #4]
    2cac:	2280      	movs	r2, #128	; 0x80
    2cae:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
	}
}
    2cb0:	e002      	b.n	2cb8 <hri_sercomusart_write_INTEN_ERROR_bit+0x2a>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    2cb2:	687b      	ldr	r3, [r7, #4]
    2cb4:	2280      	movs	r2, #128	; 0x80
    2cb6:	759a      	strb	r2, [r3, #22]
}
    2cb8:	46c0      	nop			; (mov r8, r8)
    2cba:	46bd      	mov	sp, r7
    2cbc:	b002      	add	sp, #8
    2cbe:	bd80      	pop	{r7, pc}

00002cc0 <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    2cc0:	b580      	push	{r7, lr}
    2cc2:	b082      	sub	sp, #8
    2cc4:	af00      	add	r7, sp, #0
    2cc6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2cc8:	687b      	ldr	r3, [r7, #4]
    2cca:	681b      	ldr	r3, [r3, #0]
    2ccc:	2202      	movs	r2, #2
    2cce:	431a      	orrs	r2, r3
    2cd0:	687b      	ldr	r3, [r7, #4]
    2cd2:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2cd4:	687b      	ldr	r3, [r7, #4]
    2cd6:	2103      	movs	r1, #3
    2cd8:	0018      	movs	r0, r3
    2cda:	4b03      	ldr	r3, [pc, #12]	; (2ce8 <hri_sercomusart_set_CTRLA_ENABLE_bit+0x28>)
    2cdc:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2cde:	46c0      	nop			; (mov r8, r8)
    2ce0:	46bd      	mov	sp, r7
    2ce2:	b002      	add	sp, #8
    2ce4:	bd80      	pop	{r7, pc}
    2ce6:	46c0      	nop			; (mov r8, r8)
    2ce8:	00002a81 	.word	0x00002a81

00002cec <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2cec:	b580      	push	{r7, lr}
    2cee:	b082      	sub	sp, #8
    2cf0:	af00      	add	r7, sp, #0
    2cf2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2cf4:	687b      	ldr	r3, [r7, #4]
    2cf6:	681b      	ldr	r3, [r3, #0]
    2cf8:	2202      	movs	r2, #2
    2cfa:	4393      	bics	r3, r2
    2cfc:	001a      	movs	r2, r3
    2cfe:	687b      	ldr	r3, [r7, #4]
    2d00:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2d02:	687b      	ldr	r3, [r7, #4]
    2d04:	2103      	movs	r1, #3
    2d06:	0018      	movs	r0, r3
    2d08:	4b02      	ldr	r3, [pc, #8]	; (2d14 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x28>)
    2d0a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2d0c:	46c0      	nop			; (mov r8, r8)
    2d0e:	46bd      	mov	sp, r7
    2d10:	b002      	add	sp, #8
    2d12:	bd80      	pop	{r7, pc}
    2d14:	00002a81 	.word	0x00002a81

00002d18 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    2d18:	b580      	push	{r7, lr}
    2d1a:	b084      	sub	sp, #16
    2d1c:	af00      	add	r7, sp, #0
    2d1e:	6078      	str	r0, [r7, #4]
    2d20:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2d22:	687b      	ldr	r3, [r7, #4]
    2d24:	2103      	movs	r1, #3
    2d26:	0018      	movs	r0, r3
    2d28:	4b06      	ldr	r3, [pc, #24]	; (2d44 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    2d2a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2d2c:	687b      	ldr	r3, [r7, #4]
    2d2e:	681b      	ldr	r3, [r3, #0]
    2d30:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    2d32:	68fb      	ldr	r3, [r7, #12]
    2d34:	683a      	ldr	r2, [r7, #0]
    2d36:	4013      	ands	r3, r2
    2d38:	60fb      	str	r3, [r7, #12]
	return tmp;
    2d3a:	68fb      	ldr	r3, [r7, #12]
}
    2d3c:	0018      	movs	r0, r3
    2d3e:	46bd      	mov	sp, r7
    2d40:	b004      	add	sp, #16
    2d42:	bd80      	pop	{r7, pc}
    2d44:	00002a81 	.word	0x00002a81

00002d48 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    2d48:	b580      	push	{r7, lr}
    2d4a:	b082      	sub	sp, #8
    2d4c:	af00      	add	r7, sp, #0
    2d4e:	6078      	str	r0, [r7, #4]
    2d50:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2d52:	687b      	ldr	r3, [r7, #4]
    2d54:	683a      	ldr	r2, [r7, #0]
    2d56:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2d58:	687b      	ldr	r3, [r7, #4]
    2d5a:	2103      	movs	r1, #3
    2d5c:	0018      	movs	r0, r3
    2d5e:	4b03      	ldr	r3, [pc, #12]	; (2d6c <hri_sercomusart_write_CTRLA_reg+0x24>)
    2d60:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2d62:	46c0      	nop			; (mov r8, r8)
    2d64:	46bd      	mov	sp, r7
    2d66:	b002      	add	sp, #8
    2d68:	bd80      	pop	{r7, pc}
    2d6a:	46c0      	nop			; (mov r8, r8)
    2d6c:	00002a81 	.word	0x00002a81

00002d70 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    2d70:	b580      	push	{r7, lr}
    2d72:	b082      	sub	sp, #8
    2d74:	af00      	add	r7, sp, #0
    2d76:	6078      	str	r0, [r7, #4]
    2d78:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2d7a:	687b      	ldr	r3, [r7, #4]
    2d7c:	683a      	ldr	r2, [r7, #0]
    2d7e:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    2d80:	687b      	ldr	r3, [r7, #4]
    2d82:	2107      	movs	r1, #7
    2d84:	0018      	movs	r0, r3
    2d86:	4b03      	ldr	r3, [pc, #12]	; (2d94 <hri_sercomusart_write_CTRLB_reg+0x24>)
    2d88:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2d8a:	46c0      	nop			; (mov r8, r8)
    2d8c:	46bd      	mov	sp, r7
    2d8e:	b002      	add	sp, #8
    2d90:	bd80      	pop	{r7, pc}
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	00002a81 	.word	0x00002a81

00002d98 <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    2d98:	b580      	push	{r7, lr}
    2d9a:	b082      	sub	sp, #8
    2d9c:	af00      	add	r7, sp, #0
    2d9e:	6078      	str	r0, [r7, #4]
    2da0:	000a      	movs	r2, r1
    2da2:	1cbb      	adds	r3, r7, #2
    2da4:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    2da6:	687b      	ldr	r3, [r7, #4]
    2da8:	1cba      	adds	r2, r7, #2
    2daa:	8812      	ldrh	r2, [r2, #0]
    2dac:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2dae:	46c0      	nop			; (mov r8, r8)
    2db0:	46bd      	mov	sp, r7
    2db2:	b002      	add	sp, #8
    2db4:	bd80      	pop	{r7, pc}

00002db6 <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    2db6:	b580      	push	{r7, lr}
    2db8:	b082      	sub	sp, #8
    2dba:	af00      	add	r7, sp, #0
    2dbc:	6078      	str	r0, [r7, #4]
    2dbe:	000a      	movs	r2, r1
    2dc0:	1cfb      	adds	r3, r7, #3
    2dc2:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    2dc4:	687b      	ldr	r3, [r7, #4]
    2dc6:	1cfa      	adds	r2, r7, #3
    2dc8:	7812      	ldrb	r2, [r2, #0]
    2dca:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2dcc:	46c0      	nop			; (mov r8, r8)
    2dce:	46bd      	mov	sp, r7
    2dd0:	b002      	add	sp, #8
    2dd2:	bd80      	pop	{r7, pc}

00002dd4 <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    2dd4:	b580      	push	{r7, lr}
    2dd6:	b082      	sub	sp, #8
    2dd8:	af00      	add	r7, sp, #0
    2dda:	6078      	str	r0, [r7, #4]
    2ddc:	000a      	movs	r2, r1
    2dde:	1cbb      	adds	r3, r7, #2
    2de0:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    2de2:	687b      	ldr	r3, [r7, #4]
    2de4:	1cba      	adds	r2, r7, #2
    2de6:	8812      	ldrh	r2, [r2, #0]
    2de8:	851a      	strh	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2dea:	46c0      	nop			; (mov r8, r8)
    2dec:	46bd      	mov	sp, r7
    2dee:	b002      	add	sp, #8
    2df0:	bd80      	pop	{r7, pc}

00002df2 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    2df2:	b580      	push	{r7, lr}
    2df4:	b082      	sub	sp, #8
    2df6:	af00      	add	r7, sp, #0
    2df8:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    2dfa:	687b      	ldr	r3, [r7, #4]
    2dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2dfe:	b29b      	uxth	r3, r3
}
    2e00:	0018      	movs	r0, r3
    2e02:	46bd      	mov	sp, r7
    2e04:	b002      	add	sp, #8
    2e06:	bd80      	pop	{r7, pc}

00002e08 <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    2e08:	b580      	push	{r7, lr}
    2e0a:	b082      	sub	sp, #8
    2e0c:	af00      	add	r7, sp, #0
    2e0e:	6078      	str	r0, [r7, #4]
    2e10:	000a      	movs	r2, r1
    2e12:	1cfb      	adds	r3, r7, #3
    2e14:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2e16:	687b      	ldr	r3, [r7, #4]
    2e18:	1cfa      	adds	r2, r7, #3
    2e1a:	2130      	movs	r1, #48	; 0x30
    2e1c:	7812      	ldrb	r2, [r2, #0]
    2e1e:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2e20:	46c0      	nop			; (mov r8, r8)
    2e22:	46bd      	mov	sp, r7
    2e24:	b002      	add	sp, #8
    2e26:	bd80      	pop	{r7, pc}

00002e28 <hri_sercomusart_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_clear_STATUS_reg(const void *const hw, hri_sercomusart_status_reg_t mask)
{
    2e28:	b580      	push	{r7, lr}
    2e2a:	b082      	sub	sp, #8
    2e2c:	af00      	add	r7, sp, #0
    2e2e:	6078      	str	r0, [r7, #4]
    2e30:	000a      	movs	r2, r1
    2e32:	1cbb      	adds	r3, r7, #2
    2e34:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2e36:	687b      	ldr	r3, [r7, #4]
    2e38:	1cba      	adds	r2, r7, #2
    2e3a:	8812      	ldrh	r2, [r2, #0]
    2e3c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2e3e:	46c0      	nop			; (mov r8, r8)
    2e40:	46bd      	mov	sp, r7
    2e42:	b002      	add	sp, #8
    2e44:	bd80      	pop	{r7, pc}

00002e46 <hri_sercomusart_read_STATUS_reg>:

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
    2e46:	b580      	push	{r7, lr}
    2e48:	b082      	sub	sp, #8
    2e4a:	af00      	add	r7, sp, #0
    2e4c:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.STATUS.reg;
    2e4e:	687b      	ldr	r3, [r7, #4]
    2e50:	8b5b      	ldrh	r3, [r3, #26]
    2e52:	b29b      	uxth	r3, r3
}
    2e54:	0018      	movs	r0, r3
    2e56:	46bd      	mov	sp, r7
    2e58:	b002      	add	sp, #8
    2e5a:	bd80      	pop	{r7, pc}

00002e5c <_usart_async_init>:

/**
 * \brief Initialize asynchronous SERCOM USART
 */
int32_t _usart_async_init(struct _usart_async_device *const device, void *const hw)
{
    2e5c:	b580      	push	{r7, lr}
    2e5e:	b084      	sub	sp, #16
    2e60:	af00      	add	r7, sp, #0
    2e62:	6078      	str	r0, [r7, #4]
    2e64:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
    2e66:	687b      	ldr	r3, [r7, #4]
    2e68:	1e5a      	subs	r2, r3, #1
    2e6a:	4193      	sbcs	r3, r2
    2e6c:	b2db      	uxtb	r3, r3
    2e6e:	491c      	ldr	r1, [pc, #112]	; (2ee0 <_usart_async_init+0x84>)
    2e70:	22c4      	movs	r2, #196	; 0xc4
    2e72:	0018      	movs	r0, r3
    2e74:	4b1b      	ldr	r3, [pc, #108]	; (2ee4 <_usart_async_init+0x88>)
    2e76:	4798      	blx	r3

	init_status = _usart_init(hw);
    2e78:	683b      	ldr	r3, [r7, #0]
    2e7a:	0018      	movs	r0, r3
    2e7c:	4b1a      	ldr	r3, [pc, #104]	; (2ee8 <_usart_async_init+0x8c>)
    2e7e:	4798      	blx	r3
    2e80:	0003      	movs	r3, r0
    2e82:	60fb      	str	r3, [r7, #12]
	if (init_status) {
    2e84:	68fb      	ldr	r3, [r7, #12]
    2e86:	2b00      	cmp	r3, #0
    2e88:	d001      	beq.n	2e8e <_usart_async_init+0x32>
		return init_status;
    2e8a:	68fb      	ldr	r3, [r7, #12]
    2e8c:	e024      	b.n	2ed8 <_usart_async_init+0x7c>
	}
	device->hw = hw;
    2e8e:	687b      	ldr	r3, [r7, #4]
    2e90:	683a      	ldr	r2, [r7, #0]
    2e92:	619a      	str	r2, [r3, #24]
	_sercom_init_irq_param(hw, (void *)device);
    2e94:	687a      	ldr	r2, [r7, #4]
    2e96:	683b      	ldr	r3, [r7, #0]
    2e98:	0011      	movs	r1, r2
    2e9a:	0018      	movs	r0, r3
    2e9c:	4b13      	ldr	r3, [pc, #76]	; (2eec <_usart_async_init+0x90>)
    2e9e:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    2ea0:	683b      	ldr	r3, [r7, #0]
    2ea2:	0018      	movs	r0, r3
    2ea4:	4b12      	ldr	r3, [pc, #72]	; (2ef0 <_usart_async_init+0x94>)
    2ea6:	4798      	blx	r3
    2ea8:	0003      	movs	r3, r0
    2eaa:	b25b      	sxtb	r3, r3
    2eac:	0018      	movs	r0, r3
    2eae:	4b11      	ldr	r3, [pc, #68]	; (2ef4 <_usart_async_init+0x98>)
    2eb0:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    2eb2:	683b      	ldr	r3, [r7, #0]
    2eb4:	0018      	movs	r0, r3
    2eb6:	4b0e      	ldr	r3, [pc, #56]	; (2ef0 <_usart_async_init+0x94>)
    2eb8:	4798      	blx	r3
    2eba:	0003      	movs	r3, r0
    2ebc:	b25b      	sxtb	r3, r3
    2ebe:	0018      	movs	r0, r3
    2ec0:	4b0d      	ldr	r3, [pc, #52]	; (2ef8 <_usart_async_init+0x9c>)
    2ec2:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    2ec4:	683b      	ldr	r3, [r7, #0]
    2ec6:	0018      	movs	r0, r3
    2ec8:	4b09      	ldr	r3, [pc, #36]	; (2ef0 <_usart_async_init+0x94>)
    2eca:	4798      	blx	r3
    2ecc:	0003      	movs	r3, r0
    2ece:	b25b      	sxtb	r3, r3
    2ed0:	0018      	movs	r0, r3
    2ed2:	4b0a      	ldr	r3, [pc, #40]	; (2efc <_usart_async_init+0xa0>)
    2ed4:	4798      	blx	r3

	return ERR_NONE;
    2ed6:	2300      	movs	r3, #0
}
    2ed8:	0018      	movs	r0, r3
    2eda:	46bd      	mov	sp, r7
    2edc:	b004      	add	sp, #16
    2ede:	bd80      	pop	{r7, pc}
    2ee0:	000052c0 	.word	0x000052c0
    2ee4:	00001a3f 	.word	0x00001a3f
    2ee8:	00003229 	.word	0x00003229
    2eec:	00003201 	.word	0x00003201
    2ef0:	00003425 	.word	0x00003425
    2ef4:	00002a09 	.word	0x00002a09
    2ef8:	00002a49 	.word	0x00002a49
    2efc:	000029d5 	.word	0x000029d5

00002f00 <_usart_async_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_async_enable(struct _usart_async_device *const device)
{
    2f00:	b580      	push	{r7, lr}
    2f02:	b082      	sub	sp, #8
    2f04:	af00      	add	r7, sp, #0
    2f06:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    2f08:	687b      	ldr	r3, [r7, #4]
    2f0a:	699b      	ldr	r3, [r3, #24]
    2f0c:	0018      	movs	r0, r3
    2f0e:	4b03      	ldr	r3, [pc, #12]	; (2f1c <_usart_async_enable+0x1c>)
    2f10:	4798      	blx	r3
}
    2f12:	46c0      	nop			; (mov r8, r8)
    2f14:	46bd      	mov	sp, r7
    2f16:	b002      	add	sp, #8
    2f18:	bd80      	pop	{r7, pc}
    2f1a:	46c0      	nop			; (mov r8, r8)
    2f1c:	00002cc1 	.word	0x00002cc1

00002f20 <_usart_async_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_async_write_byte(struct _usart_async_device *const device, uint8_t data)
{
    2f20:	b580      	push	{r7, lr}
    2f22:	b082      	sub	sp, #8
    2f24:	af00      	add	r7, sp, #0
    2f26:	6078      	str	r0, [r7, #4]
    2f28:	000a      	movs	r2, r1
    2f2a:	1cfb      	adds	r3, r7, #3
    2f2c:	701a      	strb	r2, [r3, #0]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2f2e:	687b      	ldr	r3, [r7, #4]
    2f30:	699a      	ldr	r2, [r3, #24]
    2f32:	1cfb      	adds	r3, r7, #3
    2f34:	781b      	ldrb	r3, [r3, #0]
    2f36:	b29b      	uxth	r3, r3
    2f38:	0019      	movs	r1, r3
    2f3a:	0010      	movs	r0, r2
    2f3c:	4b02      	ldr	r3, [pc, #8]	; (2f48 <_usart_async_write_byte+0x28>)
    2f3e:	4798      	blx	r3
}
    2f40:	46c0      	nop			; (mov r8, r8)
    2f42:	46bd      	mov	sp, r7
    2f44:	b002      	add	sp, #8
    2f46:	bd80      	pop	{r7, pc}
    2f48:	00002dd5 	.word	0x00002dd5

00002f4c <_usart_async_enable_byte_sent_irq>:

/**
 * \brief Enable data register empty interrupt
 */
void _usart_async_enable_byte_sent_irq(struct _usart_async_device *const device)
{
    2f4c:	b580      	push	{r7, lr}
    2f4e:	b082      	sub	sp, #8
    2f50:	af00      	add	r7, sp, #0
    2f52:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2f54:	687b      	ldr	r3, [r7, #4]
    2f56:	699b      	ldr	r3, [r3, #24]
    2f58:	0018      	movs	r0, r3
    2f5a:	4b03      	ldr	r3, [pc, #12]	; (2f68 <_usart_async_enable_byte_sent_irq+0x1c>)
    2f5c:	4798      	blx	r3
}
    2f5e:	46c0      	nop			; (mov r8, r8)
    2f60:	46bd      	mov	sp, r7
    2f62:	b002      	add	sp, #8
    2f64:	bd80      	pop	{r7, pc}
    2f66:	46c0      	nop			; (mov r8, r8)
    2f68:	00002b5d 	.word	0x00002b5d

00002f6c <_usart_async_enable_tx_done_irq>:

/**
 * \brief Enable transmission complete interrupt
 */
void _usart_async_enable_tx_done_irq(struct _usart_async_device *const device)
{
    2f6c:	b580      	push	{r7, lr}
    2f6e:	b082      	sub	sp, #8
    2f70:	af00      	add	r7, sp, #0
    2f72:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    2f74:	687b      	ldr	r3, [r7, #4]
    2f76:	699b      	ldr	r3, [r3, #24]
    2f78:	0018      	movs	r0, r3
    2f7a:	4b03      	ldr	r3, [pc, #12]	; (2f88 <_usart_async_enable_tx_done_irq+0x1c>)
    2f7c:	4798      	blx	r3
}
    2f7e:	46c0      	nop			; (mov r8, r8)
    2f80:	46bd      	mov	sp, r7
    2f82:	b002      	add	sp, #8
    2f84:	bd80      	pop	{r7, pc}
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	00002bdd 	.word	0x00002bdd

00002f8c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2f8c:	b580      	push	{r7, lr}
    2f8e:	b082      	sub	sp, #8
    2f90:	af00      	add	r7, sp, #0
    2f92:	6078      	str	r0, [r7, #4]
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2f94:	687b      	ldr	r3, [r7, #4]
    2f96:	4a04      	ldr	r2, [pc, #16]	; (2fa8 <_sercom_get_hardware_index+0x1c>)
    2f98:	4694      	mov	ip, r2
    2f9a:	4463      	add	r3, ip
    2f9c:	0a9b      	lsrs	r3, r3, #10
    2f9e:	b2db      	uxtb	r3, r3
}
    2fa0:	0018      	movs	r0, r3
    2fa2:	46bd      	mov	sp, r7
    2fa4:	b002      	add	sp, #8
    2fa6:	bd80      	pop	{r7, pc}
    2fa8:	bdfff800 	.word	0xbdfff800

00002fac <_usart_async_set_irq_state>:
/**
 * \brief Enable/disable USART interrupt
 */
void _usart_async_set_irq_state(struct _usart_async_device *const device, const enum _usart_async_callback_type type,
                                const bool state)
{
    2fac:	b580      	push	{r7, lr}
    2fae:	b082      	sub	sp, #8
    2fb0:	af00      	add	r7, sp, #0
    2fb2:	6078      	str	r0, [r7, #4]
    2fb4:	0008      	movs	r0, r1
    2fb6:	0011      	movs	r1, r2
    2fb8:	1cfb      	adds	r3, r7, #3
    2fba:	1c02      	adds	r2, r0, #0
    2fbc:	701a      	strb	r2, [r3, #0]
    2fbe:	1cbb      	adds	r3, r7, #2
    2fc0:	1c0a      	adds	r2, r1, #0
    2fc2:	701a      	strb	r2, [r3, #0]
	ASSERT(device);
    2fc4:	687b      	ldr	r3, [r7, #4]
    2fc6:	1e5a      	subs	r2, r3, #1
    2fc8:	4193      	sbcs	r3, r2
    2fca:	b2db      	uxtb	r3, r3
    2fcc:	4a1d      	ldr	r2, [pc, #116]	; (3044 <_usart_async_set_irq_state+0x98>)
    2fce:	491e      	ldr	r1, [pc, #120]	; (3048 <_usart_async_set_irq_state+0x9c>)
    2fd0:	0018      	movs	r0, r3
    2fd2:	4b1e      	ldr	r3, [pc, #120]	; (304c <_usart_async_set_irq_state+0xa0>)
    2fd4:	4798      	blx	r3

	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    2fd6:	1cfb      	adds	r3, r7, #3
    2fd8:	781b      	ldrb	r3, [r3, #0]
    2fda:	2b00      	cmp	r3, #0
    2fdc:	d003      	beq.n	2fe6 <_usart_async_set_irq_state+0x3a>
    2fde:	1cfb      	adds	r3, r7, #3
    2fe0:	781b      	ldrb	r3, [r3, #0]
    2fe2:	2b02      	cmp	r3, #2
    2fe4:	d110      	bne.n	3008 <_usart_async_set_irq_state+0x5c>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    2fe6:	687b      	ldr	r3, [r7, #4]
    2fe8:	699a      	ldr	r2, [r3, #24]
    2fea:	1cbb      	adds	r3, r7, #2
    2fec:	781b      	ldrb	r3, [r3, #0]
    2fee:	0019      	movs	r1, r3
    2ff0:	0010      	movs	r0, r2
    2ff2:	4b17      	ldr	r3, [pc, #92]	; (3050 <_usart_async_set_irq_state+0xa4>)
    2ff4:	4798      	blx	r3
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    2ff6:	687b      	ldr	r3, [r7, #4]
    2ff8:	699a      	ldr	r2, [r3, #24]
    2ffa:	1cbb      	adds	r3, r7, #2
    2ffc:	781b      	ldrb	r3, [r3, #0]
    2ffe:	0019      	movs	r1, r3
    3000:	0010      	movs	r0, r2
    3002:	4b14      	ldr	r3, [pc, #80]	; (3054 <_usart_async_set_irq_state+0xa8>)
    3004:	4798      	blx	r3
	} else if (USART_ASYNC_RX_DONE == type) {
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
	} else if (USART_ASYNC_ERROR == type) {
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    3006:	e018      	b.n	303a <_usart_async_set_irq_state+0x8e>
	} else if (USART_ASYNC_RX_DONE == type) {
    3008:	1cfb      	adds	r3, r7, #3
    300a:	781b      	ldrb	r3, [r3, #0]
    300c:	2b01      	cmp	r3, #1
    300e:	d108      	bne.n	3022 <_usart_async_set_irq_state+0x76>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    3010:	687b      	ldr	r3, [r7, #4]
    3012:	699a      	ldr	r2, [r3, #24]
    3014:	1cbb      	adds	r3, r7, #2
    3016:	781b      	ldrb	r3, [r3, #0]
    3018:	0019      	movs	r1, r3
    301a:	0010      	movs	r0, r2
    301c:	4b0e      	ldr	r3, [pc, #56]	; (3058 <_usart_async_set_irq_state+0xac>)
    301e:	4798      	blx	r3
}
    3020:	e00b      	b.n	303a <_usart_async_set_irq_state+0x8e>
	} else if (USART_ASYNC_ERROR == type) {
    3022:	1cfb      	adds	r3, r7, #3
    3024:	781b      	ldrb	r3, [r3, #0]
    3026:	2b03      	cmp	r3, #3
    3028:	d107      	bne.n	303a <_usart_async_set_irq_state+0x8e>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    302a:	687b      	ldr	r3, [r7, #4]
    302c:	699a      	ldr	r2, [r3, #24]
    302e:	1cbb      	adds	r3, r7, #2
    3030:	781b      	ldrb	r3, [r3, #0]
    3032:	0019      	movs	r1, r3
    3034:	0010      	movs	r0, r2
    3036:	4b09      	ldr	r3, [pc, #36]	; (305c <_usart_async_set_irq_state+0xb0>)
    3038:	4798      	blx	r3
}
    303a:	46c0      	nop			; (mov r8, r8)
    303c:	46bd      	mov	sp, r7
    303e:	b002      	add	sp, #8
    3040:	bd80      	pop	{r7, pc}
    3042:	46c0      	nop			; (mov r8, r8)
    3044:	0000021e 	.word	0x0000021e
    3048:	000052c0 	.word	0x000052c0
    304c:	00001a3f 	.word	0x00001a3f
    3050:	00002b95 	.word	0x00002b95
    3054:	00002c15 	.word	0x00002c15
    3058:	00002c5d 	.word	0x00002c5d
    305c:	00002c8f 	.word	0x00002c8f

00003060 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    3060:	b590      	push	{r4, r7, lr}
    3062:	b085      	sub	sp, #20
    3064:	af00      	add	r7, sp, #0
    3066:	6078      	str	r0, [r7, #4]
	void *hw = device->hw;
    3068:	687b      	ldr	r3, [r7, #4]
    306a:	699b      	ldr	r3, [r3, #24]
    306c:	60fb      	str	r3, [r7, #12]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    306e:	68fb      	ldr	r3, [r7, #12]
    3070:	0018      	movs	r0, r3
    3072:	4b35      	ldr	r3, [pc, #212]	; (3148 <_sercom_usart_interrupt_handler+0xe8>)
    3074:	4798      	blx	r3
    3076:	1e03      	subs	r3, r0, #0
    3078:	d00f      	beq.n	309a <_sercom_usart_interrupt_handler+0x3a>
    307a:	68fb      	ldr	r3, [r7, #12]
    307c:	0018      	movs	r0, r3
    307e:	4b33      	ldr	r3, [pc, #204]	; (314c <_sercom_usart_interrupt_handler+0xec>)
    3080:	4798      	blx	r3
    3082:	1e03      	subs	r3, r0, #0
    3084:	d009      	beq.n	309a <_sercom_usart_interrupt_handler+0x3a>
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
    3086:	68fb      	ldr	r3, [r7, #12]
    3088:	0018      	movs	r0, r3
    308a:	4b31      	ldr	r3, [pc, #196]	; (3150 <_sercom_usart_interrupt_handler+0xf0>)
    308c:	4798      	blx	r3
		device->usart_cb.tx_byte_sent(device);
    308e:	687b      	ldr	r3, [r7, #4]
    3090:	681b      	ldr	r3, [r3, #0]
    3092:	687a      	ldr	r2, [r7, #4]
    3094:	0010      	movs	r0, r2
    3096:	4798      	blx	r3
    3098:	e053      	b.n	3142 <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    309a:	68fb      	ldr	r3, [r7, #12]
    309c:	0018      	movs	r0, r3
    309e:	4b2d      	ldr	r3, [pc, #180]	; (3154 <_sercom_usart_interrupt_handler+0xf4>)
    30a0:	4798      	blx	r3
    30a2:	1e03      	subs	r3, r0, #0
    30a4:	d00f      	beq.n	30c6 <_sercom_usart_interrupt_handler+0x66>
    30a6:	68fb      	ldr	r3, [r7, #12]
    30a8:	0018      	movs	r0, r3
    30aa:	4b2b      	ldr	r3, [pc, #172]	; (3158 <_sercom_usart_interrupt_handler+0xf8>)
    30ac:	4798      	blx	r3
    30ae:	1e03      	subs	r3, r0, #0
    30b0:	d009      	beq.n	30c6 <_sercom_usart_interrupt_handler+0x66>
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
    30b2:	68fb      	ldr	r3, [r7, #12]
    30b4:	0018      	movs	r0, r3
    30b6:	4b29      	ldr	r3, [pc, #164]	; (315c <_sercom_usart_interrupt_handler+0xfc>)
    30b8:	4798      	blx	r3
		device->usart_cb.tx_done_cb(device);
    30ba:	687b      	ldr	r3, [r7, #4]
    30bc:	689b      	ldr	r3, [r3, #8]
    30be:	687a      	ldr	r2, [r7, #4]
    30c0:	0010      	movs	r0, r2
    30c2:	4798      	blx	r3
    30c4:	e03d      	b.n	3142 <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    30c6:	68fb      	ldr	r3, [r7, #12]
    30c8:	0018      	movs	r0, r3
    30ca:	4b25      	ldr	r3, [pc, #148]	; (3160 <_sercom_usart_interrupt_handler+0x100>)
    30cc:	4798      	blx	r3
    30ce:	1e03      	subs	r3, r0, #0
    30d0:	d01b      	beq.n	310a <_sercom_usart_interrupt_handler+0xaa>
		if (hri_sercomusart_read_STATUS_reg(hw)
    30d2:	68fb      	ldr	r3, [r7, #12]
    30d4:	0018      	movs	r0, r3
    30d6:	4b23      	ldr	r3, [pc, #140]	; (3164 <_sercom_usart_interrupt_handler+0x104>)
    30d8:	4798      	blx	r3
    30da:	0003      	movs	r3, r0
		    & (SERCOM_USART_STATUS_PERR | SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF
    30dc:	001a      	movs	r2, r3
    30de:	2337      	movs	r3, #55	; 0x37
    30e0:	4013      	ands	r3, r2
		if (hri_sercomusart_read_STATUS_reg(hw)
    30e2:	d005      	beq.n	30f0 <_sercom_usart_interrupt_handler+0x90>
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
    30e4:	68fb      	ldr	r3, [r7, #12]
    30e6:	213f      	movs	r1, #63	; 0x3f
    30e8:	0018      	movs	r0, r3
    30ea:	4b1f      	ldr	r3, [pc, #124]	; (3168 <_sercom_usart_interrupt_handler+0x108>)
    30ec:	4798      	blx	r3
			return;
    30ee:	e028      	b.n	3142 <_sercom_usart_interrupt_handler+0xe2>
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    30f0:	687b      	ldr	r3, [r7, #4]
    30f2:	685c      	ldr	r4, [r3, #4]
    30f4:	68fb      	ldr	r3, [r7, #12]
    30f6:	0018      	movs	r0, r3
    30f8:	4b1c      	ldr	r3, [pc, #112]	; (316c <_sercom_usart_interrupt_handler+0x10c>)
    30fa:	4798      	blx	r3
    30fc:	0003      	movs	r3, r0
    30fe:	b2da      	uxtb	r2, r3
    3100:	687b      	ldr	r3, [r7, #4]
    3102:	0011      	movs	r1, r2
    3104:	0018      	movs	r0, r3
    3106:	47a0      	blx	r4
    3108:	e01b      	b.n	3142 <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    310a:	68fb      	ldr	r3, [r7, #12]
    310c:	0018      	movs	r0, r3
    310e:	4b18      	ldr	r3, [pc, #96]	; (3170 <_sercom_usart_interrupt_handler+0x110>)
    3110:	4798      	blx	r3
    3112:	1e03      	subs	r3, r0, #0
    3114:	d015      	beq.n	3142 <_sercom_usart_interrupt_handler+0xe2>
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
    3116:	68fb      	ldr	r3, [r7, #12]
    3118:	0018      	movs	r0, r3
    311a:	4b16      	ldr	r3, [pc, #88]	; (3174 <_sercom_usart_interrupt_handler+0x114>)
    311c:	4798      	blx	r3
		device->usart_cb.error_cb(device);
    311e:	687b      	ldr	r3, [r7, #4]
    3120:	68db      	ldr	r3, [r3, #12]
    3122:	687a      	ldr	r2, [r7, #4]
    3124:	0010      	movs	r0, r2
    3126:	4798      	blx	r3
		status = hri_sercomusart_read_STATUS_reg(hw);
    3128:	68fb      	ldr	r3, [r7, #12]
    312a:	0018      	movs	r0, r3
    312c:	4b0d      	ldr	r3, [pc, #52]	; (3164 <_sercom_usart_interrupt_handler+0x104>)
    312e:	4798      	blx	r3
    3130:	0003      	movs	r3, r0
    3132:	60bb      	str	r3, [r7, #8]
		hri_sercomusart_clear_STATUS_reg(hw, status);
    3134:	68bb      	ldr	r3, [r7, #8]
    3136:	b29a      	uxth	r2, r3
    3138:	68fb      	ldr	r3, [r7, #12]
    313a:	0011      	movs	r1, r2
    313c:	0018      	movs	r0, r3
    313e:	4b0a      	ldr	r3, [pc, #40]	; (3168 <_sercom_usart_interrupt_handler+0x108>)
    3140:	4798      	blx	r3
	}
}
    3142:	46bd      	mov	sp, r7
    3144:	b005      	add	sp, #20
    3146:	bd90      	pop	{r4, r7, pc}
    3148:	00002abf 	.word	0x00002abf
    314c:	00002b73 	.word	0x00002b73
    3150:	00002bc7 	.word	0x00002bc7
    3154:	00002ae1 	.word	0x00002ae1
    3158:	00002bf3 	.word	0x00002bf3
    315c:	00002c47 	.word	0x00002c47
    3160:	00002b03 	.word	0x00002b03
    3164:	00002e47 	.word	0x00002e47
    3168:	00002e29 	.word	0x00002e29
    316c:	00002df3 	.word	0x00002df3
    3170:	00002b25 	.word	0x00002b25
    3174:	00002b47 	.word	0x00002b47

00003178 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    3178:	b590      	push	{r4, r7, lr}
    317a:	b085      	sub	sp, #20
    317c:	af00      	add	r7, sp, #0
    317e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3180:	230e      	movs	r3, #14
    3182:	18fc      	adds	r4, r7, r3
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	0018      	movs	r0, r3
    3188:	4b18      	ldr	r3, [pc, #96]	; (31ec <_get_sercom_index+0x74>)
    318a:	4798      	blx	r3
    318c:	0003      	movs	r3, r0
    318e:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3190:	230f      	movs	r3, #15
    3192:	18fb      	adds	r3, r7, r3
    3194:	2200      	movs	r2, #0
    3196:	701a      	strb	r2, [r3, #0]
    3198:	e018      	b.n	31cc <_get_sercom_index+0x54>
		if (_usarts[i].number == sercom_offset) {
    319a:	230f      	movs	r3, #15
    319c:	18fb      	adds	r3, r7, r3
    319e:	781a      	ldrb	r2, [r3, #0]
    31a0:	4913      	ldr	r1, [pc, #76]	; (31f0 <_get_sercom_index+0x78>)
    31a2:	0013      	movs	r3, r2
    31a4:	009b      	lsls	r3, r3, #2
    31a6:	189b      	adds	r3, r3, r2
    31a8:	009b      	lsls	r3, r3, #2
    31aa:	5c5b      	ldrb	r3, [r3, r1]
    31ac:	220e      	movs	r2, #14
    31ae:	18ba      	adds	r2, r7, r2
    31b0:	7812      	ldrb	r2, [r2, #0]
    31b2:	429a      	cmp	r2, r3
    31b4:	d103      	bne.n	31be <_get_sercom_index+0x46>
			return i;
    31b6:	230f      	movs	r3, #15
    31b8:	18fb      	adds	r3, r7, r3
    31ba:	781b      	ldrb	r3, [r3, #0]
    31bc:	e012      	b.n	31e4 <_get_sercom_index+0x6c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    31be:	230f      	movs	r3, #15
    31c0:	18fb      	adds	r3, r7, r3
    31c2:	781a      	ldrb	r2, [r3, #0]
    31c4:	230f      	movs	r3, #15
    31c6:	18fb      	adds	r3, r7, r3
    31c8:	3201      	adds	r2, #1
    31ca:	701a      	strb	r2, [r3, #0]
    31cc:	230f      	movs	r3, #15
    31ce:	18fb      	adds	r3, r7, r3
    31d0:	781b      	ldrb	r3, [r3, #0]
    31d2:	2b00      	cmp	r3, #0
    31d4:	d0e1      	beq.n	319a <_get_sercom_index+0x22>
		}
	}

	ASSERT(false);
    31d6:	4a07      	ldr	r2, [pc, #28]	; (31f4 <_get_sercom_index+0x7c>)
    31d8:	4b07      	ldr	r3, [pc, #28]	; (31f8 <_get_sercom_index+0x80>)
    31da:	0019      	movs	r1, r3
    31dc:	2000      	movs	r0, #0
    31de:	4b07      	ldr	r3, [pc, #28]	; (31fc <_get_sercom_index+0x84>)
    31e0:	4798      	blx	r3
	return 0;
    31e2:	2300      	movs	r3, #0
}
    31e4:	0018      	movs	r0, r3
    31e6:	46bd      	mov	sp, r7
    31e8:	b005      	add	sp, #20
    31ea:	bd90      	pop	{r4, r7, pc}
    31ec:	00002f8d 	.word	0x00002f8d
    31f0:	20000000 	.word	0x20000000
    31f4:	0000025e 	.word	0x0000025e
    31f8:	000052c0 	.word	0x000052c0
    31fc:	00001a3f 	.word	0x00001a3f

00003200 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    3200:	b580      	push	{r7, lr}
    3202:	b082      	sub	sp, #8
    3204:	af00      	add	r7, sp, #0
    3206:	6078      	str	r0, [r7, #4]
    3208:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM3) {
    320a:	687b      	ldr	r3, [r7, #4]
    320c:	4a04      	ldr	r2, [pc, #16]	; (3220 <_sercom_init_irq_param+0x20>)
    320e:	4293      	cmp	r3, r2
    3210:	d102      	bne.n	3218 <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _usart_async_device *)dev;
    3212:	4b04      	ldr	r3, [pc, #16]	; (3224 <_sercom_init_irq_param+0x24>)
    3214:	683a      	ldr	r2, [r7, #0]
    3216:	601a      	str	r2, [r3, #0]
	}
}
    3218:	46c0      	nop			; (mov r8, r8)
    321a:	46bd      	mov	sp, r7
    321c:	b002      	add	sp, #8
    321e:	bd80      	pop	{r7, pc}
    3220:	42001400 	.word	0x42001400
    3224:	200000b8 	.word	0x200000b8

00003228 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    3228:	b590      	push	{r4, r7, lr}
    322a:	b085      	sub	sp, #20
    322c:	af00      	add	r7, sp, #0
    322e:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    3230:	230f      	movs	r3, #15
    3232:	18fc      	adds	r4, r7, r3
    3234:	687b      	ldr	r3, [r7, #4]
    3236:	0018      	movs	r0, r3
    3238:	4b6f      	ldr	r3, [pc, #444]	; (33f8 <_usart_init+0x1d0>)
    323a:	4798      	blx	r3
    323c:	0003      	movs	r3, r0
    323e:	7023      	strb	r3, [r4, #0]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	2101      	movs	r1, #1
    3244:	0018      	movs	r0, r3
    3246:	4b6d      	ldr	r3, [pc, #436]	; (33fc <_usart_init+0x1d4>)
    3248:	4798      	blx	r3
    324a:	0003      	movs	r3, r0
    324c:	001a      	movs	r2, r3
    324e:	2301      	movs	r3, #1
    3250:	4053      	eors	r3, r2
    3252:	b2db      	uxtb	r3, r3
    3254:	2b00      	cmp	r3, #0
    3256:	d025      	beq.n	32a4 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    3258:	230f      	movs	r3, #15
    325a:	18fb      	adds	r3, r7, r3
    325c:	781a      	ldrb	r2, [r3, #0]
    325e:	4968      	ldr	r1, [pc, #416]	; (3400 <_usart_init+0x1d8>)
    3260:	0013      	movs	r3, r2
    3262:	009b      	lsls	r3, r3, #2
    3264:	189b      	adds	r3, r3, r2
    3266:	009b      	lsls	r3, r3, #2
    3268:	18cb      	adds	r3, r1, r3
    326a:	3304      	adds	r3, #4
    326c:	681b      	ldr	r3, [r3, #0]
    326e:	221c      	movs	r2, #28
    3270:	4013      	ands	r3, r2
    3272:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    3274:	687b      	ldr	r3, [r7, #4]
    3276:	2102      	movs	r1, #2
    3278:	0018      	movs	r0, r3
    327a:	4b62      	ldr	r3, [pc, #392]	; (3404 <_usart_init+0x1dc>)
    327c:	4798      	blx	r3
    327e:	1e03      	subs	r3, r0, #0
    3280:	d008      	beq.n	3294 <_usart_init+0x6c>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	0018      	movs	r0, r3
    3286:	4b60      	ldr	r3, [pc, #384]	; (3408 <_usart_init+0x1e0>)
    3288:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    328a:	687b      	ldr	r3, [r7, #4]
    328c:	2102      	movs	r1, #2
    328e:	0018      	movs	r0, r3
    3290:	4b5e      	ldr	r3, [pc, #376]	; (340c <_usart_init+0x1e4>)
    3292:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    3294:	68bb      	ldr	r3, [r7, #8]
    3296:	2201      	movs	r2, #1
    3298:	431a      	orrs	r2, r3
    329a:	687b      	ldr	r3, [r7, #4]
    329c:	0011      	movs	r1, r2
    329e:	0018      	movs	r0, r3
    32a0:	4b5b      	ldr	r3, [pc, #364]	; (3410 <_usart_init+0x1e8>)
    32a2:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    32a4:	687b      	ldr	r3, [r7, #4]
    32a6:	2101      	movs	r1, #1
    32a8:	0018      	movs	r0, r3
    32aa:	4b58      	ldr	r3, [pc, #352]	; (340c <_usart_init+0x1e4>)
    32ac:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    32ae:	230f      	movs	r3, #15
    32b0:	18fb      	adds	r3, r7, r3
    32b2:	781a      	ldrb	r2, [r3, #0]
    32b4:	4952      	ldr	r1, [pc, #328]	; (3400 <_usart_init+0x1d8>)
    32b6:	0013      	movs	r3, r2
    32b8:	009b      	lsls	r3, r3, #2
    32ba:	189b      	adds	r3, r3, r2
    32bc:	009b      	lsls	r3, r3, #2
    32be:	18cb      	adds	r3, r1, r3
    32c0:	3304      	adds	r3, #4
    32c2:	681a      	ldr	r2, [r3, #0]
    32c4:	687b      	ldr	r3, [r7, #4]
    32c6:	0011      	movs	r1, r2
    32c8:	0018      	movs	r0, r3
    32ca:	4b51      	ldr	r3, [pc, #324]	; (3410 <_usart_init+0x1e8>)
    32cc:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    32ce:	230f      	movs	r3, #15
    32d0:	18fb      	adds	r3, r7, r3
    32d2:	781a      	ldrb	r2, [r3, #0]
    32d4:	494a      	ldr	r1, [pc, #296]	; (3400 <_usart_init+0x1d8>)
    32d6:	0013      	movs	r3, r2
    32d8:	009b      	lsls	r3, r3, #2
    32da:	189b      	adds	r3, r3, r2
    32dc:	009b      	lsls	r3, r3, #2
    32de:	18cb      	adds	r3, r1, r3
    32e0:	3308      	adds	r3, #8
    32e2:	681a      	ldr	r2, [r3, #0]
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	0011      	movs	r1, r2
    32e8:	0018      	movs	r0, r3
    32ea:	4b4a      	ldr	r3, [pc, #296]	; (3414 <_usart_init+0x1ec>)
    32ec:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    32ee:	230f      	movs	r3, #15
    32f0:	18fb      	adds	r3, r7, r3
    32f2:	781a      	ldrb	r2, [r3, #0]
    32f4:	4942      	ldr	r1, [pc, #264]	; (3400 <_usart_init+0x1d8>)
    32f6:	0013      	movs	r3, r2
    32f8:	009b      	lsls	r3, r3, #2
    32fa:	189b      	adds	r3, r3, r2
    32fc:	009b      	lsls	r3, r3, #2
    32fe:	18cb      	adds	r3, r1, r3
    3300:	3304      	adds	r3, #4
    3302:	681a      	ldr	r2, [r3, #0]
    3304:	2380      	movs	r3, #128	; 0x80
    3306:	019b      	lsls	r3, r3, #6
    3308:	4013      	ands	r3, r2
    330a:	d10e      	bne.n	332a <_usart_init+0x102>
    330c:	230f      	movs	r3, #15
    330e:	18fb      	adds	r3, r7, r3
    3310:	781a      	ldrb	r2, [r3, #0]
    3312:	493b      	ldr	r1, [pc, #236]	; (3400 <_usart_init+0x1d8>)
    3314:	0013      	movs	r3, r2
    3316:	009b      	lsls	r3, r3, #2
    3318:	189b      	adds	r3, r3, r2
    331a:	009b      	lsls	r3, r3, #2
    331c:	18cb      	adds	r3, r1, r3
    331e:	3304      	adds	r3, #4
    3320:	681a      	ldr	r2, [r3, #0]
    3322:	23c0      	movs	r3, #192	; 0xc0
    3324:	01db      	lsls	r3, r3, #7
    3326:	4013      	ands	r3, r2
    3328:	d030      	beq.n	338c <_usart_init+0x164>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    332a:	230f      	movs	r3, #15
    332c:	18fb      	adds	r3, r7, r3
    332e:	781a      	ldrb	r2, [r3, #0]
    3330:	4933      	ldr	r1, [pc, #204]	; (3400 <_usart_init+0x1d8>)
    3332:	0013      	movs	r3, r2
    3334:	009b      	lsls	r3, r3, #2
    3336:	189b      	adds	r3, r3, r2
    3338:	009b      	lsls	r3, r3, #2
    333a:	18cb      	adds	r3, r1, r3
    333c:	330c      	adds	r3, #12
    333e:	881b      	ldrh	r3, [r3, #0]
    3340:	04db      	lsls	r3, r3, #19
    3342:	0cdb      	lsrs	r3, r3, #19
    3344:	b299      	uxth	r1, r3
    3346:	687a      	ldr	r2, [r7, #4]
    3348:	8993      	ldrh	r3, [r2, #12]
    334a:	04c9      	lsls	r1, r1, #19
    334c:	0cc8      	lsrs	r0, r1, #19
    334e:	0b5b      	lsrs	r3, r3, #13
    3350:	035b      	lsls	r3, r3, #13
    3352:	1c19      	adds	r1, r3, #0
    3354:	1c03      	adds	r3, r0, #0
    3356:	430b      	orrs	r3, r1
    3358:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    335a:	230f      	movs	r3, #15
    335c:	18fb      	adds	r3, r7, r3
    335e:	781a      	ldrb	r2, [r3, #0]
    3360:	4927      	ldr	r1, [pc, #156]	; (3400 <_usart_init+0x1d8>)
    3362:	0013      	movs	r3, r2
    3364:	009b      	lsls	r3, r3, #2
    3366:	189b      	adds	r3, r3, r2
    3368:	009b      	lsls	r3, r3, #2
    336a:	18cb      	adds	r3, r1, r3
    336c:	330e      	adds	r3, #14
    336e:	781b      	ldrb	r3, [r3, #0]
    3370:	1c1a      	adds	r2, r3, #0
    3372:	2307      	movs	r3, #7
    3374:	4013      	ands	r3, r2
    3376:	b2d9      	uxtb	r1, r3
    3378:	687a      	ldr	r2, [r7, #4]
    337a:	8993      	ldrh	r3, [r2, #12]
    337c:	0348      	lsls	r0, r1, #13
    337e:	04db      	lsls	r3, r3, #19
    3380:	0cdb      	lsrs	r3, r3, #19
    3382:	1c19      	adds	r1, r3, #0
    3384:	1c03      	adds	r3, r0, #0
    3386:	430b      	orrs	r3, r1
    3388:	8193      	strh	r3, [r2, #12]
    338a:	e00f      	b.n	33ac <_usart_init+0x184>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    338c:	230f      	movs	r3, #15
    338e:	18fb      	adds	r3, r7, r3
    3390:	781a      	ldrb	r2, [r3, #0]
    3392:	491b      	ldr	r1, [pc, #108]	; (3400 <_usart_init+0x1d8>)
    3394:	0013      	movs	r3, r2
    3396:	009b      	lsls	r3, r3, #2
    3398:	189b      	adds	r3, r3, r2
    339a:	009b      	lsls	r3, r3, #2
    339c:	18cb      	adds	r3, r1, r3
    339e:	330c      	adds	r3, #12
    33a0:	881a      	ldrh	r2, [r3, #0]
    33a2:	687b      	ldr	r3, [r7, #4]
    33a4:	0011      	movs	r1, r2
    33a6:	0018      	movs	r0, r3
    33a8:	4b1b      	ldr	r3, [pc, #108]	; (3418 <_usart_init+0x1f0>)
    33aa:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    33ac:	230f      	movs	r3, #15
    33ae:	18fb      	adds	r3, r7, r3
    33b0:	781a      	ldrb	r2, [r3, #0]
    33b2:	4913      	ldr	r1, [pc, #76]	; (3400 <_usart_init+0x1d8>)
    33b4:	0013      	movs	r3, r2
    33b6:	009b      	lsls	r3, r3, #2
    33b8:	189b      	adds	r3, r3, r2
    33ba:	009b      	lsls	r3, r3, #2
    33bc:	18cb      	adds	r3, r1, r3
    33be:	330f      	adds	r3, #15
    33c0:	781a      	ldrb	r2, [r3, #0]
    33c2:	687b      	ldr	r3, [r7, #4]
    33c4:	0011      	movs	r1, r2
    33c6:	0018      	movs	r0, r3
    33c8:	4b14      	ldr	r3, [pc, #80]	; (341c <_usart_init+0x1f4>)
    33ca:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    33cc:	230f      	movs	r3, #15
    33ce:	18fb      	adds	r3, r7, r3
    33d0:	781a      	ldrb	r2, [r3, #0]
    33d2:	490b      	ldr	r1, [pc, #44]	; (3400 <_usart_init+0x1d8>)
    33d4:	0013      	movs	r3, r2
    33d6:	009b      	lsls	r3, r3, #2
    33d8:	189b      	adds	r3, r3, r2
    33da:	009b      	lsls	r3, r3, #2
    33dc:	18cb      	adds	r3, r1, r3
    33de:	3310      	adds	r3, #16
    33e0:	781a      	ldrb	r2, [r3, #0]
    33e2:	687b      	ldr	r3, [r7, #4]
    33e4:	0011      	movs	r1, r2
    33e6:	0018      	movs	r0, r3
    33e8:	4b0d      	ldr	r3, [pc, #52]	; (3420 <_usart_init+0x1f8>)
    33ea:	4798      	blx	r3

	return ERR_NONE;
    33ec:	2300      	movs	r3, #0
}
    33ee:	0018      	movs	r0, r3
    33f0:	46bd      	mov	sp, r7
    33f2:	b005      	add	sp, #20
    33f4:	bd90      	pop	{r4, r7, pc}
    33f6:	46c0      	nop			; (mov r8, r8)
    33f8:	00003179 	.word	0x00003179
    33fc:	00002a9f 	.word	0x00002a9f
    3400:	20000000 	.word	0x20000000
    3404:	00002d19 	.word	0x00002d19
    3408:	00002ced 	.word	0x00002ced
    340c:	00002a81 	.word	0x00002a81
    3410:	00002d49 	.word	0x00002d49
    3414:	00002d71 	.word	0x00002d71
    3418:	00002d99 	.word	0x00002d99
    341c:	00002db7 	.word	0x00002db7
    3420:	00002e09 	.word	0x00002e09

00003424 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    3424:	b580      	push	{r7, lr}
    3426:	b082      	sub	sp, #8
    3428:	af00      	add	r7, sp, #0
    342a:	6078      	str	r0, [r7, #4]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    342c:	687b      	ldr	r3, [r7, #4]
    342e:	0018      	movs	r0, r3
    3430:	4b04      	ldr	r3, [pc, #16]	; (3444 <_sercom_get_irq_num+0x20>)
    3432:	4798      	blx	r3
    3434:	0003      	movs	r3, r0
    3436:	3309      	adds	r3, #9
    3438:	b2db      	uxtb	r3, r3
}
    343a:	0018      	movs	r0, r3
    343c:	46bd      	mov	sp, r7
    343e:	b002      	add	sp, #8
    3440:	bd80      	pop	{r7, pc}
    3442:	46c0      	nop			; (mov r8, r8)
    3444:	00002f8d 	.word	0x00002f8d

00003448 <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    3448:	b580      	push	{r7, lr}
    344a:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom3_dev);
    344c:	4b03      	ldr	r3, [pc, #12]	; (345c <SERCOM3_Handler+0x14>)
    344e:	681b      	ldr	r3, [r3, #0]
    3450:	0018      	movs	r0, r3
    3452:	4b03      	ldr	r3, [pc, #12]	; (3460 <SERCOM3_Handler+0x18>)
    3454:	4798      	blx	r3
}
    3456:	46c0      	nop			; (mov r8, r8)
    3458:	46bd      	mov	sp, r7
    345a:	bd80      	pop	{r7, pc}
    345c:	200000b8 	.word	0x200000b8
    3460:	00003061 	.word	0x00003061

00003464 <hri_sysctrl_get_PCLKSR_OSC8MRDY_bit>:
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
}

static inline bool hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(const void *const hw)
{
    3464:	b580      	push	{r7, lr}
    3466:	b082      	sub	sp, #8
    3468:	af00      	add	r7, sp, #0
    346a:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    346c:	687b      	ldr	r3, [r7, #4]
    346e:	68db      	ldr	r3, [r3, #12]
    3470:	08db      	lsrs	r3, r3, #3
    3472:	2201      	movs	r2, #1
    3474:	4013      	ands	r3, r2
    3476:	1e5a      	subs	r2, r3, #1
    3478:	4193      	sbcs	r3, r2
    347a:	b2db      	uxtb	r3, r3
}
    347c:	0018      	movs	r0, r3
    347e:	46bd      	mov	sp, r7
    3480:	b002      	add	sp, #8
    3482:	bd80      	pop	{r7, pc}

00003484 <hri_sysctrl_set_OSC32K_ENABLE_bit>:
{
	return ((Sysctrl *)hw)->XOSC32K.reg;
}

static inline void hri_sysctrl_set_OSC32K_ENABLE_bit(const void *const hw)
{
    3484:	b580      	push	{r7, lr}
    3486:	b082      	sub	sp, #8
    3488:	af00      	add	r7, sp, #0
    348a:	6078      	str	r0, [r7, #4]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    348c:	687b      	ldr	r3, [r7, #4]
    348e:	699b      	ldr	r3, [r3, #24]
    3490:	2202      	movs	r2, #2
    3492:	431a      	orrs	r2, r3
    3494:	687b      	ldr	r3, [r7, #4]
    3496:	619a      	str	r2, [r3, #24]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    3498:	46c0      	nop			; (mov r8, r8)
    349a:	46bd      	mov	sp, r7
    349c:	b002      	add	sp, #8
    349e:	bd80      	pop	{r7, pc}

000034a0 <hri_sysctrl_clear_OSC32K_ENABLE_bit>:
	((Sysctrl *)hw)->OSC32K.reg = tmp;
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sysctrl_clear_OSC32K_ENABLE_bit(const void *const hw)
{
    34a0:	b580      	push	{r7, lr}
    34a2:	b082      	sub	sp, #8
    34a4:	af00      	add	r7, sp, #0
    34a6:	6078      	str	r0, [r7, #4]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    34a8:	687b      	ldr	r3, [r7, #4]
    34aa:	699b      	ldr	r3, [r3, #24]
    34ac:	2202      	movs	r2, #2
    34ae:	4393      	bics	r3, r2
    34b0:	001a      	movs	r2, r3
    34b2:	687b      	ldr	r3, [r7, #4]
    34b4:	619a      	str	r2, [r3, #24]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    34b6:	46c0      	nop			; (mov r8, r8)
    34b8:	46bd      	mov	sp, r7
    34ba:	b002      	add	sp, #8
    34bc:	bd80      	pop	{r7, pc}

000034be <hri_sysctrl_read_OSCULP32K_CALIB_bf>:
	((Sysctrl *)hw)->OSCULP32K.reg ^= SYSCTRL_OSCULP32K_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    34be:	b580      	push	{r7, lr}
    34c0:	b084      	sub	sp, #16
    34c2:	af00      	add	r7, sp, #0
    34c4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    34c6:	230f      	movs	r3, #15
    34c8:	18fb      	adds	r3, r7, r3
    34ca:	687a      	ldr	r2, [r7, #4]
    34cc:	7f12      	ldrb	r2, [r2, #28]
    34ce:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    34d0:	230f      	movs	r3, #15
    34d2:	18fb      	adds	r3, r7, r3
    34d4:	220f      	movs	r2, #15
    34d6:	18ba      	adds	r2, r7, r2
    34d8:	7812      	ldrb	r2, [r2, #0]
    34da:	211f      	movs	r1, #31
    34dc:	400a      	ands	r2, r1
    34de:	701a      	strb	r2, [r3, #0]
	return tmp;
    34e0:	230f      	movs	r3, #15
    34e2:	18fb      	adds	r3, r7, r3
    34e4:	781b      	ldrb	r3, [r3, #0]
}
    34e6:	0018      	movs	r0, r3
    34e8:	46bd      	mov	sp, r7
    34ea:	b004      	add	sp, #16
    34ec:	bd80      	pop	{r7, pc}

000034ee <hri_sysctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
    34ee:	b580      	push	{r7, lr}
    34f0:	b082      	sub	sp, #8
    34f2:	af00      	add	r7, sp, #0
    34f4:	6078      	str	r0, [r7, #4]
    34f6:	000a      	movs	r2, r1
    34f8:	1cfb      	adds	r3, r7, #3
    34fa:	701a      	strb	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    34fc:	687b      	ldr	r3, [r7, #4]
    34fe:	1cfa      	adds	r2, r7, #3
    3500:	7812      	ldrb	r2, [r2, #0]
    3502:	771a      	strb	r2, [r3, #28]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    3504:	46c0      	nop			; (mov r8, r8)
    3506:	46bd      	mov	sp, r7
    3508:	b002      	add	sp, #8
    350a:	bd80      	pop	{r7, pc}

0000350c <hri_sysctrl_set_OSC8M_ONDEMAND_bit>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_RUNSTDBY;
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sysctrl_set_OSC8M_ONDEMAND_bit(const void *const hw)
{
    350c:	b580      	push	{r7, lr}
    350e:	b082      	sub	sp, #8
    3510:	af00      	add	r7, sp, #0
    3512:	6078      	str	r0, [r7, #4]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    3514:	687b      	ldr	r3, [r7, #4]
    3516:	6a1b      	ldr	r3, [r3, #32]
    3518:	2280      	movs	r2, #128	; 0x80
    351a:	431a      	orrs	r2, r3
    351c:	687b      	ldr	r3, [r7, #4]
    351e:	621a      	str	r2, [r3, #32]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    3520:	46c0      	nop			; (mov r8, r8)
    3522:	46bd      	mov	sp, r7
    3524:	b002      	add	sp, #8
    3526:	bd80      	pop	{r7, pc}

00003528 <hri_sysctrl_read_OSC8M_CALIB_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
    3528:	b580      	push	{r7, lr}
    352a:	b084      	sub	sp, #16
    352c:	af00      	add	r7, sp, #0
    352e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    3530:	687b      	ldr	r3, [r7, #4]
    3532:	6a1b      	ldr	r3, [r3, #32]
    3534:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    3536:	68fb      	ldr	r3, [r7, #12]
    3538:	0c1b      	lsrs	r3, r3, #16
    353a:	051b      	lsls	r3, r3, #20
    353c:	0d1b      	lsrs	r3, r3, #20
    353e:	60fb      	str	r3, [r7, #12]
	return tmp;
    3540:	68fb      	ldr	r3, [r7, #12]
}
    3542:	0018      	movs	r0, r3
    3544:	46bd      	mov	sp, r7
    3546:	b004      	add	sp, #16
    3548:	bd80      	pop	{r7, pc}

0000354a <hri_sysctrl_read_OSC8M_FRANGE_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_FRANGE(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
    354a:	b580      	push	{r7, lr}
    354c:	b084      	sub	sp, #16
    354e:	af00      	add	r7, sp, #0
    3550:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    3552:	687b      	ldr	r3, [r7, #4]
    3554:	6a1b      	ldr	r3, [r3, #32]
    3556:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_FRANGE_Msk) >> SYSCTRL_OSC8M_FRANGE_Pos;
    3558:	68fb      	ldr	r3, [r7, #12]
    355a:	0f9b      	lsrs	r3, r3, #30
    355c:	60fb      	str	r3, [r7, #12]
	return tmp;
    355e:	68fb      	ldr	r3, [r7, #12]
}
    3560:	0018      	movs	r0, r3
    3562:	46bd      	mov	sp, r7
    3564:	b004      	add	sp, #16
    3566:	bd80      	pop	{r7, pc}

00003568 <hri_sysctrl_write_OSC8M_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
    3568:	b580      	push	{r7, lr}
    356a:	b082      	sub	sp, #8
    356c:	af00      	add	r7, sp, #0
    356e:	6078      	str	r0, [r7, #4]
    3570:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    3572:	687b      	ldr	r3, [r7, #4]
    3574:	683a      	ldr	r2, [r7, #0]
    3576:	621a      	str	r2, [r3, #32]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    3578:	46c0      	nop			; (mov r8, r8)
    357a:	46bd      	mov	sp, r7
    357c:	b002      	add	sp, #8
    357e:	bd80      	pop	{r7, pc}

00003580 <_sysctrl_init_sources>:
 * \brief Initializes clock generators
 *
 * All GCLK generators are running when this function returns.
 */
void _sysctrl_init_sources(void)
{
    3580:	b580      	push	{r7, lr}
    3582:	b082      	sub	sp, #8
    3584:	af00      	add	r7, sp, #0
	void *   hw = (void *)SYSCTRL;
    3586:	4b24      	ldr	r3, [pc, #144]	; (3618 <_sysctrl_init_sources+0x98>)
    3588:	607b      	str	r3, [r7, #4]
	        | (CONF_XOSC_RUNSTDBY << SYSCTRL_XOSC_RUNSTDBY_Pos) | (CONF_XOSC_XTALEN << SYSCTRL_XOSC_XTALEN_Pos)
	        | (CONF_XOSC_ENABLE << SYSCTRL_XOSC_ENABLE_Pos));
#endif

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);
    358a:	687b      	ldr	r3, [r7, #4]
    358c:	0018      	movs	r0, r3
    358e:	4b23      	ldr	r3, [pc, #140]	; (361c <_sysctrl_init_sources+0x9c>)
    3590:	4798      	blx	r3
    3592:	0002      	movs	r2, r0
    3594:	1cbb      	adds	r3, r7, #2
    3596:	801a      	strh	r2, [r3, #0]

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    3598:	687b      	ldr	r3, [r7, #4]
    359a:	0018      	movs	r0, r3
    359c:	4b20      	ldr	r3, [pc, #128]	; (3620 <_sysctrl_init_sources+0xa0>)
    359e:	4798      	blx	r3
    35a0:	0003      	movs	r3, r0
    35a2:	079a      	lsls	r2, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    35a4:	1cbb      	adds	r3, r7, #2
    35a6:	881b      	ldrh	r3, [r3, #0]
    35a8:	041b      	lsls	r3, r3, #16
    35aa:	0019      	movs	r1, r3
    35ac:	4b1d      	ldr	r3, [pc, #116]	; (3624 <_sysctrl_init_sources+0xa4>)
    35ae:	400b      	ands	r3, r1
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    35b0:	4313      	orrs	r3, r2
	hri_sysctrl_write_OSC8M_reg(hw,
    35b2:	2202      	movs	r2, #2
    35b4:	431a      	orrs	r2, r3
    35b6:	687b      	ldr	r3, [r7, #4]
    35b8:	0011      	movs	r1, r2
    35ba:	0018      	movs	r0, r3
    35bc:	4b1a      	ldr	r3, [pc, #104]	; (3628 <_sysctrl_init_sources+0xa8>)
    35be:	4798      	blx	r3
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
#else
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
    35c0:	687b      	ldr	r3, [r7, #4]
    35c2:	0018      	movs	r0, r3
    35c4:	4b19      	ldr	r3, [pc, #100]	; (362c <_sysctrl_init_sources+0xac>)
    35c6:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_sysctrl_read_OSCULP32K_CALIB_bf(hw);
    35c8:	687b      	ldr	r3, [r7, #4]
    35ca:	0018      	movs	r0, r3
    35cc:	4b18      	ldr	r3, [pc, #96]	; (3630 <_sysctrl_init_sources+0xb0>)
    35ce:	4798      	blx	r3
    35d0:	0003      	movs	r3, r0
    35d2:	001a      	movs	r2, r3
    35d4:	1cbb      	adds	r3, r7, #2
    35d6:	801a      	strh	r2, [r3, #0]

	hri_sysctrl_write_OSCULP32K_reg(hw,
    35d8:	1cbb      	adds	r3, r7, #2
    35da:	881b      	ldrh	r3, [r3, #0]
    35dc:	b2db      	uxtb	r3, r3
    35de:	221f      	movs	r2, #31
    35e0:	4013      	ands	r3, r2
    35e2:	b2da      	uxtb	r2, r3
    35e4:	687b      	ldr	r3, [r7, #4]
    35e6:	0011      	movs	r1, r2
    35e8:	0018      	movs	r0, r3
    35ea:	4b12      	ldr	r3, [pc, #72]	; (3634 <_sysctrl_init_sources+0xb4>)
    35ec:	4798      	blx	r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    35ee:	46c0      	nop			; (mov r8, r8)
    35f0:	687b      	ldr	r3, [r7, #4]
    35f2:	0018      	movs	r0, r3
    35f4:	4b10      	ldr	r3, [pc, #64]	; (3638 <_sysctrl_init_sources+0xb8>)
    35f6:	4798      	blx	r3
    35f8:	0003      	movs	r3, r0
    35fa:	001a      	movs	r2, r3
    35fc:	2301      	movs	r3, #1
    35fe:	4053      	eors	r3, r2
    3600:	b2db      	uxtb	r3, r3
    3602:	2b00      	cmp	r3, #0
    3604:	d1f4      	bne.n	35f0 <_sysctrl_init_sources+0x70>
		;
#endif
#if CONF_OSC8M_ONDEMAND == 1
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
    3606:	687b      	ldr	r3, [r7, #4]
    3608:	0018      	movs	r0, r3
    360a:	4b0c      	ldr	r3, [pc, #48]	; (363c <_sysctrl_init_sources+0xbc>)
    360c:	4798      	blx	r3
#endif
#endif

	(void)calib, (void)hw;
}
    360e:	46c0      	nop			; (mov r8, r8)
    3610:	46bd      	mov	sp, r7
    3612:	b002      	add	sp, #8
    3614:	bd80      	pop	{r7, pc}
    3616:	46c0      	nop			; (mov r8, r8)
    3618:	40000800 	.word	0x40000800
    361c:	00003529 	.word	0x00003529
    3620:	0000354b 	.word	0x0000354b
    3624:	0fff0000 	.word	0x0fff0000
    3628:	00003569 	.word	0x00003569
    362c:	00003485 	.word	0x00003485
    3630:	000034bf 	.word	0x000034bf
    3634:	000034ef 	.word	0x000034ef
    3638:	00003465 	.word	0x00003465
    363c:	0000350d 	.word	0x0000350d

00003640 <_sysctrl_init_referenced_generators>:

void _sysctrl_init_referenced_generators(void)
{
    3640:	b580      	push	{r7, lr}
    3642:	b082      	sub	sp, #8
    3644:	af00      	add	r7, sp, #0
	void *hw = (void *)SYSCTRL;
    3646:	4b05      	ldr	r3, [pc, #20]	; (365c <_sysctrl_init_referenced_generators+0x1c>)
    3648:	607b      	str	r3, [r7, #4]
		;
#endif

#if CONF_OSC32K_CONFIG == 0 || CONF_OSC32K_ENABLE == 0
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
    364a:	687b      	ldr	r3, [r7, #4]
    364c:	0018      	movs	r0, r3
    364e:	4b04      	ldr	r3, [pc, #16]	; (3660 <_sysctrl_init_referenced_generators+0x20>)
    3650:	4798      	blx	r3
#endif

	(void)hw;
}
    3652:	46c0      	nop			; (mov r8, r8)
    3654:	46bd      	mov	sp, r7
    3656:	b002      	add	sp, #8
    3658:	bd80      	pop	{r7, pc}
    365a:	46c0      	nop			; (mov r8, r8)
    365c:	40000800 	.word	0x40000800
    3660:	000034a1 	.word	0x000034a1

00003664 <main>:
#include <atmel_start.h>
#include "mulib_port_test.h"

int main(void)
{
    3664:	b580      	push	{r7, lr}
    3666:	af00      	add	r7, sp, #0
    /* Initializes MCU, drivers and middleware */
    atmel_start_init();
    3668:	4b03      	ldr	r3, [pc, #12]	; (3678 <main+0x14>)
    366a:	4798      	blx	r3
    mulib_port_test_init();
    366c:	4b03      	ldr	r3, [pc, #12]	; (367c <main+0x18>)
    366e:	4798      	blx	r3

    /* Replace with your application code */
    while (1) {
        mulib_port_test_step();
    3670:	4b03      	ldr	r3, [pc, #12]	; (3680 <main+0x1c>)
    3672:	4798      	blx	r3
    3674:	e7fc      	b.n	3670 <main+0xc>
    3676:	46c0      	nop			; (mov r8, r8)
    3678:	00000115 	.word	0x00000115
    367c:	00003685 	.word	0x00003685
    3680:	00003699 	.word	0x00003699

00003684 <mulib_port_test_init>:
static volatile int s_tx_index = 0;

// =============================================================================
// public code

void mulib_port_test_init(void) {
    3684:	b580      	push	{r7, lr}
    3686:	af00      	add	r7, sp, #0
	mu_port_init();
    3688:	4b02      	ldr	r3, [pc, #8]	; (3694 <mulib_port_test_init+0x10>)
    368a:	4798      	blx	r3
}
    368c:	46c0      	nop			; (mov r8, r8)
    368e:	46bd      	mov	sp, r7
    3690:	bd80      	pop	{r7, pc}
    3692:	46c0      	nop			; (mov r8, r8)
    3694:	00003f69 	.word	0x00003f69

00003698 <mulib_port_test_step>:

void mulib_port_test_step(void) {
    3698:	b590      	push	{r4, r7, lr}
    369a:	b083      	sub	sp, #12
    369c:	af00      	add	r7, sp, #0
  uint8_t c;

  // capture start up time...
  s_epoch = mu_port_rtc_now();
    369e:	4ba9      	ldr	r3, [pc, #676]	; (3944 <mulib_port_test_step+0x2ac>)
    36a0:	4798      	blx	r3
    36a2:	0002      	movs	r2, r0
    36a4:	4ba8      	ldr	r3, [pc, #672]	; (3948 <mulib_port_test_step+0x2b0>)
    36a6:	601a      	str	r2, [r3, #0]

  test_sync_printf("\r\n================\r\nstarting mu_port_test\r\n");
    36a8:	4ba8      	ldr	r3, [pc, #672]	; (394c <mulib_port_test_step+0x2b4>)
    36aa:	0018      	movs	r0, r3
    36ac:	4ba8      	ldr	r3, [pc, #672]	; (3950 <mulib_port_test_step+0x2b8>)
    36ae:	4798      	blx	r3
  test_sync_printf("sync serial write\r\n");
    36b0:	4ba8      	ldr	r3, [pc, #672]	; (3954 <mulib_port_test_step+0x2bc>)
    36b2:	0018      	movs	r0, r3
    36b4:	4ba6      	ldr	r3, [pc, #664]	; (3950 <mulib_port_test_step+0x2b8>)
    36b6:	4798      	blx	r3
  test_async_printf("async serial write\r\n");
    36b8:	4ba7      	ldr	r3, [pc, #668]	; (3958 <mulib_port_test_step+0x2c0>)
    36ba:	0018      	movs	r0, r3
    36bc:	4ba7      	ldr	r3, [pc, #668]	; (395c <mulib_port_test_step+0x2c4>)
    36be:	4798      	blx	r3

  test_sync_printf("time before is ");
    36c0:	4ba7      	ldr	r3, [pc, #668]	; (3960 <mulib_port_test_step+0x2c8>)
    36c2:	0018      	movs	r0, r3
    36c4:	4ba2      	ldr	r3, [pc, #648]	; (3950 <mulib_port_test_step+0x2b8>)
    36c6:	4798      	blx	r3
  test_print_time(mu_port_rtc_now());
    36c8:	4b9e      	ldr	r3, [pc, #632]	; (3944 <mulib_port_test_step+0x2ac>)
    36ca:	4798      	blx	r3
    36cc:	0003      	movs	r3, r0
    36ce:	0018      	movs	r0, r3
    36d0:	4ba4      	ldr	r3, [pc, #656]	; (3964 <mulib_port_test_step+0x2cc>)
    36d2:	4798      	blx	r3
  test_sync_printf("\r\n");
    36d4:	4ba4      	ldr	r3, [pc, #656]	; (3968 <mulib_port_test_step+0x2d0>)
    36d6:	0018      	movs	r0, r3
    36d8:	4b9d      	ldr	r3, [pc, #628]	; (3950 <mulib_port_test_step+0x2b8>)
    36da:	4798      	blx	r3
  test_sync_printf("looping for 2.5 seconds...");
    36dc:	4ba3      	ldr	r3, [pc, #652]	; (396c <mulib_port_test_step+0x2d4>)
    36de:	0018      	movs	r0, r3
    36e0:	4b9b      	ldr	r3, [pc, #620]	; (3950 <mulib_port_test_step+0x2b8>)
    36e2:	4798      	blx	r3
  test_wait_ms(2500);
    36e4:	4ba2      	ldr	r3, [pc, #648]	; (3970 <mulib_port_test_step+0x2d8>)
    36e6:	0018      	movs	r0, r3
    36e8:	4ba2      	ldr	r3, [pc, #648]	; (3974 <mulib_port_test_step+0x2dc>)
    36ea:	4798      	blx	r3
  test_sync_printf("done.  time after is ");
    36ec:	4ba2      	ldr	r3, [pc, #648]	; (3978 <mulib_port_test_step+0x2e0>)
    36ee:	0018      	movs	r0, r3
    36f0:	4b97      	ldr	r3, [pc, #604]	; (3950 <mulib_port_test_step+0x2b8>)
    36f2:	4798      	blx	r3
  test_print_time(mu_port_rtc_now());
    36f4:	4b93      	ldr	r3, [pc, #588]	; (3944 <mulib_port_test_step+0x2ac>)
    36f6:	4798      	blx	r3
    36f8:	0003      	movs	r3, r0
    36fa:	0018      	movs	r0, r3
    36fc:	4b99      	ldr	r3, [pc, #612]	; (3964 <mulib_port_test_step+0x2cc>)
    36fe:	4798      	blx	r3
  test_sync_printf("\r\n");
    3700:	4b99      	ldr	r3, [pc, #612]	; (3968 <mulib_port_test_step+0x2d0>)
    3702:	0018      	movs	r0, r3
    3704:	4b92      	ldr	r3, [pc, #584]	; (3950 <mulib_port_test_step+0x2b8>)
    3706:	4798      	blx	r3

  s_rtc_matched = false;
    3708:	4b9c      	ldr	r3, [pc, #624]	; (397c <mulib_port_test_step+0x2e4>)
    370a:	2200      	movs	r2, #0
    370c:	701a      	strb	r2, [r3, #0]
  mu_port_rtc_set_cb(rtc_cb, NULL);
    370e:	4b9c      	ldr	r3, [pc, #624]	; (3980 <mulib_port_test_step+0x2e8>)
    3710:	2100      	movs	r1, #0
    3712:	0018      	movs	r0, r3
    3714:	4b9b      	ldr	r3, [pc, #620]	; (3984 <mulib_port_test_step+0x2ec>)
    3716:	4798      	blx	r3
  mu_port_rtc_alarm_at(mu_port_time_offset(mu_port_rtc_now(),
    3718:	4b8a      	ldr	r3, [pc, #552]	; (3944 <mulib_port_test_step+0x2ac>)
    371a:	4798      	blx	r3
    371c:	0004      	movs	r4, r0
    371e:	4b94      	ldr	r3, [pc, #592]	; (3970 <mulib_port_test_step+0x2d8>)
    3720:	0018      	movs	r0, r3
    3722:	4b99      	ldr	r3, [pc, #612]	; (3988 <mulib_port_test_step+0x2f0>)
    3724:	4798      	blx	r3
    3726:	0003      	movs	r3, r0
    3728:	0019      	movs	r1, r3
    372a:	0020      	movs	r0, r4
    372c:	4b97      	ldr	r3, [pc, #604]	; (398c <mulib_port_test_step+0x2f4>)
    372e:	4798      	blx	r3
    3730:	0003      	movs	r3, r0
    3732:	0018      	movs	r0, r3
    3734:	4b96      	ldr	r3, [pc, #600]	; (3990 <mulib_port_test_step+0x2f8>)
    3736:	4798      	blx	r3
                                           mu_port_time_ms_to_duration(2500)));
  test_sync_printf("waiting 2.5 seconds for RTC match...");
    3738:	4b96      	ldr	r3, [pc, #600]	; (3994 <mulib_port_test_step+0x2fc>)
    373a:	0018      	movs	r0, r3
    373c:	4b84      	ldr	r3, [pc, #528]	; (3950 <mulib_port_test_step+0x2b8>)
    373e:	4798      	blx	r3
  while (!s_rtc_matched) {
    3740:	e000      	b.n	3744 <mulib_port_test_step+0xac>
	  asm("nop");
    3742:	46c0      	nop			; (mov r8, r8)
  while (!s_rtc_matched) {
    3744:	4b8d      	ldr	r3, [pc, #564]	; (397c <mulib_port_test_step+0x2e4>)
    3746:	781b      	ldrb	r3, [r3, #0]
    3748:	b2db      	uxtb	r3, r3
    374a:	2201      	movs	r2, #1
    374c:	4053      	eors	r3, r2
    374e:	b2db      	uxtb	r3, r3
    3750:	2b00      	cmp	r3, #0
    3752:	d1f6      	bne.n	3742 <mulib_port_test_step+0xaa>
    // buzz...
  }
  test_sync_printf("done.  time is now ");
    3754:	4b90      	ldr	r3, [pc, #576]	; (3998 <mulib_port_test_step+0x300>)
    3756:	0018      	movs	r0, r3
    3758:	4b7d      	ldr	r3, [pc, #500]	; (3950 <mulib_port_test_step+0x2b8>)
    375a:	4798      	blx	r3
  test_print_time(mu_port_rtc_now());
    375c:	4b79      	ldr	r3, [pc, #484]	; (3944 <mulib_port_test_step+0x2ac>)
    375e:	4798      	blx	r3
    3760:	0003      	movs	r3, r0
    3762:	0018      	movs	r0, r3
    3764:	4b7f      	ldr	r3, [pc, #508]	; (3964 <mulib_port_test_step+0x2cc>)
    3766:	4798      	blx	r3
  test_sync_printf("\r\n");
    3768:	4b7f      	ldr	r3, [pc, #508]	; (3968 <mulib_port_test_step+0x2d0>)
    376a:	0018      	movs	r0, r3
    376c:	4b78      	ldr	r3, [pc, #480]	; (3950 <mulib_port_test_step+0x2b8>)
    376e:	4798      	blx	r3

  test_sync_printf("flashing LED for 2.5 seconds...");
    3770:	4b8a      	ldr	r3, [pc, #552]	; (399c <mulib_port_test_step+0x304>)
    3772:	0018      	movs	r0, r3
    3774:	4b76      	ldr	r3, [pc, #472]	; (3950 <mulib_port_test_step+0x2b8>)
    3776:	4798      	blx	r3
  for (int i = 0; i < 10; i++) {
    3778:	2300      	movs	r3, #0
    377a:	607b      	str	r3, [r7, #4]
    377c:	e015      	b.n	37aa <mulib_port_test_step+0x112>
    mu_port_led_set(!mu_port_led_get());
    377e:	4b88      	ldr	r3, [pc, #544]	; (39a0 <mulib_port_test_step+0x308>)
    3780:	4798      	blx	r3
    3782:	0003      	movs	r3, r0
    3784:	1e5a      	subs	r2, r3, #1
    3786:	4193      	sbcs	r3, r2
    3788:	b2db      	uxtb	r3, r3
    378a:	2201      	movs	r2, #1
    378c:	4053      	eors	r3, r2
    378e:	b2db      	uxtb	r3, r3
    3790:	1c1a      	adds	r2, r3, #0
    3792:	2301      	movs	r3, #1
    3794:	4013      	ands	r3, r2
    3796:	b2db      	uxtb	r3, r3
    3798:	0018      	movs	r0, r3
    379a:	4b82      	ldr	r3, [pc, #520]	; (39a4 <mulib_port_test_step+0x30c>)
    379c:	4798      	blx	r3
    test_wait_ms(250);
    379e:	20fa      	movs	r0, #250	; 0xfa
    37a0:	4b74      	ldr	r3, [pc, #464]	; (3974 <mulib_port_test_step+0x2dc>)
    37a2:	4798      	blx	r3
  for (int i = 0; i < 10; i++) {
    37a4:	687b      	ldr	r3, [r7, #4]
    37a6:	3301      	adds	r3, #1
    37a8:	607b      	str	r3, [r7, #4]
    37aa:	687b      	ldr	r3, [r7, #4]
    37ac:	2b09      	cmp	r3, #9
    37ae:	dde6      	ble.n	377e <mulib_port_test_step+0xe6>
  }
  mu_port_led_set(false);
    37b0:	2000      	movs	r0, #0
    37b2:	4b7c      	ldr	r3, [pc, #496]	; (39a4 <mulib_port_test_step+0x30c>)
    37b4:	4798      	blx	r3
  test_sync_printf("done.  time is now ");
    37b6:	4b78      	ldr	r3, [pc, #480]	; (3998 <mulib_port_test_step+0x300>)
    37b8:	0018      	movs	r0, r3
    37ba:	4b65      	ldr	r3, [pc, #404]	; (3950 <mulib_port_test_step+0x2b8>)
    37bc:	4798      	blx	r3
  test_print_time(mu_port_rtc_now());
    37be:	4b61      	ldr	r3, [pc, #388]	; (3944 <mulib_port_test_step+0x2ac>)
    37c0:	4798      	blx	r3
    37c2:	0003      	movs	r3, r0
    37c4:	0018      	movs	r0, r3
    37c6:	4b67      	ldr	r3, [pc, #412]	; (3964 <mulib_port_test_step+0x2cc>)
    37c8:	4798      	blx	r3
  test_sync_printf("\r\n");
    37ca:	4b67      	ldr	r3, [pc, #412]	; (3968 <mulib_port_test_step+0x2d0>)
    37cc:	0018      	movs	r0, r3
    37ce:	4b60      	ldr	r3, [pc, #384]	; (3950 <mulib_port_test_step+0x2b8>)
    37d0:	4798      	blx	r3

  test_sync_printf("waiting for button press (synchronous)...");
    37d2:	4b75      	ldr	r3, [pc, #468]	; (39a8 <mulib_port_test_step+0x310>)
    37d4:	0018      	movs	r0, r3
    37d6:	4b5e      	ldr	r3, [pc, #376]	; (3950 <mulib_port_test_step+0x2b8>)
    37d8:	4798      	blx	r3
  while (!mu_port_button_is_pressed()) {
    37da:	46c0      	nop			; (mov r8, r8)
    37dc:	4b73      	ldr	r3, [pc, #460]	; (39ac <mulib_port_test_step+0x314>)
    37de:	4798      	blx	r3
    37e0:	0003      	movs	r3, r0
    37e2:	001a      	movs	r2, r3
    37e4:	2301      	movs	r3, #1
    37e6:	4053      	eors	r3, r2
    37e8:	b2db      	uxtb	r3, r3
    37ea:	2b00      	cmp	r3, #0
    37ec:	d1f6      	bne.n	37dc <mulib_port_test_step+0x144>
    // buzz...
  }
  test_sync_printf("received button press.\r\n");
    37ee:	4b70      	ldr	r3, [pc, #448]	; (39b0 <mulib_port_test_step+0x318>)
    37f0:	0018      	movs	r0, r3
    37f2:	4b57      	ldr	r3, [pc, #348]	; (3950 <mulib_port_test_step+0x2b8>)
    37f4:	4798      	blx	r3

  // make sure button has stopped bouncing before moving to next test.
  do {
    test_wait_ms(10);
    37f6:	200a      	movs	r0, #10
    37f8:	4b5e      	ldr	r3, [pc, #376]	; (3974 <mulib_port_test_step+0x2dc>)
    37fa:	4798      	blx	r3
  } while (mu_port_button_is_pressed());
    37fc:	4b6b      	ldr	r3, [pc, #428]	; (39ac <mulib_port_test_step+0x314>)
    37fe:	4798      	blx	r3
    3800:	1e03      	subs	r3, r0, #0
    3802:	d1f8      	bne.n	37f6 <mulib_port_test_step+0x15e>

  s_button_pressed = false;
    3804:	4b6b      	ldr	r3, [pc, #428]	; (39b4 <mulib_port_test_step+0x31c>)
    3806:	2200      	movs	r2, #0
    3808:	701a      	strb	r2, [r3, #0]
  mu_port_button_set_cb(button_press_cb, NULL);
    380a:	4b6b      	ldr	r3, [pc, #428]	; (39b8 <mulib_port_test_step+0x320>)
    380c:	2100      	movs	r1, #0
    380e:	0018      	movs	r0, r3
    3810:	4b6a      	ldr	r3, [pc, #424]	; (39bc <mulib_port_test_step+0x324>)
    3812:	4798      	blx	r3
  test_sync_printf("waiting for button press (asynchronous)...");
    3814:	4b6a      	ldr	r3, [pc, #424]	; (39c0 <mulib_port_test_step+0x328>)
    3816:	0018      	movs	r0, r3
    3818:	4b4d      	ldr	r3, [pc, #308]	; (3950 <mulib_port_test_step+0x2b8>)
    381a:	4798      	blx	r3
  while (!s_button_pressed) {
    381c:	46c0      	nop			; (mov r8, r8)
    381e:	4b65      	ldr	r3, [pc, #404]	; (39b4 <mulib_port_test_step+0x31c>)
    3820:	781b      	ldrb	r3, [r3, #0]
    3822:	b2db      	uxtb	r3, r3
    3824:	2201      	movs	r2, #1
    3826:	4053      	eors	r3, r2
    3828:	b2db      	uxtb	r3, r3
    382a:	2b00      	cmp	r3, #0
    382c:	d1f7      	bne.n	381e <mulib_port_test_step+0x186>
    // buzz...
  }
  test_sync_printf("received button press.\r\n");
    382e:	4b60      	ldr	r3, [pc, #384]	; (39b0 <mulib_port_test_step+0x318>)
    3830:	0018      	movs	r0, r3
    3832:	4b47      	ldr	r3, [pc, #284]	; (3950 <mulib_port_test_step+0x2b8>)
    3834:	4798      	blx	r3

  test_sync_printf("waiting for keyboard input (synchronous)...");
    3836:	4b63      	ldr	r3, [pc, #396]	; (39c4 <mulib_port_test_step+0x32c>)
    3838:	0018      	movs	r0, r3
    383a:	4b45      	ldr	r3, [pc, #276]	; (3950 <mulib_port_test_step+0x2b8>)
    383c:	4798      	blx	r3
  c = mu_port_serial_read();
    383e:	1cfc      	adds	r4, r7, #3
    3840:	4b61      	ldr	r3, [pc, #388]	; (39c8 <mulib_port_test_step+0x330>)
    3842:	4798      	blx	r3
    3844:	0003      	movs	r3, r0
    3846:	7023      	strb	r3, [r4, #0]
  test_sync_printf("received '%c'\r\n", c);
    3848:	1cfb      	adds	r3, r7, #3
    384a:	781a      	ldrb	r2, [r3, #0]
    384c:	4b5f      	ldr	r3, [pc, #380]	; (39cc <mulib_port_test_step+0x334>)
    384e:	0011      	movs	r1, r2
    3850:	0018      	movs	r0, r3
    3852:	4b3f      	ldr	r3, [pc, #252]	; (3950 <mulib_port_test_step+0x2b8>)
    3854:	4798      	blx	r3


  test_sync_printf("waiting for keyboard input (asynchronous)...");
    3856:	4b5e      	ldr	r3, [pc, #376]	; (39d0 <mulib_port_test_step+0x338>)
    3858:	0018      	movs	r0, r3
    385a:	4b3d      	ldr	r3, [pc, #244]	; (3950 <mulib_port_test_step+0x2b8>)
    385c:	4798      	blx	r3
  // set callback
  s_rx_char_available = false;
    385e:	4b5d      	ldr	r3, [pc, #372]	; (39d4 <mulib_port_test_step+0x33c>)
    3860:	2200      	movs	r2, #0
    3862:	701a      	strb	r2, [r3, #0]
  mu_port_serial_set_read_cb(serial_read_cb, NULL);
    3864:	4b5c      	ldr	r3, [pc, #368]	; (39d8 <mulib_port_test_step+0x340>)
    3866:	2100      	movs	r1, #0
    3868:	0018      	movs	r0, r3
    386a:	4b5c      	ldr	r3, [pc, #368]	; (39dc <mulib_port_test_step+0x344>)
    386c:	4798      	blx	r3
  while (!s_rx_char_available) {
    386e:	e000      	b.n	3872 <mulib_port_test_step+0x1da>
	  asm("nop");
    3870:	46c0      	nop			; (mov r8, r8)
  while (!s_rx_char_available) {
    3872:	4b58      	ldr	r3, [pc, #352]	; (39d4 <mulib_port_test_step+0x33c>)
    3874:	781b      	ldrb	r3, [r3, #0]
    3876:	b2db      	uxtb	r3, r3
    3878:	2201      	movs	r2, #1
    387a:	4053      	eors	r3, r2
    387c:	b2db      	uxtb	r3, r3
    387e:	2b00      	cmp	r3, #0
    3880:	d1f6      	bne.n	3870 <mulib_port_test_step+0x1d8>
  }
  c = mu_port_serial_read();
    3882:	1cfc      	adds	r4, r7, #3
    3884:	4b50      	ldr	r3, [pc, #320]	; (39c8 <mulib_port_test_step+0x330>)
    3886:	4798      	blx	r3
    3888:	0003      	movs	r3, r0
    388a:	7023      	strb	r3, [r4, #0]
  test_sync_printf("received '%c'\r\n", c);
    388c:	1cfb      	adds	r3, r7, #3
    388e:	781a      	ldrb	r2, [r3, #0]
    3890:	4b4e      	ldr	r3, [pc, #312]	; (39cc <mulib_port_test_step+0x334>)
    3892:	0011      	movs	r1, r2
    3894:	0018      	movs	r0, r3
    3896:	4b2e      	ldr	r3, [pc, #184]	; (3950 <mulib_port_test_step+0x2b8>)
    3898:	4798      	blx	r3

#ifdef MU_PORT_CAN_SLEEP
  test_sync_printf("sleeping for 2.5 seconds...");
    389a:	4b51      	ldr	r3, [pc, #324]	; (39e0 <mulib_port_test_step+0x348>)
    389c:	0018      	movs	r0, r3
    389e:	4b2c      	ldr	r3, [pc, #176]	; (3950 <mulib_port_test_step+0x2b8>)
    38a0:	4798      	blx	r3
  // Assure line gets printed before sleeping
  while (!mu_port_serial_can_write()) {
    38a2:	e000      	b.n	38a6 <mulib_port_test_step+0x20e>
	  asm("nop");
    38a4:	46c0      	nop			; (mov r8, r8)
  while (!mu_port_serial_can_write()) {
    38a6:	4b4f      	ldr	r3, [pc, #316]	; (39e4 <mulib_port_test_step+0x34c>)
    38a8:	4798      	blx	r3
    38aa:	0003      	movs	r3, r0
    38ac:	001a      	movs	r2, r3
    38ae:	2301      	movs	r3, #1
    38b0:	4053      	eors	r3, r2
    38b2:	b2db      	uxtb	r3, r3
    38b4:	2b00      	cmp	r3, #0
    38b6:	d1f5      	bne.n	38a4 <mulib_port_test_step+0x20c>
	  // buzz...
  }
  mu_port_sleep_until(mu_port_time_offset(mu_port_rtc_now(),
    38b8:	4b22      	ldr	r3, [pc, #136]	; (3944 <mulib_port_test_step+0x2ac>)
    38ba:	4798      	blx	r3
    38bc:	0004      	movs	r4, r0
    38be:	4b2c      	ldr	r3, [pc, #176]	; (3970 <mulib_port_test_step+0x2d8>)
    38c0:	0018      	movs	r0, r3
    38c2:	4b31      	ldr	r3, [pc, #196]	; (3988 <mulib_port_test_step+0x2f0>)
    38c4:	4798      	blx	r3
    38c6:	0003      	movs	r3, r0
    38c8:	0019      	movs	r1, r3
    38ca:	0020      	movs	r0, r4
    38cc:	4b2f      	ldr	r3, [pc, #188]	; (398c <mulib_port_test_step+0x2f4>)
    38ce:	4798      	blx	r3
    38d0:	0003      	movs	r3, r0
    38d2:	0018      	movs	r0, r3
    38d4:	4b44      	ldr	r3, [pc, #272]	; (39e8 <mulib_port_test_step+0x350>)
    38d6:	4798      	blx	r3
                                          mu_port_time_ms_to_duration(2500)));
  test_sync_printf("done.  time is now ");
    38d8:	4b2f      	ldr	r3, [pc, #188]	; (3998 <mulib_port_test_step+0x300>)
    38da:	0018      	movs	r0, r3
    38dc:	4b1c      	ldr	r3, [pc, #112]	; (3950 <mulib_port_test_step+0x2b8>)
    38de:	4798      	blx	r3
  test_print_time(mu_port_rtc_now());
    38e0:	4b18      	ldr	r3, [pc, #96]	; (3944 <mulib_port_test_step+0x2ac>)
    38e2:	4798      	blx	r3
    38e4:	0003      	movs	r3, r0
    38e6:	0018      	movs	r0, r3
    38e8:	4b1e      	ldr	r3, [pc, #120]	; (3964 <mulib_port_test_step+0x2cc>)
    38ea:	4798      	blx	r3
  test_sync_printf("\r\n");
    38ec:	4b1e      	ldr	r3, [pc, #120]	; (3968 <mulib_port_test_step+0x2d0>)
    38ee:	0018      	movs	r0, r3
    38f0:	4b17      	ldr	r3, [pc, #92]	; (3950 <mulib_port_test_step+0x2b8>)
    38f2:	4798      	blx	r3

  test_sync_printf("sleeping until button press...");
    38f4:	4b3d      	ldr	r3, [pc, #244]	; (39ec <mulib_port_test_step+0x354>)
    38f6:	0018      	movs	r0, r3
    38f8:	4b15      	ldr	r3, [pc, #84]	; (3950 <mulib_port_test_step+0x2b8>)
    38fa:	4798      	blx	r3
  // Assure line gets printed before sleeping
  while (!mu_port_serial_can_write()) {
    38fc:	e000      	b.n	3900 <mulib_port_test_step+0x268>
	  asm("nop");
    38fe:	46c0      	nop			; (mov r8, r8)
  while (!mu_port_serial_can_write()) {
    3900:	4b38      	ldr	r3, [pc, #224]	; (39e4 <mulib_port_test_step+0x34c>)
    3902:	4798      	blx	r3
    3904:	0003      	movs	r3, r0
    3906:	001a      	movs	r2, r3
    3908:	2301      	movs	r3, #1
    390a:	4053      	eors	r3, r2
    390c:	b2db      	uxtb	r3, r3
    390e:	2b00      	cmp	r3, #0
    3910:	d1f5      	bne.n	38fe <mulib_port_test_step+0x266>
	  // buzz...
  }
  mu_port_sleep();
    3912:	4b37      	ldr	r3, [pc, #220]	; (39f0 <mulib_port_test_step+0x358>)
    3914:	4798      	blx	r3
  test_sync_printf("done.  time is now ");
    3916:	4b20      	ldr	r3, [pc, #128]	; (3998 <mulib_port_test_step+0x300>)
    3918:	0018      	movs	r0, r3
    391a:	4b0d      	ldr	r3, [pc, #52]	; (3950 <mulib_port_test_step+0x2b8>)
    391c:	4798      	blx	r3
  test_print_time(mu_port_rtc_now());
    391e:	4b09      	ldr	r3, [pc, #36]	; (3944 <mulib_port_test_step+0x2ac>)
    3920:	4798      	blx	r3
    3922:	0003      	movs	r3, r0
    3924:	0018      	movs	r0, r3
    3926:	4b0f      	ldr	r3, [pc, #60]	; (3964 <mulib_port_test_step+0x2cc>)
    3928:	4798      	blx	r3
  test_sync_printf("\r\n");
    392a:	4b0f      	ldr	r3, [pc, #60]	; (3968 <mulib_port_test_step+0x2d0>)
    392c:	0018      	movs	r0, r3
    392e:	4b08      	ldr	r3, [pc, #32]	; (3950 <mulib_port_test_step+0x2b8>)
    3930:	4798      	blx	r3
#endif

  test_sync_printf("end of mu_port_test\r\n================\r\n");
    3932:	4b30      	ldr	r3, [pc, #192]	; (39f4 <mulib_port_test_step+0x35c>)
    3934:	0018      	movs	r0, r3
    3936:	4b06      	ldr	r3, [pc, #24]	; (3950 <mulib_port_test_step+0x2b8>)
    3938:	4798      	blx	r3
}
    393a:	46c0      	nop			; (mov r8, r8)
    393c:	46bd      	mov	sp, r7
    393e:	b003      	add	sp, #12
    3940:	bd90      	pop	{r4, r7, pc}
    3942:	46c0      	nop			; (mov r8, r8)
    3944:	00004081 	.word	0x00004081
    3948:	200000e4 	.word	0x200000e4
    394c:	000052f0 	.word	0x000052f0
    3950:	00003a4d 	.word	0x00003a4d
    3954:	0000531c 	.word	0x0000531c
    3958:	00005330 	.word	0x00005330
    395c:	00003abd 	.word	0x00003abd
    3960:	00005348 	.word	0x00005348
    3964:	00003b51 	.word	0x00003b51
    3968:	00005358 	.word	0x00005358
    396c:	0000535c 	.word	0x0000535c
    3970:	000009c4 	.word	0x000009c4
    3974:	000039f9 	.word	0x000039f9
    3978:	00005378 	.word	0x00005378
    397c:	200000e8 	.word	0x200000e8
    3980:	00003c21 	.word	0x00003c21
    3984:	000040a1 	.word	0x000040a1
    3988:	0000402d 	.word	0x0000402d
    398c:	00003fd5 	.word	0x00003fd5
    3990:	000040d9 	.word	0x000040d9
    3994:	00005390 	.word	0x00005390
    3998:	000053b8 	.word	0x000053b8
    399c:	000053cc 	.word	0x000053cc
    39a0:	00004151 	.word	0x00004151
    39a4:	00004119 	.word	0x00004119
    39a8:	000053ec 	.word	0x000053ec
    39ac:	0000417d 	.word	0x0000417d
    39b0:	00005418 	.word	0x00005418
    39b4:	200000e9 	.word	0x200000e9
    39b8:	00003ba1 	.word	0x00003ba1
    39bc:	000041a9 	.word	0x000041a9
    39c0:	00005434 	.word	0x00005434
    39c4:	00005460 	.word	0x00005460
    39c8:	000042bd 	.word	0x000042bd
    39cc:	0000548c 	.word	0x0000548c
    39d0:	0000549c 	.word	0x0000549c
    39d4:	200000ea 	.word	0x200000ea
    39d8:	00003c05 	.word	0x00003c05
    39dc:	0000431d 	.word	0x0000431d
    39e0:	000054cc 	.word	0x000054cc
    39e4:	00004265 	.word	0x00004265
    39e8:	00004355 	.word	0x00004355
    39ec:	000054e8 	.word	0x000054e8
    39f0:	0000439d 	.word	0x0000439d
    39f4:	00005508 	.word	0x00005508

000039f8 <test_wait_ms>:

// =============================================================================
// private (local) code

static void test_wait_ms(int ms) {
    39f8:	b590      	push	{r4, r7, lr}
    39fa:	b085      	sub	sp, #20
    39fc:	af00      	add	r7, sp, #0
    39fe:	6078      	str	r0, [r7, #4]
  mu_port_time_t then =
      mu_port_time_offset(mu_port_rtc_now(), mu_port_time_ms_to_duration(ms));
    3a00:	4b0e      	ldr	r3, [pc, #56]	; (3a3c <test_wait_ms+0x44>)
    3a02:	4798      	blx	r3
    3a04:	0004      	movs	r4, r0
    3a06:	687b      	ldr	r3, [r7, #4]
    3a08:	0018      	movs	r0, r3
    3a0a:	4b0d      	ldr	r3, [pc, #52]	; (3a40 <test_wait_ms+0x48>)
    3a0c:	4798      	blx	r3
    3a0e:	0003      	movs	r3, r0
  mu_port_time_t then =
    3a10:	0019      	movs	r1, r3
    3a12:	0020      	movs	r0, r4
    3a14:	4b0b      	ldr	r3, [pc, #44]	; (3a44 <test_wait_ms+0x4c>)
    3a16:	4798      	blx	r3
    3a18:	0003      	movs	r3, r0
    3a1a:	60fb      	str	r3, [r7, #12]
  while (mu_port_time_precedes(mu_port_rtc_now(), then)) {
    3a1c:	e000      	b.n	3a20 <test_wait_ms+0x28>
	  asm("nop");
    3a1e:	46c0      	nop			; (mov r8, r8)
  while (mu_port_time_precedes(mu_port_rtc_now(), then)) {
    3a20:	4b06      	ldr	r3, [pc, #24]	; (3a3c <test_wait_ms+0x44>)
    3a22:	4798      	blx	r3
    3a24:	0002      	movs	r2, r0
    3a26:	68fb      	ldr	r3, [r7, #12]
    3a28:	0019      	movs	r1, r3
    3a2a:	0010      	movs	r0, r2
    3a2c:	4b06      	ldr	r3, [pc, #24]	; (3a48 <test_wait_ms+0x50>)
    3a2e:	4798      	blx	r3
    3a30:	1e03      	subs	r3, r0, #0
    3a32:	d1f4      	bne.n	3a1e <test_wait_ms+0x26>
    // buzz...
  }
}
    3a34:	46c0      	nop			; (mov r8, r8)
    3a36:	46bd      	mov	sp, r7
    3a38:	b005      	add	sp, #20
    3a3a:	bd90      	pop	{r4, r7, pc}
    3a3c:	00004081 	.word	0x00004081
    3a40:	0000402d 	.word	0x0000402d
    3a44:	00003fd5 	.word	0x00003fd5
    3a48:	00004005 	.word	0x00004005

00003a4c <test_sync_printf>:

static void test_sync_printf(const char *fmt, ...) {
    3a4c:	b40f      	push	{r0, r1, r2, r3}
    3a4e:	b590      	push	{r4, r7, lr}
    3a50:	b085      	sub	sp, #20
    3a52:	af00      	add	r7, sp, #0
  static uint8_t buf[MAX_CHARS];
  size_t n_chars;

  va_list ap;
  va_start(ap, fmt);
    3a54:	2324      	movs	r3, #36	; 0x24
    3a56:	18fb      	adds	r3, r7, r3
    3a58:	607b      	str	r3, [r7, #4]
  n_chars = vsnprintf((char *)buf, MAX_CHARS, fmt, ap);
    3a5a:	687b      	ldr	r3, [r7, #4]
    3a5c:	6a3a      	ldr	r2, [r7, #32]
    3a5e:	4813      	ldr	r0, [pc, #76]	; (3aac <test_sync_printf+0x60>)
    3a60:	2132      	movs	r1, #50	; 0x32
    3a62:	4c13      	ldr	r4, [pc, #76]	; (3ab0 <test_sync_printf+0x64>)
    3a64:	47a0      	blx	r4
    3a66:	0003      	movs	r3, r0
    3a68:	60fb      	str	r3, [r7, #12]
  va_end(ap);

  uint8_t *p = buf;
    3a6a:	4b10      	ldr	r3, [pc, #64]	; (3aac <test_sync_printf+0x60>)
    3a6c:	60bb      	str	r3, [r7, #8]

  while (n_chars > 0) {
    3a6e:	e013      	b.n	3a98 <test_sync_printf+0x4c>
    while (!mu_port_serial_can_write()) {
      asm("nop");
    3a70:	46c0      	nop			; (mov r8, r8)
    while (!mu_port_serial_can_write()) {
    3a72:	4b10      	ldr	r3, [pc, #64]	; (3ab4 <test_sync_printf+0x68>)
    3a74:	4798      	blx	r3
    3a76:	0003      	movs	r3, r0
    3a78:	001a      	movs	r2, r3
    3a7a:	2301      	movs	r3, #1
    3a7c:	4053      	eors	r3, r2
    3a7e:	b2db      	uxtb	r3, r3
    3a80:	2b00      	cmp	r3, #0
    3a82:	d1f5      	bne.n	3a70 <test_sync_printf+0x24>
      // buzz...
    }
    mu_port_serial_write(*p++);
    3a84:	68bb      	ldr	r3, [r7, #8]
    3a86:	1c5a      	adds	r2, r3, #1
    3a88:	60ba      	str	r2, [r7, #8]
    3a8a:	781b      	ldrb	r3, [r3, #0]
    3a8c:	0018      	movs	r0, r3
    3a8e:	4b0a      	ldr	r3, [pc, #40]	; (3ab8 <test_sync_printf+0x6c>)
    3a90:	4798      	blx	r3
    n_chars--;
    3a92:	68fb      	ldr	r3, [r7, #12]
    3a94:	3b01      	subs	r3, #1
    3a96:	60fb      	str	r3, [r7, #12]
  while (n_chars > 0) {
    3a98:	68fb      	ldr	r3, [r7, #12]
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	d1e9      	bne.n	3a72 <test_sync_printf+0x26>
  }

}
    3a9e:	46c0      	nop			; (mov r8, r8)
    3aa0:	46bd      	mov	sp, r7
    3aa2:	b005      	add	sp, #20
    3aa4:	bc90      	pop	{r4, r7}
    3aa6:	bc08      	pop	{r3}
    3aa8:	b004      	add	sp, #16
    3aaa:	4718      	bx	r3
    3aac:	20000128 	.word	0x20000128
    3ab0:	00004945 	.word	0x00004945
    3ab4:	00004265 	.word	0x00004265
    3ab8:	000041e1 	.word	0x000041e1

00003abc <test_async_printf>:

static void test_async_printf(const char *fmt, ...) {
    3abc:	b40f      	push	{r0, r1, r2, r3}
    3abe:	b590      	push	{r4, r7, lr}
    3ac0:	b083      	sub	sp, #12
    3ac2:	af00      	add	r7, sp, #0

  va_list ap;
  va_start(ap, fmt);
    3ac4:	231c      	movs	r3, #28
    3ac6:	18fb      	adds	r3, r7, r3
    3ac8:	607b      	str	r3, [r7, #4]
  s_tx_count = vsnprintf((char *)s_tx_buf, MAX_CHARS, fmt, ap);
    3aca:	687b      	ldr	r3, [r7, #4]
    3acc:	69ba      	ldr	r2, [r7, #24]
    3ace:	4819      	ldr	r0, [pc, #100]	; (3b34 <test_async_printf+0x78>)
    3ad0:	2132      	movs	r1, #50	; 0x32
    3ad2:	4c19      	ldr	r4, [pc, #100]	; (3b38 <test_async_printf+0x7c>)
    3ad4:	47a0      	blx	r4
    3ad6:	0002      	movs	r2, r0
    3ad8:	4b18      	ldr	r3, [pc, #96]	; (3b3c <test_async_printf+0x80>)
    3ada:	601a      	str	r2, [r3, #0]
  va_end(ap);

  s_tx_index = 0;
    3adc:	4b18      	ldr	r3, [pc, #96]	; (3b40 <test_async_printf+0x84>)
    3ade:	2200      	movs	r2, #0
    3ae0:	601a      	str	r2, [r3, #0]
  if (s_tx_count > 0) {
    3ae2:	4b16      	ldr	r3, [pc, #88]	; (3b3c <test_async_printf+0x80>)
    3ae4:	681b      	ldr	r3, [r3, #0]
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	dd15      	ble.n	3b16 <test_async_printf+0x5a>
    // install callback to handle subsequent writes
    mu_port_serial_set_write_cb(serial_write_cb, NULL);
    3aea:	4b16      	ldr	r3, [pc, #88]	; (3b44 <test_async_printf+0x88>)
    3aec:	2100      	movs	r1, #0
    3aee:	0018      	movs	r0, r3
    3af0:	4b15      	ldr	r3, [pc, #84]	; (3b48 <test_async_printf+0x8c>)
    3af2:	4798      	blx	r3
    // write the first character to start things
    s_tx_index += 1;
    3af4:	4b12      	ldr	r3, [pc, #72]	; (3b40 <test_async_printf+0x84>)
    3af6:	681b      	ldr	r3, [r3, #0]
    3af8:	1c5a      	adds	r2, r3, #1
    3afa:	4b11      	ldr	r3, [pc, #68]	; (3b40 <test_async_printf+0x84>)
    3afc:	601a      	str	r2, [r3, #0]
    s_tx_count -= 1;
    3afe:	4b0f      	ldr	r3, [pc, #60]	; (3b3c <test_async_printf+0x80>)
    3b00:	681b      	ldr	r3, [r3, #0]
    3b02:	1e5a      	subs	r2, r3, #1
    3b04:	4b0d      	ldr	r3, [pc, #52]	; (3b3c <test_async_printf+0x80>)
    3b06:	601a      	str	r2, [r3, #0]
    mu_port_serial_write(s_tx_buf[0]);
    3b08:	4b0a      	ldr	r3, [pc, #40]	; (3b34 <test_async_printf+0x78>)
    3b0a:	781b      	ldrb	r3, [r3, #0]
    3b0c:	0018      	movs	r0, r3
    3b0e:	4b0f      	ldr	r3, [pc, #60]	; (3b4c <test_async_printf+0x90>)
    3b10:	4798      	blx	r3
  }

  // buzz until all chars written
  while (s_tx_count > 0) {
    3b12:	e000      	b.n	3b16 <test_async_printf+0x5a>
    asm("nop");
    3b14:	46c0      	nop			; (mov r8, r8)
  while (s_tx_count > 0) {
    3b16:	4b09      	ldr	r3, [pc, #36]	; (3b3c <test_async_printf+0x80>)
    3b18:	681b      	ldr	r3, [r3, #0]
    3b1a:	2b00      	cmp	r3, #0
    3b1c:	dcfa      	bgt.n	3b14 <test_async_printf+0x58>
  }

  // de-install callbacks.
  mu_port_serial_set_write_cb(NULL, NULL);
    3b1e:	2100      	movs	r1, #0
    3b20:	2000      	movs	r0, #0
    3b22:	4b09      	ldr	r3, [pc, #36]	; (3b48 <test_async_printf+0x8c>)
    3b24:	4798      	blx	r3
}
    3b26:	46c0      	nop			; (mov r8, r8)
    3b28:	46bd      	mov	sp, r7
    3b2a:	b003      	add	sp, #12
    3b2c:	bc90      	pop	{r4, r7}
    3b2e:	bc08      	pop	{r3}
    3b30:	b004      	add	sp, #16
    3b32:	4718      	bx	r3
    3b34:	200000ec 	.word	0x200000ec
    3b38:	00004945 	.word	0x00004945
    3b3c:	20000120 	.word	0x20000120
    3b40:	20000124 	.word	0x20000124
    3b44:	00003bbd 	.word	0x00003bbd
    3b48:	00004285 	.word	0x00004285
    3b4c:	000041e1 	.word	0x000041e1

00003b50 <test_print_time>:

static void test_print_time(mu_port_time_t t) {
    3b50:	b580      	push	{r7, lr}
    3b52:	b084      	sub	sp, #16
    3b54:	af00      	add	r7, sp, #0
    3b56:	6078      	str	r0, [r7, #4]
  mu_port_time_dt uptime = mu_port_time_difference(t, s_epoch);
    3b58:	4b0c      	ldr	r3, [pc, #48]	; (3b8c <test_print_time+0x3c>)
    3b5a:	681a      	ldr	r2, [r3, #0]
    3b5c:	687b      	ldr	r3, [r7, #4]
    3b5e:	0011      	movs	r1, r2
    3b60:	0018      	movs	r0, r3
    3b62:	4b0b      	ldr	r3, [pc, #44]	; (3b90 <test_print_time+0x40>)
    3b64:	4798      	blx	r3
    3b66:	0003      	movs	r3, r0
    3b68:	60fb      	str	r3, [r7, #12]
  int ms = mu_port_time_duration_to_ms(uptime);
    3b6a:	68fb      	ldr	r3, [r7, #12]
    3b6c:	0018      	movs	r0, r3
    3b6e:	4b09      	ldr	r3, [pc, #36]	; (3b94 <test_print_time+0x44>)
    3b70:	4798      	blx	r3
    3b72:	0003      	movs	r3, r0
    3b74:	60bb      	str	r3, [r7, #8]
#ifdef PORT_FLOAT
  PORT_FLOAT s = mu_port_time_duration_to_s(uptime);
  test_sync_printf("time = %d ms (%f s)", ms, s);
#else
  test_sync_printf("time = %d ms", ms);
    3b76:	68ba      	ldr	r2, [r7, #8]
    3b78:	4b07      	ldr	r3, [pc, #28]	; (3b98 <test_print_time+0x48>)
    3b7a:	0011      	movs	r1, r2
    3b7c:	0018      	movs	r0, r3
    3b7e:	4b07      	ldr	r3, [pc, #28]	; (3b9c <test_print_time+0x4c>)
    3b80:	4798      	blx	r3
#endif
}
    3b82:	46c0      	nop			; (mov r8, r8)
    3b84:	46bd      	mov	sp, r7
    3b86:	b004      	add	sp, #16
    3b88:	bd80      	pop	{r7, pc}
    3b8a:	46c0      	nop			; (mov r8, r8)
    3b8c:	200000e4 	.word	0x200000e4
    3b90:	00003fed 	.word	0x00003fed
    3b94:	00004055 	.word	0x00004055
    3b98:	00005530 	.word	0x00005530
    3b9c:	00003a4d 	.word	0x00003a4d

00003ba0 <button_press_cb>:

static void button_press_cb(void *arg) {
    3ba0:	b580      	push	{r7, lr}
    3ba2:	b082      	sub	sp, #8
    3ba4:	af00      	add	r7, sp, #0
    3ba6:	6078      	str	r0, [r7, #4]
	s_button_pressed = true;
    3ba8:	4b03      	ldr	r3, [pc, #12]	; (3bb8 <button_press_cb+0x18>)
    3baa:	2201      	movs	r2, #1
    3bac:	701a      	strb	r2, [r3, #0]
}
    3bae:	46c0      	nop			; (mov r8, r8)
    3bb0:	46bd      	mov	sp, r7
    3bb2:	b002      	add	sp, #8
    3bb4:	bd80      	pop	{r7, pc}
    3bb6:	46c0      	nop			; (mov r8, r8)
    3bb8:	200000e9 	.word	0x200000e9

00003bbc <serial_write_cb>:

static void serial_write_cb(void *arg) {
    3bbc:	b580      	push	{r7, lr}
    3bbe:	b082      	sub	sp, #8
    3bc0:	af00      	add	r7, sp, #0
    3bc2:	6078      	str	r0, [r7, #4]
  // arrive here when serial can send another char
  if (s_tx_count > 0) {
    3bc4:	4b0b      	ldr	r3, [pc, #44]	; (3bf4 <serial_write_cb+0x38>)
    3bc6:	681b      	ldr	r3, [r3, #0]
    3bc8:	2b00      	cmp	r3, #0
    3bca:	dd0e      	ble.n	3bea <serial_write_cb+0x2e>
    mu_port_serial_write(s_tx_buf[s_tx_index++]);
    3bcc:	4b0a      	ldr	r3, [pc, #40]	; (3bf8 <serial_write_cb+0x3c>)
    3bce:	681b      	ldr	r3, [r3, #0]
    3bd0:	1c59      	adds	r1, r3, #1
    3bd2:	4a09      	ldr	r2, [pc, #36]	; (3bf8 <serial_write_cb+0x3c>)
    3bd4:	6011      	str	r1, [r2, #0]
    3bd6:	4a09      	ldr	r2, [pc, #36]	; (3bfc <serial_write_cb+0x40>)
    3bd8:	5cd3      	ldrb	r3, [r2, r3]
    3bda:	0018      	movs	r0, r3
    3bdc:	4b08      	ldr	r3, [pc, #32]	; (3c00 <serial_write_cb+0x44>)
    3bde:	4798      	blx	r3
    s_tx_count -= 1;
    3be0:	4b04      	ldr	r3, [pc, #16]	; (3bf4 <serial_write_cb+0x38>)
    3be2:	681b      	ldr	r3, [r3, #0]
    3be4:	1e5a      	subs	r2, r3, #1
    3be6:	4b03      	ldr	r3, [pc, #12]	; (3bf4 <serial_write_cb+0x38>)
    3be8:	601a      	str	r2, [r3, #0]
  }
  // When the write operation completes, this callback will be called again.
}
    3bea:	46c0      	nop			; (mov r8, r8)
    3bec:	46bd      	mov	sp, r7
    3bee:	b002      	add	sp, #8
    3bf0:	bd80      	pop	{r7, pc}
    3bf2:	46c0      	nop			; (mov r8, r8)
    3bf4:	20000120 	.word	0x20000120
    3bf8:	20000124 	.word	0x20000124
    3bfc:	200000ec 	.word	0x200000ec
    3c00:	000041e1 	.word	0x000041e1

00003c04 <serial_read_cb>:

static void serial_read_cb(void *arg) {
    3c04:	b580      	push	{r7, lr}
    3c06:	b082      	sub	sp, #8
    3c08:	af00      	add	r7, sp, #0
    3c0a:	6078      	str	r0, [r7, #4]
  s_rx_char_available = true;
    3c0c:	4b03      	ldr	r3, [pc, #12]	; (3c1c <serial_read_cb+0x18>)
    3c0e:	2201      	movs	r2, #1
    3c10:	701a      	strb	r2, [r3, #0]
}
    3c12:	46c0      	nop			; (mov r8, r8)
    3c14:	46bd      	mov	sp, r7
    3c16:	b002      	add	sp, #8
    3c18:	bd80      	pop	{r7, pc}
    3c1a:	46c0      	nop			; (mov r8, r8)
    3c1c:	200000ea 	.word	0x200000ea

00003c20 <rtc_cb>:

static void rtc_cb(void *arg) {
    3c20:	b580      	push	{r7, lr}
    3c22:	b082      	sub	sp, #8
    3c24:	af00      	add	r7, sp, #0
    3c26:	6078      	str	r0, [r7, #4]
	s_rtc_matched = true;
    3c28:	4b03      	ldr	r3, [pc, #12]	; (3c38 <rtc_cb+0x18>)
    3c2a:	2201      	movs	r2, #1
    3c2c:	701a      	strb	r2, [r3, #0]
}
    3c2e:	46c0      	nop			; (mov r8, r8)
    3c30:	46bd      	mov	sp, r7
    3c32:	b002      	add	sp, #8
    3c34:	bd80      	pop	{r7, pc}
    3c36:	46c0      	nop			; (mov r8, r8)
    3c38:	200000e8 	.word	0x200000e8

00003c3c <hri_port_read_DIR_reg>:
{
    3c3c:	b580      	push	{r7, lr}
    3c3e:	b082      	sub	sp, #8
    3c40:	af00      	add	r7, sp, #0
    3c42:	6078      	str	r0, [r7, #4]
    3c44:	000a      	movs	r2, r1
    3c46:	1cfb      	adds	r3, r7, #3
    3c48:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3c4a:	1cfb      	adds	r3, r7, #3
    3c4c:	781a      	ldrb	r2, [r3, #0]
    3c4e:	687b      	ldr	r3, [r7, #4]
    3c50:	01d2      	lsls	r2, r2, #7
    3c52:	58d3      	ldr	r3, [r2, r3]
}
    3c54:	0018      	movs	r0, r3
    3c56:	46bd      	mov	sp, r7
    3c58:	b002      	add	sp, #8
    3c5a:	bd80      	pop	{r7, pc}

00003c5c <hri_port_set_OUT_reg>:
{
    3c5c:	b580      	push	{r7, lr}
    3c5e:	b084      	sub	sp, #16
    3c60:	af00      	add	r7, sp, #0
    3c62:	60f8      	str	r0, [r7, #12]
    3c64:	607a      	str	r2, [r7, #4]
    3c66:	230b      	movs	r3, #11
    3c68:	18fb      	adds	r3, r7, r3
    3c6a:	1c0a      	adds	r2, r1, #0
    3c6c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3c6e:	230b      	movs	r3, #11
    3c70:	18fb      	adds	r3, r7, r3
    3c72:	781b      	ldrb	r3, [r3, #0]
    3c74:	68fa      	ldr	r2, [r7, #12]
    3c76:	01db      	lsls	r3, r3, #7
    3c78:	18d3      	adds	r3, r2, r3
    3c7a:	3318      	adds	r3, #24
    3c7c:	687a      	ldr	r2, [r7, #4]
    3c7e:	601a      	str	r2, [r3, #0]
}
    3c80:	46c0      	nop			; (mov r8, r8)
    3c82:	46bd      	mov	sp, r7
    3c84:	b004      	add	sp, #16
    3c86:	bd80      	pop	{r7, pc}

00003c88 <hri_port_read_OUT_reg>:
{
    3c88:	b580      	push	{r7, lr}
    3c8a:	b082      	sub	sp, #8
    3c8c:	af00      	add	r7, sp, #0
    3c8e:	6078      	str	r0, [r7, #4]
    3c90:	000a      	movs	r2, r1
    3c92:	1cfb      	adds	r3, r7, #3
    3c94:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3c96:	1cfb      	adds	r3, r7, #3
    3c98:	781b      	ldrb	r3, [r3, #0]
    3c9a:	687a      	ldr	r2, [r7, #4]
    3c9c:	01db      	lsls	r3, r3, #7
    3c9e:	18d3      	adds	r3, r2, r3
    3ca0:	3310      	adds	r3, #16
    3ca2:	681b      	ldr	r3, [r3, #0]
}
    3ca4:	0018      	movs	r0, r3
    3ca6:	46bd      	mov	sp, r7
    3ca8:	b002      	add	sp, #8
    3caa:	bd80      	pop	{r7, pc}

00003cac <hri_port_clear_OUT_reg>:
{
    3cac:	b580      	push	{r7, lr}
    3cae:	b084      	sub	sp, #16
    3cb0:	af00      	add	r7, sp, #0
    3cb2:	60f8      	str	r0, [r7, #12]
    3cb4:	607a      	str	r2, [r7, #4]
    3cb6:	230b      	movs	r3, #11
    3cb8:	18fb      	adds	r3, r7, r3
    3cba:	1c0a      	adds	r2, r1, #0
    3cbc:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3cbe:	230b      	movs	r3, #11
    3cc0:	18fb      	adds	r3, r7, r3
    3cc2:	781b      	ldrb	r3, [r3, #0]
    3cc4:	68fa      	ldr	r2, [r7, #12]
    3cc6:	01db      	lsls	r3, r3, #7
    3cc8:	18d3      	adds	r3, r2, r3
    3cca:	3314      	adds	r3, #20
    3ccc:	687a      	ldr	r2, [r7, #4]
    3cce:	601a      	str	r2, [r3, #0]
}
    3cd0:	46c0      	nop			; (mov r8, r8)
    3cd2:	46bd      	mov	sp, r7
    3cd4:	b004      	add	sp, #16
    3cd6:	bd80      	pop	{r7, pc}

00003cd8 <hri_port_read_IN_reg>:
{
    3cd8:	b580      	push	{r7, lr}
    3cda:	b082      	sub	sp, #8
    3cdc:	af00      	add	r7, sp, #0
    3cde:	6078      	str	r0, [r7, #4]
    3ce0:	000a      	movs	r2, r1
    3ce2:	1cfb      	adds	r3, r7, #3
    3ce4:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3ce6:	1cfb      	adds	r3, r7, #3
    3ce8:	781b      	ldrb	r3, [r3, #0]
    3cea:	687a      	ldr	r2, [r7, #4]
    3cec:	01db      	lsls	r3, r3, #7
    3cee:	18d3      	adds	r3, r2, r3
    3cf0:	3320      	adds	r3, #32
    3cf2:	681b      	ldr	r3, [r3, #0]
}
    3cf4:	0018      	movs	r0, r3
    3cf6:	46bd      	mov	sp, r7
    3cf8:	b002      	add	sp, #8
    3cfa:	bd80      	pop	{r7, pc}

00003cfc <hri_rtc_wait_for_sync>:
{
    3cfc:	b580      	push	{r7, lr}
    3cfe:	b082      	sub	sp, #8
    3d00:	af00      	add	r7, sp, #0
    3d02:	6078      	str	r0, [r7, #4]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    3d04:	46c0      	nop			; (mov r8, r8)
    3d06:	687b      	ldr	r3, [r7, #4]
    3d08:	7a9b      	ldrb	r3, [r3, #10]
    3d0a:	061b      	lsls	r3, r3, #24
    3d0c:	0fdb      	lsrs	r3, r3, #31
    3d0e:	b2db      	uxtb	r3, r3
    3d10:	2b00      	cmp	r3, #0
    3d12:	d1f8      	bne.n	3d06 <hri_rtc_wait_for_sync+0xa>
}
    3d14:	46c0      	nop			; (mov r8, r8)
    3d16:	46bd      	mov	sp, r7
    3d18:	b002      	add	sp, #8
    3d1a:	bd80      	pop	{r7, pc}

00003d1c <hri_rtc_set_READREQ_RCONT_bit>:
{
    3d1c:	b580      	push	{r7, lr}
    3d1e:	b082      	sub	sp, #8
    3d20:	af00      	add	r7, sp, #0
    3d22:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    3d24:	687b      	ldr	r3, [r7, #4]
    3d26:	885b      	ldrh	r3, [r3, #2]
    3d28:	b29b      	uxth	r3, r3
    3d2a:	2280      	movs	r2, #128	; 0x80
    3d2c:	01d2      	lsls	r2, r2, #7
    3d2e:	4313      	orrs	r3, r2
    3d30:	b29a      	uxth	r2, r3
    3d32:	687b      	ldr	r3, [r7, #4]
    3d34:	805a      	strh	r2, [r3, #2]
}
    3d36:	46c0      	nop			; (mov r8, r8)
    3d38:	46bd      	mov	sp, r7
    3d3a:	b002      	add	sp, #8
    3d3c:	bd80      	pop	{r7, pc}
	...

00003d40 <hri_rtc_set_READREQ_RREQ_bit>:
{
    3d40:	b580      	push	{r7, lr}
    3d42:	b082      	sub	sp, #8
    3d44:	af00      	add	r7, sp, #0
    3d46:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
    3d48:	687b      	ldr	r3, [r7, #4]
    3d4a:	885b      	ldrh	r3, [r3, #2]
    3d4c:	b29b      	uxth	r3, r3
    3d4e:	4a04      	ldr	r2, [pc, #16]	; (3d60 <hri_rtc_set_READREQ_RREQ_bit+0x20>)
    3d50:	4313      	orrs	r3, r2
    3d52:	b29a      	uxth	r2, r3
    3d54:	687b      	ldr	r3, [r7, #4]
    3d56:	805a      	strh	r2, [r3, #2]
}
    3d58:	46c0      	nop			; (mov r8, r8)
    3d5a:	46bd      	mov	sp, r7
    3d5c:	b002      	add	sp, #8
    3d5e:	bd80      	pop	{r7, pc}
    3d60:	ffff8000 	.word	0xffff8000

00003d64 <hri_rtcmode0_read_COUNT_COUNT_bf>:
{
    3d64:	b580      	push	{r7, lr}
    3d66:	b084      	sub	sp, #16
    3d68:	af00      	add	r7, sp, #0
    3d6a:	6078      	str	r0, [r7, #4]
	hri_rtc_wait_for_sync(hw);
    3d6c:	687b      	ldr	r3, [r7, #4]
    3d6e:	0018      	movs	r0, r3
    3d70:	4b04      	ldr	r3, [pc, #16]	; (3d84 <hri_rtcmode0_read_COUNT_COUNT_bf+0x20>)
    3d72:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
    3d74:	687b      	ldr	r3, [r7, #4]
    3d76:	691b      	ldr	r3, [r3, #16]
    3d78:	60fb      	str	r3, [r7, #12]
	return tmp;
    3d7a:	68fb      	ldr	r3, [r7, #12]
}
    3d7c:	0018      	movs	r0, r3
    3d7e:	46bd      	mov	sp, r7
    3d80:	b004      	add	sp, #16
    3d82:	bd80      	pop	{r7, pc}
    3d84:	00003cfd 	.word	0x00003cfd

00003d88 <hri_sercomusart_wait_for_sync>:
{
    3d88:	b580      	push	{r7, lr}
    3d8a:	b082      	sub	sp, #8
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	6078      	str	r0, [r7, #4]
    3d90:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3d92:	46c0      	nop			; (mov r8, r8)
    3d94:	687b      	ldr	r3, [r7, #4]
    3d96:	69db      	ldr	r3, [r3, #28]
    3d98:	683a      	ldr	r2, [r7, #0]
    3d9a:	4013      	ands	r3, r2
    3d9c:	d1fa      	bne.n	3d94 <hri_sercomusart_wait_for_sync+0xc>
}
    3d9e:	46c0      	nop			; (mov r8, r8)
    3da0:	46bd      	mov	sp, r7
    3da2:	b002      	add	sp, #8
    3da4:	bd80      	pop	{r7, pc}

00003da6 <hri_sercomusart_clear_INTFLAG_RXS_bit>:
{
    3da6:	b580      	push	{r7, lr}
    3da8:	b082      	sub	sp, #8
    3daa:	af00      	add	r7, sp, #0
    3dac:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    3dae:	687b      	ldr	r3, [r7, #4]
    3db0:	2208      	movs	r2, #8
    3db2:	761a      	strb	r2, [r3, #24]
}
    3db4:	46c0      	nop			; (mov r8, r8)
    3db6:	46bd      	mov	sp, r7
    3db8:	b002      	add	sp, #8
    3dba:	bd80      	pop	{r7, pc}

00003dbc <hri_sercomusart_get_interrupt_DRE_bit>:
{
    3dbc:	b580      	push	{r7, lr}
    3dbe:	b082      	sub	sp, #8
    3dc0:	af00      	add	r7, sp, #0
    3dc2:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3dc4:	687b      	ldr	r3, [r7, #4]
    3dc6:	7e1b      	ldrb	r3, [r3, #24]
    3dc8:	b2db      	uxtb	r3, r3
    3dca:	001a      	movs	r2, r3
    3dcc:	2301      	movs	r3, #1
    3dce:	4013      	ands	r3, r2
    3dd0:	1e5a      	subs	r2, r3, #1
    3dd2:	4193      	sbcs	r3, r2
    3dd4:	b2db      	uxtb	r3, r3
}
    3dd6:	0018      	movs	r0, r3
    3dd8:	46bd      	mov	sp, r7
    3dda:	b002      	add	sp, #8
    3ddc:	bd80      	pop	{r7, pc}
	...

00003de0 <hri_sercomusart_set_CTRLB_SFDE_bit>:
{
    3de0:	b580      	push	{r7, lr}
    3de2:	b082      	sub	sp, #8
    3de4:	af00      	add	r7, sp, #0
    3de6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.CTRLB.reg |= SERCOM_USART_CTRLB_SFDE;
    3de8:	687b      	ldr	r3, [r7, #4]
    3dea:	685b      	ldr	r3, [r3, #4]
    3dec:	2280      	movs	r2, #128	; 0x80
    3dee:	0092      	lsls	r2, r2, #2
    3df0:	431a      	orrs	r2, r3
    3df2:	687b      	ldr	r3, [r7, #4]
    3df4:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    3df6:	687b      	ldr	r3, [r7, #4]
    3df8:	2107      	movs	r1, #7
    3dfa:	0018      	movs	r0, r3
    3dfc:	4b02      	ldr	r3, [pc, #8]	; (3e08 <hri_sercomusart_set_CTRLB_SFDE_bit+0x28>)
    3dfe:	4798      	blx	r3
}
    3e00:	46c0      	nop			; (mov r8, r8)
    3e02:	46bd      	mov	sp, r7
    3e04:	b002      	add	sp, #8
    3e06:	bd80      	pop	{r7, pc}
    3e08:	00003d89 	.word	0x00003d89

00003e0c <_gpio_set_level>:
{
    3e0c:	b580      	push	{r7, lr}
    3e0e:	b082      	sub	sp, #8
    3e10:	af00      	add	r7, sp, #0
    3e12:	6039      	str	r1, [r7, #0]
    3e14:	0011      	movs	r1, r2
    3e16:	1dfb      	adds	r3, r7, #7
    3e18:	1c02      	adds	r2, r0, #0
    3e1a:	701a      	strb	r2, [r3, #0]
    3e1c:	1dbb      	adds	r3, r7, #6
    3e1e:	1c0a      	adds	r2, r1, #0
    3e20:	701a      	strb	r2, [r3, #0]
	if (level) {
    3e22:	1dbb      	adds	r3, r7, #6
    3e24:	781b      	ldrb	r3, [r3, #0]
    3e26:	2b00      	cmp	r3, #0
    3e28:	d008      	beq.n	3e3c <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    3e2a:	683a      	ldr	r2, [r7, #0]
    3e2c:	1dfb      	adds	r3, r7, #7
    3e2e:	7819      	ldrb	r1, [r3, #0]
    3e30:	23c0      	movs	r3, #192	; 0xc0
    3e32:	05db      	lsls	r3, r3, #23
    3e34:	0018      	movs	r0, r3
    3e36:	4b07      	ldr	r3, [pc, #28]	; (3e54 <_gpio_set_level+0x48>)
    3e38:	4798      	blx	r3
}
    3e3a:	e007      	b.n	3e4c <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    3e3c:	683a      	ldr	r2, [r7, #0]
    3e3e:	1dfb      	adds	r3, r7, #7
    3e40:	7819      	ldrb	r1, [r3, #0]
    3e42:	23c0      	movs	r3, #192	; 0xc0
    3e44:	05db      	lsls	r3, r3, #23
    3e46:	0018      	movs	r0, r3
    3e48:	4b03      	ldr	r3, [pc, #12]	; (3e58 <_gpio_set_level+0x4c>)
    3e4a:	4798      	blx	r3
}
    3e4c:	46c0      	nop			; (mov r8, r8)
    3e4e:	46bd      	mov	sp, r7
    3e50:	b002      	add	sp, #8
    3e52:	bd80      	pop	{r7, pc}
    3e54:	00003c5d 	.word	0x00003c5d
    3e58:	00003cad 	.word	0x00003cad

00003e5c <_gpio_get_level>:
{
    3e5c:	b580      	push	{r7, lr}
    3e5e:	b086      	sub	sp, #24
    3e60:	af00      	add	r7, sp, #0
    3e62:	0002      	movs	r2, r0
    3e64:	1dfb      	adds	r3, r7, #7
    3e66:	701a      	strb	r2, [r3, #0]
	CRITICAL_SECTION_ENTER();
    3e68:	230c      	movs	r3, #12
    3e6a:	18fb      	adds	r3, r7, r3
    3e6c:	0018      	movs	r0, r3
    3e6e:	4b18      	ldr	r3, [pc, #96]	; (3ed0 <_gpio_get_level+0x74>)
    3e70:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);
    3e72:	1dfb      	adds	r3, r7, #7
    3e74:	781a      	ldrb	r2, [r3, #0]
    3e76:	23c0      	movs	r3, #192	; 0xc0
    3e78:	05db      	lsls	r3, r3, #23
    3e7a:	0011      	movs	r1, r2
    3e7c:	0018      	movs	r0, r3
    3e7e:	4b15      	ldr	r3, [pc, #84]	; (3ed4 <_gpio_get_level+0x78>)
    3e80:	4798      	blx	r3
    3e82:	0003      	movs	r3, r0
    3e84:	617b      	str	r3, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    3e86:	1dfb      	adds	r3, r7, #7
    3e88:	781b      	ldrb	r3, [r3, #0]
    3e8a:	4a13      	ldr	r2, [pc, #76]	; (3ed8 <_gpio_get_level+0x7c>)
    3e8c:	0019      	movs	r1, r3
    3e8e:	0010      	movs	r0, r2
    3e90:	4b12      	ldr	r3, [pc, #72]	; (3edc <_gpio_get_level+0x80>)
    3e92:	4798      	blx	r3
    3e94:	0002      	movs	r2, r0
    3e96:	697b      	ldr	r3, [r7, #20]
    3e98:	43db      	mvns	r3, r3
    3e9a:	4013      	ands	r3, r2
    3e9c:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3e9e:	1dfb      	adds	r3, r7, #7
    3ea0:	781a      	ldrb	r2, [r3, #0]
    3ea2:	23c0      	movs	r3, #192	; 0xc0
    3ea4:	05db      	lsls	r3, r3, #23
    3ea6:	0011      	movs	r1, r2
    3ea8:	0018      	movs	r0, r3
    3eaa:	4b0d      	ldr	r3, [pc, #52]	; (3ee0 <_gpio_get_level+0x84>)
    3eac:	4798      	blx	r3
    3eae:	0002      	movs	r2, r0
    3eb0:	697b      	ldr	r3, [r7, #20]
    3eb2:	4013      	ands	r3, r2
    3eb4:	693a      	ldr	r2, [r7, #16]
    3eb6:	4313      	orrs	r3, r2
    3eb8:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
    3eba:	230c      	movs	r3, #12
    3ebc:	18fb      	adds	r3, r7, r3
    3ebe:	0018      	movs	r0, r3
    3ec0:	4b08      	ldr	r3, [pc, #32]	; (3ee4 <_gpio_get_level+0x88>)
    3ec2:	4798      	blx	r3
	return tmp;
    3ec4:	693b      	ldr	r3, [r7, #16]
}
    3ec6:	0018      	movs	r0, r3
    3ec8:	46bd      	mov	sp, r7
    3eca:	b006      	add	sp, #24
    3ecc:	bd80      	pop	{r7, pc}
    3ece:	46c0      	nop			; (mov r8, r8)
    3ed0:	00000d09 	.word	0x00000d09
    3ed4:	00003c3d 	.word	0x00003c3d
    3ed8:	41004400 	.word	0x41004400
    3edc:	00003cd9 	.word	0x00003cd9
    3ee0:	00003c89 	.word	0x00003c89
    3ee4:	00000d2b 	.word	0x00000d2b

00003ee8 <gpio_set_pin_level>:
{
    3ee8:	b580      	push	{r7, lr}
    3eea:	b082      	sub	sp, #8
    3eec:	af00      	add	r7, sp, #0
    3eee:	0002      	movs	r2, r0
    3ef0:	1dfb      	adds	r3, r7, #7
    3ef2:	701a      	strb	r2, [r3, #0]
    3ef4:	1dbb      	adds	r3, r7, #6
    3ef6:	1c0a      	adds	r2, r1, #0
    3ef8:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    3efa:	1dfb      	adds	r3, r7, #7
    3efc:	781b      	ldrb	r3, [r3, #0]
    3efe:	095b      	lsrs	r3, r3, #5
    3f00:	b2d8      	uxtb	r0, r3
    3f02:	1dfb      	adds	r3, r7, #7
    3f04:	781b      	ldrb	r3, [r3, #0]
    3f06:	221f      	movs	r2, #31
    3f08:	4013      	ands	r3, r2
    3f0a:	2201      	movs	r2, #1
    3f0c:	409a      	lsls	r2, r3
    3f0e:	0011      	movs	r1, r2
    3f10:	1dbb      	adds	r3, r7, #6
    3f12:	781b      	ldrb	r3, [r3, #0]
    3f14:	001a      	movs	r2, r3
    3f16:	4b03      	ldr	r3, [pc, #12]	; (3f24 <gpio_set_pin_level+0x3c>)
    3f18:	4798      	blx	r3
}
    3f1a:	46c0      	nop			; (mov r8, r8)
    3f1c:	46bd      	mov	sp, r7
    3f1e:	b002      	add	sp, #8
    3f20:	bd80      	pop	{r7, pc}
    3f22:	46c0      	nop			; (mov r8, r8)
    3f24:	00003e0d 	.word	0x00003e0d

00003f28 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    3f28:	b580      	push	{r7, lr}
    3f2a:	b082      	sub	sp, #8
    3f2c:	af00      	add	r7, sp, #0
    3f2e:	0002      	movs	r2, r0
    3f30:	1dfb      	adds	r3, r7, #7
    3f32:	701a      	strb	r2, [r3, #0]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    3f34:	1dfb      	adds	r3, r7, #7
    3f36:	781b      	ldrb	r3, [r3, #0]
    3f38:	095b      	lsrs	r3, r3, #5
    3f3a:	b2db      	uxtb	r3, r3
    3f3c:	0018      	movs	r0, r3
    3f3e:	4b09      	ldr	r3, [pc, #36]	; (3f64 <gpio_get_pin_level+0x3c>)
    3f40:	4798      	blx	r3
    3f42:	0001      	movs	r1, r0
    3f44:	1dfb      	adds	r3, r7, #7
    3f46:	781b      	ldrb	r3, [r3, #0]
    3f48:	221f      	movs	r2, #31
    3f4a:	4013      	ands	r3, r2
    3f4c:	2201      	movs	r2, #1
    3f4e:	409a      	lsls	r2, r3
    3f50:	0013      	movs	r3, r2
    3f52:	400b      	ands	r3, r1
    3f54:	1e5a      	subs	r2, r3, #1
    3f56:	4193      	sbcs	r3, r2
    3f58:	b2db      	uxtb	r3, r3
}
    3f5a:	0018      	movs	r0, r3
    3f5c:	46bd      	mov	sp, r7
    3f5e:	b002      	add	sp, #8
    3f60:	bd80      	pop	{r7, pc}
    3f62:	46c0      	nop			; (mov r8, r8)
    3f64:	00003e5d 	.word	0x00003e5d

00003f68 <mu_port_init>:
static volatile bool s_rx_has_data;

// =============================================================================
// public code

void mu_port_init(void) {
    3f68:	b580      	push	{r7, lr}
    3f6a:	af00      	add	r7, sp, #0
#ifdef MU_PORT_FLOAT
  s_rtc_period = 1.0 / (MU_PORT_FLOAT)CONF_GCLK_RTC_FREQUENCY;
#endif
  memset(&s_port, 0, sizeof(s_port));
    3f6c:	4b0e      	ldr	r3, [pc, #56]	; (3fa8 <mu_port_init+0x40>)
    3f6e:	2220      	movs	r2, #32
    3f70:	2100      	movs	r1, #0
    3f72:	0018      	movs	r0, r3
    3f74:	4b0d      	ldr	r3, [pc, #52]	; (3fac <mu_port_init+0x44>)
    3f76:	4798      	blx	r3

  ext_irq_register(PIN_PA15, button_cb_trampoline);
    3f78:	4b0d      	ldr	r3, [pc, #52]	; (3fb0 <mu_port_init+0x48>)
    3f7a:	0019      	movs	r1, r3
    3f7c:	200f      	movs	r0, #15
    3f7e:	4b0d      	ldr	r3, [pc, #52]	; (3fb4 <mu_port_init+0x4c>)
    3f80:	4798      	blx	r3

  // Commandeer the USART driver to do our bidding...
  customize_usart_driver();
    3f82:	4b0d      	ldr	r3, [pc, #52]	; (3fb8 <mu_port_init+0x50>)
    3f84:	4798      	blx	r3
  usart_async_enable(&USART_0);
    3f86:	4b0d      	ldr	r3, [pc, #52]	; (3fbc <mu_port_init+0x54>)
    3f88:	0018      	movs	r0, r3
    3f8a:	4b0d      	ldr	r3, [pc, #52]	; (3fc0 <mu_port_init+0x58>)
    3f8c:	4798      	blx	r3

  // Initialize the RTC.  Use CALENDAR_0 since that's the only published
  // interface for interacting with the underlying RTC.
  calendar_enable(&CALENDAR_0); // start RTC
    3f8e:	4b0d      	ldr	r3, [pc, #52]	; (3fc4 <mu_port_init+0x5c>)
    3f90:	0018      	movs	r0, r3
    3f92:	4b0d      	ldr	r3, [pc, #52]	; (3fc8 <mu_port_init+0x60>)
    3f94:	4798      	blx	r3
  _calendar_register_callback(&CALENDAR_0.device, rtc_cb_trampoline);
    3f96:	4a0d      	ldr	r2, [pc, #52]	; (3fcc <mu_port_init+0x64>)
    3f98:	4b0a      	ldr	r3, [pc, #40]	; (3fc4 <mu_port_init+0x5c>)
    3f9a:	0011      	movs	r1, r2
    3f9c:	0018      	movs	r0, r3
    3f9e:	4b0c      	ldr	r3, [pc, #48]	; (3fd0 <mu_port_init+0x68>)
    3fa0:	4798      	blx	r3
}
    3fa2:	46c0      	nop			; (mov r8, r8)
    3fa4:	46bd      	mov	sp, r7
    3fa6:	bd80      	pop	{r7, pc}
    3fa8:	20000160 	.word	0x20000160
    3fac:	000048dd 	.word	0x000048dd
    3fb0:	000043b1 	.word	0x000043b1
    3fb4:	000013c9 	.word	0x000013c9
    3fb8:	000043d5 	.word	0x000043d5
    3fbc:	200001a8 	.word	0x200001a8
    3fc0:	0000178d 	.word	0x0000178d
    3fc4:	2000018c 	.word	0x2000018c
    3fc8:	00001331 	.word	0x00001331
    3fcc:	000044ed 	.word	0x000044ed
    3fd0:	00002705 	.word	0x00002705

00003fd4 <mu_port_time_offset>:

// TIME

mu_port_time_t mu_port_time_offset(mu_port_time_t t, mu_port_time_dt dt) {
    3fd4:	b580      	push	{r7, lr}
    3fd6:	b082      	sub	sp, #8
    3fd8:	af00      	add	r7, sp, #0
    3fda:	6078      	str	r0, [r7, #4]
    3fdc:	6039      	str	r1, [r7, #0]
  return t + dt;
    3fde:	683a      	ldr	r2, [r7, #0]
    3fe0:	687b      	ldr	r3, [r7, #4]
    3fe2:	18d3      	adds	r3, r2, r3
}
    3fe4:	0018      	movs	r0, r3
    3fe6:	46bd      	mov	sp, r7
    3fe8:	b002      	add	sp, #8
    3fea:	bd80      	pop	{r7, pc}

00003fec <mu_port_time_difference>:

mu_port_time_dt mu_port_time_difference(mu_port_time_t t1, mu_port_time_t t2) {
    3fec:	b580      	push	{r7, lr}
    3fee:	b082      	sub	sp, #8
    3ff0:	af00      	add	r7, sp, #0
    3ff2:	6078      	str	r0, [r7, #4]
    3ff4:	6039      	str	r1, [r7, #0]
  return t1 - t2;
    3ff6:	687a      	ldr	r2, [r7, #4]
    3ff8:	683b      	ldr	r3, [r7, #0]
    3ffa:	1ad3      	subs	r3, r2, r3
}
    3ffc:	0018      	movs	r0, r3
    3ffe:	46bd      	mov	sp, r7
    4000:	b002      	add	sp, #8
    4002:	bd80      	pop	{r7, pc}

00004004 <mu_port_time_precedes>:

bool mu_port_time_precedes(mu_port_time_t t1, mu_port_time_t t2) {
    4004:	b580      	push	{r7, lr}
    4006:	b082      	sub	sp, #8
    4008:	af00      	add	r7, sp, #0
    400a:	6078      	str	r0, [r7, #4]
    400c:	6039      	str	r1, [r7, #0]
  return mu_port_time_difference(t1, t2) > MAX_DURATION;
    400e:	683a      	ldr	r2, [r7, #0]
    4010:	687b      	ldr	r3, [r7, #4]
    4012:	0011      	movs	r1, r2
    4014:	0018      	movs	r0, r3
    4016:	4b04      	ldr	r3, [pc, #16]	; (4028 <mu_port_time_precedes+0x24>)
    4018:	4798      	blx	r3
    401a:	0003      	movs	r3, r0
    401c:	0fdb      	lsrs	r3, r3, #31
    401e:	b2db      	uxtb	r3, r3
}
    4020:	0018      	movs	r0, r3
    4022:	46bd      	mov	sp, r7
    4024:	b002      	add	sp, #8
    4026:	bd80      	pop	{r7, pc}
    4028:	00003fed 	.word	0x00003fed

0000402c <mu_port_time_ms_to_duration>:

bool mu_port_time_follows(mu_port_time_t t1, mu_port_time_t t2) {
  return mu_port_time_difference(t2, t1) > MAX_DURATION;
}

mu_port_time_dt mu_port_time_ms_to_duration(mu_port_time_ms_dt ms) {
    402c:	b580      	push	{r7, lr}
    402e:	b082      	sub	sp, #8
    4030:	af00      	add	r7, sp, #0
    4032:	6078      	str	r0, [r7, #4]
  return quo_rounded(ms * CONF_GCLK_RTC_FREQUENCY, 1000);
    4034:	687b      	ldr	r3, [r7, #4]
    4036:	03da      	lsls	r2, r3, #15
    4038:	23fa      	movs	r3, #250	; 0xfa
    403a:	009b      	lsls	r3, r3, #2
    403c:	0019      	movs	r1, r3
    403e:	0010      	movs	r0, r2
    4040:	4b03      	ldr	r3, [pc, #12]	; (4050 <mu_port_time_ms_to_duration+0x24>)
    4042:	4798      	blx	r3
    4044:	0003      	movs	r3, r0
}
    4046:	0018      	movs	r0, r3
    4048:	46bd      	mov	sp, r7
    404a:	b002      	add	sp, #8
    404c:	bd80      	pop	{r7, pc}
    404e:	46c0      	nop			; (mov r8, r8)
    4050:	00004529 	.word	0x00004529

00004054 <mu_port_time_duration_to_ms>:

mu_port_time_ms_dt mu_port_time_duration_to_ms(mu_port_time_dt dt) {
    4054:	b580      	push	{r7, lr}
    4056:	b082      	sub	sp, #8
    4058:	af00      	add	r7, sp, #0
    405a:	6078      	str	r0, [r7, #4]
  return quo_rounded(dt * 1000, CONF_GCLK_RTC_FREQUENCY);
    405c:	687b      	ldr	r3, [r7, #4]
    405e:	22fa      	movs	r2, #250	; 0xfa
    4060:	0092      	lsls	r2, r2, #2
    4062:	435a      	muls	r2, r3
    4064:	2380      	movs	r3, #128	; 0x80
    4066:	021b      	lsls	r3, r3, #8
    4068:	0019      	movs	r1, r3
    406a:	0010      	movs	r0, r2
    406c:	4b03      	ldr	r3, [pc, #12]	; (407c <mu_port_time_duration_to_ms+0x28>)
    406e:	4798      	blx	r3
    4070:	0003      	movs	r3, r0
}
    4072:	0018      	movs	r0, r3
    4074:	46bd      	mov	sp, r7
    4076:	b002      	add	sp, #8
    4078:	bd80      	pop	{r7, pc}
    407a:	46c0      	nop			; (mov r8, r8)
    407c:	00004529 	.word	0x00004529

00004080 <mu_port_rtc_now>:
}
#endif

// REAL TIME CLOCK

mu_port_time_t mu_port_rtc_now(void) {
    4080:	b580      	push	{r7, lr}
    4082:	af00      	add	r7, sp, #0
  return hri_rtcmode0_read_COUNT_COUNT_bf(CALENDAR_0.device.hw);
    4084:	4b04      	ldr	r3, [pc, #16]	; (4098 <mu_port_rtc_now+0x18>)
    4086:	681b      	ldr	r3, [r3, #0]
    4088:	0018      	movs	r0, r3
    408a:	4b04      	ldr	r3, [pc, #16]	; (409c <mu_port_rtc_now+0x1c>)
    408c:	4798      	blx	r3
    408e:	0003      	movs	r3, r0
}
    4090:	0018      	movs	r0, r3
    4092:	46bd      	mov	sp, r7
    4094:	bd80      	pop	{r7, pc}
    4096:	46c0      	nop			; (mov r8, r8)
    4098:	2000018c 	.word	0x2000018c
    409c:	00003d65 	.word	0x00003d65

000040a0 <mu_port_rtc_set_cb>:

/**
 * Register a callback to be called when rtc matches.
 */
void mu_port_rtc_set_cb(mu_port_callback_fn fn, void *arg) {
    40a0:	b580      	push	{r7, lr}
    40a2:	b082      	sub	sp, #8
    40a4:	af00      	add	r7, sp, #0
    40a6:	6078      	str	r0, [r7, #4]
    40a8:	6039      	str	r1, [r7, #0]
  if (fn) {
    40aa:	687b      	ldr	r3, [r7, #4]
    40ac:	2b00      	cmp	r3, #0
    40ae:	d006      	beq.n	40be <mu_port_rtc_set_cb+0x1e>
    s_port.rtc_cb = fn;
    40b0:	4b08      	ldr	r3, [pc, #32]	; (40d4 <mu_port_rtc_set_cb+0x34>)
    40b2:	687a      	ldr	r2, [r7, #4]
    40b4:	619a      	str	r2, [r3, #24]
    s_port.rtc_cb_arg = arg;
    40b6:	4b07      	ldr	r3, [pc, #28]	; (40d4 <mu_port_rtc_set_cb+0x34>)
    40b8:	683a      	ldr	r2, [r7, #0]
    40ba:	61da      	str	r2, [r3, #28]
  } else {
    s_port.rtc_cb = NULL;
    s_port.rtc_cb_arg = NULL;
  }
}
    40bc:	e005      	b.n	40ca <mu_port_rtc_set_cb+0x2a>
    s_port.rtc_cb = NULL;
    40be:	4b05      	ldr	r3, [pc, #20]	; (40d4 <mu_port_rtc_set_cb+0x34>)
    40c0:	2200      	movs	r2, #0
    40c2:	619a      	str	r2, [r3, #24]
    s_port.rtc_cb_arg = NULL;
    40c4:	4b03      	ldr	r3, [pc, #12]	; (40d4 <mu_port_rtc_set_cb+0x34>)
    40c6:	2200      	movs	r2, #0
    40c8:	61da      	str	r2, [r3, #28]
}
    40ca:	46c0      	nop			; (mov r8, r8)
    40cc:	46bd      	mov	sp, r7
    40ce:	b002      	add	sp, #8
    40d0:	bd80      	pop	{r7, pc}
    40d2:	46c0      	nop			; (mov r8, r8)
    40d4:	20000160 	.word	0x20000160

000040d8 <mu_port_rtc_alarm_at>:

void mu_port_rtc_alarm_at(mu_port_time_t at) {
    40d8:	b580      	push	{r7, lr}
    40da:	b082      	sub	sp, #8
    40dc:	af00      	add	r7, sp, #0
    40de:	6078      	str	r0, [r7, #4]
  _calendar_set_comp(&CALENDAR_0.device, at);
    40e0:	687a      	ldr	r2, [r7, #4]
    40e2:	4b08      	ldr	r3, [pc, #32]	; (4104 <mu_port_rtc_alarm_at+0x2c>)
    40e4:	0011      	movs	r1, r2
    40e6:	0018      	movs	r0, r3
    40e8:	4b07      	ldr	r3, [pc, #28]	; (4108 <mu_port_rtc_alarm_at+0x30>)
    40ea:	4798      	blx	r3
  // Particular to the SAMD21, hri_rtcmode0_write_COMP_COMP_bf() clears the
  // READREQ_RCONT bit, which prevents subsequent RTC reads from updating.
  // Restore it here.
  hri_rtcmode0_set_READREQ_RCONT_bit(RTC);
    40ec:	4b07      	ldr	r3, [pc, #28]	; (410c <mu_port_rtc_alarm_at+0x34>)
    40ee:	0018      	movs	r0, r3
    40f0:	4b07      	ldr	r3, [pc, #28]	; (4110 <mu_port_rtc_alarm_at+0x38>)
    40f2:	4798      	blx	r3
  hri_rtcmode0_set_READREQ_RREQ_bit(RTC);
    40f4:	4b05      	ldr	r3, [pc, #20]	; (410c <mu_port_rtc_alarm_at+0x34>)
    40f6:	0018      	movs	r0, r3
    40f8:	4b06      	ldr	r3, [pc, #24]	; (4114 <mu_port_rtc_alarm_at+0x3c>)
    40fa:	4798      	blx	r3
}
    40fc:	46c0      	nop			; (mov r8, r8)
    40fe:	46bd      	mov	sp, r7
    4100:	b002      	add	sp, #8
    4102:	bd80      	pop	{r7, pc}
    4104:	2000018c 	.word	0x2000018c
    4108:	00002965 	.word	0x00002965
    410c:	40001400 	.word	0x40001400
    4110:	00003d1d 	.word	0x00003d1d
    4114:	00003d41 	.word	0x00003d41

00004118 <mu_port_led_set>:

// LED

void mu_port_led_set(bool on) { gpio_set_pin_level(USER_LED_AL, !on); }
    4118:	b580      	push	{r7, lr}
    411a:	b082      	sub	sp, #8
    411c:	af00      	add	r7, sp, #0
    411e:	0002      	movs	r2, r0
    4120:	1dfb      	adds	r3, r7, #7
    4122:	701a      	strb	r2, [r3, #0]
    4124:	1dfb      	adds	r3, r7, #7
    4126:	781b      	ldrb	r3, [r3, #0]
    4128:	1e5a      	subs	r2, r3, #1
    412a:	4193      	sbcs	r3, r2
    412c:	b2db      	uxtb	r3, r3
    412e:	2201      	movs	r2, #1
    4130:	4053      	eors	r3, r2
    4132:	b2db      	uxtb	r3, r3
    4134:	1c1a      	adds	r2, r3, #0
    4136:	2301      	movs	r3, #1
    4138:	4013      	ands	r3, r2
    413a:	b2db      	uxtb	r3, r3
    413c:	0019      	movs	r1, r3
    413e:	203e      	movs	r0, #62	; 0x3e
    4140:	4b02      	ldr	r3, [pc, #8]	; (414c <mu_port_led_set+0x34>)
    4142:	4798      	blx	r3
    4144:	46c0      	nop			; (mov r8, r8)
    4146:	46bd      	mov	sp, r7
    4148:	b002      	add	sp, #8
    414a:	bd80      	pop	{r7, pc}
    414c:	00003ee9 	.word	0x00003ee9

00004150 <mu_port_led_get>:

bool mu_port_led_get(void) { return !gpio_get_pin_level(USER_LED_AL); }
    4150:	b580      	push	{r7, lr}
    4152:	af00      	add	r7, sp, #0
    4154:	203e      	movs	r0, #62	; 0x3e
    4156:	4b08      	ldr	r3, [pc, #32]	; (4178 <mu_port_led_get+0x28>)
    4158:	4798      	blx	r3
    415a:	0003      	movs	r3, r0
    415c:	1e5a      	subs	r2, r3, #1
    415e:	4193      	sbcs	r3, r2
    4160:	b2db      	uxtb	r3, r3
    4162:	2201      	movs	r2, #1
    4164:	4053      	eors	r3, r2
    4166:	b2db      	uxtb	r3, r3
    4168:	1c1a      	adds	r2, r3, #0
    416a:	2301      	movs	r3, #1
    416c:	4013      	ands	r3, r2
    416e:	b2db      	uxtb	r3, r3
    4170:	0018      	movs	r0, r3
    4172:	46bd      	mov	sp, r7
    4174:	bd80      	pop	{r7, pc}
    4176:	46c0      	nop			; (mov r8, r8)
    4178:	00003f29 	.word	0x00003f29

0000417c <mu_port_button_is_pressed>:

// BUTTON

bool mu_port_button_is_pressed(void) {
    417c:	b580      	push	{r7, lr}
    417e:	af00      	add	r7, sp, #0
  return !gpio_get_pin_level(USER_BUTTON_AL);
    4180:	200f      	movs	r0, #15
    4182:	4b08      	ldr	r3, [pc, #32]	; (41a4 <mu_port_button_is_pressed+0x28>)
    4184:	4798      	blx	r3
    4186:	0003      	movs	r3, r0
    4188:	1e5a      	subs	r2, r3, #1
    418a:	4193      	sbcs	r3, r2
    418c:	b2db      	uxtb	r3, r3
    418e:	2201      	movs	r2, #1
    4190:	4053      	eors	r3, r2
    4192:	b2db      	uxtb	r3, r3
    4194:	1c1a      	adds	r2, r3, #0
    4196:	2301      	movs	r3, #1
    4198:	4013      	ands	r3, r2
    419a:	b2db      	uxtb	r3, r3
}
    419c:	0018      	movs	r0, r3
    419e:	46bd      	mov	sp, r7
    41a0:	bd80      	pop	{r7, pc}
    41a2:	46c0      	nop			; (mov r8, r8)
    41a4:	00003f29 	.word	0x00003f29

000041a8 <mu_port_button_set_cb>:

void mu_port_button_set_cb(mu_port_callback_fn fn, void *arg) {
    41a8:	b580      	push	{r7, lr}
    41aa:	b082      	sub	sp, #8
    41ac:	af00      	add	r7, sp, #0
    41ae:	6078      	str	r0, [r7, #4]
    41b0:	6039      	str	r1, [r7, #0]
  if (fn) {
    41b2:	687b      	ldr	r3, [r7, #4]
    41b4:	2b00      	cmp	r3, #0
    41b6:	d006      	beq.n	41c6 <mu_port_button_set_cb+0x1e>
    s_port.button_cb = fn;
    41b8:	4b08      	ldr	r3, [pc, #32]	; (41dc <mu_port_button_set_cb+0x34>)
    41ba:	687a      	ldr	r2, [r7, #4]
    41bc:	601a      	str	r2, [r3, #0]
    s_port.button_cb_arg = arg;
    41be:	4b07      	ldr	r3, [pc, #28]	; (41dc <mu_port_button_set_cb+0x34>)
    41c0:	683a      	ldr	r2, [r7, #0]
    41c2:	605a      	str	r2, [r3, #4]
  } else {
    s_port.button_cb = NULL;
    s_port.button_cb_arg = NULL;
  }
}
    41c4:	e005      	b.n	41d2 <mu_port_button_set_cb+0x2a>
    s_port.button_cb = NULL;
    41c6:	4b05      	ldr	r3, [pc, #20]	; (41dc <mu_port_button_set_cb+0x34>)
    41c8:	2200      	movs	r2, #0
    41ca:	601a      	str	r2, [r3, #0]
    s_port.button_cb_arg = NULL;
    41cc:	4b03      	ldr	r3, [pc, #12]	; (41dc <mu_port_button_set_cb+0x34>)
    41ce:	2200      	movs	r2, #0
    41d0:	605a      	str	r2, [r3, #4]
}
    41d2:	46c0      	nop			; (mov r8, r8)
    41d4:	46bd      	mov	sp, r7
    41d6:	b002      	add	sp, #8
    41d8:	bd80      	pop	{r7, pc}
    41da:	46c0      	nop			; (mov r8, r8)
    41dc:	20000160 	.word	0x20000160

000041e0 <mu_port_serial_write>:

// SERIAL

void mu_port_serial_write(uint8_t byte) {
    41e0:	b580      	push	{r7, lr}
    41e2:	b082      	sub	sp, #8
    41e4:	af00      	add	r7, sp, #0
    41e6:	0002      	movs	r2, r0
    41e8:	1dfb      	adds	r3, r7, #7
    41ea:	701a      	strb	r2, [r3, #0]
  if (s_port.tx_cb) {
    41ec:	4b16      	ldr	r3, [pc, #88]	; (4248 <mu_port_serial_write+0x68>)
    41ee:	689b      	ldr	r3, [r3, #8]
    41f0:	2b00      	cmp	r3, #0
    41f2:	d015      	beq.n	4220 <mu_port_serial_write+0x40>
    // in async mode.  Enable the transmit interrupt to make that happen.
    // The character will be written in the interrupt routine.
    //
    // NOTE: _sercom_usart_interrupt_handler() will disable TX interrupts after
    // transmitting a byte, so they must be re-enabled before sending the next.
    while (s_tx_has_data) {
    41f4:	e000      	b.n	41f8 <mu_port_serial_write+0x18>
      asm("nop");
    41f6:	46c0      	nop			; (mov r8, r8)
    while (s_tx_has_data) {
    41f8:	4b14      	ldr	r3, [pc, #80]	; (424c <mu_port_serial_write+0x6c>)
    41fa:	781b      	ldrb	r3, [r3, #0]
    41fc:	b2db      	uxtb	r3, r3
    41fe:	2b00      	cmp	r3, #0
    4200:	d1f9      	bne.n	41f6 <mu_port_serial_write+0x16>
    }
    s_tx_data = byte;
    4202:	4b13      	ldr	r3, [pc, #76]	; (4250 <mu_port_serial_write+0x70>)
    4204:	1dfa      	adds	r2, r7, #7
    4206:	7812      	ldrb	r2, [r2, #0]
    4208:	701a      	strb	r2, [r3, #0]
    s_tx_has_data = true;
    420a:	4b10      	ldr	r3, [pc, #64]	; (424c <mu_port_serial_write+0x6c>)
    420c:	2201      	movs	r2, #1
    420e:	701a      	strb	r2, [r3, #0]
    _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_BYTE_SENT, true);
    4210:	4b10      	ldr	r3, [pc, #64]	; (4254 <mu_port_serial_write+0x74>)
    4212:	2201      	movs	r2, #1
    4214:	2100      	movs	r1, #0
    4216:	0018      	movs	r0, r3
    4218:	4b0f      	ldr	r3, [pc, #60]	; (4258 <mu_port_serial_write+0x78>)
    421a:	4798      	blx	r3
    while (!mu_port_serial_can_write()) {
      asm("nop");
    }
    _usart_async_write_byte(&USART_0.device, byte);
  }
}
    421c:	e010      	b.n	4240 <mu_port_serial_write+0x60>
      asm("nop");
    421e:	46c0      	nop			; (mov r8, r8)
    while (!mu_port_serial_can_write()) {
    4220:	4b0e      	ldr	r3, [pc, #56]	; (425c <mu_port_serial_write+0x7c>)
    4222:	4798      	blx	r3
    4224:	0003      	movs	r3, r0
    4226:	001a      	movs	r2, r3
    4228:	2301      	movs	r3, #1
    422a:	4053      	eors	r3, r2
    422c:	b2db      	uxtb	r3, r3
    422e:	2b00      	cmp	r3, #0
    4230:	d1f5      	bne.n	421e <mu_port_serial_write+0x3e>
    _usart_async_write_byte(&USART_0.device, byte);
    4232:	1dfb      	adds	r3, r7, #7
    4234:	781a      	ldrb	r2, [r3, #0]
    4236:	4b07      	ldr	r3, [pc, #28]	; (4254 <mu_port_serial_write+0x74>)
    4238:	0011      	movs	r1, r2
    423a:	0018      	movs	r0, r3
    423c:	4b08      	ldr	r3, [pc, #32]	; (4260 <mu_port_serial_write+0x80>)
    423e:	4798      	blx	r3
}
    4240:	46c0      	nop			; (mov r8, r8)
    4242:	46bd      	mov	sp, r7
    4244:	b002      	add	sp, #8
    4246:	bd80      	pop	{r7, pc}
    4248:	20000160 	.word	0x20000160
    424c:	20000181 	.word	0x20000181
    4250:	20000180 	.word	0x20000180
    4254:	200001b0 	.word	0x200001b0
    4258:	00002fad 	.word	0x00002fad
    425c:	00004265 	.word	0x00004265
    4260:	00002f21 	.word	0x00002f21

00004264 <mu_port_serial_can_write>:

bool mu_port_serial_can_write(void) {
    4264:	b580      	push	{r7, lr}
    4266:	af00      	add	r7, sp, #0
  // returns DRE bit
  return hri_sercomusart_get_interrupt_DRE_bit(USART_0.device.hw);
    4268:	4b04      	ldr	r3, [pc, #16]	; (427c <mu_port_serial_can_write+0x18>)
    426a:	6a1b      	ldr	r3, [r3, #32]
    426c:	0018      	movs	r0, r3
    426e:	4b04      	ldr	r3, [pc, #16]	; (4280 <mu_port_serial_can_write+0x1c>)
    4270:	4798      	blx	r3
    4272:	0003      	movs	r3, r0
  // return _usart_sync_is_ready_to_send(&USART_0.device);
}
    4274:	0018      	movs	r0, r3
    4276:	46bd      	mov	sp, r7
    4278:	bd80      	pop	{r7, pc}
    427a:	46c0      	nop			; (mov r8, r8)
    427c:	200001a8 	.word	0x200001a8
    4280:	00003dbd 	.word	0x00003dbd

00004284 <mu_port_serial_set_write_cb>:

void mu_port_serial_set_write_cb(mu_port_callback_fn fn, void *arg) {
    4284:	b580      	push	{r7, lr}
    4286:	b082      	sub	sp, #8
    4288:	af00      	add	r7, sp, #0
    428a:	6078      	str	r0, [r7, #4]
    428c:	6039      	str	r1, [r7, #0]
  if (fn) {
    428e:	687b      	ldr	r3, [r7, #4]
    4290:	2b00      	cmp	r3, #0
    4292:	d006      	beq.n	42a2 <mu_port_serial_set_write_cb+0x1e>
    s_port.tx_cb = fn;
    4294:	4b08      	ldr	r3, [pc, #32]	; (42b8 <mu_port_serial_set_write_cb+0x34>)
    4296:	687a      	ldr	r2, [r7, #4]
    4298:	609a      	str	r2, [r3, #8]
    s_port.tx_cb_arg = arg;
    429a:	4b07      	ldr	r3, [pc, #28]	; (42b8 <mu_port_serial_set_write_cb+0x34>)
    429c:	683a      	ldr	r2, [r7, #0]
    429e:	60da      	str	r2, [r3, #12]
  } else {
    s_port.tx_cb = NULL;
    s_port.tx_cb_arg = NULL;
  }
}
    42a0:	e005      	b.n	42ae <mu_port_serial_set_write_cb+0x2a>
    s_port.tx_cb = NULL;
    42a2:	4b05      	ldr	r3, [pc, #20]	; (42b8 <mu_port_serial_set_write_cb+0x34>)
    42a4:	2200      	movs	r2, #0
    42a6:	609a      	str	r2, [r3, #8]
    s_port.tx_cb_arg = NULL;
    42a8:	4b03      	ldr	r3, [pc, #12]	; (42b8 <mu_port_serial_set_write_cb+0x34>)
    42aa:	2200      	movs	r2, #0
    42ac:	60da      	str	r2, [r3, #12]
}
    42ae:	46c0      	nop			; (mov r8, r8)
    42b0:	46bd      	mov	sp, r7
    42b2:	b002      	add	sp, #8
    42b4:	bd80      	pop	{r7, pc}
    42b6:	46c0      	nop			; (mov r8, r8)
    42b8:	20000160 	.word	0x20000160

000042bc <mu_port_serial_read>:

bool mu_port_serial_write_in_progress(void) {
  return !hri_sercomusart_get_INTEN_TXC_bit(USART_0.device.hw);
}

uint8_t mu_port_serial_read(void) {
    42bc:	b580      	push	{r7, lr}
    42be:	af00      	add	r7, sp, #0
  // RXC interrupts must be enabled before mu_port_serial_can_read() goes true.
  _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_RX_DONE, true);
    42c0:	4b0c      	ldr	r3, [pc, #48]	; (42f4 <mu_port_serial_read+0x38>)
    42c2:	2201      	movs	r2, #1
    42c4:	2101      	movs	r1, #1
    42c6:	0018      	movs	r0, r3
    42c8:	4b0b      	ldr	r3, [pc, #44]	; (42f8 <mu_port_serial_read+0x3c>)
    42ca:	4798      	blx	r3
  while (!mu_port_serial_can_read()) {
    42cc:	e000      	b.n	42d0 <mu_port_serial_read+0x14>
    asm("nop");
    42ce:	46c0      	nop			; (mov r8, r8)
  while (!mu_port_serial_can_read()) {
    42d0:	4b0a      	ldr	r3, [pc, #40]	; (42fc <mu_port_serial_read+0x40>)
    42d2:	4798      	blx	r3
    42d4:	0003      	movs	r3, r0
    42d6:	001a      	movs	r2, r3
    42d8:	2301      	movs	r3, #1
    42da:	4053      	eors	r3, r2
    42dc:	b2db      	uxtb	r3, r3
    42de:	2b00      	cmp	r3, #0
    42e0:	d1f5      	bne.n	42ce <mu_port_serial_read+0x12>
  }
  // rx_has_data is set in the rx_done_cb handler
  s_rx_has_data = false;       // clear the virtual RXD bit
    42e2:	4b07      	ldr	r3, [pc, #28]	; (4300 <mu_port_serial_read+0x44>)
    42e4:	2200      	movs	r2, #0
    42e6:	701a      	strb	r2, [r3, #0]
  return s_rx_data;
    42e8:	4b06      	ldr	r3, [pc, #24]	; (4304 <mu_port_serial_read+0x48>)
    42ea:	781b      	ldrb	r3, [r3, #0]
    42ec:	b2db      	uxtb	r3, r3
}
    42ee:	0018      	movs	r0, r3
    42f0:	46bd      	mov	sp, r7
    42f2:	bd80      	pop	{r7, pc}
    42f4:	200001b0 	.word	0x200001b0
    42f8:	00002fad 	.word	0x00002fad
    42fc:	00004309 	.word	0x00004309
    4300:	20000183 	.word	0x20000183
    4304:	20000182 	.word	0x20000182

00004308 <mu_port_serial_can_read>:

bool mu_port_serial_can_read(void) {
    4308:	b580      	push	{r7, lr}
    430a:	af00      	add	r7, sp, #0
  // Returns the "virtual RXD" bit, set in the rx_done_cb handler
  return s_rx_has_data;
    430c:	4b02      	ldr	r3, [pc, #8]	; (4318 <mu_port_serial_can_read+0x10>)
    430e:	781b      	ldrb	r3, [r3, #0]
    4310:	b2db      	uxtb	r3, r3
}
    4312:	0018      	movs	r0, r3
    4314:	46bd      	mov	sp, r7
    4316:	bd80      	pop	{r7, pc}
    4318:	20000183 	.word	0x20000183

0000431c <mu_port_serial_set_read_cb>:

void mu_port_serial_set_read_cb(mu_port_callback_fn fn, void *arg) {
    431c:	b580      	push	{r7, lr}
    431e:	b082      	sub	sp, #8
    4320:	af00      	add	r7, sp, #0
    4322:	6078      	str	r0, [r7, #4]
    4324:	6039      	str	r1, [r7, #0]
  if (fn) {
    4326:	687b      	ldr	r3, [r7, #4]
    4328:	2b00      	cmp	r3, #0
    432a:	d006      	beq.n	433a <mu_port_serial_set_read_cb+0x1e>
    s_port.rx_cb = fn;
    432c:	4b08      	ldr	r3, [pc, #32]	; (4350 <mu_port_serial_set_read_cb+0x34>)
    432e:	687a      	ldr	r2, [r7, #4]
    4330:	611a      	str	r2, [r3, #16]
    s_port.rx_cb_arg = arg;
    4332:	4b07      	ldr	r3, [pc, #28]	; (4350 <mu_port_serial_set_read_cb+0x34>)
    4334:	683a      	ldr	r2, [r7, #0]
    4336:	615a      	str	r2, [r3, #20]
  } else {
    s_port.rx_cb = NULL;
    s_port.rx_cb_arg = NULL;
  }
}
    4338:	e005      	b.n	4346 <mu_port_serial_set_read_cb+0x2a>
    s_port.rx_cb = NULL;
    433a:	4b05      	ldr	r3, [pc, #20]	; (4350 <mu_port_serial_set_read_cb+0x34>)
    433c:	2200      	movs	r2, #0
    433e:	611a      	str	r2, [r3, #16]
    s_port.rx_cb_arg = NULL;
    4340:	4b03      	ldr	r3, [pc, #12]	; (4350 <mu_port_serial_set_read_cb+0x34>)
    4342:	2200      	movs	r2, #0
    4344:	615a      	str	r2, [r3, #20]
}
    4346:	46c0      	nop			; (mov r8, r8)
    4348:	46bd      	mov	sp, r7
    434a:	b002      	add	sp, #8
    434c:	bd80      	pop	{r7, pc}
    434e:	46c0      	nop			; (mov r8, r8)
    4350:	20000160 	.word	0x20000160

00004354 <mu_port_sleep_until>:

/**
 * @brief Put the processor into low-power mode until time t arrives, or an
 * external event wakes the processor.
 */
void mu_port_sleep_until(mu_port_time_t then) {
    4354:	b580      	push	{r7, lr}
    4356:	b084      	sub	sp, #16
    4358:	af00      	add	r7, sp, #0
    435a:	6078      	str	r0, [r7, #4]
  mu_port_time_t now = mu_port_rtc_now();
    435c:	4b0b      	ldr	r3, [pc, #44]	; (438c <mu_port_sleep_until+0x38>)
    435e:	4798      	blx	r3
    4360:	0003      	movs	r3, r0
    4362:	60fb      	str	r3, [r7, #12]
  if (mu_port_time_difference(then, now) > MIN_SLEEP_DURATION) {
    4364:	68fa      	ldr	r2, [r7, #12]
    4366:	687b      	ldr	r3, [r7, #4]
    4368:	0011      	movs	r1, r2
    436a:	0018      	movs	r0, r3
    436c:	4b08      	ldr	r3, [pc, #32]	; (4390 <mu_port_sleep_until+0x3c>)
    436e:	4798      	blx	r3
    4370:	0003      	movs	r3, r0
    4372:	2b20      	cmp	r3, #32
    4374:	dd05      	ble.n	4382 <mu_port_sleep_until+0x2e>
    mu_port_rtc_alarm_at(then);
    4376:	687b      	ldr	r3, [r7, #4]
    4378:	0018      	movs	r0, r3
    437a:	4b06      	ldr	r3, [pc, #24]	; (4394 <mu_port_sleep_until+0x40>)
    437c:	4798      	blx	r3
    go_to_sleep();
    437e:	4b06      	ldr	r3, [pc, #24]	; (4398 <mu_port_sleep_until+0x44>)
    4380:	4798      	blx	r3
  }
}
    4382:	46c0      	nop			; (mov r8, r8)
    4384:	46bd      	mov	sp, r7
    4386:	b004      	add	sp, #16
    4388:	bd80      	pop	{r7, pc}
    438a:	46c0      	nop			; (mov r8, r8)
    438c:	00004081 	.word	0x00004081
    4390:	00003fed 	.word	0x00003fed
    4394:	000040d9 	.word	0x000040d9
    4398:	00004515 	.word	0x00004515

0000439c <mu_port_sleep>:

/**
 * @brief Put the processor into low-power mode until an external event wakes
 * the processor.
 */
void mu_port_sleep(void) { go_to_sleep(); }
    439c:	b580      	push	{r7, lr}
    439e:	af00      	add	r7, sp, #0
    43a0:	4b02      	ldr	r3, [pc, #8]	; (43ac <mu_port_sleep+0x10>)
    43a2:	4798      	blx	r3
    43a4:	46c0      	nop			; (mov r8, r8)
    43a6:	46bd      	mov	sp, r7
    43a8:	bd80      	pop	{r7, pc}
    43aa:	46c0      	nop			; (mov r8, r8)
    43ac:	00004515 	.word	0x00004515

000043b0 <button_cb_trampoline>:

// =============================================================================
// private (local) code

static void button_cb_trampoline(void) {
    43b0:	b580      	push	{r7, lr}
    43b2:	af00      	add	r7, sp, #0
  if (s_port.button_cb) {
    43b4:	4b06      	ldr	r3, [pc, #24]	; (43d0 <button_cb_trampoline+0x20>)
    43b6:	681b      	ldr	r3, [r3, #0]
    43b8:	2b00      	cmp	r3, #0
    43ba:	d005      	beq.n	43c8 <button_cb_trampoline+0x18>
    s_port.button_cb(s_port.button_cb_arg);
    43bc:	4b04      	ldr	r3, [pc, #16]	; (43d0 <button_cb_trampoline+0x20>)
    43be:	681a      	ldr	r2, [r3, #0]
    43c0:	4b03      	ldr	r3, [pc, #12]	; (43d0 <button_cb_trampoline+0x20>)
    43c2:	685b      	ldr	r3, [r3, #4]
    43c4:	0018      	movs	r0, r3
    43c6:	4790      	blx	r2
  }
}
    43c8:	46c0      	nop			; (mov r8, r8)
    43ca:	46bd      	mov	sp, r7
    43cc:	bd80      	pop	{r7, pc}
    43ce:	46c0      	nop			; (mov r8, r8)
    43d0:	20000160 	.word	0x20000160

000043d4 <customize_usart_driver>:

/**
 * Replace the standard ASF4 USART callbacks with specialized versions.
 */
static void customize_usart_driver(void) {
    43d4:	b580      	push	{r7, lr}
    43d6:	af00      	add	r7, sp, #0
  USART_0.device.usart_cb.tx_byte_sent = tx_byte_sent;
    43d8:	4b09      	ldr	r3, [pc, #36]	; (4400 <customize_usart_driver+0x2c>)
    43da:	4a0a      	ldr	r2, [pc, #40]	; (4404 <customize_usart_driver+0x30>)
    43dc:	609a      	str	r2, [r3, #8]
  USART_0.device.usart_cb.rx_done_cb = rx_done_cb;
    43de:	4b08      	ldr	r3, [pc, #32]	; (4400 <customize_usart_driver+0x2c>)
    43e0:	4a09      	ldr	r2, [pc, #36]	; (4408 <customize_usart_driver+0x34>)
    43e2:	60da      	str	r2, [r3, #12]
  USART_0.device.usart_cb.tx_done_cb = tx_done_cb;
    43e4:	4b06      	ldr	r3, [pc, #24]	; (4400 <customize_usart_driver+0x2c>)
    43e6:	4a09      	ldr	r2, [pc, #36]	; (440c <customize_usart_driver+0x38>)
    43e8:	611a      	str	r2, [r3, #16]
  USART_0.device.usart_cb.error_cb = error_cb;
    43ea:	4b05      	ldr	r3, [pc, #20]	; (4400 <customize_usart_driver+0x2c>)
    43ec:	4a08      	ldr	r2, [pc, #32]	; (4410 <customize_usart_driver+0x3c>)
    43ee:	615a      	str	r2, [r3, #20]
  // enable start-of-frame detection
  hri_sercomusart_set_CTRLB_SFDE_bit(USART_0.device.hw);
    43f0:	4b03      	ldr	r3, [pc, #12]	; (4400 <customize_usart_driver+0x2c>)
    43f2:	6a1b      	ldr	r3, [r3, #32]
    43f4:	0018      	movs	r0, r3
    43f6:	4b07      	ldr	r3, [pc, #28]	; (4414 <customize_usart_driver+0x40>)
    43f8:	4798      	blx	r3
}
    43fa:	46c0      	nop			; (mov r8, r8)
    43fc:	46bd      	mov	sp, r7
    43fe:	bd80      	pop	{r7, pc}
    4400:	200001a8 	.word	0x200001a8
    4404:	00004419 	.word	0x00004419
    4408:	00004471 	.word	0x00004471
    440c:	000044c9 	.word	0x000044c9
    4410:	000044db 	.word	0x000044db
    4414:	00003de1 	.word	0x00003de1

00004418 <tx_byte_sent>:
 // 	} else {
 // 		_usart_async_enable_tx_done_irq(&descr->device);
 // 	}
 // }
 */
static void tx_byte_sent(struct _usart_async_device *device) {
    4418:	b580      	push	{r7, lr}
    441a:	b082      	sub	sp, #8
    441c:	af00      	add	r7, sp, #0
    441e:	6078      	str	r0, [r7, #4]
  if (s_tx_has_data) {
    4420:	4b0e      	ldr	r3, [pc, #56]	; (445c <tx_byte_sent+0x44>)
    4422:	781b      	ldrb	r3, [r3, #0]
    4424:	b2db      	uxtb	r3, r3
    4426:	2b00      	cmp	r3, #0
    4428:	d00a      	beq.n	4440 <tx_byte_sent+0x28>
    _usart_async_write_byte(&USART_0.device, s_tx_data);
    442a:	4b0d      	ldr	r3, [pc, #52]	; (4460 <tx_byte_sent+0x48>)
    442c:	781b      	ldrb	r3, [r3, #0]
    442e:	b2da      	uxtb	r2, r3
    4430:	4b0c      	ldr	r3, [pc, #48]	; (4464 <tx_byte_sent+0x4c>)
    4432:	0011      	movs	r1, r2
    4434:	0018      	movs	r0, r3
    4436:	4b0c      	ldr	r3, [pc, #48]	; (4468 <tx_byte_sent+0x50>)
    4438:	4798      	blx	r3
    s_tx_has_data = false;
    443a:	4b08      	ldr	r3, [pc, #32]	; (445c <tx_byte_sent+0x44>)
    443c:	2200      	movs	r2, #0
    443e:	701a      	strb	r2, [r3, #0]
  }

  // notify user callback if set
  if (s_port.tx_cb) {
    4440:	4b0a      	ldr	r3, [pc, #40]	; (446c <tx_byte_sent+0x54>)
    4442:	689b      	ldr	r3, [r3, #8]
    4444:	2b00      	cmp	r3, #0
    4446:	d005      	beq.n	4454 <tx_byte_sent+0x3c>
    s_port.tx_cb(s_port.tx_cb_arg);
    4448:	4b08      	ldr	r3, [pc, #32]	; (446c <tx_byte_sent+0x54>)
    444a:	689a      	ldr	r2, [r3, #8]
    444c:	4b07      	ldr	r3, [pc, #28]	; (446c <tx_byte_sent+0x54>)
    444e:	68db      	ldr	r3, [r3, #12]
    4450:	0018      	movs	r0, r3
    4452:	4790      	blx	r2
  }
}
    4454:	46c0      	nop			; (mov r8, r8)
    4456:	46bd      	mov	sp, r7
    4458:	b002      	add	sp, #8
    445a:	bd80      	pop	{r7, pc}
    445c:	20000181 	.word	0x20000181
    4460:	20000180 	.word	0x20000180
    4464:	200001b0 	.word	0x200001b0
    4468:	00002f21 	.word	0x00002f21
    446c:	20000160 	.word	0x20000160

00004470 <rx_done_cb>:
 // 	if (descr->usart_cb.rx_done) {
 // 		descr->usart_cb.rx_done(descr);
 // 	}
 // }
 */
static void rx_done_cb(struct _usart_async_device *device, uint8_t data) {
    4470:	b580      	push	{r7, lr}
    4472:	b082      	sub	sp, #8
    4474:	af00      	add	r7, sp, #0
    4476:	6078      	str	r0, [r7, #4]
    4478:	000a      	movs	r2, r1
    447a:	1cfb      	adds	r3, r7, #3
    447c:	701a      	strb	r2, [r3, #0]
  // capture the data (since the _sercom_usart_interrupt_handler has already
  // read the data and cleared the RXD bit)
  s_rx_data = data;
    447e:	4b0d      	ldr	r3, [pc, #52]	; (44b4 <rx_done_cb+0x44>)
    4480:	1cfa      	adds	r2, r7, #3
    4482:	7812      	ldrb	r2, [r2, #0]
    4484:	701a      	strb	r2, [r3, #0]
  s_rx_has_data = true;
    4486:	4b0c      	ldr	r3, [pc, #48]	; (44b8 <rx_done_cb+0x48>)
    4488:	2201      	movs	r2, #1
    448a:	701a      	strb	r2, [r3, #0]

  // clear the start of frame flag so mu_port_serial_read_in_progress() will
  // return false.
  hri_sercomusart_clear_INTFLAG_RXS_bit(USART_0.device.hw);
    448c:	4b0b      	ldr	r3, [pc, #44]	; (44bc <rx_done_cb+0x4c>)
    448e:	6a1b      	ldr	r3, [r3, #32]
    4490:	0018      	movs	r0, r3
    4492:	4b0b      	ldr	r3, [pc, #44]	; (44c0 <rx_done_cb+0x50>)
    4494:	4798      	blx	r3

  // notify user callback if set
  if (s_port.rx_cb) {
    4496:	4b0b      	ldr	r3, [pc, #44]	; (44c4 <rx_done_cb+0x54>)
    4498:	691b      	ldr	r3, [r3, #16]
    449a:	2b00      	cmp	r3, #0
    449c:	d005      	beq.n	44aa <rx_done_cb+0x3a>
    s_port.rx_cb(s_port.rx_cb_arg);
    449e:	4b09      	ldr	r3, [pc, #36]	; (44c4 <rx_done_cb+0x54>)
    44a0:	691a      	ldr	r2, [r3, #16]
    44a2:	4b08      	ldr	r3, [pc, #32]	; (44c4 <rx_done_cb+0x54>)
    44a4:	695b      	ldr	r3, [r3, #20]
    44a6:	0018      	movs	r0, r3
    44a8:	4790      	blx	r2
  }
}
    44aa:	46c0      	nop			; (mov r8, r8)
    44ac:	46bd      	mov	sp, r7
    44ae:	b002      	add	sp, #8
    44b0:	bd80      	pop	{r7, pc}
    44b2:	46c0      	nop			; (mov r8, r8)
    44b4:	20000182 	.word	0x20000182
    44b8:	20000183 	.word	0x20000183
    44bc:	200001a8 	.word	0x200001a8
    44c0:	00003da7 	.word	0x00003da7
    44c4:	20000160 	.word	0x20000160

000044c8 <tx_done_cb>:
 // 	if (descr->usart_cb.tx_done) {
 // 		descr->usart_cb.tx_done(descr);
 // 	}
 // }
 */
static void tx_done_cb(struct _usart_async_device *device) {
    44c8:	b580      	push	{r7, lr}
    44ca:	b082      	sub	sp, #8
    44cc:	af00      	add	r7, sp, #0
    44ce:	6078      	str	r0, [r7, #4]
  // No action.  In the future, we might use this for an async version of
  // mu_port_serial_write_in_progress().
  asm("nop");
    44d0:	46c0      	nop			; (mov r8, r8)
}
    44d2:	46c0      	nop			; (mov r8, r8)
    44d4:	46bd      	mov	sp, r7
    44d6:	b002      	add	sp, #8
    44d8:	bd80      	pop	{r7, pc}

000044da <error_cb>:
 // 	if (descr->usart_cb.error) {
 // 		descr->usart_cb.error(descr);
 // 	}
 // }
 */
static void error_cb(struct _usart_async_device *device) {
    44da:	b580      	push	{r7, lr}
    44dc:	b082      	sub	sp, #8
    44de:	af00      	add	r7, sp, #0
    44e0:	6078      	str	r0, [r7, #4]
  asm("nop");
    44e2:	46c0      	nop			; (mov r8, r8)
}
    44e4:	46c0      	nop			; (mov r8, r8)
    44e6:	46bd      	mov	sp, r7
    44e8:	b002      	add	sp, #8
    44ea:	bd80      	pop	{r7, pc}

000044ec <rtc_cb_trampoline>:

static void rtc_cb_trampoline(struct calendar_dev *const dev) {
    44ec:	b580      	push	{r7, lr}
    44ee:	b082      	sub	sp, #8
    44f0:	af00      	add	r7, sp, #0
    44f2:	6078      	str	r0, [r7, #4]
  // Arrive here when the RTC count register matches the RTC compare register.
  // Even if the user hasn't registered a callback, this will wake the processor
  // from sleep...
  if (s_port.rtc_cb) {
    44f4:	4b06      	ldr	r3, [pc, #24]	; (4510 <rtc_cb_trampoline+0x24>)
    44f6:	699b      	ldr	r3, [r3, #24]
    44f8:	2b00      	cmp	r3, #0
    44fa:	d005      	beq.n	4508 <rtc_cb_trampoline+0x1c>
    s_port.rtc_cb(s_port.rtc_cb_arg);
    44fc:	4b04      	ldr	r3, [pc, #16]	; (4510 <rtc_cb_trampoline+0x24>)
    44fe:	699a      	ldr	r2, [r3, #24]
    4500:	4b03      	ldr	r3, [pc, #12]	; (4510 <rtc_cb_trampoline+0x24>)
    4502:	69db      	ldr	r3, [r3, #28]
    4504:	0018      	movs	r0, r3
    4506:	4790      	blx	r2
  }
}
    4508:	46c0      	nop			; (mov r8, r8)
    450a:	46bd      	mov	sp, r7
    450c:	b002      	add	sp, #8
    450e:	bd80      	pop	{r7, pc}
    4510:	20000160 	.word	0x20000160

00004514 <go_to_sleep>:

static void go_to_sleep(void) {
    4514:	b580      	push	{r7, lr}
    4516:	af00      	add	r7, sp, #0
  sleep(3); // in hal_sleep
    4518:	2003      	movs	r0, #3
    451a:	4b02      	ldr	r3, [pc, #8]	; (4524 <go_to_sleep+0x10>)
    451c:	4798      	blx	r3
}
    451e:	46c0      	nop			; (mov r8, r8)
    4520:	46bd      	mov	sp, r7
    4522:	bd80      	pop	{r7, pc}
    4524:	00001681 	.word	0x00001681

00004528 <quo_rounded>:

// See https://stackoverflow.com/a/18067292/558639
//
static int quo_rounded(int x, int y) {
    4528:	b580      	push	{r7, lr}
    452a:	b082      	sub	sp, #8
    452c:	af00      	add	r7, sp, #0
    452e:	6078      	str	r0, [r7, #4]
    4530:	6039      	str	r1, [r7, #0]
  //   (y < 0) is false (zero) if x is non-negative
  //   (x < 0) ^ (y < 0) is true if x and y have opposite signs
  //   x/y would be the quotient, but it is truncated towards zero.  To round:
  //   (x + y/2)/y is the rounded quotient when x and y have the same sign
  //   (x - y/2)/y is the rounded quotient when x and y have opposite signs
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
    4532:	687b      	ldr	r3, [r7, #4]
    4534:	0fdb      	lsrs	r3, r3, #31
    4536:	b2da      	uxtb	r2, r3
    4538:	683b      	ldr	r3, [r7, #0]
    453a:	0fdb      	lsrs	r3, r3, #31
    453c:	b2db      	uxtb	r3, r3
    453e:	4053      	eors	r3, r2
    4540:	b2db      	uxtb	r3, r3
    4542:	2b00      	cmp	r3, #0
    4544:	d00e      	beq.n	4564 <quo_rounded+0x3c>
    4546:	683b      	ldr	r3, [r7, #0]
    4548:	2b00      	cmp	r3, #0
    454a:	da00      	bge.n	454e <quo_rounded+0x26>
    454c:	3301      	adds	r3, #1
    454e:	105b      	asrs	r3, r3, #1
    4550:	425b      	negs	r3, r3
    4552:	001a      	movs	r2, r3
    4554:	687b      	ldr	r3, [r7, #4]
    4556:	18d2      	adds	r2, r2, r3
    4558:	4b0b      	ldr	r3, [pc, #44]	; (4588 <quo_rounded+0x60>)
    455a:	6839      	ldr	r1, [r7, #0]
    455c:	0010      	movs	r0, r2
    455e:	4798      	blx	r3
    4560:	0003      	movs	r3, r0
    4562:	e00c      	b.n	457e <quo_rounded+0x56>
    4564:	683b      	ldr	r3, [r7, #0]
    4566:	2b00      	cmp	r3, #0
    4568:	da00      	bge.n	456c <quo_rounded+0x44>
    456a:	3301      	adds	r3, #1
    456c:	105b      	asrs	r3, r3, #1
    456e:	001a      	movs	r2, r3
    4570:	687b      	ldr	r3, [r7, #4]
    4572:	18d2      	adds	r2, r2, r3
    4574:	4b04      	ldr	r3, [pc, #16]	; (4588 <quo_rounded+0x60>)
    4576:	6839      	ldr	r1, [r7, #0]
    4578:	0010      	movs	r0, r2
    457a:	4798      	blx	r3
    457c:	0003      	movs	r3, r0
}
    457e:	0018      	movs	r0, r3
    4580:	46bd      	mov	sp, r7
    4582:	b002      	add	sp, #8
    4584:	bd80      	pop	{r7, pc}
    4586:	46c0      	nop			; (mov r8, r8)
    4588:	000046a1 	.word	0x000046a1

0000458c <__udivsi3>:
    458c:	2200      	movs	r2, #0
    458e:	0843      	lsrs	r3, r0, #1
    4590:	428b      	cmp	r3, r1
    4592:	d374      	bcc.n	467e <__udivsi3+0xf2>
    4594:	0903      	lsrs	r3, r0, #4
    4596:	428b      	cmp	r3, r1
    4598:	d35f      	bcc.n	465a <__udivsi3+0xce>
    459a:	0a03      	lsrs	r3, r0, #8
    459c:	428b      	cmp	r3, r1
    459e:	d344      	bcc.n	462a <__udivsi3+0x9e>
    45a0:	0b03      	lsrs	r3, r0, #12
    45a2:	428b      	cmp	r3, r1
    45a4:	d328      	bcc.n	45f8 <__udivsi3+0x6c>
    45a6:	0c03      	lsrs	r3, r0, #16
    45a8:	428b      	cmp	r3, r1
    45aa:	d30d      	bcc.n	45c8 <__udivsi3+0x3c>
    45ac:	22ff      	movs	r2, #255	; 0xff
    45ae:	0209      	lsls	r1, r1, #8
    45b0:	ba12      	rev	r2, r2
    45b2:	0c03      	lsrs	r3, r0, #16
    45b4:	428b      	cmp	r3, r1
    45b6:	d302      	bcc.n	45be <__udivsi3+0x32>
    45b8:	1212      	asrs	r2, r2, #8
    45ba:	0209      	lsls	r1, r1, #8
    45bc:	d065      	beq.n	468a <__udivsi3+0xfe>
    45be:	0b03      	lsrs	r3, r0, #12
    45c0:	428b      	cmp	r3, r1
    45c2:	d319      	bcc.n	45f8 <__udivsi3+0x6c>
    45c4:	e000      	b.n	45c8 <__udivsi3+0x3c>
    45c6:	0a09      	lsrs	r1, r1, #8
    45c8:	0bc3      	lsrs	r3, r0, #15
    45ca:	428b      	cmp	r3, r1
    45cc:	d301      	bcc.n	45d2 <__udivsi3+0x46>
    45ce:	03cb      	lsls	r3, r1, #15
    45d0:	1ac0      	subs	r0, r0, r3
    45d2:	4152      	adcs	r2, r2
    45d4:	0b83      	lsrs	r3, r0, #14
    45d6:	428b      	cmp	r3, r1
    45d8:	d301      	bcc.n	45de <__udivsi3+0x52>
    45da:	038b      	lsls	r3, r1, #14
    45dc:	1ac0      	subs	r0, r0, r3
    45de:	4152      	adcs	r2, r2
    45e0:	0b43      	lsrs	r3, r0, #13
    45e2:	428b      	cmp	r3, r1
    45e4:	d301      	bcc.n	45ea <__udivsi3+0x5e>
    45e6:	034b      	lsls	r3, r1, #13
    45e8:	1ac0      	subs	r0, r0, r3
    45ea:	4152      	adcs	r2, r2
    45ec:	0b03      	lsrs	r3, r0, #12
    45ee:	428b      	cmp	r3, r1
    45f0:	d301      	bcc.n	45f6 <__udivsi3+0x6a>
    45f2:	030b      	lsls	r3, r1, #12
    45f4:	1ac0      	subs	r0, r0, r3
    45f6:	4152      	adcs	r2, r2
    45f8:	0ac3      	lsrs	r3, r0, #11
    45fa:	428b      	cmp	r3, r1
    45fc:	d301      	bcc.n	4602 <__udivsi3+0x76>
    45fe:	02cb      	lsls	r3, r1, #11
    4600:	1ac0      	subs	r0, r0, r3
    4602:	4152      	adcs	r2, r2
    4604:	0a83      	lsrs	r3, r0, #10
    4606:	428b      	cmp	r3, r1
    4608:	d301      	bcc.n	460e <__udivsi3+0x82>
    460a:	028b      	lsls	r3, r1, #10
    460c:	1ac0      	subs	r0, r0, r3
    460e:	4152      	adcs	r2, r2
    4610:	0a43      	lsrs	r3, r0, #9
    4612:	428b      	cmp	r3, r1
    4614:	d301      	bcc.n	461a <__udivsi3+0x8e>
    4616:	024b      	lsls	r3, r1, #9
    4618:	1ac0      	subs	r0, r0, r3
    461a:	4152      	adcs	r2, r2
    461c:	0a03      	lsrs	r3, r0, #8
    461e:	428b      	cmp	r3, r1
    4620:	d301      	bcc.n	4626 <__udivsi3+0x9a>
    4622:	020b      	lsls	r3, r1, #8
    4624:	1ac0      	subs	r0, r0, r3
    4626:	4152      	adcs	r2, r2
    4628:	d2cd      	bcs.n	45c6 <__udivsi3+0x3a>
    462a:	09c3      	lsrs	r3, r0, #7
    462c:	428b      	cmp	r3, r1
    462e:	d301      	bcc.n	4634 <__udivsi3+0xa8>
    4630:	01cb      	lsls	r3, r1, #7
    4632:	1ac0      	subs	r0, r0, r3
    4634:	4152      	adcs	r2, r2
    4636:	0983      	lsrs	r3, r0, #6
    4638:	428b      	cmp	r3, r1
    463a:	d301      	bcc.n	4640 <__udivsi3+0xb4>
    463c:	018b      	lsls	r3, r1, #6
    463e:	1ac0      	subs	r0, r0, r3
    4640:	4152      	adcs	r2, r2
    4642:	0943      	lsrs	r3, r0, #5
    4644:	428b      	cmp	r3, r1
    4646:	d301      	bcc.n	464c <__udivsi3+0xc0>
    4648:	014b      	lsls	r3, r1, #5
    464a:	1ac0      	subs	r0, r0, r3
    464c:	4152      	adcs	r2, r2
    464e:	0903      	lsrs	r3, r0, #4
    4650:	428b      	cmp	r3, r1
    4652:	d301      	bcc.n	4658 <__udivsi3+0xcc>
    4654:	010b      	lsls	r3, r1, #4
    4656:	1ac0      	subs	r0, r0, r3
    4658:	4152      	adcs	r2, r2
    465a:	08c3      	lsrs	r3, r0, #3
    465c:	428b      	cmp	r3, r1
    465e:	d301      	bcc.n	4664 <__udivsi3+0xd8>
    4660:	00cb      	lsls	r3, r1, #3
    4662:	1ac0      	subs	r0, r0, r3
    4664:	4152      	adcs	r2, r2
    4666:	0883      	lsrs	r3, r0, #2
    4668:	428b      	cmp	r3, r1
    466a:	d301      	bcc.n	4670 <__udivsi3+0xe4>
    466c:	008b      	lsls	r3, r1, #2
    466e:	1ac0      	subs	r0, r0, r3
    4670:	4152      	adcs	r2, r2
    4672:	0843      	lsrs	r3, r0, #1
    4674:	428b      	cmp	r3, r1
    4676:	d301      	bcc.n	467c <__udivsi3+0xf0>
    4678:	004b      	lsls	r3, r1, #1
    467a:	1ac0      	subs	r0, r0, r3
    467c:	4152      	adcs	r2, r2
    467e:	1a41      	subs	r1, r0, r1
    4680:	d200      	bcs.n	4684 <__udivsi3+0xf8>
    4682:	4601      	mov	r1, r0
    4684:	4152      	adcs	r2, r2
    4686:	4610      	mov	r0, r2
    4688:	4770      	bx	lr
    468a:	e7ff      	b.n	468c <__udivsi3+0x100>
    468c:	b501      	push	{r0, lr}
    468e:	2000      	movs	r0, #0
    4690:	f000 f8f0 	bl	4874 <__aeabi_idiv0>
    4694:	bd02      	pop	{r1, pc}
    4696:	46c0      	nop			; (mov r8, r8)

00004698 <__aeabi_uidivmod>:
    4698:	2900      	cmp	r1, #0
    469a:	d0f7      	beq.n	468c <__udivsi3+0x100>
    469c:	e776      	b.n	458c <__udivsi3>
    469e:	4770      	bx	lr

000046a0 <__divsi3>:
    46a0:	4603      	mov	r3, r0
    46a2:	430b      	orrs	r3, r1
    46a4:	d47f      	bmi.n	47a6 <__divsi3+0x106>
    46a6:	2200      	movs	r2, #0
    46a8:	0843      	lsrs	r3, r0, #1
    46aa:	428b      	cmp	r3, r1
    46ac:	d374      	bcc.n	4798 <__divsi3+0xf8>
    46ae:	0903      	lsrs	r3, r0, #4
    46b0:	428b      	cmp	r3, r1
    46b2:	d35f      	bcc.n	4774 <__divsi3+0xd4>
    46b4:	0a03      	lsrs	r3, r0, #8
    46b6:	428b      	cmp	r3, r1
    46b8:	d344      	bcc.n	4744 <__divsi3+0xa4>
    46ba:	0b03      	lsrs	r3, r0, #12
    46bc:	428b      	cmp	r3, r1
    46be:	d328      	bcc.n	4712 <__divsi3+0x72>
    46c0:	0c03      	lsrs	r3, r0, #16
    46c2:	428b      	cmp	r3, r1
    46c4:	d30d      	bcc.n	46e2 <__divsi3+0x42>
    46c6:	22ff      	movs	r2, #255	; 0xff
    46c8:	0209      	lsls	r1, r1, #8
    46ca:	ba12      	rev	r2, r2
    46cc:	0c03      	lsrs	r3, r0, #16
    46ce:	428b      	cmp	r3, r1
    46d0:	d302      	bcc.n	46d8 <__divsi3+0x38>
    46d2:	1212      	asrs	r2, r2, #8
    46d4:	0209      	lsls	r1, r1, #8
    46d6:	d065      	beq.n	47a4 <__divsi3+0x104>
    46d8:	0b03      	lsrs	r3, r0, #12
    46da:	428b      	cmp	r3, r1
    46dc:	d319      	bcc.n	4712 <__divsi3+0x72>
    46de:	e000      	b.n	46e2 <__divsi3+0x42>
    46e0:	0a09      	lsrs	r1, r1, #8
    46e2:	0bc3      	lsrs	r3, r0, #15
    46e4:	428b      	cmp	r3, r1
    46e6:	d301      	bcc.n	46ec <__divsi3+0x4c>
    46e8:	03cb      	lsls	r3, r1, #15
    46ea:	1ac0      	subs	r0, r0, r3
    46ec:	4152      	adcs	r2, r2
    46ee:	0b83      	lsrs	r3, r0, #14
    46f0:	428b      	cmp	r3, r1
    46f2:	d301      	bcc.n	46f8 <__divsi3+0x58>
    46f4:	038b      	lsls	r3, r1, #14
    46f6:	1ac0      	subs	r0, r0, r3
    46f8:	4152      	adcs	r2, r2
    46fa:	0b43      	lsrs	r3, r0, #13
    46fc:	428b      	cmp	r3, r1
    46fe:	d301      	bcc.n	4704 <__divsi3+0x64>
    4700:	034b      	lsls	r3, r1, #13
    4702:	1ac0      	subs	r0, r0, r3
    4704:	4152      	adcs	r2, r2
    4706:	0b03      	lsrs	r3, r0, #12
    4708:	428b      	cmp	r3, r1
    470a:	d301      	bcc.n	4710 <__divsi3+0x70>
    470c:	030b      	lsls	r3, r1, #12
    470e:	1ac0      	subs	r0, r0, r3
    4710:	4152      	adcs	r2, r2
    4712:	0ac3      	lsrs	r3, r0, #11
    4714:	428b      	cmp	r3, r1
    4716:	d301      	bcc.n	471c <__divsi3+0x7c>
    4718:	02cb      	lsls	r3, r1, #11
    471a:	1ac0      	subs	r0, r0, r3
    471c:	4152      	adcs	r2, r2
    471e:	0a83      	lsrs	r3, r0, #10
    4720:	428b      	cmp	r3, r1
    4722:	d301      	bcc.n	4728 <__divsi3+0x88>
    4724:	028b      	lsls	r3, r1, #10
    4726:	1ac0      	subs	r0, r0, r3
    4728:	4152      	adcs	r2, r2
    472a:	0a43      	lsrs	r3, r0, #9
    472c:	428b      	cmp	r3, r1
    472e:	d301      	bcc.n	4734 <__divsi3+0x94>
    4730:	024b      	lsls	r3, r1, #9
    4732:	1ac0      	subs	r0, r0, r3
    4734:	4152      	adcs	r2, r2
    4736:	0a03      	lsrs	r3, r0, #8
    4738:	428b      	cmp	r3, r1
    473a:	d301      	bcc.n	4740 <__divsi3+0xa0>
    473c:	020b      	lsls	r3, r1, #8
    473e:	1ac0      	subs	r0, r0, r3
    4740:	4152      	adcs	r2, r2
    4742:	d2cd      	bcs.n	46e0 <__divsi3+0x40>
    4744:	09c3      	lsrs	r3, r0, #7
    4746:	428b      	cmp	r3, r1
    4748:	d301      	bcc.n	474e <__divsi3+0xae>
    474a:	01cb      	lsls	r3, r1, #7
    474c:	1ac0      	subs	r0, r0, r3
    474e:	4152      	adcs	r2, r2
    4750:	0983      	lsrs	r3, r0, #6
    4752:	428b      	cmp	r3, r1
    4754:	d301      	bcc.n	475a <__divsi3+0xba>
    4756:	018b      	lsls	r3, r1, #6
    4758:	1ac0      	subs	r0, r0, r3
    475a:	4152      	adcs	r2, r2
    475c:	0943      	lsrs	r3, r0, #5
    475e:	428b      	cmp	r3, r1
    4760:	d301      	bcc.n	4766 <__divsi3+0xc6>
    4762:	014b      	lsls	r3, r1, #5
    4764:	1ac0      	subs	r0, r0, r3
    4766:	4152      	adcs	r2, r2
    4768:	0903      	lsrs	r3, r0, #4
    476a:	428b      	cmp	r3, r1
    476c:	d301      	bcc.n	4772 <__divsi3+0xd2>
    476e:	010b      	lsls	r3, r1, #4
    4770:	1ac0      	subs	r0, r0, r3
    4772:	4152      	adcs	r2, r2
    4774:	08c3      	lsrs	r3, r0, #3
    4776:	428b      	cmp	r3, r1
    4778:	d301      	bcc.n	477e <__divsi3+0xde>
    477a:	00cb      	lsls	r3, r1, #3
    477c:	1ac0      	subs	r0, r0, r3
    477e:	4152      	adcs	r2, r2
    4780:	0883      	lsrs	r3, r0, #2
    4782:	428b      	cmp	r3, r1
    4784:	d301      	bcc.n	478a <__divsi3+0xea>
    4786:	008b      	lsls	r3, r1, #2
    4788:	1ac0      	subs	r0, r0, r3
    478a:	4152      	adcs	r2, r2
    478c:	0843      	lsrs	r3, r0, #1
    478e:	428b      	cmp	r3, r1
    4790:	d301      	bcc.n	4796 <__divsi3+0xf6>
    4792:	004b      	lsls	r3, r1, #1
    4794:	1ac0      	subs	r0, r0, r3
    4796:	4152      	adcs	r2, r2
    4798:	1a41      	subs	r1, r0, r1
    479a:	d200      	bcs.n	479e <__divsi3+0xfe>
    479c:	4601      	mov	r1, r0
    479e:	4152      	adcs	r2, r2
    47a0:	4610      	mov	r0, r2
    47a2:	4770      	bx	lr
    47a4:	e05d      	b.n	4862 <__divsi3+0x1c2>
    47a6:	0fca      	lsrs	r2, r1, #31
    47a8:	d000      	beq.n	47ac <__divsi3+0x10c>
    47aa:	4249      	negs	r1, r1
    47ac:	1003      	asrs	r3, r0, #32
    47ae:	d300      	bcc.n	47b2 <__divsi3+0x112>
    47b0:	4240      	negs	r0, r0
    47b2:	4053      	eors	r3, r2
    47b4:	2200      	movs	r2, #0
    47b6:	469c      	mov	ip, r3
    47b8:	0903      	lsrs	r3, r0, #4
    47ba:	428b      	cmp	r3, r1
    47bc:	d32d      	bcc.n	481a <__divsi3+0x17a>
    47be:	0a03      	lsrs	r3, r0, #8
    47c0:	428b      	cmp	r3, r1
    47c2:	d312      	bcc.n	47ea <__divsi3+0x14a>
    47c4:	22fc      	movs	r2, #252	; 0xfc
    47c6:	0189      	lsls	r1, r1, #6
    47c8:	ba12      	rev	r2, r2
    47ca:	0a03      	lsrs	r3, r0, #8
    47cc:	428b      	cmp	r3, r1
    47ce:	d30c      	bcc.n	47ea <__divsi3+0x14a>
    47d0:	0189      	lsls	r1, r1, #6
    47d2:	1192      	asrs	r2, r2, #6
    47d4:	428b      	cmp	r3, r1
    47d6:	d308      	bcc.n	47ea <__divsi3+0x14a>
    47d8:	0189      	lsls	r1, r1, #6
    47da:	1192      	asrs	r2, r2, #6
    47dc:	428b      	cmp	r3, r1
    47de:	d304      	bcc.n	47ea <__divsi3+0x14a>
    47e0:	0189      	lsls	r1, r1, #6
    47e2:	d03a      	beq.n	485a <__divsi3+0x1ba>
    47e4:	1192      	asrs	r2, r2, #6
    47e6:	e000      	b.n	47ea <__divsi3+0x14a>
    47e8:	0989      	lsrs	r1, r1, #6
    47ea:	09c3      	lsrs	r3, r0, #7
    47ec:	428b      	cmp	r3, r1
    47ee:	d301      	bcc.n	47f4 <__divsi3+0x154>
    47f0:	01cb      	lsls	r3, r1, #7
    47f2:	1ac0      	subs	r0, r0, r3
    47f4:	4152      	adcs	r2, r2
    47f6:	0983      	lsrs	r3, r0, #6
    47f8:	428b      	cmp	r3, r1
    47fa:	d301      	bcc.n	4800 <__divsi3+0x160>
    47fc:	018b      	lsls	r3, r1, #6
    47fe:	1ac0      	subs	r0, r0, r3
    4800:	4152      	adcs	r2, r2
    4802:	0943      	lsrs	r3, r0, #5
    4804:	428b      	cmp	r3, r1
    4806:	d301      	bcc.n	480c <__divsi3+0x16c>
    4808:	014b      	lsls	r3, r1, #5
    480a:	1ac0      	subs	r0, r0, r3
    480c:	4152      	adcs	r2, r2
    480e:	0903      	lsrs	r3, r0, #4
    4810:	428b      	cmp	r3, r1
    4812:	d301      	bcc.n	4818 <__divsi3+0x178>
    4814:	010b      	lsls	r3, r1, #4
    4816:	1ac0      	subs	r0, r0, r3
    4818:	4152      	adcs	r2, r2
    481a:	08c3      	lsrs	r3, r0, #3
    481c:	428b      	cmp	r3, r1
    481e:	d301      	bcc.n	4824 <__divsi3+0x184>
    4820:	00cb      	lsls	r3, r1, #3
    4822:	1ac0      	subs	r0, r0, r3
    4824:	4152      	adcs	r2, r2
    4826:	0883      	lsrs	r3, r0, #2
    4828:	428b      	cmp	r3, r1
    482a:	d301      	bcc.n	4830 <__divsi3+0x190>
    482c:	008b      	lsls	r3, r1, #2
    482e:	1ac0      	subs	r0, r0, r3
    4830:	4152      	adcs	r2, r2
    4832:	d2d9      	bcs.n	47e8 <__divsi3+0x148>
    4834:	0843      	lsrs	r3, r0, #1
    4836:	428b      	cmp	r3, r1
    4838:	d301      	bcc.n	483e <__divsi3+0x19e>
    483a:	004b      	lsls	r3, r1, #1
    483c:	1ac0      	subs	r0, r0, r3
    483e:	4152      	adcs	r2, r2
    4840:	1a41      	subs	r1, r0, r1
    4842:	d200      	bcs.n	4846 <__divsi3+0x1a6>
    4844:	4601      	mov	r1, r0
    4846:	4663      	mov	r3, ip
    4848:	4152      	adcs	r2, r2
    484a:	105b      	asrs	r3, r3, #1
    484c:	4610      	mov	r0, r2
    484e:	d301      	bcc.n	4854 <__divsi3+0x1b4>
    4850:	4240      	negs	r0, r0
    4852:	2b00      	cmp	r3, #0
    4854:	d500      	bpl.n	4858 <__divsi3+0x1b8>
    4856:	4249      	negs	r1, r1
    4858:	4770      	bx	lr
    485a:	4663      	mov	r3, ip
    485c:	105b      	asrs	r3, r3, #1
    485e:	d300      	bcc.n	4862 <__divsi3+0x1c2>
    4860:	4240      	negs	r0, r0
    4862:	b501      	push	{r0, lr}
    4864:	2000      	movs	r0, #0
    4866:	f000 f805 	bl	4874 <__aeabi_idiv0>
    486a:	bd02      	pop	{r1, pc}

0000486c <__aeabi_idivmod>:
    486c:	2900      	cmp	r1, #0
    486e:	d0f8      	beq.n	4862 <__divsi3+0x1c2>
    4870:	e716      	b.n	46a0 <__divsi3>
    4872:	4770      	bx	lr

00004874 <__aeabi_idiv0>:
    4874:	4770      	bx	lr
    4876:	46c0      	nop			; (mov r8, r8)

00004878 <ffs>:
    4878:	2300      	movs	r3, #0
    487a:	b510      	push	{r4, lr}
    487c:	4298      	cmp	r0, r3
    487e:	d007      	beq.n	4890 <ffs+0x18>
    4880:	001a      	movs	r2, r3
    4882:	2101      	movs	r1, #1
    4884:	0004      	movs	r4, r0
    4886:	4114      	asrs	r4, r2
    4888:	1c53      	adds	r3, r2, #1
    488a:	001a      	movs	r2, r3
    488c:	420c      	tst	r4, r1
    488e:	d0f9      	beq.n	4884 <ffs+0xc>
    4890:	0018      	movs	r0, r3
    4892:	bd10      	pop	{r4, pc}

00004894 <__libc_init_array>:
    4894:	b570      	push	{r4, r5, r6, lr}
    4896:	2600      	movs	r6, #0
    4898:	4d0c      	ldr	r5, [pc, #48]	; (48cc <__libc_init_array+0x38>)
    489a:	4c0d      	ldr	r4, [pc, #52]	; (48d0 <__libc_init_array+0x3c>)
    489c:	1b64      	subs	r4, r4, r5
    489e:	10a4      	asrs	r4, r4, #2
    48a0:	42a6      	cmp	r6, r4
    48a2:	d109      	bne.n	48b8 <__libc_init_array+0x24>
    48a4:	2600      	movs	r6, #0
    48a6:	f000 fe95 	bl	55d4 <_init>
    48aa:	4d0a      	ldr	r5, [pc, #40]	; (48d4 <__libc_init_array+0x40>)
    48ac:	4c0a      	ldr	r4, [pc, #40]	; (48d8 <__libc_init_array+0x44>)
    48ae:	1b64      	subs	r4, r4, r5
    48b0:	10a4      	asrs	r4, r4, #2
    48b2:	42a6      	cmp	r6, r4
    48b4:	d105      	bne.n	48c2 <__libc_init_array+0x2e>
    48b6:	bd70      	pop	{r4, r5, r6, pc}
    48b8:	00b3      	lsls	r3, r6, #2
    48ba:	58eb      	ldr	r3, [r5, r3]
    48bc:	4798      	blx	r3
    48be:	3601      	adds	r6, #1
    48c0:	e7ee      	b.n	48a0 <__libc_init_array+0xc>
    48c2:	00b3      	lsls	r3, r6, #2
    48c4:	58eb      	ldr	r3, [r5, r3]
    48c6:	4798      	blx	r3
    48c8:	3601      	adds	r6, #1
    48ca:	e7f2      	b.n	48b2 <__libc_init_array+0x1e>
    48cc:	000055e0 	.word	0x000055e0
    48d0:	000055e0 	.word	0x000055e0
    48d4:	000055e0 	.word	0x000055e0
    48d8:	000055e4 	.word	0x000055e4

000048dc <memset>:
    48dc:	0003      	movs	r3, r0
    48de:	1882      	adds	r2, r0, r2
    48e0:	4293      	cmp	r3, r2
    48e2:	d100      	bne.n	48e6 <memset+0xa>
    48e4:	4770      	bx	lr
    48e6:	7019      	strb	r1, [r3, #0]
    48e8:	3301      	adds	r3, #1
    48ea:	e7f9      	b.n	48e0 <memset+0x4>

000048ec <_vsniprintf_r>:
    48ec:	b530      	push	{r4, r5, lr}
    48ee:	0014      	movs	r4, r2
    48f0:	b09b      	sub	sp, #108	; 0x6c
    48f2:	0005      	movs	r5, r0
    48f4:	001a      	movs	r2, r3
    48f6:	2c00      	cmp	r4, #0
    48f8:	da05      	bge.n	4906 <_vsniprintf_r+0x1a>
    48fa:	238b      	movs	r3, #139	; 0x8b
    48fc:	6003      	str	r3, [r0, #0]
    48fe:	2001      	movs	r0, #1
    4900:	4240      	negs	r0, r0
    4902:	b01b      	add	sp, #108	; 0x6c
    4904:	bd30      	pop	{r4, r5, pc}
    4906:	2382      	movs	r3, #130	; 0x82
    4908:	4668      	mov	r0, sp
    490a:	009b      	lsls	r3, r3, #2
    490c:	8183      	strh	r3, [r0, #12]
    490e:	2300      	movs	r3, #0
    4910:	9100      	str	r1, [sp, #0]
    4912:	9104      	str	r1, [sp, #16]
    4914:	429c      	cmp	r4, r3
    4916:	d000      	beq.n	491a <_vsniprintf_r+0x2e>
    4918:	1e63      	subs	r3, r4, #1
    491a:	9302      	str	r3, [sp, #8]
    491c:	9305      	str	r3, [sp, #20]
    491e:	2301      	movs	r3, #1
    4920:	4669      	mov	r1, sp
    4922:	425b      	negs	r3, r3
    4924:	81cb      	strh	r3, [r1, #14]
    4926:	0028      	movs	r0, r5
    4928:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    492a:	f000 f8d7 	bl	4adc <_svfiprintf_r>
    492e:	1c43      	adds	r3, r0, #1
    4930:	da01      	bge.n	4936 <_vsniprintf_r+0x4a>
    4932:	238b      	movs	r3, #139	; 0x8b
    4934:	602b      	str	r3, [r5, #0]
    4936:	2c00      	cmp	r4, #0
    4938:	d0e3      	beq.n	4902 <_vsniprintf_r+0x16>
    493a:	2300      	movs	r3, #0
    493c:	9a00      	ldr	r2, [sp, #0]
    493e:	7013      	strb	r3, [r2, #0]
    4940:	e7df      	b.n	4902 <_vsniprintf_r+0x16>
	...

00004944 <vsniprintf>:
    4944:	b507      	push	{r0, r1, r2, lr}
    4946:	9300      	str	r3, [sp, #0]
    4948:	0013      	movs	r3, r2
    494a:	000a      	movs	r2, r1
    494c:	0001      	movs	r1, r0
    494e:	4802      	ldr	r0, [pc, #8]	; (4958 <vsniprintf+0x14>)
    4950:	6800      	ldr	r0, [r0, #0]
    4952:	f7ff ffcb 	bl	48ec <_vsniprintf_r>
    4956:	bd0e      	pop	{r1, r2, r3, pc}
    4958:	20000014 	.word	0x20000014

0000495c <_malloc_r>:
    495c:	2303      	movs	r3, #3
    495e:	b570      	push	{r4, r5, r6, lr}
    4960:	1ccd      	adds	r5, r1, #3
    4962:	439d      	bics	r5, r3
    4964:	3508      	adds	r5, #8
    4966:	0006      	movs	r6, r0
    4968:	2d0c      	cmp	r5, #12
    496a:	d21e      	bcs.n	49aa <_malloc_r+0x4e>
    496c:	250c      	movs	r5, #12
    496e:	42a9      	cmp	r1, r5
    4970:	d81d      	bhi.n	49ae <_malloc_r+0x52>
    4972:	0030      	movs	r0, r6
    4974:	f000 fb76 	bl	5064 <__malloc_lock>
    4978:	4a25      	ldr	r2, [pc, #148]	; (4a10 <_malloc_r+0xb4>)
    497a:	6814      	ldr	r4, [r2, #0]
    497c:	0021      	movs	r1, r4
    497e:	2900      	cmp	r1, #0
    4980:	d119      	bne.n	49b6 <_malloc_r+0x5a>
    4982:	4c24      	ldr	r4, [pc, #144]	; (4a14 <_malloc_r+0xb8>)
    4984:	6823      	ldr	r3, [r4, #0]
    4986:	2b00      	cmp	r3, #0
    4988:	d103      	bne.n	4992 <_malloc_r+0x36>
    498a:	0030      	movs	r0, r6
    498c:	f000 fb32 	bl	4ff4 <_sbrk_r>
    4990:	6020      	str	r0, [r4, #0]
    4992:	0029      	movs	r1, r5
    4994:	0030      	movs	r0, r6
    4996:	f000 fb2d 	bl	4ff4 <_sbrk_r>
    499a:	1c43      	adds	r3, r0, #1
    499c:	d12c      	bne.n	49f8 <_malloc_r+0x9c>
    499e:	230c      	movs	r3, #12
    49a0:	0030      	movs	r0, r6
    49a2:	6033      	str	r3, [r6, #0]
    49a4:	f000 fb5f 	bl	5066 <__malloc_unlock>
    49a8:	e003      	b.n	49b2 <_malloc_r+0x56>
    49aa:	2d00      	cmp	r5, #0
    49ac:	dadf      	bge.n	496e <_malloc_r+0x12>
    49ae:	230c      	movs	r3, #12
    49b0:	6033      	str	r3, [r6, #0]
    49b2:	2000      	movs	r0, #0
    49b4:	bd70      	pop	{r4, r5, r6, pc}
    49b6:	680b      	ldr	r3, [r1, #0]
    49b8:	1b5b      	subs	r3, r3, r5
    49ba:	d41a      	bmi.n	49f2 <_malloc_r+0x96>
    49bc:	2b0b      	cmp	r3, #11
    49be:	d903      	bls.n	49c8 <_malloc_r+0x6c>
    49c0:	600b      	str	r3, [r1, #0]
    49c2:	18cc      	adds	r4, r1, r3
    49c4:	6025      	str	r5, [r4, #0]
    49c6:	e003      	b.n	49d0 <_malloc_r+0x74>
    49c8:	428c      	cmp	r4, r1
    49ca:	d10e      	bne.n	49ea <_malloc_r+0x8e>
    49cc:	6863      	ldr	r3, [r4, #4]
    49ce:	6013      	str	r3, [r2, #0]
    49d0:	0030      	movs	r0, r6
    49d2:	f000 fb48 	bl	5066 <__malloc_unlock>
    49d6:	0020      	movs	r0, r4
    49d8:	2207      	movs	r2, #7
    49da:	300b      	adds	r0, #11
    49dc:	1d23      	adds	r3, r4, #4
    49de:	4390      	bics	r0, r2
    49e0:	1ac3      	subs	r3, r0, r3
    49e2:	d0e7      	beq.n	49b4 <_malloc_r+0x58>
    49e4:	425a      	negs	r2, r3
    49e6:	50e2      	str	r2, [r4, r3]
    49e8:	e7e4      	b.n	49b4 <_malloc_r+0x58>
    49ea:	684b      	ldr	r3, [r1, #4]
    49ec:	6063      	str	r3, [r4, #4]
    49ee:	000c      	movs	r4, r1
    49f0:	e7ee      	b.n	49d0 <_malloc_r+0x74>
    49f2:	000c      	movs	r4, r1
    49f4:	6849      	ldr	r1, [r1, #4]
    49f6:	e7c2      	b.n	497e <_malloc_r+0x22>
    49f8:	2303      	movs	r3, #3
    49fa:	1cc4      	adds	r4, r0, #3
    49fc:	439c      	bics	r4, r3
    49fe:	42a0      	cmp	r0, r4
    4a00:	d0e0      	beq.n	49c4 <_malloc_r+0x68>
    4a02:	1a21      	subs	r1, r4, r0
    4a04:	0030      	movs	r0, r6
    4a06:	f000 faf5 	bl	4ff4 <_sbrk_r>
    4a0a:	1c43      	adds	r3, r0, #1
    4a0c:	d1da      	bne.n	49c4 <_malloc_r+0x68>
    4a0e:	e7c6      	b.n	499e <_malloc_r+0x42>
    4a10:	20000184 	.word	0x20000184
    4a14:	20000188 	.word	0x20000188

00004a18 <__ssputs_r>:
    4a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a1a:	688e      	ldr	r6, [r1, #8]
    4a1c:	b085      	sub	sp, #20
    4a1e:	0007      	movs	r7, r0
    4a20:	000c      	movs	r4, r1
    4a22:	9203      	str	r2, [sp, #12]
    4a24:	9301      	str	r3, [sp, #4]
    4a26:	429e      	cmp	r6, r3
    4a28:	d839      	bhi.n	4a9e <__ssputs_r+0x86>
    4a2a:	2390      	movs	r3, #144	; 0x90
    4a2c:	898a      	ldrh	r2, [r1, #12]
    4a2e:	00db      	lsls	r3, r3, #3
    4a30:	421a      	tst	r2, r3
    4a32:	d034      	beq.n	4a9e <__ssputs_r+0x86>
    4a34:	2503      	movs	r5, #3
    4a36:	6909      	ldr	r1, [r1, #16]
    4a38:	6823      	ldr	r3, [r4, #0]
    4a3a:	1a5b      	subs	r3, r3, r1
    4a3c:	9302      	str	r3, [sp, #8]
    4a3e:	6963      	ldr	r3, [r4, #20]
    4a40:	9802      	ldr	r0, [sp, #8]
    4a42:	435d      	muls	r5, r3
    4a44:	0feb      	lsrs	r3, r5, #31
    4a46:	195d      	adds	r5, r3, r5
    4a48:	9b01      	ldr	r3, [sp, #4]
    4a4a:	106d      	asrs	r5, r5, #1
    4a4c:	3301      	adds	r3, #1
    4a4e:	181b      	adds	r3, r3, r0
    4a50:	42ab      	cmp	r3, r5
    4a52:	d900      	bls.n	4a56 <__ssputs_r+0x3e>
    4a54:	001d      	movs	r5, r3
    4a56:	0553      	lsls	r3, r2, #21
    4a58:	d532      	bpl.n	4ac0 <__ssputs_r+0xa8>
    4a5a:	0029      	movs	r1, r5
    4a5c:	0038      	movs	r0, r7
    4a5e:	f7ff ff7d 	bl	495c <_malloc_r>
    4a62:	1e06      	subs	r6, r0, #0
    4a64:	d109      	bne.n	4a7a <__ssputs_r+0x62>
    4a66:	230c      	movs	r3, #12
    4a68:	603b      	str	r3, [r7, #0]
    4a6a:	2340      	movs	r3, #64	; 0x40
    4a6c:	2001      	movs	r0, #1
    4a6e:	89a2      	ldrh	r2, [r4, #12]
    4a70:	4240      	negs	r0, r0
    4a72:	4313      	orrs	r3, r2
    4a74:	81a3      	strh	r3, [r4, #12]
    4a76:	b005      	add	sp, #20
    4a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a7a:	9a02      	ldr	r2, [sp, #8]
    4a7c:	6921      	ldr	r1, [r4, #16]
    4a7e:	f000 fad6 	bl	502e <memcpy>
    4a82:	89a3      	ldrh	r3, [r4, #12]
    4a84:	4a14      	ldr	r2, [pc, #80]	; (4ad8 <__ssputs_r+0xc0>)
    4a86:	401a      	ands	r2, r3
    4a88:	2380      	movs	r3, #128	; 0x80
    4a8a:	4313      	orrs	r3, r2
    4a8c:	81a3      	strh	r3, [r4, #12]
    4a8e:	9b02      	ldr	r3, [sp, #8]
    4a90:	6126      	str	r6, [r4, #16]
    4a92:	18f6      	adds	r6, r6, r3
    4a94:	6026      	str	r6, [r4, #0]
    4a96:	6165      	str	r5, [r4, #20]
    4a98:	9e01      	ldr	r6, [sp, #4]
    4a9a:	1aed      	subs	r5, r5, r3
    4a9c:	60a5      	str	r5, [r4, #8]
    4a9e:	9b01      	ldr	r3, [sp, #4]
    4aa0:	42b3      	cmp	r3, r6
    4aa2:	d200      	bcs.n	4aa6 <__ssputs_r+0x8e>
    4aa4:	001e      	movs	r6, r3
    4aa6:	0032      	movs	r2, r6
    4aa8:	9903      	ldr	r1, [sp, #12]
    4aaa:	6820      	ldr	r0, [r4, #0]
    4aac:	f000 fac8 	bl	5040 <memmove>
    4ab0:	68a3      	ldr	r3, [r4, #8]
    4ab2:	2000      	movs	r0, #0
    4ab4:	1b9b      	subs	r3, r3, r6
    4ab6:	60a3      	str	r3, [r4, #8]
    4ab8:	6823      	ldr	r3, [r4, #0]
    4aba:	199e      	adds	r6, r3, r6
    4abc:	6026      	str	r6, [r4, #0]
    4abe:	e7da      	b.n	4a76 <__ssputs_r+0x5e>
    4ac0:	002a      	movs	r2, r5
    4ac2:	0038      	movs	r0, r7
    4ac4:	f000 fb1a 	bl	50fc <_realloc_r>
    4ac8:	1e06      	subs	r6, r0, #0
    4aca:	d1e0      	bne.n	4a8e <__ssputs_r+0x76>
    4acc:	6921      	ldr	r1, [r4, #16]
    4ace:	0038      	movs	r0, r7
    4ad0:	f000 faca 	bl	5068 <_free_r>
    4ad4:	e7c7      	b.n	4a66 <__ssputs_r+0x4e>
    4ad6:	46c0      	nop			; (mov r8, r8)
    4ad8:	fffffb7f 	.word	0xfffffb7f

00004adc <_svfiprintf_r>:
    4adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ade:	b09f      	sub	sp, #124	; 0x7c
    4ae0:	9002      	str	r0, [sp, #8]
    4ae2:	9305      	str	r3, [sp, #20]
    4ae4:	898b      	ldrh	r3, [r1, #12]
    4ae6:	000f      	movs	r7, r1
    4ae8:	0016      	movs	r6, r2
    4aea:	061b      	lsls	r3, r3, #24
    4aec:	d511      	bpl.n	4b12 <_svfiprintf_r+0x36>
    4aee:	690b      	ldr	r3, [r1, #16]
    4af0:	2b00      	cmp	r3, #0
    4af2:	d10e      	bne.n	4b12 <_svfiprintf_r+0x36>
    4af4:	2140      	movs	r1, #64	; 0x40
    4af6:	f7ff ff31 	bl	495c <_malloc_r>
    4afa:	6038      	str	r0, [r7, #0]
    4afc:	6138      	str	r0, [r7, #16]
    4afe:	2800      	cmp	r0, #0
    4b00:	d105      	bne.n	4b0e <_svfiprintf_r+0x32>
    4b02:	230c      	movs	r3, #12
    4b04:	9a02      	ldr	r2, [sp, #8]
    4b06:	3801      	subs	r0, #1
    4b08:	6013      	str	r3, [r2, #0]
    4b0a:	b01f      	add	sp, #124	; 0x7c
    4b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b0e:	2340      	movs	r3, #64	; 0x40
    4b10:	617b      	str	r3, [r7, #20]
    4b12:	2300      	movs	r3, #0
    4b14:	ad06      	add	r5, sp, #24
    4b16:	616b      	str	r3, [r5, #20]
    4b18:	3320      	adds	r3, #32
    4b1a:	766b      	strb	r3, [r5, #25]
    4b1c:	3310      	adds	r3, #16
    4b1e:	76ab      	strb	r3, [r5, #26]
    4b20:	0034      	movs	r4, r6
    4b22:	7823      	ldrb	r3, [r4, #0]
    4b24:	2b00      	cmp	r3, #0
    4b26:	d147      	bne.n	4bb8 <_svfiprintf_r+0xdc>
    4b28:	1ba3      	subs	r3, r4, r6
    4b2a:	9304      	str	r3, [sp, #16]
    4b2c:	d00d      	beq.n	4b4a <_svfiprintf_r+0x6e>
    4b2e:	1ba3      	subs	r3, r4, r6
    4b30:	0032      	movs	r2, r6
    4b32:	0039      	movs	r1, r7
    4b34:	9802      	ldr	r0, [sp, #8]
    4b36:	f7ff ff6f 	bl	4a18 <__ssputs_r>
    4b3a:	1c43      	adds	r3, r0, #1
    4b3c:	d100      	bne.n	4b40 <_svfiprintf_r+0x64>
    4b3e:	e0b5      	b.n	4cac <_svfiprintf_r+0x1d0>
    4b40:	696a      	ldr	r2, [r5, #20]
    4b42:	9b04      	ldr	r3, [sp, #16]
    4b44:	4694      	mov	ip, r2
    4b46:	4463      	add	r3, ip
    4b48:	616b      	str	r3, [r5, #20]
    4b4a:	7823      	ldrb	r3, [r4, #0]
    4b4c:	2b00      	cmp	r3, #0
    4b4e:	d100      	bne.n	4b52 <_svfiprintf_r+0x76>
    4b50:	e0ac      	b.n	4cac <_svfiprintf_r+0x1d0>
    4b52:	2201      	movs	r2, #1
    4b54:	2300      	movs	r3, #0
    4b56:	4252      	negs	r2, r2
    4b58:	606a      	str	r2, [r5, #4]
    4b5a:	a902      	add	r1, sp, #8
    4b5c:	3254      	adds	r2, #84	; 0x54
    4b5e:	1852      	adds	r2, r2, r1
    4b60:	3401      	adds	r4, #1
    4b62:	602b      	str	r3, [r5, #0]
    4b64:	60eb      	str	r3, [r5, #12]
    4b66:	60ab      	str	r3, [r5, #8]
    4b68:	7013      	strb	r3, [r2, #0]
    4b6a:	65ab      	str	r3, [r5, #88]	; 0x58
    4b6c:	4e58      	ldr	r6, [pc, #352]	; (4cd0 <_svfiprintf_r+0x1f4>)
    4b6e:	2205      	movs	r2, #5
    4b70:	7821      	ldrb	r1, [r4, #0]
    4b72:	0030      	movs	r0, r6
    4b74:	f000 fa50 	bl	5018 <memchr>
    4b78:	1c62      	adds	r2, r4, #1
    4b7a:	2800      	cmp	r0, #0
    4b7c:	d120      	bne.n	4bc0 <_svfiprintf_r+0xe4>
    4b7e:	6829      	ldr	r1, [r5, #0]
    4b80:	06cb      	lsls	r3, r1, #27
    4b82:	d504      	bpl.n	4b8e <_svfiprintf_r+0xb2>
    4b84:	2353      	movs	r3, #83	; 0x53
    4b86:	ae02      	add	r6, sp, #8
    4b88:	3020      	adds	r0, #32
    4b8a:	199b      	adds	r3, r3, r6
    4b8c:	7018      	strb	r0, [r3, #0]
    4b8e:	070b      	lsls	r3, r1, #28
    4b90:	d504      	bpl.n	4b9c <_svfiprintf_r+0xc0>
    4b92:	2353      	movs	r3, #83	; 0x53
    4b94:	202b      	movs	r0, #43	; 0x2b
    4b96:	ae02      	add	r6, sp, #8
    4b98:	199b      	adds	r3, r3, r6
    4b9a:	7018      	strb	r0, [r3, #0]
    4b9c:	7823      	ldrb	r3, [r4, #0]
    4b9e:	2b2a      	cmp	r3, #42	; 0x2a
    4ba0:	d016      	beq.n	4bd0 <_svfiprintf_r+0xf4>
    4ba2:	2000      	movs	r0, #0
    4ba4:	210a      	movs	r1, #10
    4ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4ba8:	7822      	ldrb	r2, [r4, #0]
    4baa:	3a30      	subs	r2, #48	; 0x30
    4bac:	2a09      	cmp	r2, #9
    4bae:	d955      	bls.n	4c5c <_svfiprintf_r+0x180>
    4bb0:	2800      	cmp	r0, #0
    4bb2:	d015      	beq.n	4be0 <_svfiprintf_r+0x104>
    4bb4:	9309      	str	r3, [sp, #36]	; 0x24
    4bb6:	e013      	b.n	4be0 <_svfiprintf_r+0x104>
    4bb8:	2b25      	cmp	r3, #37	; 0x25
    4bba:	d0b5      	beq.n	4b28 <_svfiprintf_r+0x4c>
    4bbc:	3401      	adds	r4, #1
    4bbe:	e7b0      	b.n	4b22 <_svfiprintf_r+0x46>
    4bc0:	2301      	movs	r3, #1
    4bc2:	1b80      	subs	r0, r0, r6
    4bc4:	4083      	lsls	r3, r0
    4bc6:	6829      	ldr	r1, [r5, #0]
    4bc8:	0014      	movs	r4, r2
    4bca:	430b      	orrs	r3, r1
    4bcc:	602b      	str	r3, [r5, #0]
    4bce:	e7cd      	b.n	4b6c <_svfiprintf_r+0x90>
    4bd0:	9b05      	ldr	r3, [sp, #20]
    4bd2:	1d18      	adds	r0, r3, #4
    4bd4:	681b      	ldr	r3, [r3, #0]
    4bd6:	9005      	str	r0, [sp, #20]
    4bd8:	2b00      	cmp	r3, #0
    4bda:	db39      	blt.n	4c50 <_svfiprintf_r+0x174>
    4bdc:	9309      	str	r3, [sp, #36]	; 0x24
    4bde:	0014      	movs	r4, r2
    4be0:	7823      	ldrb	r3, [r4, #0]
    4be2:	2b2e      	cmp	r3, #46	; 0x2e
    4be4:	d10b      	bne.n	4bfe <_svfiprintf_r+0x122>
    4be6:	7863      	ldrb	r3, [r4, #1]
    4be8:	1c62      	adds	r2, r4, #1
    4bea:	2b2a      	cmp	r3, #42	; 0x2a
    4bec:	d13e      	bne.n	4c6c <_svfiprintf_r+0x190>
    4bee:	9b05      	ldr	r3, [sp, #20]
    4bf0:	3402      	adds	r4, #2
    4bf2:	1d1a      	adds	r2, r3, #4
    4bf4:	681b      	ldr	r3, [r3, #0]
    4bf6:	9205      	str	r2, [sp, #20]
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	db34      	blt.n	4c66 <_svfiprintf_r+0x18a>
    4bfc:	9307      	str	r3, [sp, #28]
    4bfe:	4e35      	ldr	r6, [pc, #212]	; (4cd4 <_svfiprintf_r+0x1f8>)
    4c00:	7821      	ldrb	r1, [r4, #0]
    4c02:	2203      	movs	r2, #3
    4c04:	0030      	movs	r0, r6
    4c06:	f000 fa07 	bl	5018 <memchr>
    4c0a:	2800      	cmp	r0, #0
    4c0c:	d006      	beq.n	4c1c <_svfiprintf_r+0x140>
    4c0e:	2340      	movs	r3, #64	; 0x40
    4c10:	1b80      	subs	r0, r0, r6
    4c12:	4083      	lsls	r3, r0
    4c14:	682a      	ldr	r2, [r5, #0]
    4c16:	3401      	adds	r4, #1
    4c18:	4313      	orrs	r3, r2
    4c1a:	602b      	str	r3, [r5, #0]
    4c1c:	7821      	ldrb	r1, [r4, #0]
    4c1e:	2206      	movs	r2, #6
    4c20:	482d      	ldr	r0, [pc, #180]	; (4cd8 <_svfiprintf_r+0x1fc>)
    4c22:	1c66      	adds	r6, r4, #1
    4c24:	7629      	strb	r1, [r5, #24]
    4c26:	f000 f9f7 	bl	5018 <memchr>
    4c2a:	2800      	cmp	r0, #0
    4c2c:	d046      	beq.n	4cbc <_svfiprintf_r+0x1e0>
    4c2e:	4b2b      	ldr	r3, [pc, #172]	; (4cdc <_svfiprintf_r+0x200>)
    4c30:	2b00      	cmp	r3, #0
    4c32:	d12f      	bne.n	4c94 <_svfiprintf_r+0x1b8>
    4c34:	6829      	ldr	r1, [r5, #0]
    4c36:	9b05      	ldr	r3, [sp, #20]
    4c38:	2207      	movs	r2, #7
    4c3a:	05c9      	lsls	r1, r1, #23
    4c3c:	d528      	bpl.n	4c90 <_svfiprintf_r+0x1b4>
    4c3e:	189b      	adds	r3, r3, r2
    4c40:	4393      	bics	r3, r2
    4c42:	3308      	adds	r3, #8
    4c44:	9305      	str	r3, [sp, #20]
    4c46:	696b      	ldr	r3, [r5, #20]
    4c48:	9a03      	ldr	r2, [sp, #12]
    4c4a:	189b      	adds	r3, r3, r2
    4c4c:	616b      	str	r3, [r5, #20]
    4c4e:	e767      	b.n	4b20 <_svfiprintf_r+0x44>
    4c50:	425b      	negs	r3, r3
    4c52:	60eb      	str	r3, [r5, #12]
    4c54:	2302      	movs	r3, #2
    4c56:	430b      	orrs	r3, r1
    4c58:	602b      	str	r3, [r5, #0]
    4c5a:	e7c0      	b.n	4bde <_svfiprintf_r+0x102>
    4c5c:	434b      	muls	r3, r1
    4c5e:	3401      	adds	r4, #1
    4c60:	189b      	adds	r3, r3, r2
    4c62:	2001      	movs	r0, #1
    4c64:	e7a0      	b.n	4ba8 <_svfiprintf_r+0xcc>
    4c66:	2301      	movs	r3, #1
    4c68:	425b      	negs	r3, r3
    4c6a:	e7c7      	b.n	4bfc <_svfiprintf_r+0x120>
    4c6c:	2300      	movs	r3, #0
    4c6e:	0014      	movs	r4, r2
    4c70:	200a      	movs	r0, #10
    4c72:	001a      	movs	r2, r3
    4c74:	606b      	str	r3, [r5, #4]
    4c76:	7821      	ldrb	r1, [r4, #0]
    4c78:	3930      	subs	r1, #48	; 0x30
    4c7a:	2909      	cmp	r1, #9
    4c7c:	d903      	bls.n	4c86 <_svfiprintf_r+0x1aa>
    4c7e:	2b00      	cmp	r3, #0
    4c80:	d0bd      	beq.n	4bfe <_svfiprintf_r+0x122>
    4c82:	9207      	str	r2, [sp, #28]
    4c84:	e7bb      	b.n	4bfe <_svfiprintf_r+0x122>
    4c86:	4342      	muls	r2, r0
    4c88:	3401      	adds	r4, #1
    4c8a:	1852      	adds	r2, r2, r1
    4c8c:	2301      	movs	r3, #1
    4c8e:	e7f2      	b.n	4c76 <_svfiprintf_r+0x19a>
    4c90:	3307      	adds	r3, #7
    4c92:	e7d5      	b.n	4c40 <_svfiprintf_r+0x164>
    4c94:	ab05      	add	r3, sp, #20
    4c96:	9300      	str	r3, [sp, #0]
    4c98:	003a      	movs	r2, r7
    4c9a:	4b11      	ldr	r3, [pc, #68]	; (4ce0 <_svfiprintf_r+0x204>)
    4c9c:	0029      	movs	r1, r5
    4c9e:	9802      	ldr	r0, [sp, #8]
    4ca0:	e000      	b.n	4ca4 <_svfiprintf_r+0x1c8>
    4ca2:	bf00      	nop
    4ca4:	9003      	str	r0, [sp, #12]
    4ca6:	9b03      	ldr	r3, [sp, #12]
    4ca8:	3301      	adds	r3, #1
    4caa:	d1cc      	bne.n	4c46 <_svfiprintf_r+0x16a>
    4cac:	89bb      	ldrh	r3, [r7, #12]
    4cae:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4cb0:	065b      	lsls	r3, r3, #25
    4cb2:	d400      	bmi.n	4cb6 <_svfiprintf_r+0x1da>
    4cb4:	e729      	b.n	4b0a <_svfiprintf_r+0x2e>
    4cb6:	2001      	movs	r0, #1
    4cb8:	4240      	negs	r0, r0
    4cba:	e726      	b.n	4b0a <_svfiprintf_r+0x2e>
    4cbc:	ab05      	add	r3, sp, #20
    4cbe:	9300      	str	r3, [sp, #0]
    4cc0:	003a      	movs	r2, r7
    4cc2:	4b07      	ldr	r3, [pc, #28]	; (4ce0 <_svfiprintf_r+0x204>)
    4cc4:	0029      	movs	r1, r5
    4cc6:	9802      	ldr	r0, [sp, #8]
    4cc8:	f000 f87a 	bl	4dc0 <_printf_i>
    4ccc:	e7ea      	b.n	4ca4 <_svfiprintf_r+0x1c8>
    4cce:	46c0      	nop			; (mov r8, r8)
    4cd0:	000055a0 	.word	0x000055a0
    4cd4:	000055a6 	.word	0x000055a6
    4cd8:	000055aa 	.word	0x000055aa
    4cdc:	00000000 	.word	0x00000000
    4ce0:	00004a19 	.word	0x00004a19

00004ce4 <_printf_common>:
    4ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4ce6:	0015      	movs	r5, r2
    4ce8:	9301      	str	r3, [sp, #4]
    4cea:	688a      	ldr	r2, [r1, #8]
    4cec:	690b      	ldr	r3, [r1, #16]
    4cee:	9000      	str	r0, [sp, #0]
    4cf0:	000c      	movs	r4, r1
    4cf2:	4293      	cmp	r3, r2
    4cf4:	da00      	bge.n	4cf8 <_printf_common+0x14>
    4cf6:	0013      	movs	r3, r2
    4cf8:	0022      	movs	r2, r4
    4cfa:	602b      	str	r3, [r5, #0]
    4cfc:	3243      	adds	r2, #67	; 0x43
    4cfe:	7812      	ldrb	r2, [r2, #0]
    4d00:	2a00      	cmp	r2, #0
    4d02:	d001      	beq.n	4d08 <_printf_common+0x24>
    4d04:	3301      	adds	r3, #1
    4d06:	602b      	str	r3, [r5, #0]
    4d08:	6823      	ldr	r3, [r4, #0]
    4d0a:	069b      	lsls	r3, r3, #26
    4d0c:	d502      	bpl.n	4d14 <_printf_common+0x30>
    4d0e:	682b      	ldr	r3, [r5, #0]
    4d10:	3302      	adds	r3, #2
    4d12:	602b      	str	r3, [r5, #0]
    4d14:	2706      	movs	r7, #6
    4d16:	6823      	ldr	r3, [r4, #0]
    4d18:	401f      	ands	r7, r3
    4d1a:	d027      	beq.n	4d6c <_printf_common+0x88>
    4d1c:	0023      	movs	r3, r4
    4d1e:	3343      	adds	r3, #67	; 0x43
    4d20:	781b      	ldrb	r3, [r3, #0]
    4d22:	1e5a      	subs	r2, r3, #1
    4d24:	4193      	sbcs	r3, r2
    4d26:	6822      	ldr	r2, [r4, #0]
    4d28:	0692      	lsls	r2, r2, #26
    4d2a:	d430      	bmi.n	4d8e <_printf_common+0xaa>
    4d2c:	0022      	movs	r2, r4
    4d2e:	9901      	ldr	r1, [sp, #4]
    4d30:	3243      	adds	r2, #67	; 0x43
    4d32:	9800      	ldr	r0, [sp, #0]
    4d34:	9e08      	ldr	r6, [sp, #32]
    4d36:	47b0      	blx	r6
    4d38:	1c43      	adds	r3, r0, #1
    4d3a:	d025      	beq.n	4d88 <_printf_common+0xa4>
    4d3c:	2306      	movs	r3, #6
    4d3e:	6820      	ldr	r0, [r4, #0]
    4d40:	682a      	ldr	r2, [r5, #0]
    4d42:	68e1      	ldr	r1, [r4, #12]
    4d44:	4003      	ands	r3, r0
    4d46:	2500      	movs	r5, #0
    4d48:	2b04      	cmp	r3, #4
    4d4a:	d103      	bne.n	4d54 <_printf_common+0x70>
    4d4c:	1a8d      	subs	r5, r1, r2
    4d4e:	43eb      	mvns	r3, r5
    4d50:	17db      	asrs	r3, r3, #31
    4d52:	401d      	ands	r5, r3
    4d54:	68a3      	ldr	r3, [r4, #8]
    4d56:	6922      	ldr	r2, [r4, #16]
    4d58:	4293      	cmp	r3, r2
    4d5a:	dd01      	ble.n	4d60 <_printf_common+0x7c>
    4d5c:	1a9b      	subs	r3, r3, r2
    4d5e:	18ed      	adds	r5, r5, r3
    4d60:	2700      	movs	r7, #0
    4d62:	42bd      	cmp	r5, r7
    4d64:	d120      	bne.n	4da8 <_printf_common+0xc4>
    4d66:	2000      	movs	r0, #0
    4d68:	e010      	b.n	4d8c <_printf_common+0xa8>
    4d6a:	3701      	adds	r7, #1
    4d6c:	68e3      	ldr	r3, [r4, #12]
    4d6e:	682a      	ldr	r2, [r5, #0]
    4d70:	1a9b      	subs	r3, r3, r2
    4d72:	429f      	cmp	r7, r3
    4d74:	dad2      	bge.n	4d1c <_printf_common+0x38>
    4d76:	0022      	movs	r2, r4
    4d78:	2301      	movs	r3, #1
    4d7a:	3219      	adds	r2, #25
    4d7c:	9901      	ldr	r1, [sp, #4]
    4d7e:	9800      	ldr	r0, [sp, #0]
    4d80:	9e08      	ldr	r6, [sp, #32]
    4d82:	47b0      	blx	r6
    4d84:	1c43      	adds	r3, r0, #1
    4d86:	d1f0      	bne.n	4d6a <_printf_common+0x86>
    4d88:	2001      	movs	r0, #1
    4d8a:	4240      	negs	r0, r0
    4d8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4d8e:	2030      	movs	r0, #48	; 0x30
    4d90:	18e1      	adds	r1, r4, r3
    4d92:	3143      	adds	r1, #67	; 0x43
    4d94:	7008      	strb	r0, [r1, #0]
    4d96:	0021      	movs	r1, r4
    4d98:	1c5a      	adds	r2, r3, #1
    4d9a:	3145      	adds	r1, #69	; 0x45
    4d9c:	7809      	ldrb	r1, [r1, #0]
    4d9e:	18a2      	adds	r2, r4, r2
    4da0:	3243      	adds	r2, #67	; 0x43
    4da2:	3302      	adds	r3, #2
    4da4:	7011      	strb	r1, [r2, #0]
    4da6:	e7c1      	b.n	4d2c <_printf_common+0x48>
    4da8:	0022      	movs	r2, r4
    4daa:	2301      	movs	r3, #1
    4dac:	321a      	adds	r2, #26
    4dae:	9901      	ldr	r1, [sp, #4]
    4db0:	9800      	ldr	r0, [sp, #0]
    4db2:	9e08      	ldr	r6, [sp, #32]
    4db4:	47b0      	blx	r6
    4db6:	1c43      	adds	r3, r0, #1
    4db8:	d0e6      	beq.n	4d88 <_printf_common+0xa4>
    4dba:	3701      	adds	r7, #1
    4dbc:	e7d1      	b.n	4d62 <_printf_common+0x7e>
	...

00004dc0 <_printf_i>:
    4dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dc2:	b08b      	sub	sp, #44	; 0x2c
    4dc4:	9206      	str	r2, [sp, #24]
    4dc6:	000a      	movs	r2, r1
    4dc8:	3243      	adds	r2, #67	; 0x43
    4dca:	9307      	str	r3, [sp, #28]
    4dcc:	9005      	str	r0, [sp, #20]
    4dce:	9204      	str	r2, [sp, #16]
    4dd0:	7e0a      	ldrb	r2, [r1, #24]
    4dd2:	000c      	movs	r4, r1
    4dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4dd6:	2a6e      	cmp	r2, #110	; 0x6e
    4dd8:	d100      	bne.n	4ddc <_printf_i+0x1c>
    4dda:	e08f      	b.n	4efc <_printf_i+0x13c>
    4ddc:	d817      	bhi.n	4e0e <_printf_i+0x4e>
    4dde:	2a63      	cmp	r2, #99	; 0x63
    4de0:	d02c      	beq.n	4e3c <_printf_i+0x7c>
    4de2:	d808      	bhi.n	4df6 <_printf_i+0x36>
    4de4:	2a00      	cmp	r2, #0
    4de6:	d100      	bne.n	4dea <_printf_i+0x2a>
    4de8:	e099      	b.n	4f1e <_printf_i+0x15e>
    4dea:	2a58      	cmp	r2, #88	; 0x58
    4dec:	d054      	beq.n	4e98 <_printf_i+0xd8>
    4dee:	0026      	movs	r6, r4
    4df0:	3642      	adds	r6, #66	; 0x42
    4df2:	7032      	strb	r2, [r6, #0]
    4df4:	e029      	b.n	4e4a <_printf_i+0x8a>
    4df6:	2a64      	cmp	r2, #100	; 0x64
    4df8:	d001      	beq.n	4dfe <_printf_i+0x3e>
    4dfa:	2a69      	cmp	r2, #105	; 0x69
    4dfc:	d1f7      	bne.n	4dee <_printf_i+0x2e>
    4dfe:	6821      	ldr	r1, [r4, #0]
    4e00:	681a      	ldr	r2, [r3, #0]
    4e02:	0608      	lsls	r0, r1, #24
    4e04:	d523      	bpl.n	4e4e <_printf_i+0x8e>
    4e06:	1d11      	adds	r1, r2, #4
    4e08:	6019      	str	r1, [r3, #0]
    4e0a:	6815      	ldr	r5, [r2, #0]
    4e0c:	e025      	b.n	4e5a <_printf_i+0x9a>
    4e0e:	2a73      	cmp	r2, #115	; 0x73
    4e10:	d100      	bne.n	4e14 <_printf_i+0x54>
    4e12:	e088      	b.n	4f26 <_printf_i+0x166>
    4e14:	d808      	bhi.n	4e28 <_printf_i+0x68>
    4e16:	2a6f      	cmp	r2, #111	; 0x6f
    4e18:	d029      	beq.n	4e6e <_printf_i+0xae>
    4e1a:	2a70      	cmp	r2, #112	; 0x70
    4e1c:	d1e7      	bne.n	4dee <_printf_i+0x2e>
    4e1e:	2220      	movs	r2, #32
    4e20:	6809      	ldr	r1, [r1, #0]
    4e22:	430a      	orrs	r2, r1
    4e24:	6022      	str	r2, [r4, #0]
    4e26:	e003      	b.n	4e30 <_printf_i+0x70>
    4e28:	2a75      	cmp	r2, #117	; 0x75
    4e2a:	d020      	beq.n	4e6e <_printf_i+0xae>
    4e2c:	2a78      	cmp	r2, #120	; 0x78
    4e2e:	d1de      	bne.n	4dee <_printf_i+0x2e>
    4e30:	0022      	movs	r2, r4
    4e32:	2178      	movs	r1, #120	; 0x78
    4e34:	3245      	adds	r2, #69	; 0x45
    4e36:	7011      	strb	r1, [r2, #0]
    4e38:	4a6c      	ldr	r2, [pc, #432]	; (4fec <_printf_i+0x22c>)
    4e3a:	e030      	b.n	4e9e <_printf_i+0xde>
    4e3c:	000e      	movs	r6, r1
    4e3e:	681a      	ldr	r2, [r3, #0]
    4e40:	3642      	adds	r6, #66	; 0x42
    4e42:	1d11      	adds	r1, r2, #4
    4e44:	6019      	str	r1, [r3, #0]
    4e46:	6813      	ldr	r3, [r2, #0]
    4e48:	7033      	strb	r3, [r6, #0]
    4e4a:	2301      	movs	r3, #1
    4e4c:	e079      	b.n	4f42 <_printf_i+0x182>
    4e4e:	0649      	lsls	r1, r1, #25
    4e50:	d5d9      	bpl.n	4e06 <_printf_i+0x46>
    4e52:	1d11      	adds	r1, r2, #4
    4e54:	6019      	str	r1, [r3, #0]
    4e56:	2300      	movs	r3, #0
    4e58:	5ed5      	ldrsh	r5, [r2, r3]
    4e5a:	2d00      	cmp	r5, #0
    4e5c:	da03      	bge.n	4e66 <_printf_i+0xa6>
    4e5e:	232d      	movs	r3, #45	; 0x2d
    4e60:	9a04      	ldr	r2, [sp, #16]
    4e62:	426d      	negs	r5, r5
    4e64:	7013      	strb	r3, [r2, #0]
    4e66:	4b62      	ldr	r3, [pc, #392]	; (4ff0 <_printf_i+0x230>)
    4e68:	270a      	movs	r7, #10
    4e6a:	9303      	str	r3, [sp, #12]
    4e6c:	e02f      	b.n	4ece <_printf_i+0x10e>
    4e6e:	6820      	ldr	r0, [r4, #0]
    4e70:	6819      	ldr	r1, [r3, #0]
    4e72:	0605      	lsls	r5, r0, #24
    4e74:	d503      	bpl.n	4e7e <_printf_i+0xbe>
    4e76:	1d08      	adds	r0, r1, #4
    4e78:	6018      	str	r0, [r3, #0]
    4e7a:	680d      	ldr	r5, [r1, #0]
    4e7c:	e005      	b.n	4e8a <_printf_i+0xca>
    4e7e:	0640      	lsls	r0, r0, #25
    4e80:	d5f9      	bpl.n	4e76 <_printf_i+0xb6>
    4e82:	680d      	ldr	r5, [r1, #0]
    4e84:	1d08      	adds	r0, r1, #4
    4e86:	6018      	str	r0, [r3, #0]
    4e88:	b2ad      	uxth	r5, r5
    4e8a:	4b59      	ldr	r3, [pc, #356]	; (4ff0 <_printf_i+0x230>)
    4e8c:	2708      	movs	r7, #8
    4e8e:	9303      	str	r3, [sp, #12]
    4e90:	2a6f      	cmp	r2, #111	; 0x6f
    4e92:	d018      	beq.n	4ec6 <_printf_i+0x106>
    4e94:	270a      	movs	r7, #10
    4e96:	e016      	b.n	4ec6 <_printf_i+0x106>
    4e98:	3145      	adds	r1, #69	; 0x45
    4e9a:	700a      	strb	r2, [r1, #0]
    4e9c:	4a54      	ldr	r2, [pc, #336]	; (4ff0 <_printf_i+0x230>)
    4e9e:	9203      	str	r2, [sp, #12]
    4ea0:	681a      	ldr	r2, [r3, #0]
    4ea2:	6821      	ldr	r1, [r4, #0]
    4ea4:	1d10      	adds	r0, r2, #4
    4ea6:	6018      	str	r0, [r3, #0]
    4ea8:	6815      	ldr	r5, [r2, #0]
    4eaa:	0608      	lsls	r0, r1, #24
    4eac:	d522      	bpl.n	4ef4 <_printf_i+0x134>
    4eae:	07cb      	lsls	r3, r1, #31
    4eb0:	d502      	bpl.n	4eb8 <_printf_i+0xf8>
    4eb2:	2320      	movs	r3, #32
    4eb4:	4319      	orrs	r1, r3
    4eb6:	6021      	str	r1, [r4, #0]
    4eb8:	2710      	movs	r7, #16
    4eba:	2d00      	cmp	r5, #0
    4ebc:	d103      	bne.n	4ec6 <_printf_i+0x106>
    4ebe:	2320      	movs	r3, #32
    4ec0:	6822      	ldr	r2, [r4, #0]
    4ec2:	439a      	bics	r2, r3
    4ec4:	6022      	str	r2, [r4, #0]
    4ec6:	0023      	movs	r3, r4
    4ec8:	2200      	movs	r2, #0
    4eca:	3343      	adds	r3, #67	; 0x43
    4ecc:	701a      	strb	r2, [r3, #0]
    4ece:	6863      	ldr	r3, [r4, #4]
    4ed0:	60a3      	str	r3, [r4, #8]
    4ed2:	2b00      	cmp	r3, #0
    4ed4:	db5c      	blt.n	4f90 <_printf_i+0x1d0>
    4ed6:	2204      	movs	r2, #4
    4ed8:	6821      	ldr	r1, [r4, #0]
    4eda:	4391      	bics	r1, r2
    4edc:	6021      	str	r1, [r4, #0]
    4ede:	2d00      	cmp	r5, #0
    4ee0:	d158      	bne.n	4f94 <_printf_i+0x1d4>
    4ee2:	9e04      	ldr	r6, [sp, #16]
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d064      	beq.n	4fb2 <_printf_i+0x1f2>
    4ee8:	0026      	movs	r6, r4
    4eea:	9b03      	ldr	r3, [sp, #12]
    4eec:	3642      	adds	r6, #66	; 0x42
    4eee:	781b      	ldrb	r3, [r3, #0]
    4ef0:	7033      	strb	r3, [r6, #0]
    4ef2:	e05e      	b.n	4fb2 <_printf_i+0x1f2>
    4ef4:	0648      	lsls	r0, r1, #25
    4ef6:	d5da      	bpl.n	4eae <_printf_i+0xee>
    4ef8:	b2ad      	uxth	r5, r5
    4efa:	e7d8      	b.n	4eae <_printf_i+0xee>
    4efc:	6809      	ldr	r1, [r1, #0]
    4efe:	681a      	ldr	r2, [r3, #0]
    4f00:	0608      	lsls	r0, r1, #24
    4f02:	d505      	bpl.n	4f10 <_printf_i+0x150>
    4f04:	1d11      	adds	r1, r2, #4
    4f06:	6019      	str	r1, [r3, #0]
    4f08:	6813      	ldr	r3, [r2, #0]
    4f0a:	6962      	ldr	r2, [r4, #20]
    4f0c:	601a      	str	r2, [r3, #0]
    4f0e:	e006      	b.n	4f1e <_printf_i+0x15e>
    4f10:	0649      	lsls	r1, r1, #25
    4f12:	d5f7      	bpl.n	4f04 <_printf_i+0x144>
    4f14:	1d11      	adds	r1, r2, #4
    4f16:	6019      	str	r1, [r3, #0]
    4f18:	6813      	ldr	r3, [r2, #0]
    4f1a:	8aa2      	ldrh	r2, [r4, #20]
    4f1c:	801a      	strh	r2, [r3, #0]
    4f1e:	2300      	movs	r3, #0
    4f20:	9e04      	ldr	r6, [sp, #16]
    4f22:	6123      	str	r3, [r4, #16]
    4f24:	e054      	b.n	4fd0 <_printf_i+0x210>
    4f26:	681a      	ldr	r2, [r3, #0]
    4f28:	1d11      	adds	r1, r2, #4
    4f2a:	6019      	str	r1, [r3, #0]
    4f2c:	6816      	ldr	r6, [r2, #0]
    4f2e:	2100      	movs	r1, #0
    4f30:	6862      	ldr	r2, [r4, #4]
    4f32:	0030      	movs	r0, r6
    4f34:	f000 f870 	bl	5018 <memchr>
    4f38:	2800      	cmp	r0, #0
    4f3a:	d001      	beq.n	4f40 <_printf_i+0x180>
    4f3c:	1b80      	subs	r0, r0, r6
    4f3e:	6060      	str	r0, [r4, #4]
    4f40:	6863      	ldr	r3, [r4, #4]
    4f42:	6123      	str	r3, [r4, #16]
    4f44:	2300      	movs	r3, #0
    4f46:	9a04      	ldr	r2, [sp, #16]
    4f48:	7013      	strb	r3, [r2, #0]
    4f4a:	e041      	b.n	4fd0 <_printf_i+0x210>
    4f4c:	6923      	ldr	r3, [r4, #16]
    4f4e:	0032      	movs	r2, r6
    4f50:	9906      	ldr	r1, [sp, #24]
    4f52:	9805      	ldr	r0, [sp, #20]
    4f54:	9d07      	ldr	r5, [sp, #28]
    4f56:	47a8      	blx	r5
    4f58:	1c43      	adds	r3, r0, #1
    4f5a:	d043      	beq.n	4fe4 <_printf_i+0x224>
    4f5c:	6823      	ldr	r3, [r4, #0]
    4f5e:	2500      	movs	r5, #0
    4f60:	079b      	lsls	r3, r3, #30
    4f62:	d40f      	bmi.n	4f84 <_printf_i+0x1c4>
    4f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4f66:	68e0      	ldr	r0, [r4, #12]
    4f68:	4298      	cmp	r0, r3
    4f6a:	da3d      	bge.n	4fe8 <_printf_i+0x228>
    4f6c:	0018      	movs	r0, r3
    4f6e:	e03b      	b.n	4fe8 <_printf_i+0x228>
    4f70:	0022      	movs	r2, r4
    4f72:	2301      	movs	r3, #1
    4f74:	3219      	adds	r2, #25
    4f76:	9906      	ldr	r1, [sp, #24]
    4f78:	9805      	ldr	r0, [sp, #20]
    4f7a:	9e07      	ldr	r6, [sp, #28]
    4f7c:	47b0      	blx	r6
    4f7e:	1c43      	adds	r3, r0, #1
    4f80:	d030      	beq.n	4fe4 <_printf_i+0x224>
    4f82:	3501      	adds	r5, #1
    4f84:	68e3      	ldr	r3, [r4, #12]
    4f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4f88:	1a9b      	subs	r3, r3, r2
    4f8a:	429d      	cmp	r5, r3
    4f8c:	dbf0      	blt.n	4f70 <_printf_i+0x1b0>
    4f8e:	e7e9      	b.n	4f64 <_printf_i+0x1a4>
    4f90:	2d00      	cmp	r5, #0
    4f92:	d0a9      	beq.n	4ee8 <_printf_i+0x128>
    4f94:	9e04      	ldr	r6, [sp, #16]
    4f96:	0028      	movs	r0, r5
    4f98:	0039      	movs	r1, r7
    4f9a:	f7ff fb7d 	bl	4698 <__aeabi_uidivmod>
    4f9e:	9b03      	ldr	r3, [sp, #12]
    4fa0:	3e01      	subs	r6, #1
    4fa2:	5c5b      	ldrb	r3, [r3, r1]
    4fa4:	0028      	movs	r0, r5
    4fa6:	7033      	strb	r3, [r6, #0]
    4fa8:	0039      	movs	r1, r7
    4faa:	f7ff faef 	bl	458c <__udivsi3>
    4fae:	1e05      	subs	r5, r0, #0
    4fb0:	d1f1      	bne.n	4f96 <_printf_i+0x1d6>
    4fb2:	2f08      	cmp	r7, #8
    4fb4:	d109      	bne.n	4fca <_printf_i+0x20a>
    4fb6:	6823      	ldr	r3, [r4, #0]
    4fb8:	07db      	lsls	r3, r3, #31
    4fba:	d506      	bpl.n	4fca <_printf_i+0x20a>
    4fbc:	6863      	ldr	r3, [r4, #4]
    4fbe:	6922      	ldr	r2, [r4, #16]
    4fc0:	4293      	cmp	r3, r2
    4fc2:	dc02      	bgt.n	4fca <_printf_i+0x20a>
    4fc4:	2330      	movs	r3, #48	; 0x30
    4fc6:	3e01      	subs	r6, #1
    4fc8:	7033      	strb	r3, [r6, #0]
    4fca:	9b04      	ldr	r3, [sp, #16]
    4fcc:	1b9b      	subs	r3, r3, r6
    4fce:	6123      	str	r3, [r4, #16]
    4fd0:	9b07      	ldr	r3, [sp, #28]
    4fd2:	aa09      	add	r2, sp, #36	; 0x24
    4fd4:	9300      	str	r3, [sp, #0]
    4fd6:	0021      	movs	r1, r4
    4fd8:	9b06      	ldr	r3, [sp, #24]
    4fda:	9805      	ldr	r0, [sp, #20]
    4fdc:	f7ff fe82 	bl	4ce4 <_printf_common>
    4fe0:	1c43      	adds	r3, r0, #1
    4fe2:	d1b3      	bne.n	4f4c <_printf_i+0x18c>
    4fe4:	2001      	movs	r0, #1
    4fe6:	4240      	negs	r0, r0
    4fe8:	b00b      	add	sp, #44	; 0x2c
    4fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fec:	000055c2 	.word	0x000055c2
    4ff0:	000055b1 	.word	0x000055b1

00004ff4 <_sbrk_r>:
    4ff4:	2300      	movs	r3, #0
    4ff6:	b570      	push	{r4, r5, r6, lr}
    4ff8:	4c06      	ldr	r4, [pc, #24]	; (5014 <_sbrk_r+0x20>)
    4ffa:	0005      	movs	r5, r0
    4ffc:	0008      	movs	r0, r1
    4ffe:	6023      	str	r3, [r4, #0]
    5000:	f7fc fdfc 	bl	1bfc <_sbrk>
    5004:	1c43      	adds	r3, r0, #1
    5006:	d103      	bne.n	5010 <_sbrk_r+0x1c>
    5008:	6823      	ldr	r3, [r4, #0]
    500a:	2b00      	cmp	r3, #0
    500c:	d000      	beq.n	5010 <_sbrk_r+0x1c>
    500e:	602b      	str	r3, [r5, #0]
    5010:	bd70      	pop	{r4, r5, r6, pc}
    5012:	46c0      	nop			; (mov r8, r8)
    5014:	200001f8 	.word	0x200001f8

00005018 <memchr>:
    5018:	b2c9      	uxtb	r1, r1
    501a:	1882      	adds	r2, r0, r2
    501c:	4290      	cmp	r0, r2
    501e:	d101      	bne.n	5024 <memchr+0xc>
    5020:	2000      	movs	r0, #0
    5022:	4770      	bx	lr
    5024:	7803      	ldrb	r3, [r0, #0]
    5026:	428b      	cmp	r3, r1
    5028:	d0fb      	beq.n	5022 <memchr+0xa>
    502a:	3001      	adds	r0, #1
    502c:	e7f6      	b.n	501c <memchr+0x4>

0000502e <memcpy>:
    502e:	2300      	movs	r3, #0
    5030:	b510      	push	{r4, lr}
    5032:	429a      	cmp	r2, r3
    5034:	d100      	bne.n	5038 <memcpy+0xa>
    5036:	bd10      	pop	{r4, pc}
    5038:	5ccc      	ldrb	r4, [r1, r3]
    503a:	54c4      	strb	r4, [r0, r3]
    503c:	3301      	adds	r3, #1
    503e:	e7f8      	b.n	5032 <memcpy+0x4>

00005040 <memmove>:
    5040:	b510      	push	{r4, lr}
    5042:	4288      	cmp	r0, r1
    5044:	d902      	bls.n	504c <memmove+0xc>
    5046:	188b      	adds	r3, r1, r2
    5048:	4298      	cmp	r0, r3
    504a:	d308      	bcc.n	505e <memmove+0x1e>
    504c:	2300      	movs	r3, #0
    504e:	429a      	cmp	r2, r3
    5050:	d007      	beq.n	5062 <memmove+0x22>
    5052:	5ccc      	ldrb	r4, [r1, r3]
    5054:	54c4      	strb	r4, [r0, r3]
    5056:	3301      	adds	r3, #1
    5058:	e7f9      	b.n	504e <memmove+0xe>
    505a:	5c8b      	ldrb	r3, [r1, r2]
    505c:	5483      	strb	r3, [r0, r2]
    505e:	3a01      	subs	r2, #1
    5060:	d2fb      	bcs.n	505a <memmove+0x1a>
    5062:	bd10      	pop	{r4, pc}

00005064 <__malloc_lock>:
    5064:	4770      	bx	lr

00005066 <__malloc_unlock>:
    5066:	4770      	bx	lr

00005068 <_free_r>:
    5068:	b570      	push	{r4, r5, r6, lr}
    506a:	0005      	movs	r5, r0
    506c:	2900      	cmp	r1, #0
    506e:	d010      	beq.n	5092 <_free_r+0x2a>
    5070:	1f0c      	subs	r4, r1, #4
    5072:	6823      	ldr	r3, [r4, #0]
    5074:	2b00      	cmp	r3, #0
    5076:	da00      	bge.n	507a <_free_r+0x12>
    5078:	18e4      	adds	r4, r4, r3
    507a:	0028      	movs	r0, r5
    507c:	f7ff fff2 	bl	5064 <__malloc_lock>
    5080:	4a1d      	ldr	r2, [pc, #116]	; (50f8 <_free_r+0x90>)
    5082:	6813      	ldr	r3, [r2, #0]
    5084:	2b00      	cmp	r3, #0
    5086:	d105      	bne.n	5094 <_free_r+0x2c>
    5088:	6063      	str	r3, [r4, #4]
    508a:	6014      	str	r4, [r2, #0]
    508c:	0028      	movs	r0, r5
    508e:	f7ff ffea 	bl	5066 <__malloc_unlock>
    5092:	bd70      	pop	{r4, r5, r6, pc}
    5094:	42a3      	cmp	r3, r4
    5096:	d909      	bls.n	50ac <_free_r+0x44>
    5098:	6821      	ldr	r1, [r4, #0]
    509a:	1860      	adds	r0, r4, r1
    509c:	4283      	cmp	r3, r0
    509e:	d1f3      	bne.n	5088 <_free_r+0x20>
    50a0:	6818      	ldr	r0, [r3, #0]
    50a2:	685b      	ldr	r3, [r3, #4]
    50a4:	1841      	adds	r1, r0, r1
    50a6:	6021      	str	r1, [r4, #0]
    50a8:	e7ee      	b.n	5088 <_free_r+0x20>
    50aa:	0013      	movs	r3, r2
    50ac:	685a      	ldr	r2, [r3, #4]
    50ae:	2a00      	cmp	r2, #0
    50b0:	d001      	beq.n	50b6 <_free_r+0x4e>
    50b2:	42a2      	cmp	r2, r4
    50b4:	d9f9      	bls.n	50aa <_free_r+0x42>
    50b6:	6819      	ldr	r1, [r3, #0]
    50b8:	1858      	adds	r0, r3, r1
    50ba:	42a0      	cmp	r0, r4
    50bc:	d10b      	bne.n	50d6 <_free_r+0x6e>
    50be:	6820      	ldr	r0, [r4, #0]
    50c0:	1809      	adds	r1, r1, r0
    50c2:	1858      	adds	r0, r3, r1
    50c4:	6019      	str	r1, [r3, #0]
    50c6:	4282      	cmp	r2, r0
    50c8:	d1e0      	bne.n	508c <_free_r+0x24>
    50ca:	6810      	ldr	r0, [r2, #0]
    50cc:	6852      	ldr	r2, [r2, #4]
    50ce:	1841      	adds	r1, r0, r1
    50d0:	6019      	str	r1, [r3, #0]
    50d2:	605a      	str	r2, [r3, #4]
    50d4:	e7da      	b.n	508c <_free_r+0x24>
    50d6:	42a0      	cmp	r0, r4
    50d8:	d902      	bls.n	50e0 <_free_r+0x78>
    50da:	230c      	movs	r3, #12
    50dc:	602b      	str	r3, [r5, #0]
    50de:	e7d5      	b.n	508c <_free_r+0x24>
    50e0:	6821      	ldr	r1, [r4, #0]
    50e2:	1860      	adds	r0, r4, r1
    50e4:	4282      	cmp	r2, r0
    50e6:	d103      	bne.n	50f0 <_free_r+0x88>
    50e8:	6810      	ldr	r0, [r2, #0]
    50ea:	6852      	ldr	r2, [r2, #4]
    50ec:	1841      	adds	r1, r0, r1
    50ee:	6021      	str	r1, [r4, #0]
    50f0:	6062      	str	r2, [r4, #4]
    50f2:	605c      	str	r4, [r3, #4]
    50f4:	e7ca      	b.n	508c <_free_r+0x24>
    50f6:	46c0      	nop			; (mov r8, r8)
    50f8:	20000184 	.word	0x20000184

000050fc <_realloc_r>:
    50fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50fe:	0007      	movs	r7, r0
    5100:	000d      	movs	r5, r1
    5102:	0016      	movs	r6, r2
    5104:	2900      	cmp	r1, #0
    5106:	d105      	bne.n	5114 <_realloc_r+0x18>
    5108:	0011      	movs	r1, r2
    510a:	f7ff fc27 	bl	495c <_malloc_r>
    510e:	0004      	movs	r4, r0
    5110:	0020      	movs	r0, r4
    5112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5114:	2a00      	cmp	r2, #0
    5116:	d103      	bne.n	5120 <_realloc_r+0x24>
    5118:	f7ff ffa6 	bl	5068 <_free_r>
    511c:	0034      	movs	r4, r6
    511e:	e7f7      	b.n	5110 <_realloc_r+0x14>
    5120:	f000 f812 	bl	5148 <_malloc_usable_size_r>
    5124:	002c      	movs	r4, r5
    5126:	4286      	cmp	r6, r0
    5128:	d9f2      	bls.n	5110 <_realloc_r+0x14>
    512a:	0031      	movs	r1, r6
    512c:	0038      	movs	r0, r7
    512e:	f7ff fc15 	bl	495c <_malloc_r>
    5132:	1e04      	subs	r4, r0, #0
    5134:	d0ec      	beq.n	5110 <_realloc_r+0x14>
    5136:	0029      	movs	r1, r5
    5138:	0032      	movs	r2, r6
    513a:	f7ff ff78 	bl	502e <memcpy>
    513e:	0029      	movs	r1, r5
    5140:	0038      	movs	r0, r7
    5142:	f7ff ff91 	bl	5068 <_free_r>
    5146:	e7e3      	b.n	5110 <_realloc_r+0x14>

00005148 <_malloc_usable_size_r>:
    5148:	1f0b      	subs	r3, r1, #4
    514a:	681b      	ldr	r3, [r3, #0]
    514c:	1f18      	subs	r0, r3, #4
    514e:	2b00      	cmp	r3, #0
    5150:	da01      	bge.n	5156 <_malloc_usable_size_r+0xe>
    5152:	580b      	ldr	r3, [r1, r0]
    5154:	18c0      	adds	r0, r0, r3
    5156:	4770      	bx	lr
    5158:	682f2e2e 	.word	0x682f2e2e
    515c:	702f6c70 	.word	0x702f6c70
    5160:	2f74726f 	.word	0x2f74726f
    5164:	5f6c7068 	.word	0x5f6c7068
    5168:	6f697067 	.word	0x6f697067
    516c:	7361625f 	.word	0x7361625f
    5170:	00682e65 	.word	0x00682e65
    5174:	682f2e2e 	.word	0x682f2e2e
    5178:	702f6c70 	.word	0x702f6c70
    517c:	70682f6d 	.word	0x70682f6d
    5180:	6d705f6c 	.word	0x6d705f6c
    5184:	7361625f 	.word	0x7361625f
    5188:	00682e65 	.word	0x00682e65
    518c:	00000dd8 	.word	0x00000dd8
    5190:	00000da2 	.word	0x00000da2
    5194:	00000da8 	.word	0x00000da8
    5198:	00000da2 	.word	0x00000da2
    519c:	00000dae 	.word	0x00000dae
    51a0:	00000da2 	.word	0x00000da2
    51a4:	00000dae 	.word	0x00000dae
    51a8:	00000da2 	.word	0x00000da2
    51ac:	00000da2 	.word	0x00000da2
    51b0:	00000dae 	.word	0x00000dae
    51b4:	00000da2 	.word	0x00000da2
    51b8:	00000dae 	.word	0x00000dae
    51bc:	00000da2 	.word	0x00000da2
    51c0:	00000ddc 	.word	0x00000ddc
    51c4:	00000dc6 	.word	0x00000dc6
    51c8:	00000dcc 	.word	0x00000dcc
    51cc:	00000dc6 	.word	0x00000dc6
    51d0:	00000dd2 	.word	0x00000dd2
    51d4:	00000dc6 	.word	0x00000dc6
    51d8:	00000dd2 	.word	0x00000dd2
    51dc:	00000dc6 	.word	0x00000dc6
    51e0:	00000dc6 	.word	0x00000dc6
    51e4:	00000dd2 	.word	0x00000dd2
    51e8:	00000dc6 	.word	0x00000dc6
    51ec:	00000dd2 	.word	0x00000dd2
    51f0:	00000dc6 	.word	0x00000dc6
    51f4:	0000114e 	.word	0x0000114e
    51f8:	000010c2 	.word	0x000010c2
    51fc:	000010d2 	.word	0x000010d2
    5200:	000010e8 	.word	0x000010e8
    5204:	000010fc 	.word	0x000010fc
    5208:	00001120 	.word	0x00001120
    520c:	0000126c 	.word	0x0000126c
    5210:	000011cc 	.word	0x000011cc
    5214:	00001200 	.word	0x00001200
    5218:	0000122a 	.word	0x0000122a
    521c:	0000124a 	.word	0x0000124a
    5220:	00001260 	.word	0x00001260
    5224:	0000126c 	.word	0x0000126c
    5228:	682f2e2e 	.word	0x682f2e2e
    522c:	732f6c61 	.word	0x732f6c61
    5230:	682f6372 	.word	0x682f6372
    5234:	635f6c61 	.word	0x635f6c61
    5238:	6e656c61 	.word	0x6e656c61
    523c:	2e726164 	.word	0x2e726164
    5240:	00000063 	.word	0x00000063
    5244:	682f2e2e 	.word	0x682f2e2e
    5248:	732f6c61 	.word	0x732f6c61
    524c:	682f6372 	.word	0x682f6372
    5250:	755f6c61 	.word	0x755f6c61
    5254:	74726173 	.word	0x74726173
    5258:	7973615f 	.word	0x7973615f
    525c:	632e636e 	.word	0x632e636e
    5260:	00000000 	.word	0x00000000
    5264:	682f2e2e 	.word	0x682f2e2e
    5268:	752f6c61 	.word	0x752f6c61
    526c:	736c6974 	.word	0x736c6974
    5270:	6372732f 	.word	0x6372732f
    5274:	6974752f 	.word	0x6974752f
    5278:	725f736c 	.word	0x725f736c
    527c:	62676e69 	.word	0x62676e69
    5280:	65666675 	.word	0x65666675
    5284:	00632e72 	.word	0x00632e72

00005288 <_map>:
    5288:	0000000f 0000000f 682f2e2e 652f6c70     ........../hpl/e
    5298:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    52a8:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    52b8:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
    52c8:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    52d8:	0000632e                                .c..

000052dc <sercomspi_regs>:
	...
    52f0:	3d3d0a0d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ..==============
    5300:	0a0d3d3d 72617473 676e6974 5f756d20     ==..starting mu_
    5310:	74726f70 7365745f 000a0d74 636e7973     port_test...sync
    5320:	72657320 206c6169 74697277 000a0d65      serial write...
    5330:	6e797361 65732063 6c616972 69727720     async serial wri
    5340:	0a0d6574 00000000 656d6974 66656220     te......time bef
    5350:	2065726f 00207369 00000a0d 706f6f6c     ore is .....loop
    5360:	20676e69 20726f66 20352e32 6f636573     ing for 2.5 seco
    5370:	2e73646e 00002e2e 656e6f64 7420202e     nds.....done.  t
    5380:	20656d69 65746661 73692072 00000020     ime after is ...
    5390:	74696177 20676e69 20352e32 6f636573     waiting 2.5 seco
    53a0:	2073646e 20726f66 20435452 6374616d     nds for RTC matc
    53b0:	2e2e2e68 00000000 656e6f64 7420202e     h.......done.  t
    53c0:	20656d69 6e207369 0020776f 73616c66     ime is now .flas
    53d0:	676e6968 44454c20 726f6620 352e3220     hing LED for 2.5
    53e0:	63657320 73646e6f 002e2e2e 74696177      seconds....wait
    53f0:	20676e69 20726f66 74747562 70206e6f     ing for button p
    5400:	73736572 79732820 7268636e 756f6e6f     ress (synchronou
    5410:	2e2e2973 0000002e 65636572 64657669     s)......received
    5420:	74756220 206e6f74 73657270 0a0d2e73      button press...
    5430:	00000000 74696177 20676e69 20726f66     ....waiting for 
    5440:	74747562 70206e6f 73736572 73612820     button press (as
    5450:	68636e79 6f6e6f72 2e297375 00002e2e     ynchronous).....
    5460:	74696177 20676e69 20726f66 6279656b     waiting for keyb
    5470:	6472616f 706e6920 28207475 636e7973     oard input (sync
    5480:	6e6f7268 2973756f 002e2e2e 65636572     hronous)....rece
    5490:	64657669 63252720 000a0d27 74696177     ived '%c'...wait
    54a0:	20676e69 20726f66 6279656b 6472616f     ing for keyboard
    54b0:	706e6920 28207475 6e797361 6f726863      input (asynchro
    54c0:	73756f6e 2e2e2e29 00000000 65656c73     nous).......slee
    54d0:	676e6970 726f6620 352e3220 63657320     ping for 2.5 sec
    54e0:	73646e6f 002e2e2e 65656c73 676e6970     onds....sleeping
    54f0:	746e7520 62206c69 6f747475 7270206e      until button pr
    5500:	2e737365 00002e2e 20646e65 6d20666f     ess.....end of m
    5510:	6f705f75 745f7472 0d747365 3d3d3d0a     u_port_test..===
    5520:	3d3d3d3d 3d3d3d3d 3d3d3d3d 000a0d3d     =============...
    5530:	656d6974 25203d20 736d2064 00000000     time = %d ms....

00005540 <__sf_fake_stderr>:
	...

00005560 <__sf_fake_stdin>:
	...

00005580 <__sf_fake_stdout>:
	...
    55a0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    55b0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    55c0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    55d0:	00006665                                ef..

000055d4 <_init>:
    55d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55d6:	46c0      	nop			; (mov r8, r8)
    55d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    55da:	bc08      	pop	{r3}
    55dc:	469e      	mov	lr, r3
    55de:	4770      	bx	lr

000055e0 <__init_array_start>:
    55e0:	000000dd 	.word	0x000000dd

000055e4 <_fini>:
    55e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55e6:	46c0      	nop			; (mov r8, r8)
    55e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    55ea:	bc08      	pop	{r3}
    55ec:	469e      	mov	lr, r3
    55ee:	4770      	bx	lr

000055f0 <__fini_array_start>:
    55f0:	000000b5 	.word	0x000000b5
