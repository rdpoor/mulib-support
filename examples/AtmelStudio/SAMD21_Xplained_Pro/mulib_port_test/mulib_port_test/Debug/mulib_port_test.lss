
mulib_port_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026ac  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  000026ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000120  20000064  00002710  00020064  2**2
                  ALLOC
  3 .stack        00002004  20000184  00002830  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00028d9e  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003525  00000000  00000000  00048e83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000cecb  00000000  00000000  0004c3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bb8  00000000  00000000  00059273  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001158  00000000  00000000  00059e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a611  00000000  00000000  0005af83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010573  00000000  00000000  00075594  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a8f9  00000000  00000000  00085b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000021dc  00000000  00000000  00110400  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 21 00 20 25 01 00 00 21 01 00 00 21 01 00 00     .!. %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      4c:	b9 0d 00 00 e9 0a 00 00 21 01 00 00 21 01 00 00     ........!...!...
      5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      6c:	21 01 00 00 95 0f 00 00 21 01 00 00 21 01 00 00     !.......!...!...
      7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      8c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	000026ac 	.word	0x000026ac

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	000026ac 	.word	0x000026ac
     10c:	000026ac 	.word	0x000026ac
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	0000033d 	.word	0x0000033d

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
     124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     126:	4a2a      	ldr	r2, [pc, #168]	; (1d0 <Reset_Handler+0xac>)
     128:	4b2a      	ldr	r3, [pc, #168]	; (1d4 <Reset_Handler+0xb0>)
     12a:	429a      	cmp	r2, r3
     12c:	d011      	beq.n	152 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     12e:	001a      	movs	r2, r3
     130:	4b29      	ldr	r3, [pc, #164]	; (1d8 <Reset_Handler+0xb4>)
     132:	429a      	cmp	r2, r3
     134:	d20d      	bcs.n	152 <Reset_Handler+0x2e>
     136:	4a29      	ldr	r2, [pc, #164]	; (1dc <Reset_Handler+0xb8>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xb0>)
     146:	4922      	ldr	r1, [pc, #136]	; (1d0 <Reset_Handler+0xac>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     152:	4a23      	ldr	r2, [pc, #140]	; (1e0 <Reset_Handler+0xbc>)
     154:	4b23      	ldr	r3, [pc, #140]	; (1e4 <Reset_Handler+0xc0>)
     156:	429a      	cmp	r2, r3
     158:	d20a      	bcs.n	170 <Reset_Handler+0x4c>
     15a:	43d3      	mvns	r3, r2
     15c:	4921      	ldr	r1, [pc, #132]	; (1e4 <Reset_Handler+0xc0>)
     15e:	185b      	adds	r3, r3, r1
     160:	2103      	movs	r1, #3
     162:	438b      	bics	r3, r1
     164:	3304      	adds	r3, #4
     166:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     168:	2100      	movs	r1, #0
     16a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     16c:	4293      	cmp	r3, r2
     16e:	d1fc      	bne.n	16a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     170:	4a1d      	ldr	r2, [pc, #116]	; (1e8 <Reset_Handler+0xc4>)
     172:	21ff      	movs	r1, #255	; 0xff
     174:	4b1d      	ldr	r3, [pc, #116]	; (1ec <Reset_Handler+0xc8>)
     176:	438b      	bics	r3, r1
     178:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17a:	39fd      	subs	r1, #253	; 0xfd
     17c:	2390      	movs	r3, #144	; 0x90
     17e:	005b      	lsls	r3, r3, #1
     180:	4a1b      	ldr	r2, [pc, #108]	; (1f0 <Reset_Handler+0xcc>)
     182:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     184:	4a1b      	ldr	r2, [pc, #108]	; (1f4 <Reset_Handler+0xd0>)
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	2503      	movs	r5, #3
     18a:	43ab      	bics	r3, r5
     18c:	2402      	movs	r4, #2
     18e:	4323      	orrs	r3, r4
     190:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     192:	78d3      	ldrb	r3, [r2, #3]
     194:	270c      	movs	r7, #12
     196:	43bb      	bics	r3, r7
     198:	2608      	movs	r6, #8
     19a:	4333      	orrs	r3, r6
     19c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     19e:	4b16      	ldr	r3, [pc, #88]	; (1f8 <Reset_Handler+0xd4>)
     1a0:	7b98      	ldrb	r0, [r3, #14]
     1a2:	2230      	movs	r2, #48	; 0x30
     1a4:	4390      	bics	r0, r2
     1a6:	2220      	movs	r2, #32
     1a8:	4310      	orrs	r0, r2
     1aa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1ac:	7b99      	ldrb	r1, [r3, #14]
     1ae:	43b9      	bics	r1, r7
     1b0:	4331      	orrs	r1, r6
     1b2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b4:	7b9a      	ldrb	r2, [r3, #14]
     1b6:	43aa      	bics	r2, r5
     1b8:	4322      	orrs	r2, r4
     1ba:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1bc:	4a0f      	ldr	r2, [pc, #60]	; (1fc <Reset_Handler+0xd8>)
     1be:	6853      	ldr	r3, [r2, #4]
     1c0:	2180      	movs	r1, #128	; 0x80
     1c2:	430b      	orrs	r3, r1
     1c4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1c6:	4b0e      	ldr	r3, [pc, #56]	; (200 <Reset_Handler+0xdc>)
     1c8:	4798      	blx	r3
        main();
     1ca:	4b0e      	ldr	r3, [pc, #56]	; (204 <Reset_Handler+0xe0>)
     1cc:	4798      	blx	r3
     1ce:	e7fe      	b.n	1ce <Reset_Handler+0xaa>
     1d0:	000026ac 	.word	0x000026ac
     1d4:	20000000 	.word	0x20000000
     1d8:	20000064 	.word	0x20000064
     1dc:	20000004 	.word	0x20000004
     1e0:	20000064 	.word	0x20000064
     1e4:	20000184 	.word	0x20000184
     1e8:	e000ed00 	.word	0xe000ed00
     1ec:	00000000 	.word	0x00000000
     1f0:	41007000 	.word	0x41007000
     1f4:	41005000 	.word	0x41005000
     1f8:	41004800 	.word	0x41004800
     1fc:	41004000 	.word	0x41004000
     200:	00001a49 	.word	0x00001a49
     204:	00001055 	.word	0x00001055

00000208 <EXTERNAL_IRQ_0_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct calendar_descriptor CALENDAR_0;

void EXTERNAL_IRQ_0_init(void)
{
     208:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     20a:	4a10      	ldr	r2, [pc, #64]	; (24c <EXTERNAL_IRQ_0_init+0x44>)
     20c:	4b10      	ldr	r3, [pc, #64]	; (250 <EXTERNAL_IRQ_0_init+0x48>)
     20e:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     210:	22c0      	movs	r2, #192	; 0xc0
     212:	05d2      	lsls	r2, r2, #23
     214:	2080      	movs	r0, #128	; 0x80
     216:	0200      	lsls	r0, r0, #8
     218:	6050      	str	r0, [r2, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     21a:	4b0e      	ldr	r3, [pc, #56]	; (254 <EXTERNAL_IRQ_0_init+0x4c>)
     21c:	490e      	ldr	r1, [pc, #56]	; (258 <EXTERNAL_IRQ_0_init+0x50>)
     21e:	6299      	str	r1, [r3, #40]	; 0x28
     220:	490e      	ldr	r1, [pc, #56]	; (25c <EXTERNAL_IRQ_0_init+0x54>)
     222:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     224:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     226:	214f      	movs	r1, #79	; 0x4f
     228:	5c5c      	ldrb	r4, [r3, r1]
     22a:	2504      	movs	r5, #4
     22c:	432c      	orrs	r4, r5
     22e:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     230:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     232:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     234:	2001      	movs	r0, #1
     236:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     238:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     23c:	3918      	subs	r1, #24
     23e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     240:	300e      	adds	r0, #14
     242:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     244:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(USER_BUTTON_AL, PINMUX_PA15A_EIC_EXTINT15);

	ext_irq_init();
     246:	4b06      	ldr	r3, [pc, #24]	; (260 <EXTERNAL_IRQ_0_init+0x58>)
     248:	4798      	blx	r3
}
     24a:	bd70      	pop	{r4, r5, r6, pc}
     24c:	00004305 	.word	0x00004305
     250:	40000c00 	.word	0x40000c00
     254:	41004400 	.word	0x41004400
     258:	40028000 	.word	0x40028000
     25c:	c0020000 	.word	0xc0020000
     260:	00000455 	.word	0x00000455

00000264 <USART_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     264:	4a04      	ldr	r2, [pc, #16]	; (278 <USART_0_CLOCK_init+0x14>)
     266:	6a13      	ldr	r3, [r2, #32]
     268:	2120      	movs	r1, #32
     26a:	430b      	orrs	r3, r1
     26c:	6213      	str	r3, [r2, #32]
     26e:	4a03      	ldr	r2, [pc, #12]	; (27c <USART_0_CLOCK_init+0x18>)
     270:	4b03      	ldr	r3, [pc, #12]	; (280 <USART_0_CLOCK_init+0x1c>)
     272:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     274:	4770      	bx	lr
     276:	46c0      	nop			; (mov r8, r8)
     278:	40000400 	.word	0x40000400
     27c:	00004017 	.word	0x00004017
     280:	40000c00 	.word	0x40000c00

00000284 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     284:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     286:	4b0e      	ldr	r3, [pc, #56]	; (2c0 <USART_0_PORT_init+0x3c>)
     288:	2256      	movs	r2, #86	; 0x56
     28a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     28c:	2501      	movs	r5, #1
     28e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     290:	2401      	movs	r4, #1
     292:	4321      	orrs	r1, r4
     294:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     296:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     298:	203b      	movs	r0, #59	; 0x3b
     29a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     29c:	3a47      	subs	r2, #71	; 0x47
     29e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     2a0:	3a0d      	subs	r2, #13
     2a2:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2a4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2a6:	2157      	movs	r1, #87	; 0x57
     2a8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2aa:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2ac:	4322      	orrs	r2, r4
     2ae:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2b0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2b2:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2b4:	3948      	subs	r1, #72	; 0x48
     2b6:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2b8:	3111      	adds	r1, #17
     2ba:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2bc:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     2be:	bd30      	pop	{r4, r5, pc}
     2c0:	41004400 	.word	0x41004400

000002c4 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     2c4:	b510      	push	{r4, lr}
     2c6:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     2c8:	4b06      	ldr	r3, [pc, #24]	; (2e4 <USART_0_init+0x20>)
     2ca:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     2cc:	2300      	movs	r3, #0
     2ce:	9300      	str	r3, [sp, #0]
     2d0:	3310      	adds	r3, #16
     2d2:	4a05      	ldr	r2, [pc, #20]	; (2e8 <USART_0_init+0x24>)
     2d4:	4905      	ldr	r1, [pc, #20]	; (2ec <USART_0_init+0x28>)
     2d6:	4806      	ldr	r0, [pc, #24]	; (2f0 <USART_0_init+0x2c>)
     2d8:	4c06      	ldr	r4, [pc, #24]	; (2f4 <USART_0_init+0x30>)
     2da:	47a0      	blx	r4
	USART_0_PORT_init();
     2dc:	4b06      	ldr	r3, [pc, #24]	; (2f8 <USART_0_init+0x34>)
     2de:	4798      	blx	r3
}
     2e0:	b002      	add	sp, #8
     2e2:	bd10      	pop	{r4, pc}
     2e4:	00000265 	.word	0x00000265
     2e8:	20000080 	.word	0x20000080
     2ec:	42001400 	.word	0x42001400
     2f0:	20000130 	.word	0x20000130
     2f4:	0000070d 	.word	0x0000070d
     2f8:	00000285 	.word	0x00000285

000002fc <CALENDAR_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     2fc:	4a04      	ldr	r2, [pc, #16]	; (310 <CALENDAR_0_CLOCK_init+0x14>)
     2fe:	6993      	ldr	r3, [r2, #24]
     300:	2120      	movs	r1, #32
     302:	430b      	orrs	r3, r1
     304:	6193      	str	r3, [r2, #24]
     306:	4a03      	ldr	r2, [pc, #12]	; (314 <CALENDAR_0_CLOCK_init+0x18>)
     308:	4b03      	ldr	r3, [pc, #12]	; (318 <CALENDAR_0_CLOCK_init+0x1c>)
     30a:	805a      	strh	r2, [r3, #2]

void CALENDAR_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
     30c:	4770      	bx	lr
     30e:	46c0      	nop			; (mov r8, r8)
     310:	40000400 	.word	0x40000400
     314:	00004304 	.word	0x00004304
     318:	40000c00 	.word	0x40000c00

0000031c <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     31c:	b510      	push	{r4, lr}
	CALENDAR_0_CLOCK_init();
     31e:	4b03      	ldr	r3, [pc, #12]	; (32c <CALENDAR_0_init+0x10>)
     320:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     322:	4903      	ldr	r1, [pc, #12]	; (330 <CALENDAR_0_init+0x14>)
     324:	4803      	ldr	r0, [pc, #12]	; (334 <CALENDAR_0_init+0x18>)
     326:	4b04      	ldr	r3, [pc, #16]	; (338 <CALENDAR_0_init+0x1c>)
     328:	4798      	blx	r3
}
     32a:	bd10      	pop	{r4, pc}
     32c:	000002fd 	.word	0x000002fd
     330:	40001400 	.word	0x40001400
     334:	20000114 	.word	0x20000114
     338:	000003a9 	.word	0x000003a9

0000033c <system_init>:

void system_init(void)
{
     33c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     33e:	4b0d      	ldr	r3, [pc, #52]	; (374 <system_init+0x38>)
     340:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     342:	23c0      	movs	r3, #192	; 0xc0
     344:	05db      	lsls	r3, r3, #23
     346:	2280      	movs	r2, #128	; 0x80
     348:	05d2      	lsls	r2, r2, #23
     34a:	2198      	movs	r1, #152	; 0x98
     34c:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     34e:	3910      	subs	r1, #16
     350:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     352:	4b09      	ldr	r3, [pc, #36]	; (378 <system_init+0x3c>)
     354:	3120      	adds	r1, #32
     356:	505a      	str	r2, [r3, r1]
     358:	4a08      	ldr	r2, [pc, #32]	; (37c <system_init+0x40>)
     35a:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     35c:	3136      	adds	r1, #54	; 0x36
     35e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     360:	2001      	movs	r0, #1
     362:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     364:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(USER_LED_AL, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(USER_LED_AL, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     366:	4b06      	ldr	r3, [pc, #24]	; (380 <system_init+0x44>)
     368:	4798      	blx	r3

	USART_0_init();
     36a:	4b06      	ldr	r3, [pc, #24]	; (384 <system_init+0x48>)
     36c:	4798      	blx	r3

	CALENDAR_0_init();
     36e:	4b06      	ldr	r3, [pc, #24]	; (388 <system_init+0x4c>)
     370:	4798      	blx	r3
}
     372:	bd10      	pop	{r4, pc}
     374:	000009f5 	.word	0x000009f5
     378:	41004400 	.word	0x41004400
     37c:	c0004000 	.word	0xc0004000
     380:	00000209 	.word	0x00000209
     384:	000002c5 	.word	0x000002c5
     388:	0000031d 	.word	0x0000031d

0000038c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     38c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     390:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     392:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     394:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     398:	4770      	bx	lr

0000039a <atomic_leave_critical>:
     39a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     39e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     3a0:	f383 8810 	msr	PRIMASK, r3
}
     3a4:	4770      	bx	lr
	...

000003a8 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
     3a8:	b570      	push	{r4, r5, r6, lr}
     3aa:	0004      	movs	r4, r0
     3ac:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
     3ae:	1e43      	subs	r3, r0, #1
     3b0:	4198      	sbcs	r0, r3
     3b2:	b2c0      	uxtb	r0, r0
     3b4:	22e0      	movs	r2, #224	; 0xe0
     3b6:	0052      	lsls	r2, r2, #1
     3b8:	4909      	ldr	r1, [pc, #36]	; (3e0 <calendar_init+0x38>)
     3ba:	4b0a      	ldr	r3, [pc, #40]	; (3e4 <calendar_init+0x3c>)
     3bc:	4798      	blx	r3

	if (calendar->device.hw == hw) {
     3be:	6823      	ldr	r3, [r4, #0]
     3c0:	42ab      	cmp	r3, r5
     3c2:	d008      	beq.n	3d6 <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
     3c4:	2b00      	cmp	r3, #0
     3c6:	d108      	bne.n	3da <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
     3c8:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
     3ca:	0020      	movs	r0, r4
     3cc:	4b06      	ldr	r3, [pc, #24]	; (3e8 <calendar_init+0x40>)
     3ce:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
     3d0:	4b06      	ldr	r3, [pc, #24]	; (3ec <calendar_init+0x44>)
     3d2:	6163      	str	r3, [r4, #20]

	return ret;
}
     3d4:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
     3d6:	2000      	movs	r0, #0
     3d8:	e7fc      	b.n	3d4 <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
     3da:	2012      	movs	r0, #18
     3dc:	4240      	negs	r0, r0
     3de:	e7f9      	b.n	3d4 <calendar_init+0x2c>
     3e0:	0000230c 	.word	0x0000230c
     3e4:	000008c1 	.word	0x000008c1
     3e8:	00000cc5 	.word	0x00000cc5
     3ec:	000007b2 	.word	0x000007b2

000003f0 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
     3f0:	b510      	push	{r4, lr}
     3f2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	ASSERT(calendar);
     3f4:	1e43      	subs	r3, r0, #1
     3f6:	4198      	sbcs	r0, r3
     3f8:	b2c0      	uxtb	r0, r0
     3fa:	22e6      	movs	r2, #230	; 0xe6
     3fc:	32ff      	adds	r2, #255	; 0xff
     3fe:	4904      	ldr	r1, [pc, #16]	; (410 <calendar_enable+0x20>)
     400:	4b04      	ldr	r3, [pc, #16]	; (414 <calendar_enable+0x24>)
     402:	4798      	blx	r3

	_calendar_enable(&calendar->device);
     404:	0020      	movs	r0, r4
     406:	4b04      	ldr	r3, [pc, #16]	; (418 <calendar_enable+0x28>)
     408:	4798      	blx	r3

	return ERR_NONE;
}
     40a:	2000      	movs	r0, #0
     40c:	bd10      	pop	{r4, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	0000230c 	.word	0x0000230c
     414:	000008c1 	.word	0x000008c1
     418:	00000d49 	.word	0x00000d49

0000041c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     41c:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     41e:	4b0c      	ldr	r3, [pc, #48]	; (450 <process_ext_irq+0x34>)
     420:	685c      	ldr	r4, [r3, #4]
     422:	42a0      	cmp	r0, r4
     424:	d00e      	beq.n	444 <process_ext_irq+0x28>
     426:	2201      	movs	r2, #1
     428:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     42a:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     42c:	25ff      	movs	r5, #255	; 0xff
     42e:	e003      	b.n	438 <process_ext_irq+0x1c>
     430:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     432:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     434:	085b      	lsrs	r3, r3, #1
     436:	d10a      	bne.n	44e <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     438:	42a0      	cmp	r0, r4
     43a:	d9f9      	bls.n	430 <process_ext_irq+0x14>
	while (upper >= lower) {
     43c:	2a00      	cmp	r2, #0
     43e:	d006      	beq.n	44e <process_ext_irq+0x32>
			lower = middle + 1;
     440:	0031      	movs	r1, r6
     442:	e7f6      	b.n	432 <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     444:	4b02      	ldr	r3, [pc, #8]	; (450 <process_ext_irq+0x34>)
     446:	681b      	ldr	r3, [r3, #0]
     448:	2b00      	cmp	r3, #0
     44a:	d000      	beq.n	44e <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     44c:	4798      	blx	r3
		}
	}
}
     44e:	bd70      	pop	{r4, r5, r6, pc}
     450:	20000090 	.word	0x20000090

00000454 <ext_irq_init>:
{
     454:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     456:	4b05      	ldr	r3, [pc, #20]	; (46c <ext_irq_init+0x18>)
     458:	2201      	movs	r2, #1
     45a:	4252      	negs	r2, r2
     45c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     45e:	2200      	movs	r2, #0
     460:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     462:	4803      	ldr	r0, [pc, #12]	; (470 <ext_irq_init+0x1c>)
     464:	4b03      	ldr	r3, [pc, #12]	; (474 <ext_irq_init+0x20>)
     466:	4798      	blx	r3
}
     468:	bd10      	pop	{r4, pc}
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	20000090 	.word	0x20000090
     470:	0000041d 	.word	0x0000041d
     474:	00000a25 	.word	0x00000a25

00000478 <ext_irq_register>:
{
     478:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     47a:	4b0f      	ldr	r3, [pc, #60]	; (4b8 <ext_irq_register+0x40>)
     47c:	685b      	ldr	r3, [r3, #4]
     47e:	4298      	cmp	r0, r3
     480:	d008      	beq.n	494 <ext_irq_register+0x1c>
	if (NULL == cb) {
     482:	2900      	cmp	r1, #0
     484:	d014      	beq.n	4b0 <ext_irq_register+0x38>
			if (NULL == ext_irqs[i].cb) {
     486:	4b0c      	ldr	r3, [pc, #48]	; (4b8 <ext_irq_register+0x40>)
     488:	681b      	ldr	r3, [r3, #0]
     48a:	2b00      	cmp	r3, #0
     48c:	d009      	beq.n	4a2 <ext_irq_register+0x2a>
		return ERR_INVALID_ARG;
     48e:	200d      	movs	r0, #13
     490:	4240      	negs	r0, r0
     492:	e00c      	b.n	4ae <ext_irq_register+0x36>
			ext_irqs[i].cb = cb;
     494:	4b08      	ldr	r3, [pc, #32]	; (4b8 <ext_irq_register+0x40>)
     496:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     498:	2900      	cmp	r1, #0
     49a:	d105      	bne.n	4a8 <ext_irq_register+0x30>
		return _ext_irq_enable(pin, false);
     49c:	4b07      	ldr	r3, [pc, #28]	; (4bc <ext_irq_register+0x44>)
     49e:	4798      	blx	r3
     4a0:	e005      	b.n	4ae <ext_irq_register+0x36>
				ext_irqs[i].cb  = cb;
     4a2:	4b05      	ldr	r3, [pc, #20]	; (4b8 <ext_irq_register+0x40>)
     4a4:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     4a6:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     4a8:	2101      	movs	r1, #1
     4aa:	4b04      	ldr	r3, [pc, #16]	; (4bc <ext_irq_register+0x44>)
     4ac:	4798      	blx	r3
}
     4ae:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     4b0:	200d      	movs	r0, #13
     4b2:	4240      	negs	r0, r0
     4b4:	e7fb      	b.n	4ae <ext_irq_register+0x36>
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	20000090 	.word	0x20000090
     4bc:	00000abd 	.word	0x00000abd

000004c0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4c0:	b570      	push	{r4, r5, r6, lr}
     4c2:	0006      	movs	r6, r0
     4c4:	000c      	movs	r4, r1
     4c6:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     4c8:	2800      	cmp	r0, #0
     4ca:	d00d      	beq.n	4e8 <io_write+0x28>
     4cc:	0008      	movs	r0, r1
     4ce:	1e43      	subs	r3, r0, #1
     4d0:	4198      	sbcs	r0, r3
     4d2:	b2c0      	uxtb	r0, r0
     4d4:	2234      	movs	r2, #52	; 0x34
     4d6:	4905      	ldr	r1, [pc, #20]	; (4ec <io_write+0x2c>)
     4d8:	4b05      	ldr	r3, [pc, #20]	; (4f0 <io_write+0x30>)
     4da:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     4dc:	6833      	ldr	r3, [r6, #0]
     4de:	002a      	movs	r2, r5
     4e0:	0021      	movs	r1, r4
     4e2:	0030      	movs	r0, r6
     4e4:	4798      	blx	r3
}
     4e6:	bd70      	pop	{r4, r5, r6, pc}
     4e8:	2000      	movs	r0, #0
     4ea:	e7f3      	b.n	4d4 <io_write+0x14>
     4ec:	00002328 	.word	0x00002328
     4f0:	000008c1 	.word	0x000008c1

000004f4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     4f4:	b570      	push	{r4, r5, r6, lr}
     4f6:	0006      	movs	r6, r0
     4f8:	000c      	movs	r4, r1
     4fa:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     4fc:	2800      	cmp	r0, #0
     4fe:	d00d      	beq.n	51c <io_read+0x28>
     500:	0008      	movs	r0, r1
     502:	1e43      	subs	r3, r0, #1
     504:	4198      	sbcs	r0, r3
     506:	b2c0      	uxtb	r0, r0
     508:	223d      	movs	r2, #61	; 0x3d
     50a:	4905      	ldr	r1, [pc, #20]	; (520 <io_read+0x2c>)
     50c:	4b05      	ldr	r3, [pc, #20]	; (524 <io_read+0x30>)
     50e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     510:	6873      	ldr	r3, [r6, #4]
     512:	002a      	movs	r2, r5
     514:	0021      	movs	r1, r4
     516:	0030      	movs	r0, r6
     518:	4798      	blx	r3
}
     51a:	bd70      	pop	{r4, r5, r6, pc}
     51c:	2000      	movs	r0, #0
     51e:	e7f3      	b.n	508 <io_read+0x14>
     520:	00002328 	.word	0x00002328
     524:	000008c1 	.word	0x000008c1

00000528 <sleep>:
 * \retval -1 The requested sleep mode was invalid or not available
 * \retval  0 The operation completed successfully, returned after leaving the
 *            sleep
 */
int sleep(const uint8_t mode)
{
     528:	b510      	push	{r4, lr}
	if (ERR_NONE != _set_sleep_mode(mode))
     52a:	4b05      	ldr	r3, [pc, #20]	; (540 <sleep+0x18>)
     52c:	4798      	blx	r3
     52e:	2800      	cmp	r0, #0
     530:	d103      	bne.n	53a <sleep+0x12>
		return ERR_INVALID_ARG;

	_go_to_sleep();
     532:	4b04      	ldr	r3, [pc, #16]	; (544 <sleep+0x1c>)
     534:	4798      	blx	r3

	return ERR_NONE;
     536:	2000      	movs	r0, #0
}
     538:	bd10      	pop	{r4, pc}
		return ERR_INVALID_ARG;
     53a:	200d      	movs	r0, #13
     53c:	4240      	negs	r0, r0
     53e:	e7fb      	b.n	538 <sleep+0x10>
     540:	00000c0d 	.word	0x00000c0d
     544:	000009ed 	.word	0x000009ed

00000548 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     548:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     54a:	3808      	subs	r0, #8

	descr->stat = 0;
     54c:	2300      	movs	r3, #0
     54e:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     550:	6a43      	ldr	r3, [r0, #36]	; 0x24
     552:	2b00      	cmp	r3, #0
     554:	d000      	beq.n	558 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     556:	4798      	blx	r3
	}
}
     558:	bd10      	pop	{r4, pc}

0000055a <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     55a:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     55c:	3808      	subs	r0, #8

	descr->stat = 0;
     55e:	2300      	movs	r3, #0
     560:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     562:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     564:	2b00      	cmp	r3, #0
     566:	d000      	beq.n	56a <usart_error+0x10>
		descr->usart_cb.error(descr);
     568:	4798      	blx	r3
	}
}
     56a:	bd10      	pop	{r4, pc}

0000056c <usart_fill_rx_buffer>:
{
     56c:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     56e:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     570:	302c      	adds	r0, #44	; 0x2c
     572:	4b04      	ldr	r3, [pc, #16]	; (584 <usart_fill_rx_buffer+0x18>)
     574:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     576:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     578:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     57a:	2b00      	cmp	r3, #0
     57c:	d001      	beq.n	582 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     57e:	0020      	movs	r0, r4
     580:	4798      	blx	r3
}
     582:	bd10      	pop	{r4, pc}
     584:	00000965 	.word	0x00000965

00000588 <usart_async_write>:
{
     588:	b570      	push	{r4, r5, r6, lr}
     58a:	0004      	movs	r4, r0
     58c:	000e      	movs	r6, r1
     58e:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     590:	2800      	cmp	r0, #0
     592:	d01d      	beq.n	5d0 <usart_async_write+0x48>
     594:	2900      	cmp	r1, #0
     596:	d01d      	beq.n	5d4 <usart_async_write+0x4c>
     598:	0010      	movs	r0, r2
     59a:	1e43      	subs	r3, r0, #1
     59c:	4198      	sbcs	r0, r3
     59e:	223c      	movs	r2, #60	; 0x3c
     5a0:	32ff      	adds	r2, #255	; 0xff
     5a2:	490f      	ldr	r1, [pc, #60]	; (5e0 <usart_async_write+0x58>)
     5a4:	4b0f      	ldr	r3, [pc, #60]	; (5e4 <usart_async_write+0x5c>)
     5a6:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     5a8:	2344      	movs	r3, #68	; 0x44
     5aa:	5ae2      	ldrh	r2, [r4, r3]
     5ac:	3308      	adds	r3, #8
     5ae:	5ae3      	ldrh	r3, [r4, r3]
     5b0:	429a      	cmp	r2, r3
     5b2:	d111      	bne.n	5d8 <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
     5b4:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     5b6:	234c      	movs	r3, #76	; 0x4c
     5b8:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     5ba:	2200      	movs	r2, #0
     5bc:	3b08      	subs	r3, #8
     5be:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     5c0:	3b43      	subs	r3, #67	; 0x43
     5c2:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     5c4:	0020      	movs	r0, r4
     5c6:	3008      	adds	r0, #8
     5c8:	4b07      	ldr	r3, [pc, #28]	; (5e8 <usart_async_write+0x60>)
     5ca:	4798      	blx	r3
	return (int32_t)length;
     5cc:	0028      	movs	r0, r5
}
     5ce:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     5d0:	2000      	movs	r0, #0
     5d2:	e7e4      	b.n	59e <usart_async_write+0x16>
     5d4:	2000      	movs	r0, #0
     5d6:	e7e2      	b.n	59e <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     5d8:	201c      	movs	r0, #28
     5da:	4240      	negs	r0, r0
     5dc:	e7f7      	b.n	5ce <usart_async_write+0x46>
     5de:	46c0      	nop			; (mov r8, r8)
     5e0:	0000233c 	.word	0x0000233c
     5e4:	000008c1 	.word	0x000008c1
     5e8:	00000f11 	.word	0x00000f11

000005ec <usart_process_byte_sent>:
{
     5ec:	b570      	push	{r4, r5, r6, lr}
     5ee:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     5f0:	0001      	movs	r1, r0
     5f2:	3908      	subs	r1, #8
     5f4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     5f6:	224c      	movs	r2, #76	; 0x4c
     5f8:	5a8a      	ldrh	r2, [r1, r2]
     5fa:	429a      	cmp	r2, r3
     5fc:	d00c      	beq.n	618 <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     5fe:	000a      	movs	r2, r1
     600:	6c89      	ldr	r1, [r1, #72]	; 0x48
     602:	1c5d      	adds	r5, r3, #1
     604:	2044      	movs	r0, #68	; 0x44
     606:	5215      	strh	r5, [r2, r0]
     608:	5cc9      	ldrb	r1, [r1, r3]
     60a:	0020      	movs	r0, r4
     60c:	4b04      	ldr	r3, [pc, #16]	; (620 <usart_process_byte_sent+0x34>)
     60e:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     610:	0020      	movs	r0, r4
     612:	4b04      	ldr	r3, [pc, #16]	; (624 <usart_process_byte_sent+0x38>)
     614:	4798      	blx	r3
}
     616:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     618:	4b03      	ldr	r3, [pc, #12]	; (628 <usart_process_byte_sent+0x3c>)
     61a:	4798      	blx	r3
}
     61c:	e7fb      	b.n	616 <usart_process_byte_sent+0x2a>
     61e:	46c0      	nop			; (mov r8, r8)
     620:	00000f09 	.word	0x00000f09
     624:	00000f11 	.word	0x00000f11
     628:	00000f19 	.word	0x00000f19

0000062c <usart_async_read>:
{
     62c:	b5f0      	push	{r4, r5, r6, r7, lr}
     62e:	46ce      	mov	lr, r9
     630:	4647      	mov	r7, r8
     632:	b580      	push	{r7, lr}
     634:	b085      	sub	sp, #20
     636:	0005      	movs	r5, r0
     638:	000e      	movs	r6, r1
     63a:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
     63c:	2800      	cmp	r0, #0
     63e:	d015      	beq.n	66c <usart_async_read+0x40>
     640:	2900      	cmp	r1, #0
     642:	d013      	beq.n	66c <usart_async_read+0x40>
     644:	2a00      	cmp	r2, #0
     646:	d12a      	bne.n	69e <usart_async_read+0x72>
     648:	22ac      	movs	r2, #172	; 0xac
     64a:	0052      	lsls	r2, r2, #1
     64c:	4929      	ldr	r1, [pc, #164]	; (6f4 <usart_async_read+0xc8>)
     64e:	2000      	movs	r0, #0
     650:	4b29      	ldr	r3, [pc, #164]	; (6f8 <usart_async_read+0xcc>)
     652:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     654:	a803      	add	r0, sp, #12
     656:	4b29      	ldr	r3, [pc, #164]	; (6fc <usart_async_read+0xd0>)
     658:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     65a:	0028      	movs	r0, r5
     65c:	3034      	adds	r0, #52	; 0x34
     65e:	4b28      	ldr	r3, [pc, #160]	; (700 <usart_async_read+0xd4>)
     660:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     662:	a803      	add	r0, sp, #12
     664:	4b27      	ldr	r3, [pc, #156]	; (704 <usart_async_read+0xd8>)
     666:	4798      	blx	r3
	uint16_t                       was_read = 0;
     668:	2500      	movs	r5, #0
	return (int32_t)was_read;
     66a:	e03c      	b.n	6e6 <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     66c:	22ac      	movs	r2, #172	; 0xac
     66e:	0052      	lsls	r2, r2, #1
     670:	4920      	ldr	r1, [pc, #128]	; (6f4 <usart_async_read+0xc8>)
     672:	2000      	movs	r0, #0
     674:	4b20      	ldr	r3, [pc, #128]	; (6f8 <usart_async_read+0xcc>)
     676:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     678:	a803      	add	r0, sp, #12
     67a:	4b20      	ldr	r3, [pc, #128]	; (6fc <usart_async_read+0xd0>)
     67c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     67e:	3534      	adds	r5, #52	; 0x34
     680:	0028      	movs	r0, r5
     682:	9501      	str	r5, [sp, #4]
     684:	4b1e      	ldr	r3, [pc, #120]	; (700 <usart_async_read+0xd4>)
     686:	4798      	blx	r3
     688:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     68a:	a803      	add	r0, sp, #12
     68c:	4b1d      	ldr	r3, [pc, #116]	; (704 <usart_async_read+0xd8>)
     68e:	4798      	blx	r3
	uint16_t                       was_read = 0;
     690:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     692:	4643      	mov	r3, r8
     694:	2b00      	cmp	r3, #0
     696:	d026      	beq.n	6e6 <usart_async_read+0xba>
     698:	2f00      	cmp	r7, #0
     69a:	d116      	bne.n	6ca <usart_async_read+0x9e>
     69c:	e023      	b.n	6e6 <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     69e:	22ac      	movs	r2, #172	; 0xac
     6a0:	0052      	lsls	r2, r2, #1
     6a2:	4914      	ldr	r1, [pc, #80]	; (6f4 <usart_async_read+0xc8>)
     6a4:	2001      	movs	r0, #1
     6a6:	4b14      	ldr	r3, [pc, #80]	; (6f8 <usart_async_read+0xcc>)
     6a8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     6aa:	a803      	add	r0, sp, #12
     6ac:	4b13      	ldr	r3, [pc, #76]	; (6fc <usart_async_read+0xd0>)
     6ae:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     6b0:	3534      	adds	r5, #52	; 0x34
     6b2:	0028      	movs	r0, r5
     6b4:	9501      	str	r5, [sp, #4]
     6b6:	4b12      	ldr	r3, [pc, #72]	; (700 <usart_async_read+0xd4>)
     6b8:	4798      	blx	r3
     6ba:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     6bc:	a803      	add	r0, sp, #12
     6be:	4b11      	ldr	r3, [pc, #68]	; (704 <usart_async_read+0xd8>)
     6c0:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     6c2:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
     6c4:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     6c6:	2b00      	cmp	r3, #0
     6c8:	d00d      	beq.n	6e6 <usart_async_read+0xba>
{
     6ca:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     6cc:	4b0e      	ldr	r3, [pc, #56]	; (708 <usart_async_read+0xdc>)
     6ce:	4699      	mov	r9, r3
     6d0:	1c65      	adds	r5, r4, #1
     6d2:	b2ad      	uxth	r5, r5
     6d4:	1931      	adds	r1, r6, r4
     6d6:	9801      	ldr	r0, [sp, #4]
     6d8:	47c8      	blx	r9
     6da:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     6dc:	4544      	cmp	r4, r8
     6de:	d202      	bcs.n	6e6 <usart_async_read+0xba>
     6e0:	b2a3      	uxth	r3, r4
     6e2:	429f      	cmp	r7, r3
     6e4:	d8f4      	bhi.n	6d0 <usart_async_read+0xa4>
}
     6e6:	0028      	movs	r0, r5
     6e8:	b005      	add	sp, #20
     6ea:	bc0c      	pop	{r2, r3}
     6ec:	4690      	mov	r8, r2
     6ee:	4699      	mov	r9, r3
     6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	0000233c 	.word	0x0000233c
     6f8:	000008c1 	.word	0x000008c1
     6fc:	0000038d 	.word	0x0000038d
     700:	000009a5 	.word	0x000009a5
     704:	0000039b 	.word	0x0000039b
     708:	0000091d 	.word	0x0000091d

0000070c <usart_async_init>:
{
     70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     70e:	0004      	movs	r4, r0
     710:	000d      	movs	r5, r1
     712:	0016      	movs	r6, r2
     714:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     716:	2800      	cmp	r0, #0
     718:	d026      	beq.n	768 <usart_async_init+0x5c>
     71a:	2900      	cmp	r1, #0
     71c:	d026      	beq.n	76c <usart_async_init+0x60>
     71e:	2a00      	cmp	r2, #0
     720:	d026      	beq.n	770 <usart_async_init+0x64>
     722:	0018      	movs	r0, r3
     724:	1e43      	subs	r3, r0, #1
     726:	4198      	sbcs	r0, r3
     728:	223a      	movs	r2, #58	; 0x3a
     72a:	4914      	ldr	r1, [pc, #80]	; (77c <usart_async_init+0x70>)
     72c:	4b14      	ldr	r3, [pc, #80]	; (780 <usart_async_init+0x74>)
     72e:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     730:	0020      	movs	r0, r4
     732:	3034      	adds	r0, #52	; 0x34
     734:	003a      	movs	r2, r7
     736:	0031      	movs	r1, r6
     738:	4b12      	ldr	r3, [pc, #72]	; (784 <usart_async_init+0x78>)
     73a:	4798      	blx	r3
     73c:	2800      	cmp	r0, #0
     73e:	d119      	bne.n	774 <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
     740:	0020      	movs	r0, r4
     742:	3008      	adds	r0, #8
     744:	0029      	movs	r1, r5
     746:	4b10      	ldr	r3, [pc, #64]	; (788 <usart_async_init+0x7c>)
     748:	4798      	blx	r3
	if (init_status) {
     74a:	2800      	cmp	r0, #0
     74c:	d10b      	bne.n	766 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     74e:	4b0f      	ldr	r3, [pc, #60]	; (78c <usart_async_init+0x80>)
     750:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     752:	4b0f      	ldr	r3, [pc, #60]	; (790 <usart_async_init+0x84>)
     754:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     756:	4b0f      	ldr	r3, [pc, #60]	; (794 <usart_async_init+0x88>)
     758:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     75a:	4b0f      	ldr	r3, [pc, #60]	; (798 <usart_async_init+0x8c>)
     75c:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     75e:	4b0f      	ldr	r3, [pc, #60]	; (79c <usart_async_init+0x90>)
     760:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     762:	4b0f      	ldr	r3, [pc, #60]	; (7a0 <usart_async_init+0x94>)
     764:	6163      	str	r3, [r4, #20]
}
     766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     768:	2000      	movs	r0, #0
     76a:	e7dd      	b.n	728 <usart_async_init+0x1c>
     76c:	2000      	movs	r0, #0
     76e:	e7db      	b.n	728 <usart_async_init+0x1c>
     770:	2000      	movs	r0, #0
     772:	e7d9      	b.n	728 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     774:	200d      	movs	r0, #13
     776:	4240      	negs	r0, r0
     778:	e7f5      	b.n	766 <usart_async_init+0x5a>
     77a:	46c0      	nop			; (mov r8, r8)
     77c:	0000233c 	.word	0x0000233c
     780:	000008c1 	.word	0x000008c1
     784:	000008c9 	.word	0x000008c9
     788:	00000e79 	.word	0x00000e79
     78c:	0000062d 	.word	0x0000062d
     790:	00000589 	.word	0x00000589
     794:	000005ed 	.word	0x000005ed
     798:	0000056d 	.word	0x0000056d
     79c:	00000549 	.word	0x00000549
     7a0:	0000055b 	.word	0x0000055b

000007a4 <usart_async_enable>:
{
     7a4:	b510      	push	{r4, lr}
     7a6:	0004      	movs	r4, r0
	ASSERT(descr);
     7a8:	1e43      	subs	r3, r0, #1
     7aa:	4198      	sbcs	r0, r3
     7ac:	b2c0      	uxtb	r0, r0
     7ae:	2261      	movs	r2, #97	; 0x61
     7b0:	4904      	ldr	r1, [pc, #16]	; (7c4 <usart_async_enable+0x20>)
     7b2:	4b05      	ldr	r3, [pc, #20]	; (7c8 <usart_async_enable+0x24>)
     7b4:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     7b6:	0020      	movs	r0, r4
     7b8:	3008      	adds	r0, #8
     7ba:	4b04      	ldr	r3, [pc, #16]	; (7cc <usart_async_enable+0x28>)
     7bc:	4798      	blx	r3
}
     7be:	2000      	movs	r0, #0
     7c0:	bd10      	pop	{r4, pc}
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	0000233c 	.word	0x0000233c
     7c8:	000008c1 	.word	0x000008c1
     7cc:	00000ef5 	.word	0x00000ef5

000007d0 <usart_async_get_io_descriptor>:
{
     7d0:	b570      	push	{r4, r5, r6, lr}
     7d2:	0004      	movs	r4, r0
     7d4:	000d      	movs	r5, r1
	ASSERT(descr && io);
     7d6:	2800      	cmp	r0, #0
     7d8:	d00a      	beq.n	7f0 <usart_async_get_io_descriptor+0x20>
     7da:	0008      	movs	r0, r1
     7dc:	1e43      	subs	r3, r0, #1
     7de:	4198      	sbcs	r0, r3
     7e0:	b2c0      	uxtb	r0, r0
     7e2:	2277      	movs	r2, #119	; 0x77
     7e4:	4903      	ldr	r1, [pc, #12]	; (7f4 <usart_async_get_io_descriptor+0x24>)
     7e6:	4b04      	ldr	r3, [pc, #16]	; (7f8 <usart_async_get_io_descriptor+0x28>)
     7e8:	4798      	blx	r3
	*io = &descr->io;
     7ea:	602c      	str	r4, [r5, #0]
}
     7ec:	2000      	movs	r0, #0
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	2000      	movs	r0, #0
     7f2:	e7f6      	b.n	7e2 <usart_async_get_io_descriptor+0x12>
     7f4:	0000233c 	.word	0x0000233c
     7f8:	000008c1 	.word	0x000008c1

000007fc <usart_async_register_callback>:
{
     7fc:	b570      	push	{r4, r5, r6, lr}
     7fe:	0005      	movs	r5, r0
     800:	000e      	movs	r6, r1
     802:	0014      	movs	r4, r2
	ASSERT(descr);
     804:	1e43      	subs	r3, r0, #1
     806:	4198      	sbcs	r0, r3
     808:	b2c0      	uxtb	r0, r0
     80a:	2283      	movs	r2, #131	; 0x83
     80c:	4916      	ldr	r1, [pc, #88]	; (868 <usart_async_register_callback+0x6c>)
     80e:	4b17      	ldr	r3, [pc, #92]	; (86c <usart_async_register_callback+0x70>)
     810:	4798      	blx	r3
	switch (type) {
     812:	2e01      	cmp	r6, #1
     814:	d011      	beq.n	83a <usart_async_register_callback+0x3e>
     816:	2e00      	cmp	r6, #0
     818:	d004      	beq.n	824 <usart_async_register_callback+0x28>
     81a:	2e02      	cmp	r6, #2
     81c:	d018      	beq.n	850 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
     81e:	200d      	movs	r0, #13
     820:	4240      	negs	r0, r0
     822:	e009      	b.n	838 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
     824:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     826:	1e62      	subs	r2, r4, #1
     828:	4194      	sbcs	r4, r2
     82a:	b2e2      	uxtb	r2, r4
     82c:	0028      	movs	r0, r5
     82e:	3008      	adds	r0, #8
     830:	2101      	movs	r1, #1
     832:	4b0f      	ldr	r3, [pc, #60]	; (870 <usart_async_register_callback+0x74>)
     834:	4798      	blx	r3
	return ERR_NONE;
     836:	2000      	movs	r0, #0
}
     838:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     83a:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     83c:	1e62      	subs	r2, r4, #1
     83e:	4194      	sbcs	r4, r2
     840:	b2e2      	uxtb	r2, r4
     842:	0028      	movs	r0, r5
     844:	3008      	adds	r0, #8
     846:	2102      	movs	r1, #2
     848:	4b09      	ldr	r3, [pc, #36]	; (870 <usart_async_register_callback+0x74>)
     84a:	4798      	blx	r3
	return ERR_NONE;
     84c:	2000      	movs	r0, #0
		break;
     84e:	e7f3      	b.n	838 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
     850:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     852:	1e62      	subs	r2, r4, #1
     854:	4194      	sbcs	r4, r2
     856:	b2e2      	uxtb	r2, r4
     858:	0028      	movs	r0, r5
     85a:	3008      	adds	r0, #8
     85c:	2103      	movs	r1, #3
     85e:	4b04      	ldr	r3, [pc, #16]	; (870 <usart_async_register_callback+0x74>)
     860:	4798      	blx	r3
	return ERR_NONE;
     862:	2000      	movs	r0, #0
		break;
     864:	e7e8      	b.n	838 <usart_async_register_callback+0x3c>
     866:	46c0      	nop			; (mov r8, r8)
     868:	0000233c 	.word	0x0000233c
     86c:	000008c1 	.word	0x000008c1
     870:	00000f21 	.word	0x00000f21

00000874 <usart_async_get_status>:
{
     874:	b570      	push	{r4, r5, r6, lr}
     876:	0004      	movs	r4, r0
     878:	000d      	movs	r5, r1
	ASSERT(descr);
     87a:	1e43      	subs	r3, r0, #1
     87c:	4198      	sbcs	r0, r3
     87e:	b2c0      	uxtb	r0, r0
     880:	220c      	movs	r2, #12
     882:	32ff      	adds	r2, #255	; 0xff
     884:	490b      	ldr	r1, [pc, #44]	; (8b4 <usart_async_get_status+0x40>)
     886:	4b0c      	ldr	r3, [pc, #48]	; (8b8 <usart_async_get_status+0x44>)
     888:	4798      	blx	r3
	if (status) {
     88a:	2d00      	cmp	r5, #0
     88c:	d009      	beq.n	8a2 <usart_async_get_status+0x2e>
		status->flags = *tmp_stat;
     88e:	6b23      	ldr	r3, [r4, #48]	; 0x30
     890:	602b      	str	r3, [r5, #0]
		status->txcnt = *tmp_txcnt;
     892:	2344      	movs	r3, #68	; 0x44
     894:	5ae3      	ldrh	r3, [r4, r3]
     896:	80ab      	strh	r3, [r5, #4]
		status->rxcnt = ringbuffer_num(&descr->rx);
     898:	0020      	movs	r0, r4
     89a:	3034      	adds	r0, #52	; 0x34
     89c:	4b07      	ldr	r3, [pc, #28]	; (8bc <usart_async_get_status+0x48>)
     89e:	4798      	blx	r3
     8a0:	80e8      	strh	r0, [r5, #6]
	if (*tmp_stat & USART_ASYNC_STATUS_BUSY) {
     8a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
     8a4:	07db      	lsls	r3, r3, #31
     8a6:	d401      	bmi.n	8ac <usart_async_get_status+0x38>
	return ERR_NONE;
     8a8:	2000      	movs	r0, #0
}
     8aa:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUSY;
     8ac:	2004      	movs	r0, #4
     8ae:	4240      	negs	r0, r0
     8b0:	e7fb      	b.n	8aa <usart_async_get_status+0x36>
     8b2:	46c0      	nop			; (mov r8, r8)
     8b4:	0000233c 	.word	0x0000233c
     8b8:	000008c1 	.word	0x000008c1
     8bc:	000009a5 	.word	0x000009a5

000008c0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     8c0:	2800      	cmp	r0, #0
     8c2:	d100      	bne.n	8c6 <assert+0x6>
		__asm("BKPT #0");
     8c4:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     8c6:	4770      	bx	lr

000008c8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     8c8:	b570      	push	{r4, r5, r6, lr}
     8ca:	0004      	movs	r4, r0
     8cc:	000e      	movs	r6, r1
     8ce:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     8d0:	2800      	cmp	r0, #0
     8d2:	d00b      	beq.n	8ec <ringbuffer_init+0x24>
     8d4:	2900      	cmp	r1, #0
     8d6:	d018      	beq.n	90a <ringbuffer_init+0x42>
     8d8:	2001      	movs	r0, #1
     8da:	2a00      	cmp	r2, #0
     8dc:	d107      	bne.n	8ee <ringbuffer_init+0x26>
     8de:	2228      	movs	r2, #40	; 0x28
     8e0:	490c      	ldr	r1, [pc, #48]	; (914 <ringbuffer_init+0x4c>)
     8e2:	2000      	movs	r0, #0
     8e4:	4b0c      	ldr	r3, [pc, #48]	; (918 <ringbuffer_init+0x50>)
     8e6:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     8e8:	1e6b      	subs	r3, r5, #1
     8ea:	e007      	b.n	8fc <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
     8ec:	2000      	movs	r0, #0
     8ee:	2228      	movs	r2, #40	; 0x28
     8f0:	4908      	ldr	r1, [pc, #32]	; (914 <ringbuffer_init+0x4c>)
     8f2:	4b09      	ldr	r3, [pc, #36]	; (918 <ringbuffer_init+0x50>)
     8f4:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
     8f6:	1e6b      	subs	r3, r5, #1
     8f8:	422b      	tst	r3, r5
     8fa:	d108      	bne.n	90e <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     8fc:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     8fe:	2300      	movs	r3, #0
     900:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     902:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     904:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     906:	2000      	movs	r0, #0
}
     908:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     90a:	2000      	movs	r0, #0
     90c:	e7ef      	b.n	8ee <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
     90e:	200d      	movs	r0, #13
     910:	4240      	negs	r0, r0
     912:	e7f9      	b.n	908 <ringbuffer_init+0x40>
     914:	0000235c 	.word	0x0000235c
     918:	000008c1 	.word	0x000008c1

0000091c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     91c:	b570      	push	{r4, r5, r6, lr}
     91e:	0004      	movs	r4, r0
     920:	000d      	movs	r5, r1
	ASSERT(rb && data);
     922:	2800      	cmp	r0, #0
     924:	d015      	beq.n	952 <ringbuffer_get+0x36>
     926:	0008      	movs	r0, r1
     928:	1e43      	subs	r3, r0, #1
     92a:	4198      	sbcs	r0, r3
     92c:	b2c0      	uxtb	r0, r0
     92e:	2240      	movs	r2, #64	; 0x40
     930:	490a      	ldr	r1, [pc, #40]	; (95c <ringbuffer_get+0x40>)
     932:	4b0b      	ldr	r3, [pc, #44]	; (960 <ringbuffer_get+0x44>)
     934:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     936:	68a3      	ldr	r3, [r4, #8]
     938:	68e2      	ldr	r2, [r4, #12]
     93a:	429a      	cmp	r2, r3
     93c:	d00b      	beq.n	956 <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
     93e:	6862      	ldr	r2, [r4, #4]
     940:	4013      	ands	r3, r2
     942:	6822      	ldr	r2, [r4, #0]
     944:	5cd3      	ldrb	r3, [r2, r3]
     946:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     948:	68a3      	ldr	r3, [r4, #8]
     94a:	3301      	adds	r3, #1
     94c:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     94e:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     950:	bd70      	pop	{r4, r5, r6, pc}
     952:	2000      	movs	r0, #0
     954:	e7eb      	b.n	92e <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
     956:	200a      	movs	r0, #10
     958:	4240      	negs	r0, r0
     95a:	e7f9      	b.n	950 <ringbuffer_get+0x34>
     95c:	0000235c 	.word	0x0000235c
     960:	000008c1 	.word	0x000008c1

00000964 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     964:	b570      	push	{r4, r5, r6, lr}
     966:	0004      	movs	r4, r0
     968:	000d      	movs	r5, r1
	ASSERT(rb);
     96a:	1e43      	subs	r3, r0, #1
     96c:	4198      	sbcs	r0, r3
     96e:	b2c0      	uxtb	r0, r0
     970:	2251      	movs	r2, #81	; 0x51
     972:	490a      	ldr	r1, [pc, #40]	; (99c <ringbuffer_put+0x38>)
     974:	4b0a      	ldr	r3, [pc, #40]	; (9a0 <ringbuffer_put+0x3c>)
     976:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     978:	6863      	ldr	r3, [r4, #4]
     97a:	68e2      	ldr	r2, [r4, #12]
     97c:	4013      	ands	r3, r2
     97e:	6822      	ldr	r2, [r4, #0]
     980:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     982:	68e3      	ldr	r3, [r4, #12]
     984:	6861      	ldr	r1, [r4, #4]
     986:	68a2      	ldr	r2, [r4, #8]
     988:	1a9a      	subs	r2, r3, r2
     98a:	428a      	cmp	r2, r1
     98c:	d901      	bls.n	992 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     98e:	1a59      	subs	r1, r3, r1
     990:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     992:	3301      	adds	r3, #1
     994:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     996:	2000      	movs	r0, #0
     998:	bd70      	pop	{r4, r5, r6, pc}
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	0000235c 	.word	0x0000235c
     9a0:	000008c1 	.word	0x000008c1

000009a4 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     9a4:	b510      	push	{r4, lr}
     9a6:	0004      	movs	r4, r0
	ASSERT(rb);
     9a8:	1e43      	subs	r3, r0, #1
     9aa:	4198      	sbcs	r0, r3
     9ac:	b2c0      	uxtb	r0, r0
     9ae:	2267      	movs	r2, #103	; 0x67
     9b0:	4903      	ldr	r1, [pc, #12]	; (9c0 <ringbuffer_num+0x1c>)
     9b2:	4b04      	ldr	r3, [pc, #16]	; (9c4 <ringbuffer_num+0x20>)
     9b4:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     9b6:	68e0      	ldr	r0, [r4, #12]
     9b8:	68a3      	ldr	r3, [r4, #8]
     9ba:	1ac0      	subs	r0, r0, r3
}
     9bc:	bd10      	pop	{r4, pc}
     9be:	46c0      	nop			; (mov r8, r8)
     9c0:	0000235c 	.word	0x0000235c
     9c4:	000008c1 	.word	0x000008c1

000009c8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     9c8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     9ca:	4a06      	ldr	r2, [pc, #24]	; (9e4 <_sbrk+0x1c>)
     9cc:	6812      	ldr	r2, [r2, #0]
     9ce:	2a00      	cmp	r2, #0
     9d0:	d004      	beq.n	9dc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     9d2:	4a04      	ldr	r2, [pc, #16]	; (9e4 <_sbrk+0x1c>)
     9d4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     9d6:	18c3      	adds	r3, r0, r3
     9d8:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     9da:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     9dc:	4902      	ldr	r1, [pc, #8]	; (9e8 <_sbrk+0x20>)
     9de:	4a01      	ldr	r2, [pc, #4]	; (9e4 <_sbrk+0x1c>)
     9e0:	6011      	str	r1, [r2, #0]
     9e2:	e7f6      	b.n	9d2 <_sbrk+0xa>
     9e4:	20000098 	.word	0x20000098
     9e8:	20002188 	.word	0x20002188

000009ec <_go_to_sleep>:
  __ASM volatile ("dsb 0xF":::"memory");
     9ec:	f3bf 8f4f 	dsb	sy
 * \brief Put MCU to sleep
 */
void _go_to_sleep(void)
{
	__DSB();
	__WFI();
     9f0:	bf30      	wfi
}
     9f2:	4770      	bx	lr

000009f4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     9f4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     9f6:	4b06      	ldr	r3, [pc, #24]	; (a10 <_init_chip+0x1c>)
     9f8:	685a      	ldr	r2, [r3, #4]
     9fa:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     9fc:	4b05      	ldr	r3, [pc, #20]	; (a14 <_init_chip+0x20>)
     9fe:	4798      	blx	r3
	_sysctrl_init_sources();
     a00:	4b05      	ldr	r3, [pc, #20]	; (a18 <_init_chip+0x24>)
     a02:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     a04:	4b05      	ldr	r3, [pc, #20]	; (a1c <_init_chip+0x28>)
     a06:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     a08:	20ff      	movs	r0, #255	; 0xff
     a0a:	4b05      	ldr	r3, [pc, #20]	; (a20 <_init_chip+0x2c>)
     a0c:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     a0e:	bd10      	pop	{r4, pc}
     a10:	41004000 	.word	0x41004000
     a14:	00000c45 	.word	0x00000c45
     a18:	00001001 	.word	0x00001001
     a1c:	00001045 	.word	0x00001045
     a20:	00000bd1 	.word	0x00000bd1

00000a24 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     a24:	4a22      	ldr	r2, [pc, #136]	; (ab0 <_ext_irq_init+0x8c>)
     a26:	7853      	ldrb	r3, [r2, #1]
     a28:	09db      	lsrs	r3, r3, #7
     a2a:	d1fc      	bne.n	a26 <_ext_irq_init+0x2>
     a2c:	4a20      	ldr	r2, [pc, #128]	; (ab0 <_ext_irq_init+0x8c>)
     a2e:	7853      	ldrb	r3, [r2, #1]
     a30:	09db      	lsrs	r3, r3, #7
     a32:	d1fc      	bne.n	a2e <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     a34:	4b1e      	ldr	r3, [pc, #120]	; (ab0 <_ext_irq_init+0x8c>)
     a36:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     a38:	079b      	lsls	r3, r3, #30
     a3a:	d50a      	bpl.n	a52 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     a3c:	2200      	movs	r2, #0
     a3e:	4b1c      	ldr	r3, [pc, #112]	; (ab0 <_ext_irq_init+0x8c>)
     a40:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     a42:	001a      	movs	r2, r3
     a44:	7853      	ldrb	r3, [r2, #1]
     a46:	09db      	lsrs	r3, r3, #7
     a48:	d1fc      	bne.n	a44 <_ext_irq_init+0x20>
     a4a:	4a19      	ldr	r2, [pc, #100]	; (ab0 <_ext_irq_init+0x8c>)
     a4c:	7853      	ldrb	r3, [r2, #1]
     a4e:	09db      	lsrs	r3, r3, #7
     a50:	d1fc      	bne.n	a4c <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
     a52:	2201      	movs	r2, #1
     a54:	4b16      	ldr	r3, [pc, #88]	; (ab0 <_ext_irq_init+0x8c>)
     a56:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     a58:	001a      	movs	r2, r3
     a5a:	7853      	ldrb	r3, [r2, #1]
     a5c:	09db      	lsrs	r3, r3, #7
     a5e:	d1fc      	bne.n	a5a <_ext_irq_init+0x36>
     a60:	4a13      	ldr	r2, [pc, #76]	; (ab0 <_ext_irq_init+0x8c>)
     a62:	7853      	ldrb	r3, [r2, #1]
     a64:	09db      	lsrs	r3, r3, #7
     a66:	d1fc      	bne.n	a62 <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     a68:	4b11      	ldr	r3, [pc, #68]	; (ab0 <_ext_irq_init+0x8c>)
     a6a:	2200      	movs	r2, #0
     a6c:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     a6e:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     a70:	2180      	movs	r1, #128	; 0x80
     a72:	0209      	lsls	r1, r1, #8
     a74:	6159      	str	r1, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     a76:	619a      	str	r2, [r3, #24]
     a78:	22a0      	movs	r2, #160	; 0xa0
     a7a:	0612      	lsls	r2, r2, #24
     a7c:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     a7e:	781a      	ldrb	r2, [r3, #0]
     a80:	2102      	movs	r1, #2
     a82:	430a      	orrs	r2, r1
     a84:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     a86:	001a      	movs	r2, r3
     a88:	7853      	ldrb	r3, [r2, #1]
     a8a:	09db      	lsrs	r3, r3, #7
     a8c:	d1fc      	bne.n	a88 <_ext_irq_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a8e:	4b09      	ldr	r3, [pc, #36]	; (ab4 <_ext_irq_init+0x90>)
     a90:	2210      	movs	r2, #16
     a92:	2180      	movs	r1, #128	; 0x80
     a94:	505a      	str	r2, [r3, r1]
     a96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     a9a:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a9e:	3101      	adds	r1, #1
     aa0:	31ff      	adds	r1, #255	; 0xff
     aa2:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     aa4:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     aa6:	4b04      	ldr	r3, [pc, #16]	; (ab8 <_ext_irq_init+0x94>)
     aa8:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     aaa:	2000      	movs	r0, #0
     aac:	4770      	bx	lr
     aae:	46c0      	nop			; (mov r8, r8)
     ab0:	40001800 	.word	0x40001800
     ab4:	e000e100 	.word	0xe000e100
     ab8:	2000009c 	.word	0x2000009c

00000abc <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
     abc:	280f      	cmp	r0, #15
     abe:	d002      	beq.n	ac6 <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
     ac0:	200d      	movs	r0, #13
     ac2:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
     ac4:	4770      	bx	lr
	if (enable) {
     ac6:	2900      	cmp	r1, #0
     ac8:	d106      	bne.n	ad8 <_ext_irq_enable+0x1c>
	((Eic *)hw)->INTENCLR.reg = mask;
     aca:	4b06      	ldr	r3, [pc, #24]	; (ae4 <_ext_irq_enable+0x28>)
     acc:	2280      	movs	r2, #128	; 0x80
     ace:	0212      	lsls	r2, r2, #8
     ad0:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     ad2:	611a      	str	r2, [r3, #16]
	return ERR_NONE;
     ad4:	2000      	movs	r0, #0
     ad6:	e7f5      	b.n	ac4 <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
     ad8:	2280      	movs	r2, #128	; 0x80
     ada:	0212      	lsls	r2, r2, #8
     adc:	4b01      	ldr	r3, [pc, #4]	; (ae4 <_ext_irq_enable+0x28>)
     ade:	60da      	str	r2, [r3, #12]
     ae0:	2000      	movs	r0, #0
     ae2:	e7ef      	b.n	ac4 <_ext_irq_enable+0x8>
     ae4:	40001800 	.word	0x40001800

00000ae8 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aea:	46ce      	mov	lr, r9
     aec:	4647      	mov	r7, r8
     aee:	b580      	push	{r7, lr}
     af0:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
     af2:	4b31      	ldr	r3, [pc, #196]	; (bb8 <EIC_Handler+0xd0>)
     af4:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     af6:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     af8:	400a      	ands	r2, r1
     afa:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     afc:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     afe:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     b00:	4b2e      	ldr	r3, [pc, #184]	; (bbc <EIC_Handler+0xd4>)
     b02:	6818      	ldr	r0, [r3, #0]
     b04:	1e43      	subs	r3, r0, #1
     b06:	4198      	sbcs	r0, r3
     b08:	b2c0      	uxtb	r0, r0
     b0a:	22d2      	movs	r2, #210	; 0xd2
     b0c:	492c      	ldr	r1, [pc, #176]	; (bc0 <EIC_Handler+0xd8>)
     b0e:	4b2d      	ldr	r3, [pc, #180]	; (bc4 <EIC_Handler+0xdc>)
     b10:	4798      	blx	r3

	while (flags) {
     b12:	9b01      	ldr	r3, [sp, #4]
     b14:	2b00      	cmp	r3, #0
     b16:	d049      	beq.n	bac <EIC_Handler+0xc4>
     b18:	2301      	movs	r3, #1
     b1a:	425b      	negs	r3, r3
     b1c:	4699      	mov	r9, r3
		pos = ffs(flags) - 1;
     b1e:	4b2a      	ldr	r3, [pc, #168]	; (bc8 <EIC_Handler+0xe0>)
     b20:	4698      	mov	r8, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
     b22:	4f26      	ldr	r7, [pc, #152]	; (bbc <EIC_Handler+0xd4>)
				if (_map[middle].extint == pos) {
     b24:	4d29      	ldr	r5, [pc, #164]	; (bcc <EIC_Handler+0xe4>)
     b26:	e03a      	b.n	b9e <EIC_Handler+0xb6>
					upper = middle - 1;
     b28:	3a01      	subs	r2, #1
     b2a:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
     b2c:	42b1      	cmp	r1, r6
     b2e:	d80c      	bhi.n	b4a <EIC_Handler+0x62>
				middle = (upper + lower) >> 1;
     b30:	1873      	adds	r3, r6, r1
     b32:	105b      	asrs	r3, r3, #1
     b34:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
     b36:	4003      	ands	r3, r0
     b38:	00db      	lsls	r3, r3, #3
     b3a:	5d5b      	ldrb	r3, [r3, r5]
     b3c:	42a3      	cmp	r3, r4
     b3e:	d008      	beq.n	b52 <EIC_Handler+0x6a>
				if (_map[middle].extint < pos) {
     b40:	429c      	cmp	r4, r3
     b42:	ddf1      	ble.n	b28 <EIC_Handler+0x40>
					lower = middle + 1;
     b44:	3201      	adds	r2, #1
     b46:	b2d1      	uxtb	r1, r2
     b48:	e7f0      	b.n	b2c <EIC_Handler+0x44>
			if (INVALID_PIN_NUMBER != pin) {
     b4a:	464b      	mov	r3, r9
     b4c:	3301      	adds	r3, #1
     b4e:	d005      	beq.n	b5c <EIC_Handler+0x74>
     b50:	e001      	b.n	b56 <EIC_Handler+0x6e>
     b52:	230f      	movs	r3, #15
     b54:	4699      	mov	r9, r3
				callback(pin);
     b56:	4648      	mov	r0, r9
     b58:	683b      	ldr	r3, [r7, #0]
     b5a:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     b5c:	9b01      	ldr	r3, [sp, #4]
     b5e:	2201      	movs	r2, #1
     b60:	40a2      	lsls	r2, r4
     b62:	4393      	bics	r3, r2
     b64:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     b66:	9801      	ldr	r0, [sp, #4]
     b68:	4b17      	ldr	r3, [pc, #92]	; (bc8 <EIC_Handler+0xe0>)
     b6a:	4798      	blx	r3
     b6c:	3801      	subs	r0, #1
     b6e:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     b70:	1c63      	adds	r3, r4, #1
     b72:	d00a      	beq.n	b8a <EIC_Handler+0xa2>
				if (_map[middle].extint == pos) {
     b74:	2c0f      	cmp	r4, #15
     b76:	d005      	beq.n	b84 <EIC_Handler+0x9c>
     b78:	230f      	movs	r3, #15
     b7a:	2200      	movs	r2, #0
     b7c:	2601      	movs	r6, #1
     b7e:	2100      	movs	r1, #0
     b80:	20ff      	movs	r0, #255	; 0xff
     b82:	e7dd      	b.n	b40 <EIC_Handler+0x58>
     b84:	230f      	movs	r3, #15
     b86:	4699      	mov	r9, r3
     b88:	e7e5      	b.n	b56 <EIC_Handler+0x6e>
	return ((Eic *)hw)->INTFLAG.reg;
     b8a:	4b0b      	ldr	r3, [pc, #44]	; (bb8 <EIC_Handler+0xd0>)
     b8c:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     b8e:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     b90:	400a      	ands	r2, r1
     b92:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     b94:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     b96:	611a      	str	r2, [r3, #16]
	while (flags) {
     b98:	9b01      	ldr	r3, [sp, #4]
     b9a:	2b00      	cmp	r3, #0
     b9c:	d006      	beq.n	bac <EIC_Handler+0xc4>
		pos = ffs(flags) - 1;
     b9e:	9801      	ldr	r0, [sp, #4]
     ba0:	47c0      	blx	r8
     ba2:	3801      	subs	r0, #1
     ba4:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     ba6:	1c63      	adds	r3, r4, #1
     ba8:	d1e4      	bne.n	b74 <EIC_Handler+0x8c>
     baa:	e7ee      	b.n	b8a <EIC_Handler+0xa2>
	}
}
     bac:	b003      	add	sp, #12
     bae:	bc0c      	pop	{r2, r3}
     bb0:	4690      	mov	r8, r2
     bb2:	4699      	mov	r9, r3
     bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	40001800 	.word	0x40001800
     bbc:	2000009c 	.word	0x2000009c
     bc0:	00002388 	.word	0x00002388
     bc4:	000008c1 	.word	0x000008c1
     bc8:	000019f5 	.word	0x000019f5
     bcc:	00002380 	.word	0x00002380

00000bd0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     bd0:	07c3      	lsls	r3, r0, #31
     bd2:	d50a      	bpl.n	bea <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     bd4:	4b0b      	ldr	r3, [pc, #44]	; (c04 <_gclk_init_generators_by_fref+0x34>)
     bd6:	2280      	movs	r2, #128	; 0x80
     bd8:	0052      	lsls	r2, r2, #1
     bda:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     bdc:	2283      	movs	r2, #131	; 0x83
     bde:	0252      	lsls	r2, r2, #9
     be0:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     be2:	001a      	movs	r2, r3
     be4:	7853      	ldrb	r3, [r2, #1]
     be6:	09db      	lsrs	r3, r3, #7
     be8:	d1fc      	bne.n	be4 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     bea:	0703      	lsls	r3, r0, #28
     bec:	d509      	bpl.n	c02 <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
     bee:	4b05      	ldr	r3, [pc, #20]	; (c04 <_gclk_init_generators_by_fref+0x34>)
     bf0:	2204      	movs	r2, #4
     bf2:	32ff      	adds	r2, #255	; 0xff
     bf4:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     bf6:	4a04      	ldr	r2, [pc, #16]	; (c08 <_gclk_init_generators_by_fref+0x38>)
     bf8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     bfa:	001a      	movs	r2, r3
     bfc:	7853      	ldrb	r3, [r2, #1]
     bfe:	09db      	lsrs	r3, r3, #7
     c00:	d1fc      	bne.n	bfc <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     c02:	4770      	bx	lr
     c04:	40000c00 	.word	0x40000c00
     c08:	00210303 	.word	0x00210303

00000c0c <_set_sleep_mode>:
/**
 * \brief Set the sleep mode for the device
 */
int32_t _set_sleep_mode(const uint8_t mode)
{
	switch (mode) {
     c0c:	2802      	cmp	r0, #2
     c0e:	d904      	bls.n	c1a <_set_sleep_mode+0xe>
     c10:	2803      	cmp	r0, #3
     c12:	d00b      	beq.n	c2c <_set_sleep_mode+0x20>
		return ERR_NONE;
	case 3:
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
		return ERR_NONE;
	default:
		return ERR_INVALID_ARG;
     c14:	200d      	movs	r0, #13
     c16:	4240      	negs	r0, r0
     c18:	e007      	b.n	c2a <_set_sleep_mode+0x1e>
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
     c1a:	4a08      	ldr	r2, [pc, #32]	; (c3c <_set_sleep_mode+0x30>)
     c1c:	6913      	ldr	r3, [r2, #16]
     c1e:	2104      	movs	r1, #4
     c20:	438b      	bics	r3, r1
     c22:	6113      	str	r3, [r2, #16]
		PM->SLEEP.reg = mode;
     c24:	4b06      	ldr	r3, [pc, #24]	; (c40 <_set_sleep_mode+0x34>)
     c26:	7058      	strb	r0, [r3, #1]
		return ERR_NONE;
     c28:	2000      	movs	r0, #0
	}
}
     c2a:	4770      	bx	lr
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
     c2c:	4a03      	ldr	r2, [pc, #12]	; (c3c <_set_sleep_mode+0x30>)
     c2e:	6913      	ldr	r3, [r2, #16]
     c30:	2104      	movs	r1, #4
     c32:	430b      	orrs	r3, r1
     c34:	6113      	str	r3, [r2, #16]
		return ERR_NONE;
     c36:	2000      	movs	r0, #0
     c38:	e7f7      	b.n	c2a <_set_sleep_mode+0x1e>
     c3a:	46c0      	nop			; (mov r8, r8)
     c3c:	e000ed00 	.word	0xe000ed00
     c40:	40000400 	.word	0x40000400

00000c44 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     c44:	4b06      	ldr	r3, [pc, #24]	; (c60 <_pm_init+0x1c>)
     c46:	7a1a      	ldrb	r2, [r3, #8]
     c48:	b2d2      	uxtb	r2, r2
     c4a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     c4c:	7a5a      	ldrb	r2, [r3, #9]
     c4e:	b2d2      	uxtb	r2, r2
     c50:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     c52:	7a9a      	ldrb	r2, [r3, #10]
     c54:	b2d2      	uxtb	r2, r2
     c56:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     c58:	7ada      	ldrb	r2, [r3, #11]
     c5a:	b2d2      	uxtb	r2, r2
     c5c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     c5e:	4770      	bx	lr
     c60:	40000400 	.word	0x40000400

00000c64 <_calendar_register_callback>:

/**
 * \brief Registers callback for the specified callback type
 */
int32_t _calendar_register_callback(struct calendar_dev *const dev, calendar_drv_cb_alarm_t callback)
{
     c64:	b570      	push	{r4, r5, r6, lr}
     c66:	0004      	movs	r4, r0
     c68:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     c6a:	2800      	cmp	r0, #0
     c6c:	d015      	beq.n	c9a <_calendar_register_callback+0x36>
     c6e:	6800      	ldr	r0, [r0, #0]
     c70:	1e43      	subs	r3, r0, #1
     c72:	4198      	sbcs	r0, r3
     c74:	b2c0      	uxtb	r0, r0
     c76:	2233      	movs	r2, #51	; 0x33
     c78:	490f      	ldr	r1, [pc, #60]	; (cb8 <_calendar_register_callback+0x54>)
     c7a:	4b10      	ldr	r3, [pc, #64]	; (cbc <_calendar_register_callback+0x58>)
     c7c:	4798      	blx	r3

	/* Check callback */
	if (callback != NULL) {
     c7e:	2d00      	cmp	r5, #0
     c80:	d00d      	beq.n	c9e <_calendar_register_callback+0x3a>
		/* register the callback */
		dev->callback = callback;
     c82:	6065      	str	r5, [r4, #4]
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c84:	4b0e      	ldr	r3, [pc, #56]	; (cc0 <_calendar_register_callback+0x5c>)
     c86:	2208      	movs	r2, #8
     c88:	21c0      	movs	r1, #192	; 0xc0
     c8a:	0049      	lsls	r1, r1, #1
     c8c:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c8e:	601a      	str	r2, [r3, #0]
		/* enable RTC_IRQn */
		NVIC_ClearPendingIRQ(RTC_IRQn);
		NVIC_EnableIRQ(RTC_IRQn);

		/* enable cmp */
		hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
     c90:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE2.INTFLAG.reg = mask;
}

static inline void hri_rtcmode0_set_INTEN_CMP0_bit(const void *const hw)
{
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     c92:	3a07      	subs	r2, #7
     c94:	71da      	strb	r2, [r3, #7]
		/* disable RTC_IRQn */
		NVIC_DisableIRQ(RTC_IRQn);
	}

	return ERR_NONE;
}
     c96:	2000      	movs	r0, #0
     c98:	bd70      	pop	{r4, r5, r6, pc}
     c9a:	2000      	movs	r0, #0
     c9c:	e7eb      	b.n	c76 <_calendar_register_callback+0x12>
		hri_rtcmode0_clear_INTEN_CMP0_bit(dev->hw);
     c9e:	6823      	ldr	r3, [r4, #0]
	}
}

static inline void hri_rtcmode0_clear_INTEN_CMP0_bit(const void *const hw)
{
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_CMP0;
     ca0:	2201      	movs	r2, #1
     ca2:	719a      	strb	r2, [r3, #6]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ca4:	2108      	movs	r1, #8
     ca6:	2380      	movs	r3, #128	; 0x80
     ca8:	4a05      	ldr	r2, [pc, #20]	; (cc0 <_calendar_register_callback+0x5c>)
     caa:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
     cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     cb0:	f3bf 8f6f 	isb	sy
     cb4:	e7ef      	b.n	c96 <_calendar_register_callback+0x32>
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	000023a0 	.word	0x000023a0
     cbc:	000008c1 	.word	0x000008c1
     cc0:	e000e100 	.word	0xe000e100

00000cc4 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
     cc4:	b510      	push	{r4, lr}
     cc6:	1e04      	subs	r4, r0, #0
	uint16_t register_value;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     cc8:	d036      	beq.n	d38 <_calendar_init+0x74>
     cca:	6800      	ldr	r0, [r0, #0]
     ccc:	1e43      	subs	r3, r0, #1
     cce:	4198      	sbcs	r0, r3
     cd0:	b2c0      	uxtb	r0, r0
     cd2:	2278      	movs	r2, #120	; 0x78
     cd4:	4919      	ldr	r1, [pc, #100]	; (d3c <_calendar_init+0x78>)
     cd6:	4b1a      	ldr	r3, [pc, #104]	; (d40 <_calendar_init+0x7c>)
     cd8:	4798      	blx	r3

	_rtc_dev = dev;
     cda:	4b1a      	ldr	r3, [pc, #104]	; (d44 <_calendar_init+0x80>)
     cdc:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw);
     cde:	6822      	ldr	r2, [r4, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     ce0:	7a93      	ldrb	r3, [r2, #10]
     ce2:	09db      	lsrs	r3, r3, #7
     ce4:	d1fc      	bne.n	ce0 <_calendar_init+0x1c>
     ce6:	7a93      	ldrb	r3, [r2, #10]
     ce8:	09db      	lsrs	r3, r3, #7
     cea:	d1fc      	bne.n	ce6 <_calendar_init+0x22>

static inline bool hri_rtcmode0_get_CTRL_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
     cec:	8813      	ldrh	r3, [r2, #0]
	if (hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw)) {
     cee:	079b      	lsls	r3, r3, #30
     cf0:	d50a      	bpl.n	d08 <_calendar_init+0x44>
}

static inline void hri_rtcmode0_clear_CTRL_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     cf2:	8813      	ldrh	r3, [r2, #0]
     cf4:	2102      	movs	r1, #2
     cf6:	438b      	bics	r3, r1
     cf8:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     cfa:	7a93      	ldrb	r3, [r2, #10]
     cfc:	09db      	lsrs	r3, r3, #7
     cfe:	d1fc      	bne.n	cfa <_calendar_init+0x36>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw);
     d00:	6822      	ldr	r2, [r4, #0]
     d02:	7a93      	ldrb	r3, [r2, #10]
     d04:	09db      	lsrs	r3, r3, #7
     d06:	d1fc      	bne.n	d02 <_calendar_init+0x3e>
#endif
	}
	hri_rtcmode0_set_CTRL_SWRST_bit(dev->hw);
     d08:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     d0a:	8813      	ldrh	r3, [r2, #0]
     d0c:	2101      	movs	r1, #1
     d0e:	430b      	orrs	r3, r1
     d10:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     d12:	7a93      	ldrb	r3, [r2, #10]
     d14:	09db      	lsrs	r3, r3, #7
     d16:	d1fc      	bne.n	d12 <_calendar_init+0x4e>
	hri_rtcmode0_wait_for_sync(dev->hw);
     d18:	6822      	ldr	r2, [r4, #0]
     d1a:	7a93      	ldrb	r3, [r2, #10]
     d1c:	09db      	lsrs	r3, r3, #7
     d1e:	d1fc      	bne.n	d1a <_calendar_init+0x56>
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     d20:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     d22:	7a93      	ldrb	r3, [r2, #10]
     d24:	09db      	lsrs	r3, r3, #7
     d26:	d1fc      	bne.n	d22 <_calendar_init+0x5e>
	register_value &= (~RTC_MODE0_CTRL_MATCHCLR);

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	/* set continuously clock read update mode */
	hri_rtcmode0_set_READREQ_RCONT_bit(dev->hw);
     d28:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_rtc_set_READREQ_RCONT_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     d2a:	8853      	ldrh	r3, [r2, #2]
     d2c:	2180      	movs	r1, #128	; 0x80
     d2e:	01c9      	lsls	r1, r1, #7
     d30:	430b      	orrs	r3, r1
     d32:	8053      	strh	r3, [r2, #2]
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	return ERR_NONE;
}
     d34:	2000      	movs	r0, #0
     d36:	bd10      	pop	{r4, pc}
     d38:	2000      	movs	r0, #0
     d3a:	e7ca      	b.n	cd2 <_calendar_init+0xe>
     d3c:	000023a0 	.word	0x000023a0
     d40:	000008c1 	.word	0x000008c1
     d44:	200000a0 	.word	0x200000a0

00000d48 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
     d48:	b510      	push	{r4, lr}
     d4a:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     d4c:	d011      	beq.n	d72 <_calendar_enable+0x2a>
     d4e:	6800      	ldr	r0, [r0, #0]
     d50:	1e43      	subs	r3, r0, #1
     d52:	4198      	sbcs	r0, r3
     d54:	b2c0      	uxtb	r0, r0
     d56:	22aa      	movs	r2, #170	; 0xaa
     d58:	4907      	ldr	r1, [pc, #28]	; (d78 <_calendar_enable+0x30>)
     d5a:	4b08      	ldr	r3, [pc, #32]	; (d7c <_calendar_enable+0x34>)
     d5c:	4798      	blx	r3

	/* Enable rtc */
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
     d5e:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     d60:	8813      	ldrh	r3, [r2, #0]
     d62:	2102      	movs	r1, #2
     d64:	430b      	orrs	r3, r1
     d66:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     d68:	7a93      	ldrb	r3, [r2, #10]
     d6a:	09db      	lsrs	r3, r3, #7
     d6c:	d1fc      	bne.n	d68 <_calendar_enable+0x20>

	return ERR_NONE;
}
     d6e:	2000      	movs	r0, #0
     d70:	bd10      	pop	{r4, pc}
     d72:	2000      	movs	r0, #0
     d74:	e7ef      	b.n	d56 <_calendar_enable+0xe>
     d76:	46c0      	nop			; (mov r8, r8)
     d78:	000023a0 	.word	0x000023a0
     d7c:	000008c1 	.word	0x000008c1

00000d80 <_calendar_set_comp>:

/**
 * \brief Set the compare for the specified value.
 */
int32_t _calendar_set_comp(struct calendar_dev *const dev, const uint32_t comp)
{
     d80:	b570      	push	{r4, r5, r6, lr}
     d82:	0004      	movs	r4, r0
     d84:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     d86:	2800      	cmp	r0, #0
     d88:	d00f      	beq.n	daa <_calendar_set_comp+0x2a>
     d8a:	6800      	ldr	r0, [r0, #0]
     d8c:	1e43      	subs	r3, r0, #1
     d8e:	4198      	sbcs	r0, r3
     d90:	b2c0      	uxtb	r0, r0
     d92:	22e4      	movs	r2, #228	; 0xe4
     d94:	4906      	ldr	r1, [pc, #24]	; (db0 <_calendar_set_comp+0x30>)
     d96:	4b07      	ldr	r3, [pc, #28]	; (db4 <_calendar_set_comp+0x34>)
     d98:	4798      	blx	r3

	/* Set value into alarm register. */
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, comp);
     d9a:	6822      	ldr	r2, [r4, #0]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     d9c:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     d9e:	6195      	str	r5, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     da0:	7a93      	ldrb	r3, [r2, #10]
     da2:	09db      	lsrs	r3, r3, #7
     da4:	d1fc      	bne.n	da0 <_calendar_set_comp+0x20>

	return ERR_NONE;
}
     da6:	2000      	movs	r0, #0
     da8:	bd70      	pop	{r4, r5, r6, pc}
     daa:	2000      	movs	r0, #0
     dac:	e7f1      	b.n	d92 <_calendar_set_comp+0x12>
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	000023a0 	.word	0x000023a0
     db4:	000008c1 	.word	0x000008c1

00000db8 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     db8:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
     dba:	4b07      	ldr	r3, [pc, #28]	; (dd8 <RTC_Handler+0x20>)
     dbc:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     dbe:	6823      	ldr	r3, [r4, #0]
     dc0:	7a1b      	ldrb	r3, [r3, #8]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
     dc2:	07db      	lsls	r3, r3, #31
     dc4:	d400      	bmi.n	dc8 <RTC_Handler+0x10>
}
     dc6:	bd10      	pop	{r4, pc}
		dev->callback(dev);
     dc8:	0020      	movs	r0, r4
     dca:	6863      	ldr	r3, [r4, #4]
     dcc:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     dce:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     dd0:	2201      	movs	r2, #1
     dd2:	721a      	strb	r2, [r3, #8]
}
     dd4:	e7f7      	b.n	dc6 <RTC_Handler+0xe>
     dd6:	46c0      	nop			; (mov r8, r8)
     dd8:	200000a0 	.word	0x200000a0

00000ddc <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     ddc:	b510      	push	{r4, lr}
     dde:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     de0:	4b1f      	ldr	r3, [pc, #124]	; (e60 <_usart_init+0x84>)
     de2:	18c3      	adds	r3, r0, r3
     de4:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
     de6:	b2db      	uxtb	r3, r3
     de8:	2b03      	cmp	r3, #3
     dea:	d004      	beq.n	df6 <_usart_init+0x1a>
	ASSERT(false);
     dec:	4a1d      	ldr	r2, [pc, #116]	; (e64 <_usart_init+0x88>)
     dee:	491e      	ldr	r1, [pc, #120]	; (e68 <_usart_init+0x8c>)
     df0:	2000      	movs	r0, #0
     df2:	4b1e      	ldr	r3, [pc, #120]	; (e6c <_usart_init+0x90>)
     df4:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     df6:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     df8:	07db      	lsls	r3, r3, #31
     dfa:	d418      	bmi.n	e2e <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     dfc:	2203      	movs	r2, #3
     dfe:	69e3      	ldr	r3, [r4, #28]
     e00:	421a      	tst	r2, r3
     e02:	d1fc      	bne.n	dfe <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     e04:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     e06:	079b      	lsls	r3, r3, #30
     e08:	d50b      	bpl.n	e22 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     e0a:	6823      	ldr	r3, [r4, #0]
     e0c:	2202      	movs	r2, #2
     e0e:	4393      	bics	r3, r2
     e10:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e12:	3201      	adds	r2, #1
     e14:	69e3      	ldr	r3, [r4, #28]
     e16:	421a      	tst	r2, r3
     e18:	d1fc      	bne.n	e14 <_usart_init+0x38>
     e1a:	2202      	movs	r2, #2
     e1c:	69e3      	ldr	r3, [r4, #28]
     e1e:	421a      	tst	r2, r3
     e20:	d1fc      	bne.n	e1c <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e22:	2305      	movs	r3, #5
     e24:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e26:	2203      	movs	r2, #3
     e28:	69e3      	ldr	r3, [r4, #28]
     e2a:	421a      	tst	r2, r3
     e2c:	d1fc      	bne.n	e28 <_usart_init+0x4c>
     e2e:	2201      	movs	r2, #1
     e30:	69e3      	ldr	r3, [r4, #28]
     e32:	421a      	tst	r2, r3
     e34:	d1fc      	bne.n	e30 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e36:	4b0e      	ldr	r3, [pc, #56]	; (e70 <_usart_init+0x94>)
     e38:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e3a:	2203      	movs	r2, #3
     e3c:	69e3      	ldr	r3, [r4, #28]
     e3e:	421a      	tst	r2, r3
     e40:	d1fc      	bne.n	e3c <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     e42:	23c0      	movs	r3, #192	; 0xc0
     e44:	029b      	lsls	r3, r3, #10
     e46:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e48:	2207      	movs	r2, #7
     e4a:	69e3      	ldr	r3, [r4, #28]
     e4c:	421a      	tst	r2, r3
     e4e:	d1fc      	bne.n	e4a <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     e50:	4b08      	ldr	r3, [pc, #32]	; (e74 <_usart_init+0x98>)
     e52:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     e54:	2300      	movs	r3, #0
     e56:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     e58:	2230      	movs	r2, #48	; 0x30
     e5a:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     e5c:	2000      	movs	r0, #0
     e5e:	bd10      	pop	{r4, pc}
     e60:	bdfff800 	.word	0xbdfff800
     e64:	0000025e 	.word	0x0000025e
     e68:	000023b8 	.word	0x000023b8
     e6c:	000008c1 	.word	0x000008c1
     e70:	40100004 	.word	0x40100004
     e74:	ffffc504 	.word	0xffffc504

00000e78 <_usart_async_init>:
{
     e78:	b570      	push	{r4, r5, r6, lr}
     e7a:	0005      	movs	r5, r0
     e7c:	000c      	movs	r4, r1
	ASSERT(device);
     e7e:	1e43      	subs	r3, r0, #1
     e80:	4198      	sbcs	r0, r3
     e82:	b2c0      	uxtb	r0, r0
     e84:	22c4      	movs	r2, #196	; 0xc4
     e86:	4914      	ldr	r1, [pc, #80]	; (ed8 <_usart_async_init+0x60>)
     e88:	4b14      	ldr	r3, [pc, #80]	; (edc <_usart_async_init+0x64>)
     e8a:	4798      	blx	r3
	init_status = _usart_init(hw);
     e8c:	0020      	movs	r0, r4
     e8e:	4b14      	ldr	r3, [pc, #80]	; (ee0 <_usart_async_init+0x68>)
     e90:	4798      	blx	r3
	if (init_status) {
     e92:	2800      	cmp	r0, #0
     e94:	d000      	beq.n	e98 <_usart_async_init+0x20>
}
     e96:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
     e98:	61ac      	str	r4, [r5, #24]
	if (hw == SERCOM3) {
     e9a:	4b12      	ldr	r3, [pc, #72]	; (ee4 <_usart_async_init+0x6c>)
     e9c:	429c      	cmp	r4, r3
     e9e:	d017      	beq.n	ed0 <_usart_async_init+0x58>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     ea0:	4b11      	ldr	r3, [pc, #68]	; (ee8 <_usart_async_init+0x70>)
     ea2:	469c      	mov	ip, r3
     ea4:	4464      	add	r4, ip
     ea6:	0aa4      	lsrs	r4, r4, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
     ea8:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
     eaa:	b2e3      	uxtb	r3, r4
     eac:	0622      	lsls	r2, r4, #24
     eae:	d4f2      	bmi.n	e96 <_usart_async_init+0x1e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     eb0:	221f      	movs	r2, #31
     eb2:	401a      	ands	r2, r3
     eb4:	2301      	movs	r3, #1
     eb6:	4093      	lsls	r3, r2
     eb8:	4a0c      	ldr	r2, [pc, #48]	; (eec <_usart_async_init+0x74>)
     eba:	2180      	movs	r1, #128	; 0x80
     ebc:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     ebe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ec2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ec6:	3101      	adds	r1, #1
     ec8:	31ff      	adds	r1, #255	; 0xff
     eca:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ecc:	6013      	str	r3, [r2, #0]
     ece:	e7e2      	b.n	e96 <_usart_async_init+0x1e>
		_sercom3_dev = (struct _usart_async_device *)dev;
     ed0:	4b07      	ldr	r3, [pc, #28]	; (ef0 <_usart_async_init+0x78>)
     ed2:	601d      	str	r5, [r3, #0]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
     ed4:	230c      	movs	r3, #12
     ed6:	e7eb      	b.n	eb0 <_usart_async_init+0x38>
     ed8:	000023b8 	.word	0x000023b8
     edc:	000008c1 	.word	0x000008c1
     ee0:	00000ddd 	.word	0x00000ddd
     ee4:	42001400 	.word	0x42001400
     ee8:	bdfff800 	.word	0xbdfff800
     eec:	e000e100 	.word	0xe000e100
     ef0:	200000a4 	.word	0x200000a4

00000ef4 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     ef4:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     ef6:	6813      	ldr	r3, [r2, #0]
     ef8:	2102      	movs	r1, #2
     efa:	430b      	orrs	r3, r1
     efc:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     efe:	3101      	adds	r1, #1
     f00:	69d3      	ldr	r3, [r2, #28]
     f02:	4219      	tst	r1, r3
     f04:	d1fc      	bne.n	f00 <_usart_async_enable+0xc>
}
     f06:	4770      	bx	lr

00000f08 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     f08:	6983      	ldr	r3, [r0, #24]
     f0a:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     f0c:	8519      	strh	r1, [r3, #40]	; 0x28
}
     f0e:	4770      	bx	lr

00000f10 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
     f10:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     f12:	2201      	movs	r2, #1
     f14:	759a      	strb	r2, [r3, #22]
}
     f16:	4770      	bx	lr

00000f18 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
     f18:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     f1a:	2202      	movs	r2, #2
     f1c:	759a      	strb	r2, [r3, #22]
}
     f1e:	4770      	bx	lr

00000f20 <_usart_async_set_irq_state>:
{
     f20:	b570      	push	{r4, r5, r6, lr}
     f22:	0004      	movs	r4, r0
     f24:	000d      	movs	r5, r1
     f26:	0016      	movs	r6, r2
	ASSERT(device);
     f28:	1e43      	subs	r3, r0, #1
     f2a:	4198      	sbcs	r0, r3
     f2c:	b2c0      	uxtb	r0, r0
     f2e:	4a16      	ldr	r2, [pc, #88]	; (f88 <_usart_async_set_irq_state+0x68>)
     f30:	4916      	ldr	r1, [pc, #88]	; (f8c <_usart_async_set_irq_state+0x6c>)
     f32:	4b17      	ldr	r3, [pc, #92]	; (f90 <_usart_async_set_irq_state+0x70>)
     f34:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
     f36:	2302      	movs	r3, #2
     f38:	002a      	movs	r2, r5
     f3a:	439a      	bics	r2, r3
     f3c:	d10e      	bne.n	f5c <_usart_async_set_irq_state+0x3c>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
     f3e:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     f40:	2e00      	cmp	r6, #0
     f42:	d105      	bne.n	f50 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     f44:	2201      	movs	r2, #1
     f46:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
     f48:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     f4a:	3201      	adds	r2, #1
     f4c:	751a      	strb	r2, [r3, #20]
}
     f4e:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     f50:	2201      	movs	r2, #1
     f52:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
     f54:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     f56:	3201      	adds	r2, #1
     f58:	759a      	strb	r2, [r3, #22]
     f5a:	e7f8      	b.n	f4e <_usart_async_set_irq_state+0x2e>
	} else if (USART_ASYNC_RX_DONE == type) {
     f5c:	2d01      	cmp	r5, #1
     f5e:	d007      	beq.n	f70 <_usart_async_set_irq_state+0x50>
	} else if (USART_ASYNC_ERROR == type) {
     f60:	2d03      	cmp	r5, #3
     f62:	d1f4      	bne.n	f4e <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
     f64:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     f66:	2e00      	cmp	r6, #0
     f68:	d00b      	beq.n	f82 <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
     f6a:	2280      	movs	r2, #128	; 0x80
     f6c:	759a      	strb	r2, [r3, #22]
}
     f6e:	e7ee      	b.n	f4e <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
     f70:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     f72:	2e00      	cmp	r6, #0
     f74:	d102      	bne.n	f7c <_usart_async_set_irq_state+0x5c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
     f76:	2204      	movs	r2, #4
     f78:	751a      	strb	r2, [r3, #20]
     f7a:	e7e8      	b.n	f4e <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
     f7c:	2204      	movs	r2, #4
     f7e:	759a      	strb	r2, [r3, #22]
     f80:	e7e5      	b.n	f4e <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
     f82:	2280      	movs	r2, #128	; 0x80
     f84:	751a      	strb	r2, [r3, #20]
     f86:	e7e2      	b.n	f4e <_usart_async_set_irq_state+0x2e>
     f88:	0000021e 	.word	0x0000021e
     f8c:	000023b8 	.word	0x000023b8
     f90:	000008c1 	.word	0x000008c1

00000f94 <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
     f94:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
     f96:	4b19      	ldr	r3, [pc, #100]	; (ffc <SERCOM3_Handler+0x68>)
     f98:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
     f9a:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     f9c:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
     f9e:	07db      	lsls	r3, r3, #31
     fa0:	d502      	bpl.n	fa8 <SERCOM3_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
     fa2:	7da3      	ldrb	r3, [r4, #22]
     fa4:	07db      	lsls	r3, r3, #31
     fa6:	d40f      	bmi.n	fc8 <SERCOM3_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     fa8:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
     faa:	079b      	lsls	r3, r3, #30
     fac:	d502      	bpl.n	fb4 <SERCOM3_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
     fae:	7da3      	ldrb	r3, [r4, #22]
     fb0:	079b      	lsls	r3, r3, #30
     fb2:	d40e      	bmi.n	fd2 <SERCOM3_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     fb4:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
     fb6:	075b      	lsls	r3, r3, #29
     fb8:	d515      	bpl.n	fe6 <SERCOM3_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
     fba:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
     fbc:	2337      	movs	r3, #55	; 0x37
     fbe:	421a      	tst	r2, r3
     fc0:	d00c      	beq.n	fdc <SERCOM3_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
     fc2:	3308      	adds	r3, #8
     fc4:	8363      	strh	r3, [r4, #26]
}
     fc6:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     fc8:	2301      	movs	r3, #1
     fca:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
     fcc:	6803      	ldr	r3, [r0, #0]
     fce:	4798      	blx	r3
     fd0:	e7f9      	b.n	fc6 <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     fd2:	2302      	movs	r3, #2
     fd4:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
     fd6:	6883      	ldr	r3, [r0, #8]
     fd8:	4798      	blx	r3
     fda:	e7f4      	b.n	fc6 <SERCOM3_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
     fdc:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
     fde:	b2c9      	uxtb	r1, r1
     fe0:	6843      	ldr	r3, [r0, #4]
     fe2:	4798      	blx	r3
     fe4:	e7ef      	b.n	fc6 <SERCOM3_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
     fe6:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
     fe8:	09db      	lsrs	r3, r3, #7
     fea:	d0ec      	beq.n	fc6 <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     fec:	2380      	movs	r3, #128	; 0x80
     fee:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
     ff0:	68c3      	ldr	r3, [r0, #12]
     ff2:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
     ff4:	8b63      	ldrh	r3, [r4, #26]
     ff6:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
     ff8:	8363      	strh	r3, [r4, #26]
}
     ffa:	e7e4      	b.n	fc6 <SERCOM3_Handler+0x32>
     ffc:	200000a4 	.word	0x200000a4

00001000 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1000:	4b0e      	ldr	r3, [pc, #56]	; (103c <_sysctrl_init_sources+0x3c>)
    1002:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1004:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1006:	480e      	ldr	r0, [pc, #56]	; (1040 <_sysctrl_init_sources+0x40>)
    1008:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    100a:	0f92      	lsrs	r2, r2, #30
    100c:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    100e:	2002      	movs	r0, #2
    1010:	4302      	orrs	r2, r0
    1012:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1014:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1016:	699a      	ldr	r2, [r3, #24]
    1018:	4302      	orrs	r2, r0
    101a:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    101c:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    101e:	211f      	movs	r1, #31
    1020:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1022:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1024:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1026:	2208      	movs	r2, #8
    1028:	68cb      	ldr	r3, [r1, #12]
    102a:	421a      	tst	r2, r3
    102c:	d0fc      	beq.n	1028 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    102e:	4a03      	ldr	r2, [pc, #12]	; (103c <_sysctrl_init_sources+0x3c>)
    1030:	6a13      	ldr	r3, [r2, #32]
    1032:	2180      	movs	r1, #128	; 0x80
    1034:	430b      	orrs	r3, r1
    1036:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1038:	4770      	bx	lr
    103a:	46c0      	nop			; (mov r8, r8)
    103c:	40000800 	.word	0x40000800
    1040:	0fff0000 	.word	0x0fff0000

00001044 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1044:	4a02      	ldr	r2, [pc, #8]	; (1050 <_sysctrl_init_referenced_generators+0xc>)
    1046:	6993      	ldr	r3, [r2, #24]
    1048:	2102      	movs	r1, #2
    104a:	438b      	bics	r3, r1
    104c:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    104e:	4770      	bx	lr
    1050:	40000800 	.word	0x40000800

00001054 <main>:
#include <atmel_start.h>
#include "mulib_port_test.h"

int main(void)
{
    1054:	b510      	push	{r4, lr}
    /* Initializes MCU, drivers and middleware */
    atmel_start_init();
    1056:	4b03      	ldr	r3, [pc, #12]	; (1064 <main+0x10>)
    1058:	4798      	blx	r3
    mulib_port_test_init();
    105a:	4b03      	ldr	r3, [pc, #12]	; (1068 <main+0x14>)
    105c:	4798      	blx	r3

    /* Replace with your application code */
    while (1) {
        mulib_port_test_step();
    105e:	4c03      	ldr	r4, [pc, #12]	; (106c <main+0x18>)
    1060:	47a0      	blx	r4
    1062:	e7fd      	b.n	1060 <main+0xc>
    1064:	00000115 	.word	0x00000115
    1068:	00001149 	.word	0x00001149
    106c:	00001155 	.word	0x00001155

00001070 <button_press_cb>:
  test_port_printf("time = %d ms", ms);
#endif
}

static void button_press_cb(void *arg) {
	s_button_pressed = true;
    1070:	2201      	movs	r2, #1
    1072:	4b01      	ldr	r3, [pc, #4]	; (1078 <button_press_cb+0x8>)
    1074:	701a      	strb	r2, [r3, #0]
}
    1076:	4770      	bx	lr
    1078:	200000a8 	.word	0x200000a8

0000107c <serial_read_cb>:

static void serial_read_cb(void *arg) {
	s_char_available = true;
    107c:	2201      	movs	r2, #1
    107e:	4b01      	ldr	r3, [pc, #4]	; (1084 <serial_read_cb+0x8>)
    1080:	705a      	strb	r2, [r3, #1]
}
    1082:	4770      	bx	lr
    1084:	200000a8 	.word	0x200000a8

00001088 <rtc_cb>:

static void rtc_cb(void *arg) {
	s_rtc_matched = true;
    1088:	2201      	movs	r2, #1
    108a:	4b01      	ldr	r3, [pc, #4]	; (1090 <rtc_cb+0x8>)
    108c:	709a      	strb	r2, [r3, #2]
}
    108e:	4770      	bx	lr
    1090:	200000a8 	.word	0x200000a8

00001094 <test_wait_ms>:
static void test_wait_ms(int ms) {
    1094:	b570      	push	{r4, r5, r6, lr}
    1096:	0005      	movs	r5, r0
      mu_port_time_offset(mu_port_rtc_now(), mu_port_time_ms_to_duration(ms));
    1098:	4b0a      	ldr	r3, [pc, #40]	; (10c4 <test_wait_ms+0x30>)
    109a:	4798      	blx	r3
    109c:	0004      	movs	r4, r0
    109e:	0028      	movs	r0, r5
    10a0:	4b09      	ldr	r3, [pc, #36]	; (10c8 <test_wait_ms+0x34>)
    10a2:	4798      	blx	r3
    10a4:	0001      	movs	r1, r0
  mu_port_time_t then =
    10a6:	0020      	movs	r0, r4
    10a8:	4b08      	ldr	r3, [pc, #32]	; (10cc <test_wait_ms+0x38>)
    10aa:	4798      	blx	r3
    10ac:	0005      	movs	r5, r0
  while (mu_port_time_precedes(mu_port_rtc_now(), then)) {
    10ae:	4e05      	ldr	r6, [pc, #20]	; (10c4 <test_wait_ms+0x30>)
    10b0:	4c07      	ldr	r4, [pc, #28]	; (10d0 <test_wait_ms+0x3c>)
    10b2:	e000      	b.n	10b6 <test_wait_ms+0x22>
	  asm("nop");
    10b4:	46c0      	nop			; (mov r8, r8)
  while (mu_port_time_precedes(mu_port_rtc_now(), then)) {
    10b6:	47b0      	blx	r6
    10b8:	0029      	movs	r1, r5
    10ba:	47a0      	blx	r4
    10bc:	2800      	cmp	r0, #0
    10be:	d1f9      	bne.n	10b4 <test_wait_ms+0x20>
}
    10c0:	bd70      	pop	{r4, r5, r6, pc}
    10c2:	46c0      	nop			; (mov r8, r8)
    10c4:	00001501 	.word	0x00001501
    10c8:	000014a5 	.word	0x000014a5
    10cc:	00001495 	.word	0x00001495
    10d0:	0000149d 	.word	0x0000149d

000010d4 <test_port_printf>:
static void test_port_printf(const char *fmt, ...) {
    10d4:	b40f      	push	{r0, r1, r2, r3}
    10d6:	b530      	push	{r4, r5, lr}
    10d8:	b083      	sub	sp, #12
    10da:	ab06      	add	r3, sp, #24
    10dc:	cb04      	ldmia	r3!, {r2}
  va_start(ap, fmt);
    10de:	9301      	str	r3, [sp, #4]
  n_written = vsnprintf((char *)buf, MAX_CHARS, fmt, ap);
    10e0:	4d0a      	ldr	r5, [pc, #40]	; (110c <test_port_printf+0x38>)
    10e2:	3504      	adds	r5, #4
    10e4:	2132      	movs	r1, #50	; 0x32
    10e6:	0028      	movs	r0, r5
    10e8:	4c09      	ldr	r4, [pc, #36]	; (1110 <test_port_printf+0x3c>)
    10ea:	47a0      	blx	r4
    10ec:	0004      	movs	r4, r0
  mu_port_serial_write(buf, n_written);
    10ee:	0001      	movs	r1, r0
    10f0:	0028      	movs	r0, r5
    10f2:	4b08      	ldr	r3, [pc, #32]	; (1114 <test_port_printf+0x40>)
    10f4:	4798      	blx	r3
  while (mu_port_serial_write_count() < n_written) {
    10f6:	4d08      	ldr	r5, [pc, #32]	; (1118 <test_port_printf+0x44>)
    10f8:	e000      	b.n	10fc <test_port_printf+0x28>
    asm("nop");
    10fa:	46c0      	nop			; (mov r8, r8)
  while (mu_port_serial_write_count() < n_written) {
    10fc:	47a8      	blx	r5
    10fe:	4284      	cmp	r4, r0
    1100:	d8fb      	bhi.n	10fa <test_port_printf+0x26>
}
    1102:	b003      	add	sp, #12
    1104:	bc30      	pop	{r4, r5}
    1106:	bc08      	pop	{r3}
    1108:	b004      	add	sp, #16
    110a:	4718      	bx	r3
    110c:	200000a8 	.word	0x200000a8
    1110:	00001af9 	.word	0x00001af9
    1114:	00001619 	.word	0x00001619
    1118:	0000163d 	.word	0x0000163d

0000111c <test_print_time>:
static void test_print_time(mu_port_time_t t) {
    111c:	b510      	push	{r4, lr}
  mu_port_time_dt uptime = mu_port_time_difference(t, s_epoch);
    111e:	4b05      	ldr	r3, [pc, #20]	; (1134 <test_print_time+0x18>)
    1120:	6b99      	ldr	r1, [r3, #56]	; 0x38
    1122:	4b05      	ldr	r3, [pc, #20]	; (1138 <test_print_time+0x1c>)
    1124:	4798      	blx	r3
  int ms = mu_port_time_duration_to_ms(uptime);
    1126:	4b05      	ldr	r3, [pc, #20]	; (113c <test_print_time+0x20>)
    1128:	4798      	blx	r3
    112a:	0001      	movs	r1, r0
  test_port_printf("time = %d ms", ms);
    112c:	4804      	ldr	r0, [pc, #16]	; (1140 <test_print_time+0x24>)
    112e:	4b05      	ldr	r3, [pc, #20]	; (1144 <test_print_time+0x28>)
    1130:	4798      	blx	r3
}
    1132:	bd10      	pop	{r4, pc}
    1134:	200000a8 	.word	0x200000a8
    1138:	00001499 	.word	0x00001499
    113c:	000014cd 	.word	0x000014cd
    1140:	000023d4 	.word	0x000023d4
    1144:	000010d5 	.word	0x000010d5

00001148 <mulib_port_test_init>:
void mulib_port_test_init(void) {
    1148:	b510      	push	{r4, lr}
	mu_port_init();
    114a:	4b01      	ldr	r3, [pc, #4]	; (1150 <mulib_port_test_init+0x8>)
    114c:	4798      	blx	r3
}
    114e:	bd10      	pop	{r4, pc}
    1150:	00001409 	.word	0x00001409

00001154 <mulib_port_test_step>:
void mulib_port_test_step(void) {
    1154:	b5f0      	push	{r4, r5, r6, r7, lr}
    1156:	b083      	sub	sp, #12
  s_epoch = mu_port_rtc_now();
    1158:	4d6a      	ldr	r5, [pc, #424]	; (1304 <mulib_port_test_step+0x1b0>)
    115a:	47a8      	blx	r5
    115c:	4e6a      	ldr	r6, [pc, #424]	; (1308 <mulib_port_test_step+0x1b4>)
    115e:	63b0      	str	r0, [r6, #56]	; 0x38
  test_port_printf("\r\n================\r\nstarting mu_port_test\r\n");
    1160:	486a      	ldr	r0, [pc, #424]	; (130c <mulib_port_test_step+0x1b8>)
    1162:	4c6b      	ldr	r4, [pc, #428]	; (1310 <mulib_port_test_step+0x1bc>)
    1164:	47a0      	blx	r4
  test_port_printf("time before is ");
    1166:	486b      	ldr	r0, [pc, #428]	; (1314 <mulib_port_test_step+0x1c0>)
    1168:	47a0      	blx	r4
  test_print_time(mu_port_rtc_now());
    116a:	47a8      	blx	r5
    116c:	4f6a      	ldr	r7, [pc, #424]	; (1318 <mulib_port_test_step+0x1c4>)
    116e:	47b8      	blx	r7
  test_port_printf("\r\n");
    1170:	486a      	ldr	r0, [pc, #424]	; (131c <mulib_port_test_step+0x1c8>)
    1172:	47a0      	blx	r4
  test_port_printf("looping for 2.5 seconds...");
    1174:	486a      	ldr	r0, [pc, #424]	; (1320 <mulib_port_test_step+0x1cc>)
    1176:	47a0      	blx	r4
  test_wait_ms(2500);
    1178:	486a      	ldr	r0, [pc, #424]	; (1324 <mulib_port_test_step+0x1d0>)
    117a:	4b6b      	ldr	r3, [pc, #428]	; (1328 <mulib_port_test_step+0x1d4>)
    117c:	4798      	blx	r3
  test_port_printf("done.  time after is ");
    117e:	486b      	ldr	r0, [pc, #428]	; (132c <mulib_port_test_step+0x1d8>)
    1180:	47a0      	blx	r4
  test_print_time(mu_port_rtc_now());
    1182:	47a8      	blx	r5
    1184:	47b8      	blx	r7
  test_port_printf("\r\n");
    1186:	4865      	ldr	r0, [pc, #404]	; (131c <mulib_port_test_step+0x1c8>)
    1188:	47a0      	blx	r4
  s_rtc_matched = false;
    118a:	2300      	movs	r3, #0
    118c:	70b3      	strb	r3, [r6, #2]
  mu_port_rtc_set_cb(rtc_cb, NULL);
    118e:	2100      	movs	r1, #0
    1190:	4867      	ldr	r0, [pc, #412]	; (1330 <mulib_port_test_step+0x1dc>)
    1192:	4b68      	ldr	r3, [pc, #416]	; (1334 <mulib_port_test_step+0x1e0>)
    1194:	4798      	blx	r3
  mu_port_rtc_alarm_at(mu_port_time_offset(mu_port_rtc_now(),
    1196:	47a8      	blx	r5
    1198:	0005      	movs	r5, r0
    119a:	4862      	ldr	r0, [pc, #392]	; (1324 <mulib_port_test_step+0x1d0>)
    119c:	4b66      	ldr	r3, [pc, #408]	; (1338 <mulib_port_test_step+0x1e4>)
    119e:	4798      	blx	r3
    11a0:	0001      	movs	r1, r0
    11a2:	0028      	movs	r0, r5
    11a4:	4b65      	ldr	r3, [pc, #404]	; (133c <mulib_port_test_step+0x1e8>)
    11a6:	4798      	blx	r3
    11a8:	4b65      	ldr	r3, [pc, #404]	; (1340 <mulib_port_test_step+0x1ec>)
    11aa:	4798      	blx	r3
  test_port_printf("waiting 2.5 seconds for RTC match...");
    11ac:	4865      	ldr	r0, [pc, #404]	; (1344 <mulib_port_test_step+0x1f0>)
    11ae:	47a0      	blx	r4
  while (!s_rtc_matched) {
    11b0:	78b3      	ldrb	r3, [r6, #2]
    11b2:	2b00      	cmp	r3, #0
    11b4:	d104      	bne.n	11c0 <mulib_port_test_step+0x6c>
    11b6:	4a54      	ldr	r2, [pc, #336]	; (1308 <mulib_port_test_step+0x1b4>)
	  asm("nop");
    11b8:	46c0      	nop			; (mov r8, r8)
  while (!s_rtc_matched) {
    11ba:	7893      	ldrb	r3, [r2, #2]
    11bc:	2b00      	cmp	r3, #0
    11be:	d0fb      	beq.n	11b8 <mulib_port_test_step+0x64>
  test_port_printf("done.  time is now ");
    11c0:	4861      	ldr	r0, [pc, #388]	; (1348 <mulib_port_test_step+0x1f4>)
    11c2:	4c53      	ldr	r4, [pc, #332]	; (1310 <mulib_port_test_step+0x1bc>)
    11c4:	47a0      	blx	r4
  test_print_time(mu_port_rtc_now());
    11c6:	4b4f      	ldr	r3, [pc, #316]	; (1304 <mulib_port_test_step+0x1b0>)
    11c8:	4798      	blx	r3
    11ca:	4b53      	ldr	r3, [pc, #332]	; (1318 <mulib_port_test_step+0x1c4>)
    11cc:	4798      	blx	r3
  test_port_printf("\r\n");
    11ce:	4853      	ldr	r0, [pc, #332]	; (131c <mulib_port_test_step+0x1c8>)
    11d0:	47a0      	blx	r4
  test_port_printf("flashing LED for 2.5 seconds...");
    11d2:	485e      	ldr	r0, [pc, #376]	; (134c <mulib_port_test_step+0x1f8>)
    11d4:	47a0      	blx	r4
    11d6:	240a      	movs	r4, #10
    mu_port_led_set(!mu_port_led_get());
    11d8:	4f5d      	ldr	r7, [pc, #372]	; (1350 <mulib_port_test_step+0x1fc>)
    11da:	4e5e      	ldr	r6, [pc, #376]	; (1354 <mulib_port_test_step+0x200>)
    test_wait_ms(250);
    11dc:	4d52      	ldr	r5, [pc, #328]	; (1328 <mulib_port_test_step+0x1d4>)
    mu_port_led_set(!mu_port_led_get());
    11de:	47b8      	blx	r7
    11e0:	2301      	movs	r3, #1
    11e2:	4058      	eors	r0, r3
    11e4:	b2c0      	uxtb	r0, r0
    11e6:	47b0      	blx	r6
    test_wait_ms(250);
    11e8:	20fa      	movs	r0, #250	; 0xfa
    11ea:	47a8      	blx	r5
    11ec:	3c01      	subs	r4, #1
  for (int i = 0; i < 10; i++) {
    11ee:	2c00      	cmp	r4, #0
    11f0:	d1f5      	bne.n	11de <mulib_port_test_step+0x8a>
  mu_port_led_set(false);
    11f2:	2000      	movs	r0, #0
    11f4:	4b57      	ldr	r3, [pc, #348]	; (1354 <mulib_port_test_step+0x200>)
    11f6:	4798      	blx	r3
  test_port_printf("done.  time is now ");
    11f8:	4853      	ldr	r0, [pc, #332]	; (1348 <mulib_port_test_step+0x1f4>)
    11fa:	4c45      	ldr	r4, [pc, #276]	; (1310 <mulib_port_test_step+0x1bc>)
    11fc:	47a0      	blx	r4
  test_print_time(mu_port_rtc_now());
    11fe:	4b41      	ldr	r3, [pc, #260]	; (1304 <mulib_port_test_step+0x1b0>)
    1200:	4798      	blx	r3
    1202:	4b45      	ldr	r3, [pc, #276]	; (1318 <mulib_port_test_step+0x1c4>)
    1204:	4798      	blx	r3
  test_port_printf("\r\n");
    1206:	4845      	ldr	r0, [pc, #276]	; (131c <mulib_port_test_step+0x1c8>)
    1208:	47a0      	blx	r4
  test_port_printf("waiting for button press (synchronous)...");
    120a:	4853      	ldr	r0, [pc, #332]	; (1358 <mulib_port_test_step+0x204>)
    120c:	47a0      	blx	r4
  while (!mu_port_button_is_pressed()) {
    120e:	4c53      	ldr	r4, [pc, #332]	; (135c <mulib_port_test_step+0x208>)
    1210:	47a0      	blx	r4
    1212:	2800      	cmp	r0, #0
    1214:	d0fc      	beq.n	1210 <mulib_port_test_step+0xbc>
  test_port_printf("received button press.\r\n");
    1216:	4852      	ldr	r0, [pc, #328]	; (1360 <mulib_port_test_step+0x20c>)
    1218:	4b3d      	ldr	r3, [pc, #244]	; (1310 <mulib_port_test_step+0x1bc>)
    121a:	4798      	blx	r3
    test_wait_ms(10);
    121c:	4d42      	ldr	r5, [pc, #264]	; (1328 <mulib_port_test_step+0x1d4>)
  } while (mu_port_button_is_pressed());
    121e:	4c4f      	ldr	r4, [pc, #316]	; (135c <mulib_port_test_step+0x208>)
    test_wait_ms(10);
    1220:	200a      	movs	r0, #10
    1222:	47a8      	blx	r5
  } while (mu_port_button_is_pressed());
    1224:	47a0      	blx	r4
    1226:	2800      	cmp	r0, #0
    1228:	d1fa      	bne.n	1220 <mulib_port_test_step+0xcc>
  s_button_pressed = false;
    122a:	2200      	movs	r2, #0
    122c:	4b36      	ldr	r3, [pc, #216]	; (1308 <mulib_port_test_step+0x1b4>)
    122e:	701a      	strb	r2, [r3, #0]
  mu_port_button_set_cb(button_press_cb, NULL);
    1230:	2100      	movs	r1, #0
    1232:	484c      	ldr	r0, [pc, #304]	; (1364 <mulib_port_test_step+0x210>)
    1234:	4b4c      	ldr	r3, [pc, #304]	; (1368 <mulib_port_test_step+0x214>)
    1236:	4798      	blx	r3
  test_port_printf("waiting for button press (asynchronous)...");
    1238:	484c      	ldr	r0, [pc, #304]	; (136c <mulib_port_test_step+0x218>)
    123a:	4b35      	ldr	r3, [pc, #212]	; (1310 <mulib_port_test_step+0x1bc>)
    123c:	4798      	blx	r3
  while (!s_button_pressed) {
    123e:	4a32      	ldr	r2, [pc, #200]	; (1308 <mulib_port_test_step+0x1b4>)
    1240:	7813      	ldrb	r3, [r2, #0]
    1242:	2b00      	cmp	r3, #0
    1244:	d0fc      	beq.n	1240 <mulib_port_test_step+0xec>
  test_port_printf("received button press.\r\n");
    1246:	4846      	ldr	r0, [pc, #280]	; (1360 <mulib_port_test_step+0x20c>)
    1248:	4c31      	ldr	r4, [pc, #196]	; (1310 <mulib_port_test_step+0x1bc>)
    124a:	47a0      	blx	r4
  test_port_printf("waiting for keyboard input (synchronous)...");
    124c:	4848      	ldr	r0, [pc, #288]	; (1370 <mulib_port_test_step+0x21c>)
    124e:	47a0      	blx	r4
  mu_port_serial_read(&c, 1);
    1250:	2101      	movs	r1, #1
    1252:	466b      	mov	r3, sp
    1254:	1dd8      	adds	r0, r3, #7
    1256:	4b47      	ldr	r3, [pc, #284]	; (1374 <mulib_port_test_step+0x220>)
    1258:	4798      	blx	r3
  while (mu_port_serial_read_count() < 1) {
    125a:	4c47      	ldr	r4, [pc, #284]	; (1378 <mulib_port_test_step+0x224>)
    125c:	e000      	b.n	1260 <mulib_port_test_step+0x10c>
    asm("nop");
    125e:	46c0      	nop			; (mov r8, r8)
  while (mu_port_serial_read_count() < 1) {
    1260:	47a0      	blx	r4
    1262:	2800      	cmp	r0, #0
    1264:	ddfb      	ble.n	125e <mulib_port_test_step+0x10a>
  test_port_printf("received '%c'\r\n", c);
    1266:	466b      	mov	r3, sp
    1268:	1ddd      	adds	r5, r3, #7
    126a:	79d9      	ldrb	r1, [r3, #7]
    126c:	4843      	ldr	r0, [pc, #268]	; (137c <mulib_port_test_step+0x228>)
    126e:	4c28      	ldr	r4, [pc, #160]	; (1310 <mulib_port_test_step+0x1bc>)
    1270:	47a0      	blx	r4
  s_char_available = false;
    1272:	2200      	movs	r2, #0
    1274:	4b24      	ldr	r3, [pc, #144]	; (1308 <mulib_port_test_step+0x1b4>)
    1276:	705a      	strb	r2, [r3, #1]
  mu_port_serial_set_read_cb(serial_read_cb, NULL);
    1278:	2100      	movs	r1, #0
    127a:	4841      	ldr	r0, [pc, #260]	; (1380 <mulib_port_test_step+0x22c>)
    127c:	4b41      	ldr	r3, [pc, #260]	; (1384 <mulib_port_test_step+0x230>)
    127e:	4798      	blx	r3
  mu_port_serial_read(&c, 1);
    1280:	2101      	movs	r1, #1
    1282:	0028      	movs	r0, r5
    1284:	4b3b      	ldr	r3, [pc, #236]	; (1374 <mulib_port_test_step+0x220>)
    1286:	4798      	blx	r3
  test_port_printf("waiting for keyboard input (asynchronous)...");
    1288:	483f      	ldr	r0, [pc, #252]	; (1388 <mulib_port_test_step+0x234>)
    128a:	47a0      	blx	r4
  while (!s_char_available) {
    128c:	4a1e      	ldr	r2, [pc, #120]	; (1308 <mulib_port_test_step+0x1b4>)
    128e:	7853      	ldrb	r3, [r2, #1]
    1290:	2b00      	cmp	r3, #0
    1292:	d0fc      	beq.n	128e <mulib_port_test_step+0x13a>
  test_port_printf("received '%c'\r\n", c);
    1294:	466b      	mov	r3, sp
    1296:	79d9      	ldrb	r1, [r3, #7]
    1298:	4838      	ldr	r0, [pc, #224]	; (137c <mulib_port_test_step+0x228>)
    129a:	4c1d      	ldr	r4, [pc, #116]	; (1310 <mulib_port_test_step+0x1bc>)
    129c:	47a0      	blx	r4
  test_port_printf("sleeping for 2.5 seconds...");
    129e:	483b      	ldr	r0, [pc, #236]	; (138c <mulib_port_test_step+0x238>)
    12a0:	47a0      	blx	r4
  while (!mu_port_serial_can_write()) {
    12a2:	4c3b      	ldr	r4, [pc, #236]	; (1390 <mulib_port_test_step+0x23c>)
    12a4:	e000      	b.n	12a8 <mulib_port_test_step+0x154>
	  asm("nop");
    12a6:	46c0      	nop			; (mov r8, r8)
  while (!mu_port_serial_can_write()) {
    12a8:	47a0      	blx	r4
    12aa:	2800      	cmp	r0, #0
    12ac:	d0fb      	beq.n	12a6 <mulib_port_test_step+0x152>
  mu_port_sleep_until(mu_port_time_offset(mu_port_rtc_now(),
    12ae:	4d15      	ldr	r5, [pc, #84]	; (1304 <mulib_port_test_step+0x1b0>)
    12b0:	47a8      	blx	r5
    12b2:	0004      	movs	r4, r0
    12b4:	481b      	ldr	r0, [pc, #108]	; (1324 <mulib_port_test_step+0x1d0>)
    12b6:	4b20      	ldr	r3, [pc, #128]	; (1338 <mulib_port_test_step+0x1e4>)
    12b8:	4798      	blx	r3
    12ba:	0001      	movs	r1, r0
    12bc:	0020      	movs	r0, r4
    12be:	4b1f      	ldr	r3, [pc, #124]	; (133c <mulib_port_test_step+0x1e8>)
    12c0:	4798      	blx	r3
    12c2:	4b34      	ldr	r3, [pc, #208]	; (1394 <mulib_port_test_step+0x240>)
    12c4:	4798      	blx	r3
  test_port_printf("done.  time is now ");
    12c6:	4820      	ldr	r0, [pc, #128]	; (1348 <mulib_port_test_step+0x1f4>)
    12c8:	4c11      	ldr	r4, [pc, #68]	; (1310 <mulib_port_test_step+0x1bc>)
    12ca:	47a0      	blx	r4
  test_print_time(mu_port_rtc_now());
    12cc:	47a8      	blx	r5
    12ce:	4b12      	ldr	r3, [pc, #72]	; (1318 <mulib_port_test_step+0x1c4>)
    12d0:	4798      	blx	r3
  test_port_printf("\r\n");
    12d2:	4812      	ldr	r0, [pc, #72]	; (131c <mulib_port_test_step+0x1c8>)
    12d4:	47a0      	blx	r4
  test_port_printf("sleeping until button press...");
    12d6:	4830      	ldr	r0, [pc, #192]	; (1398 <mulib_port_test_step+0x244>)
    12d8:	47a0      	blx	r4
  while (!mu_port_serial_can_write()) {
    12da:	4c2d      	ldr	r4, [pc, #180]	; (1390 <mulib_port_test_step+0x23c>)
    12dc:	e000      	b.n	12e0 <mulib_port_test_step+0x18c>
	  asm("nop");
    12de:	46c0      	nop			; (mov r8, r8)
  while (!mu_port_serial_can_write()) {
    12e0:	47a0      	blx	r4
    12e2:	2800      	cmp	r0, #0
    12e4:	d0fb      	beq.n	12de <mulib_port_test_step+0x18a>
  mu_port_sleep();
    12e6:	4b2d      	ldr	r3, [pc, #180]	; (139c <mulib_port_test_step+0x248>)
    12e8:	4798      	blx	r3
  test_port_printf("done.  time is now ");
    12ea:	4817      	ldr	r0, [pc, #92]	; (1348 <mulib_port_test_step+0x1f4>)
    12ec:	4c08      	ldr	r4, [pc, #32]	; (1310 <mulib_port_test_step+0x1bc>)
    12ee:	47a0      	blx	r4
  test_print_time(mu_port_rtc_now());
    12f0:	4b04      	ldr	r3, [pc, #16]	; (1304 <mulib_port_test_step+0x1b0>)
    12f2:	4798      	blx	r3
    12f4:	4b08      	ldr	r3, [pc, #32]	; (1318 <mulib_port_test_step+0x1c4>)
    12f6:	4798      	blx	r3
  test_port_printf("\r\n");
    12f8:	4808      	ldr	r0, [pc, #32]	; (131c <mulib_port_test_step+0x1c8>)
    12fa:	47a0      	blx	r4
  test_port_printf("end of mu_port_test\r\n================\r\n");
    12fc:	4828      	ldr	r0, [pc, #160]	; (13a0 <mulib_port_test_step+0x24c>)
    12fe:	47a0      	blx	r4
}
    1300:	b003      	add	sp, #12
    1302:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1304:	00001501 	.word	0x00001501
    1308:	200000a8 	.word	0x200000a8
    130c:	000023e4 	.word	0x000023e4
    1310:	000010d5 	.word	0x000010d5
    1314:	00002410 	.word	0x00002410
    1318:	0000111d 	.word	0x0000111d
    131c:	00002420 	.word	0x00002420
    1320:	00002424 	.word	0x00002424
    1324:	000009c4 	.word	0x000009c4
    1328:	00001095 	.word	0x00001095
    132c:	00002440 	.word	0x00002440
    1330:	00001089 	.word	0x00001089
    1334:	00001515 	.word	0x00001515
    1338:	000014a5 	.word	0x000014a5
    133c:	00001495 	.word	0x00001495
    1340:	00001531 	.word	0x00001531
    1344:	00002458 	.word	0x00002458
    1348:	00002480 	.word	0x00002480
    134c:	00002494 	.word	0x00002494
    1350:	00001581 	.word	0x00001581
    1354:	00001561 	.word	0x00001561
    1358:	000024b4 	.word	0x000024b4
    135c:	000015c1 	.word	0x000015c1
    1360:	000024e0 	.word	0x000024e0
    1364:	00001071 	.word	0x00001071
    1368:	000015fd 	.word	0x000015fd
    136c:	000024fc 	.word	0x000024fc
    1370:	00002528 	.word	0x00002528
    1374:	00001679 	.word	0x00001679
    1378:	00001695 	.word	0x00001695
    137c:	00002554 	.word	0x00002554
    1380:	0000107d 	.word	0x0000107d
    1384:	000016b1 	.word	0x000016b1
    1388:	00002564 	.word	0x00002564
    138c:	00002594 	.word	0x00002594
    1390:	00001659 	.word	0x00001659
    1394:	000016cd 	.word	0x000016cd
    1398:	000025b0 	.word	0x000025b0
    139c:	000016f9 	.word	0x000016f9
    13a0:	000025d0 	.word	0x000025d0

000013a4 <button_cb_trampoline>:
void mu_port_sleep(void) { go_to_sleep(); }

// =============================================================================
// private (local) code

void button_cb_trampoline(void) {
    13a4:	b510      	push	{r4, lr}
  if (s_port.button_cb) {
    13a6:	4b04      	ldr	r3, [pc, #16]	; (13b8 <button_cb_trampoline+0x14>)
    13a8:	681b      	ldr	r3, [r3, #0]
    13aa:	2b00      	cmp	r3, #0
    13ac:	d002      	beq.n	13b4 <button_cb_trampoline+0x10>
    s_port.button_cb(s_port.button_cb_arg);
    13ae:	4a02      	ldr	r2, [pc, #8]	; (13b8 <button_cb_trampoline+0x14>)
    13b0:	6850      	ldr	r0, [r2, #4]
    13b2:	4798      	blx	r3
  }
}
    13b4:	bd10      	pop	{r4, pc}
    13b6:	46c0      	nop			; (mov r8, r8)
    13b8:	200000e4 	.word	0x200000e4

000013bc <tx_cb_trampoline>:

void tx_cb_trampoline(const struct usart_async_descriptor *const io_descr) {
    13bc:	b510      	push	{r4, lr}
  // arrive here when the previous call to mu_port_serial_write() completes.
  s_tx_in_progress = false;
    13be:	4b05      	ldr	r3, [pc, #20]	; (13d4 <tx_cb_trampoline+0x18>)
    13c0:	2100      	movs	r1, #0
    13c2:	2220      	movs	r2, #32
    13c4:	5499      	strb	r1, [r3, r2]
  if (s_port.tx_cb) {
    13c6:	689b      	ldr	r3, [r3, #8]
    13c8:	2b00      	cmp	r3, #0
    13ca:	d002      	beq.n	13d2 <tx_cb_trampoline+0x16>
    s_port.tx_cb(s_port.tx_cb_arg);
    13cc:	4a01      	ldr	r2, [pc, #4]	; (13d4 <tx_cb_trampoline+0x18>)
    13ce:	68d0      	ldr	r0, [r2, #12]
    13d0:	4798      	blx	r3
  }
}
    13d2:	bd10      	pop	{r4, pc}
    13d4:	200000e4 	.word	0x200000e4

000013d8 <rx_cb_trampoline>:

void rx_cb_trampoline(const struct usart_async_descriptor *const io_descr) {
    13d8:	b510      	push	{r4, lr}
  // arrive here when the previous call to mu_port_serial_read() completes.
  if (s_port.rx_cb) {
    13da:	4b04      	ldr	r3, [pc, #16]	; (13ec <rx_cb_trampoline+0x14>)
    13dc:	691b      	ldr	r3, [r3, #16]
    13de:	2b00      	cmp	r3, #0
    13e0:	d002      	beq.n	13e8 <rx_cb_trampoline+0x10>
    s_port.rx_cb(s_port.rx_cb_arg);
    13e2:	4a02      	ldr	r2, [pc, #8]	; (13ec <rx_cb_trampoline+0x14>)
    13e4:	6950      	ldr	r0, [r2, #20]
    13e6:	4798      	blx	r3
  }
}
    13e8:	bd10      	pop	{r4, pc}
    13ea:	46c0      	nop			; (mov r8, r8)
    13ec:	200000e4 	.word	0x200000e4

000013f0 <rtc_cb_trampoline>:

void rtc_cb_trampoline(struct calendar_dev *const dev) {
    13f0:	b510      	push	{r4, lr}
  // Arrive here when the RTC count register matches the RTC compare register.
  // Even if the user hasn't registered a callback, this will wake the processor
  // from sleep...
  if (s_port.rtc_cb) {
    13f2:	4b04      	ldr	r3, [pc, #16]	; (1404 <rtc_cb_trampoline+0x14>)
    13f4:	699b      	ldr	r3, [r3, #24]
    13f6:	2b00      	cmp	r3, #0
    13f8:	d002      	beq.n	1400 <rtc_cb_trampoline+0x10>
    s_port.rtc_cb(s_port.rtc_cb_arg);
    13fa:	4a02      	ldr	r2, [pc, #8]	; (1404 <rtc_cb_trampoline+0x14>)
    13fc:	69d0      	ldr	r0, [r2, #28]
    13fe:	4798      	blx	r3
  }
}
    1400:	bd10      	pop	{r4, pc}
    1402:	46c0      	nop			; (mov r8, r8)
    1404:	200000e4 	.word	0x200000e4

00001408 <mu_port_init>:
void mu_port_init(void) {
    1408:	b570      	push	{r4, r5, r6, lr}
  memset(&s_port, 0, sizeof(s_port));
    140a:	4c14      	ldr	r4, [pc, #80]	; (145c <mu_port_init+0x54>)
    140c:	2220      	movs	r2, #32
    140e:	2100      	movs	r1, #0
    1410:	0020      	movs	r0, r4
    1412:	4b13      	ldr	r3, [pc, #76]	; (1460 <mu_port_init+0x58>)
    1414:	4798      	blx	r3
  ext_irq_register(PIN_PA15, button_cb_trampoline);
    1416:	4913      	ldr	r1, [pc, #76]	; (1464 <mu_port_init+0x5c>)
    1418:	200f      	movs	r0, #15
    141a:	4b13      	ldr	r3, [pc, #76]	; (1468 <mu_port_init+0x60>)
    141c:	4798      	blx	r3
  s_tx_in_progress = false;
    141e:	2200      	movs	r2, #0
    1420:	2320      	movs	r3, #32
    1422:	54e2      	strb	r2, [r4, r3]
  usart_async_get_io_descriptor(&USART_0, &s_usart_descriptor);
    1424:	0021      	movs	r1, r4
    1426:	3124      	adds	r1, #36	; 0x24
    1428:	4c10      	ldr	r4, [pc, #64]	; (146c <mu_port_init+0x64>)
    142a:	0020      	movs	r0, r4
    142c:	4b10      	ldr	r3, [pc, #64]	; (1470 <mu_port_init+0x68>)
    142e:	4798      	blx	r3
  usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, tx_cb_trampoline);
    1430:	4a10      	ldr	r2, [pc, #64]	; (1474 <mu_port_init+0x6c>)
    1432:	2101      	movs	r1, #1
    1434:	0020      	movs	r0, r4
    1436:	4d10      	ldr	r5, [pc, #64]	; (1478 <mu_port_init+0x70>)
    1438:	47a8      	blx	r5
  usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, rx_cb_trampoline);
    143a:	4a10      	ldr	r2, [pc, #64]	; (147c <mu_port_init+0x74>)
    143c:	2100      	movs	r1, #0
    143e:	0020      	movs	r0, r4
    1440:	47a8      	blx	r5
  usart_async_enable(&USART_0);
    1442:	0020      	movs	r0, r4
    1444:	4b0e      	ldr	r3, [pc, #56]	; (1480 <mu_port_init+0x78>)
    1446:	4798      	blx	r3
  calendar_enable(&CALENDAR_0); // start RTC
    1448:	4c0e      	ldr	r4, [pc, #56]	; (1484 <mu_port_init+0x7c>)
    144a:	0020      	movs	r0, r4
    144c:	4b0e      	ldr	r3, [pc, #56]	; (1488 <mu_port_init+0x80>)
    144e:	4798      	blx	r3
  _calendar_register_callback(&CALENDAR_0.device, rtc_cb_trampoline);
    1450:	490e      	ldr	r1, [pc, #56]	; (148c <mu_port_init+0x84>)
    1452:	0020      	movs	r0, r4
    1454:	4b0e      	ldr	r3, [pc, #56]	; (1490 <mu_port_init+0x88>)
    1456:	4798      	blx	r3
}
    1458:	bd70      	pop	{r4, r5, r6, pc}
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	200000e4 	.word	0x200000e4
    1460:	00001a91 	.word	0x00001a91
    1464:	000013a5 	.word	0x000013a5
    1468:	00000479 	.word	0x00000479
    146c:	20000130 	.word	0x20000130
    1470:	000007d1 	.word	0x000007d1
    1474:	000013bd 	.word	0x000013bd
    1478:	000007fd 	.word	0x000007fd
    147c:	000013d9 	.word	0x000013d9
    1480:	000007a5 	.word	0x000007a5
    1484:	20000114 	.word	0x20000114
    1488:	000003f1 	.word	0x000003f1
    148c:	000013f1 	.word	0x000013f1
    1490:	00000c65 	.word	0x00000c65

00001494 <mu_port_time_offset>:
  return t + dt;
    1494:	1808      	adds	r0, r1, r0
}
    1496:	4770      	bx	lr

00001498 <mu_port_time_difference>:
  return t1 - t2;
    1498:	1a40      	subs	r0, r0, r1
}
    149a:	4770      	bx	lr

0000149c <mu_port_time_precedes>:
  return t1 - t2;
    149c:	1a40      	subs	r0, r0, r1
  return mu_port_time_difference(t1, t2) > MAX_DURATION;
    149e:	0fc0      	lsrs	r0, r0, #31
}
    14a0:	4770      	bx	lr
	...

000014a4 <mu_port_time_ms_to_duration>:
mu_port_time_dt mu_port_time_ms_to_duration(int ms) {
    14a4:	b510      	push	{r4, lr}
  return quo_rounded(ms * CONF_GCLK_RTC_FREQUENCY, 1000);
    14a6:	03c0      	lsls	r0, r0, #15
  //   (y < 0) is false (zero) if x is non-negative
  //   (x < 0) ^ (y < 0) is true if x and y have opposite signs
  //   x/y would be the quotient, but it is truncated towards zero.  To round:
  //   (x + y/2)/y is the rounded quotient when x and y have the same sign
  //   (x - y/2)/y is the rounded quotient when x and y have opposite signs
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
    14a8:	d506      	bpl.n	14b8 <mu_port_time_ms_to_duration+0x14>
    14aa:	38f5      	subs	r0, #245	; 0xf5
    14ac:	38ff      	subs	r0, #255	; 0xff
    14ae:	21fa      	movs	r1, #250	; 0xfa
    14b0:	0089      	lsls	r1, r1, #2
    14b2:	4b05      	ldr	r3, [pc, #20]	; (14c8 <mu_port_time_ms_to_duration+0x24>)
    14b4:	4798      	blx	r3
}
    14b6:	bd10      	pop	{r4, pc}
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
    14b8:	30f5      	adds	r0, #245	; 0xf5
    14ba:	30ff      	adds	r0, #255	; 0xff
    14bc:	21fa      	movs	r1, #250	; 0xfa
    14be:	0089      	lsls	r1, r1, #2
    14c0:	4b01      	ldr	r3, [pc, #4]	; (14c8 <mu_port_time_ms_to_duration+0x24>)
    14c2:	4798      	blx	r3
    14c4:	e7f7      	b.n	14b6 <mu_port_time_ms_to_duration+0x12>
    14c6:	46c0      	nop			; (mov r8, r8)
    14c8:	0000181d 	.word	0x0000181d

000014cc <mu_port_time_duration_to_ms>:
  return quo_rounded(dt * 1000, CONF_GCLK_RTC_FREQUENCY);
    14cc:	23fa      	movs	r3, #250	; 0xfa
    14ce:	009b      	lsls	r3, r3, #2
    14d0:	4343      	muls	r3, r0
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
    14d2:	2b00      	cmp	r3, #0
    14d4:	da08      	bge.n	14e8 <mu_port_time_duration_to_ms+0x1c>
    14d6:	4a09      	ldr	r2, [pc, #36]	; (14fc <mu_port_time_duration_to_ms+0x30>)
    14d8:	4694      	mov	ip, r2
    14da:	4463      	add	r3, ip
    14dc:	17d8      	asrs	r0, r3, #31
    14de:	0440      	lsls	r0, r0, #17
    14e0:	0c40      	lsrs	r0, r0, #17
    14e2:	18c0      	adds	r0, r0, r3
    14e4:	13c0      	asrs	r0, r0, #15
}
    14e6:	4770      	bx	lr
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
    14e8:	2280      	movs	r2, #128	; 0x80
    14ea:	01d2      	lsls	r2, r2, #7
    14ec:	4694      	mov	ip, r2
    14ee:	4463      	add	r3, ip
    14f0:	17d8      	asrs	r0, r3, #31
    14f2:	0440      	lsls	r0, r0, #17
    14f4:	0c40      	lsrs	r0, r0, #17
    14f6:	18c0      	adds	r0, r0, r3
    14f8:	13c0      	asrs	r0, r0, #15
  return quo_rounded(dt * 1000, CONF_GCLK_RTC_FREQUENCY);
    14fa:	e7f4      	b.n	14e6 <mu_port_time_duration_to_ms+0x1a>
    14fc:	ffffc000 	.word	0xffffc000

00001500 <mu_port_rtc_now>:
  return hri_rtcmode0_read_COUNT_COUNT_bf(CALENDAR_0.device.hw);
    1500:	4b03      	ldr	r3, [pc, #12]	; (1510 <mu_port_rtc_now+0x10>)
    1502:	681a      	ldr	r2, [r3, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1504:	7a93      	ldrb	r3, [r2, #10]
    1506:	09db      	lsrs	r3, r3, #7
    1508:	d1fc      	bne.n	1504 <mu_port_rtc_now+0x4>
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
    150a:	6910      	ldr	r0, [r2, #16]
}
    150c:	4770      	bx	lr
    150e:	46c0      	nop			; (mov r8, r8)
    1510:	20000114 	.word	0x20000114

00001514 <mu_port_rtc_set_cb>:
  if (fn) {
    1514:	2800      	cmp	r0, #0
    1516:	d003      	beq.n	1520 <mu_port_rtc_set_cb+0xc>
    s_port.rtc_cb = fn;
    1518:	4b04      	ldr	r3, [pc, #16]	; (152c <mu_port_rtc_set_cb+0x18>)
    151a:	6198      	str	r0, [r3, #24]
    s_port.rtc_cb_arg = arg;
    151c:	61d9      	str	r1, [r3, #28]
}
    151e:	4770      	bx	lr
    s_port.rtc_cb = NULL;
    1520:	4b02      	ldr	r3, [pc, #8]	; (152c <mu_port_rtc_set_cb+0x18>)
    1522:	2200      	movs	r2, #0
    1524:	619a      	str	r2, [r3, #24]
    s_port.rtc_cb_arg = NULL;
    1526:	61da      	str	r2, [r3, #28]
}
    1528:	e7f9      	b.n	151e <mu_port_rtc_set_cb+0xa>
    152a:	46c0      	nop			; (mov r8, r8)
    152c:	200000e4 	.word	0x200000e4

00001530 <mu_port_rtc_alarm_at>:
void mu_port_rtc_alarm_at(mu_port_time_t at) {
    1530:	b510      	push	{r4, lr}
    1532:	0001      	movs	r1, r0
  _calendar_set_comp(&CALENDAR_0.device, at);
    1534:	4807      	ldr	r0, [pc, #28]	; (1554 <mu_port_rtc_alarm_at+0x24>)
    1536:	4b08      	ldr	r3, [pc, #32]	; (1558 <mu_port_rtc_alarm_at+0x28>)
    1538:	4798      	blx	r3
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    153a:	4b08      	ldr	r3, [pc, #32]	; (155c <mu_port_rtc_alarm_at+0x2c>)
    153c:	885a      	ldrh	r2, [r3, #2]
    153e:	2180      	movs	r1, #128	; 0x80
    1540:	01c9      	lsls	r1, r1, #7
    1542:	430a      	orrs	r2, r1
    1544:	805a      	strh	r2, [r3, #2]
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
    1546:	885a      	ldrh	r2, [r3, #2]
    1548:	2180      	movs	r1, #128	; 0x80
    154a:	0209      	lsls	r1, r1, #8
    154c:	430a      	orrs	r2, r1
    154e:	805a      	strh	r2, [r3, #2]
}
    1550:	bd10      	pop	{r4, pc}
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	20000114 	.word	0x20000114
    1558:	00000d81 	.word	0x00000d81
    155c:	40001400 	.word	0x40001400

00001560 <mu_port_led_set>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    1560:	2800      	cmp	r0, #0
    1562:	d006      	beq.n	1572 <mu_port_led_set+0x12>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1564:	2180      	movs	r1, #128	; 0x80
    1566:	05c9      	lsls	r1, r1, #23
    1568:	2394      	movs	r3, #148	; 0x94
    156a:	22c0      	movs	r2, #192	; 0xc0
    156c:	05d2      	lsls	r2, r2, #23
    156e:	50d1      	str	r1, [r2, r3]
void mu_port_led_set(bool on) { gpio_set_pin_level(USER_LED_AL, !on); }
    1570:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1572:	2180      	movs	r1, #128	; 0x80
    1574:	05c9      	lsls	r1, r1, #23
    1576:	2398      	movs	r3, #152	; 0x98
    1578:	22c0      	movs	r2, #192	; 0xc0
    157a:	05d2      	lsls	r2, r2, #23
    157c:	50d1      	str	r1, [r2, r3]
    157e:	e7f7      	b.n	1570 <mu_port_led_set+0x10>

00001580 <mu_port_led_get>:
bool mu_port_led_get(void) { return !gpio_get_pin_level(USER_LED_AL); }
    1580:	b510      	push	{r4, lr}
    1582:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1584:	a801      	add	r0, sp, #4
    1586:	4b0b      	ldr	r3, [pc, #44]	; (15b4 <mu_port_led_get+0x34>)
    1588:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    158a:	22c0      	movs	r2, #192	; 0xc0
    158c:	05d2      	lsls	r2, r2, #23
    158e:	2380      	movs	r3, #128	; 0x80
    1590:	58d4      	ldr	r4, [r2, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1592:	3320      	adds	r3, #32
    1594:	4908      	ldr	r1, [pc, #32]	; (15b8 <mu_port_led_get+0x38>)
    1596:	58cb      	ldr	r3, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1598:	2190      	movs	r1, #144	; 0x90
    159a:	5850      	ldr	r0, [r2, r1]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    159c:	4058      	eors	r0, r3
    159e:	4004      	ands	r4, r0
    15a0:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    15a2:	a801      	add	r0, sp, #4
    15a4:	4b05      	ldr	r3, [pc, #20]	; (15bc <mu_port_led_get+0x3c>)
    15a6:	4798      	blx	r3
    15a8:	0fa4      	lsrs	r4, r4, #30
    15aa:	2001      	movs	r0, #1
    15ac:	4044      	eors	r4, r0
    15ae:	4020      	ands	r0, r4
    15b0:	b002      	add	sp, #8
    15b2:	bd10      	pop	{r4, pc}
    15b4:	0000038d 	.word	0x0000038d
    15b8:	41004400 	.word	0x41004400
    15bc:	0000039b 	.word	0x0000039b

000015c0 <mu_port_button_is_pressed>:
bool mu_port_button_is_pressed(void) {
    15c0:	b510      	push	{r4, lr}
    15c2:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
    15c4:	a801      	add	r0, sp, #4
    15c6:	4b0a      	ldr	r3, [pc, #40]	; (15f0 <mu_port_button_is_pressed+0x30>)
    15c8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    15ca:	22c0      	movs	r2, #192	; 0xc0
    15cc:	05d2      	lsls	r2, r2, #23
    15ce:	6814      	ldr	r4, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    15d0:	4b08      	ldr	r3, [pc, #32]	; (15f4 <mu_port_button_is_pressed+0x34>)
    15d2:	6a1b      	ldr	r3, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    15d4:	6910      	ldr	r0, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    15d6:	4058      	eors	r0, r3
    15d8:	4004      	ands	r4, r0
    15da:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    15dc:	a801      	add	r0, sp, #4
    15de:	4b06      	ldr	r3, [pc, #24]	; (15f8 <mu_port_button_is_pressed+0x38>)
    15e0:	4798      	blx	r3
  return !gpio_get_pin_level(USER_BUTTON_AL);
    15e2:	0be4      	lsrs	r4, r4, #15
    15e4:	2001      	movs	r0, #1
    15e6:	4044      	eors	r4, r0
    15e8:	4020      	ands	r0, r4
}
    15ea:	b002      	add	sp, #8
    15ec:	bd10      	pop	{r4, pc}
    15ee:	46c0      	nop			; (mov r8, r8)
    15f0:	0000038d 	.word	0x0000038d
    15f4:	41004400 	.word	0x41004400
    15f8:	0000039b 	.word	0x0000039b

000015fc <mu_port_button_set_cb>:
  if (fn) {
    15fc:	2800      	cmp	r0, #0
    15fe:	d003      	beq.n	1608 <mu_port_button_set_cb+0xc>
    s_port.button_cb = fn;
    1600:	4b04      	ldr	r3, [pc, #16]	; (1614 <mu_port_button_set_cb+0x18>)
    1602:	6018      	str	r0, [r3, #0]
    s_port.button_cb_arg = arg;
    1604:	6059      	str	r1, [r3, #4]
}
    1606:	4770      	bx	lr
    s_port.button_cb = NULL;
    1608:	4b02      	ldr	r3, [pc, #8]	; (1614 <mu_port_button_set_cb+0x18>)
    160a:	2200      	movs	r2, #0
    160c:	601a      	str	r2, [r3, #0]
    s_port.button_cb_arg = NULL;
    160e:	605a      	str	r2, [r3, #4]
}
    1610:	e7f9      	b.n	1606 <mu_port_button_set_cb+0xa>
    1612:	46c0      	nop			; (mov r8, r8)
    1614:	200000e4 	.word	0x200000e4

00001618 <mu_port_serial_write>:
bool mu_port_serial_write(const uint8_t *const buf, int n_bytes) {
    1618:	b510      	push	{r4, lr}
    161a:	0004      	movs	r4, r0
  s_tx_in_progress = true;
    161c:	4b05      	ldr	r3, [pc, #20]	; (1634 <mu_port_serial_write+0x1c>)
    161e:	2001      	movs	r0, #1
    1620:	2220      	movs	r2, #32
    1622:	5498      	strb	r0, [r3, r2]
  if (io_write(s_usart_descriptor, buf, n_bytes) < 0) {
    1624:	b28a      	uxth	r2, r1
    1626:	6a58      	ldr	r0, [r3, #36]	; 0x24
    1628:	0021      	movs	r1, r4
    162a:	4b03      	ldr	r3, [pc, #12]	; (1638 <mu_port_serial_write+0x20>)
    162c:	4798      	blx	r3
    162e:	43c0      	mvns	r0, r0
    1630:	0fc0      	lsrs	r0, r0, #31
}
    1632:	bd10      	pop	{r4, pc}
    1634:	200000e4 	.word	0x200000e4
    1638:	000004c1 	.word	0x000004c1

0000163c <mu_port_serial_write_count>:
int mu_port_serial_write_count(void) {
    163c:	b500      	push	{lr}
    163e:	b083      	sub	sp, #12
  usart_async_get_status(&USART_0, &status);
    1640:	4669      	mov	r1, sp
    1642:	4803      	ldr	r0, [pc, #12]	; (1650 <mu_port_serial_write_count+0x14>)
    1644:	4b03      	ldr	r3, [pc, #12]	; (1654 <mu_port_serial_write_count+0x18>)
    1646:	4798      	blx	r3
  return status.txcnt;
    1648:	466b      	mov	r3, sp
    164a:	8898      	ldrh	r0, [r3, #4]
}
    164c:	b003      	add	sp, #12
    164e:	bd00      	pop	{pc}
    1650:	20000130 	.word	0x20000130
    1654:	00000875 	.word	0x00000875

00001658 <mu_port_serial_can_write>:
bool mu_port_serial_can_write(void) {
    1658:	b500      	push	{lr}
    165a:	b083      	sub	sp, #12
  usart_async_get_status(&USART_0, &status);
    165c:	4669      	mov	r1, sp
    165e:	4804      	ldr	r0, [pc, #16]	; (1670 <mu_port_serial_can_write+0x18>)
    1660:	4b04      	ldr	r3, [pc, #16]	; (1674 <mu_port_serial_can_write+0x1c>)
    1662:	4798      	blx	r3
  return status.flags == 0;
    1664:	9800      	ldr	r0, [sp, #0]
    1666:	4243      	negs	r3, r0
    1668:	4158      	adcs	r0, r3
    166a:	b2c0      	uxtb	r0, r0
}
    166c:	b003      	add	sp, #12
    166e:	bd00      	pop	{pc}
    1670:	20000130 	.word	0x20000130
    1674:	00000875 	.word	0x00000875

00001678 <mu_port_serial_read>:
bool mu_port_serial_read(uint8_t *const buf, int n_bytes) {
    1678:	b510      	push	{r4, lr}
    167a:	0003      	movs	r3, r0
  io_read(s_usart_descriptor, buf, n_bytes);
    167c:	b28a      	uxth	r2, r1
    167e:	4903      	ldr	r1, [pc, #12]	; (168c <mu_port_serial_read+0x14>)
    1680:	6a48      	ldr	r0, [r1, #36]	; 0x24
    1682:	0019      	movs	r1, r3
    1684:	4b02      	ldr	r3, [pc, #8]	; (1690 <mu_port_serial_read+0x18>)
    1686:	4798      	blx	r3
}
    1688:	2001      	movs	r0, #1
    168a:	bd10      	pop	{r4, pc}
    168c:	200000e4 	.word	0x200000e4
    1690:	000004f5 	.word	0x000004f5

00001694 <mu_port_serial_read_count>:
int mu_port_serial_read_count(void) {
    1694:	b500      	push	{lr}
    1696:	b083      	sub	sp, #12
  usart_async_get_status(&USART_0, &status);
    1698:	4669      	mov	r1, sp
    169a:	4803      	ldr	r0, [pc, #12]	; (16a8 <mu_port_serial_read_count+0x14>)
    169c:	4b03      	ldr	r3, [pc, #12]	; (16ac <mu_port_serial_read_count+0x18>)
    169e:	4798      	blx	r3
  return status.rxcnt;
    16a0:	466b      	mov	r3, sp
    16a2:	88d8      	ldrh	r0, [r3, #6]
}
    16a4:	b003      	add	sp, #12
    16a6:	bd00      	pop	{pc}
    16a8:	20000130 	.word	0x20000130
    16ac:	00000875 	.word	0x00000875

000016b0 <mu_port_serial_set_read_cb>:
  if (fn) {
    16b0:	2800      	cmp	r0, #0
    16b2:	d003      	beq.n	16bc <mu_port_serial_set_read_cb+0xc>
    s_port.rx_cb = fn;
    16b4:	4b04      	ldr	r3, [pc, #16]	; (16c8 <mu_port_serial_set_read_cb+0x18>)
    16b6:	6118      	str	r0, [r3, #16]
    s_port.rx_cb_arg = arg;
    16b8:	6159      	str	r1, [r3, #20]
}
    16ba:	4770      	bx	lr
    s_port.rx_cb = NULL;
    16bc:	4b02      	ldr	r3, [pc, #8]	; (16c8 <mu_port_serial_set_read_cb+0x18>)
    16be:	2200      	movs	r2, #0
    16c0:	611a      	str	r2, [r3, #16]
    s_port.rx_cb_arg = NULL;
    16c2:	615a      	str	r2, [r3, #20]
}
    16c4:	e7f9      	b.n	16ba <mu_port_serial_set_read_cb+0xa>
    16c6:	46c0      	nop			; (mov r8, r8)
    16c8:	200000e4 	.word	0x200000e4

000016cc <mu_port_sleep_until>:
void mu_port_sleep_until(mu_port_time_t then) {
    16cc:	b510      	push	{r4, lr}
    16ce:	0004      	movs	r4, r0
  mu_port_time_t now = mu_port_rtc_now();
    16d0:	4b06      	ldr	r3, [pc, #24]	; (16ec <mu_port_sleep_until+0x20>)
    16d2:	4798      	blx	r3
  return t1 - t2;
    16d4:	1a20      	subs	r0, r4, r0
  if (mu_port_time_difference(then, now) > MIN_SLEEP_DURATION) {
    16d6:	2820      	cmp	r0, #32
    16d8:	dc00      	bgt.n	16dc <mu_port_sleep_until+0x10>
}
    16da:	bd10      	pop	{r4, pc}
    mu_port_rtc_alarm_at(then);
    16dc:	0020      	movs	r0, r4
    16de:	4b04      	ldr	r3, [pc, #16]	; (16f0 <mu_port_sleep_until+0x24>)
    16e0:	4798      	blx	r3
  sleep(3); // in hal_sleep
    16e2:	2003      	movs	r0, #3
    16e4:	4b03      	ldr	r3, [pc, #12]	; (16f4 <mu_port_sleep_until+0x28>)
    16e6:	4798      	blx	r3
}
    16e8:	e7f7      	b.n	16da <mu_port_sleep_until+0xe>
    16ea:	46c0      	nop			; (mov r8, r8)
    16ec:	00001501 	.word	0x00001501
    16f0:	00001531 	.word	0x00001531
    16f4:	00000529 	.word	0x00000529

000016f8 <mu_port_sleep>:
void mu_port_sleep(void) { go_to_sleep(); }
    16f8:	b510      	push	{r4, lr}
  sleep(3); // in hal_sleep
    16fa:	2003      	movs	r0, #3
    16fc:	4b01      	ldr	r3, [pc, #4]	; (1704 <mu_port_sleep+0xc>)
    16fe:	4798      	blx	r3
void mu_port_sleep(void) { go_to_sleep(); }
    1700:	bd10      	pop	{r4, pc}
    1702:	46c0      	nop			; (mov r8, r8)
    1704:	00000529 	.word	0x00000529

00001708 <__udivsi3>:
    1708:	2200      	movs	r2, #0
    170a:	0843      	lsrs	r3, r0, #1
    170c:	428b      	cmp	r3, r1
    170e:	d374      	bcc.n	17fa <__udivsi3+0xf2>
    1710:	0903      	lsrs	r3, r0, #4
    1712:	428b      	cmp	r3, r1
    1714:	d35f      	bcc.n	17d6 <__udivsi3+0xce>
    1716:	0a03      	lsrs	r3, r0, #8
    1718:	428b      	cmp	r3, r1
    171a:	d344      	bcc.n	17a6 <__udivsi3+0x9e>
    171c:	0b03      	lsrs	r3, r0, #12
    171e:	428b      	cmp	r3, r1
    1720:	d328      	bcc.n	1774 <__udivsi3+0x6c>
    1722:	0c03      	lsrs	r3, r0, #16
    1724:	428b      	cmp	r3, r1
    1726:	d30d      	bcc.n	1744 <__udivsi3+0x3c>
    1728:	22ff      	movs	r2, #255	; 0xff
    172a:	0209      	lsls	r1, r1, #8
    172c:	ba12      	rev	r2, r2
    172e:	0c03      	lsrs	r3, r0, #16
    1730:	428b      	cmp	r3, r1
    1732:	d302      	bcc.n	173a <__udivsi3+0x32>
    1734:	1212      	asrs	r2, r2, #8
    1736:	0209      	lsls	r1, r1, #8
    1738:	d065      	beq.n	1806 <__udivsi3+0xfe>
    173a:	0b03      	lsrs	r3, r0, #12
    173c:	428b      	cmp	r3, r1
    173e:	d319      	bcc.n	1774 <__udivsi3+0x6c>
    1740:	e000      	b.n	1744 <__udivsi3+0x3c>
    1742:	0a09      	lsrs	r1, r1, #8
    1744:	0bc3      	lsrs	r3, r0, #15
    1746:	428b      	cmp	r3, r1
    1748:	d301      	bcc.n	174e <__udivsi3+0x46>
    174a:	03cb      	lsls	r3, r1, #15
    174c:	1ac0      	subs	r0, r0, r3
    174e:	4152      	adcs	r2, r2
    1750:	0b83      	lsrs	r3, r0, #14
    1752:	428b      	cmp	r3, r1
    1754:	d301      	bcc.n	175a <__udivsi3+0x52>
    1756:	038b      	lsls	r3, r1, #14
    1758:	1ac0      	subs	r0, r0, r3
    175a:	4152      	adcs	r2, r2
    175c:	0b43      	lsrs	r3, r0, #13
    175e:	428b      	cmp	r3, r1
    1760:	d301      	bcc.n	1766 <__udivsi3+0x5e>
    1762:	034b      	lsls	r3, r1, #13
    1764:	1ac0      	subs	r0, r0, r3
    1766:	4152      	adcs	r2, r2
    1768:	0b03      	lsrs	r3, r0, #12
    176a:	428b      	cmp	r3, r1
    176c:	d301      	bcc.n	1772 <__udivsi3+0x6a>
    176e:	030b      	lsls	r3, r1, #12
    1770:	1ac0      	subs	r0, r0, r3
    1772:	4152      	adcs	r2, r2
    1774:	0ac3      	lsrs	r3, r0, #11
    1776:	428b      	cmp	r3, r1
    1778:	d301      	bcc.n	177e <__udivsi3+0x76>
    177a:	02cb      	lsls	r3, r1, #11
    177c:	1ac0      	subs	r0, r0, r3
    177e:	4152      	adcs	r2, r2
    1780:	0a83      	lsrs	r3, r0, #10
    1782:	428b      	cmp	r3, r1
    1784:	d301      	bcc.n	178a <__udivsi3+0x82>
    1786:	028b      	lsls	r3, r1, #10
    1788:	1ac0      	subs	r0, r0, r3
    178a:	4152      	adcs	r2, r2
    178c:	0a43      	lsrs	r3, r0, #9
    178e:	428b      	cmp	r3, r1
    1790:	d301      	bcc.n	1796 <__udivsi3+0x8e>
    1792:	024b      	lsls	r3, r1, #9
    1794:	1ac0      	subs	r0, r0, r3
    1796:	4152      	adcs	r2, r2
    1798:	0a03      	lsrs	r3, r0, #8
    179a:	428b      	cmp	r3, r1
    179c:	d301      	bcc.n	17a2 <__udivsi3+0x9a>
    179e:	020b      	lsls	r3, r1, #8
    17a0:	1ac0      	subs	r0, r0, r3
    17a2:	4152      	adcs	r2, r2
    17a4:	d2cd      	bcs.n	1742 <__udivsi3+0x3a>
    17a6:	09c3      	lsrs	r3, r0, #7
    17a8:	428b      	cmp	r3, r1
    17aa:	d301      	bcc.n	17b0 <__udivsi3+0xa8>
    17ac:	01cb      	lsls	r3, r1, #7
    17ae:	1ac0      	subs	r0, r0, r3
    17b0:	4152      	adcs	r2, r2
    17b2:	0983      	lsrs	r3, r0, #6
    17b4:	428b      	cmp	r3, r1
    17b6:	d301      	bcc.n	17bc <__udivsi3+0xb4>
    17b8:	018b      	lsls	r3, r1, #6
    17ba:	1ac0      	subs	r0, r0, r3
    17bc:	4152      	adcs	r2, r2
    17be:	0943      	lsrs	r3, r0, #5
    17c0:	428b      	cmp	r3, r1
    17c2:	d301      	bcc.n	17c8 <__udivsi3+0xc0>
    17c4:	014b      	lsls	r3, r1, #5
    17c6:	1ac0      	subs	r0, r0, r3
    17c8:	4152      	adcs	r2, r2
    17ca:	0903      	lsrs	r3, r0, #4
    17cc:	428b      	cmp	r3, r1
    17ce:	d301      	bcc.n	17d4 <__udivsi3+0xcc>
    17d0:	010b      	lsls	r3, r1, #4
    17d2:	1ac0      	subs	r0, r0, r3
    17d4:	4152      	adcs	r2, r2
    17d6:	08c3      	lsrs	r3, r0, #3
    17d8:	428b      	cmp	r3, r1
    17da:	d301      	bcc.n	17e0 <__udivsi3+0xd8>
    17dc:	00cb      	lsls	r3, r1, #3
    17de:	1ac0      	subs	r0, r0, r3
    17e0:	4152      	adcs	r2, r2
    17e2:	0883      	lsrs	r3, r0, #2
    17e4:	428b      	cmp	r3, r1
    17e6:	d301      	bcc.n	17ec <__udivsi3+0xe4>
    17e8:	008b      	lsls	r3, r1, #2
    17ea:	1ac0      	subs	r0, r0, r3
    17ec:	4152      	adcs	r2, r2
    17ee:	0843      	lsrs	r3, r0, #1
    17f0:	428b      	cmp	r3, r1
    17f2:	d301      	bcc.n	17f8 <__udivsi3+0xf0>
    17f4:	004b      	lsls	r3, r1, #1
    17f6:	1ac0      	subs	r0, r0, r3
    17f8:	4152      	adcs	r2, r2
    17fa:	1a41      	subs	r1, r0, r1
    17fc:	d200      	bcs.n	1800 <__udivsi3+0xf8>
    17fe:	4601      	mov	r1, r0
    1800:	4152      	adcs	r2, r2
    1802:	4610      	mov	r0, r2
    1804:	4770      	bx	lr
    1806:	e7ff      	b.n	1808 <__udivsi3+0x100>
    1808:	b501      	push	{r0, lr}
    180a:	2000      	movs	r0, #0
    180c:	f000 f8f0 	bl	19f0 <__aeabi_idiv0>
    1810:	bd02      	pop	{r1, pc}
    1812:	46c0      	nop			; (mov r8, r8)

00001814 <__aeabi_uidivmod>:
    1814:	2900      	cmp	r1, #0
    1816:	d0f7      	beq.n	1808 <__udivsi3+0x100>
    1818:	e776      	b.n	1708 <__udivsi3>
    181a:	4770      	bx	lr

0000181c <__divsi3>:
    181c:	4603      	mov	r3, r0
    181e:	430b      	orrs	r3, r1
    1820:	d47f      	bmi.n	1922 <__divsi3+0x106>
    1822:	2200      	movs	r2, #0
    1824:	0843      	lsrs	r3, r0, #1
    1826:	428b      	cmp	r3, r1
    1828:	d374      	bcc.n	1914 <__divsi3+0xf8>
    182a:	0903      	lsrs	r3, r0, #4
    182c:	428b      	cmp	r3, r1
    182e:	d35f      	bcc.n	18f0 <__divsi3+0xd4>
    1830:	0a03      	lsrs	r3, r0, #8
    1832:	428b      	cmp	r3, r1
    1834:	d344      	bcc.n	18c0 <__divsi3+0xa4>
    1836:	0b03      	lsrs	r3, r0, #12
    1838:	428b      	cmp	r3, r1
    183a:	d328      	bcc.n	188e <__divsi3+0x72>
    183c:	0c03      	lsrs	r3, r0, #16
    183e:	428b      	cmp	r3, r1
    1840:	d30d      	bcc.n	185e <__divsi3+0x42>
    1842:	22ff      	movs	r2, #255	; 0xff
    1844:	0209      	lsls	r1, r1, #8
    1846:	ba12      	rev	r2, r2
    1848:	0c03      	lsrs	r3, r0, #16
    184a:	428b      	cmp	r3, r1
    184c:	d302      	bcc.n	1854 <__divsi3+0x38>
    184e:	1212      	asrs	r2, r2, #8
    1850:	0209      	lsls	r1, r1, #8
    1852:	d065      	beq.n	1920 <__divsi3+0x104>
    1854:	0b03      	lsrs	r3, r0, #12
    1856:	428b      	cmp	r3, r1
    1858:	d319      	bcc.n	188e <__divsi3+0x72>
    185a:	e000      	b.n	185e <__divsi3+0x42>
    185c:	0a09      	lsrs	r1, r1, #8
    185e:	0bc3      	lsrs	r3, r0, #15
    1860:	428b      	cmp	r3, r1
    1862:	d301      	bcc.n	1868 <__divsi3+0x4c>
    1864:	03cb      	lsls	r3, r1, #15
    1866:	1ac0      	subs	r0, r0, r3
    1868:	4152      	adcs	r2, r2
    186a:	0b83      	lsrs	r3, r0, #14
    186c:	428b      	cmp	r3, r1
    186e:	d301      	bcc.n	1874 <__divsi3+0x58>
    1870:	038b      	lsls	r3, r1, #14
    1872:	1ac0      	subs	r0, r0, r3
    1874:	4152      	adcs	r2, r2
    1876:	0b43      	lsrs	r3, r0, #13
    1878:	428b      	cmp	r3, r1
    187a:	d301      	bcc.n	1880 <__divsi3+0x64>
    187c:	034b      	lsls	r3, r1, #13
    187e:	1ac0      	subs	r0, r0, r3
    1880:	4152      	adcs	r2, r2
    1882:	0b03      	lsrs	r3, r0, #12
    1884:	428b      	cmp	r3, r1
    1886:	d301      	bcc.n	188c <__divsi3+0x70>
    1888:	030b      	lsls	r3, r1, #12
    188a:	1ac0      	subs	r0, r0, r3
    188c:	4152      	adcs	r2, r2
    188e:	0ac3      	lsrs	r3, r0, #11
    1890:	428b      	cmp	r3, r1
    1892:	d301      	bcc.n	1898 <__divsi3+0x7c>
    1894:	02cb      	lsls	r3, r1, #11
    1896:	1ac0      	subs	r0, r0, r3
    1898:	4152      	adcs	r2, r2
    189a:	0a83      	lsrs	r3, r0, #10
    189c:	428b      	cmp	r3, r1
    189e:	d301      	bcc.n	18a4 <__divsi3+0x88>
    18a0:	028b      	lsls	r3, r1, #10
    18a2:	1ac0      	subs	r0, r0, r3
    18a4:	4152      	adcs	r2, r2
    18a6:	0a43      	lsrs	r3, r0, #9
    18a8:	428b      	cmp	r3, r1
    18aa:	d301      	bcc.n	18b0 <__divsi3+0x94>
    18ac:	024b      	lsls	r3, r1, #9
    18ae:	1ac0      	subs	r0, r0, r3
    18b0:	4152      	adcs	r2, r2
    18b2:	0a03      	lsrs	r3, r0, #8
    18b4:	428b      	cmp	r3, r1
    18b6:	d301      	bcc.n	18bc <__divsi3+0xa0>
    18b8:	020b      	lsls	r3, r1, #8
    18ba:	1ac0      	subs	r0, r0, r3
    18bc:	4152      	adcs	r2, r2
    18be:	d2cd      	bcs.n	185c <__divsi3+0x40>
    18c0:	09c3      	lsrs	r3, r0, #7
    18c2:	428b      	cmp	r3, r1
    18c4:	d301      	bcc.n	18ca <__divsi3+0xae>
    18c6:	01cb      	lsls	r3, r1, #7
    18c8:	1ac0      	subs	r0, r0, r3
    18ca:	4152      	adcs	r2, r2
    18cc:	0983      	lsrs	r3, r0, #6
    18ce:	428b      	cmp	r3, r1
    18d0:	d301      	bcc.n	18d6 <__divsi3+0xba>
    18d2:	018b      	lsls	r3, r1, #6
    18d4:	1ac0      	subs	r0, r0, r3
    18d6:	4152      	adcs	r2, r2
    18d8:	0943      	lsrs	r3, r0, #5
    18da:	428b      	cmp	r3, r1
    18dc:	d301      	bcc.n	18e2 <__divsi3+0xc6>
    18de:	014b      	lsls	r3, r1, #5
    18e0:	1ac0      	subs	r0, r0, r3
    18e2:	4152      	adcs	r2, r2
    18e4:	0903      	lsrs	r3, r0, #4
    18e6:	428b      	cmp	r3, r1
    18e8:	d301      	bcc.n	18ee <__divsi3+0xd2>
    18ea:	010b      	lsls	r3, r1, #4
    18ec:	1ac0      	subs	r0, r0, r3
    18ee:	4152      	adcs	r2, r2
    18f0:	08c3      	lsrs	r3, r0, #3
    18f2:	428b      	cmp	r3, r1
    18f4:	d301      	bcc.n	18fa <__divsi3+0xde>
    18f6:	00cb      	lsls	r3, r1, #3
    18f8:	1ac0      	subs	r0, r0, r3
    18fa:	4152      	adcs	r2, r2
    18fc:	0883      	lsrs	r3, r0, #2
    18fe:	428b      	cmp	r3, r1
    1900:	d301      	bcc.n	1906 <__divsi3+0xea>
    1902:	008b      	lsls	r3, r1, #2
    1904:	1ac0      	subs	r0, r0, r3
    1906:	4152      	adcs	r2, r2
    1908:	0843      	lsrs	r3, r0, #1
    190a:	428b      	cmp	r3, r1
    190c:	d301      	bcc.n	1912 <__divsi3+0xf6>
    190e:	004b      	lsls	r3, r1, #1
    1910:	1ac0      	subs	r0, r0, r3
    1912:	4152      	adcs	r2, r2
    1914:	1a41      	subs	r1, r0, r1
    1916:	d200      	bcs.n	191a <__divsi3+0xfe>
    1918:	4601      	mov	r1, r0
    191a:	4152      	adcs	r2, r2
    191c:	4610      	mov	r0, r2
    191e:	4770      	bx	lr
    1920:	e05d      	b.n	19de <__divsi3+0x1c2>
    1922:	0fca      	lsrs	r2, r1, #31
    1924:	d000      	beq.n	1928 <__divsi3+0x10c>
    1926:	4249      	negs	r1, r1
    1928:	1003      	asrs	r3, r0, #32
    192a:	d300      	bcc.n	192e <__divsi3+0x112>
    192c:	4240      	negs	r0, r0
    192e:	4053      	eors	r3, r2
    1930:	2200      	movs	r2, #0
    1932:	469c      	mov	ip, r3
    1934:	0903      	lsrs	r3, r0, #4
    1936:	428b      	cmp	r3, r1
    1938:	d32d      	bcc.n	1996 <__divsi3+0x17a>
    193a:	0a03      	lsrs	r3, r0, #8
    193c:	428b      	cmp	r3, r1
    193e:	d312      	bcc.n	1966 <__divsi3+0x14a>
    1940:	22fc      	movs	r2, #252	; 0xfc
    1942:	0189      	lsls	r1, r1, #6
    1944:	ba12      	rev	r2, r2
    1946:	0a03      	lsrs	r3, r0, #8
    1948:	428b      	cmp	r3, r1
    194a:	d30c      	bcc.n	1966 <__divsi3+0x14a>
    194c:	0189      	lsls	r1, r1, #6
    194e:	1192      	asrs	r2, r2, #6
    1950:	428b      	cmp	r3, r1
    1952:	d308      	bcc.n	1966 <__divsi3+0x14a>
    1954:	0189      	lsls	r1, r1, #6
    1956:	1192      	asrs	r2, r2, #6
    1958:	428b      	cmp	r3, r1
    195a:	d304      	bcc.n	1966 <__divsi3+0x14a>
    195c:	0189      	lsls	r1, r1, #6
    195e:	d03a      	beq.n	19d6 <__divsi3+0x1ba>
    1960:	1192      	asrs	r2, r2, #6
    1962:	e000      	b.n	1966 <__divsi3+0x14a>
    1964:	0989      	lsrs	r1, r1, #6
    1966:	09c3      	lsrs	r3, r0, #7
    1968:	428b      	cmp	r3, r1
    196a:	d301      	bcc.n	1970 <__divsi3+0x154>
    196c:	01cb      	lsls	r3, r1, #7
    196e:	1ac0      	subs	r0, r0, r3
    1970:	4152      	adcs	r2, r2
    1972:	0983      	lsrs	r3, r0, #6
    1974:	428b      	cmp	r3, r1
    1976:	d301      	bcc.n	197c <__divsi3+0x160>
    1978:	018b      	lsls	r3, r1, #6
    197a:	1ac0      	subs	r0, r0, r3
    197c:	4152      	adcs	r2, r2
    197e:	0943      	lsrs	r3, r0, #5
    1980:	428b      	cmp	r3, r1
    1982:	d301      	bcc.n	1988 <__divsi3+0x16c>
    1984:	014b      	lsls	r3, r1, #5
    1986:	1ac0      	subs	r0, r0, r3
    1988:	4152      	adcs	r2, r2
    198a:	0903      	lsrs	r3, r0, #4
    198c:	428b      	cmp	r3, r1
    198e:	d301      	bcc.n	1994 <__divsi3+0x178>
    1990:	010b      	lsls	r3, r1, #4
    1992:	1ac0      	subs	r0, r0, r3
    1994:	4152      	adcs	r2, r2
    1996:	08c3      	lsrs	r3, r0, #3
    1998:	428b      	cmp	r3, r1
    199a:	d301      	bcc.n	19a0 <__divsi3+0x184>
    199c:	00cb      	lsls	r3, r1, #3
    199e:	1ac0      	subs	r0, r0, r3
    19a0:	4152      	adcs	r2, r2
    19a2:	0883      	lsrs	r3, r0, #2
    19a4:	428b      	cmp	r3, r1
    19a6:	d301      	bcc.n	19ac <__divsi3+0x190>
    19a8:	008b      	lsls	r3, r1, #2
    19aa:	1ac0      	subs	r0, r0, r3
    19ac:	4152      	adcs	r2, r2
    19ae:	d2d9      	bcs.n	1964 <__divsi3+0x148>
    19b0:	0843      	lsrs	r3, r0, #1
    19b2:	428b      	cmp	r3, r1
    19b4:	d301      	bcc.n	19ba <__divsi3+0x19e>
    19b6:	004b      	lsls	r3, r1, #1
    19b8:	1ac0      	subs	r0, r0, r3
    19ba:	4152      	adcs	r2, r2
    19bc:	1a41      	subs	r1, r0, r1
    19be:	d200      	bcs.n	19c2 <__divsi3+0x1a6>
    19c0:	4601      	mov	r1, r0
    19c2:	4663      	mov	r3, ip
    19c4:	4152      	adcs	r2, r2
    19c6:	105b      	asrs	r3, r3, #1
    19c8:	4610      	mov	r0, r2
    19ca:	d301      	bcc.n	19d0 <__divsi3+0x1b4>
    19cc:	4240      	negs	r0, r0
    19ce:	2b00      	cmp	r3, #0
    19d0:	d500      	bpl.n	19d4 <__divsi3+0x1b8>
    19d2:	4249      	negs	r1, r1
    19d4:	4770      	bx	lr
    19d6:	4663      	mov	r3, ip
    19d8:	105b      	asrs	r3, r3, #1
    19da:	d300      	bcc.n	19de <__divsi3+0x1c2>
    19dc:	4240      	negs	r0, r0
    19de:	b501      	push	{r0, lr}
    19e0:	2000      	movs	r0, #0
    19e2:	f000 f805 	bl	19f0 <__aeabi_idiv0>
    19e6:	bd02      	pop	{r1, pc}

000019e8 <__aeabi_idivmod>:
    19e8:	2900      	cmp	r1, #0
    19ea:	d0f8      	beq.n	19de <__divsi3+0x1c2>
    19ec:	e716      	b.n	181c <__divsi3>
    19ee:	4770      	bx	lr

000019f0 <__aeabi_idiv0>:
    19f0:	4770      	bx	lr
    19f2:	46c0      	nop			; (mov r8, r8)

000019f4 <__ffssi2>:
    19f4:	b510      	push	{r4, lr}
    19f6:	2300      	movs	r3, #0
    19f8:	2800      	cmp	r0, #0
    19fa:	d002      	beq.n	1a02 <__ffssi2+0xe>
    19fc:	f000 f804 	bl	1a08 <__ctzsi2>
    1a00:	1c43      	adds	r3, r0, #1
    1a02:	0018      	movs	r0, r3
    1a04:	bd10      	pop	{r4, pc}
    1a06:	46c0      	nop			; (mov r8, r8)

00001a08 <__ctzsi2>:
    1a08:	4241      	negs	r1, r0
    1a0a:	4008      	ands	r0, r1
    1a0c:	211c      	movs	r1, #28
    1a0e:	2301      	movs	r3, #1
    1a10:	041b      	lsls	r3, r3, #16
    1a12:	4298      	cmp	r0, r3
    1a14:	d301      	bcc.n	1a1a <__ctzsi2+0x12>
    1a16:	0c00      	lsrs	r0, r0, #16
    1a18:	3910      	subs	r1, #16
    1a1a:	0a1b      	lsrs	r3, r3, #8
    1a1c:	4298      	cmp	r0, r3
    1a1e:	d301      	bcc.n	1a24 <__ctzsi2+0x1c>
    1a20:	0a00      	lsrs	r0, r0, #8
    1a22:	3908      	subs	r1, #8
    1a24:	091b      	lsrs	r3, r3, #4
    1a26:	4298      	cmp	r0, r3
    1a28:	d301      	bcc.n	1a2e <__ctzsi2+0x26>
    1a2a:	0900      	lsrs	r0, r0, #4
    1a2c:	3904      	subs	r1, #4
    1a2e:	a202      	add	r2, pc, #8	; (adr r2, 1a38 <__ctzsi2+0x30>)
    1a30:	5c10      	ldrb	r0, [r2, r0]
    1a32:	1a40      	subs	r0, r0, r1
    1a34:	4770      	bx	lr
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	1d1d1c1b 	.word	0x1d1d1c1b
    1a3c:	1e1e1e1e 	.word	0x1e1e1e1e
    1a40:	1f1f1f1f 	.word	0x1f1f1f1f
    1a44:	1f1f1f1f 	.word	0x1f1f1f1f

00001a48 <__libc_init_array>:
    1a48:	b570      	push	{r4, r5, r6, lr}
    1a4a:	2600      	movs	r6, #0
    1a4c:	4d0c      	ldr	r5, [pc, #48]	; (1a80 <__libc_init_array+0x38>)
    1a4e:	4c0d      	ldr	r4, [pc, #52]	; (1a84 <__libc_init_array+0x3c>)
    1a50:	1b64      	subs	r4, r4, r5
    1a52:	10a4      	asrs	r4, r4, #2
    1a54:	42a6      	cmp	r6, r4
    1a56:	d109      	bne.n	1a6c <__libc_init_array+0x24>
    1a58:	2600      	movs	r6, #0
    1a5a:	f000 fe17 	bl	268c <_init>
    1a5e:	4d0a      	ldr	r5, [pc, #40]	; (1a88 <__libc_init_array+0x40>)
    1a60:	4c0a      	ldr	r4, [pc, #40]	; (1a8c <__libc_init_array+0x44>)
    1a62:	1b64      	subs	r4, r4, r5
    1a64:	10a4      	asrs	r4, r4, #2
    1a66:	42a6      	cmp	r6, r4
    1a68:	d105      	bne.n	1a76 <__libc_init_array+0x2e>
    1a6a:	bd70      	pop	{r4, r5, r6, pc}
    1a6c:	00b3      	lsls	r3, r6, #2
    1a6e:	58eb      	ldr	r3, [r5, r3]
    1a70:	4798      	blx	r3
    1a72:	3601      	adds	r6, #1
    1a74:	e7ee      	b.n	1a54 <__libc_init_array+0xc>
    1a76:	00b3      	lsls	r3, r6, #2
    1a78:	58eb      	ldr	r3, [r5, r3]
    1a7a:	4798      	blx	r3
    1a7c:	3601      	adds	r6, #1
    1a7e:	e7f2      	b.n	1a66 <__libc_init_array+0x1e>
    1a80:	00002698 	.word	0x00002698
    1a84:	00002698 	.word	0x00002698
    1a88:	00002698 	.word	0x00002698
    1a8c:	0000269c 	.word	0x0000269c

00001a90 <memset>:
    1a90:	0003      	movs	r3, r0
    1a92:	1882      	adds	r2, r0, r2
    1a94:	4293      	cmp	r3, r2
    1a96:	d100      	bne.n	1a9a <memset+0xa>
    1a98:	4770      	bx	lr
    1a9a:	7019      	strb	r1, [r3, #0]
    1a9c:	3301      	adds	r3, #1
    1a9e:	e7f9      	b.n	1a94 <memset+0x4>

00001aa0 <_vsniprintf_r>:
    1aa0:	b530      	push	{r4, r5, lr}
    1aa2:	0014      	movs	r4, r2
    1aa4:	b09b      	sub	sp, #108	; 0x6c
    1aa6:	0005      	movs	r5, r0
    1aa8:	001a      	movs	r2, r3
    1aaa:	2c00      	cmp	r4, #0
    1aac:	da05      	bge.n	1aba <_vsniprintf_r+0x1a>
    1aae:	238b      	movs	r3, #139	; 0x8b
    1ab0:	6003      	str	r3, [r0, #0]
    1ab2:	2001      	movs	r0, #1
    1ab4:	4240      	negs	r0, r0
    1ab6:	b01b      	add	sp, #108	; 0x6c
    1ab8:	bd30      	pop	{r4, r5, pc}
    1aba:	2382      	movs	r3, #130	; 0x82
    1abc:	4668      	mov	r0, sp
    1abe:	009b      	lsls	r3, r3, #2
    1ac0:	8183      	strh	r3, [r0, #12]
    1ac2:	2300      	movs	r3, #0
    1ac4:	9100      	str	r1, [sp, #0]
    1ac6:	9104      	str	r1, [sp, #16]
    1ac8:	429c      	cmp	r4, r3
    1aca:	d000      	beq.n	1ace <_vsniprintf_r+0x2e>
    1acc:	1e63      	subs	r3, r4, #1
    1ace:	9302      	str	r3, [sp, #8]
    1ad0:	9305      	str	r3, [sp, #20]
    1ad2:	2301      	movs	r3, #1
    1ad4:	4669      	mov	r1, sp
    1ad6:	425b      	negs	r3, r3
    1ad8:	81cb      	strh	r3, [r1, #14]
    1ada:	0028      	movs	r0, r5
    1adc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1ade:	f000 f8d7 	bl	1c90 <_svfiprintf_r>
    1ae2:	1c43      	adds	r3, r0, #1
    1ae4:	da01      	bge.n	1aea <_vsniprintf_r+0x4a>
    1ae6:	238b      	movs	r3, #139	; 0x8b
    1ae8:	602b      	str	r3, [r5, #0]
    1aea:	2c00      	cmp	r4, #0
    1aec:	d0e3      	beq.n	1ab6 <_vsniprintf_r+0x16>
    1aee:	2300      	movs	r3, #0
    1af0:	9a00      	ldr	r2, [sp, #0]
    1af2:	7013      	strb	r3, [r2, #0]
    1af4:	e7df      	b.n	1ab6 <_vsniprintf_r+0x16>
	...

00001af8 <vsniprintf>:
    1af8:	b507      	push	{r0, r1, r2, lr}
    1afa:	9300      	str	r3, [sp, #0]
    1afc:	0013      	movs	r3, r2
    1afe:	000a      	movs	r2, r1
    1b00:	0001      	movs	r1, r0
    1b02:	4802      	ldr	r0, [pc, #8]	; (1b0c <vsniprintf+0x14>)
    1b04:	6800      	ldr	r0, [r0, #0]
    1b06:	f7ff ffcb 	bl	1aa0 <_vsniprintf_r>
    1b0a:	bd0e      	pop	{r1, r2, r3, pc}
    1b0c:	20000000 	.word	0x20000000

00001b10 <_malloc_r>:
    1b10:	2303      	movs	r3, #3
    1b12:	b570      	push	{r4, r5, r6, lr}
    1b14:	1ccd      	adds	r5, r1, #3
    1b16:	439d      	bics	r5, r3
    1b18:	3508      	adds	r5, #8
    1b1a:	0006      	movs	r6, r0
    1b1c:	2d0c      	cmp	r5, #12
    1b1e:	d21e      	bcs.n	1b5e <_malloc_r+0x4e>
    1b20:	250c      	movs	r5, #12
    1b22:	42a9      	cmp	r1, r5
    1b24:	d81d      	bhi.n	1b62 <_malloc_r+0x52>
    1b26:	0030      	movs	r0, r6
    1b28:	f000 fb76 	bl	2218 <__malloc_lock>
    1b2c:	4a25      	ldr	r2, [pc, #148]	; (1bc4 <_malloc_r+0xb4>)
    1b2e:	6814      	ldr	r4, [r2, #0]
    1b30:	0021      	movs	r1, r4
    1b32:	2900      	cmp	r1, #0
    1b34:	d119      	bne.n	1b6a <_malloc_r+0x5a>
    1b36:	4c24      	ldr	r4, [pc, #144]	; (1bc8 <_malloc_r+0xb8>)
    1b38:	6823      	ldr	r3, [r4, #0]
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d103      	bne.n	1b46 <_malloc_r+0x36>
    1b3e:	0030      	movs	r0, r6
    1b40:	f000 fb32 	bl	21a8 <_sbrk_r>
    1b44:	6020      	str	r0, [r4, #0]
    1b46:	0029      	movs	r1, r5
    1b48:	0030      	movs	r0, r6
    1b4a:	f000 fb2d 	bl	21a8 <_sbrk_r>
    1b4e:	1c43      	adds	r3, r0, #1
    1b50:	d12c      	bne.n	1bac <_malloc_r+0x9c>
    1b52:	230c      	movs	r3, #12
    1b54:	0030      	movs	r0, r6
    1b56:	6033      	str	r3, [r6, #0]
    1b58:	f000 fb5f 	bl	221a <__malloc_unlock>
    1b5c:	e003      	b.n	1b66 <_malloc_r+0x56>
    1b5e:	2d00      	cmp	r5, #0
    1b60:	dadf      	bge.n	1b22 <_malloc_r+0x12>
    1b62:	230c      	movs	r3, #12
    1b64:	6033      	str	r3, [r6, #0]
    1b66:	2000      	movs	r0, #0
    1b68:	bd70      	pop	{r4, r5, r6, pc}
    1b6a:	680b      	ldr	r3, [r1, #0]
    1b6c:	1b5b      	subs	r3, r3, r5
    1b6e:	d41a      	bmi.n	1ba6 <_malloc_r+0x96>
    1b70:	2b0b      	cmp	r3, #11
    1b72:	d903      	bls.n	1b7c <_malloc_r+0x6c>
    1b74:	600b      	str	r3, [r1, #0]
    1b76:	18cc      	adds	r4, r1, r3
    1b78:	6025      	str	r5, [r4, #0]
    1b7a:	e003      	b.n	1b84 <_malloc_r+0x74>
    1b7c:	428c      	cmp	r4, r1
    1b7e:	d10e      	bne.n	1b9e <_malloc_r+0x8e>
    1b80:	6863      	ldr	r3, [r4, #4]
    1b82:	6013      	str	r3, [r2, #0]
    1b84:	0030      	movs	r0, r6
    1b86:	f000 fb48 	bl	221a <__malloc_unlock>
    1b8a:	0020      	movs	r0, r4
    1b8c:	2207      	movs	r2, #7
    1b8e:	300b      	adds	r0, #11
    1b90:	1d23      	adds	r3, r4, #4
    1b92:	4390      	bics	r0, r2
    1b94:	1ac3      	subs	r3, r0, r3
    1b96:	d0e7      	beq.n	1b68 <_malloc_r+0x58>
    1b98:	425a      	negs	r2, r3
    1b9a:	50e2      	str	r2, [r4, r3]
    1b9c:	e7e4      	b.n	1b68 <_malloc_r+0x58>
    1b9e:	684b      	ldr	r3, [r1, #4]
    1ba0:	6063      	str	r3, [r4, #4]
    1ba2:	000c      	movs	r4, r1
    1ba4:	e7ee      	b.n	1b84 <_malloc_r+0x74>
    1ba6:	000c      	movs	r4, r1
    1ba8:	6849      	ldr	r1, [r1, #4]
    1baa:	e7c2      	b.n	1b32 <_malloc_r+0x22>
    1bac:	2303      	movs	r3, #3
    1bae:	1cc4      	adds	r4, r0, #3
    1bb0:	439c      	bics	r4, r3
    1bb2:	42a0      	cmp	r0, r4
    1bb4:	d0e0      	beq.n	1b78 <_malloc_r+0x68>
    1bb6:	1a21      	subs	r1, r4, r0
    1bb8:	0030      	movs	r0, r6
    1bba:	f000 faf5 	bl	21a8 <_sbrk_r>
    1bbe:	1c43      	adds	r3, r0, #1
    1bc0:	d1da      	bne.n	1b78 <_malloc_r+0x68>
    1bc2:	e7c6      	b.n	1b52 <_malloc_r+0x42>
    1bc4:	2000010c 	.word	0x2000010c
    1bc8:	20000110 	.word	0x20000110

00001bcc <__ssputs_r>:
    1bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bce:	688e      	ldr	r6, [r1, #8]
    1bd0:	b085      	sub	sp, #20
    1bd2:	0007      	movs	r7, r0
    1bd4:	000c      	movs	r4, r1
    1bd6:	9203      	str	r2, [sp, #12]
    1bd8:	9301      	str	r3, [sp, #4]
    1bda:	429e      	cmp	r6, r3
    1bdc:	d839      	bhi.n	1c52 <__ssputs_r+0x86>
    1bde:	2390      	movs	r3, #144	; 0x90
    1be0:	898a      	ldrh	r2, [r1, #12]
    1be2:	00db      	lsls	r3, r3, #3
    1be4:	421a      	tst	r2, r3
    1be6:	d034      	beq.n	1c52 <__ssputs_r+0x86>
    1be8:	2503      	movs	r5, #3
    1bea:	6909      	ldr	r1, [r1, #16]
    1bec:	6823      	ldr	r3, [r4, #0]
    1bee:	1a5b      	subs	r3, r3, r1
    1bf0:	9302      	str	r3, [sp, #8]
    1bf2:	6963      	ldr	r3, [r4, #20]
    1bf4:	9802      	ldr	r0, [sp, #8]
    1bf6:	435d      	muls	r5, r3
    1bf8:	0feb      	lsrs	r3, r5, #31
    1bfa:	195d      	adds	r5, r3, r5
    1bfc:	9b01      	ldr	r3, [sp, #4]
    1bfe:	106d      	asrs	r5, r5, #1
    1c00:	3301      	adds	r3, #1
    1c02:	181b      	adds	r3, r3, r0
    1c04:	42ab      	cmp	r3, r5
    1c06:	d900      	bls.n	1c0a <__ssputs_r+0x3e>
    1c08:	001d      	movs	r5, r3
    1c0a:	0553      	lsls	r3, r2, #21
    1c0c:	d532      	bpl.n	1c74 <__ssputs_r+0xa8>
    1c0e:	0029      	movs	r1, r5
    1c10:	0038      	movs	r0, r7
    1c12:	f7ff ff7d 	bl	1b10 <_malloc_r>
    1c16:	1e06      	subs	r6, r0, #0
    1c18:	d109      	bne.n	1c2e <__ssputs_r+0x62>
    1c1a:	230c      	movs	r3, #12
    1c1c:	603b      	str	r3, [r7, #0]
    1c1e:	2340      	movs	r3, #64	; 0x40
    1c20:	2001      	movs	r0, #1
    1c22:	89a2      	ldrh	r2, [r4, #12]
    1c24:	4240      	negs	r0, r0
    1c26:	4313      	orrs	r3, r2
    1c28:	81a3      	strh	r3, [r4, #12]
    1c2a:	b005      	add	sp, #20
    1c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c2e:	9a02      	ldr	r2, [sp, #8]
    1c30:	6921      	ldr	r1, [r4, #16]
    1c32:	f000 fad6 	bl	21e2 <memcpy>
    1c36:	89a3      	ldrh	r3, [r4, #12]
    1c38:	4a14      	ldr	r2, [pc, #80]	; (1c8c <__ssputs_r+0xc0>)
    1c3a:	401a      	ands	r2, r3
    1c3c:	2380      	movs	r3, #128	; 0x80
    1c3e:	4313      	orrs	r3, r2
    1c40:	81a3      	strh	r3, [r4, #12]
    1c42:	9b02      	ldr	r3, [sp, #8]
    1c44:	6126      	str	r6, [r4, #16]
    1c46:	18f6      	adds	r6, r6, r3
    1c48:	6026      	str	r6, [r4, #0]
    1c4a:	6165      	str	r5, [r4, #20]
    1c4c:	9e01      	ldr	r6, [sp, #4]
    1c4e:	1aed      	subs	r5, r5, r3
    1c50:	60a5      	str	r5, [r4, #8]
    1c52:	9b01      	ldr	r3, [sp, #4]
    1c54:	42b3      	cmp	r3, r6
    1c56:	d200      	bcs.n	1c5a <__ssputs_r+0x8e>
    1c58:	001e      	movs	r6, r3
    1c5a:	0032      	movs	r2, r6
    1c5c:	9903      	ldr	r1, [sp, #12]
    1c5e:	6820      	ldr	r0, [r4, #0]
    1c60:	f000 fac8 	bl	21f4 <memmove>
    1c64:	68a3      	ldr	r3, [r4, #8]
    1c66:	2000      	movs	r0, #0
    1c68:	1b9b      	subs	r3, r3, r6
    1c6a:	60a3      	str	r3, [r4, #8]
    1c6c:	6823      	ldr	r3, [r4, #0]
    1c6e:	199e      	adds	r6, r3, r6
    1c70:	6026      	str	r6, [r4, #0]
    1c72:	e7da      	b.n	1c2a <__ssputs_r+0x5e>
    1c74:	002a      	movs	r2, r5
    1c76:	0038      	movs	r0, r7
    1c78:	f000 fb1a 	bl	22b0 <_realloc_r>
    1c7c:	1e06      	subs	r6, r0, #0
    1c7e:	d1e0      	bne.n	1c42 <__ssputs_r+0x76>
    1c80:	6921      	ldr	r1, [r4, #16]
    1c82:	0038      	movs	r0, r7
    1c84:	f000 faca 	bl	221c <_free_r>
    1c88:	e7c7      	b.n	1c1a <__ssputs_r+0x4e>
    1c8a:	46c0      	nop			; (mov r8, r8)
    1c8c:	fffffb7f 	.word	0xfffffb7f

00001c90 <_svfiprintf_r>:
    1c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c92:	b09f      	sub	sp, #124	; 0x7c
    1c94:	9002      	str	r0, [sp, #8]
    1c96:	9305      	str	r3, [sp, #20]
    1c98:	898b      	ldrh	r3, [r1, #12]
    1c9a:	000f      	movs	r7, r1
    1c9c:	0016      	movs	r6, r2
    1c9e:	061b      	lsls	r3, r3, #24
    1ca0:	d511      	bpl.n	1cc6 <_svfiprintf_r+0x36>
    1ca2:	690b      	ldr	r3, [r1, #16]
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	d10e      	bne.n	1cc6 <_svfiprintf_r+0x36>
    1ca8:	2140      	movs	r1, #64	; 0x40
    1caa:	f7ff ff31 	bl	1b10 <_malloc_r>
    1cae:	6038      	str	r0, [r7, #0]
    1cb0:	6138      	str	r0, [r7, #16]
    1cb2:	2800      	cmp	r0, #0
    1cb4:	d105      	bne.n	1cc2 <_svfiprintf_r+0x32>
    1cb6:	230c      	movs	r3, #12
    1cb8:	9a02      	ldr	r2, [sp, #8]
    1cba:	3801      	subs	r0, #1
    1cbc:	6013      	str	r3, [r2, #0]
    1cbe:	b01f      	add	sp, #124	; 0x7c
    1cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cc2:	2340      	movs	r3, #64	; 0x40
    1cc4:	617b      	str	r3, [r7, #20]
    1cc6:	2300      	movs	r3, #0
    1cc8:	ad06      	add	r5, sp, #24
    1cca:	616b      	str	r3, [r5, #20]
    1ccc:	3320      	adds	r3, #32
    1cce:	766b      	strb	r3, [r5, #25]
    1cd0:	3310      	adds	r3, #16
    1cd2:	76ab      	strb	r3, [r5, #26]
    1cd4:	0034      	movs	r4, r6
    1cd6:	7823      	ldrb	r3, [r4, #0]
    1cd8:	2b00      	cmp	r3, #0
    1cda:	d147      	bne.n	1d6c <_svfiprintf_r+0xdc>
    1cdc:	1ba3      	subs	r3, r4, r6
    1cde:	9304      	str	r3, [sp, #16]
    1ce0:	d00d      	beq.n	1cfe <_svfiprintf_r+0x6e>
    1ce2:	1ba3      	subs	r3, r4, r6
    1ce4:	0032      	movs	r2, r6
    1ce6:	0039      	movs	r1, r7
    1ce8:	9802      	ldr	r0, [sp, #8]
    1cea:	f7ff ff6f 	bl	1bcc <__ssputs_r>
    1cee:	1c43      	adds	r3, r0, #1
    1cf0:	d100      	bne.n	1cf4 <_svfiprintf_r+0x64>
    1cf2:	e0b5      	b.n	1e60 <_svfiprintf_r+0x1d0>
    1cf4:	696a      	ldr	r2, [r5, #20]
    1cf6:	9b04      	ldr	r3, [sp, #16]
    1cf8:	4694      	mov	ip, r2
    1cfa:	4463      	add	r3, ip
    1cfc:	616b      	str	r3, [r5, #20]
    1cfe:	7823      	ldrb	r3, [r4, #0]
    1d00:	2b00      	cmp	r3, #0
    1d02:	d100      	bne.n	1d06 <_svfiprintf_r+0x76>
    1d04:	e0ac      	b.n	1e60 <_svfiprintf_r+0x1d0>
    1d06:	2201      	movs	r2, #1
    1d08:	2300      	movs	r3, #0
    1d0a:	4252      	negs	r2, r2
    1d0c:	606a      	str	r2, [r5, #4]
    1d0e:	a902      	add	r1, sp, #8
    1d10:	3254      	adds	r2, #84	; 0x54
    1d12:	1852      	adds	r2, r2, r1
    1d14:	3401      	adds	r4, #1
    1d16:	602b      	str	r3, [r5, #0]
    1d18:	60eb      	str	r3, [r5, #12]
    1d1a:	60ab      	str	r3, [r5, #8]
    1d1c:	7013      	strb	r3, [r2, #0]
    1d1e:	65ab      	str	r3, [r5, #88]	; 0x58
    1d20:	4e58      	ldr	r6, [pc, #352]	; (1e84 <_svfiprintf_r+0x1f4>)
    1d22:	2205      	movs	r2, #5
    1d24:	7821      	ldrb	r1, [r4, #0]
    1d26:	0030      	movs	r0, r6
    1d28:	f000 fa50 	bl	21cc <memchr>
    1d2c:	1c62      	adds	r2, r4, #1
    1d2e:	2800      	cmp	r0, #0
    1d30:	d120      	bne.n	1d74 <_svfiprintf_r+0xe4>
    1d32:	6829      	ldr	r1, [r5, #0]
    1d34:	06cb      	lsls	r3, r1, #27
    1d36:	d504      	bpl.n	1d42 <_svfiprintf_r+0xb2>
    1d38:	2353      	movs	r3, #83	; 0x53
    1d3a:	ae02      	add	r6, sp, #8
    1d3c:	3020      	adds	r0, #32
    1d3e:	199b      	adds	r3, r3, r6
    1d40:	7018      	strb	r0, [r3, #0]
    1d42:	070b      	lsls	r3, r1, #28
    1d44:	d504      	bpl.n	1d50 <_svfiprintf_r+0xc0>
    1d46:	2353      	movs	r3, #83	; 0x53
    1d48:	202b      	movs	r0, #43	; 0x2b
    1d4a:	ae02      	add	r6, sp, #8
    1d4c:	199b      	adds	r3, r3, r6
    1d4e:	7018      	strb	r0, [r3, #0]
    1d50:	7823      	ldrb	r3, [r4, #0]
    1d52:	2b2a      	cmp	r3, #42	; 0x2a
    1d54:	d016      	beq.n	1d84 <_svfiprintf_r+0xf4>
    1d56:	2000      	movs	r0, #0
    1d58:	210a      	movs	r1, #10
    1d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d5c:	7822      	ldrb	r2, [r4, #0]
    1d5e:	3a30      	subs	r2, #48	; 0x30
    1d60:	2a09      	cmp	r2, #9
    1d62:	d955      	bls.n	1e10 <_svfiprintf_r+0x180>
    1d64:	2800      	cmp	r0, #0
    1d66:	d015      	beq.n	1d94 <_svfiprintf_r+0x104>
    1d68:	9309      	str	r3, [sp, #36]	; 0x24
    1d6a:	e013      	b.n	1d94 <_svfiprintf_r+0x104>
    1d6c:	2b25      	cmp	r3, #37	; 0x25
    1d6e:	d0b5      	beq.n	1cdc <_svfiprintf_r+0x4c>
    1d70:	3401      	adds	r4, #1
    1d72:	e7b0      	b.n	1cd6 <_svfiprintf_r+0x46>
    1d74:	2301      	movs	r3, #1
    1d76:	1b80      	subs	r0, r0, r6
    1d78:	4083      	lsls	r3, r0
    1d7a:	6829      	ldr	r1, [r5, #0]
    1d7c:	0014      	movs	r4, r2
    1d7e:	430b      	orrs	r3, r1
    1d80:	602b      	str	r3, [r5, #0]
    1d82:	e7cd      	b.n	1d20 <_svfiprintf_r+0x90>
    1d84:	9b05      	ldr	r3, [sp, #20]
    1d86:	1d18      	adds	r0, r3, #4
    1d88:	681b      	ldr	r3, [r3, #0]
    1d8a:	9005      	str	r0, [sp, #20]
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	db39      	blt.n	1e04 <_svfiprintf_r+0x174>
    1d90:	9309      	str	r3, [sp, #36]	; 0x24
    1d92:	0014      	movs	r4, r2
    1d94:	7823      	ldrb	r3, [r4, #0]
    1d96:	2b2e      	cmp	r3, #46	; 0x2e
    1d98:	d10b      	bne.n	1db2 <_svfiprintf_r+0x122>
    1d9a:	7863      	ldrb	r3, [r4, #1]
    1d9c:	1c62      	adds	r2, r4, #1
    1d9e:	2b2a      	cmp	r3, #42	; 0x2a
    1da0:	d13e      	bne.n	1e20 <_svfiprintf_r+0x190>
    1da2:	9b05      	ldr	r3, [sp, #20]
    1da4:	3402      	adds	r4, #2
    1da6:	1d1a      	adds	r2, r3, #4
    1da8:	681b      	ldr	r3, [r3, #0]
    1daa:	9205      	str	r2, [sp, #20]
    1dac:	2b00      	cmp	r3, #0
    1dae:	db34      	blt.n	1e1a <_svfiprintf_r+0x18a>
    1db0:	9307      	str	r3, [sp, #28]
    1db2:	4e35      	ldr	r6, [pc, #212]	; (1e88 <_svfiprintf_r+0x1f8>)
    1db4:	7821      	ldrb	r1, [r4, #0]
    1db6:	2203      	movs	r2, #3
    1db8:	0030      	movs	r0, r6
    1dba:	f000 fa07 	bl	21cc <memchr>
    1dbe:	2800      	cmp	r0, #0
    1dc0:	d006      	beq.n	1dd0 <_svfiprintf_r+0x140>
    1dc2:	2340      	movs	r3, #64	; 0x40
    1dc4:	1b80      	subs	r0, r0, r6
    1dc6:	4083      	lsls	r3, r0
    1dc8:	682a      	ldr	r2, [r5, #0]
    1dca:	3401      	adds	r4, #1
    1dcc:	4313      	orrs	r3, r2
    1dce:	602b      	str	r3, [r5, #0]
    1dd0:	7821      	ldrb	r1, [r4, #0]
    1dd2:	2206      	movs	r2, #6
    1dd4:	482d      	ldr	r0, [pc, #180]	; (1e8c <_svfiprintf_r+0x1fc>)
    1dd6:	1c66      	adds	r6, r4, #1
    1dd8:	7629      	strb	r1, [r5, #24]
    1dda:	f000 f9f7 	bl	21cc <memchr>
    1dde:	2800      	cmp	r0, #0
    1de0:	d046      	beq.n	1e70 <_svfiprintf_r+0x1e0>
    1de2:	4b2b      	ldr	r3, [pc, #172]	; (1e90 <_svfiprintf_r+0x200>)
    1de4:	2b00      	cmp	r3, #0
    1de6:	d12f      	bne.n	1e48 <_svfiprintf_r+0x1b8>
    1de8:	6829      	ldr	r1, [r5, #0]
    1dea:	9b05      	ldr	r3, [sp, #20]
    1dec:	2207      	movs	r2, #7
    1dee:	05c9      	lsls	r1, r1, #23
    1df0:	d528      	bpl.n	1e44 <_svfiprintf_r+0x1b4>
    1df2:	189b      	adds	r3, r3, r2
    1df4:	4393      	bics	r3, r2
    1df6:	3308      	adds	r3, #8
    1df8:	9305      	str	r3, [sp, #20]
    1dfa:	696b      	ldr	r3, [r5, #20]
    1dfc:	9a03      	ldr	r2, [sp, #12]
    1dfe:	189b      	adds	r3, r3, r2
    1e00:	616b      	str	r3, [r5, #20]
    1e02:	e767      	b.n	1cd4 <_svfiprintf_r+0x44>
    1e04:	425b      	negs	r3, r3
    1e06:	60eb      	str	r3, [r5, #12]
    1e08:	2302      	movs	r3, #2
    1e0a:	430b      	orrs	r3, r1
    1e0c:	602b      	str	r3, [r5, #0]
    1e0e:	e7c0      	b.n	1d92 <_svfiprintf_r+0x102>
    1e10:	434b      	muls	r3, r1
    1e12:	3401      	adds	r4, #1
    1e14:	189b      	adds	r3, r3, r2
    1e16:	2001      	movs	r0, #1
    1e18:	e7a0      	b.n	1d5c <_svfiprintf_r+0xcc>
    1e1a:	2301      	movs	r3, #1
    1e1c:	425b      	negs	r3, r3
    1e1e:	e7c7      	b.n	1db0 <_svfiprintf_r+0x120>
    1e20:	2300      	movs	r3, #0
    1e22:	0014      	movs	r4, r2
    1e24:	200a      	movs	r0, #10
    1e26:	001a      	movs	r2, r3
    1e28:	606b      	str	r3, [r5, #4]
    1e2a:	7821      	ldrb	r1, [r4, #0]
    1e2c:	3930      	subs	r1, #48	; 0x30
    1e2e:	2909      	cmp	r1, #9
    1e30:	d903      	bls.n	1e3a <_svfiprintf_r+0x1aa>
    1e32:	2b00      	cmp	r3, #0
    1e34:	d0bd      	beq.n	1db2 <_svfiprintf_r+0x122>
    1e36:	9207      	str	r2, [sp, #28]
    1e38:	e7bb      	b.n	1db2 <_svfiprintf_r+0x122>
    1e3a:	4342      	muls	r2, r0
    1e3c:	3401      	adds	r4, #1
    1e3e:	1852      	adds	r2, r2, r1
    1e40:	2301      	movs	r3, #1
    1e42:	e7f2      	b.n	1e2a <_svfiprintf_r+0x19a>
    1e44:	3307      	adds	r3, #7
    1e46:	e7d5      	b.n	1df4 <_svfiprintf_r+0x164>
    1e48:	ab05      	add	r3, sp, #20
    1e4a:	9300      	str	r3, [sp, #0]
    1e4c:	003a      	movs	r2, r7
    1e4e:	4b11      	ldr	r3, [pc, #68]	; (1e94 <_svfiprintf_r+0x204>)
    1e50:	0029      	movs	r1, r5
    1e52:	9802      	ldr	r0, [sp, #8]
    1e54:	e000      	b.n	1e58 <_svfiprintf_r+0x1c8>
    1e56:	bf00      	nop
    1e58:	9003      	str	r0, [sp, #12]
    1e5a:	9b03      	ldr	r3, [sp, #12]
    1e5c:	3301      	adds	r3, #1
    1e5e:	d1cc      	bne.n	1dfa <_svfiprintf_r+0x16a>
    1e60:	89bb      	ldrh	r3, [r7, #12]
    1e62:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1e64:	065b      	lsls	r3, r3, #25
    1e66:	d400      	bmi.n	1e6a <_svfiprintf_r+0x1da>
    1e68:	e729      	b.n	1cbe <_svfiprintf_r+0x2e>
    1e6a:	2001      	movs	r0, #1
    1e6c:	4240      	negs	r0, r0
    1e6e:	e726      	b.n	1cbe <_svfiprintf_r+0x2e>
    1e70:	ab05      	add	r3, sp, #20
    1e72:	9300      	str	r3, [sp, #0]
    1e74:	003a      	movs	r2, r7
    1e76:	4b07      	ldr	r3, [pc, #28]	; (1e94 <_svfiprintf_r+0x204>)
    1e78:	0029      	movs	r1, r5
    1e7a:	9802      	ldr	r0, [sp, #8]
    1e7c:	f000 f87a 	bl	1f74 <_printf_i>
    1e80:	e7ea      	b.n	1e58 <_svfiprintf_r+0x1c8>
    1e82:	46c0      	nop			; (mov r8, r8)
    1e84:	00002658 	.word	0x00002658
    1e88:	0000265e 	.word	0x0000265e
    1e8c:	00002662 	.word	0x00002662
    1e90:	00000000 	.word	0x00000000
    1e94:	00001bcd 	.word	0x00001bcd

00001e98 <_printf_common>:
    1e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e9a:	0015      	movs	r5, r2
    1e9c:	9301      	str	r3, [sp, #4]
    1e9e:	688a      	ldr	r2, [r1, #8]
    1ea0:	690b      	ldr	r3, [r1, #16]
    1ea2:	9000      	str	r0, [sp, #0]
    1ea4:	000c      	movs	r4, r1
    1ea6:	4293      	cmp	r3, r2
    1ea8:	da00      	bge.n	1eac <_printf_common+0x14>
    1eaa:	0013      	movs	r3, r2
    1eac:	0022      	movs	r2, r4
    1eae:	602b      	str	r3, [r5, #0]
    1eb0:	3243      	adds	r2, #67	; 0x43
    1eb2:	7812      	ldrb	r2, [r2, #0]
    1eb4:	2a00      	cmp	r2, #0
    1eb6:	d001      	beq.n	1ebc <_printf_common+0x24>
    1eb8:	3301      	adds	r3, #1
    1eba:	602b      	str	r3, [r5, #0]
    1ebc:	6823      	ldr	r3, [r4, #0]
    1ebe:	069b      	lsls	r3, r3, #26
    1ec0:	d502      	bpl.n	1ec8 <_printf_common+0x30>
    1ec2:	682b      	ldr	r3, [r5, #0]
    1ec4:	3302      	adds	r3, #2
    1ec6:	602b      	str	r3, [r5, #0]
    1ec8:	2706      	movs	r7, #6
    1eca:	6823      	ldr	r3, [r4, #0]
    1ecc:	401f      	ands	r7, r3
    1ece:	d027      	beq.n	1f20 <_printf_common+0x88>
    1ed0:	0023      	movs	r3, r4
    1ed2:	3343      	adds	r3, #67	; 0x43
    1ed4:	781b      	ldrb	r3, [r3, #0]
    1ed6:	1e5a      	subs	r2, r3, #1
    1ed8:	4193      	sbcs	r3, r2
    1eda:	6822      	ldr	r2, [r4, #0]
    1edc:	0692      	lsls	r2, r2, #26
    1ede:	d430      	bmi.n	1f42 <_printf_common+0xaa>
    1ee0:	0022      	movs	r2, r4
    1ee2:	9901      	ldr	r1, [sp, #4]
    1ee4:	3243      	adds	r2, #67	; 0x43
    1ee6:	9800      	ldr	r0, [sp, #0]
    1ee8:	9e08      	ldr	r6, [sp, #32]
    1eea:	47b0      	blx	r6
    1eec:	1c43      	adds	r3, r0, #1
    1eee:	d025      	beq.n	1f3c <_printf_common+0xa4>
    1ef0:	2306      	movs	r3, #6
    1ef2:	6820      	ldr	r0, [r4, #0]
    1ef4:	682a      	ldr	r2, [r5, #0]
    1ef6:	68e1      	ldr	r1, [r4, #12]
    1ef8:	4003      	ands	r3, r0
    1efa:	2500      	movs	r5, #0
    1efc:	2b04      	cmp	r3, #4
    1efe:	d103      	bne.n	1f08 <_printf_common+0x70>
    1f00:	1a8d      	subs	r5, r1, r2
    1f02:	43eb      	mvns	r3, r5
    1f04:	17db      	asrs	r3, r3, #31
    1f06:	401d      	ands	r5, r3
    1f08:	68a3      	ldr	r3, [r4, #8]
    1f0a:	6922      	ldr	r2, [r4, #16]
    1f0c:	4293      	cmp	r3, r2
    1f0e:	dd01      	ble.n	1f14 <_printf_common+0x7c>
    1f10:	1a9b      	subs	r3, r3, r2
    1f12:	18ed      	adds	r5, r5, r3
    1f14:	2700      	movs	r7, #0
    1f16:	42bd      	cmp	r5, r7
    1f18:	d120      	bne.n	1f5c <_printf_common+0xc4>
    1f1a:	2000      	movs	r0, #0
    1f1c:	e010      	b.n	1f40 <_printf_common+0xa8>
    1f1e:	3701      	adds	r7, #1
    1f20:	68e3      	ldr	r3, [r4, #12]
    1f22:	682a      	ldr	r2, [r5, #0]
    1f24:	1a9b      	subs	r3, r3, r2
    1f26:	429f      	cmp	r7, r3
    1f28:	dad2      	bge.n	1ed0 <_printf_common+0x38>
    1f2a:	0022      	movs	r2, r4
    1f2c:	2301      	movs	r3, #1
    1f2e:	3219      	adds	r2, #25
    1f30:	9901      	ldr	r1, [sp, #4]
    1f32:	9800      	ldr	r0, [sp, #0]
    1f34:	9e08      	ldr	r6, [sp, #32]
    1f36:	47b0      	blx	r6
    1f38:	1c43      	adds	r3, r0, #1
    1f3a:	d1f0      	bne.n	1f1e <_printf_common+0x86>
    1f3c:	2001      	movs	r0, #1
    1f3e:	4240      	negs	r0, r0
    1f40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1f42:	2030      	movs	r0, #48	; 0x30
    1f44:	18e1      	adds	r1, r4, r3
    1f46:	3143      	adds	r1, #67	; 0x43
    1f48:	7008      	strb	r0, [r1, #0]
    1f4a:	0021      	movs	r1, r4
    1f4c:	1c5a      	adds	r2, r3, #1
    1f4e:	3145      	adds	r1, #69	; 0x45
    1f50:	7809      	ldrb	r1, [r1, #0]
    1f52:	18a2      	adds	r2, r4, r2
    1f54:	3243      	adds	r2, #67	; 0x43
    1f56:	3302      	adds	r3, #2
    1f58:	7011      	strb	r1, [r2, #0]
    1f5a:	e7c1      	b.n	1ee0 <_printf_common+0x48>
    1f5c:	0022      	movs	r2, r4
    1f5e:	2301      	movs	r3, #1
    1f60:	321a      	adds	r2, #26
    1f62:	9901      	ldr	r1, [sp, #4]
    1f64:	9800      	ldr	r0, [sp, #0]
    1f66:	9e08      	ldr	r6, [sp, #32]
    1f68:	47b0      	blx	r6
    1f6a:	1c43      	adds	r3, r0, #1
    1f6c:	d0e6      	beq.n	1f3c <_printf_common+0xa4>
    1f6e:	3701      	adds	r7, #1
    1f70:	e7d1      	b.n	1f16 <_printf_common+0x7e>
	...

00001f74 <_printf_i>:
    1f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f76:	b08b      	sub	sp, #44	; 0x2c
    1f78:	9206      	str	r2, [sp, #24]
    1f7a:	000a      	movs	r2, r1
    1f7c:	3243      	adds	r2, #67	; 0x43
    1f7e:	9307      	str	r3, [sp, #28]
    1f80:	9005      	str	r0, [sp, #20]
    1f82:	9204      	str	r2, [sp, #16]
    1f84:	7e0a      	ldrb	r2, [r1, #24]
    1f86:	000c      	movs	r4, r1
    1f88:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1f8a:	2a6e      	cmp	r2, #110	; 0x6e
    1f8c:	d100      	bne.n	1f90 <_printf_i+0x1c>
    1f8e:	e08f      	b.n	20b0 <STACK_SIZE+0xb0>
    1f90:	d817      	bhi.n	1fc2 <_printf_i+0x4e>
    1f92:	2a63      	cmp	r2, #99	; 0x63
    1f94:	d02c      	beq.n	1ff0 <_printf_i+0x7c>
    1f96:	d808      	bhi.n	1faa <_printf_i+0x36>
    1f98:	2a00      	cmp	r2, #0
    1f9a:	d100      	bne.n	1f9e <_printf_i+0x2a>
    1f9c:	e099      	b.n	20d2 <STACK_SIZE+0xd2>
    1f9e:	2a58      	cmp	r2, #88	; 0x58
    1fa0:	d054      	beq.n	204c <STACK_SIZE+0x4c>
    1fa2:	0026      	movs	r6, r4
    1fa4:	3642      	adds	r6, #66	; 0x42
    1fa6:	7032      	strb	r2, [r6, #0]
    1fa8:	e029      	b.n	1ffe <_printf_i+0x8a>
    1faa:	2a64      	cmp	r2, #100	; 0x64
    1fac:	d001      	beq.n	1fb2 <_printf_i+0x3e>
    1fae:	2a69      	cmp	r2, #105	; 0x69
    1fb0:	d1f7      	bne.n	1fa2 <_printf_i+0x2e>
    1fb2:	6821      	ldr	r1, [r4, #0]
    1fb4:	681a      	ldr	r2, [r3, #0]
    1fb6:	0608      	lsls	r0, r1, #24
    1fb8:	d523      	bpl.n	2002 <STACK_SIZE+0x2>
    1fba:	1d11      	adds	r1, r2, #4
    1fbc:	6019      	str	r1, [r3, #0]
    1fbe:	6815      	ldr	r5, [r2, #0]
    1fc0:	e025      	b.n	200e <STACK_SIZE+0xe>
    1fc2:	2a73      	cmp	r2, #115	; 0x73
    1fc4:	d100      	bne.n	1fc8 <_printf_i+0x54>
    1fc6:	e088      	b.n	20da <STACK_SIZE+0xda>
    1fc8:	d808      	bhi.n	1fdc <_printf_i+0x68>
    1fca:	2a6f      	cmp	r2, #111	; 0x6f
    1fcc:	d029      	beq.n	2022 <STACK_SIZE+0x22>
    1fce:	2a70      	cmp	r2, #112	; 0x70
    1fd0:	d1e7      	bne.n	1fa2 <_printf_i+0x2e>
    1fd2:	2220      	movs	r2, #32
    1fd4:	6809      	ldr	r1, [r1, #0]
    1fd6:	430a      	orrs	r2, r1
    1fd8:	6022      	str	r2, [r4, #0]
    1fda:	e003      	b.n	1fe4 <_printf_i+0x70>
    1fdc:	2a75      	cmp	r2, #117	; 0x75
    1fde:	d020      	beq.n	2022 <STACK_SIZE+0x22>
    1fe0:	2a78      	cmp	r2, #120	; 0x78
    1fe2:	d1de      	bne.n	1fa2 <_printf_i+0x2e>
    1fe4:	0022      	movs	r2, r4
    1fe6:	2178      	movs	r1, #120	; 0x78
    1fe8:	3245      	adds	r2, #69	; 0x45
    1fea:	7011      	strb	r1, [r2, #0]
    1fec:	4a6c      	ldr	r2, [pc, #432]	; (21a0 <STACK_SIZE+0x1a0>)
    1fee:	e030      	b.n	2052 <STACK_SIZE+0x52>
    1ff0:	000e      	movs	r6, r1
    1ff2:	681a      	ldr	r2, [r3, #0]
    1ff4:	3642      	adds	r6, #66	; 0x42
    1ff6:	1d11      	adds	r1, r2, #4
    1ff8:	6019      	str	r1, [r3, #0]
    1ffa:	6813      	ldr	r3, [r2, #0]
    1ffc:	7033      	strb	r3, [r6, #0]
    1ffe:	2301      	movs	r3, #1
    2000:	e079      	b.n	20f6 <STACK_SIZE+0xf6>
    2002:	0649      	lsls	r1, r1, #25
    2004:	d5d9      	bpl.n	1fba <_printf_i+0x46>
    2006:	1d11      	adds	r1, r2, #4
    2008:	6019      	str	r1, [r3, #0]
    200a:	2300      	movs	r3, #0
    200c:	5ed5      	ldrsh	r5, [r2, r3]
    200e:	2d00      	cmp	r5, #0
    2010:	da03      	bge.n	201a <STACK_SIZE+0x1a>
    2012:	232d      	movs	r3, #45	; 0x2d
    2014:	9a04      	ldr	r2, [sp, #16]
    2016:	426d      	negs	r5, r5
    2018:	7013      	strb	r3, [r2, #0]
    201a:	4b62      	ldr	r3, [pc, #392]	; (21a4 <STACK_SIZE+0x1a4>)
    201c:	270a      	movs	r7, #10
    201e:	9303      	str	r3, [sp, #12]
    2020:	e02f      	b.n	2082 <STACK_SIZE+0x82>
    2022:	6820      	ldr	r0, [r4, #0]
    2024:	6819      	ldr	r1, [r3, #0]
    2026:	0605      	lsls	r5, r0, #24
    2028:	d503      	bpl.n	2032 <STACK_SIZE+0x32>
    202a:	1d08      	adds	r0, r1, #4
    202c:	6018      	str	r0, [r3, #0]
    202e:	680d      	ldr	r5, [r1, #0]
    2030:	e005      	b.n	203e <STACK_SIZE+0x3e>
    2032:	0640      	lsls	r0, r0, #25
    2034:	d5f9      	bpl.n	202a <STACK_SIZE+0x2a>
    2036:	680d      	ldr	r5, [r1, #0]
    2038:	1d08      	adds	r0, r1, #4
    203a:	6018      	str	r0, [r3, #0]
    203c:	b2ad      	uxth	r5, r5
    203e:	4b59      	ldr	r3, [pc, #356]	; (21a4 <STACK_SIZE+0x1a4>)
    2040:	2708      	movs	r7, #8
    2042:	9303      	str	r3, [sp, #12]
    2044:	2a6f      	cmp	r2, #111	; 0x6f
    2046:	d018      	beq.n	207a <STACK_SIZE+0x7a>
    2048:	270a      	movs	r7, #10
    204a:	e016      	b.n	207a <STACK_SIZE+0x7a>
    204c:	3145      	adds	r1, #69	; 0x45
    204e:	700a      	strb	r2, [r1, #0]
    2050:	4a54      	ldr	r2, [pc, #336]	; (21a4 <STACK_SIZE+0x1a4>)
    2052:	9203      	str	r2, [sp, #12]
    2054:	681a      	ldr	r2, [r3, #0]
    2056:	6821      	ldr	r1, [r4, #0]
    2058:	1d10      	adds	r0, r2, #4
    205a:	6018      	str	r0, [r3, #0]
    205c:	6815      	ldr	r5, [r2, #0]
    205e:	0608      	lsls	r0, r1, #24
    2060:	d522      	bpl.n	20a8 <STACK_SIZE+0xa8>
    2062:	07cb      	lsls	r3, r1, #31
    2064:	d502      	bpl.n	206c <STACK_SIZE+0x6c>
    2066:	2320      	movs	r3, #32
    2068:	4319      	orrs	r1, r3
    206a:	6021      	str	r1, [r4, #0]
    206c:	2710      	movs	r7, #16
    206e:	2d00      	cmp	r5, #0
    2070:	d103      	bne.n	207a <STACK_SIZE+0x7a>
    2072:	2320      	movs	r3, #32
    2074:	6822      	ldr	r2, [r4, #0]
    2076:	439a      	bics	r2, r3
    2078:	6022      	str	r2, [r4, #0]
    207a:	0023      	movs	r3, r4
    207c:	2200      	movs	r2, #0
    207e:	3343      	adds	r3, #67	; 0x43
    2080:	701a      	strb	r2, [r3, #0]
    2082:	6863      	ldr	r3, [r4, #4]
    2084:	60a3      	str	r3, [r4, #8]
    2086:	2b00      	cmp	r3, #0
    2088:	db5c      	blt.n	2144 <STACK_SIZE+0x144>
    208a:	2204      	movs	r2, #4
    208c:	6821      	ldr	r1, [r4, #0]
    208e:	4391      	bics	r1, r2
    2090:	6021      	str	r1, [r4, #0]
    2092:	2d00      	cmp	r5, #0
    2094:	d158      	bne.n	2148 <STACK_SIZE+0x148>
    2096:	9e04      	ldr	r6, [sp, #16]
    2098:	2b00      	cmp	r3, #0
    209a:	d064      	beq.n	2166 <STACK_SIZE+0x166>
    209c:	0026      	movs	r6, r4
    209e:	9b03      	ldr	r3, [sp, #12]
    20a0:	3642      	adds	r6, #66	; 0x42
    20a2:	781b      	ldrb	r3, [r3, #0]
    20a4:	7033      	strb	r3, [r6, #0]
    20a6:	e05e      	b.n	2166 <STACK_SIZE+0x166>
    20a8:	0648      	lsls	r0, r1, #25
    20aa:	d5da      	bpl.n	2062 <STACK_SIZE+0x62>
    20ac:	b2ad      	uxth	r5, r5
    20ae:	e7d8      	b.n	2062 <STACK_SIZE+0x62>
    20b0:	6809      	ldr	r1, [r1, #0]
    20b2:	681a      	ldr	r2, [r3, #0]
    20b4:	0608      	lsls	r0, r1, #24
    20b6:	d505      	bpl.n	20c4 <STACK_SIZE+0xc4>
    20b8:	1d11      	adds	r1, r2, #4
    20ba:	6019      	str	r1, [r3, #0]
    20bc:	6813      	ldr	r3, [r2, #0]
    20be:	6962      	ldr	r2, [r4, #20]
    20c0:	601a      	str	r2, [r3, #0]
    20c2:	e006      	b.n	20d2 <STACK_SIZE+0xd2>
    20c4:	0649      	lsls	r1, r1, #25
    20c6:	d5f7      	bpl.n	20b8 <STACK_SIZE+0xb8>
    20c8:	1d11      	adds	r1, r2, #4
    20ca:	6019      	str	r1, [r3, #0]
    20cc:	6813      	ldr	r3, [r2, #0]
    20ce:	8aa2      	ldrh	r2, [r4, #20]
    20d0:	801a      	strh	r2, [r3, #0]
    20d2:	2300      	movs	r3, #0
    20d4:	9e04      	ldr	r6, [sp, #16]
    20d6:	6123      	str	r3, [r4, #16]
    20d8:	e054      	b.n	2184 <STACK_SIZE+0x184>
    20da:	681a      	ldr	r2, [r3, #0]
    20dc:	1d11      	adds	r1, r2, #4
    20de:	6019      	str	r1, [r3, #0]
    20e0:	6816      	ldr	r6, [r2, #0]
    20e2:	2100      	movs	r1, #0
    20e4:	6862      	ldr	r2, [r4, #4]
    20e6:	0030      	movs	r0, r6
    20e8:	f000 f870 	bl	21cc <memchr>
    20ec:	2800      	cmp	r0, #0
    20ee:	d001      	beq.n	20f4 <STACK_SIZE+0xf4>
    20f0:	1b80      	subs	r0, r0, r6
    20f2:	6060      	str	r0, [r4, #4]
    20f4:	6863      	ldr	r3, [r4, #4]
    20f6:	6123      	str	r3, [r4, #16]
    20f8:	2300      	movs	r3, #0
    20fa:	9a04      	ldr	r2, [sp, #16]
    20fc:	7013      	strb	r3, [r2, #0]
    20fe:	e041      	b.n	2184 <STACK_SIZE+0x184>
    2100:	6923      	ldr	r3, [r4, #16]
    2102:	0032      	movs	r2, r6
    2104:	9906      	ldr	r1, [sp, #24]
    2106:	9805      	ldr	r0, [sp, #20]
    2108:	9d07      	ldr	r5, [sp, #28]
    210a:	47a8      	blx	r5
    210c:	1c43      	adds	r3, r0, #1
    210e:	d043      	beq.n	2198 <STACK_SIZE+0x198>
    2110:	6823      	ldr	r3, [r4, #0]
    2112:	2500      	movs	r5, #0
    2114:	079b      	lsls	r3, r3, #30
    2116:	d40f      	bmi.n	2138 <STACK_SIZE+0x138>
    2118:	9b09      	ldr	r3, [sp, #36]	; 0x24
    211a:	68e0      	ldr	r0, [r4, #12]
    211c:	4298      	cmp	r0, r3
    211e:	da3d      	bge.n	219c <STACK_SIZE+0x19c>
    2120:	0018      	movs	r0, r3
    2122:	e03b      	b.n	219c <STACK_SIZE+0x19c>
    2124:	0022      	movs	r2, r4
    2126:	2301      	movs	r3, #1
    2128:	3219      	adds	r2, #25
    212a:	9906      	ldr	r1, [sp, #24]
    212c:	9805      	ldr	r0, [sp, #20]
    212e:	9e07      	ldr	r6, [sp, #28]
    2130:	47b0      	blx	r6
    2132:	1c43      	adds	r3, r0, #1
    2134:	d030      	beq.n	2198 <STACK_SIZE+0x198>
    2136:	3501      	adds	r5, #1
    2138:	68e3      	ldr	r3, [r4, #12]
    213a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    213c:	1a9b      	subs	r3, r3, r2
    213e:	429d      	cmp	r5, r3
    2140:	dbf0      	blt.n	2124 <STACK_SIZE+0x124>
    2142:	e7e9      	b.n	2118 <STACK_SIZE+0x118>
    2144:	2d00      	cmp	r5, #0
    2146:	d0a9      	beq.n	209c <STACK_SIZE+0x9c>
    2148:	9e04      	ldr	r6, [sp, #16]
    214a:	0028      	movs	r0, r5
    214c:	0039      	movs	r1, r7
    214e:	f7ff fb61 	bl	1814 <__aeabi_uidivmod>
    2152:	9b03      	ldr	r3, [sp, #12]
    2154:	3e01      	subs	r6, #1
    2156:	5c5b      	ldrb	r3, [r3, r1]
    2158:	0028      	movs	r0, r5
    215a:	7033      	strb	r3, [r6, #0]
    215c:	0039      	movs	r1, r7
    215e:	f7ff fad3 	bl	1708 <__udivsi3>
    2162:	1e05      	subs	r5, r0, #0
    2164:	d1f1      	bne.n	214a <STACK_SIZE+0x14a>
    2166:	2f08      	cmp	r7, #8
    2168:	d109      	bne.n	217e <STACK_SIZE+0x17e>
    216a:	6823      	ldr	r3, [r4, #0]
    216c:	07db      	lsls	r3, r3, #31
    216e:	d506      	bpl.n	217e <STACK_SIZE+0x17e>
    2170:	6863      	ldr	r3, [r4, #4]
    2172:	6922      	ldr	r2, [r4, #16]
    2174:	4293      	cmp	r3, r2
    2176:	dc02      	bgt.n	217e <STACK_SIZE+0x17e>
    2178:	2330      	movs	r3, #48	; 0x30
    217a:	3e01      	subs	r6, #1
    217c:	7033      	strb	r3, [r6, #0]
    217e:	9b04      	ldr	r3, [sp, #16]
    2180:	1b9b      	subs	r3, r3, r6
    2182:	6123      	str	r3, [r4, #16]
    2184:	9b07      	ldr	r3, [sp, #28]
    2186:	aa09      	add	r2, sp, #36	; 0x24
    2188:	9300      	str	r3, [sp, #0]
    218a:	0021      	movs	r1, r4
    218c:	9b06      	ldr	r3, [sp, #24]
    218e:	9805      	ldr	r0, [sp, #20]
    2190:	f7ff fe82 	bl	1e98 <_printf_common>
    2194:	1c43      	adds	r3, r0, #1
    2196:	d1b3      	bne.n	2100 <STACK_SIZE+0x100>
    2198:	2001      	movs	r0, #1
    219a:	4240      	negs	r0, r0
    219c:	b00b      	add	sp, #44	; 0x2c
    219e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21a0:	0000267a 	.word	0x0000267a
    21a4:	00002669 	.word	0x00002669

000021a8 <_sbrk_r>:
    21a8:	2300      	movs	r3, #0
    21aa:	b570      	push	{r4, r5, r6, lr}
    21ac:	4c06      	ldr	r4, [pc, #24]	; (21c8 <_sbrk_r+0x20>)
    21ae:	0005      	movs	r5, r0
    21b0:	0008      	movs	r0, r1
    21b2:	6023      	str	r3, [r4, #0]
    21b4:	f7fe fc08 	bl	9c8 <_sbrk>
    21b8:	1c43      	adds	r3, r0, #1
    21ba:	d103      	bne.n	21c4 <_sbrk_r+0x1c>
    21bc:	6823      	ldr	r3, [r4, #0]
    21be:	2b00      	cmp	r3, #0
    21c0:	d000      	beq.n	21c4 <_sbrk_r+0x1c>
    21c2:	602b      	str	r3, [r5, #0]
    21c4:	bd70      	pop	{r4, r5, r6, pc}
    21c6:	46c0      	nop			; (mov r8, r8)
    21c8:	20000180 	.word	0x20000180

000021cc <memchr>:
    21cc:	b2c9      	uxtb	r1, r1
    21ce:	1882      	adds	r2, r0, r2
    21d0:	4290      	cmp	r0, r2
    21d2:	d101      	bne.n	21d8 <memchr+0xc>
    21d4:	2000      	movs	r0, #0
    21d6:	4770      	bx	lr
    21d8:	7803      	ldrb	r3, [r0, #0]
    21da:	428b      	cmp	r3, r1
    21dc:	d0fb      	beq.n	21d6 <memchr+0xa>
    21de:	3001      	adds	r0, #1
    21e0:	e7f6      	b.n	21d0 <memchr+0x4>

000021e2 <memcpy>:
    21e2:	2300      	movs	r3, #0
    21e4:	b510      	push	{r4, lr}
    21e6:	429a      	cmp	r2, r3
    21e8:	d100      	bne.n	21ec <memcpy+0xa>
    21ea:	bd10      	pop	{r4, pc}
    21ec:	5ccc      	ldrb	r4, [r1, r3]
    21ee:	54c4      	strb	r4, [r0, r3]
    21f0:	3301      	adds	r3, #1
    21f2:	e7f8      	b.n	21e6 <memcpy+0x4>

000021f4 <memmove>:
    21f4:	b510      	push	{r4, lr}
    21f6:	4288      	cmp	r0, r1
    21f8:	d902      	bls.n	2200 <memmove+0xc>
    21fa:	188b      	adds	r3, r1, r2
    21fc:	4298      	cmp	r0, r3
    21fe:	d308      	bcc.n	2212 <memmove+0x1e>
    2200:	2300      	movs	r3, #0
    2202:	429a      	cmp	r2, r3
    2204:	d007      	beq.n	2216 <memmove+0x22>
    2206:	5ccc      	ldrb	r4, [r1, r3]
    2208:	54c4      	strb	r4, [r0, r3]
    220a:	3301      	adds	r3, #1
    220c:	e7f9      	b.n	2202 <memmove+0xe>
    220e:	5c8b      	ldrb	r3, [r1, r2]
    2210:	5483      	strb	r3, [r0, r2]
    2212:	3a01      	subs	r2, #1
    2214:	d2fb      	bcs.n	220e <memmove+0x1a>
    2216:	bd10      	pop	{r4, pc}

00002218 <__malloc_lock>:
    2218:	4770      	bx	lr

0000221a <__malloc_unlock>:
    221a:	4770      	bx	lr

0000221c <_free_r>:
    221c:	b570      	push	{r4, r5, r6, lr}
    221e:	0005      	movs	r5, r0
    2220:	2900      	cmp	r1, #0
    2222:	d010      	beq.n	2246 <_free_r+0x2a>
    2224:	1f0c      	subs	r4, r1, #4
    2226:	6823      	ldr	r3, [r4, #0]
    2228:	2b00      	cmp	r3, #0
    222a:	da00      	bge.n	222e <_free_r+0x12>
    222c:	18e4      	adds	r4, r4, r3
    222e:	0028      	movs	r0, r5
    2230:	f7ff fff2 	bl	2218 <__malloc_lock>
    2234:	4a1d      	ldr	r2, [pc, #116]	; (22ac <_free_r+0x90>)
    2236:	6813      	ldr	r3, [r2, #0]
    2238:	2b00      	cmp	r3, #0
    223a:	d105      	bne.n	2248 <_free_r+0x2c>
    223c:	6063      	str	r3, [r4, #4]
    223e:	6014      	str	r4, [r2, #0]
    2240:	0028      	movs	r0, r5
    2242:	f7ff ffea 	bl	221a <__malloc_unlock>
    2246:	bd70      	pop	{r4, r5, r6, pc}
    2248:	42a3      	cmp	r3, r4
    224a:	d909      	bls.n	2260 <_free_r+0x44>
    224c:	6821      	ldr	r1, [r4, #0]
    224e:	1860      	adds	r0, r4, r1
    2250:	4283      	cmp	r3, r0
    2252:	d1f3      	bne.n	223c <_free_r+0x20>
    2254:	6818      	ldr	r0, [r3, #0]
    2256:	685b      	ldr	r3, [r3, #4]
    2258:	1841      	adds	r1, r0, r1
    225a:	6021      	str	r1, [r4, #0]
    225c:	e7ee      	b.n	223c <_free_r+0x20>
    225e:	0013      	movs	r3, r2
    2260:	685a      	ldr	r2, [r3, #4]
    2262:	2a00      	cmp	r2, #0
    2264:	d001      	beq.n	226a <_free_r+0x4e>
    2266:	42a2      	cmp	r2, r4
    2268:	d9f9      	bls.n	225e <_free_r+0x42>
    226a:	6819      	ldr	r1, [r3, #0]
    226c:	1858      	adds	r0, r3, r1
    226e:	42a0      	cmp	r0, r4
    2270:	d10b      	bne.n	228a <_free_r+0x6e>
    2272:	6820      	ldr	r0, [r4, #0]
    2274:	1809      	adds	r1, r1, r0
    2276:	1858      	adds	r0, r3, r1
    2278:	6019      	str	r1, [r3, #0]
    227a:	4282      	cmp	r2, r0
    227c:	d1e0      	bne.n	2240 <_free_r+0x24>
    227e:	6810      	ldr	r0, [r2, #0]
    2280:	6852      	ldr	r2, [r2, #4]
    2282:	1841      	adds	r1, r0, r1
    2284:	6019      	str	r1, [r3, #0]
    2286:	605a      	str	r2, [r3, #4]
    2288:	e7da      	b.n	2240 <_free_r+0x24>
    228a:	42a0      	cmp	r0, r4
    228c:	d902      	bls.n	2294 <_free_r+0x78>
    228e:	230c      	movs	r3, #12
    2290:	602b      	str	r3, [r5, #0]
    2292:	e7d5      	b.n	2240 <_free_r+0x24>
    2294:	6821      	ldr	r1, [r4, #0]
    2296:	1860      	adds	r0, r4, r1
    2298:	4282      	cmp	r2, r0
    229a:	d103      	bne.n	22a4 <_free_r+0x88>
    229c:	6810      	ldr	r0, [r2, #0]
    229e:	6852      	ldr	r2, [r2, #4]
    22a0:	1841      	adds	r1, r0, r1
    22a2:	6021      	str	r1, [r4, #0]
    22a4:	6062      	str	r2, [r4, #4]
    22a6:	605c      	str	r4, [r3, #4]
    22a8:	e7ca      	b.n	2240 <_free_r+0x24>
    22aa:	46c0      	nop			; (mov r8, r8)
    22ac:	2000010c 	.word	0x2000010c

000022b0 <_realloc_r>:
    22b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22b2:	0007      	movs	r7, r0
    22b4:	000d      	movs	r5, r1
    22b6:	0016      	movs	r6, r2
    22b8:	2900      	cmp	r1, #0
    22ba:	d105      	bne.n	22c8 <_realloc_r+0x18>
    22bc:	0011      	movs	r1, r2
    22be:	f7ff fc27 	bl	1b10 <_malloc_r>
    22c2:	0004      	movs	r4, r0
    22c4:	0020      	movs	r0, r4
    22c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22c8:	2a00      	cmp	r2, #0
    22ca:	d103      	bne.n	22d4 <_realloc_r+0x24>
    22cc:	f7ff ffa6 	bl	221c <_free_r>
    22d0:	0034      	movs	r4, r6
    22d2:	e7f7      	b.n	22c4 <_realloc_r+0x14>
    22d4:	f000 f812 	bl	22fc <_malloc_usable_size_r>
    22d8:	002c      	movs	r4, r5
    22da:	4286      	cmp	r6, r0
    22dc:	d9f2      	bls.n	22c4 <_realloc_r+0x14>
    22de:	0031      	movs	r1, r6
    22e0:	0038      	movs	r0, r7
    22e2:	f7ff fc15 	bl	1b10 <_malloc_r>
    22e6:	1e04      	subs	r4, r0, #0
    22e8:	d0ec      	beq.n	22c4 <_realloc_r+0x14>
    22ea:	0029      	movs	r1, r5
    22ec:	0032      	movs	r2, r6
    22ee:	f7ff ff78 	bl	21e2 <memcpy>
    22f2:	0029      	movs	r1, r5
    22f4:	0038      	movs	r0, r7
    22f6:	f7ff ff91 	bl	221c <_free_r>
    22fa:	e7e3      	b.n	22c4 <_realloc_r+0x14>

000022fc <_malloc_usable_size_r>:
    22fc:	1f0b      	subs	r3, r1, #4
    22fe:	681b      	ldr	r3, [r3, #0]
    2300:	1f18      	subs	r0, r3, #4
    2302:	2b00      	cmp	r3, #0
    2304:	da01      	bge.n	230a <_malloc_usable_size_r+0xe>
    2306:	580b      	ldr	r3, [r1, r0]
    2308:	18c0      	adds	r0, r0, r3
    230a:	4770      	bx	lr
    230c:	682f2e2e 	.word	0x682f2e2e
    2310:	732f6c61 	.word	0x732f6c61
    2314:	682f6372 	.word	0x682f6372
    2318:	635f6c61 	.word	0x635f6c61
    231c:	6e656c61 	.word	0x6e656c61
    2320:	2e726164 	.word	0x2e726164
    2324:	00000063 	.word	0x00000063
    2328:	682f2e2e 	.word	0x682f2e2e
    232c:	732f6c61 	.word	0x732f6c61
    2330:	682f6372 	.word	0x682f6372
    2334:	695f6c61 	.word	0x695f6c61
    2338:	00632e6f 	.word	0x00632e6f
    233c:	682f2e2e 	.word	0x682f2e2e
    2340:	732f6c61 	.word	0x732f6c61
    2344:	682f6372 	.word	0x682f6372
    2348:	755f6c61 	.word	0x755f6c61
    234c:	74726173 	.word	0x74726173
    2350:	7973615f 	.word	0x7973615f
    2354:	632e636e 	.word	0x632e636e
    2358:	00000000 	.word	0x00000000
    235c:	682f2e2e 	.word	0x682f2e2e
    2360:	752f6c61 	.word	0x752f6c61
    2364:	736c6974 	.word	0x736c6974
    2368:	6372732f 	.word	0x6372732f
    236c:	6974752f 	.word	0x6974752f
    2370:	725f736c 	.word	0x725f736c
    2374:	62676e69 	.word	0x62676e69
    2378:	65666675 	.word	0x65666675
    237c:	00632e72 	.word	0x00632e72

00002380 <_map>:
    2380:	0000000f 0000000f 682f2e2e 652f6c70     ........../hpl/e
    2390:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    23a0:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    23b0:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
    23c0:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    23d0:	0000632e 656d6974 25203d20 736d2064     .c..time = %d ms
    23e0:	00000000 3d3d0a0d 3d3d3d3d 3d3d3d3d     ......==========
    23f0:	3d3d3d3d 0a0d3d3d 72617473 676e6974     ======..starting
    2400:	5f756d20 74726f70 7365745f 000a0d74      mu_port_test...
    2410:	656d6974 66656220 2065726f 00207369     time before is .
    2420:	00000a0d 706f6f6c 20676e69 20726f66     ....looping for 
    2430:	20352e32 6f636573 2e73646e 00002e2e     2.5 seconds.....
    2440:	656e6f64 7420202e 20656d69 65746661     done.  time afte
    2450:	73692072 00000020 74696177 20676e69     r is ...waiting 
    2460:	20352e32 6f636573 2073646e 20726f66     2.5 seconds for 
    2470:	20435452 6374616d 2e2e2e68 00000000     RTC match.......
    2480:	656e6f64 7420202e 20656d69 6e207369     done.  time is n
    2490:	0020776f 73616c66 676e6968 44454c20     ow .flashing LED
    24a0:	726f6620 352e3220 63657320 73646e6f      for 2.5 seconds
    24b0:	002e2e2e 74696177 20676e69 20726f66     ....waiting for 
    24c0:	74747562 70206e6f 73736572 79732820     button press (sy
    24d0:	7268636e 756f6e6f 2e2e2973 0000002e     nchronous)......
    24e0:	65636572 64657669 74756220 206e6f74     received button 
    24f0:	73657270 0a0d2e73 00000000 74696177     press.......wait
    2500:	20676e69 20726f66 74747562 70206e6f     ing for button p
    2510:	73736572 73612820 68636e79 6f6e6f72     ress (asynchrono
    2520:	2e297375 00002e2e 74696177 20676e69     us).....waiting 
    2530:	20726f66 6279656b 6472616f 706e6920     for keyboard inp
    2540:	28207475 636e7973 6e6f7268 2973756f     ut (synchronous)
    2550:	002e2e2e 65636572 64657669 63252720     ....received '%c
    2560:	000a0d27 74696177 20676e69 20726f66     '...waiting for 
    2570:	6279656b 6472616f 706e6920 28207475     keyboard input (
    2580:	6e797361 6f726863 73756f6e 2e2e2e29     asynchronous)...
    2590:	00000000 65656c73 676e6970 726f6620     ....sleeping for
    25a0:	352e3220 63657320 73646e6f 002e2e2e      2.5 seconds....
    25b0:	65656c73 676e6970 746e7520 62206c69     sleeping until b
    25c0:	6f747475 7270206e 2e737365 00002e2e     utton press.....
    25d0:	20646e65 6d20666f 6f705f75 745f7472     end of mu_port_t
    25e0:	0d747365 3d3d3d0a 3d3d3d3d 3d3d3d3d     est..===========
    25f0:	3d3d3d3d 000a0d3d                       =====...

000025f8 <__sf_fake_stderr>:
	...

00002618 <__sf_fake_stdin>:
	...

00002638 <__sf_fake_stdout>:
	...
    2658:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2668:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2678:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2688:	00006665                                ef..

0000268c <_init>:
    268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    268e:	46c0      	nop			; (mov r8, r8)
    2690:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2692:	bc08      	pop	{r3}
    2694:	469e      	mov	lr, r3
    2696:	4770      	bx	lr

00002698 <__init_array_start>:
    2698:	000000dd 	.word	0x000000dd

0000269c <_fini>:
    269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    26a2:	bc08      	pop	{r3}
    26a4:	469e      	mov	lr, r3
    26a6:	4770      	bx	lr

000026a8 <__fini_array_start>:
    26a8:	000000b5 	.word	0x000000b5
