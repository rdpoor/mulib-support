
mulib_port_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002708  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00002708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012c  20000064  0000276c  00020064  2**2
                  ALLOC
  3 .stack        00002000  20000190  00002898  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00028e0a  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003595  00000000  00000000  00048eef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ced3  00000000  00000000  0004c484  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bb8  00000000  00000000  00059357  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001158  00000000  00000000  00059f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a619  00000000  00000000  0005b067  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010573  00000000  00000000  00075680  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a940  00000000  00000000  00085bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000021d8  00000000  00000000  00110534  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 21 00 20 25 01 00 00 21 01 00 00 21 01 00 00     .!. %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      4c:	e9 0d 00 00 19 0b 00 00 21 01 00 00 21 01 00 00     ........!...!...
      5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      6c:	21 01 00 00 c5 0f 00 00 21 01 00 00 21 01 00 00     !.......!...!...
      7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      8c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	00002708 	.word	0x00002708

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	00002708 	.word	0x00002708
     10c:	00002708 	.word	0x00002708
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	0000033d 	.word	0x0000033d

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
     124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     126:	4a2a      	ldr	r2, [pc, #168]	; (1d0 <Reset_Handler+0xac>)
     128:	4b2a      	ldr	r3, [pc, #168]	; (1d4 <Reset_Handler+0xb0>)
     12a:	429a      	cmp	r2, r3
     12c:	d011      	beq.n	152 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     12e:	001a      	movs	r2, r3
     130:	4b29      	ldr	r3, [pc, #164]	; (1d8 <Reset_Handler+0xb4>)
     132:	429a      	cmp	r2, r3
     134:	d20d      	bcs.n	152 <Reset_Handler+0x2e>
     136:	4a29      	ldr	r2, [pc, #164]	; (1dc <Reset_Handler+0xb8>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xb0>)
     146:	4922      	ldr	r1, [pc, #136]	; (1d0 <Reset_Handler+0xac>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     152:	4a23      	ldr	r2, [pc, #140]	; (1e0 <Reset_Handler+0xbc>)
     154:	4b23      	ldr	r3, [pc, #140]	; (1e4 <Reset_Handler+0xc0>)
     156:	429a      	cmp	r2, r3
     158:	d20a      	bcs.n	170 <Reset_Handler+0x4c>
     15a:	43d3      	mvns	r3, r2
     15c:	4921      	ldr	r1, [pc, #132]	; (1e4 <Reset_Handler+0xc0>)
     15e:	185b      	adds	r3, r3, r1
     160:	2103      	movs	r1, #3
     162:	438b      	bics	r3, r1
     164:	3304      	adds	r3, #4
     166:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     168:	2100      	movs	r1, #0
     16a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     16c:	4293      	cmp	r3, r2
     16e:	d1fc      	bne.n	16a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     170:	4a1d      	ldr	r2, [pc, #116]	; (1e8 <Reset_Handler+0xc4>)
     172:	21ff      	movs	r1, #255	; 0xff
     174:	4b1d      	ldr	r3, [pc, #116]	; (1ec <Reset_Handler+0xc8>)
     176:	438b      	bics	r3, r1
     178:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17a:	39fd      	subs	r1, #253	; 0xfd
     17c:	2390      	movs	r3, #144	; 0x90
     17e:	005b      	lsls	r3, r3, #1
     180:	4a1b      	ldr	r2, [pc, #108]	; (1f0 <Reset_Handler+0xcc>)
     182:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     184:	4a1b      	ldr	r2, [pc, #108]	; (1f4 <Reset_Handler+0xd0>)
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	2503      	movs	r5, #3
     18a:	43ab      	bics	r3, r5
     18c:	2402      	movs	r4, #2
     18e:	4323      	orrs	r3, r4
     190:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     192:	78d3      	ldrb	r3, [r2, #3]
     194:	270c      	movs	r7, #12
     196:	43bb      	bics	r3, r7
     198:	2608      	movs	r6, #8
     19a:	4333      	orrs	r3, r6
     19c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     19e:	4b16      	ldr	r3, [pc, #88]	; (1f8 <Reset_Handler+0xd4>)
     1a0:	7b98      	ldrb	r0, [r3, #14]
     1a2:	2230      	movs	r2, #48	; 0x30
     1a4:	4390      	bics	r0, r2
     1a6:	2220      	movs	r2, #32
     1a8:	4310      	orrs	r0, r2
     1aa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1ac:	7b99      	ldrb	r1, [r3, #14]
     1ae:	43b9      	bics	r1, r7
     1b0:	4331      	orrs	r1, r6
     1b2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b4:	7b9a      	ldrb	r2, [r3, #14]
     1b6:	43aa      	bics	r2, r5
     1b8:	4322      	orrs	r2, r4
     1ba:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1bc:	4a0f      	ldr	r2, [pc, #60]	; (1fc <Reset_Handler+0xd8>)
     1be:	6853      	ldr	r3, [r2, #4]
     1c0:	2180      	movs	r1, #128	; 0x80
     1c2:	430b      	orrs	r3, r1
     1c4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1c6:	4b0e      	ldr	r3, [pc, #56]	; (200 <Reset_Handler+0xdc>)
     1c8:	4798      	blx	r3
        main();
     1ca:	4b0e      	ldr	r3, [pc, #56]	; (204 <Reset_Handler+0xe0>)
     1cc:	4798      	blx	r3
     1ce:	e7fe      	b.n	1ce <Reset_Handler+0xaa>
     1d0:	00002708 	.word	0x00002708
     1d4:	20000000 	.word	0x20000000
     1d8:	20000064 	.word	0x20000064
     1dc:	20000004 	.word	0x20000004
     1e0:	20000064 	.word	0x20000064
     1e4:	20000190 	.word	0x20000190
     1e8:	e000ed00 	.word	0xe000ed00
     1ec:	00000000 	.word	0x00000000
     1f0:	41007000 	.word	0x41007000
     1f4:	41005000 	.word	0x41005000
     1f8:	41004800 	.word	0x41004800
     1fc:	41004000 	.word	0x41004000
     200:	00001aa5 	.word	0x00001aa5
     204:	00001085 	.word	0x00001085

00000208 <EXTERNAL_IRQ_0_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct calendar_descriptor CALENDAR_0;

void EXTERNAL_IRQ_0_init(void)
{
     208:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     20a:	4a10      	ldr	r2, [pc, #64]	; (24c <EXTERNAL_IRQ_0_init+0x44>)
     20c:	4b10      	ldr	r3, [pc, #64]	; (250 <EXTERNAL_IRQ_0_init+0x48>)
     20e:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     210:	22c0      	movs	r2, #192	; 0xc0
     212:	05d2      	lsls	r2, r2, #23
     214:	2080      	movs	r0, #128	; 0x80
     216:	0200      	lsls	r0, r0, #8
     218:	6050      	str	r0, [r2, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     21a:	4b0e      	ldr	r3, [pc, #56]	; (254 <EXTERNAL_IRQ_0_init+0x4c>)
     21c:	490e      	ldr	r1, [pc, #56]	; (258 <EXTERNAL_IRQ_0_init+0x50>)
     21e:	6299      	str	r1, [r3, #40]	; 0x28
     220:	490e      	ldr	r1, [pc, #56]	; (25c <EXTERNAL_IRQ_0_init+0x54>)
     222:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     224:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     226:	214f      	movs	r1, #79	; 0x4f
     228:	5c5c      	ldrb	r4, [r3, r1]
     22a:	2504      	movs	r5, #4
     22c:	432c      	orrs	r4, r5
     22e:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     230:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     232:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     234:	2001      	movs	r0, #1
     236:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     238:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     23c:	3918      	subs	r1, #24
     23e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     240:	300e      	adds	r0, #14
     242:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     244:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(USER_BUTTON_AL, PINMUX_PA15A_EIC_EXTINT15);

	ext_irq_init();
     246:	4b06      	ldr	r3, [pc, #24]	; (260 <EXTERNAL_IRQ_0_init+0x58>)
     248:	4798      	blx	r3
}
     24a:	bd70      	pop	{r4, r5, r6, pc}
     24c:	00004305 	.word	0x00004305
     250:	40000c00 	.word	0x40000c00
     254:	41004400 	.word	0x41004400
     258:	40028000 	.word	0x40028000
     25c:	c0020000 	.word	0xc0020000
     260:	00000455 	.word	0x00000455

00000264 <USART_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     264:	4a04      	ldr	r2, [pc, #16]	; (278 <USART_0_CLOCK_init+0x14>)
     266:	6a13      	ldr	r3, [r2, #32]
     268:	2120      	movs	r1, #32
     26a:	430b      	orrs	r3, r1
     26c:	6213      	str	r3, [r2, #32]
     26e:	4a03      	ldr	r2, [pc, #12]	; (27c <USART_0_CLOCK_init+0x18>)
     270:	4b03      	ldr	r3, [pc, #12]	; (280 <USART_0_CLOCK_init+0x1c>)
     272:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     274:	4770      	bx	lr
     276:	46c0      	nop			; (mov r8, r8)
     278:	40000400 	.word	0x40000400
     27c:	00004017 	.word	0x00004017
     280:	40000c00 	.word	0x40000c00

00000284 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     284:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     286:	4b0e      	ldr	r3, [pc, #56]	; (2c0 <USART_0_PORT_init+0x3c>)
     288:	2256      	movs	r2, #86	; 0x56
     28a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     28c:	2501      	movs	r5, #1
     28e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     290:	2401      	movs	r4, #1
     292:	4321      	orrs	r1, r4
     294:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     296:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     298:	203b      	movs	r0, #59	; 0x3b
     29a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     29c:	3a47      	subs	r2, #71	; 0x47
     29e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     2a0:	3a0d      	subs	r2, #13
     2a2:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2a4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2a6:	2157      	movs	r1, #87	; 0x57
     2a8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2aa:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2ac:	4322      	orrs	r2, r4
     2ae:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2b0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2b2:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2b4:	3948      	subs	r1, #72	; 0x48
     2b6:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2b8:	3111      	adds	r1, #17
     2ba:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2bc:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     2be:	bd30      	pop	{r4, r5, pc}
     2c0:	41004400 	.word	0x41004400

000002c4 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     2c4:	b510      	push	{r4, lr}
     2c6:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     2c8:	4b06      	ldr	r3, [pc, #24]	; (2e4 <USART_0_init+0x20>)
     2ca:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     2cc:	2300      	movs	r3, #0
     2ce:	9300      	str	r3, [sp, #0]
     2d0:	3310      	adds	r3, #16
     2d2:	4a05      	ldr	r2, [pc, #20]	; (2e8 <USART_0_init+0x24>)
     2d4:	4905      	ldr	r1, [pc, #20]	; (2ec <USART_0_init+0x28>)
     2d6:	4806      	ldr	r0, [pc, #24]	; (2f0 <USART_0_init+0x2c>)
     2d8:	4c06      	ldr	r4, [pc, #24]	; (2f4 <USART_0_init+0x30>)
     2da:	47a0      	blx	r4
	USART_0_PORT_init();
     2dc:	4b06      	ldr	r3, [pc, #24]	; (2f8 <USART_0_init+0x34>)
     2de:	4798      	blx	r3
}
     2e0:	b002      	add	sp, #8
     2e2:	bd10      	pop	{r4, pc}
     2e4:	00000265 	.word	0x00000265
     2e8:	20000080 	.word	0x20000080
     2ec:	42001400 	.word	0x42001400
     2f0:	2000013c 	.word	0x2000013c
     2f4:	0000070d 	.word	0x0000070d
     2f8:	00000285 	.word	0x00000285

000002fc <CALENDAR_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     2fc:	4a04      	ldr	r2, [pc, #16]	; (310 <CALENDAR_0_CLOCK_init+0x14>)
     2fe:	6993      	ldr	r3, [r2, #24]
     300:	2120      	movs	r1, #32
     302:	430b      	orrs	r3, r1
     304:	6193      	str	r3, [r2, #24]
     306:	4a03      	ldr	r2, [pc, #12]	; (314 <CALENDAR_0_CLOCK_init+0x18>)
     308:	4b03      	ldr	r3, [pc, #12]	; (318 <CALENDAR_0_CLOCK_init+0x1c>)
     30a:	805a      	strh	r2, [r3, #2]

void CALENDAR_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
     30c:	4770      	bx	lr
     30e:	46c0      	nop			; (mov r8, r8)
     310:	40000400 	.word	0x40000400
     314:	00004304 	.word	0x00004304
     318:	40000c00 	.word	0x40000c00

0000031c <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     31c:	b510      	push	{r4, lr}
	CALENDAR_0_CLOCK_init();
     31e:	4b03      	ldr	r3, [pc, #12]	; (32c <CALENDAR_0_init+0x10>)
     320:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     322:	4903      	ldr	r1, [pc, #12]	; (330 <CALENDAR_0_init+0x14>)
     324:	4803      	ldr	r0, [pc, #12]	; (334 <CALENDAR_0_init+0x18>)
     326:	4b04      	ldr	r3, [pc, #16]	; (338 <CALENDAR_0_init+0x1c>)
     328:	4798      	blx	r3
}
     32a:	bd10      	pop	{r4, pc}
     32c:	000002fd 	.word	0x000002fd
     330:	40001400 	.word	0x40001400
     334:	20000120 	.word	0x20000120
     338:	000003a9 	.word	0x000003a9

0000033c <system_init>:

void system_init(void)
{
     33c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     33e:	4b0d      	ldr	r3, [pc, #52]	; (374 <system_init+0x38>)
     340:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     342:	23c0      	movs	r3, #192	; 0xc0
     344:	05db      	lsls	r3, r3, #23
     346:	2280      	movs	r2, #128	; 0x80
     348:	05d2      	lsls	r2, r2, #23
     34a:	2198      	movs	r1, #152	; 0x98
     34c:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     34e:	3910      	subs	r1, #16
     350:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     352:	4b09      	ldr	r3, [pc, #36]	; (378 <system_init+0x3c>)
     354:	3120      	adds	r1, #32
     356:	505a      	str	r2, [r3, r1]
     358:	4a08      	ldr	r2, [pc, #32]	; (37c <system_init+0x40>)
     35a:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     35c:	3136      	adds	r1, #54	; 0x36
     35e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     360:	2001      	movs	r0, #1
     362:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     364:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(USER_LED_AL, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(USER_LED_AL, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     366:	4b06      	ldr	r3, [pc, #24]	; (380 <system_init+0x44>)
     368:	4798      	blx	r3

	USART_0_init();
     36a:	4b06      	ldr	r3, [pc, #24]	; (384 <system_init+0x48>)
     36c:	4798      	blx	r3

	CALENDAR_0_init();
     36e:	4b06      	ldr	r3, [pc, #24]	; (388 <system_init+0x4c>)
     370:	4798      	blx	r3
}
     372:	bd10      	pop	{r4, pc}
     374:	00000a25 	.word	0x00000a25
     378:	41004400 	.word	0x41004400
     37c:	c0004000 	.word	0xc0004000
     380:	00000209 	.word	0x00000209
     384:	000002c5 	.word	0x000002c5
     388:	0000031d 	.word	0x0000031d

0000038c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     38c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     390:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     392:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     394:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     398:	4770      	bx	lr

0000039a <atomic_leave_critical>:
     39a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     39e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     3a0:	f383 8810 	msr	PRIMASK, r3
}
     3a4:	4770      	bx	lr
	...

000003a8 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
     3a8:	b570      	push	{r4, r5, r6, lr}
     3aa:	0004      	movs	r4, r0
     3ac:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
     3ae:	1e43      	subs	r3, r0, #1
     3b0:	4198      	sbcs	r0, r3
     3b2:	b2c0      	uxtb	r0, r0
     3b4:	22e0      	movs	r2, #224	; 0xe0
     3b6:	0052      	lsls	r2, r2, #1
     3b8:	4909      	ldr	r1, [pc, #36]	; (3e0 <calendar_init+0x38>)
     3ba:	4b0a      	ldr	r3, [pc, #40]	; (3e4 <calendar_init+0x3c>)
     3bc:	4798      	blx	r3

	if (calendar->device.hw == hw) {
     3be:	6823      	ldr	r3, [r4, #0]
     3c0:	42ab      	cmp	r3, r5
     3c2:	d008      	beq.n	3d6 <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
     3c4:	2b00      	cmp	r3, #0
     3c6:	d108      	bne.n	3da <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
     3c8:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
     3ca:	0020      	movs	r0, r4
     3cc:	4b06      	ldr	r3, [pc, #24]	; (3e8 <calendar_init+0x40>)
     3ce:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
     3d0:	4b06      	ldr	r3, [pc, #24]	; (3ec <calendar_init+0x44>)
     3d2:	6163      	str	r3, [r4, #20]

	return ret;
}
     3d4:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
     3d6:	2000      	movs	r0, #0
     3d8:	e7fc      	b.n	3d4 <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
     3da:	2012      	movs	r0, #18
     3dc:	4240      	negs	r0, r0
     3de:	e7f9      	b.n	3d4 <calendar_init+0x2c>
     3e0:	00002368 	.word	0x00002368
     3e4:	000008f1 	.word	0x000008f1
     3e8:	00000cf5 	.word	0x00000cf5
     3ec:	000007b2 	.word	0x000007b2

000003f0 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
     3f0:	b510      	push	{r4, lr}
     3f2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	ASSERT(calendar);
     3f4:	1e43      	subs	r3, r0, #1
     3f6:	4198      	sbcs	r0, r3
     3f8:	b2c0      	uxtb	r0, r0
     3fa:	22e6      	movs	r2, #230	; 0xe6
     3fc:	32ff      	adds	r2, #255	; 0xff
     3fe:	4904      	ldr	r1, [pc, #16]	; (410 <calendar_enable+0x20>)
     400:	4b04      	ldr	r3, [pc, #16]	; (414 <calendar_enable+0x24>)
     402:	4798      	blx	r3

	_calendar_enable(&calendar->device);
     404:	0020      	movs	r0, r4
     406:	4b04      	ldr	r3, [pc, #16]	; (418 <calendar_enable+0x28>)
     408:	4798      	blx	r3

	return ERR_NONE;
}
     40a:	2000      	movs	r0, #0
     40c:	bd10      	pop	{r4, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	00002368 	.word	0x00002368
     414:	000008f1 	.word	0x000008f1
     418:	00000d79 	.word	0x00000d79

0000041c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     41c:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     41e:	4b0c      	ldr	r3, [pc, #48]	; (450 <process_ext_irq+0x34>)
     420:	685c      	ldr	r4, [r3, #4]
     422:	42a0      	cmp	r0, r4
     424:	d00e      	beq.n	444 <process_ext_irq+0x28>
     426:	2201      	movs	r2, #1
     428:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     42a:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     42c:	25ff      	movs	r5, #255	; 0xff
     42e:	e003      	b.n	438 <process_ext_irq+0x1c>
     430:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     432:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     434:	085b      	lsrs	r3, r3, #1
     436:	d10a      	bne.n	44e <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     438:	42a0      	cmp	r0, r4
     43a:	d9f9      	bls.n	430 <process_ext_irq+0x14>
	while (upper >= lower) {
     43c:	2a00      	cmp	r2, #0
     43e:	d006      	beq.n	44e <process_ext_irq+0x32>
			lower = middle + 1;
     440:	0031      	movs	r1, r6
     442:	e7f6      	b.n	432 <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     444:	4b02      	ldr	r3, [pc, #8]	; (450 <process_ext_irq+0x34>)
     446:	681b      	ldr	r3, [r3, #0]
     448:	2b00      	cmp	r3, #0
     44a:	d000      	beq.n	44e <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     44c:	4798      	blx	r3
		}
	}
}
     44e:	bd70      	pop	{r4, r5, r6, pc}
     450:	20000090 	.word	0x20000090

00000454 <ext_irq_init>:
{
     454:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     456:	4b05      	ldr	r3, [pc, #20]	; (46c <ext_irq_init+0x18>)
     458:	2201      	movs	r2, #1
     45a:	4252      	negs	r2, r2
     45c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     45e:	2200      	movs	r2, #0
     460:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     462:	4803      	ldr	r0, [pc, #12]	; (470 <ext_irq_init+0x1c>)
     464:	4b03      	ldr	r3, [pc, #12]	; (474 <ext_irq_init+0x20>)
     466:	4798      	blx	r3
}
     468:	bd10      	pop	{r4, pc}
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	20000090 	.word	0x20000090
     470:	0000041d 	.word	0x0000041d
     474:	00000a55 	.word	0x00000a55

00000478 <ext_irq_register>:
{
     478:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     47a:	4b0f      	ldr	r3, [pc, #60]	; (4b8 <ext_irq_register+0x40>)
     47c:	685b      	ldr	r3, [r3, #4]
     47e:	4298      	cmp	r0, r3
     480:	d008      	beq.n	494 <ext_irq_register+0x1c>
	if (NULL == cb) {
     482:	2900      	cmp	r1, #0
     484:	d014      	beq.n	4b0 <ext_irq_register+0x38>
			if (NULL == ext_irqs[i].cb) {
     486:	4b0c      	ldr	r3, [pc, #48]	; (4b8 <ext_irq_register+0x40>)
     488:	681b      	ldr	r3, [r3, #0]
     48a:	2b00      	cmp	r3, #0
     48c:	d009      	beq.n	4a2 <ext_irq_register+0x2a>
		return ERR_INVALID_ARG;
     48e:	200d      	movs	r0, #13
     490:	4240      	negs	r0, r0
     492:	e00c      	b.n	4ae <ext_irq_register+0x36>
			ext_irqs[i].cb = cb;
     494:	4b08      	ldr	r3, [pc, #32]	; (4b8 <ext_irq_register+0x40>)
     496:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     498:	2900      	cmp	r1, #0
     49a:	d105      	bne.n	4a8 <ext_irq_register+0x30>
		return _ext_irq_enable(pin, false);
     49c:	4b07      	ldr	r3, [pc, #28]	; (4bc <ext_irq_register+0x44>)
     49e:	4798      	blx	r3
     4a0:	e005      	b.n	4ae <ext_irq_register+0x36>
				ext_irqs[i].cb  = cb;
     4a2:	4b05      	ldr	r3, [pc, #20]	; (4b8 <ext_irq_register+0x40>)
     4a4:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     4a6:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     4a8:	2101      	movs	r1, #1
     4aa:	4b04      	ldr	r3, [pc, #16]	; (4bc <ext_irq_register+0x44>)
     4ac:	4798      	blx	r3
}
     4ae:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     4b0:	200d      	movs	r0, #13
     4b2:	4240      	negs	r0, r0
     4b4:	e7fb      	b.n	4ae <ext_irq_register+0x36>
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	20000090 	.word	0x20000090
     4bc:	00000aed 	.word	0x00000aed

000004c0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4c0:	b570      	push	{r4, r5, r6, lr}
     4c2:	0006      	movs	r6, r0
     4c4:	000c      	movs	r4, r1
     4c6:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     4c8:	2800      	cmp	r0, #0
     4ca:	d00d      	beq.n	4e8 <io_write+0x28>
     4cc:	0008      	movs	r0, r1
     4ce:	1e43      	subs	r3, r0, #1
     4d0:	4198      	sbcs	r0, r3
     4d2:	b2c0      	uxtb	r0, r0
     4d4:	2234      	movs	r2, #52	; 0x34
     4d6:	4905      	ldr	r1, [pc, #20]	; (4ec <io_write+0x2c>)
     4d8:	4b05      	ldr	r3, [pc, #20]	; (4f0 <io_write+0x30>)
     4da:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     4dc:	6833      	ldr	r3, [r6, #0]
     4de:	002a      	movs	r2, r5
     4e0:	0021      	movs	r1, r4
     4e2:	0030      	movs	r0, r6
     4e4:	4798      	blx	r3
}
     4e6:	bd70      	pop	{r4, r5, r6, pc}
     4e8:	2000      	movs	r0, #0
     4ea:	e7f3      	b.n	4d4 <io_write+0x14>
     4ec:	00002384 	.word	0x00002384
     4f0:	000008f1 	.word	0x000008f1

000004f4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     4f4:	b570      	push	{r4, r5, r6, lr}
     4f6:	0006      	movs	r6, r0
     4f8:	000c      	movs	r4, r1
     4fa:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     4fc:	2800      	cmp	r0, #0
     4fe:	d00d      	beq.n	51c <io_read+0x28>
     500:	0008      	movs	r0, r1
     502:	1e43      	subs	r3, r0, #1
     504:	4198      	sbcs	r0, r3
     506:	b2c0      	uxtb	r0, r0
     508:	223d      	movs	r2, #61	; 0x3d
     50a:	4905      	ldr	r1, [pc, #20]	; (520 <io_read+0x2c>)
     50c:	4b05      	ldr	r3, [pc, #20]	; (524 <io_read+0x30>)
     50e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     510:	6873      	ldr	r3, [r6, #4]
     512:	002a      	movs	r2, r5
     514:	0021      	movs	r1, r4
     516:	0030      	movs	r0, r6
     518:	4798      	blx	r3
}
     51a:	bd70      	pop	{r4, r5, r6, pc}
     51c:	2000      	movs	r0, #0
     51e:	e7f3      	b.n	508 <io_read+0x14>
     520:	00002384 	.word	0x00002384
     524:	000008f1 	.word	0x000008f1

00000528 <sleep>:
 * \retval -1 The requested sleep mode was invalid or not available
 * \retval  0 The operation completed successfully, returned after leaving the
 *            sleep
 */
int sleep(const uint8_t mode)
{
     528:	b510      	push	{r4, lr}
	if (ERR_NONE != _set_sleep_mode(mode))
     52a:	4b05      	ldr	r3, [pc, #20]	; (540 <sleep+0x18>)
     52c:	4798      	blx	r3
     52e:	2800      	cmp	r0, #0
     530:	d103      	bne.n	53a <sleep+0x12>
		return ERR_INVALID_ARG;

	_go_to_sleep();
     532:	4b04      	ldr	r3, [pc, #16]	; (544 <sleep+0x1c>)
     534:	4798      	blx	r3

	return ERR_NONE;
     536:	2000      	movs	r0, #0
}
     538:	bd10      	pop	{r4, pc}
		return ERR_INVALID_ARG;
     53a:	200d      	movs	r0, #13
     53c:	4240      	negs	r0, r0
     53e:	e7fb      	b.n	538 <sleep+0x10>
     540:	00000c3d 	.word	0x00000c3d
     544:	00000a1d 	.word	0x00000a1d

00000548 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     548:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     54a:	3808      	subs	r0, #8

	descr->stat = 0;
     54c:	2300      	movs	r3, #0
     54e:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     550:	6a43      	ldr	r3, [r0, #36]	; 0x24
     552:	2b00      	cmp	r3, #0
     554:	d000      	beq.n	558 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     556:	4798      	blx	r3
	}
}
     558:	bd10      	pop	{r4, pc}

0000055a <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     55a:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     55c:	3808      	subs	r0, #8

	descr->stat = 0;
     55e:	2300      	movs	r3, #0
     560:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     562:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     564:	2b00      	cmp	r3, #0
     566:	d000      	beq.n	56a <usart_error+0x10>
		descr->usart_cb.error(descr);
     568:	4798      	blx	r3
	}
}
     56a:	bd10      	pop	{r4, pc}

0000056c <usart_fill_rx_buffer>:
{
     56c:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     56e:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     570:	302c      	adds	r0, #44	; 0x2c
     572:	4b04      	ldr	r3, [pc, #16]	; (584 <usart_fill_rx_buffer+0x18>)
     574:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     576:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     578:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     57a:	2b00      	cmp	r3, #0
     57c:	d001      	beq.n	582 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     57e:	0020      	movs	r0, r4
     580:	4798      	blx	r3
}
     582:	bd10      	pop	{r4, pc}
     584:	00000995 	.word	0x00000995

00000588 <usart_async_write>:
{
     588:	b570      	push	{r4, r5, r6, lr}
     58a:	0004      	movs	r4, r0
     58c:	000e      	movs	r6, r1
     58e:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     590:	2800      	cmp	r0, #0
     592:	d01d      	beq.n	5d0 <usart_async_write+0x48>
     594:	2900      	cmp	r1, #0
     596:	d01d      	beq.n	5d4 <usart_async_write+0x4c>
     598:	0010      	movs	r0, r2
     59a:	1e43      	subs	r3, r0, #1
     59c:	4198      	sbcs	r0, r3
     59e:	223c      	movs	r2, #60	; 0x3c
     5a0:	32ff      	adds	r2, #255	; 0xff
     5a2:	490f      	ldr	r1, [pc, #60]	; (5e0 <usart_async_write+0x58>)
     5a4:	4b0f      	ldr	r3, [pc, #60]	; (5e4 <usart_async_write+0x5c>)
     5a6:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     5a8:	2344      	movs	r3, #68	; 0x44
     5aa:	5ae2      	ldrh	r2, [r4, r3]
     5ac:	3308      	adds	r3, #8
     5ae:	5ae3      	ldrh	r3, [r4, r3]
     5b0:	429a      	cmp	r2, r3
     5b2:	d111      	bne.n	5d8 <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
     5b4:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     5b6:	234c      	movs	r3, #76	; 0x4c
     5b8:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     5ba:	2200      	movs	r2, #0
     5bc:	3b08      	subs	r3, #8
     5be:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     5c0:	3b43      	subs	r3, #67	; 0x43
     5c2:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     5c4:	0020      	movs	r0, r4
     5c6:	3008      	adds	r0, #8
     5c8:	4b07      	ldr	r3, [pc, #28]	; (5e8 <usart_async_write+0x60>)
     5ca:	4798      	blx	r3
	return (int32_t)length;
     5cc:	0028      	movs	r0, r5
}
     5ce:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     5d0:	2000      	movs	r0, #0
     5d2:	e7e4      	b.n	59e <usart_async_write+0x16>
     5d4:	2000      	movs	r0, #0
     5d6:	e7e2      	b.n	59e <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     5d8:	201c      	movs	r0, #28
     5da:	4240      	negs	r0, r0
     5dc:	e7f7      	b.n	5ce <usart_async_write+0x46>
     5de:	46c0      	nop			; (mov r8, r8)
     5e0:	00002398 	.word	0x00002398
     5e4:	000008f1 	.word	0x000008f1
     5e8:	00000f41 	.word	0x00000f41

000005ec <usart_process_byte_sent>:
{
     5ec:	b570      	push	{r4, r5, r6, lr}
     5ee:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     5f0:	0001      	movs	r1, r0
     5f2:	3908      	subs	r1, #8
     5f4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     5f6:	224c      	movs	r2, #76	; 0x4c
     5f8:	5a8a      	ldrh	r2, [r1, r2]
     5fa:	429a      	cmp	r2, r3
     5fc:	d00c      	beq.n	618 <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     5fe:	000a      	movs	r2, r1
     600:	6c89      	ldr	r1, [r1, #72]	; 0x48
     602:	1c5d      	adds	r5, r3, #1
     604:	2044      	movs	r0, #68	; 0x44
     606:	5215      	strh	r5, [r2, r0]
     608:	5cc9      	ldrb	r1, [r1, r3]
     60a:	0020      	movs	r0, r4
     60c:	4b04      	ldr	r3, [pc, #16]	; (620 <usart_process_byte_sent+0x34>)
     60e:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     610:	0020      	movs	r0, r4
     612:	4b04      	ldr	r3, [pc, #16]	; (624 <usart_process_byte_sent+0x38>)
     614:	4798      	blx	r3
}
     616:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     618:	4b03      	ldr	r3, [pc, #12]	; (628 <usart_process_byte_sent+0x3c>)
     61a:	4798      	blx	r3
}
     61c:	e7fb      	b.n	616 <usart_process_byte_sent+0x2a>
     61e:	46c0      	nop			; (mov r8, r8)
     620:	00000f39 	.word	0x00000f39
     624:	00000f41 	.word	0x00000f41
     628:	00000f49 	.word	0x00000f49

0000062c <usart_async_read>:
{
     62c:	b5f0      	push	{r4, r5, r6, r7, lr}
     62e:	46ce      	mov	lr, r9
     630:	4647      	mov	r7, r8
     632:	b580      	push	{r7, lr}
     634:	b085      	sub	sp, #20
     636:	0005      	movs	r5, r0
     638:	000e      	movs	r6, r1
     63a:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
     63c:	2800      	cmp	r0, #0
     63e:	d015      	beq.n	66c <usart_async_read+0x40>
     640:	2900      	cmp	r1, #0
     642:	d013      	beq.n	66c <usart_async_read+0x40>
     644:	2a00      	cmp	r2, #0
     646:	d12a      	bne.n	69e <usart_async_read+0x72>
     648:	22ac      	movs	r2, #172	; 0xac
     64a:	0052      	lsls	r2, r2, #1
     64c:	4929      	ldr	r1, [pc, #164]	; (6f4 <usart_async_read+0xc8>)
     64e:	2000      	movs	r0, #0
     650:	4b29      	ldr	r3, [pc, #164]	; (6f8 <usart_async_read+0xcc>)
     652:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     654:	a803      	add	r0, sp, #12
     656:	4b29      	ldr	r3, [pc, #164]	; (6fc <usart_async_read+0xd0>)
     658:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     65a:	0028      	movs	r0, r5
     65c:	3034      	adds	r0, #52	; 0x34
     65e:	4b28      	ldr	r3, [pc, #160]	; (700 <usart_async_read+0xd4>)
     660:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     662:	a803      	add	r0, sp, #12
     664:	4b27      	ldr	r3, [pc, #156]	; (704 <usart_async_read+0xd8>)
     666:	4798      	blx	r3
	uint16_t                       was_read = 0;
     668:	2500      	movs	r5, #0
	return (int32_t)was_read;
     66a:	e03c      	b.n	6e6 <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     66c:	22ac      	movs	r2, #172	; 0xac
     66e:	0052      	lsls	r2, r2, #1
     670:	4920      	ldr	r1, [pc, #128]	; (6f4 <usart_async_read+0xc8>)
     672:	2000      	movs	r0, #0
     674:	4b20      	ldr	r3, [pc, #128]	; (6f8 <usart_async_read+0xcc>)
     676:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     678:	a803      	add	r0, sp, #12
     67a:	4b20      	ldr	r3, [pc, #128]	; (6fc <usart_async_read+0xd0>)
     67c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     67e:	3534      	adds	r5, #52	; 0x34
     680:	0028      	movs	r0, r5
     682:	9501      	str	r5, [sp, #4]
     684:	4b1e      	ldr	r3, [pc, #120]	; (700 <usart_async_read+0xd4>)
     686:	4798      	blx	r3
     688:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     68a:	a803      	add	r0, sp, #12
     68c:	4b1d      	ldr	r3, [pc, #116]	; (704 <usart_async_read+0xd8>)
     68e:	4798      	blx	r3
	uint16_t                       was_read = 0;
     690:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     692:	4643      	mov	r3, r8
     694:	2b00      	cmp	r3, #0
     696:	d026      	beq.n	6e6 <usart_async_read+0xba>
     698:	2f00      	cmp	r7, #0
     69a:	d116      	bne.n	6ca <usart_async_read+0x9e>
     69c:	e023      	b.n	6e6 <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     69e:	22ac      	movs	r2, #172	; 0xac
     6a0:	0052      	lsls	r2, r2, #1
     6a2:	4914      	ldr	r1, [pc, #80]	; (6f4 <usart_async_read+0xc8>)
     6a4:	2001      	movs	r0, #1
     6a6:	4b14      	ldr	r3, [pc, #80]	; (6f8 <usart_async_read+0xcc>)
     6a8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     6aa:	a803      	add	r0, sp, #12
     6ac:	4b13      	ldr	r3, [pc, #76]	; (6fc <usart_async_read+0xd0>)
     6ae:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     6b0:	3534      	adds	r5, #52	; 0x34
     6b2:	0028      	movs	r0, r5
     6b4:	9501      	str	r5, [sp, #4]
     6b6:	4b12      	ldr	r3, [pc, #72]	; (700 <usart_async_read+0xd4>)
     6b8:	4798      	blx	r3
     6ba:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     6bc:	a803      	add	r0, sp, #12
     6be:	4b11      	ldr	r3, [pc, #68]	; (704 <usart_async_read+0xd8>)
     6c0:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     6c2:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
     6c4:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     6c6:	2b00      	cmp	r3, #0
     6c8:	d00d      	beq.n	6e6 <usart_async_read+0xba>
{
     6ca:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     6cc:	4b0e      	ldr	r3, [pc, #56]	; (708 <usart_async_read+0xdc>)
     6ce:	4699      	mov	r9, r3
     6d0:	1c65      	adds	r5, r4, #1
     6d2:	b2ad      	uxth	r5, r5
     6d4:	1931      	adds	r1, r6, r4
     6d6:	9801      	ldr	r0, [sp, #4]
     6d8:	47c8      	blx	r9
     6da:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     6dc:	4544      	cmp	r4, r8
     6de:	d202      	bcs.n	6e6 <usart_async_read+0xba>
     6e0:	b2a3      	uxth	r3, r4
     6e2:	429f      	cmp	r7, r3
     6e4:	d8f4      	bhi.n	6d0 <usart_async_read+0xa4>
}
     6e6:	0028      	movs	r0, r5
     6e8:	b005      	add	sp, #20
     6ea:	bc0c      	pop	{r2, r3}
     6ec:	4690      	mov	r8, r2
     6ee:	4699      	mov	r9, r3
     6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	00002398 	.word	0x00002398
     6f8:	000008f1 	.word	0x000008f1
     6fc:	0000038d 	.word	0x0000038d
     700:	000009d5 	.word	0x000009d5
     704:	0000039b 	.word	0x0000039b
     708:	0000094d 	.word	0x0000094d

0000070c <usart_async_init>:
{
     70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     70e:	0004      	movs	r4, r0
     710:	000d      	movs	r5, r1
     712:	0016      	movs	r6, r2
     714:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     716:	2800      	cmp	r0, #0
     718:	d026      	beq.n	768 <usart_async_init+0x5c>
     71a:	2900      	cmp	r1, #0
     71c:	d026      	beq.n	76c <usart_async_init+0x60>
     71e:	2a00      	cmp	r2, #0
     720:	d026      	beq.n	770 <usart_async_init+0x64>
     722:	0018      	movs	r0, r3
     724:	1e43      	subs	r3, r0, #1
     726:	4198      	sbcs	r0, r3
     728:	223a      	movs	r2, #58	; 0x3a
     72a:	4914      	ldr	r1, [pc, #80]	; (77c <usart_async_init+0x70>)
     72c:	4b14      	ldr	r3, [pc, #80]	; (780 <usart_async_init+0x74>)
     72e:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     730:	0020      	movs	r0, r4
     732:	3034      	adds	r0, #52	; 0x34
     734:	003a      	movs	r2, r7
     736:	0031      	movs	r1, r6
     738:	4b12      	ldr	r3, [pc, #72]	; (784 <usart_async_init+0x78>)
     73a:	4798      	blx	r3
     73c:	2800      	cmp	r0, #0
     73e:	d119      	bne.n	774 <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
     740:	0020      	movs	r0, r4
     742:	3008      	adds	r0, #8
     744:	0029      	movs	r1, r5
     746:	4b10      	ldr	r3, [pc, #64]	; (788 <usart_async_init+0x7c>)
     748:	4798      	blx	r3
	if (init_status) {
     74a:	2800      	cmp	r0, #0
     74c:	d10b      	bne.n	766 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     74e:	4b0f      	ldr	r3, [pc, #60]	; (78c <usart_async_init+0x80>)
     750:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     752:	4b0f      	ldr	r3, [pc, #60]	; (790 <usart_async_init+0x84>)
     754:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     756:	4b0f      	ldr	r3, [pc, #60]	; (794 <usart_async_init+0x88>)
     758:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     75a:	4b0f      	ldr	r3, [pc, #60]	; (798 <usart_async_init+0x8c>)
     75c:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     75e:	4b0f      	ldr	r3, [pc, #60]	; (79c <usart_async_init+0x90>)
     760:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     762:	4b0f      	ldr	r3, [pc, #60]	; (7a0 <usart_async_init+0x94>)
     764:	6163      	str	r3, [r4, #20]
}
     766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     768:	2000      	movs	r0, #0
     76a:	e7dd      	b.n	728 <usart_async_init+0x1c>
     76c:	2000      	movs	r0, #0
     76e:	e7db      	b.n	728 <usart_async_init+0x1c>
     770:	2000      	movs	r0, #0
     772:	e7d9      	b.n	728 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     774:	200d      	movs	r0, #13
     776:	4240      	negs	r0, r0
     778:	e7f5      	b.n	766 <usart_async_init+0x5a>
     77a:	46c0      	nop			; (mov r8, r8)
     77c:	00002398 	.word	0x00002398
     780:	000008f1 	.word	0x000008f1
     784:	000008f9 	.word	0x000008f9
     788:	00000ea9 	.word	0x00000ea9
     78c:	0000062d 	.word	0x0000062d
     790:	00000589 	.word	0x00000589
     794:	000005ed 	.word	0x000005ed
     798:	0000056d 	.word	0x0000056d
     79c:	00000549 	.word	0x00000549
     7a0:	0000055b 	.word	0x0000055b

000007a4 <usart_async_enable>:
{
     7a4:	b510      	push	{r4, lr}
     7a6:	0004      	movs	r4, r0
	ASSERT(descr);
     7a8:	1e43      	subs	r3, r0, #1
     7aa:	4198      	sbcs	r0, r3
     7ac:	b2c0      	uxtb	r0, r0
     7ae:	2261      	movs	r2, #97	; 0x61
     7b0:	4904      	ldr	r1, [pc, #16]	; (7c4 <usart_async_enable+0x20>)
     7b2:	4b05      	ldr	r3, [pc, #20]	; (7c8 <usart_async_enable+0x24>)
     7b4:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     7b6:	0020      	movs	r0, r4
     7b8:	3008      	adds	r0, #8
     7ba:	4b04      	ldr	r3, [pc, #16]	; (7cc <usart_async_enable+0x28>)
     7bc:	4798      	blx	r3
}
     7be:	2000      	movs	r0, #0
     7c0:	bd10      	pop	{r4, pc}
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	00002398 	.word	0x00002398
     7c8:	000008f1 	.word	0x000008f1
     7cc:	00000f25 	.word	0x00000f25

000007d0 <usart_async_get_io_descriptor>:
{
     7d0:	b570      	push	{r4, r5, r6, lr}
     7d2:	0004      	movs	r4, r0
     7d4:	000d      	movs	r5, r1
	ASSERT(descr && io);
     7d6:	2800      	cmp	r0, #0
     7d8:	d00a      	beq.n	7f0 <usart_async_get_io_descriptor+0x20>
     7da:	0008      	movs	r0, r1
     7dc:	1e43      	subs	r3, r0, #1
     7de:	4198      	sbcs	r0, r3
     7e0:	b2c0      	uxtb	r0, r0
     7e2:	2277      	movs	r2, #119	; 0x77
     7e4:	4903      	ldr	r1, [pc, #12]	; (7f4 <usart_async_get_io_descriptor+0x24>)
     7e6:	4b04      	ldr	r3, [pc, #16]	; (7f8 <usart_async_get_io_descriptor+0x28>)
     7e8:	4798      	blx	r3
	*io = &descr->io;
     7ea:	602c      	str	r4, [r5, #0]
}
     7ec:	2000      	movs	r0, #0
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	2000      	movs	r0, #0
     7f2:	e7f6      	b.n	7e2 <usart_async_get_io_descriptor+0x12>
     7f4:	00002398 	.word	0x00002398
     7f8:	000008f1 	.word	0x000008f1

000007fc <usart_async_register_callback>:
{
     7fc:	b570      	push	{r4, r5, r6, lr}
     7fe:	0005      	movs	r5, r0
     800:	000e      	movs	r6, r1
     802:	0014      	movs	r4, r2
	ASSERT(descr);
     804:	1e43      	subs	r3, r0, #1
     806:	4198      	sbcs	r0, r3
     808:	b2c0      	uxtb	r0, r0
     80a:	2283      	movs	r2, #131	; 0x83
     80c:	4916      	ldr	r1, [pc, #88]	; (868 <usart_async_register_callback+0x6c>)
     80e:	4b17      	ldr	r3, [pc, #92]	; (86c <usart_async_register_callback+0x70>)
     810:	4798      	blx	r3
	switch (type) {
     812:	2e01      	cmp	r6, #1
     814:	d011      	beq.n	83a <usart_async_register_callback+0x3e>
     816:	2e00      	cmp	r6, #0
     818:	d004      	beq.n	824 <usart_async_register_callback+0x28>
     81a:	2e02      	cmp	r6, #2
     81c:	d018      	beq.n	850 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
     81e:	200d      	movs	r0, #13
     820:	4240      	negs	r0, r0
     822:	e009      	b.n	838 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
     824:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     826:	1e62      	subs	r2, r4, #1
     828:	4194      	sbcs	r4, r2
     82a:	b2e2      	uxtb	r2, r4
     82c:	0028      	movs	r0, r5
     82e:	3008      	adds	r0, #8
     830:	2101      	movs	r1, #1
     832:	4b0f      	ldr	r3, [pc, #60]	; (870 <usart_async_register_callback+0x74>)
     834:	4798      	blx	r3
	return ERR_NONE;
     836:	2000      	movs	r0, #0
}
     838:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     83a:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     83c:	1e62      	subs	r2, r4, #1
     83e:	4194      	sbcs	r4, r2
     840:	b2e2      	uxtb	r2, r4
     842:	0028      	movs	r0, r5
     844:	3008      	adds	r0, #8
     846:	2102      	movs	r1, #2
     848:	4b09      	ldr	r3, [pc, #36]	; (870 <usart_async_register_callback+0x74>)
     84a:	4798      	blx	r3
	return ERR_NONE;
     84c:	2000      	movs	r0, #0
		break;
     84e:	e7f3      	b.n	838 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
     850:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     852:	1e62      	subs	r2, r4, #1
     854:	4194      	sbcs	r4, r2
     856:	b2e2      	uxtb	r2, r4
     858:	0028      	movs	r0, r5
     85a:	3008      	adds	r0, #8
     85c:	2103      	movs	r1, #3
     85e:	4b04      	ldr	r3, [pc, #16]	; (870 <usart_async_register_callback+0x74>)
     860:	4798      	blx	r3
	return ERR_NONE;
     862:	2000      	movs	r0, #0
		break;
     864:	e7e8      	b.n	838 <usart_async_register_callback+0x3c>
     866:	46c0      	nop			; (mov r8, r8)
     868:	00002398 	.word	0x00002398
     86c:	000008f1 	.word	0x000008f1
     870:	00000f51 	.word	0x00000f51

00000874 <usart_async_is_rx_not_empty>:
{
     874:	b510      	push	{r4, lr}
     876:	0004      	movs	r4, r0
	ASSERT(descr);
     878:	1e43      	subs	r3, r0, #1
     87a:	4198      	sbcs	r0, r3
     87c:	b2c0      	uxtb	r0, r0
     87e:	2202      	movs	r2, #2
     880:	32ff      	adds	r2, #255	; 0xff
     882:	4905      	ldr	r1, [pc, #20]	; (898 <usart_async_is_rx_not_empty+0x24>)
     884:	4b05      	ldr	r3, [pc, #20]	; (89c <usart_async_is_rx_not_empty+0x28>)
     886:	4798      	blx	r3
	return ringbuffer_num(&descr->rx) > 0;
     888:	0020      	movs	r0, r4
     88a:	3034      	adds	r0, #52	; 0x34
     88c:	4b04      	ldr	r3, [pc, #16]	; (8a0 <usart_async_is_rx_not_empty+0x2c>)
     88e:	4798      	blx	r3
     890:	1e43      	subs	r3, r0, #1
     892:	4198      	sbcs	r0, r3
}
     894:	bd10      	pop	{r4, pc}
     896:	46c0      	nop			; (mov r8, r8)
     898:	00002398 	.word	0x00002398
     89c:	000008f1 	.word	0x000008f1
     8a0:	000009d5 	.word	0x000009d5

000008a4 <usart_async_get_status>:
{
     8a4:	b570      	push	{r4, r5, r6, lr}
     8a6:	0004      	movs	r4, r0
     8a8:	000d      	movs	r5, r1
	ASSERT(descr);
     8aa:	1e43      	subs	r3, r0, #1
     8ac:	4198      	sbcs	r0, r3
     8ae:	b2c0      	uxtb	r0, r0
     8b0:	220c      	movs	r2, #12
     8b2:	32ff      	adds	r2, #255	; 0xff
     8b4:	490b      	ldr	r1, [pc, #44]	; (8e4 <usart_async_get_status+0x40>)
     8b6:	4b0c      	ldr	r3, [pc, #48]	; (8e8 <usart_async_get_status+0x44>)
     8b8:	4798      	blx	r3
	if (status) {
     8ba:	2d00      	cmp	r5, #0
     8bc:	d009      	beq.n	8d2 <usart_async_get_status+0x2e>
		status->flags = *tmp_stat;
     8be:	6b23      	ldr	r3, [r4, #48]	; 0x30
     8c0:	602b      	str	r3, [r5, #0]
		status->txcnt = *tmp_txcnt;
     8c2:	2344      	movs	r3, #68	; 0x44
     8c4:	5ae3      	ldrh	r3, [r4, r3]
     8c6:	80ab      	strh	r3, [r5, #4]
		status->rxcnt = ringbuffer_num(&descr->rx);
     8c8:	0020      	movs	r0, r4
     8ca:	3034      	adds	r0, #52	; 0x34
     8cc:	4b07      	ldr	r3, [pc, #28]	; (8ec <usart_async_get_status+0x48>)
     8ce:	4798      	blx	r3
     8d0:	80e8      	strh	r0, [r5, #6]
	if (*tmp_stat & USART_ASYNC_STATUS_BUSY) {
     8d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
     8d4:	07db      	lsls	r3, r3, #31
     8d6:	d401      	bmi.n	8dc <usart_async_get_status+0x38>
	return ERR_NONE;
     8d8:	2000      	movs	r0, #0
}
     8da:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUSY;
     8dc:	2004      	movs	r0, #4
     8de:	4240      	negs	r0, r0
     8e0:	e7fb      	b.n	8da <usart_async_get_status+0x36>
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	00002398 	.word	0x00002398
     8e8:	000008f1 	.word	0x000008f1
     8ec:	000009d5 	.word	0x000009d5

000008f0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     8f0:	2800      	cmp	r0, #0
     8f2:	d100      	bne.n	8f6 <assert+0x6>
		__asm("BKPT #0");
     8f4:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     8f6:	4770      	bx	lr

000008f8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     8f8:	b570      	push	{r4, r5, r6, lr}
     8fa:	0004      	movs	r4, r0
     8fc:	000e      	movs	r6, r1
     8fe:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     900:	2800      	cmp	r0, #0
     902:	d00b      	beq.n	91c <ringbuffer_init+0x24>
     904:	2900      	cmp	r1, #0
     906:	d018      	beq.n	93a <ringbuffer_init+0x42>
     908:	2001      	movs	r0, #1
     90a:	2a00      	cmp	r2, #0
     90c:	d107      	bne.n	91e <ringbuffer_init+0x26>
     90e:	2228      	movs	r2, #40	; 0x28
     910:	490c      	ldr	r1, [pc, #48]	; (944 <ringbuffer_init+0x4c>)
     912:	2000      	movs	r0, #0
     914:	4b0c      	ldr	r3, [pc, #48]	; (948 <ringbuffer_init+0x50>)
     916:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     918:	1e6b      	subs	r3, r5, #1
     91a:	e007      	b.n	92c <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
     91c:	2000      	movs	r0, #0
     91e:	2228      	movs	r2, #40	; 0x28
     920:	4908      	ldr	r1, [pc, #32]	; (944 <ringbuffer_init+0x4c>)
     922:	4b09      	ldr	r3, [pc, #36]	; (948 <ringbuffer_init+0x50>)
     924:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
     926:	1e6b      	subs	r3, r5, #1
     928:	422b      	tst	r3, r5
     92a:	d108      	bne.n	93e <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     92c:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     92e:	2300      	movs	r3, #0
     930:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     932:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     934:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     936:	2000      	movs	r0, #0
}
     938:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     93a:	2000      	movs	r0, #0
     93c:	e7ef      	b.n	91e <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
     93e:	200d      	movs	r0, #13
     940:	4240      	negs	r0, r0
     942:	e7f9      	b.n	938 <ringbuffer_init+0x40>
     944:	000023b8 	.word	0x000023b8
     948:	000008f1 	.word	0x000008f1

0000094c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     94c:	b570      	push	{r4, r5, r6, lr}
     94e:	0004      	movs	r4, r0
     950:	000d      	movs	r5, r1
	ASSERT(rb && data);
     952:	2800      	cmp	r0, #0
     954:	d015      	beq.n	982 <ringbuffer_get+0x36>
     956:	0008      	movs	r0, r1
     958:	1e43      	subs	r3, r0, #1
     95a:	4198      	sbcs	r0, r3
     95c:	b2c0      	uxtb	r0, r0
     95e:	2240      	movs	r2, #64	; 0x40
     960:	490a      	ldr	r1, [pc, #40]	; (98c <ringbuffer_get+0x40>)
     962:	4b0b      	ldr	r3, [pc, #44]	; (990 <ringbuffer_get+0x44>)
     964:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     966:	68a3      	ldr	r3, [r4, #8]
     968:	68e2      	ldr	r2, [r4, #12]
     96a:	429a      	cmp	r2, r3
     96c:	d00b      	beq.n	986 <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
     96e:	6862      	ldr	r2, [r4, #4]
     970:	4013      	ands	r3, r2
     972:	6822      	ldr	r2, [r4, #0]
     974:	5cd3      	ldrb	r3, [r2, r3]
     976:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     978:	68a3      	ldr	r3, [r4, #8]
     97a:	3301      	adds	r3, #1
     97c:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     97e:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     980:	bd70      	pop	{r4, r5, r6, pc}
     982:	2000      	movs	r0, #0
     984:	e7eb      	b.n	95e <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
     986:	200a      	movs	r0, #10
     988:	4240      	negs	r0, r0
     98a:	e7f9      	b.n	980 <ringbuffer_get+0x34>
     98c:	000023b8 	.word	0x000023b8
     990:	000008f1 	.word	0x000008f1

00000994 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     994:	b570      	push	{r4, r5, r6, lr}
     996:	0004      	movs	r4, r0
     998:	000d      	movs	r5, r1
	ASSERT(rb);
     99a:	1e43      	subs	r3, r0, #1
     99c:	4198      	sbcs	r0, r3
     99e:	b2c0      	uxtb	r0, r0
     9a0:	2251      	movs	r2, #81	; 0x51
     9a2:	490a      	ldr	r1, [pc, #40]	; (9cc <ringbuffer_put+0x38>)
     9a4:	4b0a      	ldr	r3, [pc, #40]	; (9d0 <ringbuffer_put+0x3c>)
     9a6:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     9a8:	6863      	ldr	r3, [r4, #4]
     9aa:	68e2      	ldr	r2, [r4, #12]
     9ac:	4013      	ands	r3, r2
     9ae:	6822      	ldr	r2, [r4, #0]
     9b0:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     9b2:	68e3      	ldr	r3, [r4, #12]
     9b4:	6861      	ldr	r1, [r4, #4]
     9b6:	68a2      	ldr	r2, [r4, #8]
     9b8:	1a9a      	subs	r2, r3, r2
     9ba:	428a      	cmp	r2, r1
     9bc:	d901      	bls.n	9c2 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     9be:	1a59      	subs	r1, r3, r1
     9c0:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     9c2:	3301      	adds	r3, #1
     9c4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     9c6:	2000      	movs	r0, #0
     9c8:	bd70      	pop	{r4, r5, r6, pc}
     9ca:	46c0      	nop			; (mov r8, r8)
     9cc:	000023b8 	.word	0x000023b8
     9d0:	000008f1 	.word	0x000008f1

000009d4 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     9d4:	b510      	push	{r4, lr}
     9d6:	0004      	movs	r4, r0
	ASSERT(rb);
     9d8:	1e43      	subs	r3, r0, #1
     9da:	4198      	sbcs	r0, r3
     9dc:	b2c0      	uxtb	r0, r0
     9de:	2267      	movs	r2, #103	; 0x67
     9e0:	4903      	ldr	r1, [pc, #12]	; (9f0 <ringbuffer_num+0x1c>)
     9e2:	4b04      	ldr	r3, [pc, #16]	; (9f4 <ringbuffer_num+0x20>)
     9e4:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     9e6:	68e0      	ldr	r0, [r4, #12]
     9e8:	68a3      	ldr	r3, [r4, #8]
     9ea:	1ac0      	subs	r0, r0, r3
}
     9ec:	bd10      	pop	{r4, pc}
     9ee:	46c0      	nop			; (mov r8, r8)
     9f0:	000023b8 	.word	0x000023b8
     9f4:	000008f1 	.word	0x000008f1

000009f8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     9f8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     9fa:	4a06      	ldr	r2, [pc, #24]	; (a14 <_sbrk+0x1c>)
     9fc:	6812      	ldr	r2, [r2, #0]
     9fe:	2a00      	cmp	r2, #0
     a00:	d004      	beq.n	a0c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     a02:	4a04      	ldr	r2, [pc, #16]	; (a14 <_sbrk+0x1c>)
     a04:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     a06:	18c3      	adds	r3, r0, r3
     a08:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     a0a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     a0c:	4902      	ldr	r1, [pc, #8]	; (a18 <_sbrk+0x20>)
     a0e:	4a01      	ldr	r2, [pc, #4]	; (a14 <_sbrk+0x1c>)
     a10:	6011      	str	r1, [r2, #0]
     a12:	e7f6      	b.n	a02 <_sbrk+0xa>
     a14:	20000098 	.word	0x20000098
     a18:	20002190 	.word	0x20002190

00000a1c <_go_to_sleep>:
  __ASM volatile ("dsb 0xF":::"memory");
     a1c:	f3bf 8f4f 	dsb	sy
 * \brief Put MCU to sleep
 */
void _go_to_sleep(void)
{
	__DSB();
	__WFI();
     a20:	bf30      	wfi
}
     a22:	4770      	bx	lr

00000a24 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     a24:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     a26:	4b06      	ldr	r3, [pc, #24]	; (a40 <_init_chip+0x1c>)
     a28:	685a      	ldr	r2, [r3, #4]
     a2a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     a2c:	4b05      	ldr	r3, [pc, #20]	; (a44 <_init_chip+0x20>)
     a2e:	4798      	blx	r3
	_sysctrl_init_sources();
     a30:	4b05      	ldr	r3, [pc, #20]	; (a48 <_init_chip+0x24>)
     a32:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     a34:	4b05      	ldr	r3, [pc, #20]	; (a4c <_init_chip+0x28>)
     a36:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     a38:	20ff      	movs	r0, #255	; 0xff
     a3a:	4b05      	ldr	r3, [pc, #20]	; (a50 <_init_chip+0x2c>)
     a3c:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     a3e:	bd10      	pop	{r4, pc}
     a40:	41004000 	.word	0x41004000
     a44:	00000c75 	.word	0x00000c75
     a48:	00001031 	.word	0x00001031
     a4c:	00001075 	.word	0x00001075
     a50:	00000c01 	.word	0x00000c01

00000a54 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     a54:	4a22      	ldr	r2, [pc, #136]	; (ae0 <_ext_irq_init+0x8c>)
     a56:	7853      	ldrb	r3, [r2, #1]
     a58:	09db      	lsrs	r3, r3, #7
     a5a:	d1fc      	bne.n	a56 <_ext_irq_init+0x2>
     a5c:	4a20      	ldr	r2, [pc, #128]	; (ae0 <_ext_irq_init+0x8c>)
     a5e:	7853      	ldrb	r3, [r2, #1]
     a60:	09db      	lsrs	r3, r3, #7
     a62:	d1fc      	bne.n	a5e <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     a64:	4b1e      	ldr	r3, [pc, #120]	; (ae0 <_ext_irq_init+0x8c>)
     a66:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     a68:	079b      	lsls	r3, r3, #30
     a6a:	d50a      	bpl.n	a82 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     a6c:	2200      	movs	r2, #0
     a6e:	4b1c      	ldr	r3, [pc, #112]	; (ae0 <_ext_irq_init+0x8c>)
     a70:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     a72:	001a      	movs	r2, r3
     a74:	7853      	ldrb	r3, [r2, #1]
     a76:	09db      	lsrs	r3, r3, #7
     a78:	d1fc      	bne.n	a74 <_ext_irq_init+0x20>
     a7a:	4a19      	ldr	r2, [pc, #100]	; (ae0 <_ext_irq_init+0x8c>)
     a7c:	7853      	ldrb	r3, [r2, #1]
     a7e:	09db      	lsrs	r3, r3, #7
     a80:	d1fc      	bne.n	a7c <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
     a82:	2201      	movs	r2, #1
     a84:	4b16      	ldr	r3, [pc, #88]	; (ae0 <_ext_irq_init+0x8c>)
     a86:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     a88:	001a      	movs	r2, r3
     a8a:	7853      	ldrb	r3, [r2, #1]
     a8c:	09db      	lsrs	r3, r3, #7
     a8e:	d1fc      	bne.n	a8a <_ext_irq_init+0x36>
     a90:	4a13      	ldr	r2, [pc, #76]	; (ae0 <_ext_irq_init+0x8c>)
     a92:	7853      	ldrb	r3, [r2, #1]
     a94:	09db      	lsrs	r3, r3, #7
     a96:	d1fc      	bne.n	a92 <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     a98:	4b11      	ldr	r3, [pc, #68]	; (ae0 <_ext_irq_init+0x8c>)
     a9a:	2200      	movs	r2, #0
     a9c:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     a9e:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     aa0:	2180      	movs	r1, #128	; 0x80
     aa2:	0209      	lsls	r1, r1, #8
     aa4:	6159      	str	r1, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     aa6:	619a      	str	r2, [r3, #24]
     aa8:	22a0      	movs	r2, #160	; 0xa0
     aaa:	0612      	lsls	r2, r2, #24
     aac:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     aae:	781a      	ldrb	r2, [r3, #0]
     ab0:	2102      	movs	r1, #2
     ab2:	430a      	orrs	r2, r1
     ab4:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     ab6:	001a      	movs	r2, r3
     ab8:	7853      	ldrb	r3, [r2, #1]
     aba:	09db      	lsrs	r3, r3, #7
     abc:	d1fc      	bne.n	ab8 <_ext_irq_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     abe:	4b09      	ldr	r3, [pc, #36]	; (ae4 <_ext_irq_init+0x90>)
     ac0:	2210      	movs	r2, #16
     ac2:	2180      	movs	r1, #128	; 0x80
     ac4:	505a      	str	r2, [r3, r1]
     ac6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     aca:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ace:	3101      	adds	r1, #1
     ad0:	31ff      	adds	r1, #255	; 0xff
     ad2:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ad4:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     ad6:	4b04      	ldr	r3, [pc, #16]	; (ae8 <_ext_irq_init+0x94>)
     ad8:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     ada:	2000      	movs	r0, #0
     adc:	4770      	bx	lr
     ade:	46c0      	nop			; (mov r8, r8)
     ae0:	40001800 	.word	0x40001800
     ae4:	e000e100 	.word	0xe000e100
     ae8:	2000009c 	.word	0x2000009c

00000aec <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
     aec:	280f      	cmp	r0, #15
     aee:	d002      	beq.n	af6 <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
     af0:	200d      	movs	r0, #13
     af2:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
     af4:	4770      	bx	lr
	if (enable) {
     af6:	2900      	cmp	r1, #0
     af8:	d106      	bne.n	b08 <_ext_irq_enable+0x1c>
	((Eic *)hw)->INTENCLR.reg = mask;
     afa:	4b06      	ldr	r3, [pc, #24]	; (b14 <_ext_irq_enable+0x28>)
     afc:	2280      	movs	r2, #128	; 0x80
     afe:	0212      	lsls	r2, r2, #8
     b00:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     b02:	611a      	str	r2, [r3, #16]
	return ERR_NONE;
     b04:	2000      	movs	r0, #0
     b06:	e7f5      	b.n	af4 <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
     b08:	2280      	movs	r2, #128	; 0x80
     b0a:	0212      	lsls	r2, r2, #8
     b0c:	4b01      	ldr	r3, [pc, #4]	; (b14 <_ext_irq_enable+0x28>)
     b0e:	60da      	str	r2, [r3, #12]
     b10:	2000      	movs	r0, #0
     b12:	e7ef      	b.n	af4 <_ext_irq_enable+0x8>
     b14:	40001800 	.word	0x40001800

00000b18 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     b18:	b5f0      	push	{r4, r5, r6, r7, lr}
     b1a:	46ce      	mov	lr, r9
     b1c:	4647      	mov	r7, r8
     b1e:	b580      	push	{r7, lr}
     b20:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
     b22:	4b31      	ldr	r3, [pc, #196]	; (be8 <EIC_Handler+0xd0>)
     b24:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     b26:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     b28:	400a      	ands	r2, r1
     b2a:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     b2c:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     b2e:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     b30:	4b2e      	ldr	r3, [pc, #184]	; (bec <EIC_Handler+0xd4>)
     b32:	6818      	ldr	r0, [r3, #0]
     b34:	1e43      	subs	r3, r0, #1
     b36:	4198      	sbcs	r0, r3
     b38:	b2c0      	uxtb	r0, r0
     b3a:	22d2      	movs	r2, #210	; 0xd2
     b3c:	492c      	ldr	r1, [pc, #176]	; (bf0 <EIC_Handler+0xd8>)
     b3e:	4b2d      	ldr	r3, [pc, #180]	; (bf4 <EIC_Handler+0xdc>)
     b40:	4798      	blx	r3

	while (flags) {
     b42:	9b01      	ldr	r3, [sp, #4]
     b44:	2b00      	cmp	r3, #0
     b46:	d049      	beq.n	bdc <EIC_Handler+0xc4>
     b48:	2301      	movs	r3, #1
     b4a:	425b      	negs	r3, r3
     b4c:	4699      	mov	r9, r3
		pos = ffs(flags) - 1;
     b4e:	4b2a      	ldr	r3, [pc, #168]	; (bf8 <EIC_Handler+0xe0>)
     b50:	4698      	mov	r8, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
     b52:	4f26      	ldr	r7, [pc, #152]	; (bec <EIC_Handler+0xd4>)
				if (_map[middle].extint == pos) {
     b54:	4d29      	ldr	r5, [pc, #164]	; (bfc <EIC_Handler+0xe4>)
     b56:	e03a      	b.n	bce <EIC_Handler+0xb6>
					upper = middle - 1;
     b58:	3a01      	subs	r2, #1
     b5a:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
     b5c:	42b1      	cmp	r1, r6
     b5e:	d80c      	bhi.n	b7a <EIC_Handler+0x62>
				middle = (upper + lower) >> 1;
     b60:	1873      	adds	r3, r6, r1
     b62:	105b      	asrs	r3, r3, #1
     b64:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
     b66:	4003      	ands	r3, r0
     b68:	00db      	lsls	r3, r3, #3
     b6a:	5d5b      	ldrb	r3, [r3, r5]
     b6c:	42a3      	cmp	r3, r4
     b6e:	d008      	beq.n	b82 <EIC_Handler+0x6a>
				if (_map[middle].extint < pos) {
     b70:	429c      	cmp	r4, r3
     b72:	ddf1      	ble.n	b58 <EIC_Handler+0x40>
					lower = middle + 1;
     b74:	3201      	adds	r2, #1
     b76:	b2d1      	uxtb	r1, r2
     b78:	e7f0      	b.n	b5c <EIC_Handler+0x44>
			if (INVALID_PIN_NUMBER != pin) {
     b7a:	464b      	mov	r3, r9
     b7c:	3301      	adds	r3, #1
     b7e:	d005      	beq.n	b8c <EIC_Handler+0x74>
     b80:	e001      	b.n	b86 <EIC_Handler+0x6e>
     b82:	230f      	movs	r3, #15
     b84:	4699      	mov	r9, r3
				callback(pin);
     b86:	4648      	mov	r0, r9
     b88:	683b      	ldr	r3, [r7, #0]
     b8a:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     b8c:	9b01      	ldr	r3, [sp, #4]
     b8e:	2201      	movs	r2, #1
     b90:	40a2      	lsls	r2, r4
     b92:	4393      	bics	r3, r2
     b94:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     b96:	9801      	ldr	r0, [sp, #4]
     b98:	4b17      	ldr	r3, [pc, #92]	; (bf8 <EIC_Handler+0xe0>)
     b9a:	4798      	blx	r3
     b9c:	3801      	subs	r0, #1
     b9e:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     ba0:	1c63      	adds	r3, r4, #1
     ba2:	d00a      	beq.n	bba <EIC_Handler+0xa2>
				if (_map[middle].extint == pos) {
     ba4:	2c0f      	cmp	r4, #15
     ba6:	d005      	beq.n	bb4 <EIC_Handler+0x9c>
     ba8:	230f      	movs	r3, #15
     baa:	2200      	movs	r2, #0
     bac:	2601      	movs	r6, #1
     bae:	2100      	movs	r1, #0
     bb0:	20ff      	movs	r0, #255	; 0xff
     bb2:	e7dd      	b.n	b70 <EIC_Handler+0x58>
     bb4:	230f      	movs	r3, #15
     bb6:	4699      	mov	r9, r3
     bb8:	e7e5      	b.n	b86 <EIC_Handler+0x6e>
	return ((Eic *)hw)->INTFLAG.reg;
     bba:	4b0b      	ldr	r3, [pc, #44]	; (be8 <EIC_Handler+0xd0>)
     bbc:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     bbe:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     bc0:	400a      	ands	r2, r1
     bc2:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     bc4:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     bc6:	611a      	str	r2, [r3, #16]
	while (flags) {
     bc8:	9b01      	ldr	r3, [sp, #4]
     bca:	2b00      	cmp	r3, #0
     bcc:	d006      	beq.n	bdc <EIC_Handler+0xc4>
		pos = ffs(flags) - 1;
     bce:	9801      	ldr	r0, [sp, #4]
     bd0:	47c0      	blx	r8
     bd2:	3801      	subs	r0, #1
     bd4:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     bd6:	1c63      	adds	r3, r4, #1
     bd8:	d1e4      	bne.n	ba4 <EIC_Handler+0x8c>
     bda:	e7ee      	b.n	bba <EIC_Handler+0xa2>
	}
}
     bdc:	b003      	add	sp, #12
     bde:	bc0c      	pop	{r2, r3}
     be0:	4690      	mov	r8, r2
     be2:	4699      	mov	r9, r3
     be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     be6:	46c0      	nop			; (mov r8, r8)
     be8:	40001800 	.word	0x40001800
     bec:	2000009c 	.word	0x2000009c
     bf0:	000023e4 	.word	0x000023e4
     bf4:	000008f1 	.word	0x000008f1
     bf8:	00001a51 	.word	0x00001a51
     bfc:	000023dc 	.word	0x000023dc

00000c00 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     c00:	07c3      	lsls	r3, r0, #31
     c02:	d50a      	bpl.n	c1a <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     c04:	4b0b      	ldr	r3, [pc, #44]	; (c34 <_gclk_init_generators_by_fref+0x34>)
     c06:	2280      	movs	r2, #128	; 0x80
     c08:	0052      	lsls	r2, r2, #1
     c0a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     c0c:	2283      	movs	r2, #131	; 0x83
     c0e:	0252      	lsls	r2, r2, #9
     c10:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     c12:	001a      	movs	r2, r3
     c14:	7853      	ldrb	r3, [r2, #1]
     c16:	09db      	lsrs	r3, r3, #7
     c18:	d1fc      	bne.n	c14 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     c1a:	0703      	lsls	r3, r0, #28
     c1c:	d509      	bpl.n	c32 <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
     c1e:	4b05      	ldr	r3, [pc, #20]	; (c34 <_gclk_init_generators_by_fref+0x34>)
     c20:	2204      	movs	r2, #4
     c22:	32ff      	adds	r2, #255	; 0xff
     c24:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     c26:	4a04      	ldr	r2, [pc, #16]	; (c38 <_gclk_init_generators_by_fref+0x38>)
     c28:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     c2a:	001a      	movs	r2, r3
     c2c:	7853      	ldrb	r3, [r2, #1]
     c2e:	09db      	lsrs	r3, r3, #7
     c30:	d1fc      	bne.n	c2c <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     c32:	4770      	bx	lr
     c34:	40000c00 	.word	0x40000c00
     c38:	00210303 	.word	0x00210303

00000c3c <_set_sleep_mode>:
/**
 * \brief Set the sleep mode for the device
 */
int32_t _set_sleep_mode(const uint8_t mode)
{
	switch (mode) {
     c3c:	2802      	cmp	r0, #2
     c3e:	d904      	bls.n	c4a <_set_sleep_mode+0xe>
     c40:	2803      	cmp	r0, #3
     c42:	d00b      	beq.n	c5c <_set_sleep_mode+0x20>
		return ERR_NONE;
	case 3:
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
		return ERR_NONE;
	default:
		return ERR_INVALID_ARG;
     c44:	200d      	movs	r0, #13
     c46:	4240      	negs	r0, r0
     c48:	e007      	b.n	c5a <_set_sleep_mode+0x1e>
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
     c4a:	4a08      	ldr	r2, [pc, #32]	; (c6c <_set_sleep_mode+0x30>)
     c4c:	6913      	ldr	r3, [r2, #16]
     c4e:	2104      	movs	r1, #4
     c50:	438b      	bics	r3, r1
     c52:	6113      	str	r3, [r2, #16]
		PM->SLEEP.reg = mode;
     c54:	4b06      	ldr	r3, [pc, #24]	; (c70 <_set_sleep_mode+0x34>)
     c56:	7058      	strb	r0, [r3, #1]
		return ERR_NONE;
     c58:	2000      	movs	r0, #0
	}
}
     c5a:	4770      	bx	lr
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
     c5c:	4a03      	ldr	r2, [pc, #12]	; (c6c <_set_sleep_mode+0x30>)
     c5e:	6913      	ldr	r3, [r2, #16]
     c60:	2104      	movs	r1, #4
     c62:	430b      	orrs	r3, r1
     c64:	6113      	str	r3, [r2, #16]
		return ERR_NONE;
     c66:	2000      	movs	r0, #0
     c68:	e7f7      	b.n	c5a <_set_sleep_mode+0x1e>
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	e000ed00 	.word	0xe000ed00
     c70:	40000400 	.word	0x40000400

00000c74 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     c74:	4b06      	ldr	r3, [pc, #24]	; (c90 <_pm_init+0x1c>)
     c76:	7a1a      	ldrb	r2, [r3, #8]
     c78:	b2d2      	uxtb	r2, r2
     c7a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     c7c:	7a5a      	ldrb	r2, [r3, #9]
     c7e:	b2d2      	uxtb	r2, r2
     c80:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     c82:	7a9a      	ldrb	r2, [r3, #10]
     c84:	b2d2      	uxtb	r2, r2
     c86:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     c88:	7ada      	ldrb	r2, [r3, #11]
     c8a:	b2d2      	uxtb	r2, r2
     c8c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     c8e:	4770      	bx	lr
     c90:	40000400 	.word	0x40000400

00000c94 <_calendar_register_callback>:

/**
 * \brief Registers callback for the specified callback type
 */
int32_t _calendar_register_callback(struct calendar_dev *const dev, calendar_drv_cb_alarm_t callback)
{
     c94:	b570      	push	{r4, r5, r6, lr}
     c96:	0004      	movs	r4, r0
     c98:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     c9a:	2800      	cmp	r0, #0
     c9c:	d015      	beq.n	cca <_calendar_register_callback+0x36>
     c9e:	6800      	ldr	r0, [r0, #0]
     ca0:	1e43      	subs	r3, r0, #1
     ca2:	4198      	sbcs	r0, r3
     ca4:	b2c0      	uxtb	r0, r0
     ca6:	2233      	movs	r2, #51	; 0x33
     ca8:	490f      	ldr	r1, [pc, #60]	; (ce8 <_calendar_register_callback+0x54>)
     caa:	4b10      	ldr	r3, [pc, #64]	; (cec <_calendar_register_callback+0x58>)
     cac:	4798      	blx	r3

	/* Check callback */
	if (callback != NULL) {
     cae:	2d00      	cmp	r5, #0
     cb0:	d00d      	beq.n	cce <_calendar_register_callback+0x3a>
		/* register the callback */
		dev->callback = callback;
     cb2:	6065      	str	r5, [r4, #4]
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     cb4:	4b0e      	ldr	r3, [pc, #56]	; (cf0 <_calendar_register_callback+0x5c>)
     cb6:	2208      	movs	r2, #8
     cb8:	21c0      	movs	r1, #192	; 0xc0
     cba:	0049      	lsls	r1, r1, #1
     cbc:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     cbe:	601a      	str	r2, [r3, #0]
		/* enable RTC_IRQn */
		NVIC_ClearPendingIRQ(RTC_IRQn);
		NVIC_EnableIRQ(RTC_IRQn);

		/* enable cmp */
		hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
     cc0:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE2.INTFLAG.reg = mask;
}

static inline void hri_rtcmode0_set_INTEN_CMP0_bit(const void *const hw)
{
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     cc2:	3a07      	subs	r2, #7
     cc4:	71da      	strb	r2, [r3, #7]
		/* disable RTC_IRQn */
		NVIC_DisableIRQ(RTC_IRQn);
	}

	return ERR_NONE;
}
     cc6:	2000      	movs	r0, #0
     cc8:	bd70      	pop	{r4, r5, r6, pc}
     cca:	2000      	movs	r0, #0
     ccc:	e7eb      	b.n	ca6 <_calendar_register_callback+0x12>
		hri_rtcmode0_clear_INTEN_CMP0_bit(dev->hw);
     cce:	6823      	ldr	r3, [r4, #0]
	}
}

static inline void hri_rtcmode0_clear_INTEN_CMP0_bit(const void *const hw)
{
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_CMP0;
     cd0:	2201      	movs	r2, #1
     cd2:	719a      	strb	r2, [r3, #6]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     cd4:	2108      	movs	r1, #8
     cd6:	2380      	movs	r3, #128	; 0x80
     cd8:	4a05      	ldr	r2, [pc, #20]	; (cf0 <_calendar_register_callback+0x5c>)
     cda:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
     cdc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ce0:	f3bf 8f6f 	isb	sy
     ce4:	e7ef      	b.n	cc6 <_calendar_register_callback+0x32>
     ce6:	46c0      	nop			; (mov r8, r8)
     ce8:	000023fc 	.word	0x000023fc
     cec:	000008f1 	.word	0x000008f1
     cf0:	e000e100 	.word	0xe000e100

00000cf4 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
     cf4:	b510      	push	{r4, lr}
     cf6:	1e04      	subs	r4, r0, #0
	uint16_t register_value;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     cf8:	d036      	beq.n	d68 <_calendar_init+0x74>
     cfa:	6800      	ldr	r0, [r0, #0]
     cfc:	1e43      	subs	r3, r0, #1
     cfe:	4198      	sbcs	r0, r3
     d00:	b2c0      	uxtb	r0, r0
     d02:	2278      	movs	r2, #120	; 0x78
     d04:	4919      	ldr	r1, [pc, #100]	; (d6c <_calendar_init+0x78>)
     d06:	4b1a      	ldr	r3, [pc, #104]	; (d70 <_calendar_init+0x7c>)
     d08:	4798      	blx	r3

	_rtc_dev = dev;
     d0a:	4b1a      	ldr	r3, [pc, #104]	; (d74 <_calendar_init+0x80>)
     d0c:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw);
     d0e:	6822      	ldr	r2, [r4, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     d10:	7a93      	ldrb	r3, [r2, #10]
     d12:	09db      	lsrs	r3, r3, #7
     d14:	d1fc      	bne.n	d10 <_calendar_init+0x1c>
     d16:	7a93      	ldrb	r3, [r2, #10]
     d18:	09db      	lsrs	r3, r3, #7
     d1a:	d1fc      	bne.n	d16 <_calendar_init+0x22>

static inline bool hri_rtcmode0_get_CTRL_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
     d1c:	8813      	ldrh	r3, [r2, #0]
	if (hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw)) {
     d1e:	079b      	lsls	r3, r3, #30
     d20:	d50a      	bpl.n	d38 <_calendar_init+0x44>
}

static inline void hri_rtcmode0_clear_CTRL_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     d22:	8813      	ldrh	r3, [r2, #0]
     d24:	2102      	movs	r1, #2
     d26:	438b      	bics	r3, r1
     d28:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     d2a:	7a93      	ldrb	r3, [r2, #10]
     d2c:	09db      	lsrs	r3, r3, #7
     d2e:	d1fc      	bne.n	d2a <_calendar_init+0x36>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw);
     d30:	6822      	ldr	r2, [r4, #0]
     d32:	7a93      	ldrb	r3, [r2, #10]
     d34:	09db      	lsrs	r3, r3, #7
     d36:	d1fc      	bne.n	d32 <_calendar_init+0x3e>
#endif
	}
	hri_rtcmode0_set_CTRL_SWRST_bit(dev->hw);
     d38:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     d3a:	8813      	ldrh	r3, [r2, #0]
     d3c:	2101      	movs	r1, #1
     d3e:	430b      	orrs	r3, r1
     d40:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     d42:	7a93      	ldrb	r3, [r2, #10]
     d44:	09db      	lsrs	r3, r3, #7
     d46:	d1fc      	bne.n	d42 <_calendar_init+0x4e>
	hri_rtcmode0_wait_for_sync(dev->hw);
     d48:	6822      	ldr	r2, [r4, #0]
     d4a:	7a93      	ldrb	r3, [r2, #10]
     d4c:	09db      	lsrs	r3, r3, #7
     d4e:	d1fc      	bne.n	d4a <_calendar_init+0x56>
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     d50:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     d52:	7a93      	ldrb	r3, [r2, #10]
     d54:	09db      	lsrs	r3, r3, #7
     d56:	d1fc      	bne.n	d52 <_calendar_init+0x5e>
	register_value &= (~RTC_MODE0_CTRL_MATCHCLR);

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	/* set continuously clock read update mode */
	hri_rtcmode0_set_READREQ_RCONT_bit(dev->hw);
     d58:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_rtc_set_READREQ_RCONT_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     d5a:	8853      	ldrh	r3, [r2, #2]
     d5c:	2180      	movs	r1, #128	; 0x80
     d5e:	01c9      	lsls	r1, r1, #7
     d60:	430b      	orrs	r3, r1
     d62:	8053      	strh	r3, [r2, #2]
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	return ERR_NONE;
}
     d64:	2000      	movs	r0, #0
     d66:	bd10      	pop	{r4, pc}
     d68:	2000      	movs	r0, #0
     d6a:	e7ca      	b.n	d02 <_calendar_init+0xe>
     d6c:	000023fc 	.word	0x000023fc
     d70:	000008f1 	.word	0x000008f1
     d74:	200000a0 	.word	0x200000a0

00000d78 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
     d78:	b510      	push	{r4, lr}
     d7a:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     d7c:	d011      	beq.n	da2 <_calendar_enable+0x2a>
     d7e:	6800      	ldr	r0, [r0, #0]
     d80:	1e43      	subs	r3, r0, #1
     d82:	4198      	sbcs	r0, r3
     d84:	b2c0      	uxtb	r0, r0
     d86:	22aa      	movs	r2, #170	; 0xaa
     d88:	4907      	ldr	r1, [pc, #28]	; (da8 <_calendar_enable+0x30>)
     d8a:	4b08      	ldr	r3, [pc, #32]	; (dac <_calendar_enable+0x34>)
     d8c:	4798      	blx	r3

	/* Enable rtc */
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
     d8e:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     d90:	8813      	ldrh	r3, [r2, #0]
     d92:	2102      	movs	r1, #2
     d94:	430b      	orrs	r3, r1
     d96:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     d98:	7a93      	ldrb	r3, [r2, #10]
     d9a:	09db      	lsrs	r3, r3, #7
     d9c:	d1fc      	bne.n	d98 <_calendar_enable+0x20>

	return ERR_NONE;
}
     d9e:	2000      	movs	r0, #0
     da0:	bd10      	pop	{r4, pc}
     da2:	2000      	movs	r0, #0
     da4:	e7ef      	b.n	d86 <_calendar_enable+0xe>
     da6:	46c0      	nop			; (mov r8, r8)
     da8:	000023fc 	.word	0x000023fc
     dac:	000008f1 	.word	0x000008f1

00000db0 <_calendar_set_comp>:

/**
 * \brief Set the compare for the specified value.
 */
int32_t _calendar_set_comp(struct calendar_dev *const dev, const uint32_t comp)
{
     db0:	b570      	push	{r4, r5, r6, lr}
     db2:	0004      	movs	r4, r0
     db4:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     db6:	2800      	cmp	r0, #0
     db8:	d00f      	beq.n	dda <_calendar_set_comp+0x2a>
     dba:	6800      	ldr	r0, [r0, #0]
     dbc:	1e43      	subs	r3, r0, #1
     dbe:	4198      	sbcs	r0, r3
     dc0:	b2c0      	uxtb	r0, r0
     dc2:	22e4      	movs	r2, #228	; 0xe4
     dc4:	4906      	ldr	r1, [pc, #24]	; (de0 <_calendar_set_comp+0x30>)
     dc6:	4b07      	ldr	r3, [pc, #28]	; (de4 <_calendar_set_comp+0x34>)
     dc8:	4798      	blx	r3

	/* Set value into alarm register. */
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, comp);
     dca:	6822      	ldr	r2, [r4, #0]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     dcc:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     dce:	6195      	str	r5, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     dd0:	7a93      	ldrb	r3, [r2, #10]
     dd2:	09db      	lsrs	r3, r3, #7
     dd4:	d1fc      	bne.n	dd0 <_calendar_set_comp+0x20>

	return ERR_NONE;
}
     dd6:	2000      	movs	r0, #0
     dd8:	bd70      	pop	{r4, r5, r6, pc}
     dda:	2000      	movs	r0, #0
     ddc:	e7f1      	b.n	dc2 <_calendar_set_comp+0x12>
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	000023fc 	.word	0x000023fc
     de4:	000008f1 	.word	0x000008f1

00000de8 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     de8:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
     dea:	4b07      	ldr	r3, [pc, #28]	; (e08 <RTC_Handler+0x20>)
     dec:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     dee:	6823      	ldr	r3, [r4, #0]
     df0:	7a1b      	ldrb	r3, [r3, #8]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
     df2:	07db      	lsls	r3, r3, #31
     df4:	d400      	bmi.n	df8 <RTC_Handler+0x10>
}
     df6:	bd10      	pop	{r4, pc}
		dev->callback(dev);
     df8:	0020      	movs	r0, r4
     dfa:	6863      	ldr	r3, [r4, #4]
     dfc:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     dfe:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     e00:	2201      	movs	r2, #1
     e02:	721a      	strb	r2, [r3, #8]
}
     e04:	e7f7      	b.n	df6 <RTC_Handler+0xe>
     e06:	46c0      	nop			; (mov r8, r8)
     e08:	200000a0 	.word	0x200000a0

00000e0c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     e0c:	b510      	push	{r4, lr}
     e0e:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     e10:	4b1f      	ldr	r3, [pc, #124]	; (e90 <_usart_init+0x84>)
     e12:	18c3      	adds	r3, r0, r3
     e14:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
     e16:	b2db      	uxtb	r3, r3
     e18:	2b03      	cmp	r3, #3
     e1a:	d004      	beq.n	e26 <_usart_init+0x1a>
	ASSERT(false);
     e1c:	4a1d      	ldr	r2, [pc, #116]	; (e94 <_usart_init+0x88>)
     e1e:	491e      	ldr	r1, [pc, #120]	; (e98 <_usart_init+0x8c>)
     e20:	2000      	movs	r0, #0
     e22:	4b1e      	ldr	r3, [pc, #120]	; (e9c <_usart_init+0x90>)
     e24:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     e26:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     e28:	07db      	lsls	r3, r3, #31
     e2a:	d418      	bmi.n	e5e <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e2c:	2203      	movs	r2, #3
     e2e:	69e3      	ldr	r3, [r4, #28]
     e30:	421a      	tst	r2, r3
     e32:	d1fc      	bne.n	e2e <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     e34:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     e36:	079b      	lsls	r3, r3, #30
     e38:	d50b      	bpl.n	e52 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     e3a:	6823      	ldr	r3, [r4, #0]
     e3c:	2202      	movs	r2, #2
     e3e:	4393      	bics	r3, r2
     e40:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e42:	3201      	adds	r2, #1
     e44:	69e3      	ldr	r3, [r4, #28]
     e46:	421a      	tst	r2, r3
     e48:	d1fc      	bne.n	e44 <_usart_init+0x38>
     e4a:	2202      	movs	r2, #2
     e4c:	69e3      	ldr	r3, [r4, #28]
     e4e:	421a      	tst	r2, r3
     e50:	d1fc      	bne.n	e4c <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e52:	2305      	movs	r3, #5
     e54:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e56:	2203      	movs	r2, #3
     e58:	69e3      	ldr	r3, [r4, #28]
     e5a:	421a      	tst	r2, r3
     e5c:	d1fc      	bne.n	e58 <_usart_init+0x4c>
     e5e:	2201      	movs	r2, #1
     e60:	69e3      	ldr	r3, [r4, #28]
     e62:	421a      	tst	r2, r3
     e64:	d1fc      	bne.n	e60 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e66:	4b0e      	ldr	r3, [pc, #56]	; (ea0 <_usart_init+0x94>)
     e68:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e6a:	2203      	movs	r2, #3
     e6c:	69e3      	ldr	r3, [r4, #28]
     e6e:	421a      	tst	r2, r3
     e70:	d1fc      	bne.n	e6c <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     e72:	23c0      	movs	r3, #192	; 0xc0
     e74:	029b      	lsls	r3, r3, #10
     e76:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e78:	2207      	movs	r2, #7
     e7a:	69e3      	ldr	r3, [r4, #28]
     e7c:	421a      	tst	r2, r3
     e7e:	d1fc      	bne.n	e7a <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     e80:	4b08      	ldr	r3, [pc, #32]	; (ea4 <_usart_init+0x98>)
     e82:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     e84:	2300      	movs	r3, #0
     e86:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     e88:	2230      	movs	r2, #48	; 0x30
     e8a:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     e8c:	2000      	movs	r0, #0
     e8e:	bd10      	pop	{r4, pc}
     e90:	bdfff800 	.word	0xbdfff800
     e94:	0000025e 	.word	0x0000025e
     e98:	00002414 	.word	0x00002414
     e9c:	000008f1 	.word	0x000008f1
     ea0:	40100004 	.word	0x40100004
     ea4:	ffffc504 	.word	0xffffc504

00000ea8 <_usart_async_init>:
{
     ea8:	b570      	push	{r4, r5, r6, lr}
     eaa:	0005      	movs	r5, r0
     eac:	000c      	movs	r4, r1
	ASSERT(device);
     eae:	1e43      	subs	r3, r0, #1
     eb0:	4198      	sbcs	r0, r3
     eb2:	b2c0      	uxtb	r0, r0
     eb4:	22c4      	movs	r2, #196	; 0xc4
     eb6:	4914      	ldr	r1, [pc, #80]	; (f08 <_usart_async_init+0x60>)
     eb8:	4b14      	ldr	r3, [pc, #80]	; (f0c <_usart_async_init+0x64>)
     eba:	4798      	blx	r3
	init_status = _usart_init(hw);
     ebc:	0020      	movs	r0, r4
     ebe:	4b14      	ldr	r3, [pc, #80]	; (f10 <_usart_async_init+0x68>)
     ec0:	4798      	blx	r3
	if (init_status) {
     ec2:	2800      	cmp	r0, #0
     ec4:	d000      	beq.n	ec8 <_usart_async_init+0x20>
}
     ec6:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
     ec8:	61ac      	str	r4, [r5, #24]
	if (hw == SERCOM3) {
     eca:	4b12      	ldr	r3, [pc, #72]	; (f14 <_usart_async_init+0x6c>)
     ecc:	429c      	cmp	r4, r3
     ece:	d017      	beq.n	f00 <_usart_async_init+0x58>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     ed0:	4b11      	ldr	r3, [pc, #68]	; (f18 <_usart_async_init+0x70>)
     ed2:	469c      	mov	ip, r3
     ed4:	4464      	add	r4, ip
     ed6:	0aa4      	lsrs	r4, r4, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
     ed8:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
     eda:	b2e3      	uxtb	r3, r4
     edc:	0622      	lsls	r2, r4, #24
     ede:	d4f2      	bmi.n	ec6 <_usart_async_init+0x1e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ee0:	221f      	movs	r2, #31
     ee2:	401a      	ands	r2, r3
     ee4:	2301      	movs	r3, #1
     ee6:	4093      	lsls	r3, r2
     ee8:	4a0c      	ldr	r2, [pc, #48]	; (f1c <_usart_async_init+0x74>)
     eea:	2180      	movs	r1, #128	; 0x80
     eec:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     eee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ef2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ef6:	3101      	adds	r1, #1
     ef8:	31ff      	adds	r1, #255	; 0xff
     efa:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     efc:	6013      	str	r3, [r2, #0]
     efe:	e7e2      	b.n	ec6 <_usart_async_init+0x1e>
		_sercom3_dev = (struct _usart_async_device *)dev;
     f00:	4b07      	ldr	r3, [pc, #28]	; (f20 <_usart_async_init+0x78>)
     f02:	601d      	str	r5, [r3, #0]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
     f04:	230c      	movs	r3, #12
     f06:	e7eb      	b.n	ee0 <_usart_async_init+0x38>
     f08:	00002414 	.word	0x00002414
     f0c:	000008f1 	.word	0x000008f1
     f10:	00000e0d 	.word	0x00000e0d
     f14:	42001400 	.word	0x42001400
     f18:	bdfff800 	.word	0xbdfff800
     f1c:	e000e100 	.word	0xe000e100
     f20:	200000a4 	.word	0x200000a4

00000f24 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     f24:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     f26:	6813      	ldr	r3, [r2, #0]
     f28:	2102      	movs	r1, #2
     f2a:	430b      	orrs	r3, r1
     f2c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     f2e:	3101      	adds	r1, #1
     f30:	69d3      	ldr	r3, [r2, #28]
     f32:	4219      	tst	r1, r3
     f34:	d1fc      	bne.n	f30 <_usart_async_enable+0xc>
}
     f36:	4770      	bx	lr

00000f38 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     f38:	6983      	ldr	r3, [r0, #24]
     f3a:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     f3c:	8519      	strh	r1, [r3, #40]	; 0x28
}
     f3e:	4770      	bx	lr

00000f40 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
     f40:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     f42:	2201      	movs	r2, #1
     f44:	759a      	strb	r2, [r3, #22]
}
     f46:	4770      	bx	lr

00000f48 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
     f48:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     f4a:	2202      	movs	r2, #2
     f4c:	759a      	strb	r2, [r3, #22]
}
     f4e:	4770      	bx	lr

00000f50 <_usart_async_set_irq_state>:
{
     f50:	b570      	push	{r4, r5, r6, lr}
     f52:	0004      	movs	r4, r0
     f54:	000d      	movs	r5, r1
     f56:	0016      	movs	r6, r2
	ASSERT(device);
     f58:	1e43      	subs	r3, r0, #1
     f5a:	4198      	sbcs	r0, r3
     f5c:	b2c0      	uxtb	r0, r0
     f5e:	4a16      	ldr	r2, [pc, #88]	; (fb8 <_usart_async_set_irq_state+0x68>)
     f60:	4916      	ldr	r1, [pc, #88]	; (fbc <_usart_async_set_irq_state+0x6c>)
     f62:	4b17      	ldr	r3, [pc, #92]	; (fc0 <_usart_async_set_irq_state+0x70>)
     f64:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
     f66:	2302      	movs	r3, #2
     f68:	002a      	movs	r2, r5
     f6a:	439a      	bics	r2, r3
     f6c:	d10e      	bne.n	f8c <_usart_async_set_irq_state+0x3c>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
     f6e:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     f70:	2e00      	cmp	r6, #0
     f72:	d105      	bne.n	f80 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     f74:	2201      	movs	r2, #1
     f76:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
     f78:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     f7a:	3201      	adds	r2, #1
     f7c:	751a      	strb	r2, [r3, #20]
}
     f7e:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     f80:	2201      	movs	r2, #1
     f82:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
     f84:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     f86:	3201      	adds	r2, #1
     f88:	759a      	strb	r2, [r3, #22]
     f8a:	e7f8      	b.n	f7e <_usart_async_set_irq_state+0x2e>
	} else if (USART_ASYNC_RX_DONE == type) {
     f8c:	2d01      	cmp	r5, #1
     f8e:	d007      	beq.n	fa0 <_usart_async_set_irq_state+0x50>
	} else if (USART_ASYNC_ERROR == type) {
     f90:	2d03      	cmp	r5, #3
     f92:	d1f4      	bne.n	f7e <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
     f94:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     f96:	2e00      	cmp	r6, #0
     f98:	d00b      	beq.n	fb2 <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
     f9a:	2280      	movs	r2, #128	; 0x80
     f9c:	759a      	strb	r2, [r3, #22]
}
     f9e:	e7ee      	b.n	f7e <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
     fa0:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     fa2:	2e00      	cmp	r6, #0
     fa4:	d102      	bne.n	fac <_usart_async_set_irq_state+0x5c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
     fa6:	2204      	movs	r2, #4
     fa8:	751a      	strb	r2, [r3, #20]
     faa:	e7e8      	b.n	f7e <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
     fac:	2204      	movs	r2, #4
     fae:	759a      	strb	r2, [r3, #22]
     fb0:	e7e5      	b.n	f7e <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
     fb2:	2280      	movs	r2, #128	; 0x80
     fb4:	751a      	strb	r2, [r3, #20]
     fb6:	e7e2      	b.n	f7e <_usart_async_set_irq_state+0x2e>
     fb8:	0000021e 	.word	0x0000021e
     fbc:	00002414 	.word	0x00002414
     fc0:	000008f1 	.word	0x000008f1

00000fc4 <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
     fc4:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
     fc6:	4b19      	ldr	r3, [pc, #100]	; (102c <SERCOM3_Handler+0x68>)
     fc8:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
     fca:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     fcc:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
     fce:	07db      	lsls	r3, r3, #31
     fd0:	d502      	bpl.n	fd8 <SERCOM3_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
     fd2:	7da3      	ldrb	r3, [r4, #22]
     fd4:	07db      	lsls	r3, r3, #31
     fd6:	d40f      	bmi.n	ff8 <SERCOM3_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     fd8:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
     fda:	079b      	lsls	r3, r3, #30
     fdc:	d502      	bpl.n	fe4 <SERCOM3_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
     fde:	7da3      	ldrb	r3, [r4, #22]
     fe0:	079b      	lsls	r3, r3, #30
     fe2:	d40e      	bmi.n	1002 <SERCOM3_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     fe4:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
     fe6:	075b      	lsls	r3, r3, #29
     fe8:	d515      	bpl.n	1016 <SERCOM3_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
     fea:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
     fec:	2337      	movs	r3, #55	; 0x37
     fee:	421a      	tst	r2, r3
     ff0:	d00c      	beq.n	100c <SERCOM3_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
     ff2:	3308      	adds	r3, #8
     ff4:	8363      	strh	r3, [r4, #26]
}
     ff6:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     ff8:	2301      	movs	r3, #1
     ffa:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
     ffc:	6803      	ldr	r3, [r0, #0]
     ffe:	4798      	blx	r3
    1000:	e7f9      	b.n	ff6 <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1002:	2302      	movs	r3, #2
    1004:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1006:	6883      	ldr	r3, [r0, #8]
    1008:	4798      	blx	r3
    100a:	e7f4      	b.n	ff6 <SERCOM3_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
    100c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    100e:	b2c9      	uxtb	r1, r1
    1010:	6843      	ldr	r3, [r0, #4]
    1012:	4798      	blx	r3
    1014:	e7ef      	b.n	ff6 <SERCOM3_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1016:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1018:	09db      	lsrs	r3, r3, #7
    101a:	d0ec      	beq.n	ff6 <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    101c:	2380      	movs	r3, #128	; 0x80
    101e:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    1020:	68c3      	ldr	r3, [r0, #12]
    1022:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1024:	8b63      	ldrh	r3, [r4, #26]
    1026:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1028:	8363      	strh	r3, [r4, #26]
}
    102a:	e7e4      	b.n	ff6 <SERCOM3_Handler+0x32>
    102c:	200000a4 	.word	0x200000a4

00001030 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1030:	4b0e      	ldr	r3, [pc, #56]	; (106c <_sysctrl_init_sources+0x3c>)
    1032:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1034:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1036:	480e      	ldr	r0, [pc, #56]	; (1070 <_sysctrl_init_sources+0x40>)
    1038:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    103a:	0f92      	lsrs	r2, r2, #30
    103c:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    103e:	2002      	movs	r0, #2
    1040:	4302      	orrs	r2, r0
    1042:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1044:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1046:	699a      	ldr	r2, [r3, #24]
    1048:	4302      	orrs	r2, r0
    104a:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    104c:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    104e:	211f      	movs	r1, #31
    1050:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1052:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1054:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1056:	2208      	movs	r2, #8
    1058:	68cb      	ldr	r3, [r1, #12]
    105a:	421a      	tst	r2, r3
    105c:	d0fc      	beq.n	1058 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    105e:	4a03      	ldr	r2, [pc, #12]	; (106c <_sysctrl_init_sources+0x3c>)
    1060:	6a13      	ldr	r3, [r2, #32]
    1062:	2180      	movs	r1, #128	; 0x80
    1064:	430b      	orrs	r3, r1
    1066:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1068:	4770      	bx	lr
    106a:	46c0      	nop			; (mov r8, r8)
    106c:	40000800 	.word	0x40000800
    1070:	0fff0000 	.word	0x0fff0000

00001074 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1074:	4a02      	ldr	r2, [pc, #8]	; (1080 <_sysctrl_init_referenced_generators+0xc>)
    1076:	6993      	ldr	r3, [r2, #24]
    1078:	2102      	movs	r1, #2
    107a:	438b      	bics	r3, r1
    107c:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    107e:	4770      	bx	lr
    1080:	40000800 	.word	0x40000800

00001084 <main>:
#include <atmel_start.h>
#include "mulib_port_test.h"

int main(void)
{
    1084:	b510      	push	{r4, lr}
    /* Initializes MCU, drivers and middleware */
    atmel_start_init();
    1086:	4b03      	ldr	r3, [pc, #12]	; (1094 <main+0x10>)
    1088:	4798      	blx	r3
    mulib_port_test_init();
    108a:	4b03      	ldr	r3, [pc, #12]	; (1098 <main+0x14>)
    108c:	4798      	blx	r3

    /* Replace with your application code */
    while (1) {
        mulib_port_test_step();
    108e:	4c03      	ldr	r4, [pc, #12]	; (109c <main+0x18>)
    1090:	47a0      	blx	r4
    1092:	e7fd      	b.n	1090 <main+0xc>
    1094:	00000115 	.word	0x00000115
    1098:	00001185 	.word	0x00001185
    109c:	00001191 	.word	0x00001191

000010a0 <button_press_cb>:
  test_port_printf("time = %d ms", ms);
#endif
}

static void button_press_cb(void *arg) {
	s_button_pressed = true;
    10a0:	2201      	movs	r2, #1
    10a2:	4b01      	ldr	r3, [pc, #4]	; (10a8 <button_press_cb+0x8>)
    10a4:	701a      	strb	r2, [r3, #0]
}
    10a6:	4770      	bx	lr
    10a8:	200000a8 	.word	0x200000a8

000010ac <serial_read_cb>:

static void serial_read_cb(void *arg) {
	s_char_available = true;
    10ac:	2201      	movs	r2, #1
    10ae:	4b01      	ldr	r3, [pc, #4]	; (10b4 <serial_read_cb+0x8>)
    10b0:	705a      	strb	r2, [r3, #1]
}
    10b2:	4770      	bx	lr
    10b4:	200000a8 	.word	0x200000a8

000010b8 <rtc_cb>:

static void rtc_cb(void *arg) {
	s_rtc_matched = true;
    10b8:	2201      	movs	r2, #1
    10ba:	4b01      	ldr	r3, [pc, #4]	; (10c0 <rtc_cb+0x8>)
    10bc:	709a      	strb	r2, [r3, #2]
}
    10be:	4770      	bx	lr
    10c0:	200000a8 	.word	0x200000a8

000010c4 <test_wait_ms>:
static void test_wait_ms(int ms) {
    10c4:	b570      	push	{r4, r5, r6, lr}
    10c6:	0005      	movs	r5, r0
      mu_port_time_offset(mu_port_rtc_now(), mu_port_time_ms_to_duration(ms));
    10c8:	4b0a      	ldr	r3, [pc, #40]	; (10f4 <test_wait_ms+0x30>)
    10ca:	4798      	blx	r3
    10cc:	0004      	movs	r4, r0
    10ce:	0028      	movs	r0, r5
    10d0:	4b09      	ldr	r3, [pc, #36]	; (10f8 <test_wait_ms+0x34>)
    10d2:	4798      	blx	r3
    10d4:	0001      	movs	r1, r0
  mu_port_time_t then =
    10d6:	0020      	movs	r0, r4
    10d8:	4b08      	ldr	r3, [pc, #32]	; (10fc <test_wait_ms+0x38>)
    10da:	4798      	blx	r3
    10dc:	0005      	movs	r5, r0
  while (mu_port_time_precedes(mu_port_rtc_now(), then)) {
    10de:	4e05      	ldr	r6, [pc, #20]	; (10f4 <test_wait_ms+0x30>)
    10e0:	4c07      	ldr	r4, [pc, #28]	; (1100 <test_wait_ms+0x3c>)
    10e2:	e000      	b.n	10e6 <test_wait_ms+0x22>
	  asm("nop");
    10e4:	46c0      	nop			; (mov r8, r8)
  while (mu_port_time_precedes(mu_port_rtc_now(), then)) {
    10e6:	47b0      	blx	r6
    10e8:	0029      	movs	r1, r5
    10ea:	47a0      	blx	r4
    10ec:	2800      	cmp	r0, #0
    10ee:	d1f9      	bne.n	10e4 <test_wait_ms+0x20>
}
    10f0:	bd70      	pop	{r4, r5, r6, pc}
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	00001575 	.word	0x00001575
    10f8:	00001519 	.word	0x00001519
    10fc:	00001509 	.word	0x00001509
    1100:	00001511 	.word	0x00001511

00001104 <test_port_printf>:
static void test_port_printf(const char *fmt, ...) {
    1104:	b40f      	push	{r0, r1, r2, r3}
    1106:	b570      	push	{r4, r5, r6, lr}
    1108:	b082      	sub	sp, #8
  while (!mu_port_serial_can_write()) {
    110a:	4c0f      	ldr	r4, [pc, #60]	; (1148 <test_port_printf+0x44>)
    110c:	e000      	b.n	1110 <test_port_printf+0xc>
    asm("nop");
    110e:	46c0      	nop			; (mov r8, r8)
  while (!mu_port_serial_can_write()) {
    1110:	47a0      	blx	r4
    1112:	2800      	cmp	r0, #0
    1114:	d0fb      	beq.n	110e <test_port_printf+0xa>
  va_start(ap, fmt);
    1116:	ab07      	add	r3, sp, #28
    1118:	9301      	str	r3, [sp, #4]
  n_remaining = vsnprintf((char *)buf, MAX_CHARS, fmt, ap);
    111a:	9a06      	ldr	r2, [sp, #24]
    111c:	2132      	movs	r1, #50	; 0x32
    111e:	480b      	ldr	r0, [pc, #44]	; (114c <test_port_printf+0x48>)
    1120:	3004      	adds	r0, #4
    1122:	4c0b      	ldr	r4, [pc, #44]	; (1150 <test_port_printf+0x4c>)
    1124:	47a0      	blx	r4
    1126:	1e04      	subs	r4, r0, #0
  while (n_remaining > 0) {
    1128:	d009      	beq.n	113e <test_port_printf+0x3a>
    112a:	4d08      	ldr	r5, [pc, #32]	; (114c <test_port_printf+0x48>)
    112c:	3504      	adds	r5, #4
    int n_written = mu_port_serial_write(p, n_remaining);
    112e:	4e09      	ldr	r6, [pc, #36]	; (1154 <test_port_printf+0x50>)
    1130:	0021      	movs	r1, r4
    1132:	0028      	movs	r0, r5
    1134:	47b0      	blx	r6
    n_remaining -= n_written;
    1136:	1a24      	subs	r4, r4, r0
    p += n_written;
    1138:	182d      	adds	r5, r5, r0
  while (n_remaining > 0) {
    113a:	2c00      	cmp	r4, #0
    113c:	d1f8      	bne.n	1130 <test_port_printf+0x2c>
}
    113e:	b002      	add	sp, #8
    1140:	bc70      	pop	{r4, r5, r6}
    1142:	bc08      	pop	{r3}
    1144:	b004      	add	sp, #16
    1146:	4718      	bx	r3
    1148:	000016b1 	.word	0x000016b1
    114c:	200000a8 	.word	0x200000a8
    1150:	00001b55 	.word	0x00001b55
    1154:	0000168d 	.word	0x0000168d

00001158 <test_print_time>:
static void test_print_time(mu_port_time_t t) {
    1158:	b510      	push	{r4, lr}
  mu_port_time_dt uptime = mu_port_time_difference(t, s_epoch);
    115a:	4b05      	ldr	r3, [pc, #20]	; (1170 <test_print_time+0x18>)
    115c:	6b99      	ldr	r1, [r3, #56]	; 0x38
    115e:	4b05      	ldr	r3, [pc, #20]	; (1174 <test_print_time+0x1c>)
    1160:	4798      	blx	r3
  int ms = mu_port_time_duration_to_ms(uptime);
    1162:	4b05      	ldr	r3, [pc, #20]	; (1178 <test_print_time+0x20>)
    1164:	4798      	blx	r3
    1166:	0001      	movs	r1, r0
  test_port_printf("time = %d ms", ms);
    1168:	4804      	ldr	r0, [pc, #16]	; (117c <test_print_time+0x24>)
    116a:	4b05      	ldr	r3, [pc, #20]	; (1180 <test_print_time+0x28>)
    116c:	4798      	blx	r3
}
    116e:	bd10      	pop	{r4, pc}
    1170:	200000a8 	.word	0x200000a8
    1174:	0000150d 	.word	0x0000150d
    1178:	00001541 	.word	0x00001541
    117c:	00002430 	.word	0x00002430
    1180:	00001105 	.word	0x00001105

00001184 <mulib_port_test_init>:
void mulib_port_test_init(void) {
    1184:	b510      	push	{r4, lr}
	mu_port_init();
    1186:	4b01      	ldr	r3, [pc, #4]	; (118c <mulib_port_test_init+0x8>)
    1188:	4798      	blx	r3
}
    118a:	bd10      	pop	{r4, pc}
    118c:	0000147d 	.word	0x0000147d

00001190 <mulib_port_test_step>:
void mulib_port_test_step(void) {
    1190:	b5f0      	push	{r4, r5, r6, r7, lr}
    1192:	b083      	sub	sp, #12
  s_epoch = mu_port_rtc_now();
    1194:	4d6d      	ldr	r5, [pc, #436]	; (134c <mulib_port_test_step+0x1bc>)
    1196:	47a8      	blx	r5
    1198:	4e6d      	ldr	r6, [pc, #436]	; (1350 <mulib_port_test_step+0x1c0>)
    119a:	63b0      	str	r0, [r6, #56]	; 0x38
  test_port_printf("\r\n================\r\nstarting mu_port_test\r\n");
    119c:	486d      	ldr	r0, [pc, #436]	; (1354 <mulib_port_test_step+0x1c4>)
    119e:	4c6e      	ldr	r4, [pc, #440]	; (1358 <mulib_port_test_step+0x1c8>)
    11a0:	47a0      	blx	r4
  test_port_printf("time before is ");
    11a2:	486e      	ldr	r0, [pc, #440]	; (135c <mulib_port_test_step+0x1cc>)
    11a4:	47a0      	blx	r4
  test_print_time(mu_port_rtc_now());
    11a6:	47a8      	blx	r5
    11a8:	4f6d      	ldr	r7, [pc, #436]	; (1360 <mulib_port_test_step+0x1d0>)
    11aa:	47b8      	blx	r7
  test_port_printf("\r\n");
    11ac:	486d      	ldr	r0, [pc, #436]	; (1364 <mulib_port_test_step+0x1d4>)
    11ae:	47a0      	blx	r4
  test_port_printf("looping for 2.5 seconds...");
    11b0:	486d      	ldr	r0, [pc, #436]	; (1368 <mulib_port_test_step+0x1d8>)
    11b2:	47a0      	blx	r4
  test_wait_ms(2500);
    11b4:	486d      	ldr	r0, [pc, #436]	; (136c <mulib_port_test_step+0x1dc>)
    11b6:	4b6e      	ldr	r3, [pc, #440]	; (1370 <mulib_port_test_step+0x1e0>)
    11b8:	4798      	blx	r3
  test_port_printf("done.  time after is ");
    11ba:	486e      	ldr	r0, [pc, #440]	; (1374 <mulib_port_test_step+0x1e4>)
    11bc:	47a0      	blx	r4
  test_print_time(mu_port_rtc_now());
    11be:	47a8      	blx	r5
    11c0:	47b8      	blx	r7
  test_port_printf("\r\n");
    11c2:	4868      	ldr	r0, [pc, #416]	; (1364 <mulib_port_test_step+0x1d4>)
    11c4:	47a0      	blx	r4
  s_rtc_matched = false;
    11c6:	2300      	movs	r3, #0
    11c8:	70b3      	strb	r3, [r6, #2]
  mu_port_rtc_set_cb(rtc_cb, NULL);
    11ca:	2100      	movs	r1, #0
    11cc:	486a      	ldr	r0, [pc, #424]	; (1378 <mulib_port_test_step+0x1e8>)
    11ce:	4b6b      	ldr	r3, [pc, #428]	; (137c <mulib_port_test_step+0x1ec>)
    11d0:	4798      	blx	r3
  mu_port_rtc_alarm_at(mu_port_time_offset(mu_port_rtc_now(),
    11d2:	47a8      	blx	r5
    11d4:	0005      	movs	r5, r0
    11d6:	4865      	ldr	r0, [pc, #404]	; (136c <mulib_port_test_step+0x1dc>)
    11d8:	4b69      	ldr	r3, [pc, #420]	; (1380 <mulib_port_test_step+0x1f0>)
    11da:	4798      	blx	r3
    11dc:	0001      	movs	r1, r0
    11de:	0028      	movs	r0, r5
    11e0:	4b68      	ldr	r3, [pc, #416]	; (1384 <mulib_port_test_step+0x1f4>)
    11e2:	4798      	blx	r3
    11e4:	4b68      	ldr	r3, [pc, #416]	; (1388 <mulib_port_test_step+0x1f8>)
    11e6:	4798      	blx	r3
  test_port_printf("waiting 2.5 seconds for RTC match...");
    11e8:	4868      	ldr	r0, [pc, #416]	; (138c <mulib_port_test_step+0x1fc>)
    11ea:	47a0      	blx	r4
  while (!s_rtc_matched) {
    11ec:	78b3      	ldrb	r3, [r6, #2]
    11ee:	2b00      	cmp	r3, #0
    11f0:	d104      	bne.n	11fc <mulib_port_test_step+0x6c>
    11f2:	4a57      	ldr	r2, [pc, #348]	; (1350 <mulib_port_test_step+0x1c0>)
	  asm("nop");
    11f4:	46c0      	nop			; (mov r8, r8)
  while (!s_rtc_matched) {
    11f6:	7893      	ldrb	r3, [r2, #2]
    11f8:	2b00      	cmp	r3, #0
    11fa:	d0fb      	beq.n	11f4 <mulib_port_test_step+0x64>
  test_port_printf("done.  time is now ");
    11fc:	4864      	ldr	r0, [pc, #400]	; (1390 <mulib_port_test_step+0x200>)
    11fe:	4c56      	ldr	r4, [pc, #344]	; (1358 <mulib_port_test_step+0x1c8>)
    1200:	47a0      	blx	r4
  test_print_time(mu_port_rtc_now());
    1202:	4b52      	ldr	r3, [pc, #328]	; (134c <mulib_port_test_step+0x1bc>)
    1204:	4798      	blx	r3
    1206:	4b56      	ldr	r3, [pc, #344]	; (1360 <mulib_port_test_step+0x1d0>)
    1208:	4798      	blx	r3
  test_port_printf("\r\n");
    120a:	4856      	ldr	r0, [pc, #344]	; (1364 <mulib_port_test_step+0x1d4>)
    120c:	47a0      	blx	r4
  test_port_printf("flashing LED for 2.5 seconds...");
    120e:	4861      	ldr	r0, [pc, #388]	; (1394 <mulib_port_test_step+0x204>)
    1210:	47a0      	blx	r4
    1212:	240a      	movs	r4, #10
    mu_port_led_set(!mu_port_led_get());
    1214:	4f60      	ldr	r7, [pc, #384]	; (1398 <mulib_port_test_step+0x208>)
    1216:	4e61      	ldr	r6, [pc, #388]	; (139c <mulib_port_test_step+0x20c>)
    test_wait_ms(250);
    1218:	4d55      	ldr	r5, [pc, #340]	; (1370 <mulib_port_test_step+0x1e0>)
    mu_port_led_set(!mu_port_led_get());
    121a:	47b8      	blx	r7
    121c:	2301      	movs	r3, #1
    121e:	4058      	eors	r0, r3
    1220:	b2c0      	uxtb	r0, r0
    1222:	47b0      	blx	r6
    test_wait_ms(250);
    1224:	20fa      	movs	r0, #250	; 0xfa
    1226:	47a8      	blx	r5
    1228:	3c01      	subs	r4, #1
  for (int i = 0; i < 10; i++) {
    122a:	2c00      	cmp	r4, #0
    122c:	d1f5      	bne.n	121a <mulib_port_test_step+0x8a>
  mu_port_led_set(false);
    122e:	2000      	movs	r0, #0
    1230:	4b5a      	ldr	r3, [pc, #360]	; (139c <mulib_port_test_step+0x20c>)
    1232:	4798      	blx	r3
  test_port_printf("done.  time is now ");
    1234:	4856      	ldr	r0, [pc, #344]	; (1390 <mulib_port_test_step+0x200>)
    1236:	4c48      	ldr	r4, [pc, #288]	; (1358 <mulib_port_test_step+0x1c8>)
    1238:	47a0      	blx	r4
  test_print_time(mu_port_rtc_now());
    123a:	4b44      	ldr	r3, [pc, #272]	; (134c <mulib_port_test_step+0x1bc>)
    123c:	4798      	blx	r3
    123e:	4b48      	ldr	r3, [pc, #288]	; (1360 <mulib_port_test_step+0x1d0>)
    1240:	4798      	blx	r3
  test_port_printf("\r\n");
    1242:	4848      	ldr	r0, [pc, #288]	; (1364 <mulib_port_test_step+0x1d4>)
    1244:	47a0      	blx	r4
  test_port_printf("waiting for button press (synchronous)...");
    1246:	4856      	ldr	r0, [pc, #344]	; (13a0 <mulib_port_test_step+0x210>)
    1248:	47a0      	blx	r4
  while (!mu_port_button_is_pressed()) {
    124a:	4c56      	ldr	r4, [pc, #344]	; (13a4 <mulib_port_test_step+0x214>)
    124c:	47a0      	blx	r4
    124e:	2800      	cmp	r0, #0
    1250:	d0fc      	beq.n	124c <mulib_port_test_step+0xbc>
  test_port_printf("received button press.\r\n");
    1252:	4855      	ldr	r0, [pc, #340]	; (13a8 <mulib_port_test_step+0x218>)
    1254:	4b40      	ldr	r3, [pc, #256]	; (1358 <mulib_port_test_step+0x1c8>)
    1256:	4798      	blx	r3
    test_wait_ms(10);
    1258:	4d45      	ldr	r5, [pc, #276]	; (1370 <mulib_port_test_step+0x1e0>)
  } while (mu_port_button_is_pressed());
    125a:	4c52      	ldr	r4, [pc, #328]	; (13a4 <mulib_port_test_step+0x214>)
    test_wait_ms(10);
    125c:	200a      	movs	r0, #10
    125e:	47a8      	blx	r5
  } while (mu_port_button_is_pressed());
    1260:	47a0      	blx	r4
    1262:	2800      	cmp	r0, #0
    1264:	d1fa      	bne.n	125c <mulib_port_test_step+0xcc>
  s_button_pressed = false;
    1266:	2200      	movs	r2, #0
    1268:	4b39      	ldr	r3, [pc, #228]	; (1350 <mulib_port_test_step+0x1c0>)
    126a:	701a      	strb	r2, [r3, #0]
  mu_port_button_set_cb(button_press_cb, NULL);
    126c:	2100      	movs	r1, #0
    126e:	484f      	ldr	r0, [pc, #316]	; (13ac <mulib_port_test_step+0x21c>)
    1270:	4b4f      	ldr	r3, [pc, #316]	; (13b0 <mulib_port_test_step+0x220>)
    1272:	4798      	blx	r3
  test_port_printf("waiting for button press (asynchronous)...");
    1274:	484f      	ldr	r0, [pc, #316]	; (13b4 <mulib_port_test_step+0x224>)
    1276:	4b38      	ldr	r3, [pc, #224]	; (1358 <mulib_port_test_step+0x1c8>)
    1278:	4798      	blx	r3
  while (!s_button_pressed) {
    127a:	4a35      	ldr	r2, [pc, #212]	; (1350 <mulib_port_test_step+0x1c0>)
    127c:	7813      	ldrb	r3, [r2, #0]
    127e:	2b00      	cmp	r3, #0
    1280:	d0fc      	beq.n	127c <mulib_port_test_step+0xec>
  test_port_printf("received button press.\r\n");
    1282:	4849      	ldr	r0, [pc, #292]	; (13a8 <mulib_port_test_step+0x218>)
    1284:	4c34      	ldr	r4, [pc, #208]	; (1358 <mulib_port_test_step+0x1c8>)
    1286:	47a0      	blx	r4
  test_port_printf("waiting for keyboard input (synchronous)...");
    1288:	484b      	ldr	r0, [pc, #300]	; (13b8 <mulib_port_test_step+0x228>)
    128a:	47a0      	blx	r4
  while (!mu_port_serial_can_read()) {
    128c:	4c4b      	ldr	r4, [pc, #300]	; (13bc <mulib_port_test_step+0x22c>)
    128e:	e000      	b.n	1292 <mulib_port_test_step+0x102>
    asm("nop");
    1290:	46c0      	nop			; (mov r8, r8)
  while (!mu_port_serial_can_read()) {
    1292:	47a0      	blx	r4
    1294:	2800      	cmp	r0, #0
    1296:	d0fb      	beq.n	1290 <mulib_port_test_step+0x100>
  c = mu_port_serial_read(&c, 1);
    1298:	466b      	mov	r3, sp
    129a:	1ddc      	adds	r4, r3, #7
    129c:	2101      	movs	r1, #1
    129e:	0020      	movs	r0, r4
    12a0:	4b47      	ldr	r3, [pc, #284]	; (13c0 <mulib_port_test_step+0x230>)
    12a2:	4798      	blx	r3
    12a4:	0001      	movs	r1, r0
    12a6:	7020      	strb	r0, [r4, #0]
  test_port_printf("received '%c'\r\n", c);
    12a8:	4846      	ldr	r0, [pc, #280]	; (13c4 <mulib_port_test_step+0x234>)
    12aa:	4c2b      	ldr	r4, [pc, #172]	; (1358 <mulib_port_test_step+0x1c8>)
    12ac:	47a0      	blx	r4
  test_port_printf("waiting for keyboard input (asynchronous)...");
    12ae:	4846      	ldr	r0, [pc, #280]	; (13c8 <mulib_port_test_step+0x238>)
    12b0:	47a0      	blx	r4
  s_char_available = false;
    12b2:	4c27      	ldr	r4, [pc, #156]	; (1350 <mulib_port_test_step+0x1c0>)
    12b4:	2300      	movs	r3, #0
    12b6:	7063      	strb	r3, [r4, #1]
  mu_port_serial_set_read_cb(serial_read_cb, NULL);
    12b8:	2100      	movs	r1, #0
    12ba:	4844      	ldr	r0, [pc, #272]	; (13cc <mulib_port_test_step+0x23c>)
    12bc:	4b44      	ldr	r3, [pc, #272]	; (13d0 <mulib_port_test_step+0x240>)
    12be:	4798      	blx	r3
  while (!s_char_available) {
    12c0:	7863      	ldrb	r3, [r4, #1]
    12c2:	2b00      	cmp	r3, #0
    12c4:	d104      	bne.n	12d0 <mulib_port_test_step+0x140>
    12c6:	4a22      	ldr	r2, [pc, #136]	; (1350 <mulib_port_test_step+0x1c0>)
    asm("nop");
    12c8:	46c0      	nop			; (mov r8, r8)
  while (!s_char_available) {
    12ca:	7853      	ldrb	r3, [r2, #1]
    12cc:	2b00      	cmp	r3, #0
    12ce:	d0fb      	beq.n	12c8 <mulib_port_test_step+0x138>
  c = mu_port_serial_read(&c, 1);
    12d0:	466b      	mov	r3, sp
    12d2:	1ddc      	adds	r4, r3, #7
    12d4:	2101      	movs	r1, #1
    12d6:	0020      	movs	r0, r4
    12d8:	4b39      	ldr	r3, [pc, #228]	; (13c0 <mulib_port_test_step+0x230>)
    12da:	4798      	blx	r3
    12dc:	0001      	movs	r1, r0
    12de:	7020      	strb	r0, [r4, #0]
  test_port_printf("received '%c'\r\n", c);
    12e0:	4838      	ldr	r0, [pc, #224]	; (13c4 <mulib_port_test_step+0x234>)
    12e2:	4c1d      	ldr	r4, [pc, #116]	; (1358 <mulib_port_test_step+0x1c8>)
    12e4:	47a0      	blx	r4
  test_port_printf("sleeping for 2.5 seconds...");
    12e6:	483b      	ldr	r0, [pc, #236]	; (13d4 <mulib_port_test_step+0x244>)
    12e8:	47a0      	blx	r4
  while (!mu_port_serial_can_write()) {
    12ea:	4c3b      	ldr	r4, [pc, #236]	; (13d8 <mulib_port_test_step+0x248>)
    12ec:	e000      	b.n	12f0 <mulib_port_test_step+0x160>
	  asm("nop");
    12ee:	46c0      	nop			; (mov r8, r8)
  while (!mu_port_serial_can_write()) {
    12f0:	47a0      	blx	r4
    12f2:	2800      	cmp	r0, #0
    12f4:	d0fb      	beq.n	12ee <mulib_port_test_step+0x15e>
  mu_port_sleep_until(mu_port_time_offset(mu_port_rtc_now(),
    12f6:	4d15      	ldr	r5, [pc, #84]	; (134c <mulib_port_test_step+0x1bc>)
    12f8:	47a8      	blx	r5
    12fa:	0004      	movs	r4, r0
    12fc:	481b      	ldr	r0, [pc, #108]	; (136c <mulib_port_test_step+0x1dc>)
    12fe:	4b20      	ldr	r3, [pc, #128]	; (1380 <mulib_port_test_step+0x1f0>)
    1300:	4798      	blx	r3
    1302:	0001      	movs	r1, r0
    1304:	0020      	movs	r0, r4
    1306:	4b1f      	ldr	r3, [pc, #124]	; (1384 <mulib_port_test_step+0x1f4>)
    1308:	4798      	blx	r3
    130a:	4b34      	ldr	r3, [pc, #208]	; (13dc <mulib_port_test_step+0x24c>)
    130c:	4798      	blx	r3
  test_port_printf("done.  time is now ");
    130e:	4820      	ldr	r0, [pc, #128]	; (1390 <mulib_port_test_step+0x200>)
    1310:	4c11      	ldr	r4, [pc, #68]	; (1358 <mulib_port_test_step+0x1c8>)
    1312:	47a0      	blx	r4
  test_print_time(mu_port_rtc_now());
    1314:	47a8      	blx	r5
    1316:	4b12      	ldr	r3, [pc, #72]	; (1360 <mulib_port_test_step+0x1d0>)
    1318:	4798      	blx	r3
  test_port_printf("\r\n");
    131a:	4812      	ldr	r0, [pc, #72]	; (1364 <mulib_port_test_step+0x1d4>)
    131c:	47a0      	blx	r4
  test_port_printf("sleeping until button press...");
    131e:	4830      	ldr	r0, [pc, #192]	; (13e0 <mulib_port_test_step+0x250>)
    1320:	47a0      	blx	r4
  while (!mu_port_serial_can_write()) {
    1322:	4c2d      	ldr	r4, [pc, #180]	; (13d8 <mulib_port_test_step+0x248>)
    1324:	e000      	b.n	1328 <mulib_port_test_step+0x198>
	  asm("nop");
    1326:	46c0      	nop			; (mov r8, r8)
  while (!mu_port_serial_can_write()) {
    1328:	47a0      	blx	r4
    132a:	2800      	cmp	r0, #0
    132c:	d0fb      	beq.n	1326 <mulib_port_test_step+0x196>
  mu_port_sleep();
    132e:	4b2d      	ldr	r3, [pc, #180]	; (13e4 <mulib_port_test_step+0x254>)
    1330:	4798      	blx	r3
  test_port_printf("done.  time is now ");
    1332:	4817      	ldr	r0, [pc, #92]	; (1390 <mulib_port_test_step+0x200>)
    1334:	4c08      	ldr	r4, [pc, #32]	; (1358 <mulib_port_test_step+0x1c8>)
    1336:	47a0      	blx	r4
  test_print_time(mu_port_rtc_now());
    1338:	4b04      	ldr	r3, [pc, #16]	; (134c <mulib_port_test_step+0x1bc>)
    133a:	4798      	blx	r3
    133c:	4b08      	ldr	r3, [pc, #32]	; (1360 <mulib_port_test_step+0x1d0>)
    133e:	4798      	blx	r3
  test_port_printf("\r\n");
    1340:	4808      	ldr	r0, [pc, #32]	; (1364 <mulib_port_test_step+0x1d4>)
    1342:	47a0      	blx	r4
  test_port_printf("end of mu_port_test\r\n================\r\n");
    1344:	4828      	ldr	r0, [pc, #160]	; (13e8 <mulib_port_test_step+0x258>)
    1346:	47a0      	blx	r4
}
    1348:	b003      	add	sp, #12
    134a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    134c:	00001575 	.word	0x00001575
    1350:	200000a8 	.word	0x200000a8
    1354:	00002440 	.word	0x00002440
    1358:	00001105 	.word	0x00001105
    135c:	0000246c 	.word	0x0000246c
    1360:	00001159 	.word	0x00001159
    1364:	0000247c 	.word	0x0000247c
    1368:	00002480 	.word	0x00002480
    136c:	000009c4 	.word	0x000009c4
    1370:	000010c5 	.word	0x000010c5
    1374:	0000249c 	.word	0x0000249c
    1378:	000010b9 	.word	0x000010b9
    137c:	00001589 	.word	0x00001589
    1380:	00001519 	.word	0x00001519
    1384:	00001509 	.word	0x00001509
    1388:	000015a5 	.word	0x000015a5
    138c:	000024b4 	.word	0x000024b4
    1390:	000024dc 	.word	0x000024dc
    1394:	000024f0 	.word	0x000024f0
    1398:	000015f5 	.word	0x000015f5
    139c:	000015d5 	.word	0x000015d5
    13a0:	00002510 	.word	0x00002510
    13a4:	00001635 	.word	0x00001635
    13a8:	0000253c 	.word	0x0000253c
    13ac:	000010a1 	.word	0x000010a1
    13b0:	00001671 	.word	0x00001671
    13b4:	00002558 	.word	0x00002558
    13b8:	00002584 	.word	0x00002584
    13bc:	000016f5 	.word	0x000016f5
    13c0:	000016d1 	.word	0x000016d1
    13c4:	000025b0 	.word	0x000025b0
    13c8:	000025c0 	.word	0x000025c0
    13cc:	000010ad 	.word	0x000010ad
    13d0:	0000170d 	.word	0x0000170d
    13d4:	000025f0 	.word	0x000025f0
    13d8:	000016b1 	.word	0x000016b1
    13dc:	00001729 	.word	0x00001729
    13e0:	0000260c 	.word	0x0000260c
    13e4:	00001755 	.word	0x00001755
    13e8:	0000262c 	.word	0x0000262c

000013ec <button_cb_trampoline>:
void mu_port_sleep(void) { go_to_sleep(); }

// =============================================================================
// private (local) code

void button_cb_trampoline(void) {
    13ec:	b510      	push	{r4, lr}
  if (s_port.button_cb) {
    13ee:	4b04      	ldr	r3, [pc, #16]	; (1400 <button_cb_trampoline+0x14>)
    13f0:	681b      	ldr	r3, [r3, #0]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d002      	beq.n	13fc <button_cb_trampoline+0x10>
    s_port.button_cb(s_port.button_cb_arg);
    13f6:	4a02      	ldr	r2, [pc, #8]	; (1400 <button_cb_trampoline+0x14>)
    13f8:	6850      	ldr	r0, [r2, #4]
    13fa:	4798      	blx	r3
  }
}
    13fc:	bd10      	pop	{r4, pc}
    13fe:	46c0      	nop			; (mov r8, r8)
    1400:	200000e4 	.word	0x200000e4

00001404 <tx_cb_trampoline>:

void tx_cb_trampoline(const struct usart_async_descriptor *const io_descr) {
    1404:	b510      	push	{r4, lr}
  // arrive here when the previous call to mu_port_serial_write() completes.
  s_tx_in_progress = false;
    1406:	4b05      	ldr	r3, [pc, #20]	; (141c <tx_cb_trampoline+0x18>)
    1408:	2100      	movs	r1, #0
    140a:	222c      	movs	r2, #44	; 0x2c
    140c:	5499      	strb	r1, [r3, r2]
  if (s_port.tx_cb) {
    140e:	689b      	ldr	r3, [r3, #8]
    1410:	2b00      	cmp	r3, #0
    1412:	d002      	beq.n	141a <tx_cb_trampoline+0x16>
    s_port.tx_cb(s_port.tx_cb_arg);
    1414:	4a01      	ldr	r2, [pc, #4]	; (141c <tx_cb_trampoline+0x18>)
    1416:	68d0      	ldr	r0, [r2, #12]
    1418:	4798      	blx	r3
  }
}
    141a:	bd10      	pop	{r4, pc}
    141c:	200000e4 	.word	0x200000e4

00001420 <rtc_cb_trampoline>:
      s_port.rx_cb(s_port.rx_cb_arg);
    }
  }
}

void rtc_cb_trampoline(struct calendar_dev *const dev) {
    1420:	b510      	push	{r4, lr}
  // Arrive here when the RTC count register matches the RTC compare register.
  // Even if the user hasn't registered a callback, this will wake the processor
  // from sleep...
  if (s_port.rtc_cb) {
    1422:	4b04      	ldr	r3, [pc, #16]	; (1434 <rtc_cb_trampoline+0x14>)
    1424:	699b      	ldr	r3, [r3, #24]
    1426:	2b00      	cmp	r3, #0
    1428:	d002      	beq.n	1430 <rtc_cb_trampoline+0x10>
    s_port.rtc_cb(s_port.rtc_cb_arg);
    142a:	4a02      	ldr	r2, [pc, #8]	; (1434 <rtc_cb_trampoline+0x14>)
    142c:	69d0      	ldr	r0, [r2, #28]
    142e:	4798      	blx	r3
  }
}
    1430:	bd10      	pop	{r4, pc}
    1432:	46c0      	nop			; (mov r8, r8)
    1434:	200000e4 	.word	0x200000e4

00001438 <rx_cb_trampoline>:
void rx_cb_trampoline(const struct usart_async_descriptor *const io_descr) {
    1438:	b510      	push	{r4, lr}
  if (s_port.rx_buf_count == s_port.rx_buf_size) {
    143a:	4b0e      	ldr	r3, [pc, #56]	; (1474 <rx_cb_trampoline+0x3c>)
    143c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1440:	4299      	cmp	r1, r3
    1442:	d00d      	beq.n	1460 <rx_cb_trampoline+0x28>
  io_read(s_usart_descriptor, &s_port.rx_buf[s_port.rx_buf_count++], 1);
    1444:	4c0b      	ldr	r4, [pc, #44]	; (1474 <rx_cb_trampoline+0x3c>)
    1446:	1c4b      	adds	r3, r1, #1
    1448:	62a3      	str	r3, [r4, #40]	; 0x28
    144a:	6a23      	ldr	r3, [r4, #32]
    144c:	469c      	mov	ip, r3
    144e:	4461      	add	r1, ip
    1450:	2201      	movs	r2, #1
    1452:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1454:	4b08      	ldr	r3, [pc, #32]	; (1478 <rx_cb_trampoline+0x40>)
    1456:	4798      	blx	r3
  if (s_port.rx_buf_count == s_port.rx_buf_size) {
    1458:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    145a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    145c:	429a      	cmp	r2, r3
    145e:	d000      	beq.n	1462 <rx_cb_trampoline+0x2a>
}
    1460:	bd10      	pop	{r4, pc}
    if (s_port.rx_cb) {
    1462:	4b04      	ldr	r3, [pc, #16]	; (1474 <rx_cb_trampoline+0x3c>)
    1464:	691b      	ldr	r3, [r3, #16]
    1466:	2b00      	cmp	r3, #0
    1468:	d0fa      	beq.n	1460 <rx_cb_trampoline+0x28>
      s_port.rx_cb(s_port.rx_cb_arg);
    146a:	4a02      	ldr	r2, [pc, #8]	; (1474 <rx_cb_trampoline+0x3c>)
    146c:	6950      	ldr	r0, [r2, #20]
    146e:	4798      	blx	r3
    1470:	e7f6      	b.n	1460 <rx_cb_trampoline+0x28>
    1472:	46c0      	nop			; (mov r8, r8)
    1474:	200000e4 	.word	0x200000e4
    1478:	000004f5 	.word	0x000004f5

0000147c <mu_port_init>:
void mu_port_init(void) {
    147c:	b570      	push	{r4, r5, r6, lr}
  memset(&s_port, 0, sizeof(s_port));
    147e:	4c14      	ldr	r4, [pc, #80]	; (14d0 <mu_port_init+0x54>)
    1480:	222c      	movs	r2, #44	; 0x2c
    1482:	2100      	movs	r1, #0
    1484:	0020      	movs	r0, r4
    1486:	4b13      	ldr	r3, [pc, #76]	; (14d4 <mu_port_init+0x58>)
    1488:	4798      	blx	r3
  ext_irq_register(PIN_PA15, button_cb_trampoline);
    148a:	4913      	ldr	r1, [pc, #76]	; (14d8 <mu_port_init+0x5c>)
    148c:	200f      	movs	r0, #15
    148e:	4b13      	ldr	r3, [pc, #76]	; (14dc <mu_port_init+0x60>)
    1490:	4798      	blx	r3
  s_tx_in_progress = false;
    1492:	2200      	movs	r2, #0
    1494:	232c      	movs	r3, #44	; 0x2c
    1496:	54e2      	strb	r2, [r4, r3]
  usart_async_get_io_descriptor(&USART_0, &s_usart_descriptor);
    1498:	0021      	movs	r1, r4
    149a:	3130      	adds	r1, #48	; 0x30
    149c:	4c10      	ldr	r4, [pc, #64]	; (14e0 <mu_port_init+0x64>)
    149e:	0020      	movs	r0, r4
    14a0:	4b10      	ldr	r3, [pc, #64]	; (14e4 <mu_port_init+0x68>)
    14a2:	4798      	blx	r3
  usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, tx_cb_trampoline);
    14a4:	4a10      	ldr	r2, [pc, #64]	; (14e8 <mu_port_init+0x6c>)
    14a6:	2101      	movs	r1, #1
    14a8:	0020      	movs	r0, r4
    14aa:	4d10      	ldr	r5, [pc, #64]	; (14ec <mu_port_init+0x70>)
    14ac:	47a8      	blx	r5
  usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, rx_cb_trampoline);
    14ae:	4a10      	ldr	r2, [pc, #64]	; (14f0 <mu_port_init+0x74>)
    14b0:	2100      	movs	r1, #0
    14b2:	0020      	movs	r0, r4
    14b4:	47a8      	blx	r5
  usart_async_enable(&USART_0);
    14b6:	0020      	movs	r0, r4
    14b8:	4b0e      	ldr	r3, [pc, #56]	; (14f4 <mu_port_init+0x78>)
    14ba:	4798      	blx	r3
  calendar_enable(&CALENDAR_0); // start RTC
    14bc:	4c0e      	ldr	r4, [pc, #56]	; (14f8 <mu_port_init+0x7c>)
    14be:	0020      	movs	r0, r4
    14c0:	4b0e      	ldr	r3, [pc, #56]	; (14fc <mu_port_init+0x80>)
    14c2:	4798      	blx	r3
  _calendar_register_callback(&CALENDAR_0.device, rtc_cb_trampoline);
    14c4:	490e      	ldr	r1, [pc, #56]	; (1500 <mu_port_init+0x84>)
    14c6:	0020      	movs	r0, r4
    14c8:	4b0e      	ldr	r3, [pc, #56]	; (1504 <mu_port_init+0x88>)
    14ca:	4798      	blx	r3
}
    14cc:	bd70      	pop	{r4, r5, r6, pc}
    14ce:	46c0      	nop			; (mov r8, r8)
    14d0:	200000e4 	.word	0x200000e4
    14d4:	00001aed 	.word	0x00001aed
    14d8:	000013ed 	.word	0x000013ed
    14dc:	00000479 	.word	0x00000479
    14e0:	2000013c 	.word	0x2000013c
    14e4:	000007d1 	.word	0x000007d1
    14e8:	00001405 	.word	0x00001405
    14ec:	000007fd 	.word	0x000007fd
    14f0:	00001439 	.word	0x00001439
    14f4:	000007a5 	.word	0x000007a5
    14f8:	20000120 	.word	0x20000120
    14fc:	000003f1 	.word	0x000003f1
    1500:	00001421 	.word	0x00001421
    1504:	00000c95 	.word	0x00000c95

00001508 <mu_port_time_offset>:
  return t + dt;
    1508:	1808      	adds	r0, r1, r0
}
    150a:	4770      	bx	lr

0000150c <mu_port_time_difference>:
  return t1 - t2;
    150c:	1a40      	subs	r0, r0, r1
}
    150e:	4770      	bx	lr

00001510 <mu_port_time_precedes>:
  return t1 - t2;
    1510:	1a40      	subs	r0, r0, r1
  return mu_port_time_difference(t1, t2) > MAX_DURATION;
    1512:	0fc0      	lsrs	r0, r0, #31
}
    1514:	4770      	bx	lr
	...

00001518 <mu_port_time_ms_to_duration>:
mu_port_time_dt mu_port_time_ms_to_duration(mu_port_time_ms_dt ms) {
    1518:	b510      	push	{r4, lr}
  return quo_rounded(ms * CONF_GCLK_RTC_FREQUENCY, 1000);
    151a:	03c0      	lsls	r0, r0, #15
  //   (y < 0) is false (zero) if x is non-negative
  //   (x < 0) ^ (y < 0) is true if x and y have opposite signs
  //   x/y would be the quotient, but it is truncated towards zero.  To round:
  //   (x + y/2)/y is the rounded quotient when x and y have the same sign
  //   (x - y/2)/y is the rounded quotient when x and y have opposite signs
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
    151c:	d506      	bpl.n	152c <mu_port_time_ms_to_duration+0x14>
    151e:	38f5      	subs	r0, #245	; 0xf5
    1520:	38ff      	subs	r0, #255	; 0xff
    1522:	21fa      	movs	r1, #250	; 0xfa
    1524:	0089      	lsls	r1, r1, #2
    1526:	4b05      	ldr	r3, [pc, #20]	; (153c <mu_port_time_ms_to_duration+0x24>)
    1528:	4798      	blx	r3
}
    152a:	bd10      	pop	{r4, pc}
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
    152c:	30f5      	adds	r0, #245	; 0xf5
    152e:	30ff      	adds	r0, #255	; 0xff
    1530:	21fa      	movs	r1, #250	; 0xfa
    1532:	0089      	lsls	r1, r1, #2
    1534:	4b01      	ldr	r3, [pc, #4]	; (153c <mu_port_time_ms_to_duration+0x24>)
    1536:	4798      	blx	r3
    1538:	e7f7      	b.n	152a <mu_port_time_ms_to_duration+0x12>
    153a:	46c0      	nop			; (mov r8, r8)
    153c:	00001879 	.word	0x00001879

00001540 <mu_port_time_duration_to_ms>:
  return quo_rounded(dt * 1000, CONF_GCLK_RTC_FREQUENCY);
    1540:	23fa      	movs	r3, #250	; 0xfa
    1542:	009b      	lsls	r3, r3, #2
    1544:	4343      	muls	r3, r0
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
    1546:	2b00      	cmp	r3, #0
    1548:	da08      	bge.n	155c <mu_port_time_duration_to_ms+0x1c>
    154a:	4a09      	ldr	r2, [pc, #36]	; (1570 <mu_port_time_duration_to_ms+0x30>)
    154c:	4694      	mov	ip, r2
    154e:	4463      	add	r3, ip
    1550:	17d8      	asrs	r0, r3, #31
    1552:	0440      	lsls	r0, r0, #17
    1554:	0c40      	lsrs	r0, r0, #17
    1556:	18c0      	adds	r0, r0, r3
    1558:	13c0      	asrs	r0, r0, #15
}
    155a:	4770      	bx	lr
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
    155c:	2280      	movs	r2, #128	; 0x80
    155e:	01d2      	lsls	r2, r2, #7
    1560:	4694      	mov	ip, r2
    1562:	4463      	add	r3, ip
    1564:	17d8      	asrs	r0, r3, #31
    1566:	0440      	lsls	r0, r0, #17
    1568:	0c40      	lsrs	r0, r0, #17
    156a:	18c0      	adds	r0, r0, r3
    156c:	13c0      	asrs	r0, r0, #15
    156e:	e7f4      	b.n	155a <mu_port_time_duration_to_ms+0x1a>
    1570:	ffffc000 	.word	0xffffc000

00001574 <mu_port_rtc_now>:
  return hri_rtcmode0_read_COUNT_COUNT_bf(CALENDAR_0.device.hw);
    1574:	4b03      	ldr	r3, [pc, #12]	; (1584 <mu_port_rtc_now+0x10>)
    1576:	681a      	ldr	r2, [r3, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1578:	7a93      	ldrb	r3, [r2, #10]
    157a:	09db      	lsrs	r3, r3, #7
    157c:	d1fc      	bne.n	1578 <mu_port_rtc_now+0x4>
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
    157e:	6910      	ldr	r0, [r2, #16]
}
    1580:	4770      	bx	lr
    1582:	46c0      	nop			; (mov r8, r8)
    1584:	20000120 	.word	0x20000120

00001588 <mu_port_rtc_set_cb>:
  if (fn) {
    1588:	2800      	cmp	r0, #0
    158a:	d003      	beq.n	1594 <mu_port_rtc_set_cb+0xc>
    s_port.rtc_cb = fn;
    158c:	4b04      	ldr	r3, [pc, #16]	; (15a0 <mu_port_rtc_set_cb+0x18>)
    158e:	6198      	str	r0, [r3, #24]
    s_port.rtc_cb_arg = arg;
    1590:	61d9      	str	r1, [r3, #28]
}
    1592:	4770      	bx	lr
    s_port.rtc_cb = NULL;
    1594:	4b02      	ldr	r3, [pc, #8]	; (15a0 <mu_port_rtc_set_cb+0x18>)
    1596:	2200      	movs	r2, #0
    1598:	619a      	str	r2, [r3, #24]
    s_port.rtc_cb_arg = NULL;
    159a:	61da      	str	r2, [r3, #28]
}
    159c:	e7f9      	b.n	1592 <mu_port_rtc_set_cb+0xa>
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	200000e4 	.word	0x200000e4

000015a4 <mu_port_rtc_alarm_at>:
void mu_port_rtc_alarm_at(mu_port_time_t at) {
    15a4:	b510      	push	{r4, lr}
    15a6:	0001      	movs	r1, r0
  _calendar_set_comp(&CALENDAR_0.device, at);
    15a8:	4807      	ldr	r0, [pc, #28]	; (15c8 <mu_port_rtc_alarm_at+0x24>)
    15aa:	4b08      	ldr	r3, [pc, #32]	; (15cc <mu_port_rtc_alarm_at+0x28>)
    15ac:	4798      	blx	r3
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    15ae:	4b08      	ldr	r3, [pc, #32]	; (15d0 <mu_port_rtc_alarm_at+0x2c>)
    15b0:	885a      	ldrh	r2, [r3, #2]
    15b2:	2180      	movs	r1, #128	; 0x80
    15b4:	01c9      	lsls	r1, r1, #7
    15b6:	430a      	orrs	r2, r1
    15b8:	805a      	strh	r2, [r3, #2]
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
    15ba:	885a      	ldrh	r2, [r3, #2]
    15bc:	2180      	movs	r1, #128	; 0x80
    15be:	0209      	lsls	r1, r1, #8
    15c0:	430a      	orrs	r2, r1
    15c2:	805a      	strh	r2, [r3, #2]
}
    15c4:	bd10      	pop	{r4, pc}
    15c6:	46c0      	nop			; (mov r8, r8)
    15c8:	20000120 	.word	0x20000120
    15cc:	00000db1 	.word	0x00000db1
    15d0:	40001400 	.word	0x40001400

000015d4 <mu_port_led_set>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    15d4:	2800      	cmp	r0, #0
    15d6:	d006      	beq.n	15e6 <mu_port_led_set+0x12>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    15d8:	2180      	movs	r1, #128	; 0x80
    15da:	05c9      	lsls	r1, r1, #23
    15dc:	2394      	movs	r3, #148	; 0x94
    15de:	22c0      	movs	r2, #192	; 0xc0
    15e0:	05d2      	lsls	r2, r2, #23
    15e2:	50d1      	str	r1, [r2, r3]
void mu_port_led_set(bool on) { gpio_set_pin_level(USER_LED_AL, !on); }
    15e4:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    15e6:	2180      	movs	r1, #128	; 0x80
    15e8:	05c9      	lsls	r1, r1, #23
    15ea:	2398      	movs	r3, #152	; 0x98
    15ec:	22c0      	movs	r2, #192	; 0xc0
    15ee:	05d2      	lsls	r2, r2, #23
    15f0:	50d1      	str	r1, [r2, r3]
    15f2:	e7f7      	b.n	15e4 <mu_port_led_set+0x10>

000015f4 <mu_port_led_get>:
bool mu_port_led_get(void) { return !gpio_get_pin_level(USER_LED_AL); }
    15f4:	b510      	push	{r4, lr}
    15f6:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    15f8:	a801      	add	r0, sp, #4
    15fa:	4b0b      	ldr	r3, [pc, #44]	; (1628 <mu_port_led_get+0x34>)
    15fc:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    15fe:	22c0      	movs	r2, #192	; 0xc0
    1600:	05d2      	lsls	r2, r2, #23
    1602:	2380      	movs	r3, #128	; 0x80
    1604:	58d4      	ldr	r4, [r2, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1606:	3320      	adds	r3, #32
    1608:	4908      	ldr	r1, [pc, #32]	; (162c <mu_port_led_get+0x38>)
    160a:	58cb      	ldr	r3, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    160c:	2190      	movs	r1, #144	; 0x90
    160e:	5850      	ldr	r0, [r2, r1]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1610:	4058      	eors	r0, r3
    1612:	4004      	ands	r4, r0
    1614:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    1616:	a801      	add	r0, sp, #4
    1618:	4b05      	ldr	r3, [pc, #20]	; (1630 <mu_port_led_get+0x3c>)
    161a:	4798      	blx	r3
    161c:	0fa4      	lsrs	r4, r4, #30
    161e:	2001      	movs	r0, #1
    1620:	4044      	eors	r4, r0
    1622:	4020      	ands	r0, r4
    1624:	b002      	add	sp, #8
    1626:	bd10      	pop	{r4, pc}
    1628:	0000038d 	.word	0x0000038d
    162c:	41004400 	.word	0x41004400
    1630:	0000039b 	.word	0x0000039b

00001634 <mu_port_button_is_pressed>:
bool mu_port_button_is_pressed(void) {
    1634:	b510      	push	{r4, lr}
    1636:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
    1638:	a801      	add	r0, sp, #4
    163a:	4b0a      	ldr	r3, [pc, #40]	; (1664 <mu_port_button_is_pressed+0x30>)
    163c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    163e:	22c0      	movs	r2, #192	; 0xc0
    1640:	05d2      	lsls	r2, r2, #23
    1642:	6814      	ldr	r4, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1644:	4b08      	ldr	r3, [pc, #32]	; (1668 <mu_port_button_is_pressed+0x34>)
    1646:	6a1b      	ldr	r3, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1648:	6910      	ldr	r0, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    164a:	4058      	eors	r0, r3
    164c:	4004      	ands	r4, r0
    164e:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    1650:	a801      	add	r0, sp, #4
    1652:	4b06      	ldr	r3, [pc, #24]	; (166c <mu_port_button_is_pressed+0x38>)
    1654:	4798      	blx	r3
  return !gpio_get_pin_level(USER_BUTTON_AL);
    1656:	0be4      	lsrs	r4, r4, #15
    1658:	2001      	movs	r0, #1
    165a:	4044      	eors	r4, r0
    165c:	4020      	ands	r0, r4
}
    165e:	b002      	add	sp, #8
    1660:	bd10      	pop	{r4, pc}
    1662:	46c0      	nop			; (mov r8, r8)
    1664:	0000038d 	.word	0x0000038d
    1668:	41004400 	.word	0x41004400
    166c:	0000039b 	.word	0x0000039b

00001670 <mu_port_button_set_cb>:
  if (fn) {
    1670:	2800      	cmp	r0, #0
    1672:	d003      	beq.n	167c <mu_port_button_set_cb+0xc>
    s_port.button_cb = fn;
    1674:	4b04      	ldr	r3, [pc, #16]	; (1688 <mu_port_button_set_cb+0x18>)
    1676:	6018      	str	r0, [r3, #0]
    s_port.button_cb_arg = arg;
    1678:	6059      	str	r1, [r3, #4]
}
    167a:	4770      	bx	lr
    s_port.button_cb = NULL;
    167c:	4b02      	ldr	r3, [pc, #8]	; (1688 <mu_port_button_set_cb+0x18>)
    167e:	2200      	movs	r2, #0
    1680:	601a      	str	r2, [r3, #0]
    s_port.button_cb_arg = NULL;
    1682:	605a      	str	r2, [r3, #4]
}
    1684:	e7f9      	b.n	167a <mu_port_button_set_cb+0xa>
    1686:	46c0      	nop			; (mov r8, r8)
    1688:	200000e4 	.word	0x200000e4

0000168c <mu_port_serial_write>:
bool mu_port_serial_write(const uint8_t *const buf, int n_bytes) {
    168c:	b510      	push	{r4, lr}
    168e:	0004      	movs	r4, r0
  s_tx_in_progress = true;
    1690:	4b05      	ldr	r3, [pc, #20]	; (16a8 <mu_port_serial_write+0x1c>)
    1692:	2001      	movs	r0, #1
    1694:	222c      	movs	r2, #44	; 0x2c
    1696:	5498      	strb	r0, [r3, r2]
  if (io_write(s_usart_descriptor, buf, n_bytes) < 0) {
    1698:	b28a      	uxth	r2, r1
    169a:	6b18      	ldr	r0, [r3, #48]	; 0x30
    169c:	0021      	movs	r1, r4
    169e:	4b03      	ldr	r3, [pc, #12]	; (16ac <mu_port_serial_write+0x20>)
    16a0:	4798      	blx	r3
    16a2:	43c0      	mvns	r0, r0
    16a4:	0fc0      	lsrs	r0, r0, #31
}
    16a6:	bd10      	pop	{r4, pc}
    16a8:	200000e4 	.word	0x200000e4
    16ac:	000004c1 	.word	0x000004c1

000016b0 <mu_port_serial_can_write>:
bool mu_port_serial_can_write(void) {
    16b0:	b500      	push	{lr}
    16b2:	b083      	sub	sp, #12
  usart_async_get_status(&USART_0, &status);
    16b4:	4669      	mov	r1, sp
    16b6:	4804      	ldr	r0, [pc, #16]	; (16c8 <mu_port_serial_can_write+0x18>)
    16b8:	4b04      	ldr	r3, [pc, #16]	; (16cc <mu_port_serial_can_write+0x1c>)
    16ba:	4798      	blx	r3
  return status.flags == 0;
    16bc:	9800      	ldr	r0, [sp, #0]
    16be:	4243      	negs	r3, r0
    16c0:	4158      	adcs	r0, r3
    16c2:	b2c0      	uxtb	r0, r0
}
    16c4:	b003      	add	sp, #12
    16c6:	bd00      	pop	{pc}
    16c8:	2000013c 	.word	0x2000013c
    16cc:	000008a5 	.word	0x000008a5

000016d0 <mu_port_serial_read>:
bool mu_port_serial_read(uint8_t *const buf, int n_bytes) {
    16d0:	b510      	push	{r4, lr}
    16d2:	0004      	movs	r4, r0
  s_port.rx_buf = buf;
    16d4:	4b05      	ldr	r3, [pc, #20]	; (16ec <mu_port_serial_read+0x1c>)
    16d6:	6218      	str	r0, [r3, #32]
  s_port.rx_buf_size = n_bytes;
    16d8:	6259      	str	r1, [r3, #36]	; 0x24
  s_port.rx_buf_count = 0;
    16da:	2200      	movs	r2, #0
    16dc:	629a      	str	r2, [r3, #40]	; 0x28
  io_read(s_usart_descriptor, buf, 1);  // initiate one-byte read
    16de:	6b18      	ldr	r0, [r3, #48]	; 0x30
    16e0:	3201      	adds	r2, #1
    16e2:	0021      	movs	r1, r4
    16e4:	4b02      	ldr	r3, [pc, #8]	; (16f0 <mu_port_serial_read+0x20>)
    16e6:	4798      	blx	r3
}
    16e8:	2001      	movs	r0, #1
    16ea:	bd10      	pop	{r4, pc}
    16ec:	200000e4 	.word	0x200000e4
    16f0:	000004f5 	.word	0x000004f5

000016f4 <mu_port_serial_can_read>:
bool mu_port_serial_can_read(void) {
    16f4:	b510      	push	{r4, lr}
  return usart_async_is_rx_not_empty(&USART_0);
    16f6:	4803      	ldr	r0, [pc, #12]	; (1704 <mu_port_serial_can_read+0x10>)
    16f8:	4b03      	ldr	r3, [pc, #12]	; (1708 <mu_port_serial_can_read+0x14>)
    16fa:	4798      	blx	r3
    16fc:	1e43      	subs	r3, r0, #1
    16fe:	4198      	sbcs	r0, r3
    1700:	b2c0      	uxtb	r0, r0
}
    1702:	bd10      	pop	{r4, pc}
    1704:	2000013c 	.word	0x2000013c
    1708:	00000875 	.word	0x00000875

0000170c <mu_port_serial_set_read_cb>:
  if (fn) {
    170c:	2800      	cmp	r0, #0
    170e:	d003      	beq.n	1718 <mu_port_serial_set_read_cb+0xc>
    s_port.rx_cb = fn;
    1710:	4b04      	ldr	r3, [pc, #16]	; (1724 <mu_port_serial_set_read_cb+0x18>)
    1712:	6118      	str	r0, [r3, #16]
    s_port.rx_cb_arg = arg;
    1714:	6159      	str	r1, [r3, #20]
}
    1716:	4770      	bx	lr
    s_port.rx_cb = NULL;
    1718:	4b02      	ldr	r3, [pc, #8]	; (1724 <mu_port_serial_set_read_cb+0x18>)
    171a:	2200      	movs	r2, #0
    171c:	611a      	str	r2, [r3, #16]
    s_port.rx_cb_arg = NULL;
    171e:	615a      	str	r2, [r3, #20]
}
    1720:	e7f9      	b.n	1716 <mu_port_serial_set_read_cb+0xa>
    1722:	46c0      	nop			; (mov r8, r8)
    1724:	200000e4 	.word	0x200000e4

00001728 <mu_port_sleep_until>:
void mu_port_sleep_until(mu_port_time_t then) {
    1728:	b510      	push	{r4, lr}
    172a:	0004      	movs	r4, r0
  mu_port_time_t now = mu_port_rtc_now();
    172c:	4b06      	ldr	r3, [pc, #24]	; (1748 <mu_port_sleep_until+0x20>)
    172e:	4798      	blx	r3
  return t1 - t2;
    1730:	1a20      	subs	r0, r4, r0
  if (mu_port_time_difference(then, now) > MIN_SLEEP_DURATION) {
    1732:	2820      	cmp	r0, #32
    1734:	dc00      	bgt.n	1738 <mu_port_sleep_until+0x10>
}
    1736:	bd10      	pop	{r4, pc}
    mu_port_rtc_alarm_at(then);
    1738:	0020      	movs	r0, r4
    173a:	4b04      	ldr	r3, [pc, #16]	; (174c <mu_port_sleep_until+0x24>)
    173c:	4798      	blx	r3
  sleep(3); // in hal_sleep
    173e:	2003      	movs	r0, #3
    1740:	4b03      	ldr	r3, [pc, #12]	; (1750 <mu_port_sleep_until+0x28>)
    1742:	4798      	blx	r3
}
    1744:	e7f7      	b.n	1736 <mu_port_sleep_until+0xe>
    1746:	46c0      	nop			; (mov r8, r8)
    1748:	00001575 	.word	0x00001575
    174c:	000015a5 	.word	0x000015a5
    1750:	00000529 	.word	0x00000529

00001754 <mu_port_sleep>:
void mu_port_sleep(void) { go_to_sleep(); }
    1754:	b510      	push	{r4, lr}
  sleep(3); // in hal_sleep
    1756:	2003      	movs	r0, #3
    1758:	4b01      	ldr	r3, [pc, #4]	; (1760 <mu_port_sleep+0xc>)
    175a:	4798      	blx	r3
void mu_port_sleep(void) { go_to_sleep(); }
    175c:	bd10      	pop	{r4, pc}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	00000529 	.word	0x00000529

00001764 <__udivsi3>:
    1764:	2200      	movs	r2, #0
    1766:	0843      	lsrs	r3, r0, #1
    1768:	428b      	cmp	r3, r1
    176a:	d374      	bcc.n	1856 <__udivsi3+0xf2>
    176c:	0903      	lsrs	r3, r0, #4
    176e:	428b      	cmp	r3, r1
    1770:	d35f      	bcc.n	1832 <__udivsi3+0xce>
    1772:	0a03      	lsrs	r3, r0, #8
    1774:	428b      	cmp	r3, r1
    1776:	d344      	bcc.n	1802 <__udivsi3+0x9e>
    1778:	0b03      	lsrs	r3, r0, #12
    177a:	428b      	cmp	r3, r1
    177c:	d328      	bcc.n	17d0 <__udivsi3+0x6c>
    177e:	0c03      	lsrs	r3, r0, #16
    1780:	428b      	cmp	r3, r1
    1782:	d30d      	bcc.n	17a0 <__udivsi3+0x3c>
    1784:	22ff      	movs	r2, #255	; 0xff
    1786:	0209      	lsls	r1, r1, #8
    1788:	ba12      	rev	r2, r2
    178a:	0c03      	lsrs	r3, r0, #16
    178c:	428b      	cmp	r3, r1
    178e:	d302      	bcc.n	1796 <__udivsi3+0x32>
    1790:	1212      	asrs	r2, r2, #8
    1792:	0209      	lsls	r1, r1, #8
    1794:	d065      	beq.n	1862 <__udivsi3+0xfe>
    1796:	0b03      	lsrs	r3, r0, #12
    1798:	428b      	cmp	r3, r1
    179a:	d319      	bcc.n	17d0 <__udivsi3+0x6c>
    179c:	e000      	b.n	17a0 <__udivsi3+0x3c>
    179e:	0a09      	lsrs	r1, r1, #8
    17a0:	0bc3      	lsrs	r3, r0, #15
    17a2:	428b      	cmp	r3, r1
    17a4:	d301      	bcc.n	17aa <__udivsi3+0x46>
    17a6:	03cb      	lsls	r3, r1, #15
    17a8:	1ac0      	subs	r0, r0, r3
    17aa:	4152      	adcs	r2, r2
    17ac:	0b83      	lsrs	r3, r0, #14
    17ae:	428b      	cmp	r3, r1
    17b0:	d301      	bcc.n	17b6 <__udivsi3+0x52>
    17b2:	038b      	lsls	r3, r1, #14
    17b4:	1ac0      	subs	r0, r0, r3
    17b6:	4152      	adcs	r2, r2
    17b8:	0b43      	lsrs	r3, r0, #13
    17ba:	428b      	cmp	r3, r1
    17bc:	d301      	bcc.n	17c2 <__udivsi3+0x5e>
    17be:	034b      	lsls	r3, r1, #13
    17c0:	1ac0      	subs	r0, r0, r3
    17c2:	4152      	adcs	r2, r2
    17c4:	0b03      	lsrs	r3, r0, #12
    17c6:	428b      	cmp	r3, r1
    17c8:	d301      	bcc.n	17ce <__udivsi3+0x6a>
    17ca:	030b      	lsls	r3, r1, #12
    17cc:	1ac0      	subs	r0, r0, r3
    17ce:	4152      	adcs	r2, r2
    17d0:	0ac3      	lsrs	r3, r0, #11
    17d2:	428b      	cmp	r3, r1
    17d4:	d301      	bcc.n	17da <__udivsi3+0x76>
    17d6:	02cb      	lsls	r3, r1, #11
    17d8:	1ac0      	subs	r0, r0, r3
    17da:	4152      	adcs	r2, r2
    17dc:	0a83      	lsrs	r3, r0, #10
    17de:	428b      	cmp	r3, r1
    17e0:	d301      	bcc.n	17e6 <__udivsi3+0x82>
    17e2:	028b      	lsls	r3, r1, #10
    17e4:	1ac0      	subs	r0, r0, r3
    17e6:	4152      	adcs	r2, r2
    17e8:	0a43      	lsrs	r3, r0, #9
    17ea:	428b      	cmp	r3, r1
    17ec:	d301      	bcc.n	17f2 <__udivsi3+0x8e>
    17ee:	024b      	lsls	r3, r1, #9
    17f0:	1ac0      	subs	r0, r0, r3
    17f2:	4152      	adcs	r2, r2
    17f4:	0a03      	lsrs	r3, r0, #8
    17f6:	428b      	cmp	r3, r1
    17f8:	d301      	bcc.n	17fe <__udivsi3+0x9a>
    17fa:	020b      	lsls	r3, r1, #8
    17fc:	1ac0      	subs	r0, r0, r3
    17fe:	4152      	adcs	r2, r2
    1800:	d2cd      	bcs.n	179e <__udivsi3+0x3a>
    1802:	09c3      	lsrs	r3, r0, #7
    1804:	428b      	cmp	r3, r1
    1806:	d301      	bcc.n	180c <__udivsi3+0xa8>
    1808:	01cb      	lsls	r3, r1, #7
    180a:	1ac0      	subs	r0, r0, r3
    180c:	4152      	adcs	r2, r2
    180e:	0983      	lsrs	r3, r0, #6
    1810:	428b      	cmp	r3, r1
    1812:	d301      	bcc.n	1818 <__udivsi3+0xb4>
    1814:	018b      	lsls	r3, r1, #6
    1816:	1ac0      	subs	r0, r0, r3
    1818:	4152      	adcs	r2, r2
    181a:	0943      	lsrs	r3, r0, #5
    181c:	428b      	cmp	r3, r1
    181e:	d301      	bcc.n	1824 <__udivsi3+0xc0>
    1820:	014b      	lsls	r3, r1, #5
    1822:	1ac0      	subs	r0, r0, r3
    1824:	4152      	adcs	r2, r2
    1826:	0903      	lsrs	r3, r0, #4
    1828:	428b      	cmp	r3, r1
    182a:	d301      	bcc.n	1830 <__udivsi3+0xcc>
    182c:	010b      	lsls	r3, r1, #4
    182e:	1ac0      	subs	r0, r0, r3
    1830:	4152      	adcs	r2, r2
    1832:	08c3      	lsrs	r3, r0, #3
    1834:	428b      	cmp	r3, r1
    1836:	d301      	bcc.n	183c <__udivsi3+0xd8>
    1838:	00cb      	lsls	r3, r1, #3
    183a:	1ac0      	subs	r0, r0, r3
    183c:	4152      	adcs	r2, r2
    183e:	0883      	lsrs	r3, r0, #2
    1840:	428b      	cmp	r3, r1
    1842:	d301      	bcc.n	1848 <__udivsi3+0xe4>
    1844:	008b      	lsls	r3, r1, #2
    1846:	1ac0      	subs	r0, r0, r3
    1848:	4152      	adcs	r2, r2
    184a:	0843      	lsrs	r3, r0, #1
    184c:	428b      	cmp	r3, r1
    184e:	d301      	bcc.n	1854 <__udivsi3+0xf0>
    1850:	004b      	lsls	r3, r1, #1
    1852:	1ac0      	subs	r0, r0, r3
    1854:	4152      	adcs	r2, r2
    1856:	1a41      	subs	r1, r0, r1
    1858:	d200      	bcs.n	185c <__udivsi3+0xf8>
    185a:	4601      	mov	r1, r0
    185c:	4152      	adcs	r2, r2
    185e:	4610      	mov	r0, r2
    1860:	4770      	bx	lr
    1862:	e7ff      	b.n	1864 <__udivsi3+0x100>
    1864:	b501      	push	{r0, lr}
    1866:	2000      	movs	r0, #0
    1868:	f000 f8f0 	bl	1a4c <__aeabi_idiv0>
    186c:	bd02      	pop	{r1, pc}
    186e:	46c0      	nop			; (mov r8, r8)

00001870 <__aeabi_uidivmod>:
    1870:	2900      	cmp	r1, #0
    1872:	d0f7      	beq.n	1864 <__udivsi3+0x100>
    1874:	e776      	b.n	1764 <__udivsi3>
    1876:	4770      	bx	lr

00001878 <__divsi3>:
    1878:	4603      	mov	r3, r0
    187a:	430b      	orrs	r3, r1
    187c:	d47f      	bmi.n	197e <__divsi3+0x106>
    187e:	2200      	movs	r2, #0
    1880:	0843      	lsrs	r3, r0, #1
    1882:	428b      	cmp	r3, r1
    1884:	d374      	bcc.n	1970 <__divsi3+0xf8>
    1886:	0903      	lsrs	r3, r0, #4
    1888:	428b      	cmp	r3, r1
    188a:	d35f      	bcc.n	194c <__divsi3+0xd4>
    188c:	0a03      	lsrs	r3, r0, #8
    188e:	428b      	cmp	r3, r1
    1890:	d344      	bcc.n	191c <__divsi3+0xa4>
    1892:	0b03      	lsrs	r3, r0, #12
    1894:	428b      	cmp	r3, r1
    1896:	d328      	bcc.n	18ea <__divsi3+0x72>
    1898:	0c03      	lsrs	r3, r0, #16
    189a:	428b      	cmp	r3, r1
    189c:	d30d      	bcc.n	18ba <__divsi3+0x42>
    189e:	22ff      	movs	r2, #255	; 0xff
    18a0:	0209      	lsls	r1, r1, #8
    18a2:	ba12      	rev	r2, r2
    18a4:	0c03      	lsrs	r3, r0, #16
    18a6:	428b      	cmp	r3, r1
    18a8:	d302      	bcc.n	18b0 <__divsi3+0x38>
    18aa:	1212      	asrs	r2, r2, #8
    18ac:	0209      	lsls	r1, r1, #8
    18ae:	d065      	beq.n	197c <__divsi3+0x104>
    18b0:	0b03      	lsrs	r3, r0, #12
    18b2:	428b      	cmp	r3, r1
    18b4:	d319      	bcc.n	18ea <__divsi3+0x72>
    18b6:	e000      	b.n	18ba <__divsi3+0x42>
    18b8:	0a09      	lsrs	r1, r1, #8
    18ba:	0bc3      	lsrs	r3, r0, #15
    18bc:	428b      	cmp	r3, r1
    18be:	d301      	bcc.n	18c4 <__divsi3+0x4c>
    18c0:	03cb      	lsls	r3, r1, #15
    18c2:	1ac0      	subs	r0, r0, r3
    18c4:	4152      	adcs	r2, r2
    18c6:	0b83      	lsrs	r3, r0, #14
    18c8:	428b      	cmp	r3, r1
    18ca:	d301      	bcc.n	18d0 <__divsi3+0x58>
    18cc:	038b      	lsls	r3, r1, #14
    18ce:	1ac0      	subs	r0, r0, r3
    18d0:	4152      	adcs	r2, r2
    18d2:	0b43      	lsrs	r3, r0, #13
    18d4:	428b      	cmp	r3, r1
    18d6:	d301      	bcc.n	18dc <__divsi3+0x64>
    18d8:	034b      	lsls	r3, r1, #13
    18da:	1ac0      	subs	r0, r0, r3
    18dc:	4152      	adcs	r2, r2
    18de:	0b03      	lsrs	r3, r0, #12
    18e0:	428b      	cmp	r3, r1
    18e2:	d301      	bcc.n	18e8 <__divsi3+0x70>
    18e4:	030b      	lsls	r3, r1, #12
    18e6:	1ac0      	subs	r0, r0, r3
    18e8:	4152      	adcs	r2, r2
    18ea:	0ac3      	lsrs	r3, r0, #11
    18ec:	428b      	cmp	r3, r1
    18ee:	d301      	bcc.n	18f4 <__divsi3+0x7c>
    18f0:	02cb      	lsls	r3, r1, #11
    18f2:	1ac0      	subs	r0, r0, r3
    18f4:	4152      	adcs	r2, r2
    18f6:	0a83      	lsrs	r3, r0, #10
    18f8:	428b      	cmp	r3, r1
    18fa:	d301      	bcc.n	1900 <__divsi3+0x88>
    18fc:	028b      	lsls	r3, r1, #10
    18fe:	1ac0      	subs	r0, r0, r3
    1900:	4152      	adcs	r2, r2
    1902:	0a43      	lsrs	r3, r0, #9
    1904:	428b      	cmp	r3, r1
    1906:	d301      	bcc.n	190c <__divsi3+0x94>
    1908:	024b      	lsls	r3, r1, #9
    190a:	1ac0      	subs	r0, r0, r3
    190c:	4152      	adcs	r2, r2
    190e:	0a03      	lsrs	r3, r0, #8
    1910:	428b      	cmp	r3, r1
    1912:	d301      	bcc.n	1918 <__divsi3+0xa0>
    1914:	020b      	lsls	r3, r1, #8
    1916:	1ac0      	subs	r0, r0, r3
    1918:	4152      	adcs	r2, r2
    191a:	d2cd      	bcs.n	18b8 <__divsi3+0x40>
    191c:	09c3      	lsrs	r3, r0, #7
    191e:	428b      	cmp	r3, r1
    1920:	d301      	bcc.n	1926 <__divsi3+0xae>
    1922:	01cb      	lsls	r3, r1, #7
    1924:	1ac0      	subs	r0, r0, r3
    1926:	4152      	adcs	r2, r2
    1928:	0983      	lsrs	r3, r0, #6
    192a:	428b      	cmp	r3, r1
    192c:	d301      	bcc.n	1932 <__divsi3+0xba>
    192e:	018b      	lsls	r3, r1, #6
    1930:	1ac0      	subs	r0, r0, r3
    1932:	4152      	adcs	r2, r2
    1934:	0943      	lsrs	r3, r0, #5
    1936:	428b      	cmp	r3, r1
    1938:	d301      	bcc.n	193e <__divsi3+0xc6>
    193a:	014b      	lsls	r3, r1, #5
    193c:	1ac0      	subs	r0, r0, r3
    193e:	4152      	adcs	r2, r2
    1940:	0903      	lsrs	r3, r0, #4
    1942:	428b      	cmp	r3, r1
    1944:	d301      	bcc.n	194a <__divsi3+0xd2>
    1946:	010b      	lsls	r3, r1, #4
    1948:	1ac0      	subs	r0, r0, r3
    194a:	4152      	adcs	r2, r2
    194c:	08c3      	lsrs	r3, r0, #3
    194e:	428b      	cmp	r3, r1
    1950:	d301      	bcc.n	1956 <__divsi3+0xde>
    1952:	00cb      	lsls	r3, r1, #3
    1954:	1ac0      	subs	r0, r0, r3
    1956:	4152      	adcs	r2, r2
    1958:	0883      	lsrs	r3, r0, #2
    195a:	428b      	cmp	r3, r1
    195c:	d301      	bcc.n	1962 <__divsi3+0xea>
    195e:	008b      	lsls	r3, r1, #2
    1960:	1ac0      	subs	r0, r0, r3
    1962:	4152      	adcs	r2, r2
    1964:	0843      	lsrs	r3, r0, #1
    1966:	428b      	cmp	r3, r1
    1968:	d301      	bcc.n	196e <__divsi3+0xf6>
    196a:	004b      	lsls	r3, r1, #1
    196c:	1ac0      	subs	r0, r0, r3
    196e:	4152      	adcs	r2, r2
    1970:	1a41      	subs	r1, r0, r1
    1972:	d200      	bcs.n	1976 <__divsi3+0xfe>
    1974:	4601      	mov	r1, r0
    1976:	4152      	adcs	r2, r2
    1978:	4610      	mov	r0, r2
    197a:	4770      	bx	lr
    197c:	e05d      	b.n	1a3a <__divsi3+0x1c2>
    197e:	0fca      	lsrs	r2, r1, #31
    1980:	d000      	beq.n	1984 <__divsi3+0x10c>
    1982:	4249      	negs	r1, r1
    1984:	1003      	asrs	r3, r0, #32
    1986:	d300      	bcc.n	198a <__divsi3+0x112>
    1988:	4240      	negs	r0, r0
    198a:	4053      	eors	r3, r2
    198c:	2200      	movs	r2, #0
    198e:	469c      	mov	ip, r3
    1990:	0903      	lsrs	r3, r0, #4
    1992:	428b      	cmp	r3, r1
    1994:	d32d      	bcc.n	19f2 <__divsi3+0x17a>
    1996:	0a03      	lsrs	r3, r0, #8
    1998:	428b      	cmp	r3, r1
    199a:	d312      	bcc.n	19c2 <__divsi3+0x14a>
    199c:	22fc      	movs	r2, #252	; 0xfc
    199e:	0189      	lsls	r1, r1, #6
    19a0:	ba12      	rev	r2, r2
    19a2:	0a03      	lsrs	r3, r0, #8
    19a4:	428b      	cmp	r3, r1
    19a6:	d30c      	bcc.n	19c2 <__divsi3+0x14a>
    19a8:	0189      	lsls	r1, r1, #6
    19aa:	1192      	asrs	r2, r2, #6
    19ac:	428b      	cmp	r3, r1
    19ae:	d308      	bcc.n	19c2 <__divsi3+0x14a>
    19b0:	0189      	lsls	r1, r1, #6
    19b2:	1192      	asrs	r2, r2, #6
    19b4:	428b      	cmp	r3, r1
    19b6:	d304      	bcc.n	19c2 <__divsi3+0x14a>
    19b8:	0189      	lsls	r1, r1, #6
    19ba:	d03a      	beq.n	1a32 <__divsi3+0x1ba>
    19bc:	1192      	asrs	r2, r2, #6
    19be:	e000      	b.n	19c2 <__divsi3+0x14a>
    19c0:	0989      	lsrs	r1, r1, #6
    19c2:	09c3      	lsrs	r3, r0, #7
    19c4:	428b      	cmp	r3, r1
    19c6:	d301      	bcc.n	19cc <__divsi3+0x154>
    19c8:	01cb      	lsls	r3, r1, #7
    19ca:	1ac0      	subs	r0, r0, r3
    19cc:	4152      	adcs	r2, r2
    19ce:	0983      	lsrs	r3, r0, #6
    19d0:	428b      	cmp	r3, r1
    19d2:	d301      	bcc.n	19d8 <__divsi3+0x160>
    19d4:	018b      	lsls	r3, r1, #6
    19d6:	1ac0      	subs	r0, r0, r3
    19d8:	4152      	adcs	r2, r2
    19da:	0943      	lsrs	r3, r0, #5
    19dc:	428b      	cmp	r3, r1
    19de:	d301      	bcc.n	19e4 <__divsi3+0x16c>
    19e0:	014b      	lsls	r3, r1, #5
    19e2:	1ac0      	subs	r0, r0, r3
    19e4:	4152      	adcs	r2, r2
    19e6:	0903      	lsrs	r3, r0, #4
    19e8:	428b      	cmp	r3, r1
    19ea:	d301      	bcc.n	19f0 <__divsi3+0x178>
    19ec:	010b      	lsls	r3, r1, #4
    19ee:	1ac0      	subs	r0, r0, r3
    19f0:	4152      	adcs	r2, r2
    19f2:	08c3      	lsrs	r3, r0, #3
    19f4:	428b      	cmp	r3, r1
    19f6:	d301      	bcc.n	19fc <__divsi3+0x184>
    19f8:	00cb      	lsls	r3, r1, #3
    19fa:	1ac0      	subs	r0, r0, r3
    19fc:	4152      	adcs	r2, r2
    19fe:	0883      	lsrs	r3, r0, #2
    1a00:	428b      	cmp	r3, r1
    1a02:	d301      	bcc.n	1a08 <__divsi3+0x190>
    1a04:	008b      	lsls	r3, r1, #2
    1a06:	1ac0      	subs	r0, r0, r3
    1a08:	4152      	adcs	r2, r2
    1a0a:	d2d9      	bcs.n	19c0 <__divsi3+0x148>
    1a0c:	0843      	lsrs	r3, r0, #1
    1a0e:	428b      	cmp	r3, r1
    1a10:	d301      	bcc.n	1a16 <__divsi3+0x19e>
    1a12:	004b      	lsls	r3, r1, #1
    1a14:	1ac0      	subs	r0, r0, r3
    1a16:	4152      	adcs	r2, r2
    1a18:	1a41      	subs	r1, r0, r1
    1a1a:	d200      	bcs.n	1a1e <__divsi3+0x1a6>
    1a1c:	4601      	mov	r1, r0
    1a1e:	4663      	mov	r3, ip
    1a20:	4152      	adcs	r2, r2
    1a22:	105b      	asrs	r3, r3, #1
    1a24:	4610      	mov	r0, r2
    1a26:	d301      	bcc.n	1a2c <__divsi3+0x1b4>
    1a28:	4240      	negs	r0, r0
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	d500      	bpl.n	1a30 <__divsi3+0x1b8>
    1a2e:	4249      	negs	r1, r1
    1a30:	4770      	bx	lr
    1a32:	4663      	mov	r3, ip
    1a34:	105b      	asrs	r3, r3, #1
    1a36:	d300      	bcc.n	1a3a <__divsi3+0x1c2>
    1a38:	4240      	negs	r0, r0
    1a3a:	b501      	push	{r0, lr}
    1a3c:	2000      	movs	r0, #0
    1a3e:	f000 f805 	bl	1a4c <__aeabi_idiv0>
    1a42:	bd02      	pop	{r1, pc}

00001a44 <__aeabi_idivmod>:
    1a44:	2900      	cmp	r1, #0
    1a46:	d0f8      	beq.n	1a3a <__divsi3+0x1c2>
    1a48:	e716      	b.n	1878 <__divsi3>
    1a4a:	4770      	bx	lr

00001a4c <__aeabi_idiv0>:
    1a4c:	4770      	bx	lr
    1a4e:	46c0      	nop			; (mov r8, r8)

00001a50 <__ffssi2>:
    1a50:	b510      	push	{r4, lr}
    1a52:	2300      	movs	r3, #0
    1a54:	2800      	cmp	r0, #0
    1a56:	d002      	beq.n	1a5e <__ffssi2+0xe>
    1a58:	f000 f804 	bl	1a64 <__ctzsi2>
    1a5c:	1c43      	adds	r3, r0, #1
    1a5e:	0018      	movs	r0, r3
    1a60:	bd10      	pop	{r4, pc}
    1a62:	46c0      	nop			; (mov r8, r8)

00001a64 <__ctzsi2>:
    1a64:	4241      	negs	r1, r0
    1a66:	4008      	ands	r0, r1
    1a68:	211c      	movs	r1, #28
    1a6a:	2301      	movs	r3, #1
    1a6c:	041b      	lsls	r3, r3, #16
    1a6e:	4298      	cmp	r0, r3
    1a70:	d301      	bcc.n	1a76 <__ctzsi2+0x12>
    1a72:	0c00      	lsrs	r0, r0, #16
    1a74:	3910      	subs	r1, #16
    1a76:	0a1b      	lsrs	r3, r3, #8
    1a78:	4298      	cmp	r0, r3
    1a7a:	d301      	bcc.n	1a80 <__ctzsi2+0x1c>
    1a7c:	0a00      	lsrs	r0, r0, #8
    1a7e:	3908      	subs	r1, #8
    1a80:	091b      	lsrs	r3, r3, #4
    1a82:	4298      	cmp	r0, r3
    1a84:	d301      	bcc.n	1a8a <__ctzsi2+0x26>
    1a86:	0900      	lsrs	r0, r0, #4
    1a88:	3904      	subs	r1, #4
    1a8a:	a202      	add	r2, pc, #8	; (adr r2, 1a94 <__ctzsi2+0x30>)
    1a8c:	5c10      	ldrb	r0, [r2, r0]
    1a8e:	1a40      	subs	r0, r0, r1
    1a90:	4770      	bx	lr
    1a92:	46c0      	nop			; (mov r8, r8)
    1a94:	1d1d1c1b 	.word	0x1d1d1c1b
    1a98:	1e1e1e1e 	.word	0x1e1e1e1e
    1a9c:	1f1f1f1f 	.word	0x1f1f1f1f
    1aa0:	1f1f1f1f 	.word	0x1f1f1f1f

00001aa4 <__libc_init_array>:
    1aa4:	b570      	push	{r4, r5, r6, lr}
    1aa6:	2600      	movs	r6, #0
    1aa8:	4d0c      	ldr	r5, [pc, #48]	; (1adc <__libc_init_array+0x38>)
    1aaa:	4c0d      	ldr	r4, [pc, #52]	; (1ae0 <__libc_init_array+0x3c>)
    1aac:	1b64      	subs	r4, r4, r5
    1aae:	10a4      	asrs	r4, r4, #2
    1ab0:	42a6      	cmp	r6, r4
    1ab2:	d109      	bne.n	1ac8 <__libc_init_array+0x24>
    1ab4:	2600      	movs	r6, #0
    1ab6:	f000 fe17 	bl	26e8 <_init>
    1aba:	4d0a      	ldr	r5, [pc, #40]	; (1ae4 <__libc_init_array+0x40>)
    1abc:	4c0a      	ldr	r4, [pc, #40]	; (1ae8 <__libc_init_array+0x44>)
    1abe:	1b64      	subs	r4, r4, r5
    1ac0:	10a4      	asrs	r4, r4, #2
    1ac2:	42a6      	cmp	r6, r4
    1ac4:	d105      	bne.n	1ad2 <__libc_init_array+0x2e>
    1ac6:	bd70      	pop	{r4, r5, r6, pc}
    1ac8:	00b3      	lsls	r3, r6, #2
    1aca:	58eb      	ldr	r3, [r5, r3]
    1acc:	4798      	blx	r3
    1ace:	3601      	adds	r6, #1
    1ad0:	e7ee      	b.n	1ab0 <__libc_init_array+0xc>
    1ad2:	00b3      	lsls	r3, r6, #2
    1ad4:	58eb      	ldr	r3, [r5, r3]
    1ad6:	4798      	blx	r3
    1ad8:	3601      	adds	r6, #1
    1ada:	e7f2      	b.n	1ac2 <__libc_init_array+0x1e>
    1adc:	000026f4 	.word	0x000026f4
    1ae0:	000026f4 	.word	0x000026f4
    1ae4:	000026f4 	.word	0x000026f4
    1ae8:	000026f8 	.word	0x000026f8

00001aec <memset>:
    1aec:	0003      	movs	r3, r0
    1aee:	1882      	adds	r2, r0, r2
    1af0:	4293      	cmp	r3, r2
    1af2:	d100      	bne.n	1af6 <memset+0xa>
    1af4:	4770      	bx	lr
    1af6:	7019      	strb	r1, [r3, #0]
    1af8:	3301      	adds	r3, #1
    1afa:	e7f9      	b.n	1af0 <memset+0x4>

00001afc <_vsniprintf_r>:
    1afc:	b530      	push	{r4, r5, lr}
    1afe:	0014      	movs	r4, r2
    1b00:	b09b      	sub	sp, #108	; 0x6c
    1b02:	0005      	movs	r5, r0
    1b04:	001a      	movs	r2, r3
    1b06:	2c00      	cmp	r4, #0
    1b08:	da05      	bge.n	1b16 <_vsniprintf_r+0x1a>
    1b0a:	238b      	movs	r3, #139	; 0x8b
    1b0c:	6003      	str	r3, [r0, #0]
    1b0e:	2001      	movs	r0, #1
    1b10:	4240      	negs	r0, r0
    1b12:	b01b      	add	sp, #108	; 0x6c
    1b14:	bd30      	pop	{r4, r5, pc}
    1b16:	2382      	movs	r3, #130	; 0x82
    1b18:	4668      	mov	r0, sp
    1b1a:	009b      	lsls	r3, r3, #2
    1b1c:	8183      	strh	r3, [r0, #12]
    1b1e:	2300      	movs	r3, #0
    1b20:	9100      	str	r1, [sp, #0]
    1b22:	9104      	str	r1, [sp, #16]
    1b24:	429c      	cmp	r4, r3
    1b26:	d000      	beq.n	1b2a <_vsniprintf_r+0x2e>
    1b28:	1e63      	subs	r3, r4, #1
    1b2a:	9302      	str	r3, [sp, #8]
    1b2c:	9305      	str	r3, [sp, #20]
    1b2e:	2301      	movs	r3, #1
    1b30:	4669      	mov	r1, sp
    1b32:	425b      	negs	r3, r3
    1b34:	81cb      	strh	r3, [r1, #14]
    1b36:	0028      	movs	r0, r5
    1b38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1b3a:	f000 f8d7 	bl	1cec <_svfiprintf_r>
    1b3e:	1c43      	adds	r3, r0, #1
    1b40:	da01      	bge.n	1b46 <_vsniprintf_r+0x4a>
    1b42:	238b      	movs	r3, #139	; 0x8b
    1b44:	602b      	str	r3, [r5, #0]
    1b46:	2c00      	cmp	r4, #0
    1b48:	d0e3      	beq.n	1b12 <_vsniprintf_r+0x16>
    1b4a:	2300      	movs	r3, #0
    1b4c:	9a00      	ldr	r2, [sp, #0]
    1b4e:	7013      	strb	r3, [r2, #0]
    1b50:	e7df      	b.n	1b12 <_vsniprintf_r+0x16>
	...

00001b54 <vsniprintf>:
    1b54:	b507      	push	{r0, r1, r2, lr}
    1b56:	9300      	str	r3, [sp, #0]
    1b58:	0013      	movs	r3, r2
    1b5a:	000a      	movs	r2, r1
    1b5c:	0001      	movs	r1, r0
    1b5e:	4802      	ldr	r0, [pc, #8]	; (1b68 <vsniprintf+0x14>)
    1b60:	6800      	ldr	r0, [r0, #0]
    1b62:	f7ff ffcb 	bl	1afc <_vsniprintf_r>
    1b66:	bd0e      	pop	{r1, r2, r3, pc}
    1b68:	20000000 	.word	0x20000000

00001b6c <_malloc_r>:
    1b6c:	2303      	movs	r3, #3
    1b6e:	b570      	push	{r4, r5, r6, lr}
    1b70:	1ccd      	adds	r5, r1, #3
    1b72:	439d      	bics	r5, r3
    1b74:	3508      	adds	r5, #8
    1b76:	0006      	movs	r6, r0
    1b78:	2d0c      	cmp	r5, #12
    1b7a:	d21e      	bcs.n	1bba <_malloc_r+0x4e>
    1b7c:	250c      	movs	r5, #12
    1b7e:	42a9      	cmp	r1, r5
    1b80:	d81d      	bhi.n	1bbe <_malloc_r+0x52>
    1b82:	0030      	movs	r0, r6
    1b84:	f000 fb76 	bl	2274 <__malloc_lock>
    1b88:	4a25      	ldr	r2, [pc, #148]	; (1c20 <_malloc_r+0xb4>)
    1b8a:	6814      	ldr	r4, [r2, #0]
    1b8c:	0021      	movs	r1, r4
    1b8e:	2900      	cmp	r1, #0
    1b90:	d119      	bne.n	1bc6 <_malloc_r+0x5a>
    1b92:	4c24      	ldr	r4, [pc, #144]	; (1c24 <_malloc_r+0xb8>)
    1b94:	6823      	ldr	r3, [r4, #0]
    1b96:	2b00      	cmp	r3, #0
    1b98:	d103      	bne.n	1ba2 <_malloc_r+0x36>
    1b9a:	0030      	movs	r0, r6
    1b9c:	f000 fb32 	bl	2204 <_sbrk_r>
    1ba0:	6020      	str	r0, [r4, #0]
    1ba2:	0029      	movs	r1, r5
    1ba4:	0030      	movs	r0, r6
    1ba6:	f000 fb2d 	bl	2204 <_sbrk_r>
    1baa:	1c43      	adds	r3, r0, #1
    1bac:	d12c      	bne.n	1c08 <_malloc_r+0x9c>
    1bae:	230c      	movs	r3, #12
    1bb0:	0030      	movs	r0, r6
    1bb2:	6033      	str	r3, [r6, #0]
    1bb4:	f000 fb5f 	bl	2276 <__malloc_unlock>
    1bb8:	e003      	b.n	1bc2 <_malloc_r+0x56>
    1bba:	2d00      	cmp	r5, #0
    1bbc:	dadf      	bge.n	1b7e <_malloc_r+0x12>
    1bbe:	230c      	movs	r3, #12
    1bc0:	6033      	str	r3, [r6, #0]
    1bc2:	2000      	movs	r0, #0
    1bc4:	bd70      	pop	{r4, r5, r6, pc}
    1bc6:	680b      	ldr	r3, [r1, #0]
    1bc8:	1b5b      	subs	r3, r3, r5
    1bca:	d41a      	bmi.n	1c02 <_malloc_r+0x96>
    1bcc:	2b0b      	cmp	r3, #11
    1bce:	d903      	bls.n	1bd8 <_malloc_r+0x6c>
    1bd0:	600b      	str	r3, [r1, #0]
    1bd2:	18cc      	adds	r4, r1, r3
    1bd4:	6025      	str	r5, [r4, #0]
    1bd6:	e003      	b.n	1be0 <_malloc_r+0x74>
    1bd8:	428c      	cmp	r4, r1
    1bda:	d10e      	bne.n	1bfa <_malloc_r+0x8e>
    1bdc:	6863      	ldr	r3, [r4, #4]
    1bde:	6013      	str	r3, [r2, #0]
    1be0:	0030      	movs	r0, r6
    1be2:	f000 fb48 	bl	2276 <__malloc_unlock>
    1be6:	0020      	movs	r0, r4
    1be8:	2207      	movs	r2, #7
    1bea:	300b      	adds	r0, #11
    1bec:	1d23      	adds	r3, r4, #4
    1bee:	4390      	bics	r0, r2
    1bf0:	1ac3      	subs	r3, r0, r3
    1bf2:	d0e7      	beq.n	1bc4 <_malloc_r+0x58>
    1bf4:	425a      	negs	r2, r3
    1bf6:	50e2      	str	r2, [r4, r3]
    1bf8:	e7e4      	b.n	1bc4 <_malloc_r+0x58>
    1bfa:	684b      	ldr	r3, [r1, #4]
    1bfc:	6063      	str	r3, [r4, #4]
    1bfe:	000c      	movs	r4, r1
    1c00:	e7ee      	b.n	1be0 <_malloc_r+0x74>
    1c02:	000c      	movs	r4, r1
    1c04:	6849      	ldr	r1, [r1, #4]
    1c06:	e7c2      	b.n	1b8e <_malloc_r+0x22>
    1c08:	2303      	movs	r3, #3
    1c0a:	1cc4      	adds	r4, r0, #3
    1c0c:	439c      	bics	r4, r3
    1c0e:	42a0      	cmp	r0, r4
    1c10:	d0e0      	beq.n	1bd4 <_malloc_r+0x68>
    1c12:	1a21      	subs	r1, r4, r0
    1c14:	0030      	movs	r0, r6
    1c16:	f000 faf5 	bl	2204 <_sbrk_r>
    1c1a:	1c43      	adds	r3, r0, #1
    1c1c:	d1da      	bne.n	1bd4 <_malloc_r+0x68>
    1c1e:	e7c6      	b.n	1bae <_malloc_r+0x42>
    1c20:	20000118 	.word	0x20000118
    1c24:	2000011c 	.word	0x2000011c

00001c28 <__ssputs_r>:
    1c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c2a:	688e      	ldr	r6, [r1, #8]
    1c2c:	b085      	sub	sp, #20
    1c2e:	0007      	movs	r7, r0
    1c30:	000c      	movs	r4, r1
    1c32:	9203      	str	r2, [sp, #12]
    1c34:	9301      	str	r3, [sp, #4]
    1c36:	429e      	cmp	r6, r3
    1c38:	d839      	bhi.n	1cae <__ssputs_r+0x86>
    1c3a:	2390      	movs	r3, #144	; 0x90
    1c3c:	898a      	ldrh	r2, [r1, #12]
    1c3e:	00db      	lsls	r3, r3, #3
    1c40:	421a      	tst	r2, r3
    1c42:	d034      	beq.n	1cae <__ssputs_r+0x86>
    1c44:	2503      	movs	r5, #3
    1c46:	6909      	ldr	r1, [r1, #16]
    1c48:	6823      	ldr	r3, [r4, #0]
    1c4a:	1a5b      	subs	r3, r3, r1
    1c4c:	9302      	str	r3, [sp, #8]
    1c4e:	6963      	ldr	r3, [r4, #20]
    1c50:	9802      	ldr	r0, [sp, #8]
    1c52:	435d      	muls	r5, r3
    1c54:	0feb      	lsrs	r3, r5, #31
    1c56:	195d      	adds	r5, r3, r5
    1c58:	9b01      	ldr	r3, [sp, #4]
    1c5a:	106d      	asrs	r5, r5, #1
    1c5c:	3301      	adds	r3, #1
    1c5e:	181b      	adds	r3, r3, r0
    1c60:	42ab      	cmp	r3, r5
    1c62:	d900      	bls.n	1c66 <__ssputs_r+0x3e>
    1c64:	001d      	movs	r5, r3
    1c66:	0553      	lsls	r3, r2, #21
    1c68:	d532      	bpl.n	1cd0 <__ssputs_r+0xa8>
    1c6a:	0029      	movs	r1, r5
    1c6c:	0038      	movs	r0, r7
    1c6e:	f7ff ff7d 	bl	1b6c <_malloc_r>
    1c72:	1e06      	subs	r6, r0, #0
    1c74:	d109      	bne.n	1c8a <__ssputs_r+0x62>
    1c76:	230c      	movs	r3, #12
    1c78:	603b      	str	r3, [r7, #0]
    1c7a:	2340      	movs	r3, #64	; 0x40
    1c7c:	2001      	movs	r0, #1
    1c7e:	89a2      	ldrh	r2, [r4, #12]
    1c80:	4240      	negs	r0, r0
    1c82:	4313      	orrs	r3, r2
    1c84:	81a3      	strh	r3, [r4, #12]
    1c86:	b005      	add	sp, #20
    1c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c8a:	9a02      	ldr	r2, [sp, #8]
    1c8c:	6921      	ldr	r1, [r4, #16]
    1c8e:	f000 fad6 	bl	223e <memcpy>
    1c92:	89a3      	ldrh	r3, [r4, #12]
    1c94:	4a14      	ldr	r2, [pc, #80]	; (1ce8 <__ssputs_r+0xc0>)
    1c96:	401a      	ands	r2, r3
    1c98:	2380      	movs	r3, #128	; 0x80
    1c9a:	4313      	orrs	r3, r2
    1c9c:	81a3      	strh	r3, [r4, #12]
    1c9e:	9b02      	ldr	r3, [sp, #8]
    1ca0:	6126      	str	r6, [r4, #16]
    1ca2:	18f6      	adds	r6, r6, r3
    1ca4:	6026      	str	r6, [r4, #0]
    1ca6:	6165      	str	r5, [r4, #20]
    1ca8:	9e01      	ldr	r6, [sp, #4]
    1caa:	1aed      	subs	r5, r5, r3
    1cac:	60a5      	str	r5, [r4, #8]
    1cae:	9b01      	ldr	r3, [sp, #4]
    1cb0:	42b3      	cmp	r3, r6
    1cb2:	d200      	bcs.n	1cb6 <__ssputs_r+0x8e>
    1cb4:	001e      	movs	r6, r3
    1cb6:	0032      	movs	r2, r6
    1cb8:	9903      	ldr	r1, [sp, #12]
    1cba:	6820      	ldr	r0, [r4, #0]
    1cbc:	f000 fac8 	bl	2250 <memmove>
    1cc0:	68a3      	ldr	r3, [r4, #8]
    1cc2:	2000      	movs	r0, #0
    1cc4:	1b9b      	subs	r3, r3, r6
    1cc6:	60a3      	str	r3, [r4, #8]
    1cc8:	6823      	ldr	r3, [r4, #0]
    1cca:	199e      	adds	r6, r3, r6
    1ccc:	6026      	str	r6, [r4, #0]
    1cce:	e7da      	b.n	1c86 <__ssputs_r+0x5e>
    1cd0:	002a      	movs	r2, r5
    1cd2:	0038      	movs	r0, r7
    1cd4:	f000 fb1a 	bl	230c <_realloc_r>
    1cd8:	1e06      	subs	r6, r0, #0
    1cda:	d1e0      	bne.n	1c9e <__ssputs_r+0x76>
    1cdc:	6921      	ldr	r1, [r4, #16]
    1cde:	0038      	movs	r0, r7
    1ce0:	f000 faca 	bl	2278 <_free_r>
    1ce4:	e7c7      	b.n	1c76 <__ssputs_r+0x4e>
    1ce6:	46c0      	nop			; (mov r8, r8)
    1ce8:	fffffb7f 	.word	0xfffffb7f

00001cec <_svfiprintf_r>:
    1cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cee:	b09f      	sub	sp, #124	; 0x7c
    1cf0:	9002      	str	r0, [sp, #8]
    1cf2:	9305      	str	r3, [sp, #20]
    1cf4:	898b      	ldrh	r3, [r1, #12]
    1cf6:	000f      	movs	r7, r1
    1cf8:	0016      	movs	r6, r2
    1cfa:	061b      	lsls	r3, r3, #24
    1cfc:	d511      	bpl.n	1d22 <_svfiprintf_r+0x36>
    1cfe:	690b      	ldr	r3, [r1, #16]
    1d00:	2b00      	cmp	r3, #0
    1d02:	d10e      	bne.n	1d22 <_svfiprintf_r+0x36>
    1d04:	2140      	movs	r1, #64	; 0x40
    1d06:	f7ff ff31 	bl	1b6c <_malloc_r>
    1d0a:	6038      	str	r0, [r7, #0]
    1d0c:	6138      	str	r0, [r7, #16]
    1d0e:	2800      	cmp	r0, #0
    1d10:	d105      	bne.n	1d1e <_svfiprintf_r+0x32>
    1d12:	230c      	movs	r3, #12
    1d14:	9a02      	ldr	r2, [sp, #8]
    1d16:	3801      	subs	r0, #1
    1d18:	6013      	str	r3, [r2, #0]
    1d1a:	b01f      	add	sp, #124	; 0x7c
    1d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d1e:	2340      	movs	r3, #64	; 0x40
    1d20:	617b      	str	r3, [r7, #20]
    1d22:	2300      	movs	r3, #0
    1d24:	ad06      	add	r5, sp, #24
    1d26:	616b      	str	r3, [r5, #20]
    1d28:	3320      	adds	r3, #32
    1d2a:	766b      	strb	r3, [r5, #25]
    1d2c:	3310      	adds	r3, #16
    1d2e:	76ab      	strb	r3, [r5, #26]
    1d30:	0034      	movs	r4, r6
    1d32:	7823      	ldrb	r3, [r4, #0]
    1d34:	2b00      	cmp	r3, #0
    1d36:	d147      	bne.n	1dc8 <_svfiprintf_r+0xdc>
    1d38:	1ba3      	subs	r3, r4, r6
    1d3a:	9304      	str	r3, [sp, #16]
    1d3c:	d00d      	beq.n	1d5a <_svfiprintf_r+0x6e>
    1d3e:	1ba3      	subs	r3, r4, r6
    1d40:	0032      	movs	r2, r6
    1d42:	0039      	movs	r1, r7
    1d44:	9802      	ldr	r0, [sp, #8]
    1d46:	f7ff ff6f 	bl	1c28 <__ssputs_r>
    1d4a:	1c43      	adds	r3, r0, #1
    1d4c:	d100      	bne.n	1d50 <_svfiprintf_r+0x64>
    1d4e:	e0b5      	b.n	1ebc <_svfiprintf_r+0x1d0>
    1d50:	696a      	ldr	r2, [r5, #20]
    1d52:	9b04      	ldr	r3, [sp, #16]
    1d54:	4694      	mov	ip, r2
    1d56:	4463      	add	r3, ip
    1d58:	616b      	str	r3, [r5, #20]
    1d5a:	7823      	ldrb	r3, [r4, #0]
    1d5c:	2b00      	cmp	r3, #0
    1d5e:	d100      	bne.n	1d62 <_svfiprintf_r+0x76>
    1d60:	e0ac      	b.n	1ebc <_svfiprintf_r+0x1d0>
    1d62:	2201      	movs	r2, #1
    1d64:	2300      	movs	r3, #0
    1d66:	4252      	negs	r2, r2
    1d68:	606a      	str	r2, [r5, #4]
    1d6a:	a902      	add	r1, sp, #8
    1d6c:	3254      	adds	r2, #84	; 0x54
    1d6e:	1852      	adds	r2, r2, r1
    1d70:	3401      	adds	r4, #1
    1d72:	602b      	str	r3, [r5, #0]
    1d74:	60eb      	str	r3, [r5, #12]
    1d76:	60ab      	str	r3, [r5, #8]
    1d78:	7013      	strb	r3, [r2, #0]
    1d7a:	65ab      	str	r3, [r5, #88]	; 0x58
    1d7c:	4e58      	ldr	r6, [pc, #352]	; (1ee0 <_svfiprintf_r+0x1f4>)
    1d7e:	2205      	movs	r2, #5
    1d80:	7821      	ldrb	r1, [r4, #0]
    1d82:	0030      	movs	r0, r6
    1d84:	f000 fa50 	bl	2228 <memchr>
    1d88:	1c62      	adds	r2, r4, #1
    1d8a:	2800      	cmp	r0, #0
    1d8c:	d120      	bne.n	1dd0 <_svfiprintf_r+0xe4>
    1d8e:	6829      	ldr	r1, [r5, #0]
    1d90:	06cb      	lsls	r3, r1, #27
    1d92:	d504      	bpl.n	1d9e <_svfiprintf_r+0xb2>
    1d94:	2353      	movs	r3, #83	; 0x53
    1d96:	ae02      	add	r6, sp, #8
    1d98:	3020      	adds	r0, #32
    1d9a:	199b      	adds	r3, r3, r6
    1d9c:	7018      	strb	r0, [r3, #0]
    1d9e:	070b      	lsls	r3, r1, #28
    1da0:	d504      	bpl.n	1dac <_svfiprintf_r+0xc0>
    1da2:	2353      	movs	r3, #83	; 0x53
    1da4:	202b      	movs	r0, #43	; 0x2b
    1da6:	ae02      	add	r6, sp, #8
    1da8:	199b      	adds	r3, r3, r6
    1daa:	7018      	strb	r0, [r3, #0]
    1dac:	7823      	ldrb	r3, [r4, #0]
    1dae:	2b2a      	cmp	r3, #42	; 0x2a
    1db0:	d016      	beq.n	1de0 <_svfiprintf_r+0xf4>
    1db2:	2000      	movs	r0, #0
    1db4:	210a      	movs	r1, #10
    1db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1db8:	7822      	ldrb	r2, [r4, #0]
    1dba:	3a30      	subs	r2, #48	; 0x30
    1dbc:	2a09      	cmp	r2, #9
    1dbe:	d955      	bls.n	1e6c <_svfiprintf_r+0x180>
    1dc0:	2800      	cmp	r0, #0
    1dc2:	d015      	beq.n	1df0 <_svfiprintf_r+0x104>
    1dc4:	9309      	str	r3, [sp, #36]	; 0x24
    1dc6:	e013      	b.n	1df0 <_svfiprintf_r+0x104>
    1dc8:	2b25      	cmp	r3, #37	; 0x25
    1dca:	d0b5      	beq.n	1d38 <_svfiprintf_r+0x4c>
    1dcc:	3401      	adds	r4, #1
    1dce:	e7b0      	b.n	1d32 <_svfiprintf_r+0x46>
    1dd0:	2301      	movs	r3, #1
    1dd2:	1b80      	subs	r0, r0, r6
    1dd4:	4083      	lsls	r3, r0
    1dd6:	6829      	ldr	r1, [r5, #0]
    1dd8:	0014      	movs	r4, r2
    1dda:	430b      	orrs	r3, r1
    1ddc:	602b      	str	r3, [r5, #0]
    1dde:	e7cd      	b.n	1d7c <_svfiprintf_r+0x90>
    1de0:	9b05      	ldr	r3, [sp, #20]
    1de2:	1d18      	adds	r0, r3, #4
    1de4:	681b      	ldr	r3, [r3, #0]
    1de6:	9005      	str	r0, [sp, #20]
    1de8:	2b00      	cmp	r3, #0
    1dea:	db39      	blt.n	1e60 <_svfiprintf_r+0x174>
    1dec:	9309      	str	r3, [sp, #36]	; 0x24
    1dee:	0014      	movs	r4, r2
    1df0:	7823      	ldrb	r3, [r4, #0]
    1df2:	2b2e      	cmp	r3, #46	; 0x2e
    1df4:	d10b      	bne.n	1e0e <_svfiprintf_r+0x122>
    1df6:	7863      	ldrb	r3, [r4, #1]
    1df8:	1c62      	adds	r2, r4, #1
    1dfa:	2b2a      	cmp	r3, #42	; 0x2a
    1dfc:	d13e      	bne.n	1e7c <_svfiprintf_r+0x190>
    1dfe:	9b05      	ldr	r3, [sp, #20]
    1e00:	3402      	adds	r4, #2
    1e02:	1d1a      	adds	r2, r3, #4
    1e04:	681b      	ldr	r3, [r3, #0]
    1e06:	9205      	str	r2, [sp, #20]
    1e08:	2b00      	cmp	r3, #0
    1e0a:	db34      	blt.n	1e76 <_svfiprintf_r+0x18a>
    1e0c:	9307      	str	r3, [sp, #28]
    1e0e:	4e35      	ldr	r6, [pc, #212]	; (1ee4 <_svfiprintf_r+0x1f8>)
    1e10:	7821      	ldrb	r1, [r4, #0]
    1e12:	2203      	movs	r2, #3
    1e14:	0030      	movs	r0, r6
    1e16:	f000 fa07 	bl	2228 <memchr>
    1e1a:	2800      	cmp	r0, #0
    1e1c:	d006      	beq.n	1e2c <_svfiprintf_r+0x140>
    1e1e:	2340      	movs	r3, #64	; 0x40
    1e20:	1b80      	subs	r0, r0, r6
    1e22:	4083      	lsls	r3, r0
    1e24:	682a      	ldr	r2, [r5, #0]
    1e26:	3401      	adds	r4, #1
    1e28:	4313      	orrs	r3, r2
    1e2a:	602b      	str	r3, [r5, #0]
    1e2c:	7821      	ldrb	r1, [r4, #0]
    1e2e:	2206      	movs	r2, #6
    1e30:	482d      	ldr	r0, [pc, #180]	; (1ee8 <_svfiprintf_r+0x1fc>)
    1e32:	1c66      	adds	r6, r4, #1
    1e34:	7629      	strb	r1, [r5, #24]
    1e36:	f000 f9f7 	bl	2228 <memchr>
    1e3a:	2800      	cmp	r0, #0
    1e3c:	d046      	beq.n	1ecc <_svfiprintf_r+0x1e0>
    1e3e:	4b2b      	ldr	r3, [pc, #172]	; (1eec <_svfiprintf_r+0x200>)
    1e40:	2b00      	cmp	r3, #0
    1e42:	d12f      	bne.n	1ea4 <_svfiprintf_r+0x1b8>
    1e44:	6829      	ldr	r1, [r5, #0]
    1e46:	9b05      	ldr	r3, [sp, #20]
    1e48:	2207      	movs	r2, #7
    1e4a:	05c9      	lsls	r1, r1, #23
    1e4c:	d528      	bpl.n	1ea0 <_svfiprintf_r+0x1b4>
    1e4e:	189b      	adds	r3, r3, r2
    1e50:	4393      	bics	r3, r2
    1e52:	3308      	adds	r3, #8
    1e54:	9305      	str	r3, [sp, #20]
    1e56:	696b      	ldr	r3, [r5, #20]
    1e58:	9a03      	ldr	r2, [sp, #12]
    1e5a:	189b      	adds	r3, r3, r2
    1e5c:	616b      	str	r3, [r5, #20]
    1e5e:	e767      	b.n	1d30 <_svfiprintf_r+0x44>
    1e60:	425b      	negs	r3, r3
    1e62:	60eb      	str	r3, [r5, #12]
    1e64:	2302      	movs	r3, #2
    1e66:	430b      	orrs	r3, r1
    1e68:	602b      	str	r3, [r5, #0]
    1e6a:	e7c0      	b.n	1dee <_svfiprintf_r+0x102>
    1e6c:	434b      	muls	r3, r1
    1e6e:	3401      	adds	r4, #1
    1e70:	189b      	adds	r3, r3, r2
    1e72:	2001      	movs	r0, #1
    1e74:	e7a0      	b.n	1db8 <_svfiprintf_r+0xcc>
    1e76:	2301      	movs	r3, #1
    1e78:	425b      	negs	r3, r3
    1e7a:	e7c7      	b.n	1e0c <_svfiprintf_r+0x120>
    1e7c:	2300      	movs	r3, #0
    1e7e:	0014      	movs	r4, r2
    1e80:	200a      	movs	r0, #10
    1e82:	001a      	movs	r2, r3
    1e84:	606b      	str	r3, [r5, #4]
    1e86:	7821      	ldrb	r1, [r4, #0]
    1e88:	3930      	subs	r1, #48	; 0x30
    1e8a:	2909      	cmp	r1, #9
    1e8c:	d903      	bls.n	1e96 <_svfiprintf_r+0x1aa>
    1e8e:	2b00      	cmp	r3, #0
    1e90:	d0bd      	beq.n	1e0e <_svfiprintf_r+0x122>
    1e92:	9207      	str	r2, [sp, #28]
    1e94:	e7bb      	b.n	1e0e <_svfiprintf_r+0x122>
    1e96:	4342      	muls	r2, r0
    1e98:	3401      	adds	r4, #1
    1e9a:	1852      	adds	r2, r2, r1
    1e9c:	2301      	movs	r3, #1
    1e9e:	e7f2      	b.n	1e86 <_svfiprintf_r+0x19a>
    1ea0:	3307      	adds	r3, #7
    1ea2:	e7d5      	b.n	1e50 <_svfiprintf_r+0x164>
    1ea4:	ab05      	add	r3, sp, #20
    1ea6:	9300      	str	r3, [sp, #0]
    1ea8:	003a      	movs	r2, r7
    1eaa:	4b11      	ldr	r3, [pc, #68]	; (1ef0 <_svfiprintf_r+0x204>)
    1eac:	0029      	movs	r1, r5
    1eae:	9802      	ldr	r0, [sp, #8]
    1eb0:	e000      	b.n	1eb4 <_svfiprintf_r+0x1c8>
    1eb2:	bf00      	nop
    1eb4:	9003      	str	r0, [sp, #12]
    1eb6:	9b03      	ldr	r3, [sp, #12]
    1eb8:	3301      	adds	r3, #1
    1eba:	d1cc      	bne.n	1e56 <_svfiprintf_r+0x16a>
    1ebc:	89bb      	ldrh	r3, [r7, #12]
    1ebe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1ec0:	065b      	lsls	r3, r3, #25
    1ec2:	d400      	bmi.n	1ec6 <_svfiprintf_r+0x1da>
    1ec4:	e729      	b.n	1d1a <_svfiprintf_r+0x2e>
    1ec6:	2001      	movs	r0, #1
    1ec8:	4240      	negs	r0, r0
    1eca:	e726      	b.n	1d1a <_svfiprintf_r+0x2e>
    1ecc:	ab05      	add	r3, sp, #20
    1ece:	9300      	str	r3, [sp, #0]
    1ed0:	003a      	movs	r2, r7
    1ed2:	4b07      	ldr	r3, [pc, #28]	; (1ef0 <_svfiprintf_r+0x204>)
    1ed4:	0029      	movs	r1, r5
    1ed6:	9802      	ldr	r0, [sp, #8]
    1ed8:	f000 f87a 	bl	1fd0 <_printf_i>
    1edc:	e7ea      	b.n	1eb4 <_svfiprintf_r+0x1c8>
    1ede:	46c0      	nop			; (mov r8, r8)
    1ee0:	000026b4 	.word	0x000026b4
    1ee4:	000026ba 	.word	0x000026ba
    1ee8:	000026be 	.word	0x000026be
    1eec:	00000000 	.word	0x00000000
    1ef0:	00001c29 	.word	0x00001c29

00001ef4 <_printf_common>:
    1ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1ef6:	0015      	movs	r5, r2
    1ef8:	9301      	str	r3, [sp, #4]
    1efa:	688a      	ldr	r2, [r1, #8]
    1efc:	690b      	ldr	r3, [r1, #16]
    1efe:	9000      	str	r0, [sp, #0]
    1f00:	000c      	movs	r4, r1
    1f02:	4293      	cmp	r3, r2
    1f04:	da00      	bge.n	1f08 <_printf_common+0x14>
    1f06:	0013      	movs	r3, r2
    1f08:	0022      	movs	r2, r4
    1f0a:	602b      	str	r3, [r5, #0]
    1f0c:	3243      	adds	r2, #67	; 0x43
    1f0e:	7812      	ldrb	r2, [r2, #0]
    1f10:	2a00      	cmp	r2, #0
    1f12:	d001      	beq.n	1f18 <_printf_common+0x24>
    1f14:	3301      	adds	r3, #1
    1f16:	602b      	str	r3, [r5, #0]
    1f18:	6823      	ldr	r3, [r4, #0]
    1f1a:	069b      	lsls	r3, r3, #26
    1f1c:	d502      	bpl.n	1f24 <_printf_common+0x30>
    1f1e:	682b      	ldr	r3, [r5, #0]
    1f20:	3302      	adds	r3, #2
    1f22:	602b      	str	r3, [r5, #0]
    1f24:	2706      	movs	r7, #6
    1f26:	6823      	ldr	r3, [r4, #0]
    1f28:	401f      	ands	r7, r3
    1f2a:	d027      	beq.n	1f7c <_printf_common+0x88>
    1f2c:	0023      	movs	r3, r4
    1f2e:	3343      	adds	r3, #67	; 0x43
    1f30:	781b      	ldrb	r3, [r3, #0]
    1f32:	1e5a      	subs	r2, r3, #1
    1f34:	4193      	sbcs	r3, r2
    1f36:	6822      	ldr	r2, [r4, #0]
    1f38:	0692      	lsls	r2, r2, #26
    1f3a:	d430      	bmi.n	1f9e <_printf_common+0xaa>
    1f3c:	0022      	movs	r2, r4
    1f3e:	9901      	ldr	r1, [sp, #4]
    1f40:	3243      	adds	r2, #67	; 0x43
    1f42:	9800      	ldr	r0, [sp, #0]
    1f44:	9e08      	ldr	r6, [sp, #32]
    1f46:	47b0      	blx	r6
    1f48:	1c43      	adds	r3, r0, #1
    1f4a:	d025      	beq.n	1f98 <_printf_common+0xa4>
    1f4c:	2306      	movs	r3, #6
    1f4e:	6820      	ldr	r0, [r4, #0]
    1f50:	682a      	ldr	r2, [r5, #0]
    1f52:	68e1      	ldr	r1, [r4, #12]
    1f54:	4003      	ands	r3, r0
    1f56:	2500      	movs	r5, #0
    1f58:	2b04      	cmp	r3, #4
    1f5a:	d103      	bne.n	1f64 <_printf_common+0x70>
    1f5c:	1a8d      	subs	r5, r1, r2
    1f5e:	43eb      	mvns	r3, r5
    1f60:	17db      	asrs	r3, r3, #31
    1f62:	401d      	ands	r5, r3
    1f64:	68a3      	ldr	r3, [r4, #8]
    1f66:	6922      	ldr	r2, [r4, #16]
    1f68:	4293      	cmp	r3, r2
    1f6a:	dd01      	ble.n	1f70 <_printf_common+0x7c>
    1f6c:	1a9b      	subs	r3, r3, r2
    1f6e:	18ed      	adds	r5, r5, r3
    1f70:	2700      	movs	r7, #0
    1f72:	42bd      	cmp	r5, r7
    1f74:	d120      	bne.n	1fb8 <_printf_common+0xc4>
    1f76:	2000      	movs	r0, #0
    1f78:	e010      	b.n	1f9c <_printf_common+0xa8>
    1f7a:	3701      	adds	r7, #1
    1f7c:	68e3      	ldr	r3, [r4, #12]
    1f7e:	682a      	ldr	r2, [r5, #0]
    1f80:	1a9b      	subs	r3, r3, r2
    1f82:	429f      	cmp	r7, r3
    1f84:	dad2      	bge.n	1f2c <_printf_common+0x38>
    1f86:	0022      	movs	r2, r4
    1f88:	2301      	movs	r3, #1
    1f8a:	3219      	adds	r2, #25
    1f8c:	9901      	ldr	r1, [sp, #4]
    1f8e:	9800      	ldr	r0, [sp, #0]
    1f90:	9e08      	ldr	r6, [sp, #32]
    1f92:	47b0      	blx	r6
    1f94:	1c43      	adds	r3, r0, #1
    1f96:	d1f0      	bne.n	1f7a <_printf_common+0x86>
    1f98:	2001      	movs	r0, #1
    1f9a:	4240      	negs	r0, r0
    1f9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1f9e:	2030      	movs	r0, #48	; 0x30
    1fa0:	18e1      	adds	r1, r4, r3
    1fa2:	3143      	adds	r1, #67	; 0x43
    1fa4:	7008      	strb	r0, [r1, #0]
    1fa6:	0021      	movs	r1, r4
    1fa8:	1c5a      	adds	r2, r3, #1
    1faa:	3145      	adds	r1, #69	; 0x45
    1fac:	7809      	ldrb	r1, [r1, #0]
    1fae:	18a2      	adds	r2, r4, r2
    1fb0:	3243      	adds	r2, #67	; 0x43
    1fb2:	3302      	adds	r3, #2
    1fb4:	7011      	strb	r1, [r2, #0]
    1fb6:	e7c1      	b.n	1f3c <_printf_common+0x48>
    1fb8:	0022      	movs	r2, r4
    1fba:	2301      	movs	r3, #1
    1fbc:	321a      	adds	r2, #26
    1fbe:	9901      	ldr	r1, [sp, #4]
    1fc0:	9800      	ldr	r0, [sp, #0]
    1fc2:	9e08      	ldr	r6, [sp, #32]
    1fc4:	47b0      	blx	r6
    1fc6:	1c43      	adds	r3, r0, #1
    1fc8:	d0e6      	beq.n	1f98 <_printf_common+0xa4>
    1fca:	3701      	adds	r7, #1
    1fcc:	e7d1      	b.n	1f72 <_printf_common+0x7e>
	...

00001fd0 <_printf_i>:
    1fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fd2:	b08b      	sub	sp, #44	; 0x2c
    1fd4:	9206      	str	r2, [sp, #24]
    1fd6:	000a      	movs	r2, r1
    1fd8:	3243      	adds	r2, #67	; 0x43
    1fda:	9307      	str	r3, [sp, #28]
    1fdc:	9005      	str	r0, [sp, #20]
    1fde:	9204      	str	r2, [sp, #16]
    1fe0:	7e0a      	ldrb	r2, [r1, #24]
    1fe2:	000c      	movs	r4, r1
    1fe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1fe6:	2a6e      	cmp	r2, #110	; 0x6e
    1fe8:	d100      	bne.n	1fec <_printf_i+0x1c>
    1fea:	e08f      	b.n	210c <STACK_SIZE+0x10c>
    1fec:	d817      	bhi.n	201e <STACK_SIZE+0x1e>
    1fee:	2a63      	cmp	r2, #99	; 0x63
    1ff0:	d02c      	beq.n	204c <STACK_SIZE+0x4c>
    1ff2:	d808      	bhi.n	2006 <STACK_SIZE+0x6>
    1ff4:	2a00      	cmp	r2, #0
    1ff6:	d100      	bne.n	1ffa <_printf_i+0x2a>
    1ff8:	e099      	b.n	212e <STACK_SIZE+0x12e>
    1ffa:	2a58      	cmp	r2, #88	; 0x58
    1ffc:	d054      	beq.n	20a8 <STACK_SIZE+0xa8>
    1ffe:	0026      	movs	r6, r4
    2000:	3642      	adds	r6, #66	; 0x42
    2002:	7032      	strb	r2, [r6, #0]
    2004:	e029      	b.n	205a <STACK_SIZE+0x5a>
    2006:	2a64      	cmp	r2, #100	; 0x64
    2008:	d001      	beq.n	200e <STACK_SIZE+0xe>
    200a:	2a69      	cmp	r2, #105	; 0x69
    200c:	d1f7      	bne.n	1ffe <_printf_i+0x2e>
    200e:	6821      	ldr	r1, [r4, #0]
    2010:	681a      	ldr	r2, [r3, #0]
    2012:	0608      	lsls	r0, r1, #24
    2014:	d523      	bpl.n	205e <STACK_SIZE+0x5e>
    2016:	1d11      	adds	r1, r2, #4
    2018:	6019      	str	r1, [r3, #0]
    201a:	6815      	ldr	r5, [r2, #0]
    201c:	e025      	b.n	206a <STACK_SIZE+0x6a>
    201e:	2a73      	cmp	r2, #115	; 0x73
    2020:	d100      	bne.n	2024 <STACK_SIZE+0x24>
    2022:	e088      	b.n	2136 <STACK_SIZE+0x136>
    2024:	d808      	bhi.n	2038 <STACK_SIZE+0x38>
    2026:	2a6f      	cmp	r2, #111	; 0x6f
    2028:	d029      	beq.n	207e <STACK_SIZE+0x7e>
    202a:	2a70      	cmp	r2, #112	; 0x70
    202c:	d1e7      	bne.n	1ffe <_printf_i+0x2e>
    202e:	2220      	movs	r2, #32
    2030:	6809      	ldr	r1, [r1, #0]
    2032:	430a      	orrs	r2, r1
    2034:	6022      	str	r2, [r4, #0]
    2036:	e003      	b.n	2040 <STACK_SIZE+0x40>
    2038:	2a75      	cmp	r2, #117	; 0x75
    203a:	d020      	beq.n	207e <STACK_SIZE+0x7e>
    203c:	2a78      	cmp	r2, #120	; 0x78
    203e:	d1de      	bne.n	1ffe <_printf_i+0x2e>
    2040:	0022      	movs	r2, r4
    2042:	2178      	movs	r1, #120	; 0x78
    2044:	3245      	adds	r2, #69	; 0x45
    2046:	7011      	strb	r1, [r2, #0]
    2048:	4a6c      	ldr	r2, [pc, #432]	; (21fc <STACK_SIZE+0x1fc>)
    204a:	e030      	b.n	20ae <STACK_SIZE+0xae>
    204c:	000e      	movs	r6, r1
    204e:	681a      	ldr	r2, [r3, #0]
    2050:	3642      	adds	r6, #66	; 0x42
    2052:	1d11      	adds	r1, r2, #4
    2054:	6019      	str	r1, [r3, #0]
    2056:	6813      	ldr	r3, [r2, #0]
    2058:	7033      	strb	r3, [r6, #0]
    205a:	2301      	movs	r3, #1
    205c:	e079      	b.n	2152 <STACK_SIZE+0x152>
    205e:	0649      	lsls	r1, r1, #25
    2060:	d5d9      	bpl.n	2016 <STACK_SIZE+0x16>
    2062:	1d11      	adds	r1, r2, #4
    2064:	6019      	str	r1, [r3, #0]
    2066:	2300      	movs	r3, #0
    2068:	5ed5      	ldrsh	r5, [r2, r3]
    206a:	2d00      	cmp	r5, #0
    206c:	da03      	bge.n	2076 <STACK_SIZE+0x76>
    206e:	232d      	movs	r3, #45	; 0x2d
    2070:	9a04      	ldr	r2, [sp, #16]
    2072:	426d      	negs	r5, r5
    2074:	7013      	strb	r3, [r2, #0]
    2076:	4b62      	ldr	r3, [pc, #392]	; (2200 <STACK_SIZE+0x200>)
    2078:	270a      	movs	r7, #10
    207a:	9303      	str	r3, [sp, #12]
    207c:	e02f      	b.n	20de <STACK_SIZE+0xde>
    207e:	6820      	ldr	r0, [r4, #0]
    2080:	6819      	ldr	r1, [r3, #0]
    2082:	0605      	lsls	r5, r0, #24
    2084:	d503      	bpl.n	208e <STACK_SIZE+0x8e>
    2086:	1d08      	adds	r0, r1, #4
    2088:	6018      	str	r0, [r3, #0]
    208a:	680d      	ldr	r5, [r1, #0]
    208c:	e005      	b.n	209a <STACK_SIZE+0x9a>
    208e:	0640      	lsls	r0, r0, #25
    2090:	d5f9      	bpl.n	2086 <STACK_SIZE+0x86>
    2092:	680d      	ldr	r5, [r1, #0]
    2094:	1d08      	adds	r0, r1, #4
    2096:	6018      	str	r0, [r3, #0]
    2098:	b2ad      	uxth	r5, r5
    209a:	4b59      	ldr	r3, [pc, #356]	; (2200 <STACK_SIZE+0x200>)
    209c:	2708      	movs	r7, #8
    209e:	9303      	str	r3, [sp, #12]
    20a0:	2a6f      	cmp	r2, #111	; 0x6f
    20a2:	d018      	beq.n	20d6 <STACK_SIZE+0xd6>
    20a4:	270a      	movs	r7, #10
    20a6:	e016      	b.n	20d6 <STACK_SIZE+0xd6>
    20a8:	3145      	adds	r1, #69	; 0x45
    20aa:	700a      	strb	r2, [r1, #0]
    20ac:	4a54      	ldr	r2, [pc, #336]	; (2200 <STACK_SIZE+0x200>)
    20ae:	9203      	str	r2, [sp, #12]
    20b0:	681a      	ldr	r2, [r3, #0]
    20b2:	6821      	ldr	r1, [r4, #0]
    20b4:	1d10      	adds	r0, r2, #4
    20b6:	6018      	str	r0, [r3, #0]
    20b8:	6815      	ldr	r5, [r2, #0]
    20ba:	0608      	lsls	r0, r1, #24
    20bc:	d522      	bpl.n	2104 <STACK_SIZE+0x104>
    20be:	07cb      	lsls	r3, r1, #31
    20c0:	d502      	bpl.n	20c8 <STACK_SIZE+0xc8>
    20c2:	2320      	movs	r3, #32
    20c4:	4319      	orrs	r1, r3
    20c6:	6021      	str	r1, [r4, #0]
    20c8:	2710      	movs	r7, #16
    20ca:	2d00      	cmp	r5, #0
    20cc:	d103      	bne.n	20d6 <STACK_SIZE+0xd6>
    20ce:	2320      	movs	r3, #32
    20d0:	6822      	ldr	r2, [r4, #0]
    20d2:	439a      	bics	r2, r3
    20d4:	6022      	str	r2, [r4, #0]
    20d6:	0023      	movs	r3, r4
    20d8:	2200      	movs	r2, #0
    20da:	3343      	adds	r3, #67	; 0x43
    20dc:	701a      	strb	r2, [r3, #0]
    20de:	6863      	ldr	r3, [r4, #4]
    20e0:	60a3      	str	r3, [r4, #8]
    20e2:	2b00      	cmp	r3, #0
    20e4:	db5c      	blt.n	21a0 <STACK_SIZE+0x1a0>
    20e6:	2204      	movs	r2, #4
    20e8:	6821      	ldr	r1, [r4, #0]
    20ea:	4391      	bics	r1, r2
    20ec:	6021      	str	r1, [r4, #0]
    20ee:	2d00      	cmp	r5, #0
    20f0:	d158      	bne.n	21a4 <STACK_SIZE+0x1a4>
    20f2:	9e04      	ldr	r6, [sp, #16]
    20f4:	2b00      	cmp	r3, #0
    20f6:	d064      	beq.n	21c2 <STACK_SIZE+0x1c2>
    20f8:	0026      	movs	r6, r4
    20fa:	9b03      	ldr	r3, [sp, #12]
    20fc:	3642      	adds	r6, #66	; 0x42
    20fe:	781b      	ldrb	r3, [r3, #0]
    2100:	7033      	strb	r3, [r6, #0]
    2102:	e05e      	b.n	21c2 <STACK_SIZE+0x1c2>
    2104:	0648      	lsls	r0, r1, #25
    2106:	d5da      	bpl.n	20be <STACK_SIZE+0xbe>
    2108:	b2ad      	uxth	r5, r5
    210a:	e7d8      	b.n	20be <STACK_SIZE+0xbe>
    210c:	6809      	ldr	r1, [r1, #0]
    210e:	681a      	ldr	r2, [r3, #0]
    2110:	0608      	lsls	r0, r1, #24
    2112:	d505      	bpl.n	2120 <STACK_SIZE+0x120>
    2114:	1d11      	adds	r1, r2, #4
    2116:	6019      	str	r1, [r3, #0]
    2118:	6813      	ldr	r3, [r2, #0]
    211a:	6962      	ldr	r2, [r4, #20]
    211c:	601a      	str	r2, [r3, #0]
    211e:	e006      	b.n	212e <STACK_SIZE+0x12e>
    2120:	0649      	lsls	r1, r1, #25
    2122:	d5f7      	bpl.n	2114 <STACK_SIZE+0x114>
    2124:	1d11      	adds	r1, r2, #4
    2126:	6019      	str	r1, [r3, #0]
    2128:	6813      	ldr	r3, [r2, #0]
    212a:	8aa2      	ldrh	r2, [r4, #20]
    212c:	801a      	strh	r2, [r3, #0]
    212e:	2300      	movs	r3, #0
    2130:	9e04      	ldr	r6, [sp, #16]
    2132:	6123      	str	r3, [r4, #16]
    2134:	e054      	b.n	21e0 <STACK_SIZE+0x1e0>
    2136:	681a      	ldr	r2, [r3, #0]
    2138:	1d11      	adds	r1, r2, #4
    213a:	6019      	str	r1, [r3, #0]
    213c:	6816      	ldr	r6, [r2, #0]
    213e:	2100      	movs	r1, #0
    2140:	6862      	ldr	r2, [r4, #4]
    2142:	0030      	movs	r0, r6
    2144:	f000 f870 	bl	2228 <memchr>
    2148:	2800      	cmp	r0, #0
    214a:	d001      	beq.n	2150 <STACK_SIZE+0x150>
    214c:	1b80      	subs	r0, r0, r6
    214e:	6060      	str	r0, [r4, #4]
    2150:	6863      	ldr	r3, [r4, #4]
    2152:	6123      	str	r3, [r4, #16]
    2154:	2300      	movs	r3, #0
    2156:	9a04      	ldr	r2, [sp, #16]
    2158:	7013      	strb	r3, [r2, #0]
    215a:	e041      	b.n	21e0 <STACK_SIZE+0x1e0>
    215c:	6923      	ldr	r3, [r4, #16]
    215e:	0032      	movs	r2, r6
    2160:	9906      	ldr	r1, [sp, #24]
    2162:	9805      	ldr	r0, [sp, #20]
    2164:	9d07      	ldr	r5, [sp, #28]
    2166:	47a8      	blx	r5
    2168:	1c43      	adds	r3, r0, #1
    216a:	d043      	beq.n	21f4 <STACK_SIZE+0x1f4>
    216c:	6823      	ldr	r3, [r4, #0]
    216e:	2500      	movs	r5, #0
    2170:	079b      	lsls	r3, r3, #30
    2172:	d40f      	bmi.n	2194 <STACK_SIZE+0x194>
    2174:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2176:	68e0      	ldr	r0, [r4, #12]
    2178:	4298      	cmp	r0, r3
    217a:	da3d      	bge.n	21f8 <STACK_SIZE+0x1f8>
    217c:	0018      	movs	r0, r3
    217e:	e03b      	b.n	21f8 <STACK_SIZE+0x1f8>
    2180:	0022      	movs	r2, r4
    2182:	2301      	movs	r3, #1
    2184:	3219      	adds	r2, #25
    2186:	9906      	ldr	r1, [sp, #24]
    2188:	9805      	ldr	r0, [sp, #20]
    218a:	9e07      	ldr	r6, [sp, #28]
    218c:	47b0      	blx	r6
    218e:	1c43      	adds	r3, r0, #1
    2190:	d030      	beq.n	21f4 <STACK_SIZE+0x1f4>
    2192:	3501      	adds	r5, #1
    2194:	68e3      	ldr	r3, [r4, #12]
    2196:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2198:	1a9b      	subs	r3, r3, r2
    219a:	429d      	cmp	r5, r3
    219c:	dbf0      	blt.n	2180 <STACK_SIZE+0x180>
    219e:	e7e9      	b.n	2174 <STACK_SIZE+0x174>
    21a0:	2d00      	cmp	r5, #0
    21a2:	d0a9      	beq.n	20f8 <STACK_SIZE+0xf8>
    21a4:	9e04      	ldr	r6, [sp, #16]
    21a6:	0028      	movs	r0, r5
    21a8:	0039      	movs	r1, r7
    21aa:	f7ff fb61 	bl	1870 <__aeabi_uidivmod>
    21ae:	9b03      	ldr	r3, [sp, #12]
    21b0:	3e01      	subs	r6, #1
    21b2:	5c5b      	ldrb	r3, [r3, r1]
    21b4:	0028      	movs	r0, r5
    21b6:	7033      	strb	r3, [r6, #0]
    21b8:	0039      	movs	r1, r7
    21ba:	f7ff fad3 	bl	1764 <__udivsi3>
    21be:	1e05      	subs	r5, r0, #0
    21c0:	d1f1      	bne.n	21a6 <STACK_SIZE+0x1a6>
    21c2:	2f08      	cmp	r7, #8
    21c4:	d109      	bne.n	21da <STACK_SIZE+0x1da>
    21c6:	6823      	ldr	r3, [r4, #0]
    21c8:	07db      	lsls	r3, r3, #31
    21ca:	d506      	bpl.n	21da <STACK_SIZE+0x1da>
    21cc:	6863      	ldr	r3, [r4, #4]
    21ce:	6922      	ldr	r2, [r4, #16]
    21d0:	4293      	cmp	r3, r2
    21d2:	dc02      	bgt.n	21da <STACK_SIZE+0x1da>
    21d4:	2330      	movs	r3, #48	; 0x30
    21d6:	3e01      	subs	r6, #1
    21d8:	7033      	strb	r3, [r6, #0]
    21da:	9b04      	ldr	r3, [sp, #16]
    21dc:	1b9b      	subs	r3, r3, r6
    21de:	6123      	str	r3, [r4, #16]
    21e0:	9b07      	ldr	r3, [sp, #28]
    21e2:	aa09      	add	r2, sp, #36	; 0x24
    21e4:	9300      	str	r3, [sp, #0]
    21e6:	0021      	movs	r1, r4
    21e8:	9b06      	ldr	r3, [sp, #24]
    21ea:	9805      	ldr	r0, [sp, #20]
    21ec:	f7ff fe82 	bl	1ef4 <_printf_common>
    21f0:	1c43      	adds	r3, r0, #1
    21f2:	d1b3      	bne.n	215c <STACK_SIZE+0x15c>
    21f4:	2001      	movs	r0, #1
    21f6:	4240      	negs	r0, r0
    21f8:	b00b      	add	sp, #44	; 0x2c
    21fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21fc:	000026d6 	.word	0x000026d6
    2200:	000026c5 	.word	0x000026c5

00002204 <_sbrk_r>:
    2204:	2300      	movs	r3, #0
    2206:	b570      	push	{r4, r5, r6, lr}
    2208:	4c06      	ldr	r4, [pc, #24]	; (2224 <_sbrk_r+0x20>)
    220a:	0005      	movs	r5, r0
    220c:	0008      	movs	r0, r1
    220e:	6023      	str	r3, [r4, #0]
    2210:	f7fe fbf2 	bl	9f8 <_sbrk>
    2214:	1c43      	adds	r3, r0, #1
    2216:	d103      	bne.n	2220 <_sbrk_r+0x1c>
    2218:	6823      	ldr	r3, [r4, #0]
    221a:	2b00      	cmp	r3, #0
    221c:	d000      	beq.n	2220 <_sbrk_r+0x1c>
    221e:	602b      	str	r3, [r5, #0]
    2220:	bd70      	pop	{r4, r5, r6, pc}
    2222:	46c0      	nop			; (mov r8, r8)
    2224:	2000018c 	.word	0x2000018c

00002228 <memchr>:
    2228:	b2c9      	uxtb	r1, r1
    222a:	1882      	adds	r2, r0, r2
    222c:	4290      	cmp	r0, r2
    222e:	d101      	bne.n	2234 <memchr+0xc>
    2230:	2000      	movs	r0, #0
    2232:	4770      	bx	lr
    2234:	7803      	ldrb	r3, [r0, #0]
    2236:	428b      	cmp	r3, r1
    2238:	d0fb      	beq.n	2232 <memchr+0xa>
    223a:	3001      	adds	r0, #1
    223c:	e7f6      	b.n	222c <memchr+0x4>

0000223e <memcpy>:
    223e:	2300      	movs	r3, #0
    2240:	b510      	push	{r4, lr}
    2242:	429a      	cmp	r2, r3
    2244:	d100      	bne.n	2248 <memcpy+0xa>
    2246:	bd10      	pop	{r4, pc}
    2248:	5ccc      	ldrb	r4, [r1, r3]
    224a:	54c4      	strb	r4, [r0, r3]
    224c:	3301      	adds	r3, #1
    224e:	e7f8      	b.n	2242 <memcpy+0x4>

00002250 <memmove>:
    2250:	b510      	push	{r4, lr}
    2252:	4288      	cmp	r0, r1
    2254:	d902      	bls.n	225c <memmove+0xc>
    2256:	188b      	adds	r3, r1, r2
    2258:	4298      	cmp	r0, r3
    225a:	d308      	bcc.n	226e <memmove+0x1e>
    225c:	2300      	movs	r3, #0
    225e:	429a      	cmp	r2, r3
    2260:	d007      	beq.n	2272 <memmove+0x22>
    2262:	5ccc      	ldrb	r4, [r1, r3]
    2264:	54c4      	strb	r4, [r0, r3]
    2266:	3301      	adds	r3, #1
    2268:	e7f9      	b.n	225e <memmove+0xe>
    226a:	5c8b      	ldrb	r3, [r1, r2]
    226c:	5483      	strb	r3, [r0, r2]
    226e:	3a01      	subs	r2, #1
    2270:	d2fb      	bcs.n	226a <memmove+0x1a>
    2272:	bd10      	pop	{r4, pc}

00002274 <__malloc_lock>:
    2274:	4770      	bx	lr

00002276 <__malloc_unlock>:
    2276:	4770      	bx	lr

00002278 <_free_r>:
    2278:	b570      	push	{r4, r5, r6, lr}
    227a:	0005      	movs	r5, r0
    227c:	2900      	cmp	r1, #0
    227e:	d010      	beq.n	22a2 <_free_r+0x2a>
    2280:	1f0c      	subs	r4, r1, #4
    2282:	6823      	ldr	r3, [r4, #0]
    2284:	2b00      	cmp	r3, #0
    2286:	da00      	bge.n	228a <_free_r+0x12>
    2288:	18e4      	adds	r4, r4, r3
    228a:	0028      	movs	r0, r5
    228c:	f7ff fff2 	bl	2274 <__malloc_lock>
    2290:	4a1d      	ldr	r2, [pc, #116]	; (2308 <_free_r+0x90>)
    2292:	6813      	ldr	r3, [r2, #0]
    2294:	2b00      	cmp	r3, #0
    2296:	d105      	bne.n	22a4 <_free_r+0x2c>
    2298:	6063      	str	r3, [r4, #4]
    229a:	6014      	str	r4, [r2, #0]
    229c:	0028      	movs	r0, r5
    229e:	f7ff ffea 	bl	2276 <__malloc_unlock>
    22a2:	bd70      	pop	{r4, r5, r6, pc}
    22a4:	42a3      	cmp	r3, r4
    22a6:	d909      	bls.n	22bc <_free_r+0x44>
    22a8:	6821      	ldr	r1, [r4, #0]
    22aa:	1860      	adds	r0, r4, r1
    22ac:	4283      	cmp	r3, r0
    22ae:	d1f3      	bne.n	2298 <_free_r+0x20>
    22b0:	6818      	ldr	r0, [r3, #0]
    22b2:	685b      	ldr	r3, [r3, #4]
    22b4:	1841      	adds	r1, r0, r1
    22b6:	6021      	str	r1, [r4, #0]
    22b8:	e7ee      	b.n	2298 <_free_r+0x20>
    22ba:	0013      	movs	r3, r2
    22bc:	685a      	ldr	r2, [r3, #4]
    22be:	2a00      	cmp	r2, #0
    22c0:	d001      	beq.n	22c6 <_free_r+0x4e>
    22c2:	42a2      	cmp	r2, r4
    22c4:	d9f9      	bls.n	22ba <_free_r+0x42>
    22c6:	6819      	ldr	r1, [r3, #0]
    22c8:	1858      	adds	r0, r3, r1
    22ca:	42a0      	cmp	r0, r4
    22cc:	d10b      	bne.n	22e6 <_free_r+0x6e>
    22ce:	6820      	ldr	r0, [r4, #0]
    22d0:	1809      	adds	r1, r1, r0
    22d2:	1858      	adds	r0, r3, r1
    22d4:	6019      	str	r1, [r3, #0]
    22d6:	4282      	cmp	r2, r0
    22d8:	d1e0      	bne.n	229c <_free_r+0x24>
    22da:	6810      	ldr	r0, [r2, #0]
    22dc:	6852      	ldr	r2, [r2, #4]
    22de:	1841      	adds	r1, r0, r1
    22e0:	6019      	str	r1, [r3, #0]
    22e2:	605a      	str	r2, [r3, #4]
    22e4:	e7da      	b.n	229c <_free_r+0x24>
    22e6:	42a0      	cmp	r0, r4
    22e8:	d902      	bls.n	22f0 <_free_r+0x78>
    22ea:	230c      	movs	r3, #12
    22ec:	602b      	str	r3, [r5, #0]
    22ee:	e7d5      	b.n	229c <_free_r+0x24>
    22f0:	6821      	ldr	r1, [r4, #0]
    22f2:	1860      	adds	r0, r4, r1
    22f4:	4282      	cmp	r2, r0
    22f6:	d103      	bne.n	2300 <_free_r+0x88>
    22f8:	6810      	ldr	r0, [r2, #0]
    22fa:	6852      	ldr	r2, [r2, #4]
    22fc:	1841      	adds	r1, r0, r1
    22fe:	6021      	str	r1, [r4, #0]
    2300:	6062      	str	r2, [r4, #4]
    2302:	605c      	str	r4, [r3, #4]
    2304:	e7ca      	b.n	229c <_free_r+0x24>
    2306:	46c0      	nop			; (mov r8, r8)
    2308:	20000118 	.word	0x20000118

0000230c <_realloc_r>:
    230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    230e:	0007      	movs	r7, r0
    2310:	000d      	movs	r5, r1
    2312:	0016      	movs	r6, r2
    2314:	2900      	cmp	r1, #0
    2316:	d105      	bne.n	2324 <_realloc_r+0x18>
    2318:	0011      	movs	r1, r2
    231a:	f7ff fc27 	bl	1b6c <_malloc_r>
    231e:	0004      	movs	r4, r0
    2320:	0020      	movs	r0, r4
    2322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2324:	2a00      	cmp	r2, #0
    2326:	d103      	bne.n	2330 <_realloc_r+0x24>
    2328:	f7ff ffa6 	bl	2278 <_free_r>
    232c:	0034      	movs	r4, r6
    232e:	e7f7      	b.n	2320 <_realloc_r+0x14>
    2330:	f000 f812 	bl	2358 <_malloc_usable_size_r>
    2334:	002c      	movs	r4, r5
    2336:	4286      	cmp	r6, r0
    2338:	d9f2      	bls.n	2320 <_realloc_r+0x14>
    233a:	0031      	movs	r1, r6
    233c:	0038      	movs	r0, r7
    233e:	f7ff fc15 	bl	1b6c <_malloc_r>
    2342:	1e04      	subs	r4, r0, #0
    2344:	d0ec      	beq.n	2320 <_realloc_r+0x14>
    2346:	0029      	movs	r1, r5
    2348:	0032      	movs	r2, r6
    234a:	f7ff ff78 	bl	223e <memcpy>
    234e:	0029      	movs	r1, r5
    2350:	0038      	movs	r0, r7
    2352:	f7ff ff91 	bl	2278 <_free_r>
    2356:	e7e3      	b.n	2320 <_realloc_r+0x14>

00002358 <_malloc_usable_size_r>:
    2358:	1f0b      	subs	r3, r1, #4
    235a:	681b      	ldr	r3, [r3, #0]
    235c:	1f18      	subs	r0, r3, #4
    235e:	2b00      	cmp	r3, #0
    2360:	da01      	bge.n	2366 <_malloc_usable_size_r+0xe>
    2362:	580b      	ldr	r3, [r1, r0]
    2364:	18c0      	adds	r0, r0, r3
    2366:	4770      	bx	lr
    2368:	682f2e2e 	.word	0x682f2e2e
    236c:	732f6c61 	.word	0x732f6c61
    2370:	682f6372 	.word	0x682f6372
    2374:	635f6c61 	.word	0x635f6c61
    2378:	6e656c61 	.word	0x6e656c61
    237c:	2e726164 	.word	0x2e726164
    2380:	00000063 	.word	0x00000063
    2384:	682f2e2e 	.word	0x682f2e2e
    2388:	732f6c61 	.word	0x732f6c61
    238c:	682f6372 	.word	0x682f6372
    2390:	695f6c61 	.word	0x695f6c61
    2394:	00632e6f 	.word	0x00632e6f
    2398:	682f2e2e 	.word	0x682f2e2e
    239c:	732f6c61 	.word	0x732f6c61
    23a0:	682f6372 	.word	0x682f6372
    23a4:	755f6c61 	.word	0x755f6c61
    23a8:	74726173 	.word	0x74726173
    23ac:	7973615f 	.word	0x7973615f
    23b0:	632e636e 	.word	0x632e636e
    23b4:	00000000 	.word	0x00000000
    23b8:	682f2e2e 	.word	0x682f2e2e
    23bc:	752f6c61 	.word	0x752f6c61
    23c0:	736c6974 	.word	0x736c6974
    23c4:	6372732f 	.word	0x6372732f
    23c8:	6974752f 	.word	0x6974752f
    23cc:	725f736c 	.word	0x725f736c
    23d0:	62676e69 	.word	0x62676e69
    23d4:	65666675 	.word	0x65666675
    23d8:	00632e72 	.word	0x00632e72

000023dc <_map>:
    23dc:	0000000f 0000000f 682f2e2e 652f6c70     ........../hpl/e
    23ec:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    23fc:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    240c:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
    241c:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    242c:	0000632e 656d6974 25203d20 736d2064     .c..time = %d ms
    243c:	00000000 3d3d0a0d 3d3d3d3d 3d3d3d3d     ......==========
    244c:	3d3d3d3d 0a0d3d3d 72617473 676e6974     ======..starting
    245c:	5f756d20 74726f70 7365745f 000a0d74      mu_port_test...
    246c:	656d6974 66656220 2065726f 00207369     time before is .
    247c:	00000a0d 706f6f6c 20676e69 20726f66     ....looping for 
    248c:	20352e32 6f636573 2e73646e 00002e2e     2.5 seconds.....
    249c:	656e6f64 7420202e 20656d69 65746661     done.  time afte
    24ac:	73692072 00000020 74696177 20676e69     r is ...waiting 
    24bc:	20352e32 6f636573 2073646e 20726f66     2.5 seconds for 
    24cc:	20435452 6374616d 2e2e2e68 00000000     RTC match.......
    24dc:	656e6f64 7420202e 20656d69 6e207369     done.  time is n
    24ec:	0020776f 73616c66 676e6968 44454c20     ow .flashing LED
    24fc:	726f6620 352e3220 63657320 73646e6f      for 2.5 seconds
    250c:	002e2e2e 74696177 20676e69 20726f66     ....waiting for 
    251c:	74747562 70206e6f 73736572 79732820     button press (sy
    252c:	7268636e 756f6e6f 2e2e2973 0000002e     nchronous)......
    253c:	65636572 64657669 74756220 206e6f74     received button 
    254c:	73657270 0a0d2e73 00000000 74696177     press.......wait
    255c:	20676e69 20726f66 74747562 70206e6f     ing for button p
    256c:	73736572 73612820 68636e79 6f6e6f72     ress (asynchrono
    257c:	2e297375 00002e2e 74696177 20676e69     us).....waiting 
    258c:	20726f66 6279656b 6472616f 706e6920     for keyboard inp
    259c:	28207475 636e7973 6e6f7268 2973756f     ut (synchronous)
    25ac:	002e2e2e 65636572 64657669 63252720     ....received '%c
    25bc:	000a0d27 74696177 20676e69 20726f66     '...waiting for 
    25cc:	6279656b 6472616f 706e6920 28207475     keyboard input (
    25dc:	6e797361 6f726863 73756f6e 2e2e2e29     asynchronous)...
    25ec:	00000000 65656c73 676e6970 726f6620     ....sleeping for
    25fc:	352e3220 63657320 73646e6f 002e2e2e      2.5 seconds....
    260c:	65656c73 676e6970 746e7520 62206c69     sleeping until b
    261c:	6f747475 7270206e 2e737365 00002e2e     utton press.....
    262c:	20646e65 6d20666f 6f705f75 745f7472     end of mu_port_t
    263c:	0d747365 3d3d3d0a 3d3d3d3d 3d3d3d3d     est..===========
    264c:	3d3d3d3d 000a0d3d                       =====...

00002654 <__sf_fake_stderr>:
	...

00002674 <__sf_fake_stdin>:
	...

00002694 <__sf_fake_stdout>:
	...
    26b4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    26c4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    26d4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    26e4:	00006665                                ef..

000026e8 <_init>:
    26e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    26ee:	bc08      	pop	{r3}
    26f0:	469e      	mov	lr, r3
    26f2:	4770      	bx	lr

000026f4 <__init_array_start>:
    26f4:	000000dd 	.word	0x000000dd

000026f8 <_fini>:
    26f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26fa:	46c0      	nop			; (mov r8, r8)
    26fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    26fe:	bc08      	pop	{r3}
    2700:	469e      	mov	lr, r3
    2702:	4770      	bx	lr

00002704 <__fini_array_start>:
    2704:	000000b5 	.word	0x000000b5
