
mulib_port_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002588  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00002588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011c  20000064  000025ec  00020064  2**2
                  ALLOC
  3 .stack        00002000  20000180  00002708  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002826d  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003562  00000000  00000000  00048352  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ce14  00000000  00000000  0004b8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ba8  00000000  00000000  000586c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001148  00000000  00000000  00059270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a550  00000000  00000000  0005a3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000104d7  00000000  00000000  00074908  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a8a7  00000000  00000000  00084ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002190  00000000  00000000  0010f688  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 21 00 20 25 01 00 00 21 01 00 00 21 01 00 00     .!. %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      4c:	9d 0d 00 00 cd 0a 00 00 21 01 00 00 21 01 00 00     ........!...!...
      5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      6c:	21 01 00 00 79 0f 00 00 21 01 00 00 21 01 00 00     !...y...!...!...
      7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      8c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	00002588 	.word	0x00002588

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	00002588 	.word	0x00002588
     10c:	00002588 	.word	0x00002588
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	0000033d 	.word	0x0000033d

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
     124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     126:	4a2a      	ldr	r2, [pc, #168]	; (1d0 <Reset_Handler+0xac>)
     128:	4b2a      	ldr	r3, [pc, #168]	; (1d4 <Reset_Handler+0xb0>)
     12a:	429a      	cmp	r2, r3
     12c:	d011      	beq.n	152 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     12e:	001a      	movs	r2, r3
     130:	4b29      	ldr	r3, [pc, #164]	; (1d8 <Reset_Handler+0xb4>)
     132:	429a      	cmp	r2, r3
     134:	d20d      	bcs.n	152 <Reset_Handler+0x2e>
     136:	4a29      	ldr	r2, [pc, #164]	; (1dc <Reset_Handler+0xb8>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xb0>)
     146:	4922      	ldr	r1, [pc, #136]	; (1d0 <Reset_Handler+0xac>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     152:	4a23      	ldr	r2, [pc, #140]	; (1e0 <Reset_Handler+0xbc>)
     154:	4b23      	ldr	r3, [pc, #140]	; (1e4 <Reset_Handler+0xc0>)
     156:	429a      	cmp	r2, r3
     158:	d20a      	bcs.n	170 <Reset_Handler+0x4c>
     15a:	43d3      	mvns	r3, r2
     15c:	4921      	ldr	r1, [pc, #132]	; (1e4 <Reset_Handler+0xc0>)
     15e:	185b      	adds	r3, r3, r1
     160:	2103      	movs	r1, #3
     162:	438b      	bics	r3, r1
     164:	3304      	adds	r3, #4
     166:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     168:	2100      	movs	r1, #0
     16a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     16c:	4293      	cmp	r3, r2
     16e:	d1fc      	bne.n	16a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     170:	4a1d      	ldr	r2, [pc, #116]	; (1e8 <Reset_Handler+0xc4>)
     172:	21ff      	movs	r1, #255	; 0xff
     174:	4b1d      	ldr	r3, [pc, #116]	; (1ec <Reset_Handler+0xc8>)
     176:	438b      	bics	r3, r1
     178:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17a:	39fd      	subs	r1, #253	; 0xfd
     17c:	2390      	movs	r3, #144	; 0x90
     17e:	005b      	lsls	r3, r3, #1
     180:	4a1b      	ldr	r2, [pc, #108]	; (1f0 <Reset_Handler+0xcc>)
     182:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     184:	4a1b      	ldr	r2, [pc, #108]	; (1f4 <Reset_Handler+0xd0>)
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	2503      	movs	r5, #3
     18a:	43ab      	bics	r3, r5
     18c:	2402      	movs	r4, #2
     18e:	4323      	orrs	r3, r4
     190:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     192:	78d3      	ldrb	r3, [r2, #3]
     194:	270c      	movs	r7, #12
     196:	43bb      	bics	r3, r7
     198:	2608      	movs	r6, #8
     19a:	4333      	orrs	r3, r6
     19c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     19e:	4b16      	ldr	r3, [pc, #88]	; (1f8 <Reset_Handler+0xd4>)
     1a0:	7b98      	ldrb	r0, [r3, #14]
     1a2:	2230      	movs	r2, #48	; 0x30
     1a4:	4390      	bics	r0, r2
     1a6:	2220      	movs	r2, #32
     1a8:	4310      	orrs	r0, r2
     1aa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1ac:	7b99      	ldrb	r1, [r3, #14]
     1ae:	43b9      	bics	r1, r7
     1b0:	4331      	orrs	r1, r6
     1b2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b4:	7b9a      	ldrb	r2, [r3, #14]
     1b6:	43aa      	bics	r2, r5
     1b8:	4322      	orrs	r2, r4
     1ba:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1bc:	4a0f      	ldr	r2, [pc, #60]	; (1fc <Reset_Handler+0xd8>)
     1be:	6853      	ldr	r3, [r2, #4]
     1c0:	2180      	movs	r1, #128	; 0x80
     1c2:	430b      	orrs	r3, r1
     1c4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1c6:	4b0e      	ldr	r3, [pc, #56]	; (200 <Reset_Handler+0xdc>)
     1c8:	4798      	blx	r3
        main();
     1ca:	4b0e      	ldr	r3, [pc, #56]	; (204 <Reset_Handler+0xe0>)
     1cc:	4798      	blx	r3
     1ce:	e7fe      	b.n	1ce <Reset_Handler+0xaa>
     1d0:	00002588 	.word	0x00002588
     1d4:	20000000 	.word	0x20000000
     1d8:	20000064 	.word	0x20000064
     1dc:	20000004 	.word	0x20000004
     1e0:	20000064 	.word	0x20000064
     1e4:	20000180 	.word	0x20000180
     1e8:	e000ed00 	.word	0xe000ed00
     1ec:	00000000 	.word	0x00000000
     1f0:	41007000 	.word	0x41007000
     1f4:	41005000 	.word	0x41005000
     1f8:	41004800 	.word	0x41004800
     1fc:	41004000 	.word	0x41004000
     200:	00001975 	.word	0x00001975
     204:	00001039 	.word	0x00001039

00000208 <EXTERNAL_IRQ_0_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct calendar_descriptor CALENDAR_0;

void EXTERNAL_IRQ_0_init(void)
{
     208:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     20a:	4a10      	ldr	r2, [pc, #64]	; (24c <EXTERNAL_IRQ_0_init+0x44>)
     20c:	4b10      	ldr	r3, [pc, #64]	; (250 <EXTERNAL_IRQ_0_init+0x48>)
     20e:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     210:	22c0      	movs	r2, #192	; 0xc0
     212:	05d2      	lsls	r2, r2, #23
     214:	2080      	movs	r0, #128	; 0x80
     216:	0200      	lsls	r0, r0, #8
     218:	6050      	str	r0, [r2, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     21a:	4b0e      	ldr	r3, [pc, #56]	; (254 <EXTERNAL_IRQ_0_init+0x4c>)
     21c:	490e      	ldr	r1, [pc, #56]	; (258 <EXTERNAL_IRQ_0_init+0x50>)
     21e:	6299      	str	r1, [r3, #40]	; 0x28
     220:	490e      	ldr	r1, [pc, #56]	; (25c <EXTERNAL_IRQ_0_init+0x54>)
     222:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     224:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     226:	214f      	movs	r1, #79	; 0x4f
     228:	5c5c      	ldrb	r4, [r3, r1]
     22a:	2504      	movs	r5, #4
     22c:	432c      	orrs	r4, r5
     22e:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     230:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     232:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     234:	2001      	movs	r0, #1
     236:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     238:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     23c:	3918      	subs	r1, #24
     23e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     240:	300e      	adds	r0, #14
     242:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     244:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(USER_BUTTON_AL, PINMUX_PA15A_EIC_EXTINT15);

	ext_irq_init();
     246:	4b06      	ldr	r3, [pc, #24]	; (260 <EXTERNAL_IRQ_0_init+0x58>)
     248:	4798      	blx	r3
}
     24a:	bd70      	pop	{r4, r5, r6, pc}
     24c:	00004005 	.word	0x00004005
     250:	40000c00 	.word	0x40000c00
     254:	41004400 	.word	0x41004400
     258:	40028000 	.word	0x40028000
     25c:	c0020000 	.word	0xc0020000
     260:	00000455 	.word	0x00000455

00000264 <USART_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     264:	4a04      	ldr	r2, [pc, #16]	; (278 <USART_0_CLOCK_init+0x14>)
     266:	6a13      	ldr	r3, [r2, #32]
     268:	2120      	movs	r1, #32
     26a:	430b      	orrs	r3, r1
     26c:	6213      	str	r3, [r2, #32]
     26e:	4a03      	ldr	r2, [pc, #12]	; (27c <USART_0_CLOCK_init+0x18>)
     270:	4b03      	ldr	r3, [pc, #12]	; (280 <USART_0_CLOCK_init+0x1c>)
     272:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     274:	4770      	bx	lr
     276:	46c0      	nop			; (mov r8, r8)
     278:	40000400 	.word	0x40000400
     27c:	00004017 	.word	0x00004017
     280:	40000c00 	.word	0x40000c00

00000284 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     284:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     286:	4b0e      	ldr	r3, [pc, #56]	; (2c0 <USART_0_PORT_init+0x3c>)
     288:	2256      	movs	r2, #86	; 0x56
     28a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     28c:	2501      	movs	r5, #1
     28e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     290:	2401      	movs	r4, #1
     292:	4321      	orrs	r1, r4
     294:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     296:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     298:	203b      	movs	r0, #59	; 0x3b
     29a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     29c:	3a47      	subs	r2, #71	; 0x47
     29e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     2a0:	3a0d      	subs	r2, #13
     2a2:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2a4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2a6:	2157      	movs	r1, #87	; 0x57
     2a8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2aa:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2ac:	4322      	orrs	r2, r4
     2ae:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2b0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2b2:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2b4:	3948      	subs	r1, #72	; 0x48
     2b6:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2b8:	3111      	adds	r1, #17
     2ba:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2bc:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     2be:	bd30      	pop	{r4, r5, pc}
     2c0:	41004400 	.word	0x41004400

000002c4 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     2c4:	b510      	push	{r4, lr}
     2c6:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     2c8:	4b06      	ldr	r3, [pc, #24]	; (2e4 <USART_0_init+0x20>)
     2ca:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     2cc:	2300      	movs	r3, #0
     2ce:	9300      	str	r3, [sp, #0]
     2d0:	3310      	adds	r3, #16
     2d2:	4a05      	ldr	r2, [pc, #20]	; (2e8 <USART_0_init+0x24>)
     2d4:	4905      	ldr	r1, [pc, #20]	; (2ec <USART_0_init+0x28>)
     2d6:	4806      	ldr	r0, [pc, #24]	; (2f0 <USART_0_init+0x2c>)
     2d8:	4c06      	ldr	r4, [pc, #24]	; (2f4 <USART_0_init+0x30>)
     2da:	47a0      	blx	r4
	USART_0_PORT_init();
     2dc:	4b06      	ldr	r3, [pc, #24]	; (2f8 <USART_0_init+0x34>)
     2de:	4798      	blx	r3
}
     2e0:	b002      	add	sp, #8
     2e2:	bd10      	pop	{r4, pc}
     2e4:	00000265 	.word	0x00000265
     2e8:	20000080 	.word	0x20000080
     2ec:	42001400 	.word	0x42001400
     2f0:	2000012c 	.word	0x2000012c
     2f4:	0000070d 	.word	0x0000070d
     2f8:	00000285 	.word	0x00000285

000002fc <CALENDAR_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     2fc:	4a04      	ldr	r2, [pc, #16]	; (310 <CALENDAR_0_CLOCK_init+0x14>)
     2fe:	6993      	ldr	r3, [r2, #24]
     300:	2120      	movs	r1, #32
     302:	430b      	orrs	r3, r1
     304:	6193      	str	r3, [r2, #24]
     306:	4a03      	ldr	r2, [pc, #12]	; (314 <CALENDAR_0_CLOCK_init+0x18>)
     308:	4b03      	ldr	r3, [pc, #12]	; (318 <CALENDAR_0_CLOCK_init+0x1c>)
     30a:	805a      	strh	r2, [r3, #2]

void CALENDAR_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
     30c:	4770      	bx	lr
     30e:	46c0      	nop			; (mov r8, r8)
     310:	40000400 	.word	0x40000400
     314:	00004304 	.word	0x00004304
     318:	40000c00 	.word	0x40000c00

0000031c <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     31c:	b510      	push	{r4, lr}
	CALENDAR_0_CLOCK_init();
     31e:	4b03      	ldr	r3, [pc, #12]	; (32c <CALENDAR_0_init+0x10>)
     320:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     322:	4903      	ldr	r1, [pc, #12]	; (330 <CALENDAR_0_init+0x14>)
     324:	4803      	ldr	r0, [pc, #12]	; (334 <CALENDAR_0_init+0x18>)
     326:	4b04      	ldr	r3, [pc, #16]	; (338 <CALENDAR_0_init+0x1c>)
     328:	4798      	blx	r3
}
     32a:	bd10      	pop	{r4, pc}
     32c:	000002fd 	.word	0x000002fd
     330:	40001400 	.word	0x40001400
     334:	20000110 	.word	0x20000110
     338:	000003a9 	.word	0x000003a9

0000033c <system_init>:

void system_init(void)
{
     33c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     33e:	4b0d      	ldr	r3, [pc, #52]	; (374 <system_init+0x38>)
     340:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     342:	23c0      	movs	r3, #192	; 0xc0
     344:	05db      	lsls	r3, r3, #23
     346:	2280      	movs	r2, #128	; 0x80
     348:	05d2      	lsls	r2, r2, #23
     34a:	2198      	movs	r1, #152	; 0x98
     34c:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     34e:	3910      	subs	r1, #16
     350:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     352:	4b09      	ldr	r3, [pc, #36]	; (378 <system_init+0x3c>)
     354:	3120      	adds	r1, #32
     356:	505a      	str	r2, [r3, r1]
     358:	4a08      	ldr	r2, [pc, #32]	; (37c <system_init+0x40>)
     35a:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     35c:	3136      	adds	r1, #54	; 0x36
     35e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     360:	2001      	movs	r0, #1
     362:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     364:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(USER_LED_AL, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(USER_LED_AL, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     366:	4b06      	ldr	r3, [pc, #24]	; (380 <system_init+0x44>)
     368:	4798      	blx	r3

	USART_0_init();
     36a:	4b06      	ldr	r3, [pc, #24]	; (384 <system_init+0x48>)
     36c:	4798      	blx	r3

	CALENDAR_0_init();
     36e:	4b06      	ldr	r3, [pc, #24]	; (388 <system_init+0x4c>)
     370:	4798      	blx	r3
}
     372:	bd10      	pop	{r4, pc}
     374:	000009d9 	.word	0x000009d9
     378:	41004400 	.word	0x41004400
     37c:	c0004000 	.word	0xc0004000
     380:	00000209 	.word	0x00000209
     384:	000002c5 	.word	0x000002c5
     388:	0000031d 	.word	0x0000031d

0000038c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     38c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     390:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     392:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     394:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     398:	4770      	bx	lr

0000039a <atomic_leave_critical>:
     39a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     39e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     3a0:	f383 8810 	msr	PRIMASK, r3
}
     3a4:	4770      	bx	lr
	...

000003a8 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
     3a8:	b570      	push	{r4, r5, r6, lr}
     3aa:	0004      	movs	r4, r0
     3ac:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
     3ae:	1e43      	subs	r3, r0, #1
     3b0:	4198      	sbcs	r0, r3
     3b2:	b2c0      	uxtb	r0, r0
     3b4:	22e0      	movs	r2, #224	; 0xe0
     3b6:	0052      	lsls	r2, r2, #1
     3b8:	4909      	ldr	r1, [pc, #36]	; (3e0 <calendar_init+0x38>)
     3ba:	4b0a      	ldr	r3, [pc, #40]	; (3e4 <calendar_init+0x3c>)
     3bc:	4798      	blx	r3

	if (calendar->device.hw == hw) {
     3be:	6823      	ldr	r3, [r4, #0]
     3c0:	42ab      	cmp	r3, r5
     3c2:	d008      	beq.n	3d6 <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
     3c4:	2b00      	cmp	r3, #0
     3c6:	d108      	bne.n	3da <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
     3c8:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
     3ca:	0020      	movs	r0, r4
     3cc:	4b06      	ldr	r3, [pc, #24]	; (3e8 <calendar_init+0x40>)
     3ce:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
     3d0:	4b06      	ldr	r3, [pc, #24]	; (3ec <calendar_init+0x44>)
     3d2:	6163      	str	r3, [r4, #20]

	return ret;
}
     3d4:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
     3d6:	2000      	movs	r0, #0
     3d8:	e7fc      	b.n	3d4 <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
     3da:	2012      	movs	r0, #18
     3dc:	4240      	negs	r0, r0
     3de:	e7f9      	b.n	3d4 <calendar_init+0x2c>
     3e0:	00002228 	.word	0x00002228
     3e4:	000008a5 	.word	0x000008a5
     3e8:	00000ca9 	.word	0x00000ca9
     3ec:	000007b2 	.word	0x000007b2

000003f0 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
     3f0:	b510      	push	{r4, lr}
     3f2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	ASSERT(calendar);
     3f4:	1e43      	subs	r3, r0, #1
     3f6:	4198      	sbcs	r0, r3
     3f8:	b2c0      	uxtb	r0, r0
     3fa:	22e6      	movs	r2, #230	; 0xe6
     3fc:	32ff      	adds	r2, #255	; 0xff
     3fe:	4904      	ldr	r1, [pc, #16]	; (410 <calendar_enable+0x20>)
     400:	4b04      	ldr	r3, [pc, #16]	; (414 <calendar_enable+0x24>)
     402:	4798      	blx	r3

	_calendar_enable(&calendar->device);
     404:	0020      	movs	r0, r4
     406:	4b04      	ldr	r3, [pc, #16]	; (418 <calendar_enable+0x28>)
     408:	4798      	blx	r3

	return ERR_NONE;
}
     40a:	2000      	movs	r0, #0
     40c:	bd10      	pop	{r4, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	00002228 	.word	0x00002228
     414:	000008a5 	.word	0x000008a5
     418:	00000d2d 	.word	0x00000d2d

0000041c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     41c:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     41e:	4b0c      	ldr	r3, [pc, #48]	; (450 <process_ext_irq+0x34>)
     420:	685c      	ldr	r4, [r3, #4]
     422:	42a0      	cmp	r0, r4
     424:	d00e      	beq.n	444 <process_ext_irq+0x28>
     426:	2201      	movs	r2, #1
     428:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     42a:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     42c:	25ff      	movs	r5, #255	; 0xff
     42e:	e003      	b.n	438 <process_ext_irq+0x1c>
     430:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     432:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     434:	085b      	lsrs	r3, r3, #1
     436:	d10a      	bne.n	44e <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     438:	42a0      	cmp	r0, r4
     43a:	d9f9      	bls.n	430 <process_ext_irq+0x14>
	while (upper >= lower) {
     43c:	2a00      	cmp	r2, #0
     43e:	d006      	beq.n	44e <process_ext_irq+0x32>
			lower = middle + 1;
     440:	0031      	movs	r1, r6
     442:	e7f6      	b.n	432 <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     444:	4b02      	ldr	r3, [pc, #8]	; (450 <process_ext_irq+0x34>)
     446:	681b      	ldr	r3, [r3, #0]
     448:	2b00      	cmp	r3, #0
     44a:	d000      	beq.n	44e <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     44c:	4798      	blx	r3
		}
	}
}
     44e:	bd70      	pop	{r4, r5, r6, pc}
     450:	20000090 	.word	0x20000090

00000454 <ext_irq_init>:
{
     454:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     456:	4b05      	ldr	r3, [pc, #20]	; (46c <ext_irq_init+0x18>)
     458:	2201      	movs	r2, #1
     45a:	4252      	negs	r2, r2
     45c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     45e:	2200      	movs	r2, #0
     460:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     462:	4803      	ldr	r0, [pc, #12]	; (470 <ext_irq_init+0x1c>)
     464:	4b03      	ldr	r3, [pc, #12]	; (474 <ext_irq_init+0x20>)
     466:	4798      	blx	r3
}
     468:	bd10      	pop	{r4, pc}
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	20000090 	.word	0x20000090
     470:	0000041d 	.word	0x0000041d
     474:	00000a09 	.word	0x00000a09

00000478 <ext_irq_register>:
{
     478:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     47a:	4b0f      	ldr	r3, [pc, #60]	; (4b8 <ext_irq_register+0x40>)
     47c:	685b      	ldr	r3, [r3, #4]
     47e:	4298      	cmp	r0, r3
     480:	d008      	beq.n	494 <ext_irq_register+0x1c>
	if (NULL == cb) {
     482:	2900      	cmp	r1, #0
     484:	d014      	beq.n	4b0 <ext_irq_register+0x38>
			if (NULL == ext_irqs[i].cb) {
     486:	4b0c      	ldr	r3, [pc, #48]	; (4b8 <ext_irq_register+0x40>)
     488:	681b      	ldr	r3, [r3, #0]
     48a:	2b00      	cmp	r3, #0
     48c:	d009      	beq.n	4a2 <ext_irq_register+0x2a>
		return ERR_INVALID_ARG;
     48e:	200d      	movs	r0, #13
     490:	4240      	negs	r0, r0
     492:	e00c      	b.n	4ae <ext_irq_register+0x36>
			ext_irqs[i].cb = cb;
     494:	4b08      	ldr	r3, [pc, #32]	; (4b8 <ext_irq_register+0x40>)
     496:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     498:	2900      	cmp	r1, #0
     49a:	d105      	bne.n	4a8 <ext_irq_register+0x30>
		return _ext_irq_enable(pin, false);
     49c:	4b07      	ldr	r3, [pc, #28]	; (4bc <ext_irq_register+0x44>)
     49e:	4798      	blx	r3
     4a0:	e005      	b.n	4ae <ext_irq_register+0x36>
				ext_irqs[i].cb  = cb;
     4a2:	4b05      	ldr	r3, [pc, #20]	; (4b8 <ext_irq_register+0x40>)
     4a4:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     4a6:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     4a8:	2101      	movs	r1, #1
     4aa:	4b04      	ldr	r3, [pc, #16]	; (4bc <ext_irq_register+0x44>)
     4ac:	4798      	blx	r3
}
     4ae:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     4b0:	200d      	movs	r0, #13
     4b2:	4240      	negs	r0, r0
     4b4:	e7fb      	b.n	4ae <ext_irq_register+0x36>
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	20000090 	.word	0x20000090
     4bc:	00000aa1 	.word	0x00000aa1

000004c0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4c0:	b570      	push	{r4, r5, r6, lr}
     4c2:	0006      	movs	r6, r0
     4c4:	000c      	movs	r4, r1
     4c6:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     4c8:	2800      	cmp	r0, #0
     4ca:	d00d      	beq.n	4e8 <io_write+0x28>
     4cc:	0008      	movs	r0, r1
     4ce:	1e43      	subs	r3, r0, #1
     4d0:	4198      	sbcs	r0, r3
     4d2:	b2c0      	uxtb	r0, r0
     4d4:	2234      	movs	r2, #52	; 0x34
     4d6:	4905      	ldr	r1, [pc, #20]	; (4ec <io_write+0x2c>)
     4d8:	4b05      	ldr	r3, [pc, #20]	; (4f0 <io_write+0x30>)
     4da:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     4dc:	6833      	ldr	r3, [r6, #0]
     4de:	002a      	movs	r2, r5
     4e0:	0021      	movs	r1, r4
     4e2:	0030      	movs	r0, r6
     4e4:	4798      	blx	r3
}
     4e6:	bd70      	pop	{r4, r5, r6, pc}
     4e8:	2000      	movs	r0, #0
     4ea:	e7f3      	b.n	4d4 <io_write+0x14>
     4ec:	00002244 	.word	0x00002244
     4f0:	000008a5 	.word	0x000008a5

000004f4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     4f4:	b570      	push	{r4, r5, r6, lr}
     4f6:	0006      	movs	r6, r0
     4f8:	000c      	movs	r4, r1
     4fa:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     4fc:	2800      	cmp	r0, #0
     4fe:	d00d      	beq.n	51c <io_read+0x28>
     500:	0008      	movs	r0, r1
     502:	1e43      	subs	r3, r0, #1
     504:	4198      	sbcs	r0, r3
     506:	b2c0      	uxtb	r0, r0
     508:	223d      	movs	r2, #61	; 0x3d
     50a:	4905      	ldr	r1, [pc, #20]	; (520 <io_read+0x2c>)
     50c:	4b05      	ldr	r3, [pc, #20]	; (524 <io_read+0x30>)
     50e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     510:	6873      	ldr	r3, [r6, #4]
     512:	002a      	movs	r2, r5
     514:	0021      	movs	r1, r4
     516:	0030      	movs	r0, r6
     518:	4798      	blx	r3
}
     51a:	bd70      	pop	{r4, r5, r6, pc}
     51c:	2000      	movs	r0, #0
     51e:	e7f3      	b.n	508 <io_read+0x14>
     520:	00002244 	.word	0x00002244
     524:	000008a5 	.word	0x000008a5

00000528 <sleep>:
 * \retval -1 The requested sleep mode was invalid or not available
 * \retval  0 The operation completed successfully, returned after leaving the
 *            sleep
 */
int sleep(const uint8_t mode)
{
     528:	b510      	push	{r4, lr}
	if (ERR_NONE != _set_sleep_mode(mode))
     52a:	4b05      	ldr	r3, [pc, #20]	; (540 <sleep+0x18>)
     52c:	4798      	blx	r3
     52e:	2800      	cmp	r0, #0
     530:	d103      	bne.n	53a <sleep+0x12>
		return ERR_INVALID_ARG;

	_go_to_sleep();
     532:	4b04      	ldr	r3, [pc, #16]	; (544 <sleep+0x1c>)
     534:	4798      	blx	r3

	return ERR_NONE;
     536:	2000      	movs	r0, #0
}
     538:	bd10      	pop	{r4, pc}
		return ERR_INVALID_ARG;
     53a:	200d      	movs	r0, #13
     53c:	4240      	negs	r0, r0
     53e:	e7fb      	b.n	538 <sleep+0x10>
     540:	00000bf1 	.word	0x00000bf1
     544:	000009d1 	.word	0x000009d1

00000548 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     548:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     54a:	3808      	subs	r0, #8

	descr->stat = 0;
     54c:	2300      	movs	r3, #0
     54e:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     550:	6a43      	ldr	r3, [r0, #36]	; 0x24
     552:	2b00      	cmp	r3, #0
     554:	d000      	beq.n	558 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     556:	4798      	blx	r3
	}
}
     558:	bd10      	pop	{r4, pc}

0000055a <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     55a:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     55c:	3808      	subs	r0, #8

	descr->stat = 0;
     55e:	2300      	movs	r3, #0
     560:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     562:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     564:	2b00      	cmp	r3, #0
     566:	d000      	beq.n	56a <usart_error+0x10>
		descr->usart_cb.error(descr);
     568:	4798      	blx	r3
	}
}
     56a:	bd10      	pop	{r4, pc}

0000056c <usart_fill_rx_buffer>:
{
     56c:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     56e:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     570:	302c      	adds	r0, #44	; 0x2c
     572:	4b04      	ldr	r3, [pc, #16]	; (584 <usart_fill_rx_buffer+0x18>)
     574:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     576:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     578:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     57a:	2b00      	cmp	r3, #0
     57c:	d001      	beq.n	582 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     57e:	0020      	movs	r0, r4
     580:	4798      	blx	r3
}
     582:	bd10      	pop	{r4, pc}
     584:	00000949 	.word	0x00000949

00000588 <usart_async_write>:
{
     588:	b570      	push	{r4, r5, r6, lr}
     58a:	0004      	movs	r4, r0
     58c:	000e      	movs	r6, r1
     58e:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     590:	2800      	cmp	r0, #0
     592:	d01d      	beq.n	5d0 <usart_async_write+0x48>
     594:	2900      	cmp	r1, #0
     596:	d01d      	beq.n	5d4 <usart_async_write+0x4c>
     598:	0010      	movs	r0, r2
     59a:	1e43      	subs	r3, r0, #1
     59c:	4198      	sbcs	r0, r3
     59e:	223c      	movs	r2, #60	; 0x3c
     5a0:	32ff      	adds	r2, #255	; 0xff
     5a2:	490f      	ldr	r1, [pc, #60]	; (5e0 <usart_async_write+0x58>)
     5a4:	4b0f      	ldr	r3, [pc, #60]	; (5e4 <usart_async_write+0x5c>)
     5a6:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     5a8:	2344      	movs	r3, #68	; 0x44
     5aa:	5ae2      	ldrh	r2, [r4, r3]
     5ac:	3308      	adds	r3, #8
     5ae:	5ae3      	ldrh	r3, [r4, r3]
     5b0:	429a      	cmp	r2, r3
     5b2:	d111      	bne.n	5d8 <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
     5b4:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     5b6:	234c      	movs	r3, #76	; 0x4c
     5b8:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     5ba:	2200      	movs	r2, #0
     5bc:	3b08      	subs	r3, #8
     5be:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     5c0:	3b43      	subs	r3, #67	; 0x43
     5c2:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     5c4:	0020      	movs	r0, r4
     5c6:	3008      	adds	r0, #8
     5c8:	4b07      	ldr	r3, [pc, #28]	; (5e8 <usart_async_write+0x60>)
     5ca:	4798      	blx	r3
	return (int32_t)length;
     5cc:	0028      	movs	r0, r5
}
     5ce:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     5d0:	2000      	movs	r0, #0
     5d2:	e7e4      	b.n	59e <usart_async_write+0x16>
     5d4:	2000      	movs	r0, #0
     5d6:	e7e2      	b.n	59e <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     5d8:	201c      	movs	r0, #28
     5da:	4240      	negs	r0, r0
     5dc:	e7f7      	b.n	5ce <usart_async_write+0x46>
     5de:	46c0      	nop			; (mov r8, r8)
     5e0:	00002258 	.word	0x00002258
     5e4:	000008a5 	.word	0x000008a5
     5e8:	00000ef5 	.word	0x00000ef5

000005ec <usart_process_byte_sent>:
{
     5ec:	b570      	push	{r4, r5, r6, lr}
     5ee:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     5f0:	0001      	movs	r1, r0
     5f2:	3908      	subs	r1, #8
     5f4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     5f6:	224c      	movs	r2, #76	; 0x4c
     5f8:	5a8a      	ldrh	r2, [r1, r2]
     5fa:	429a      	cmp	r2, r3
     5fc:	d00c      	beq.n	618 <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     5fe:	000a      	movs	r2, r1
     600:	6c89      	ldr	r1, [r1, #72]	; 0x48
     602:	1c5d      	adds	r5, r3, #1
     604:	2044      	movs	r0, #68	; 0x44
     606:	5215      	strh	r5, [r2, r0]
     608:	5cc9      	ldrb	r1, [r1, r3]
     60a:	0020      	movs	r0, r4
     60c:	4b04      	ldr	r3, [pc, #16]	; (620 <usart_process_byte_sent+0x34>)
     60e:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     610:	0020      	movs	r0, r4
     612:	4b04      	ldr	r3, [pc, #16]	; (624 <usart_process_byte_sent+0x38>)
     614:	4798      	blx	r3
}
     616:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     618:	4b03      	ldr	r3, [pc, #12]	; (628 <usart_process_byte_sent+0x3c>)
     61a:	4798      	blx	r3
}
     61c:	e7fb      	b.n	616 <usart_process_byte_sent+0x2a>
     61e:	46c0      	nop			; (mov r8, r8)
     620:	00000eed 	.word	0x00000eed
     624:	00000ef5 	.word	0x00000ef5
     628:	00000efd 	.word	0x00000efd

0000062c <usart_async_read>:
{
     62c:	b5f0      	push	{r4, r5, r6, r7, lr}
     62e:	46ce      	mov	lr, r9
     630:	4647      	mov	r7, r8
     632:	b580      	push	{r7, lr}
     634:	b085      	sub	sp, #20
     636:	0005      	movs	r5, r0
     638:	000e      	movs	r6, r1
     63a:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
     63c:	2800      	cmp	r0, #0
     63e:	d015      	beq.n	66c <usart_async_read+0x40>
     640:	2900      	cmp	r1, #0
     642:	d013      	beq.n	66c <usart_async_read+0x40>
     644:	2a00      	cmp	r2, #0
     646:	d12a      	bne.n	69e <usart_async_read+0x72>
     648:	22ac      	movs	r2, #172	; 0xac
     64a:	0052      	lsls	r2, r2, #1
     64c:	4929      	ldr	r1, [pc, #164]	; (6f4 <usart_async_read+0xc8>)
     64e:	2000      	movs	r0, #0
     650:	4b29      	ldr	r3, [pc, #164]	; (6f8 <usart_async_read+0xcc>)
     652:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     654:	a803      	add	r0, sp, #12
     656:	4b29      	ldr	r3, [pc, #164]	; (6fc <usart_async_read+0xd0>)
     658:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     65a:	0028      	movs	r0, r5
     65c:	3034      	adds	r0, #52	; 0x34
     65e:	4b28      	ldr	r3, [pc, #160]	; (700 <usart_async_read+0xd4>)
     660:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     662:	a803      	add	r0, sp, #12
     664:	4b27      	ldr	r3, [pc, #156]	; (704 <usart_async_read+0xd8>)
     666:	4798      	blx	r3
	uint16_t                       was_read = 0;
     668:	2500      	movs	r5, #0
	return (int32_t)was_read;
     66a:	e03c      	b.n	6e6 <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     66c:	22ac      	movs	r2, #172	; 0xac
     66e:	0052      	lsls	r2, r2, #1
     670:	4920      	ldr	r1, [pc, #128]	; (6f4 <usart_async_read+0xc8>)
     672:	2000      	movs	r0, #0
     674:	4b20      	ldr	r3, [pc, #128]	; (6f8 <usart_async_read+0xcc>)
     676:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     678:	a803      	add	r0, sp, #12
     67a:	4b20      	ldr	r3, [pc, #128]	; (6fc <usart_async_read+0xd0>)
     67c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     67e:	3534      	adds	r5, #52	; 0x34
     680:	0028      	movs	r0, r5
     682:	9501      	str	r5, [sp, #4]
     684:	4b1e      	ldr	r3, [pc, #120]	; (700 <usart_async_read+0xd4>)
     686:	4798      	blx	r3
     688:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     68a:	a803      	add	r0, sp, #12
     68c:	4b1d      	ldr	r3, [pc, #116]	; (704 <usart_async_read+0xd8>)
     68e:	4798      	blx	r3
	uint16_t                       was_read = 0;
     690:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     692:	4643      	mov	r3, r8
     694:	2b00      	cmp	r3, #0
     696:	d026      	beq.n	6e6 <usart_async_read+0xba>
     698:	2f00      	cmp	r7, #0
     69a:	d116      	bne.n	6ca <usart_async_read+0x9e>
     69c:	e023      	b.n	6e6 <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     69e:	22ac      	movs	r2, #172	; 0xac
     6a0:	0052      	lsls	r2, r2, #1
     6a2:	4914      	ldr	r1, [pc, #80]	; (6f4 <usart_async_read+0xc8>)
     6a4:	2001      	movs	r0, #1
     6a6:	4b14      	ldr	r3, [pc, #80]	; (6f8 <usart_async_read+0xcc>)
     6a8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     6aa:	a803      	add	r0, sp, #12
     6ac:	4b13      	ldr	r3, [pc, #76]	; (6fc <usart_async_read+0xd0>)
     6ae:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     6b0:	3534      	adds	r5, #52	; 0x34
     6b2:	0028      	movs	r0, r5
     6b4:	9501      	str	r5, [sp, #4]
     6b6:	4b12      	ldr	r3, [pc, #72]	; (700 <usart_async_read+0xd4>)
     6b8:	4798      	blx	r3
     6ba:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     6bc:	a803      	add	r0, sp, #12
     6be:	4b11      	ldr	r3, [pc, #68]	; (704 <usart_async_read+0xd8>)
     6c0:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     6c2:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
     6c4:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     6c6:	2b00      	cmp	r3, #0
     6c8:	d00d      	beq.n	6e6 <usart_async_read+0xba>
{
     6ca:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     6cc:	4b0e      	ldr	r3, [pc, #56]	; (708 <usart_async_read+0xdc>)
     6ce:	4699      	mov	r9, r3
     6d0:	1c65      	adds	r5, r4, #1
     6d2:	b2ad      	uxth	r5, r5
     6d4:	1931      	adds	r1, r6, r4
     6d6:	9801      	ldr	r0, [sp, #4]
     6d8:	47c8      	blx	r9
     6da:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     6dc:	4544      	cmp	r4, r8
     6de:	d202      	bcs.n	6e6 <usart_async_read+0xba>
     6e0:	b2a3      	uxth	r3, r4
     6e2:	429f      	cmp	r7, r3
     6e4:	d8f4      	bhi.n	6d0 <usart_async_read+0xa4>
}
     6e6:	0028      	movs	r0, r5
     6e8:	b005      	add	sp, #20
     6ea:	bc0c      	pop	{r2, r3}
     6ec:	4690      	mov	r8, r2
     6ee:	4699      	mov	r9, r3
     6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	00002258 	.word	0x00002258
     6f8:	000008a5 	.word	0x000008a5
     6fc:	0000038d 	.word	0x0000038d
     700:	00000989 	.word	0x00000989
     704:	0000039b 	.word	0x0000039b
     708:	00000901 	.word	0x00000901

0000070c <usart_async_init>:
{
     70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     70e:	0004      	movs	r4, r0
     710:	000d      	movs	r5, r1
     712:	0016      	movs	r6, r2
     714:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     716:	2800      	cmp	r0, #0
     718:	d026      	beq.n	768 <usart_async_init+0x5c>
     71a:	2900      	cmp	r1, #0
     71c:	d026      	beq.n	76c <usart_async_init+0x60>
     71e:	2a00      	cmp	r2, #0
     720:	d026      	beq.n	770 <usart_async_init+0x64>
     722:	0018      	movs	r0, r3
     724:	1e43      	subs	r3, r0, #1
     726:	4198      	sbcs	r0, r3
     728:	223a      	movs	r2, #58	; 0x3a
     72a:	4914      	ldr	r1, [pc, #80]	; (77c <usart_async_init+0x70>)
     72c:	4b14      	ldr	r3, [pc, #80]	; (780 <usart_async_init+0x74>)
     72e:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     730:	0020      	movs	r0, r4
     732:	3034      	adds	r0, #52	; 0x34
     734:	003a      	movs	r2, r7
     736:	0031      	movs	r1, r6
     738:	4b12      	ldr	r3, [pc, #72]	; (784 <usart_async_init+0x78>)
     73a:	4798      	blx	r3
     73c:	2800      	cmp	r0, #0
     73e:	d119      	bne.n	774 <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
     740:	0020      	movs	r0, r4
     742:	3008      	adds	r0, #8
     744:	0029      	movs	r1, r5
     746:	4b10      	ldr	r3, [pc, #64]	; (788 <usart_async_init+0x7c>)
     748:	4798      	blx	r3
	if (init_status) {
     74a:	2800      	cmp	r0, #0
     74c:	d10b      	bne.n	766 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     74e:	4b0f      	ldr	r3, [pc, #60]	; (78c <usart_async_init+0x80>)
     750:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     752:	4b0f      	ldr	r3, [pc, #60]	; (790 <usart_async_init+0x84>)
     754:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     756:	4b0f      	ldr	r3, [pc, #60]	; (794 <usart_async_init+0x88>)
     758:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     75a:	4b0f      	ldr	r3, [pc, #60]	; (798 <usart_async_init+0x8c>)
     75c:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     75e:	4b0f      	ldr	r3, [pc, #60]	; (79c <usart_async_init+0x90>)
     760:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     762:	4b0f      	ldr	r3, [pc, #60]	; (7a0 <usart_async_init+0x94>)
     764:	6163      	str	r3, [r4, #20]
}
     766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     768:	2000      	movs	r0, #0
     76a:	e7dd      	b.n	728 <usart_async_init+0x1c>
     76c:	2000      	movs	r0, #0
     76e:	e7db      	b.n	728 <usart_async_init+0x1c>
     770:	2000      	movs	r0, #0
     772:	e7d9      	b.n	728 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     774:	200d      	movs	r0, #13
     776:	4240      	negs	r0, r0
     778:	e7f5      	b.n	766 <usart_async_init+0x5a>
     77a:	46c0      	nop			; (mov r8, r8)
     77c:	00002258 	.word	0x00002258
     780:	000008a5 	.word	0x000008a5
     784:	000008ad 	.word	0x000008ad
     788:	00000e5d 	.word	0x00000e5d
     78c:	0000062d 	.word	0x0000062d
     790:	00000589 	.word	0x00000589
     794:	000005ed 	.word	0x000005ed
     798:	0000056d 	.word	0x0000056d
     79c:	00000549 	.word	0x00000549
     7a0:	0000055b 	.word	0x0000055b

000007a4 <usart_async_enable>:
{
     7a4:	b510      	push	{r4, lr}
     7a6:	0004      	movs	r4, r0
	ASSERT(descr);
     7a8:	1e43      	subs	r3, r0, #1
     7aa:	4198      	sbcs	r0, r3
     7ac:	b2c0      	uxtb	r0, r0
     7ae:	2261      	movs	r2, #97	; 0x61
     7b0:	4904      	ldr	r1, [pc, #16]	; (7c4 <usart_async_enable+0x20>)
     7b2:	4b05      	ldr	r3, [pc, #20]	; (7c8 <usart_async_enable+0x24>)
     7b4:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     7b6:	0020      	movs	r0, r4
     7b8:	3008      	adds	r0, #8
     7ba:	4b04      	ldr	r3, [pc, #16]	; (7cc <usart_async_enable+0x28>)
     7bc:	4798      	blx	r3
}
     7be:	2000      	movs	r0, #0
     7c0:	bd10      	pop	{r4, pc}
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	00002258 	.word	0x00002258
     7c8:	000008a5 	.word	0x000008a5
     7cc:	00000ed9 	.word	0x00000ed9

000007d0 <usart_async_get_io_descriptor>:
{
     7d0:	b570      	push	{r4, r5, r6, lr}
     7d2:	0004      	movs	r4, r0
     7d4:	000d      	movs	r5, r1
	ASSERT(descr && io);
     7d6:	2800      	cmp	r0, #0
     7d8:	d00a      	beq.n	7f0 <usart_async_get_io_descriptor+0x20>
     7da:	0008      	movs	r0, r1
     7dc:	1e43      	subs	r3, r0, #1
     7de:	4198      	sbcs	r0, r3
     7e0:	b2c0      	uxtb	r0, r0
     7e2:	2277      	movs	r2, #119	; 0x77
     7e4:	4903      	ldr	r1, [pc, #12]	; (7f4 <usart_async_get_io_descriptor+0x24>)
     7e6:	4b04      	ldr	r3, [pc, #16]	; (7f8 <usart_async_get_io_descriptor+0x28>)
     7e8:	4798      	blx	r3
	*io = &descr->io;
     7ea:	602c      	str	r4, [r5, #0]
}
     7ec:	2000      	movs	r0, #0
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	2000      	movs	r0, #0
     7f2:	e7f6      	b.n	7e2 <usart_async_get_io_descriptor+0x12>
     7f4:	00002258 	.word	0x00002258
     7f8:	000008a5 	.word	0x000008a5

000007fc <usart_async_register_callback>:
{
     7fc:	b570      	push	{r4, r5, r6, lr}
     7fe:	0005      	movs	r5, r0
     800:	000e      	movs	r6, r1
     802:	0014      	movs	r4, r2
	ASSERT(descr);
     804:	1e43      	subs	r3, r0, #1
     806:	4198      	sbcs	r0, r3
     808:	b2c0      	uxtb	r0, r0
     80a:	2283      	movs	r2, #131	; 0x83
     80c:	4916      	ldr	r1, [pc, #88]	; (868 <usart_async_register_callback+0x6c>)
     80e:	4b17      	ldr	r3, [pc, #92]	; (86c <usart_async_register_callback+0x70>)
     810:	4798      	blx	r3
	switch (type) {
     812:	2e01      	cmp	r6, #1
     814:	d011      	beq.n	83a <usart_async_register_callback+0x3e>
     816:	2e00      	cmp	r6, #0
     818:	d004      	beq.n	824 <usart_async_register_callback+0x28>
     81a:	2e02      	cmp	r6, #2
     81c:	d018      	beq.n	850 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
     81e:	200d      	movs	r0, #13
     820:	4240      	negs	r0, r0
     822:	e009      	b.n	838 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
     824:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     826:	1e62      	subs	r2, r4, #1
     828:	4194      	sbcs	r4, r2
     82a:	b2e2      	uxtb	r2, r4
     82c:	0028      	movs	r0, r5
     82e:	3008      	adds	r0, #8
     830:	2101      	movs	r1, #1
     832:	4b0f      	ldr	r3, [pc, #60]	; (870 <usart_async_register_callback+0x74>)
     834:	4798      	blx	r3
	return ERR_NONE;
     836:	2000      	movs	r0, #0
}
     838:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     83a:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     83c:	1e62      	subs	r2, r4, #1
     83e:	4194      	sbcs	r4, r2
     840:	b2e2      	uxtb	r2, r4
     842:	0028      	movs	r0, r5
     844:	3008      	adds	r0, #8
     846:	2102      	movs	r1, #2
     848:	4b09      	ldr	r3, [pc, #36]	; (870 <usart_async_register_callback+0x74>)
     84a:	4798      	blx	r3
	return ERR_NONE;
     84c:	2000      	movs	r0, #0
		break;
     84e:	e7f3      	b.n	838 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
     850:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     852:	1e62      	subs	r2, r4, #1
     854:	4194      	sbcs	r4, r2
     856:	b2e2      	uxtb	r2, r4
     858:	0028      	movs	r0, r5
     85a:	3008      	adds	r0, #8
     85c:	2103      	movs	r1, #3
     85e:	4b04      	ldr	r3, [pc, #16]	; (870 <usart_async_register_callback+0x74>)
     860:	4798      	blx	r3
	return ERR_NONE;
     862:	2000      	movs	r0, #0
		break;
     864:	e7e8      	b.n	838 <usart_async_register_callback+0x3c>
     866:	46c0      	nop			; (mov r8, r8)
     868:	00002258 	.word	0x00002258
     86c:	000008a5 	.word	0x000008a5
     870:	00000f05 	.word	0x00000f05

00000874 <usart_async_is_rx_not_empty>:
{
     874:	b510      	push	{r4, lr}
     876:	0004      	movs	r4, r0
	ASSERT(descr);
     878:	1e43      	subs	r3, r0, #1
     87a:	4198      	sbcs	r0, r3
     87c:	b2c0      	uxtb	r0, r0
     87e:	2202      	movs	r2, #2
     880:	32ff      	adds	r2, #255	; 0xff
     882:	4905      	ldr	r1, [pc, #20]	; (898 <usart_async_is_rx_not_empty+0x24>)
     884:	4b05      	ldr	r3, [pc, #20]	; (89c <usart_async_is_rx_not_empty+0x28>)
     886:	4798      	blx	r3
	return ringbuffer_num(&descr->rx) > 0;
     888:	0020      	movs	r0, r4
     88a:	3034      	adds	r0, #52	; 0x34
     88c:	4b04      	ldr	r3, [pc, #16]	; (8a0 <usart_async_is_rx_not_empty+0x2c>)
     88e:	4798      	blx	r3
     890:	1e43      	subs	r3, r0, #1
     892:	4198      	sbcs	r0, r3
}
     894:	bd10      	pop	{r4, pc}
     896:	46c0      	nop			; (mov r8, r8)
     898:	00002258 	.word	0x00002258
     89c:	000008a5 	.word	0x000008a5
     8a0:	00000989 	.word	0x00000989

000008a4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     8a4:	2800      	cmp	r0, #0
     8a6:	d100      	bne.n	8aa <assert+0x6>
		__asm("BKPT #0");
     8a8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     8aa:	4770      	bx	lr

000008ac <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     8ac:	b570      	push	{r4, r5, r6, lr}
     8ae:	0004      	movs	r4, r0
     8b0:	000e      	movs	r6, r1
     8b2:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     8b4:	2800      	cmp	r0, #0
     8b6:	d00b      	beq.n	8d0 <ringbuffer_init+0x24>
     8b8:	2900      	cmp	r1, #0
     8ba:	d018      	beq.n	8ee <ringbuffer_init+0x42>
     8bc:	2001      	movs	r0, #1
     8be:	2a00      	cmp	r2, #0
     8c0:	d107      	bne.n	8d2 <ringbuffer_init+0x26>
     8c2:	2228      	movs	r2, #40	; 0x28
     8c4:	490c      	ldr	r1, [pc, #48]	; (8f8 <ringbuffer_init+0x4c>)
     8c6:	2000      	movs	r0, #0
     8c8:	4b0c      	ldr	r3, [pc, #48]	; (8fc <ringbuffer_init+0x50>)
     8ca:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     8cc:	1e6b      	subs	r3, r5, #1
     8ce:	e007      	b.n	8e0 <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
     8d0:	2000      	movs	r0, #0
     8d2:	2228      	movs	r2, #40	; 0x28
     8d4:	4908      	ldr	r1, [pc, #32]	; (8f8 <ringbuffer_init+0x4c>)
     8d6:	4b09      	ldr	r3, [pc, #36]	; (8fc <ringbuffer_init+0x50>)
     8d8:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
     8da:	1e6b      	subs	r3, r5, #1
     8dc:	422b      	tst	r3, r5
     8de:	d108      	bne.n	8f2 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     8e0:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     8e2:	2300      	movs	r3, #0
     8e4:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     8e6:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     8e8:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     8ea:	2000      	movs	r0, #0
}
     8ec:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     8ee:	2000      	movs	r0, #0
     8f0:	e7ef      	b.n	8d2 <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
     8f2:	200d      	movs	r0, #13
     8f4:	4240      	negs	r0, r0
     8f6:	e7f9      	b.n	8ec <ringbuffer_init+0x40>
     8f8:	00002278 	.word	0x00002278
     8fc:	000008a5 	.word	0x000008a5

00000900 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     900:	b570      	push	{r4, r5, r6, lr}
     902:	0004      	movs	r4, r0
     904:	000d      	movs	r5, r1
	ASSERT(rb && data);
     906:	2800      	cmp	r0, #0
     908:	d015      	beq.n	936 <ringbuffer_get+0x36>
     90a:	0008      	movs	r0, r1
     90c:	1e43      	subs	r3, r0, #1
     90e:	4198      	sbcs	r0, r3
     910:	b2c0      	uxtb	r0, r0
     912:	2240      	movs	r2, #64	; 0x40
     914:	490a      	ldr	r1, [pc, #40]	; (940 <ringbuffer_get+0x40>)
     916:	4b0b      	ldr	r3, [pc, #44]	; (944 <ringbuffer_get+0x44>)
     918:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     91a:	68a3      	ldr	r3, [r4, #8]
     91c:	68e2      	ldr	r2, [r4, #12]
     91e:	429a      	cmp	r2, r3
     920:	d00b      	beq.n	93a <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
     922:	6862      	ldr	r2, [r4, #4]
     924:	4013      	ands	r3, r2
     926:	6822      	ldr	r2, [r4, #0]
     928:	5cd3      	ldrb	r3, [r2, r3]
     92a:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     92c:	68a3      	ldr	r3, [r4, #8]
     92e:	3301      	adds	r3, #1
     930:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     932:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     934:	bd70      	pop	{r4, r5, r6, pc}
     936:	2000      	movs	r0, #0
     938:	e7eb      	b.n	912 <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
     93a:	200a      	movs	r0, #10
     93c:	4240      	negs	r0, r0
     93e:	e7f9      	b.n	934 <ringbuffer_get+0x34>
     940:	00002278 	.word	0x00002278
     944:	000008a5 	.word	0x000008a5

00000948 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     948:	b570      	push	{r4, r5, r6, lr}
     94a:	0004      	movs	r4, r0
     94c:	000d      	movs	r5, r1
	ASSERT(rb);
     94e:	1e43      	subs	r3, r0, #1
     950:	4198      	sbcs	r0, r3
     952:	b2c0      	uxtb	r0, r0
     954:	2251      	movs	r2, #81	; 0x51
     956:	490a      	ldr	r1, [pc, #40]	; (980 <ringbuffer_put+0x38>)
     958:	4b0a      	ldr	r3, [pc, #40]	; (984 <ringbuffer_put+0x3c>)
     95a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     95c:	6863      	ldr	r3, [r4, #4]
     95e:	68e2      	ldr	r2, [r4, #12]
     960:	4013      	ands	r3, r2
     962:	6822      	ldr	r2, [r4, #0]
     964:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     966:	68e3      	ldr	r3, [r4, #12]
     968:	6861      	ldr	r1, [r4, #4]
     96a:	68a2      	ldr	r2, [r4, #8]
     96c:	1a9a      	subs	r2, r3, r2
     96e:	428a      	cmp	r2, r1
     970:	d901      	bls.n	976 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     972:	1a59      	subs	r1, r3, r1
     974:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     976:	3301      	adds	r3, #1
     978:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     97a:	2000      	movs	r0, #0
     97c:	bd70      	pop	{r4, r5, r6, pc}
     97e:	46c0      	nop			; (mov r8, r8)
     980:	00002278 	.word	0x00002278
     984:	000008a5 	.word	0x000008a5

00000988 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     988:	b510      	push	{r4, lr}
     98a:	0004      	movs	r4, r0
	ASSERT(rb);
     98c:	1e43      	subs	r3, r0, #1
     98e:	4198      	sbcs	r0, r3
     990:	b2c0      	uxtb	r0, r0
     992:	2267      	movs	r2, #103	; 0x67
     994:	4903      	ldr	r1, [pc, #12]	; (9a4 <ringbuffer_num+0x1c>)
     996:	4b04      	ldr	r3, [pc, #16]	; (9a8 <ringbuffer_num+0x20>)
     998:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     99a:	68e0      	ldr	r0, [r4, #12]
     99c:	68a3      	ldr	r3, [r4, #8]
     99e:	1ac0      	subs	r0, r0, r3
}
     9a0:	bd10      	pop	{r4, pc}
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	00002278 	.word	0x00002278
     9a8:	000008a5 	.word	0x000008a5

000009ac <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     9ac:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     9ae:	4a06      	ldr	r2, [pc, #24]	; (9c8 <_sbrk+0x1c>)
     9b0:	6812      	ldr	r2, [r2, #0]
     9b2:	2a00      	cmp	r2, #0
     9b4:	d004      	beq.n	9c0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     9b6:	4a04      	ldr	r2, [pc, #16]	; (9c8 <_sbrk+0x1c>)
     9b8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     9ba:	18c3      	adds	r3, r0, r3
     9bc:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     9be:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     9c0:	4902      	ldr	r1, [pc, #8]	; (9cc <_sbrk+0x20>)
     9c2:	4a01      	ldr	r2, [pc, #4]	; (9c8 <_sbrk+0x1c>)
     9c4:	6011      	str	r1, [r2, #0]
     9c6:	e7f6      	b.n	9b6 <_sbrk+0xa>
     9c8:	20000098 	.word	0x20000098
     9cc:	20002180 	.word	0x20002180

000009d0 <_go_to_sleep>:
  __ASM volatile ("dsb 0xF":::"memory");
     9d0:	f3bf 8f4f 	dsb	sy
 * \brief Put MCU to sleep
 */
void _go_to_sleep(void)
{
	__DSB();
	__WFI();
     9d4:	bf30      	wfi
}
     9d6:	4770      	bx	lr

000009d8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     9d8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     9da:	4b06      	ldr	r3, [pc, #24]	; (9f4 <_init_chip+0x1c>)
     9dc:	685a      	ldr	r2, [r3, #4]
     9de:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     9e0:	4b05      	ldr	r3, [pc, #20]	; (9f8 <_init_chip+0x20>)
     9e2:	4798      	blx	r3
	_sysctrl_init_sources();
     9e4:	4b05      	ldr	r3, [pc, #20]	; (9fc <_init_chip+0x24>)
     9e6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     9e8:	4b05      	ldr	r3, [pc, #20]	; (a00 <_init_chip+0x28>)
     9ea:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     9ec:	20ff      	movs	r0, #255	; 0xff
     9ee:	4b05      	ldr	r3, [pc, #20]	; (a04 <_init_chip+0x2c>)
     9f0:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     9f2:	bd10      	pop	{r4, pc}
     9f4:	41004000 	.word	0x41004000
     9f8:	00000c29 	.word	0x00000c29
     9fc:	00000fe5 	.word	0x00000fe5
     a00:	00001029 	.word	0x00001029
     a04:	00000bb5 	.word	0x00000bb5

00000a08 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     a08:	4a22      	ldr	r2, [pc, #136]	; (a94 <_ext_irq_init+0x8c>)
     a0a:	7853      	ldrb	r3, [r2, #1]
     a0c:	09db      	lsrs	r3, r3, #7
     a0e:	d1fc      	bne.n	a0a <_ext_irq_init+0x2>
     a10:	4a20      	ldr	r2, [pc, #128]	; (a94 <_ext_irq_init+0x8c>)
     a12:	7853      	ldrb	r3, [r2, #1]
     a14:	09db      	lsrs	r3, r3, #7
     a16:	d1fc      	bne.n	a12 <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     a18:	4b1e      	ldr	r3, [pc, #120]	; (a94 <_ext_irq_init+0x8c>)
     a1a:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     a1c:	079b      	lsls	r3, r3, #30
     a1e:	d50a      	bpl.n	a36 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     a20:	2200      	movs	r2, #0
     a22:	4b1c      	ldr	r3, [pc, #112]	; (a94 <_ext_irq_init+0x8c>)
     a24:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     a26:	001a      	movs	r2, r3
     a28:	7853      	ldrb	r3, [r2, #1]
     a2a:	09db      	lsrs	r3, r3, #7
     a2c:	d1fc      	bne.n	a28 <_ext_irq_init+0x20>
     a2e:	4a19      	ldr	r2, [pc, #100]	; (a94 <_ext_irq_init+0x8c>)
     a30:	7853      	ldrb	r3, [r2, #1]
     a32:	09db      	lsrs	r3, r3, #7
     a34:	d1fc      	bne.n	a30 <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
     a36:	2201      	movs	r2, #1
     a38:	4b16      	ldr	r3, [pc, #88]	; (a94 <_ext_irq_init+0x8c>)
     a3a:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     a3c:	001a      	movs	r2, r3
     a3e:	7853      	ldrb	r3, [r2, #1]
     a40:	09db      	lsrs	r3, r3, #7
     a42:	d1fc      	bne.n	a3e <_ext_irq_init+0x36>
     a44:	4a13      	ldr	r2, [pc, #76]	; (a94 <_ext_irq_init+0x8c>)
     a46:	7853      	ldrb	r3, [r2, #1]
     a48:	09db      	lsrs	r3, r3, #7
     a4a:	d1fc      	bne.n	a46 <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     a4c:	4b11      	ldr	r3, [pc, #68]	; (a94 <_ext_irq_init+0x8c>)
     a4e:	2200      	movs	r2, #0
     a50:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     a52:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     a54:	2180      	movs	r1, #128	; 0x80
     a56:	0209      	lsls	r1, r1, #8
     a58:	6159      	str	r1, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     a5a:	619a      	str	r2, [r3, #24]
     a5c:	22a0      	movs	r2, #160	; 0xa0
     a5e:	0612      	lsls	r2, r2, #24
     a60:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     a62:	781a      	ldrb	r2, [r3, #0]
     a64:	2102      	movs	r1, #2
     a66:	430a      	orrs	r2, r1
     a68:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     a6a:	001a      	movs	r2, r3
     a6c:	7853      	ldrb	r3, [r2, #1]
     a6e:	09db      	lsrs	r3, r3, #7
     a70:	d1fc      	bne.n	a6c <_ext_irq_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a72:	4b09      	ldr	r3, [pc, #36]	; (a98 <_ext_irq_init+0x90>)
     a74:	2210      	movs	r2, #16
     a76:	2180      	movs	r1, #128	; 0x80
     a78:	505a      	str	r2, [r3, r1]
     a7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     a7e:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a82:	3101      	adds	r1, #1
     a84:	31ff      	adds	r1, #255	; 0xff
     a86:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a88:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     a8a:	4b04      	ldr	r3, [pc, #16]	; (a9c <_ext_irq_init+0x94>)
     a8c:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     a8e:	2000      	movs	r0, #0
     a90:	4770      	bx	lr
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	40001800 	.word	0x40001800
     a98:	e000e100 	.word	0xe000e100
     a9c:	2000009c 	.word	0x2000009c

00000aa0 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
     aa0:	280f      	cmp	r0, #15
     aa2:	d002      	beq.n	aaa <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
     aa4:	200d      	movs	r0, #13
     aa6:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
     aa8:	4770      	bx	lr
	if (enable) {
     aaa:	2900      	cmp	r1, #0
     aac:	d106      	bne.n	abc <_ext_irq_enable+0x1c>
	((Eic *)hw)->INTENCLR.reg = mask;
     aae:	4b06      	ldr	r3, [pc, #24]	; (ac8 <_ext_irq_enable+0x28>)
     ab0:	2280      	movs	r2, #128	; 0x80
     ab2:	0212      	lsls	r2, r2, #8
     ab4:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     ab6:	611a      	str	r2, [r3, #16]
	return ERR_NONE;
     ab8:	2000      	movs	r0, #0
     aba:	e7f5      	b.n	aa8 <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
     abc:	2280      	movs	r2, #128	; 0x80
     abe:	0212      	lsls	r2, r2, #8
     ac0:	4b01      	ldr	r3, [pc, #4]	; (ac8 <_ext_irq_enable+0x28>)
     ac2:	60da      	str	r2, [r3, #12]
     ac4:	2000      	movs	r0, #0
     ac6:	e7ef      	b.n	aa8 <_ext_irq_enable+0x8>
     ac8:	40001800 	.word	0x40001800

00000acc <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     acc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ace:	46ce      	mov	lr, r9
     ad0:	4647      	mov	r7, r8
     ad2:	b580      	push	{r7, lr}
     ad4:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
     ad6:	4b31      	ldr	r3, [pc, #196]	; (b9c <EIC_Handler+0xd0>)
     ad8:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     ada:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     adc:	400a      	ands	r2, r1
     ade:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     ae0:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     ae2:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     ae4:	4b2e      	ldr	r3, [pc, #184]	; (ba0 <EIC_Handler+0xd4>)
     ae6:	6818      	ldr	r0, [r3, #0]
     ae8:	1e43      	subs	r3, r0, #1
     aea:	4198      	sbcs	r0, r3
     aec:	b2c0      	uxtb	r0, r0
     aee:	22d2      	movs	r2, #210	; 0xd2
     af0:	492c      	ldr	r1, [pc, #176]	; (ba4 <EIC_Handler+0xd8>)
     af2:	4b2d      	ldr	r3, [pc, #180]	; (ba8 <EIC_Handler+0xdc>)
     af4:	4798      	blx	r3

	while (flags) {
     af6:	9b01      	ldr	r3, [sp, #4]
     af8:	2b00      	cmp	r3, #0
     afa:	d049      	beq.n	b90 <EIC_Handler+0xc4>
     afc:	2301      	movs	r3, #1
     afe:	425b      	negs	r3, r3
     b00:	4699      	mov	r9, r3
		pos = ffs(flags) - 1;
     b02:	4b2a      	ldr	r3, [pc, #168]	; (bac <EIC_Handler+0xe0>)
     b04:	4698      	mov	r8, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
     b06:	4f26      	ldr	r7, [pc, #152]	; (ba0 <EIC_Handler+0xd4>)
				if (_map[middle].extint == pos) {
     b08:	4d29      	ldr	r5, [pc, #164]	; (bb0 <EIC_Handler+0xe4>)
     b0a:	e03a      	b.n	b82 <EIC_Handler+0xb6>
					upper = middle - 1;
     b0c:	3a01      	subs	r2, #1
     b0e:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
     b10:	42b1      	cmp	r1, r6
     b12:	d80c      	bhi.n	b2e <EIC_Handler+0x62>
				middle = (upper + lower) >> 1;
     b14:	1873      	adds	r3, r6, r1
     b16:	105b      	asrs	r3, r3, #1
     b18:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
     b1a:	4003      	ands	r3, r0
     b1c:	00db      	lsls	r3, r3, #3
     b1e:	5d5b      	ldrb	r3, [r3, r5]
     b20:	42a3      	cmp	r3, r4
     b22:	d008      	beq.n	b36 <EIC_Handler+0x6a>
				if (_map[middle].extint < pos) {
     b24:	429c      	cmp	r4, r3
     b26:	ddf1      	ble.n	b0c <EIC_Handler+0x40>
					lower = middle + 1;
     b28:	3201      	adds	r2, #1
     b2a:	b2d1      	uxtb	r1, r2
     b2c:	e7f0      	b.n	b10 <EIC_Handler+0x44>
			if (INVALID_PIN_NUMBER != pin) {
     b2e:	464b      	mov	r3, r9
     b30:	3301      	adds	r3, #1
     b32:	d005      	beq.n	b40 <EIC_Handler+0x74>
     b34:	e001      	b.n	b3a <EIC_Handler+0x6e>
     b36:	230f      	movs	r3, #15
     b38:	4699      	mov	r9, r3
				callback(pin);
     b3a:	4648      	mov	r0, r9
     b3c:	683b      	ldr	r3, [r7, #0]
     b3e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     b40:	9b01      	ldr	r3, [sp, #4]
     b42:	2201      	movs	r2, #1
     b44:	40a2      	lsls	r2, r4
     b46:	4393      	bics	r3, r2
     b48:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     b4a:	9801      	ldr	r0, [sp, #4]
     b4c:	4b17      	ldr	r3, [pc, #92]	; (bac <EIC_Handler+0xe0>)
     b4e:	4798      	blx	r3
     b50:	3801      	subs	r0, #1
     b52:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     b54:	1c63      	adds	r3, r4, #1
     b56:	d00a      	beq.n	b6e <EIC_Handler+0xa2>
				if (_map[middle].extint == pos) {
     b58:	2c0f      	cmp	r4, #15
     b5a:	d005      	beq.n	b68 <EIC_Handler+0x9c>
     b5c:	230f      	movs	r3, #15
     b5e:	2200      	movs	r2, #0
     b60:	2601      	movs	r6, #1
     b62:	2100      	movs	r1, #0
     b64:	20ff      	movs	r0, #255	; 0xff
     b66:	e7dd      	b.n	b24 <EIC_Handler+0x58>
     b68:	230f      	movs	r3, #15
     b6a:	4699      	mov	r9, r3
     b6c:	e7e5      	b.n	b3a <EIC_Handler+0x6e>
	return ((Eic *)hw)->INTFLAG.reg;
     b6e:	4b0b      	ldr	r3, [pc, #44]	; (b9c <EIC_Handler+0xd0>)
     b70:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     b72:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     b74:	400a      	ands	r2, r1
     b76:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     b78:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     b7a:	611a      	str	r2, [r3, #16]
	while (flags) {
     b7c:	9b01      	ldr	r3, [sp, #4]
     b7e:	2b00      	cmp	r3, #0
     b80:	d006      	beq.n	b90 <EIC_Handler+0xc4>
		pos = ffs(flags) - 1;
     b82:	9801      	ldr	r0, [sp, #4]
     b84:	47c0      	blx	r8
     b86:	3801      	subs	r0, #1
     b88:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     b8a:	1c63      	adds	r3, r4, #1
     b8c:	d1e4      	bne.n	b58 <EIC_Handler+0x8c>
     b8e:	e7ee      	b.n	b6e <EIC_Handler+0xa2>
	}
}
     b90:	b003      	add	sp, #12
     b92:	bc0c      	pop	{r2, r3}
     b94:	4690      	mov	r8, r2
     b96:	4699      	mov	r9, r3
     b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	40001800 	.word	0x40001800
     ba0:	2000009c 	.word	0x2000009c
     ba4:	000022a4 	.word	0x000022a4
     ba8:	000008a5 	.word	0x000008a5
     bac:	00001921 	.word	0x00001921
     bb0:	0000229c 	.word	0x0000229c

00000bb4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     bb4:	07c3      	lsls	r3, r0, #31
     bb6:	d50a      	bpl.n	bce <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     bb8:	4b0b      	ldr	r3, [pc, #44]	; (be8 <_gclk_init_generators_by_fref+0x34>)
     bba:	2280      	movs	r2, #128	; 0x80
     bbc:	0052      	lsls	r2, r2, #1
     bbe:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     bc0:	2283      	movs	r2, #131	; 0x83
     bc2:	0252      	lsls	r2, r2, #9
     bc4:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     bc6:	001a      	movs	r2, r3
     bc8:	7853      	ldrb	r3, [r2, #1]
     bca:	09db      	lsrs	r3, r3, #7
     bcc:	d1fc      	bne.n	bc8 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     bce:	0703      	lsls	r3, r0, #28
     bd0:	d509      	bpl.n	be6 <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
     bd2:	4b05      	ldr	r3, [pc, #20]	; (be8 <_gclk_init_generators_by_fref+0x34>)
     bd4:	2204      	movs	r2, #4
     bd6:	32ff      	adds	r2, #255	; 0xff
     bd8:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     bda:	4a04      	ldr	r2, [pc, #16]	; (bec <_gclk_init_generators_by_fref+0x38>)
     bdc:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     bde:	001a      	movs	r2, r3
     be0:	7853      	ldrb	r3, [r2, #1]
     be2:	09db      	lsrs	r3, r3, #7
     be4:	d1fc      	bne.n	be0 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     be6:	4770      	bx	lr
     be8:	40000c00 	.word	0x40000c00
     bec:	00210303 	.word	0x00210303

00000bf0 <_set_sleep_mode>:
/**
 * \brief Set the sleep mode for the device
 */
int32_t _set_sleep_mode(const uint8_t mode)
{
	switch (mode) {
     bf0:	2802      	cmp	r0, #2
     bf2:	d904      	bls.n	bfe <_set_sleep_mode+0xe>
     bf4:	2803      	cmp	r0, #3
     bf6:	d00b      	beq.n	c10 <_set_sleep_mode+0x20>
		return ERR_NONE;
	case 3:
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
		return ERR_NONE;
	default:
		return ERR_INVALID_ARG;
     bf8:	200d      	movs	r0, #13
     bfa:	4240      	negs	r0, r0
     bfc:	e007      	b.n	c0e <_set_sleep_mode+0x1e>
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
     bfe:	4a08      	ldr	r2, [pc, #32]	; (c20 <_set_sleep_mode+0x30>)
     c00:	6913      	ldr	r3, [r2, #16]
     c02:	2104      	movs	r1, #4
     c04:	438b      	bics	r3, r1
     c06:	6113      	str	r3, [r2, #16]
		PM->SLEEP.reg = mode;
     c08:	4b06      	ldr	r3, [pc, #24]	; (c24 <_set_sleep_mode+0x34>)
     c0a:	7058      	strb	r0, [r3, #1]
		return ERR_NONE;
     c0c:	2000      	movs	r0, #0
	}
}
     c0e:	4770      	bx	lr
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
     c10:	4a03      	ldr	r2, [pc, #12]	; (c20 <_set_sleep_mode+0x30>)
     c12:	6913      	ldr	r3, [r2, #16]
     c14:	2104      	movs	r1, #4
     c16:	430b      	orrs	r3, r1
     c18:	6113      	str	r3, [r2, #16]
		return ERR_NONE;
     c1a:	2000      	movs	r0, #0
     c1c:	e7f7      	b.n	c0e <_set_sleep_mode+0x1e>
     c1e:	46c0      	nop			; (mov r8, r8)
     c20:	e000ed00 	.word	0xe000ed00
     c24:	40000400 	.word	0x40000400

00000c28 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     c28:	4b06      	ldr	r3, [pc, #24]	; (c44 <_pm_init+0x1c>)
     c2a:	7a1a      	ldrb	r2, [r3, #8]
     c2c:	b2d2      	uxtb	r2, r2
     c2e:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     c30:	7a5a      	ldrb	r2, [r3, #9]
     c32:	b2d2      	uxtb	r2, r2
     c34:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     c36:	7a9a      	ldrb	r2, [r3, #10]
     c38:	b2d2      	uxtb	r2, r2
     c3a:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     c3c:	7ada      	ldrb	r2, [r3, #11]
     c3e:	b2d2      	uxtb	r2, r2
     c40:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     c42:	4770      	bx	lr
     c44:	40000400 	.word	0x40000400

00000c48 <_calendar_register_callback>:

/**
 * \brief Registers callback for the specified callback type
 */
int32_t _calendar_register_callback(struct calendar_dev *const dev, calendar_drv_cb_alarm_t callback)
{
     c48:	b570      	push	{r4, r5, r6, lr}
     c4a:	0004      	movs	r4, r0
     c4c:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     c4e:	2800      	cmp	r0, #0
     c50:	d015      	beq.n	c7e <_calendar_register_callback+0x36>
     c52:	6800      	ldr	r0, [r0, #0]
     c54:	1e43      	subs	r3, r0, #1
     c56:	4198      	sbcs	r0, r3
     c58:	b2c0      	uxtb	r0, r0
     c5a:	2233      	movs	r2, #51	; 0x33
     c5c:	490f      	ldr	r1, [pc, #60]	; (c9c <_calendar_register_callback+0x54>)
     c5e:	4b10      	ldr	r3, [pc, #64]	; (ca0 <_calendar_register_callback+0x58>)
     c60:	4798      	blx	r3

	/* Check callback */
	if (callback != NULL) {
     c62:	2d00      	cmp	r5, #0
     c64:	d00d      	beq.n	c82 <_calendar_register_callback+0x3a>
		/* register the callback */
		dev->callback = callback;
     c66:	6065      	str	r5, [r4, #4]
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c68:	4b0e      	ldr	r3, [pc, #56]	; (ca4 <_calendar_register_callback+0x5c>)
     c6a:	2208      	movs	r2, #8
     c6c:	21c0      	movs	r1, #192	; 0xc0
     c6e:	0049      	lsls	r1, r1, #1
     c70:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c72:	601a      	str	r2, [r3, #0]
		/* enable RTC_IRQn */
		NVIC_ClearPendingIRQ(RTC_IRQn);
		NVIC_EnableIRQ(RTC_IRQn);

		/* enable cmp */
		hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
     c74:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE2.INTFLAG.reg = mask;
}

static inline void hri_rtcmode0_set_INTEN_CMP0_bit(const void *const hw)
{
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     c76:	3a07      	subs	r2, #7
     c78:	71da      	strb	r2, [r3, #7]
		/* disable RTC_IRQn */
		NVIC_DisableIRQ(RTC_IRQn);
	}

	return ERR_NONE;
}
     c7a:	2000      	movs	r0, #0
     c7c:	bd70      	pop	{r4, r5, r6, pc}
     c7e:	2000      	movs	r0, #0
     c80:	e7eb      	b.n	c5a <_calendar_register_callback+0x12>
		hri_rtcmode0_clear_INTEN_CMP0_bit(dev->hw);
     c82:	6823      	ldr	r3, [r4, #0]
	}
}

static inline void hri_rtcmode0_clear_INTEN_CMP0_bit(const void *const hw)
{
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_CMP0;
     c84:	2201      	movs	r2, #1
     c86:	719a      	strb	r2, [r3, #6]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c88:	2108      	movs	r1, #8
     c8a:	2380      	movs	r3, #128	; 0x80
     c8c:	4a05      	ldr	r2, [pc, #20]	; (ca4 <_calendar_register_callback+0x5c>)
     c8e:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
     c90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c94:	f3bf 8f6f 	isb	sy
     c98:	e7ef      	b.n	c7a <_calendar_register_callback+0x32>
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	000022bc 	.word	0x000022bc
     ca0:	000008a5 	.word	0x000008a5
     ca4:	e000e100 	.word	0xe000e100

00000ca8 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
     ca8:	b510      	push	{r4, lr}
     caa:	1e04      	subs	r4, r0, #0
	uint16_t register_value;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     cac:	d036      	beq.n	d1c <_calendar_init+0x74>
     cae:	6800      	ldr	r0, [r0, #0]
     cb0:	1e43      	subs	r3, r0, #1
     cb2:	4198      	sbcs	r0, r3
     cb4:	b2c0      	uxtb	r0, r0
     cb6:	2278      	movs	r2, #120	; 0x78
     cb8:	4919      	ldr	r1, [pc, #100]	; (d20 <_calendar_init+0x78>)
     cba:	4b1a      	ldr	r3, [pc, #104]	; (d24 <_calendar_init+0x7c>)
     cbc:	4798      	blx	r3

	_rtc_dev = dev;
     cbe:	4b1a      	ldr	r3, [pc, #104]	; (d28 <_calendar_init+0x80>)
     cc0:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw);
     cc2:	6822      	ldr	r2, [r4, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     cc4:	7a93      	ldrb	r3, [r2, #10]
     cc6:	09db      	lsrs	r3, r3, #7
     cc8:	d1fc      	bne.n	cc4 <_calendar_init+0x1c>
     cca:	7a93      	ldrb	r3, [r2, #10]
     ccc:	09db      	lsrs	r3, r3, #7
     cce:	d1fc      	bne.n	cca <_calendar_init+0x22>

static inline bool hri_rtcmode0_get_CTRL_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
     cd0:	8813      	ldrh	r3, [r2, #0]
	if (hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw)) {
     cd2:	079b      	lsls	r3, r3, #30
     cd4:	d50a      	bpl.n	cec <_calendar_init+0x44>
}

static inline void hri_rtcmode0_clear_CTRL_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     cd6:	8813      	ldrh	r3, [r2, #0]
     cd8:	2102      	movs	r1, #2
     cda:	438b      	bics	r3, r1
     cdc:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     cde:	7a93      	ldrb	r3, [r2, #10]
     ce0:	09db      	lsrs	r3, r3, #7
     ce2:	d1fc      	bne.n	cde <_calendar_init+0x36>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw);
     ce4:	6822      	ldr	r2, [r4, #0]
     ce6:	7a93      	ldrb	r3, [r2, #10]
     ce8:	09db      	lsrs	r3, r3, #7
     cea:	d1fc      	bne.n	ce6 <_calendar_init+0x3e>
#endif
	}
	hri_rtcmode0_set_CTRL_SWRST_bit(dev->hw);
     cec:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     cee:	8813      	ldrh	r3, [r2, #0]
     cf0:	2101      	movs	r1, #1
     cf2:	430b      	orrs	r3, r1
     cf4:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     cf6:	7a93      	ldrb	r3, [r2, #10]
     cf8:	09db      	lsrs	r3, r3, #7
     cfa:	d1fc      	bne.n	cf6 <_calendar_init+0x4e>
	hri_rtcmode0_wait_for_sync(dev->hw);
     cfc:	6822      	ldr	r2, [r4, #0]
     cfe:	7a93      	ldrb	r3, [r2, #10]
     d00:	09db      	lsrs	r3, r3, #7
     d02:	d1fc      	bne.n	cfe <_calendar_init+0x56>
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     d04:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     d06:	7a93      	ldrb	r3, [r2, #10]
     d08:	09db      	lsrs	r3, r3, #7
     d0a:	d1fc      	bne.n	d06 <_calendar_init+0x5e>
	register_value &= (~RTC_MODE0_CTRL_MATCHCLR);

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	/* set continuously clock read update mode */
	hri_rtcmode0_set_READREQ_RCONT_bit(dev->hw);
     d0c:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_rtc_set_READREQ_RCONT_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     d0e:	8853      	ldrh	r3, [r2, #2]
     d10:	2180      	movs	r1, #128	; 0x80
     d12:	01c9      	lsls	r1, r1, #7
     d14:	430b      	orrs	r3, r1
     d16:	8053      	strh	r3, [r2, #2]
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	return ERR_NONE;
}
     d18:	2000      	movs	r0, #0
     d1a:	bd10      	pop	{r4, pc}
     d1c:	2000      	movs	r0, #0
     d1e:	e7ca      	b.n	cb6 <_calendar_init+0xe>
     d20:	000022bc 	.word	0x000022bc
     d24:	000008a5 	.word	0x000008a5
     d28:	200000a0 	.word	0x200000a0

00000d2c <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
     d2c:	b510      	push	{r4, lr}
     d2e:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     d30:	d011      	beq.n	d56 <_calendar_enable+0x2a>
     d32:	6800      	ldr	r0, [r0, #0]
     d34:	1e43      	subs	r3, r0, #1
     d36:	4198      	sbcs	r0, r3
     d38:	b2c0      	uxtb	r0, r0
     d3a:	22aa      	movs	r2, #170	; 0xaa
     d3c:	4907      	ldr	r1, [pc, #28]	; (d5c <_calendar_enable+0x30>)
     d3e:	4b08      	ldr	r3, [pc, #32]	; (d60 <_calendar_enable+0x34>)
     d40:	4798      	blx	r3

	/* Enable rtc */
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
     d42:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     d44:	8813      	ldrh	r3, [r2, #0]
     d46:	2102      	movs	r1, #2
     d48:	430b      	orrs	r3, r1
     d4a:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     d4c:	7a93      	ldrb	r3, [r2, #10]
     d4e:	09db      	lsrs	r3, r3, #7
     d50:	d1fc      	bne.n	d4c <_calendar_enable+0x20>

	return ERR_NONE;
}
     d52:	2000      	movs	r0, #0
     d54:	bd10      	pop	{r4, pc}
     d56:	2000      	movs	r0, #0
     d58:	e7ef      	b.n	d3a <_calendar_enable+0xe>
     d5a:	46c0      	nop			; (mov r8, r8)
     d5c:	000022bc 	.word	0x000022bc
     d60:	000008a5 	.word	0x000008a5

00000d64 <_calendar_set_comp>:

/**
 * \brief Set the compare for the specified value.
 */
int32_t _calendar_set_comp(struct calendar_dev *const dev, const uint32_t comp)
{
     d64:	b570      	push	{r4, r5, r6, lr}
     d66:	0004      	movs	r4, r0
     d68:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     d6a:	2800      	cmp	r0, #0
     d6c:	d00f      	beq.n	d8e <_calendar_set_comp+0x2a>
     d6e:	6800      	ldr	r0, [r0, #0]
     d70:	1e43      	subs	r3, r0, #1
     d72:	4198      	sbcs	r0, r3
     d74:	b2c0      	uxtb	r0, r0
     d76:	22e4      	movs	r2, #228	; 0xe4
     d78:	4906      	ldr	r1, [pc, #24]	; (d94 <_calendar_set_comp+0x30>)
     d7a:	4b07      	ldr	r3, [pc, #28]	; (d98 <_calendar_set_comp+0x34>)
     d7c:	4798      	blx	r3

	/* Set value into alarm register. */
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, comp);
     d7e:	6822      	ldr	r2, [r4, #0]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     d80:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     d82:	6195      	str	r5, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     d84:	7a93      	ldrb	r3, [r2, #10]
     d86:	09db      	lsrs	r3, r3, #7
     d88:	d1fc      	bne.n	d84 <_calendar_set_comp+0x20>

	return ERR_NONE;
}
     d8a:	2000      	movs	r0, #0
     d8c:	bd70      	pop	{r4, r5, r6, pc}
     d8e:	2000      	movs	r0, #0
     d90:	e7f1      	b.n	d76 <_calendar_set_comp+0x12>
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	000022bc 	.word	0x000022bc
     d98:	000008a5 	.word	0x000008a5

00000d9c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     d9c:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
     d9e:	4b07      	ldr	r3, [pc, #28]	; (dbc <RTC_Handler+0x20>)
     da0:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     da2:	6823      	ldr	r3, [r4, #0]
     da4:	7a1b      	ldrb	r3, [r3, #8]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
     da6:	07db      	lsls	r3, r3, #31
     da8:	d400      	bmi.n	dac <RTC_Handler+0x10>
}
     daa:	bd10      	pop	{r4, pc}
		dev->callback(dev);
     dac:	0020      	movs	r0, r4
     dae:	6863      	ldr	r3, [r4, #4]
     db0:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     db2:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     db4:	2201      	movs	r2, #1
     db6:	721a      	strb	r2, [r3, #8]
}
     db8:	e7f7      	b.n	daa <RTC_Handler+0xe>
     dba:	46c0      	nop			; (mov r8, r8)
     dbc:	200000a0 	.word	0x200000a0

00000dc0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     dc0:	b510      	push	{r4, lr}
     dc2:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     dc4:	4b1f      	ldr	r3, [pc, #124]	; (e44 <_usart_init+0x84>)
     dc6:	18c3      	adds	r3, r0, r3
     dc8:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
     dca:	b2db      	uxtb	r3, r3
     dcc:	2b03      	cmp	r3, #3
     dce:	d004      	beq.n	dda <_usart_init+0x1a>
	ASSERT(false);
     dd0:	4a1d      	ldr	r2, [pc, #116]	; (e48 <_usart_init+0x88>)
     dd2:	491e      	ldr	r1, [pc, #120]	; (e4c <_usart_init+0x8c>)
     dd4:	2000      	movs	r0, #0
     dd6:	4b1e      	ldr	r3, [pc, #120]	; (e50 <_usart_init+0x90>)
     dd8:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     dda:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     ddc:	07db      	lsls	r3, r3, #31
     dde:	d418      	bmi.n	e12 <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     de0:	2203      	movs	r2, #3
     de2:	69e3      	ldr	r3, [r4, #28]
     de4:	421a      	tst	r2, r3
     de6:	d1fc      	bne.n	de2 <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     de8:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     dea:	079b      	lsls	r3, r3, #30
     dec:	d50b      	bpl.n	e06 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     dee:	6823      	ldr	r3, [r4, #0]
     df0:	2202      	movs	r2, #2
     df2:	4393      	bics	r3, r2
     df4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     df6:	3201      	adds	r2, #1
     df8:	69e3      	ldr	r3, [r4, #28]
     dfa:	421a      	tst	r2, r3
     dfc:	d1fc      	bne.n	df8 <_usart_init+0x38>
     dfe:	2202      	movs	r2, #2
     e00:	69e3      	ldr	r3, [r4, #28]
     e02:	421a      	tst	r2, r3
     e04:	d1fc      	bne.n	e00 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e06:	2305      	movs	r3, #5
     e08:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e0a:	2203      	movs	r2, #3
     e0c:	69e3      	ldr	r3, [r4, #28]
     e0e:	421a      	tst	r2, r3
     e10:	d1fc      	bne.n	e0c <_usart_init+0x4c>
     e12:	2201      	movs	r2, #1
     e14:	69e3      	ldr	r3, [r4, #28]
     e16:	421a      	tst	r2, r3
     e18:	d1fc      	bne.n	e14 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e1a:	4b0e      	ldr	r3, [pc, #56]	; (e54 <_usart_init+0x94>)
     e1c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e1e:	2203      	movs	r2, #3
     e20:	69e3      	ldr	r3, [r4, #28]
     e22:	421a      	tst	r2, r3
     e24:	d1fc      	bne.n	e20 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     e26:	23c0      	movs	r3, #192	; 0xc0
     e28:	029b      	lsls	r3, r3, #10
     e2a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e2c:	2207      	movs	r2, #7
     e2e:	69e3      	ldr	r3, [r4, #28]
     e30:	421a      	tst	r2, r3
     e32:	d1fc      	bne.n	e2e <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     e34:	4b08      	ldr	r3, [pc, #32]	; (e58 <_usart_init+0x98>)
     e36:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     e38:	2300      	movs	r3, #0
     e3a:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     e3c:	2230      	movs	r2, #48	; 0x30
     e3e:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     e40:	2000      	movs	r0, #0
     e42:	bd10      	pop	{r4, pc}
     e44:	bdfff800 	.word	0xbdfff800
     e48:	0000025e 	.word	0x0000025e
     e4c:	000022d4 	.word	0x000022d4
     e50:	000008a5 	.word	0x000008a5
     e54:	40100004 	.word	0x40100004
     e58:	ffffc504 	.word	0xffffc504

00000e5c <_usart_async_init>:
{
     e5c:	b570      	push	{r4, r5, r6, lr}
     e5e:	0005      	movs	r5, r0
     e60:	000c      	movs	r4, r1
	ASSERT(device);
     e62:	1e43      	subs	r3, r0, #1
     e64:	4198      	sbcs	r0, r3
     e66:	b2c0      	uxtb	r0, r0
     e68:	22c4      	movs	r2, #196	; 0xc4
     e6a:	4914      	ldr	r1, [pc, #80]	; (ebc <_usart_async_init+0x60>)
     e6c:	4b14      	ldr	r3, [pc, #80]	; (ec0 <_usart_async_init+0x64>)
     e6e:	4798      	blx	r3
	init_status = _usart_init(hw);
     e70:	0020      	movs	r0, r4
     e72:	4b14      	ldr	r3, [pc, #80]	; (ec4 <_usart_async_init+0x68>)
     e74:	4798      	blx	r3
	if (init_status) {
     e76:	2800      	cmp	r0, #0
     e78:	d000      	beq.n	e7c <_usart_async_init+0x20>
}
     e7a:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
     e7c:	61ac      	str	r4, [r5, #24]
	if (hw == SERCOM3) {
     e7e:	4b12      	ldr	r3, [pc, #72]	; (ec8 <_usart_async_init+0x6c>)
     e80:	429c      	cmp	r4, r3
     e82:	d017      	beq.n	eb4 <_usart_async_init+0x58>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     e84:	4b11      	ldr	r3, [pc, #68]	; (ecc <_usart_async_init+0x70>)
     e86:	469c      	mov	ip, r3
     e88:	4464      	add	r4, ip
     e8a:	0aa4      	lsrs	r4, r4, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
     e8c:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
     e8e:	b2e3      	uxtb	r3, r4
     e90:	0622      	lsls	r2, r4, #24
     e92:	d4f2      	bmi.n	e7a <_usart_async_init+0x1e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e94:	221f      	movs	r2, #31
     e96:	401a      	ands	r2, r3
     e98:	2301      	movs	r3, #1
     e9a:	4093      	lsls	r3, r2
     e9c:	4a0c      	ldr	r2, [pc, #48]	; (ed0 <_usart_async_init+0x74>)
     e9e:	2180      	movs	r1, #128	; 0x80
     ea0:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     ea2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ea6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     eaa:	3101      	adds	r1, #1
     eac:	31ff      	adds	r1, #255	; 0xff
     eae:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     eb0:	6013      	str	r3, [r2, #0]
     eb2:	e7e2      	b.n	e7a <_usart_async_init+0x1e>
		_sercom3_dev = (struct _usart_async_device *)dev;
     eb4:	4b07      	ldr	r3, [pc, #28]	; (ed4 <_usart_async_init+0x78>)
     eb6:	601d      	str	r5, [r3, #0]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
     eb8:	230c      	movs	r3, #12
     eba:	e7eb      	b.n	e94 <_usart_async_init+0x38>
     ebc:	000022d4 	.word	0x000022d4
     ec0:	000008a5 	.word	0x000008a5
     ec4:	00000dc1 	.word	0x00000dc1
     ec8:	42001400 	.word	0x42001400
     ecc:	bdfff800 	.word	0xbdfff800
     ed0:	e000e100 	.word	0xe000e100
     ed4:	200000a4 	.word	0x200000a4

00000ed8 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     ed8:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     eda:	6813      	ldr	r3, [r2, #0]
     edc:	2102      	movs	r1, #2
     ede:	430b      	orrs	r3, r1
     ee0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ee2:	3101      	adds	r1, #1
     ee4:	69d3      	ldr	r3, [r2, #28]
     ee6:	4219      	tst	r1, r3
     ee8:	d1fc      	bne.n	ee4 <_usart_async_enable+0xc>
}
     eea:	4770      	bx	lr

00000eec <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     eec:	6983      	ldr	r3, [r0, #24]
     eee:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     ef0:	8519      	strh	r1, [r3, #40]	; 0x28
}
     ef2:	4770      	bx	lr

00000ef4 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
     ef4:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     ef6:	2201      	movs	r2, #1
     ef8:	759a      	strb	r2, [r3, #22]
}
     efa:	4770      	bx	lr

00000efc <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
     efc:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     efe:	2202      	movs	r2, #2
     f00:	759a      	strb	r2, [r3, #22]
}
     f02:	4770      	bx	lr

00000f04 <_usart_async_set_irq_state>:
{
     f04:	b570      	push	{r4, r5, r6, lr}
     f06:	0004      	movs	r4, r0
     f08:	000d      	movs	r5, r1
     f0a:	0016      	movs	r6, r2
	ASSERT(device);
     f0c:	1e43      	subs	r3, r0, #1
     f0e:	4198      	sbcs	r0, r3
     f10:	b2c0      	uxtb	r0, r0
     f12:	4a16      	ldr	r2, [pc, #88]	; (f6c <_usart_async_set_irq_state+0x68>)
     f14:	4916      	ldr	r1, [pc, #88]	; (f70 <_usart_async_set_irq_state+0x6c>)
     f16:	4b17      	ldr	r3, [pc, #92]	; (f74 <_usart_async_set_irq_state+0x70>)
     f18:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
     f1a:	2302      	movs	r3, #2
     f1c:	002a      	movs	r2, r5
     f1e:	439a      	bics	r2, r3
     f20:	d10e      	bne.n	f40 <_usart_async_set_irq_state+0x3c>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
     f22:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     f24:	2e00      	cmp	r6, #0
     f26:	d105      	bne.n	f34 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     f28:	2201      	movs	r2, #1
     f2a:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
     f2c:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     f2e:	3201      	adds	r2, #1
     f30:	751a      	strb	r2, [r3, #20]
}
     f32:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     f34:	2201      	movs	r2, #1
     f36:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
     f38:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     f3a:	3201      	adds	r2, #1
     f3c:	759a      	strb	r2, [r3, #22]
     f3e:	e7f8      	b.n	f32 <_usart_async_set_irq_state+0x2e>
	} else if (USART_ASYNC_RX_DONE == type) {
     f40:	2d01      	cmp	r5, #1
     f42:	d007      	beq.n	f54 <_usart_async_set_irq_state+0x50>
	} else if (USART_ASYNC_ERROR == type) {
     f44:	2d03      	cmp	r5, #3
     f46:	d1f4      	bne.n	f32 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
     f48:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     f4a:	2e00      	cmp	r6, #0
     f4c:	d00b      	beq.n	f66 <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
     f4e:	2280      	movs	r2, #128	; 0x80
     f50:	759a      	strb	r2, [r3, #22]
}
     f52:	e7ee      	b.n	f32 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
     f54:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     f56:	2e00      	cmp	r6, #0
     f58:	d102      	bne.n	f60 <_usart_async_set_irq_state+0x5c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
     f5a:	2204      	movs	r2, #4
     f5c:	751a      	strb	r2, [r3, #20]
     f5e:	e7e8      	b.n	f32 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
     f60:	2204      	movs	r2, #4
     f62:	759a      	strb	r2, [r3, #22]
     f64:	e7e5      	b.n	f32 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
     f66:	2280      	movs	r2, #128	; 0x80
     f68:	751a      	strb	r2, [r3, #20]
     f6a:	e7e2      	b.n	f32 <_usart_async_set_irq_state+0x2e>
     f6c:	0000021e 	.word	0x0000021e
     f70:	000022d4 	.word	0x000022d4
     f74:	000008a5 	.word	0x000008a5

00000f78 <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
     f78:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
     f7a:	4b19      	ldr	r3, [pc, #100]	; (fe0 <SERCOM3_Handler+0x68>)
     f7c:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
     f7e:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     f80:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
     f82:	07db      	lsls	r3, r3, #31
     f84:	d502      	bpl.n	f8c <SERCOM3_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
     f86:	7da3      	ldrb	r3, [r4, #22]
     f88:	07db      	lsls	r3, r3, #31
     f8a:	d40f      	bmi.n	fac <SERCOM3_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     f8c:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
     f8e:	079b      	lsls	r3, r3, #30
     f90:	d502      	bpl.n	f98 <SERCOM3_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
     f92:	7da3      	ldrb	r3, [r4, #22]
     f94:	079b      	lsls	r3, r3, #30
     f96:	d40e      	bmi.n	fb6 <SERCOM3_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     f98:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
     f9a:	075b      	lsls	r3, r3, #29
     f9c:	d515      	bpl.n	fca <SERCOM3_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
     f9e:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
     fa0:	2337      	movs	r3, #55	; 0x37
     fa2:	421a      	tst	r2, r3
     fa4:	d00c      	beq.n	fc0 <SERCOM3_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
     fa6:	3308      	adds	r3, #8
     fa8:	8363      	strh	r3, [r4, #26]
}
     faa:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     fac:	2301      	movs	r3, #1
     fae:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
     fb0:	6803      	ldr	r3, [r0, #0]
     fb2:	4798      	blx	r3
     fb4:	e7f9      	b.n	faa <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     fb6:	2302      	movs	r3, #2
     fb8:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
     fba:	6883      	ldr	r3, [r0, #8]
     fbc:	4798      	blx	r3
     fbe:	e7f4      	b.n	faa <SERCOM3_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
     fc0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
     fc2:	b2c9      	uxtb	r1, r1
     fc4:	6843      	ldr	r3, [r0, #4]
     fc6:	4798      	blx	r3
     fc8:	e7ef      	b.n	faa <SERCOM3_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
     fca:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
     fcc:	09db      	lsrs	r3, r3, #7
     fce:	d0ec      	beq.n	faa <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     fd0:	2380      	movs	r3, #128	; 0x80
     fd2:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
     fd4:	68c3      	ldr	r3, [r0, #12]
     fd6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
     fd8:	8b63      	ldrh	r3, [r4, #26]
     fda:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
     fdc:	8363      	strh	r3, [r4, #26]
}
     fde:	e7e4      	b.n	faa <SERCOM3_Handler+0x32>
     fe0:	200000a4 	.word	0x200000a4

00000fe4 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     fe4:	4b0e      	ldr	r3, [pc, #56]	; (1020 <_sysctrl_init_sources+0x3c>)
     fe6:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     fe8:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     fea:	480e      	ldr	r0, [pc, #56]	; (1024 <_sysctrl_init_sources+0x40>)
     fec:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     fee:	0f92      	lsrs	r2, r2, #30
     ff0:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
     ff2:	2002      	movs	r0, #2
     ff4:	4302      	orrs	r2, r0
     ff6:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     ff8:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     ffa:	699a      	ldr	r2, [r3, #24]
     ffc:	4302      	orrs	r2, r0
     ffe:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1000:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1002:	211f      	movs	r1, #31
    1004:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1006:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1008:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    100a:	2208      	movs	r2, #8
    100c:	68cb      	ldr	r3, [r1, #12]
    100e:	421a      	tst	r2, r3
    1010:	d0fc      	beq.n	100c <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1012:	4a03      	ldr	r2, [pc, #12]	; (1020 <_sysctrl_init_sources+0x3c>)
    1014:	6a13      	ldr	r3, [r2, #32]
    1016:	2180      	movs	r1, #128	; 0x80
    1018:	430b      	orrs	r3, r1
    101a:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    101c:	4770      	bx	lr
    101e:	46c0      	nop			; (mov r8, r8)
    1020:	40000800 	.word	0x40000800
    1024:	0fff0000 	.word	0x0fff0000

00001028 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1028:	4a02      	ldr	r2, [pc, #8]	; (1034 <_sysctrl_init_referenced_generators+0xc>)
    102a:	6993      	ldr	r3, [r2, #24]
    102c:	2102      	movs	r1, #2
    102e:	438b      	bics	r3, r1
    1030:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1032:	4770      	bx	lr
    1034:	40000800 	.word	0x40000800

00001038 <main>:
#include <atmel_start.h>
#include "mulib_port_test.h"

int main(void)
{
    1038:	b510      	push	{r4, lr}
    /* Initializes MCU, drivers and middleware */
    atmel_start_init();
    103a:	4b03      	ldr	r3, [pc, #12]	; (1048 <main+0x10>)
    103c:	4798      	blx	r3
    mulib_port_test_init();
    103e:	4b03      	ldr	r3, [pc, #12]	; (104c <main+0x14>)
    1040:	4798      	blx	r3

    /* Replace with your application code */
    while (1) {
        mulib_port_test_step();
    1042:	4c03      	ldr	r4, [pc, #12]	; (1050 <main+0x18>)
    1044:	47a0      	blx	r4
    1046:	e7fd      	b.n	1044 <main+0xc>
    1048:	00000115 	.word	0x00000115
    104c:	0000112d 	.word	0x0000112d
    1050:	00001139 	.word	0x00001139

00001054 <button_press_cb>:
    // repeat...
  }
}

static void button_press_cb(void *arg) {
	s_button_pressed = true;
    1054:	2201      	movs	r2, #1
    1056:	4b01      	ldr	r3, [pc, #4]	; (105c <button_press_cb+0x8>)
    1058:	701a      	strb	r2, [r3, #0]
}
    105a:	4770      	bx	lr
    105c:	200000a8 	.word	0x200000a8

00001060 <serial_read_cb>:

static void serial_read_cb(void *arg) {
	s_char_available = true;
    1060:	2201      	movs	r2, #1
    1062:	4b01      	ldr	r3, [pc, #4]	; (1068 <serial_read_cb+0x8>)
    1064:	705a      	strb	r2, [r3, #1]
}
    1066:	4770      	bx	lr
    1068:	200000a8 	.word	0x200000a8

0000106c <rtc_cb>:

static void rtc_cb(void *arg) {
	s_rtc_matched = true;
    106c:	2201      	movs	r2, #1
    106e:	4b01      	ldr	r3, [pc, #4]	; (1074 <rtc_cb+0x8>)
    1070:	709a      	strb	r2, [r3, #2]
}
    1072:	4770      	bx	lr
    1074:	200000a8 	.word	0x200000a8

00001078 <wait_ms>:
static void wait_ms(int ms) {
    1078:	b570      	push	{r4, r5, r6, lr}
    107a:	0005      	movs	r5, r0
      mu_port_time_offset(mu_port_rtc_now(), mu_port_time_ms_to_duration(ms));
    107c:	4b0a      	ldr	r3, [pc, #40]	; (10a8 <wait_ms+0x30>)
    107e:	4798      	blx	r3
    1080:	0004      	movs	r4, r0
    1082:	0028      	movs	r0, r5
    1084:	4b09      	ldr	r3, [pc, #36]	; (10ac <wait_ms+0x34>)
    1086:	4798      	blx	r3
    1088:	0001      	movs	r1, r0
  mu_port_time_t then =
    108a:	0020      	movs	r0, r4
    108c:	4b08      	ldr	r3, [pc, #32]	; (10b0 <wait_ms+0x38>)
    108e:	4798      	blx	r3
    1090:	0005      	movs	r5, r0
  while (mu_port_time_precedes(mu_port_rtc_now(), then)) {
    1092:	4e05      	ldr	r6, [pc, #20]	; (10a8 <wait_ms+0x30>)
    1094:	4c07      	ldr	r4, [pc, #28]	; (10b4 <wait_ms+0x3c>)
    1096:	e000      	b.n	109a <wait_ms+0x22>
	  asm("nop");
    1098:	46c0      	nop			; (mov r8, r8)
  while (mu_port_time_precedes(mu_port_rtc_now(), then)) {
    109a:	47b0      	blx	r6
    109c:	0029      	movs	r1, r5
    109e:	47a0      	blx	r4
    10a0:	2800      	cmp	r0, #0
    10a2:	d1f9      	bne.n	1098 <wait_ms+0x20>
}
    10a4:	bd70      	pop	{r4, r5, r6, pc}
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	0000146d 	.word	0x0000146d
    10ac:	00001445 	.word	0x00001445
    10b0:	00001439 	.word	0x00001439
    10b4:	0000143d 	.word	0x0000143d

000010b8 <test_flush_rx>:
static void test_flush_rx(void) {
    10b8:	b510      	push	{r4, lr}
    10ba:	b082      	sub	sp, #8
  while (mu_port_serial_read(&c, 1) != 0) {
    10bc:	4c04      	ldr	r4, [pc, #16]	; (10d0 <test_flush_rx+0x18>)
    10be:	2101      	movs	r1, #1
    10c0:	466b      	mov	r3, sp
    10c2:	1dd8      	adds	r0, r3, #7
    10c4:	47a0      	blx	r4
    10c6:	2800      	cmp	r0, #0
    10c8:	d1f9      	bne.n	10be <test_flush_rx+0x6>
}
    10ca:	b002      	add	sp, #8
    10cc:	bd10      	pop	{r4, pc}
    10ce:	46c0      	nop			; (mov r8, r8)
    10d0:	000015c1 	.word	0x000015c1

000010d4 <port_printf>:
static void port_printf(const char *fmt, ...) {
    10d4:	b40f      	push	{r0, r1, r2, r3}
    10d6:	b570      	push	{r4, r5, r6, lr}
    10d8:	b082      	sub	sp, #8
  while (!mu_port_serial_can_write()) {
    10da:	4c10      	ldr	r4, [pc, #64]	; (111c <port_printf+0x48>)
    10dc:	e000      	b.n	10e0 <port_printf+0xc>
    asm("nop");
    10de:	46c0      	nop			; (mov r8, r8)
  while (!mu_port_serial_can_write()) {
    10e0:	47a0      	blx	r4
    10e2:	2800      	cmp	r0, #0
    10e4:	d0fb      	beq.n	10de <port_printf+0xa>
  va_start(ap, fmt);
    10e6:	ab07      	add	r3, sp, #28
    10e8:	9301      	str	r3, [sp, #4]
  n_remaining = vsnprintf((char *)buf, MAX_CHARS, fmt, ap);
    10ea:	9a06      	ldr	r2, [sp, #24]
    10ec:	2132      	movs	r1, #50	; 0x32
    10ee:	480c      	ldr	r0, [pc, #48]	; (1120 <port_printf+0x4c>)
    10f0:	3004      	adds	r0, #4
    10f2:	4c0c      	ldr	r4, [pc, #48]	; (1124 <port_printf+0x50>)
    10f4:	47a0      	blx	r4
    10f6:	1e04      	subs	r4, r0, #0
  while (n_remaining > 0) {
    10f8:	d00b      	beq.n	1112 <port_printf+0x3e>
    10fa:	4d09      	ldr	r5, [pc, #36]	; (1120 <port_printf+0x4c>)
    10fc:	3504      	adds	r5, #4
    int n_written = mu_port_serial_write(p, n_remaining);
    10fe:	4e0a      	ldr	r6, [pc, #40]	; (1128 <port_printf+0x54>)
    1100:	0021      	movs	r1, r4
    1102:	0028      	movs	r0, r5
    1104:	47b0      	blx	r6
    if (n_written < 0)
    1106:	2800      	cmp	r0, #0
    1108:	db03      	blt.n	1112 <port_printf+0x3e>
    n_remaining -= n_written;
    110a:	1a24      	subs	r4, r4, r0
    p += n_written;
    110c:	182d      	adds	r5, r5, r0
  while (n_remaining > 0) {
    110e:	2c00      	cmp	r4, #0
    1110:	d1f6      	bne.n	1100 <port_printf+0x2c>
}
    1112:	b002      	add	sp, #8
    1114:	bc70      	pop	{r4, r5, r6}
    1116:	bc08      	pop	{r3}
    1118:	b004      	add	sp, #16
    111a:	4718      	bx	r3
    111c:	00001579 	.word	0x00001579
    1120:	200000a8 	.word	0x200000a8
    1124:	00001a15 	.word	0x00001a15
    1128:	00001589 	.word	0x00001589

0000112c <mulib_port_test_init>:
void mulib_port_test_init(void) {
    112c:	b510      	push	{r4, lr}
	mu_port_init();
    112e:	4b01      	ldr	r3, [pc, #4]	; (1134 <mulib_port_test_init+0x8>)
    1130:	4798      	blx	r3
}
    1132:	bd10      	pop	{r4, pc}
    1134:	000013ad 	.word	0x000013ad

00001138 <mulib_port_test_step>:
void mulib_port_test_step(void) {
    1138:	b5f0      	push	{r4, r5, r6, r7, lr}
    113a:	b083      	sub	sp, #12
  s_epoch = mu_port_rtc_now();
    113c:	4f5c      	ldr	r7, [pc, #368]	; (12b0 <mulib_port_test_step+0x178>)
    113e:	47b8      	blx	r7
  port_printf("\r\n================\r\nstarting mu_port_test\r\n");
    1140:	485c      	ldr	r0, [pc, #368]	; (12b4 <mulib_port_test_step+0x17c>)
    1142:	4c5d      	ldr	r4, [pc, #372]	; (12b8 <mulib_port_test_step+0x180>)
    1144:	47a0      	blx	r4
  port_printf("looping for 2.5 seconds...");
    1146:	485d      	ldr	r0, [pc, #372]	; (12bc <mulib_port_test_step+0x184>)
    1148:	47a0      	blx	r4
  wait_ms(2500);
    114a:	4e5d      	ldr	r6, [pc, #372]	; (12c0 <mulib_port_test_step+0x188>)
    114c:	0030      	movs	r0, r6
    114e:	4b5d      	ldr	r3, [pc, #372]	; (12c4 <mulib_port_test_step+0x18c>)
    1150:	4798      	blx	r3
  port_printf("done\r\n");
    1152:	485d      	ldr	r0, [pc, #372]	; (12c8 <mulib_port_test_step+0x190>)
    1154:	47a0      	blx	r4
  s_rtc_matched = false;
    1156:	4d5d      	ldr	r5, [pc, #372]	; (12cc <mulib_port_test_step+0x194>)
    1158:	2300      	movs	r3, #0
    115a:	70ab      	strb	r3, [r5, #2]
  mu_port_rtc_set_cb(rtc_cb, NULL);
    115c:	2100      	movs	r1, #0
    115e:	485c      	ldr	r0, [pc, #368]	; (12d0 <mulib_port_test_step+0x198>)
    1160:	4b5c      	ldr	r3, [pc, #368]	; (12d4 <mulib_port_test_step+0x19c>)
    1162:	4798      	blx	r3
  mu_port_rtc_alarm_at(mu_port_time_offset(mu_port_rtc_now(),
    1164:	47b8      	blx	r7
    1166:	0007      	movs	r7, r0
    1168:	0030      	movs	r0, r6
    116a:	4b5b      	ldr	r3, [pc, #364]	; (12d8 <mulib_port_test_step+0x1a0>)
    116c:	4798      	blx	r3
    116e:	0001      	movs	r1, r0
    1170:	0038      	movs	r0, r7
    1172:	4b5a      	ldr	r3, [pc, #360]	; (12dc <mulib_port_test_step+0x1a4>)
    1174:	4798      	blx	r3
    1176:	4b5a      	ldr	r3, [pc, #360]	; (12e0 <mulib_port_test_step+0x1a8>)
    1178:	4798      	blx	r3
  port_printf("waiting 2.5 seconds for RTC match...");
    117a:	485a      	ldr	r0, [pc, #360]	; (12e4 <mulib_port_test_step+0x1ac>)
    117c:	47a0      	blx	r4
  while (!s_rtc_matched) {
    117e:	78ab      	ldrb	r3, [r5, #2]
    1180:	2b00      	cmp	r3, #0
    1182:	d104      	bne.n	118e <mulib_port_test_step+0x56>
    1184:	4a51      	ldr	r2, [pc, #324]	; (12cc <mulib_port_test_step+0x194>)
	  asm("nop");
    1186:	46c0      	nop			; (mov r8, r8)
  while (!s_rtc_matched) {
    1188:	7893      	ldrb	r3, [r2, #2]
    118a:	2b00      	cmp	r3, #0
    118c:	d0fb      	beq.n	1186 <mulib_port_test_step+0x4e>
  port_printf("done\r\n");
    118e:	484e      	ldr	r0, [pc, #312]	; (12c8 <mulib_port_test_step+0x190>)
    1190:	4c49      	ldr	r4, [pc, #292]	; (12b8 <mulib_port_test_step+0x180>)
    1192:	47a0      	blx	r4
  port_printf("flashing LED for 2.5 seconds...");
    1194:	4854      	ldr	r0, [pc, #336]	; (12e8 <mulib_port_test_step+0x1b0>)
    1196:	47a0      	blx	r4
    1198:	240a      	movs	r4, #10
    mu_port_led_set(!mu_port_led_get());
    119a:	4f54      	ldr	r7, [pc, #336]	; (12ec <mulib_port_test_step+0x1b4>)
    119c:	4e54      	ldr	r6, [pc, #336]	; (12f0 <mulib_port_test_step+0x1b8>)
    wait_ms(250);
    119e:	4d49      	ldr	r5, [pc, #292]	; (12c4 <mulib_port_test_step+0x18c>)
    mu_port_led_set(!mu_port_led_get());
    11a0:	47b8      	blx	r7
    11a2:	2301      	movs	r3, #1
    11a4:	4058      	eors	r0, r3
    11a6:	b2c0      	uxtb	r0, r0
    11a8:	47b0      	blx	r6
    wait_ms(250);
    11aa:	20fa      	movs	r0, #250	; 0xfa
    11ac:	47a8      	blx	r5
    11ae:	3c01      	subs	r4, #1
  for (int i = 0; i < 10; i++) {
    11b0:	2c00      	cmp	r4, #0
    11b2:	d1f5      	bne.n	11a0 <mulib_port_test_step+0x68>
  mu_port_led_set(false);
    11b4:	2000      	movs	r0, #0
    11b6:	4b4e      	ldr	r3, [pc, #312]	; (12f0 <mulib_port_test_step+0x1b8>)
    11b8:	4798      	blx	r3
  port_printf("done\r\n");
    11ba:	4843      	ldr	r0, [pc, #268]	; (12c8 <mulib_port_test_step+0x190>)
    11bc:	4c3e      	ldr	r4, [pc, #248]	; (12b8 <mulib_port_test_step+0x180>)
    11be:	47a0      	blx	r4
  port_printf("waiting for button press (synchronous)...");
    11c0:	484c      	ldr	r0, [pc, #304]	; (12f4 <mulib_port_test_step+0x1bc>)
    11c2:	47a0      	blx	r4
  while (!mu_port_button_is_pressed()) {
    11c4:	4c4c      	ldr	r4, [pc, #304]	; (12f8 <mulib_port_test_step+0x1c0>)
    11c6:	47a0      	blx	r4
    11c8:	2800      	cmp	r0, #0
    11ca:	d0fc      	beq.n	11c6 <mulib_port_test_step+0x8e>
  port_printf("received button press.\r\n");
    11cc:	484b      	ldr	r0, [pc, #300]	; (12fc <mulib_port_test_step+0x1c4>)
    11ce:	4b3a      	ldr	r3, [pc, #232]	; (12b8 <mulib_port_test_step+0x180>)
    11d0:	4798      	blx	r3
    wait_ms(10);
    11d2:	4d3c      	ldr	r5, [pc, #240]	; (12c4 <mulib_port_test_step+0x18c>)
  } while (mu_port_button_is_pressed());
    11d4:	4c48      	ldr	r4, [pc, #288]	; (12f8 <mulib_port_test_step+0x1c0>)
    wait_ms(10);
    11d6:	200a      	movs	r0, #10
    11d8:	47a8      	blx	r5
  } while (mu_port_button_is_pressed());
    11da:	47a0      	blx	r4
    11dc:	2800      	cmp	r0, #0
    11de:	d1fa      	bne.n	11d6 <mulib_port_test_step+0x9e>
  s_button_pressed = false;
    11e0:	2200      	movs	r2, #0
    11e2:	4b3a      	ldr	r3, [pc, #232]	; (12cc <mulib_port_test_step+0x194>)
    11e4:	701a      	strb	r2, [r3, #0]
  mu_port_button_set_cb(button_press_cb, NULL);
    11e6:	2100      	movs	r1, #0
    11e8:	4845      	ldr	r0, [pc, #276]	; (1300 <mulib_port_test_step+0x1c8>)
    11ea:	4b46      	ldr	r3, [pc, #280]	; (1304 <mulib_port_test_step+0x1cc>)
    11ec:	4798      	blx	r3
  port_printf("waiting for button press (asynchronous)...");
    11ee:	4846      	ldr	r0, [pc, #280]	; (1308 <mulib_port_test_step+0x1d0>)
    11f0:	4b31      	ldr	r3, [pc, #196]	; (12b8 <mulib_port_test_step+0x180>)
    11f2:	4798      	blx	r3
  while (!s_button_pressed) {
    11f4:	4a35      	ldr	r2, [pc, #212]	; (12cc <mulib_port_test_step+0x194>)
    11f6:	7813      	ldrb	r3, [r2, #0]
    11f8:	2b00      	cmp	r3, #0
    11fa:	d0fc      	beq.n	11f6 <mulib_port_test_step+0xbe>
  port_printf("received button press.\r\n");
    11fc:	483f      	ldr	r0, [pc, #252]	; (12fc <mulib_port_test_step+0x1c4>)
    11fe:	4c2e      	ldr	r4, [pc, #184]	; (12b8 <mulib_port_test_step+0x180>)
    1200:	47a0      	blx	r4
  port_printf("waiting for keyboard input (synchronous)...");
    1202:	4842      	ldr	r0, [pc, #264]	; (130c <mulib_port_test_step+0x1d4>)
    1204:	47a0      	blx	r4
  while (!mu_port_serial_can_read()) {
    1206:	4c42      	ldr	r4, [pc, #264]	; (1310 <mulib_port_test_step+0x1d8>)
    1208:	47a0      	blx	r4
    120a:	2800      	cmp	r0, #0
    120c:	d0fc      	beq.n	1208 <mulib_port_test_step+0xd0>
  while (mu_port_serial_read(&c, 1) == 0) {
    120e:	4c41      	ldr	r4, [pc, #260]	; (1314 <mulib_port_test_step+0x1dc>)
    1210:	2101      	movs	r1, #1
    1212:	466b      	mov	r3, sp
    1214:	1dd8      	adds	r0, r3, #7
    1216:	47a0      	blx	r4
    1218:	2800      	cmp	r0, #0
    121a:	d0f9      	beq.n	1210 <mulib_port_test_step+0xd8>
  return c;
    121c:	466b      	mov	r3, sp
    121e:	79d9      	ldrb	r1, [r3, #7]
  port_printf("received '%c'\r\n", test_getc());
    1220:	483d      	ldr	r0, [pc, #244]	; (1318 <mulib_port_test_step+0x1e0>)
    1222:	4c25      	ldr	r4, [pc, #148]	; (12b8 <mulib_port_test_step+0x180>)
    1224:	47a0      	blx	r4
  test_flush_rx();
    1226:	4b3d      	ldr	r3, [pc, #244]	; (131c <mulib_port_test_step+0x1e4>)
    1228:	4798      	blx	r3
  s_char_available = false;
    122a:	2200      	movs	r2, #0
    122c:	4b27      	ldr	r3, [pc, #156]	; (12cc <mulib_port_test_step+0x194>)
    122e:	705a      	strb	r2, [r3, #1]
  mu_port_serial_set_read_cb(serial_read_cb, NULL);
    1230:	2100      	movs	r1, #0
    1232:	483b      	ldr	r0, [pc, #236]	; (1320 <mulib_port_test_step+0x1e8>)
    1234:	4b3b      	ldr	r3, [pc, #236]	; (1324 <mulib_port_test_step+0x1ec>)
    1236:	4798      	blx	r3
  port_printf("waiting for keyboard input (asynchronous)...");
    1238:	483b      	ldr	r0, [pc, #236]	; (1328 <mulib_port_test_step+0x1f0>)
    123a:	47a0      	blx	r4
  while (!s_char_available) {
    123c:	4a23      	ldr	r2, [pc, #140]	; (12cc <mulib_port_test_step+0x194>)
    123e:	7853      	ldrb	r3, [r2, #1]
    1240:	2b00      	cmp	r3, #0
    1242:	d0fc      	beq.n	123e <mulib_port_test_step+0x106>
  while (mu_port_serial_read(&c, 1) == 0) {
    1244:	4c33      	ldr	r4, [pc, #204]	; (1314 <mulib_port_test_step+0x1dc>)
    1246:	2101      	movs	r1, #1
    1248:	466b      	mov	r3, sp
    124a:	1dd8      	adds	r0, r3, #7
    124c:	47a0      	blx	r4
    124e:	2800      	cmp	r0, #0
    1250:	d0f9      	beq.n	1246 <mulib_port_test_step+0x10e>
  return c;
    1252:	466b      	mov	r3, sp
    1254:	79d9      	ldrb	r1, [r3, #7]
  port_printf("received '%c'\r\n", test_getc());
    1256:	4830      	ldr	r0, [pc, #192]	; (1318 <mulib_port_test_step+0x1e0>)
    1258:	4c17      	ldr	r4, [pc, #92]	; (12b8 <mulib_port_test_step+0x180>)
    125a:	47a0      	blx	r4
  test_flush_rx();
    125c:	4b2f      	ldr	r3, [pc, #188]	; (131c <mulib_port_test_step+0x1e4>)
    125e:	4798      	blx	r3
  port_printf("sleeping for 2.5 seconds...");
    1260:	4832      	ldr	r0, [pc, #200]	; (132c <mulib_port_test_step+0x1f4>)
    1262:	47a0      	blx	r4
  while (!mu_port_serial_can_write()) {
    1264:	4c32      	ldr	r4, [pc, #200]	; (1330 <mulib_port_test_step+0x1f8>)
    1266:	e000      	b.n	126a <mulib_port_test_step+0x132>
	  asm("nop");
    1268:	46c0      	nop			; (mov r8, r8)
  while (!mu_port_serial_can_write()) {
    126a:	47a0      	blx	r4
    126c:	2800      	cmp	r0, #0
    126e:	d0fb      	beq.n	1268 <mulib_port_test_step+0x130>
  mu_port_sleep_until(mu_port_time_offset(mu_port_rtc_now(),
    1270:	4b0f      	ldr	r3, [pc, #60]	; (12b0 <mulib_port_test_step+0x178>)
    1272:	4798      	blx	r3
    1274:	0004      	movs	r4, r0
    1276:	4812      	ldr	r0, [pc, #72]	; (12c0 <mulib_port_test_step+0x188>)
    1278:	4b17      	ldr	r3, [pc, #92]	; (12d8 <mulib_port_test_step+0x1a0>)
    127a:	4798      	blx	r3
    127c:	0001      	movs	r1, r0
    127e:	0020      	movs	r0, r4
    1280:	4b16      	ldr	r3, [pc, #88]	; (12dc <mulib_port_test_step+0x1a4>)
    1282:	4798      	blx	r3
    1284:	4b2b      	ldr	r3, [pc, #172]	; (1334 <mulib_port_test_step+0x1fc>)
    1286:	4798      	blx	r3
  port_printf("done.\r\n");
    1288:	482b      	ldr	r0, [pc, #172]	; (1338 <mulib_port_test_step+0x200>)
    128a:	4c0b      	ldr	r4, [pc, #44]	; (12b8 <mulib_port_test_step+0x180>)
    128c:	47a0      	blx	r4
  port_printf("sleeping until button press...");
    128e:	482b      	ldr	r0, [pc, #172]	; (133c <mulib_port_test_step+0x204>)
    1290:	47a0      	blx	r4
  while (!mu_port_serial_can_write()) {
    1292:	4c27      	ldr	r4, [pc, #156]	; (1330 <mulib_port_test_step+0x1f8>)
    1294:	e000      	b.n	1298 <mulib_port_test_step+0x160>
	  asm("nop");
    1296:	46c0      	nop			; (mov r8, r8)
  while (!mu_port_serial_can_write()) {
    1298:	47a0      	blx	r4
    129a:	2800      	cmp	r0, #0
    129c:	d0fb      	beq.n	1296 <mulib_port_test_step+0x15e>
  mu_port_sleep();
    129e:	4b28      	ldr	r3, [pc, #160]	; (1340 <mulib_port_test_step+0x208>)
    12a0:	4798      	blx	r3
  port_printf("done.\r\n");
    12a2:	4825      	ldr	r0, [pc, #148]	; (1338 <mulib_port_test_step+0x200>)
    12a4:	4c04      	ldr	r4, [pc, #16]	; (12b8 <mulib_port_test_step+0x180>)
    12a6:	47a0      	blx	r4
  port_printf("end of mu_port_test\r\n================\r\n");
    12a8:	4826      	ldr	r0, [pc, #152]	; (1344 <mulib_port_test_step+0x20c>)
    12aa:	47a0      	blx	r4
}
    12ac:	b003      	add	sp, #12
    12ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12b0:	0000146d 	.word	0x0000146d
    12b4:	000022f0 	.word	0x000022f0
    12b8:	000010d5 	.word	0x000010d5
    12bc:	0000231c 	.word	0x0000231c
    12c0:	000009c4 	.word	0x000009c4
    12c4:	00001079 	.word	0x00001079
    12c8:	00002338 	.word	0x00002338
    12cc:	200000a8 	.word	0x200000a8
    12d0:	0000106d 	.word	0x0000106d
    12d4:	00001481 	.word	0x00001481
    12d8:	00001445 	.word	0x00001445
    12dc:	00001439 	.word	0x00001439
    12e0:	0000149d 	.word	0x0000149d
    12e4:	00002340 	.word	0x00002340
    12e8:	00002368 	.word	0x00002368
    12ec:	000014e1 	.word	0x000014e1
    12f0:	000014c1 	.word	0x000014c1
    12f4:	00002388 	.word	0x00002388
    12f8:	00001521 	.word	0x00001521
    12fc:	000023b4 	.word	0x000023b4
    1300:	00001055 	.word	0x00001055
    1304:	0000155d 	.word	0x0000155d
    1308:	000023d0 	.word	0x000023d0
    130c:	000023fc 	.word	0x000023fc
    1310:	000015a9 	.word	0x000015a9
    1314:	000015c1 	.word	0x000015c1
    1318:	00002428 	.word	0x00002428
    131c:	000010b9 	.word	0x000010b9
    1320:	00001061 	.word	0x00001061
    1324:	000015dd 	.word	0x000015dd
    1328:	00002438 	.word	0x00002438
    132c:	00002468 	.word	0x00002468
    1330:	00001579 	.word	0x00001579
    1334:	000015f9 	.word	0x000015f9
    1338:	00002484 	.word	0x00002484
    133c:	0000248c 	.word	0x0000248c
    1340:	00001625 	.word	0x00001625
    1344:	000024ac 	.word	0x000024ac

00001348 <button_cb_trampoline>:
void mu_port_sleep(void) { go_to_sleep(); }

// =============================================================================
// private (local) code

void button_cb_trampoline(void) {
    1348:	b510      	push	{r4, lr}
  if (s_button_cb) {
    134a:	4b04      	ldr	r3, [pc, #16]	; (135c <button_cb_trampoline+0x14>)
    134c:	681b      	ldr	r3, [r3, #0]
    134e:	2b00      	cmp	r3, #0
    1350:	d002      	beq.n	1358 <button_cb_trampoline+0x10>
    s_button_cb(s_button_cb_arg);
    1352:	4a02      	ldr	r2, [pc, #8]	; (135c <button_cb_trampoline+0x14>)
    1354:	6850      	ldr	r0, [r2, #4]
    1356:	4798      	blx	r3
  }
}
    1358:	bd10      	pop	{r4, pc}
    135a:	46c0      	nop			; (mov r8, r8)
    135c:	200000e0 	.word	0x200000e0

00001360 <tx_cb_trampoline>:

void tx_cb_trampoline(const struct usart_async_descriptor *const io_descr) {
    1360:	b510      	push	{r4, lr}
  // arrive here when the previous call to serial_write() completes.
  s_tx_in_progress = false;
    1362:	4b05      	ldr	r3, [pc, #20]	; (1378 <tx_cb_trampoline+0x18>)
    1364:	2200      	movs	r2, #0
    1366:	721a      	strb	r2, [r3, #8]
  if (s_tx_cb) {
    1368:	68db      	ldr	r3, [r3, #12]
    136a:	2b00      	cmp	r3, #0
    136c:	d002      	beq.n	1374 <tx_cb_trampoline+0x14>
    s_tx_cb(s_tx_cb_arg);
    136e:	4a02      	ldr	r2, [pc, #8]	; (1378 <tx_cb_trampoline+0x18>)
    1370:	6910      	ldr	r0, [r2, #16]
    1372:	4798      	blx	r3
  }
}
    1374:	bd10      	pop	{r4, pc}
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	200000e0 	.word	0x200000e0

0000137c <rx_cb_trampoline>:

void rx_cb_trampoline(const struct usart_async_descriptor *const io_descr) {
    137c:	b510      	push	{r4, lr}
  if (s_rx_cb) {
    137e:	4b04      	ldr	r3, [pc, #16]	; (1390 <rx_cb_trampoline+0x14>)
    1380:	695b      	ldr	r3, [r3, #20]
    1382:	2b00      	cmp	r3, #0
    1384:	d002      	beq.n	138c <rx_cb_trampoline+0x10>
    s_rx_cb(s_rx_cb_arg);
    1386:	4a02      	ldr	r2, [pc, #8]	; (1390 <rx_cb_trampoline+0x14>)
    1388:	6990      	ldr	r0, [r2, #24]
    138a:	4798      	blx	r3
  }
}
    138c:	bd10      	pop	{r4, pc}
    138e:	46c0      	nop			; (mov r8, r8)
    1390:	200000e0 	.word	0x200000e0

00001394 <rtc_cb_trampoline>:

void rtc_cb_trampoline(struct calendar_dev *const dev) {
    1394:	b510      	push	{r4, lr}
  // Arrive here when the RTC count register matches the RTC compare register.
  // Even if the user hasn't registered a callback, this will wake the processor
  // from sleep...
  if (s_rtc_cb) {
    1396:	4b04      	ldr	r3, [pc, #16]	; (13a8 <rtc_cb_trampoline+0x14>)
    1398:	69db      	ldr	r3, [r3, #28]
    139a:	2b00      	cmp	r3, #0
    139c:	d002      	beq.n	13a4 <rtc_cb_trampoline+0x10>
    s_rtc_cb(s_rtc_cb_arg);
    139e:	4a02      	ldr	r2, [pc, #8]	; (13a8 <rtc_cb_trampoline+0x14>)
    13a0:	6a10      	ldr	r0, [r2, #32]
    13a2:	4798      	blx	r3
  }
}
    13a4:	bd10      	pop	{r4, pc}
    13a6:	46c0      	nop			; (mov r8, r8)
    13a8:	200000e0 	.word	0x200000e0

000013ac <mu_port_init>:
void mu_port_init(void) {
    13ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  s_button_cb = NULL;
    13ae:	4c15      	ldr	r4, [pc, #84]	; (1404 <mu_port_init+0x58>)
    13b0:	2500      	movs	r5, #0
    13b2:	6025      	str	r5, [r4, #0]
  s_button_cb_arg = NULL;
    13b4:	6065      	str	r5, [r4, #4]
  ext_irq_register(PIN_PA15, button_cb_trampoline);
    13b6:	4914      	ldr	r1, [pc, #80]	; (1408 <mu_port_init+0x5c>)
    13b8:	200f      	movs	r0, #15
    13ba:	4b14      	ldr	r3, [pc, #80]	; (140c <mu_port_init+0x60>)
    13bc:	4798      	blx	r3
  usart_async_get_io_descriptor(&USART_0, &s_usart_descriptor);
    13be:	0021      	movs	r1, r4
    13c0:	3124      	adds	r1, #36	; 0x24
    13c2:	4e13      	ldr	r6, [pc, #76]	; (1410 <mu_port_init+0x64>)
    13c4:	0030      	movs	r0, r6
    13c6:	4b13      	ldr	r3, [pc, #76]	; (1414 <mu_port_init+0x68>)
    13c8:	4798      	blx	r3
  s_tx_cb = NULL;
    13ca:	60e5      	str	r5, [r4, #12]
  s_tx_cb_arg = NULL;
    13cc:	6125      	str	r5, [r4, #16]
  s_tx_in_progress = false;
    13ce:	7225      	strb	r5, [r4, #8]
  usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, tx_cb_trampoline);
    13d0:	4a11      	ldr	r2, [pc, #68]	; (1418 <mu_port_init+0x6c>)
    13d2:	2101      	movs	r1, #1
    13d4:	0030      	movs	r0, r6
    13d6:	4f11      	ldr	r7, [pc, #68]	; (141c <mu_port_init+0x70>)
    13d8:	47b8      	blx	r7
  s_rx_cb = NULL;
    13da:	6165      	str	r5, [r4, #20]
  s_rx_cb_arg = NULL;
    13dc:	61a5      	str	r5, [r4, #24]
  usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, rx_cb_trampoline);
    13de:	4a10      	ldr	r2, [pc, #64]	; (1420 <mu_port_init+0x74>)
    13e0:	2100      	movs	r1, #0
    13e2:	0030      	movs	r0, r6
    13e4:	47b8      	blx	r7
  usart_async_enable(&USART_0);
    13e6:	0030      	movs	r0, r6
    13e8:	4b0e      	ldr	r3, [pc, #56]	; (1424 <mu_port_init+0x78>)
    13ea:	4798      	blx	r3
  s_rtc_cb = NULL;
    13ec:	61e5      	str	r5, [r4, #28]
  s_rtc_cb_arg = NULL;
    13ee:	6225      	str	r5, [r4, #32]
  calendar_enable(&CALENDAR_0); // start RTC
    13f0:	4c0d      	ldr	r4, [pc, #52]	; (1428 <mu_port_init+0x7c>)
    13f2:	0020      	movs	r0, r4
    13f4:	4b0d      	ldr	r3, [pc, #52]	; (142c <mu_port_init+0x80>)
    13f6:	4798      	blx	r3
  _calendar_register_callback(&CALENDAR_0.device, rtc_cb_trampoline);
    13f8:	490d      	ldr	r1, [pc, #52]	; (1430 <mu_port_init+0x84>)
    13fa:	0020      	movs	r0, r4
    13fc:	4b0d      	ldr	r3, [pc, #52]	; (1434 <mu_port_init+0x88>)
    13fe:	4798      	blx	r3
}
    1400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1402:	46c0      	nop			; (mov r8, r8)
    1404:	200000e0 	.word	0x200000e0
    1408:	00001349 	.word	0x00001349
    140c:	00000479 	.word	0x00000479
    1410:	2000012c 	.word	0x2000012c
    1414:	000007d1 	.word	0x000007d1
    1418:	00001361 	.word	0x00001361
    141c:	000007fd 	.word	0x000007fd
    1420:	0000137d 	.word	0x0000137d
    1424:	000007a5 	.word	0x000007a5
    1428:	20000110 	.word	0x20000110
    142c:	000003f1 	.word	0x000003f1
    1430:	00001395 	.word	0x00001395
    1434:	00000c49 	.word	0x00000c49

00001438 <mu_port_time_offset>:
  return t + dt;
    1438:	1808      	adds	r0, r1, r0
}
    143a:	4770      	bx	lr

0000143c <mu_port_time_precedes>:
  return t1 - t2;
    143c:	1a40      	subs	r0, r0, r1
  return mu_port_time_difference(t1, t2) > MAX_DURATION;
    143e:	0fc0      	lsrs	r0, r0, #31
}
    1440:	4770      	bx	lr
	...

00001444 <mu_port_time_ms_to_duration>:
mu_port_time_dt mu_port_time_ms_to_duration(int ms) {
    1444:	b510      	push	{r4, lr}
  return quo_rounded(ms * CONF_GCLK_RTC_FREQUENCY, 1000);
    1446:	03c0      	lsls	r0, r0, #15
  //   (y < 0) is false (zero) if x is non-negative
  //   (x < 0) ^ (y < 0) is true if x and y have opposite signs
  //   x/y would be the quotient, but it is truncated towards zero.  To round:
  //   (x + y/2)/y is the rounded quotient when x and y have the same sign
  //   (x - y/2)/y is the rounded quotient when x and y have opposite signs
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
    1448:	d506      	bpl.n	1458 <mu_port_time_ms_to_duration+0x14>
    144a:	38f5      	subs	r0, #245	; 0xf5
    144c:	38ff      	subs	r0, #255	; 0xff
    144e:	21fa      	movs	r1, #250	; 0xfa
    1450:	0089      	lsls	r1, r1, #2
    1452:	4b05      	ldr	r3, [pc, #20]	; (1468 <mu_port_time_ms_to_duration+0x24>)
    1454:	4798      	blx	r3
}
    1456:	bd10      	pop	{r4, pc}
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
    1458:	30f5      	adds	r0, #245	; 0xf5
    145a:	30ff      	adds	r0, #255	; 0xff
    145c:	21fa      	movs	r1, #250	; 0xfa
    145e:	0089      	lsls	r1, r1, #2
    1460:	4b01      	ldr	r3, [pc, #4]	; (1468 <mu_port_time_ms_to_duration+0x24>)
    1462:	4798      	blx	r3
    1464:	e7f7      	b.n	1456 <mu_port_time_ms_to_duration+0x12>
    1466:	46c0      	nop			; (mov r8, r8)
    1468:	00001749 	.word	0x00001749

0000146c <mu_port_rtc_now>:
  return hri_rtcmode0_read_COUNT_COUNT_bf(CALENDAR_0.device.hw);
    146c:	4b03      	ldr	r3, [pc, #12]	; (147c <mu_port_rtc_now+0x10>)
    146e:	681a      	ldr	r2, [r3, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1470:	7a93      	ldrb	r3, [r2, #10]
    1472:	09db      	lsrs	r3, r3, #7
    1474:	d1fc      	bne.n	1470 <mu_port_rtc_now+0x4>
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
    1476:	6910      	ldr	r0, [r2, #16]
}
    1478:	4770      	bx	lr
    147a:	46c0      	nop			; (mov r8, r8)
    147c:	20000110 	.word	0x20000110

00001480 <mu_port_rtc_set_cb>:
  if (fn) {
    1480:	2800      	cmp	r0, #0
    1482:	d003      	beq.n	148c <mu_port_rtc_set_cb+0xc>
    s_rtc_cb = fn;
    1484:	4b04      	ldr	r3, [pc, #16]	; (1498 <mu_port_rtc_set_cb+0x18>)
    1486:	61d8      	str	r0, [r3, #28]
    s_rtc_cb_arg = arg;
    1488:	6219      	str	r1, [r3, #32]
}
    148a:	4770      	bx	lr
    s_rtc_cb = NULL;
    148c:	4b02      	ldr	r3, [pc, #8]	; (1498 <mu_port_rtc_set_cb+0x18>)
    148e:	2200      	movs	r2, #0
    1490:	61da      	str	r2, [r3, #28]
    s_rtc_cb_arg = NULL;
    1492:	621a      	str	r2, [r3, #32]
}
    1494:	e7f9      	b.n	148a <mu_port_rtc_set_cb+0xa>
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	200000e0 	.word	0x200000e0

0000149c <mu_port_rtc_alarm_at>:
void mu_port_rtc_alarm_at(mu_port_time_t at) {
    149c:	b510      	push	{r4, lr}
    149e:	0001      	movs	r1, r0
  _calendar_set_comp(&CALENDAR_0.device, at);
    14a0:	4804      	ldr	r0, [pc, #16]	; (14b4 <mu_port_rtc_alarm_at+0x18>)
    14a2:	4b05      	ldr	r3, [pc, #20]	; (14b8 <mu_port_rtc_alarm_at+0x1c>)
    14a4:	4798      	blx	r3
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    14a6:	4a05      	ldr	r2, [pc, #20]	; (14bc <mu_port_rtc_alarm_at+0x20>)
    14a8:	8853      	ldrh	r3, [r2, #2]
    14aa:	2180      	movs	r1, #128	; 0x80
    14ac:	01c9      	lsls	r1, r1, #7
    14ae:	430b      	orrs	r3, r1
    14b0:	8053      	strh	r3, [r2, #2]
}
    14b2:	bd10      	pop	{r4, pc}
    14b4:	20000110 	.word	0x20000110
    14b8:	00000d65 	.word	0x00000d65
    14bc:	40001400 	.word	0x40001400

000014c0 <mu_port_led_set>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    14c0:	2800      	cmp	r0, #0
    14c2:	d006      	beq.n	14d2 <mu_port_led_set+0x12>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    14c4:	2180      	movs	r1, #128	; 0x80
    14c6:	05c9      	lsls	r1, r1, #23
    14c8:	2394      	movs	r3, #148	; 0x94
    14ca:	22c0      	movs	r2, #192	; 0xc0
    14cc:	05d2      	lsls	r2, r2, #23
    14ce:	50d1      	str	r1, [r2, r3]
void mu_port_led_set(bool on) { gpio_set_pin_level(USER_LED_AL, !on); }
    14d0:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    14d2:	2180      	movs	r1, #128	; 0x80
    14d4:	05c9      	lsls	r1, r1, #23
    14d6:	2398      	movs	r3, #152	; 0x98
    14d8:	22c0      	movs	r2, #192	; 0xc0
    14da:	05d2      	lsls	r2, r2, #23
    14dc:	50d1      	str	r1, [r2, r3]
    14de:	e7f7      	b.n	14d0 <mu_port_led_set+0x10>

000014e0 <mu_port_led_get>:
bool mu_port_led_get(void) { return !gpio_get_pin_level(USER_LED_AL); }
    14e0:	b510      	push	{r4, lr}
    14e2:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    14e4:	a801      	add	r0, sp, #4
    14e6:	4b0b      	ldr	r3, [pc, #44]	; (1514 <mu_port_led_get+0x34>)
    14e8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    14ea:	22c0      	movs	r2, #192	; 0xc0
    14ec:	05d2      	lsls	r2, r2, #23
    14ee:	2380      	movs	r3, #128	; 0x80
    14f0:	58d4      	ldr	r4, [r2, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    14f2:	3320      	adds	r3, #32
    14f4:	4908      	ldr	r1, [pc, #32]	; (1518 <mu_port_led_get+0x38>)
    14f6:	58cb      	ldr	r3, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    14f8:	2190      	movs	r1, #144	; 0x90
    14fa:	5850      	ldr	r0, [r2, r1]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    14fc:	4058      	eors	r0, r3
    14fe:	4004      	ands	r4, r0
    1500:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    1502:	a801      	add	r0, sp, #4
    1504:	4b05      	ldr	r3, [pc, #20]	; (151c <mu_port_led_get+0x3c>)
    1506:	4798      	blx	r3
    1508:	0fa4      	lsrs	r4, r4, #30
    150a:	2001      	movs	r0, #1
    150c:	4044      	eors	r4, r0
    150e:	4020      	ands	r0, r4
    1510:	b002      	add	sp, #8
    1512:	bd10      	pop	{r4, pc}
    1514:	0000038d 	.word	0x0000038d
    1518:	41004400 	.word	0x41004400
    151c:	0000039b 	.word	0x0000039b

00001520 <mu_port_button_is_pressed>:
bool mu_port_button_is_pressed(void) {
    1520:	b510      	push	{r4, lr}
    1522:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
    1524:	a801      	add	r0, sp, #4
    1526:	4b0a      	ldr	r3, [pc, #40]	; (1550 <mu_port_button_is_pressed+0x30>)
    1528:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    152a:	22c0      	movs	r2, #192	; 0xc0
    152c:	05d2      	lsls	r2, r2, #23
    152e:	6814      	ldr	r4, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1530:	4b08      	ldr	r3, [pc, #32]	; (1554 <mu_port_button_is_pressed+0x34>)
    1532:	6a1b      	ldr	r3, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1534:	6910      	ldr	r0, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1536:	4058      	eors	r0, r3
    1538:	4004      	ands	r4, r0
    153a:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    153c:	a801      	add	r0, sp, #4
    153e:	4b06      	ldr	r3, [pc, #24]	; (1558 <mu_port_button_is_pressed+0x38>)
    1540:	4798      	blx	r3
  return !gpio_get_pin_level(USER_BUTTON_AL);
    1542:	0be4      	lsrs	r4, r4, #15
    1544:	2001      	movs	r0, #1
    1546:	4044      	eors	r4, r0
    1548:	4020      	ands	r0, r4
}
    154a:	b002      	add	sp, #8
    154c:	bd10      	pop	{r4, pc}
    154e:	46c0      	nop			; (mov r8, r8)
    1550:	0000038d 	.word	0x0000038d
    1554:	41004400 	.word	0x41004400
    1558:	0000039b 	.word	0x0000039b

0000155c <mu_port_button_set_cb>:
  if (fn) {
    155c:	2800      	cmp	r0, #0
    155e:	d003      	beq.n	1568 <mu_port_button_set_cb+0xc>
    s_button_cb = fn;
    1560:	4b04      	ldr	r3, [pc, #16]	; (1574 <mu_port_button_set_cb+0x18>)
    1562:	6018      	str	r0, [r3, #0]
    s_button_cb_arg = arg;
    1564:	6059      	str	r1, [r3, #4]
}
    1566:	4770      	bx	lr
    s_button_cb = NULL;
    1568:	4b02      	ldr	r3, [pc, #8]	; (1574 <mu_port_button_set_cb+0x18>)
    156a:	2200      	movs	r2, #0
    156c:	601a      	str	r2, [r3, #0]
    s_button_cb_arg = NULL;
    156e:	605a      	str	r2, [r3, #4]
}
    1570:	e7f9      	b.n	1566 <mu_port_button_set_cb+0xa>
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	200000e0 	.word	0x200000e0

00001578 <mu_port_serial_can_write>:
  return !s_tx_in_progress;
    1578:	4b02      	ldr	r3, [pc, #8]	; (1584 <mu_port_serial_can_write+0xc>)
    157a:	7a18      	ldrb	r0, [r3, #8]
    157c:	2301      	movs	r3, #1
    157e:	4058      	eors	r0, r3
}
    1580:	4770      	bx	lr
    1582:	46c0      	nop			; (mov r8, r8)
    1584:	200000e0 	.word	0x200000e0

00001588 <mu_port_serial_write>:
int mu_port_serial_write(const uint8_t *const buf, int n_bytes) {
    1588:	b510      	push	{r4, lr}
    158a:	0004      	movs	r4, r0
  s_tx_in_progress = true;
    158c:	4b04      	ldr	r3, [pc, #16]	; (15a0 <mu_port_serial_write+0x18>)
    158e:	2201      	movs	r2, #1
    1590:	721a      	strb	r2, [r3, #8]
  return io_write(s_usart_descriptor, buf, n_bytes);
    1592:	b28a      	uxth	r2, r1
    1594:	6a58      	ldr	r0, [r3, #36]	; 0x24
    1596:	0021      	movs	r1, r4
    1598:	4b02      	ldr	r3, [pc, #8]	; (15a4 <mu_port_serial_write+0x1c>)
    159a:	4798      	blx	r3
}
    159c:	bd10      	pop	{r4, pc}
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	200000e0 	.word	0x200000e0
    15a4:	000004c1 	.word	0x000004c1

000015a8 <mu_port_serial_can_read>:
bool mu_port_serial_can_read(void) {
    15a8:	b510      	push	{r4, lr}
  return usart_async_is_rx_not_empty(&USART_0);
    15aa:	4803      	ldr	r0, [pc, #12]	; (15b8 <mu_port_serial_can_read+0x10>)
    15ac:	4b03      	ldr	r3, [pc, #12]	; (15bc <mu_port_serial_can_read+0x14>)
    15ae:	4798      	blx	r3
    15b0:	1e43      	subs	r3, r0, #1
    15b2:	4198      	sbcs	r0, r3
    15b4:	b2c0      	uxtb	r0, r0
}
    15b6:	bd10      	pop	{r4, pc}
    15b8:	2000012c 	.word	0x2000012c
    15bc:	00000875 	.word	0x00000875

000015c0 <mu_port_serial_read>:
int mu_port_serial_read(uint8_t *const buf, int n_bytes) {
    15c0:	b510      	push	{r4, lr}
    15c2:	0003      	movs	r3, r0
  return io_read(s_usart_descriptor, buf, n_bytes);
    15c4:	b28a      	uxth	r2, r1
    15c6:	4903      	ldr	r1, [pc, #12]	; (15d4 <mu_port_serial_read+0x14>)
    15c8:	6a48      	ldr	r0, [r1, #36]	; 0x24
    15ca:	0019      	movs	r1, r3
    15cc:	4b02      	ldr	r3, [pc, #8]	; (15d8 <mu_port_serial_read+0x18>)
    15ce:	4798      	blx	r3
}
    15d0:	bd10      	pop	{r4, pc}
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	200000e0 	.word	0x200000e0
    15d8:	000004f5 	.word	0x000004f5

000015dc <mu_port_serial_set_read_cb>:
  if (fn) {
    15dc:	2800      	cmp	r0, #0
    15de:	d003      	beq.n	15e8 <mu_port_serial_set_read_cb+0xc>
    s_rx_cb = fn;
    15e0:	4b04      	ldr	r3, [pc, #16]	; (15f4 <mu_port_serial_set_read_cb+0x18>)
    15e2:	6158      	str	r0, [r3, #20]
    s_rx_cb_arg = arg;
    15e4:	6199      	str	r1, [r3, #24]
}
    15e6:	4770      	bx	lr
    s_rx_cb = NULL;
    15e8:	4b02      	ldr	r3, [pc, #8]	; (15f4 <mu_port_serial_set_read_cb+0x18>)
    15ea:	2200      	movs	r2, #0
    15ec:	615a      	str	r2, [r3, #20]
    s_rx_cb_arg = NULL;
    15ee:	619a      	str	r2, [r3, #24]
}
    15f0:	e7f9      	b.n	15e6 <mu_port_serial_set_read_cb+0xa>
    15f2:	46c0      	nop			; (mov r8, r8)
    15f4:	200000e0 	.word	0x200000e0

000015f8 <mu_port_sleep_until>:
void mu_port_sleep_until(mu_port_time_t then) {
    15f8:	b510      	push	{r4, lr}
    15fa:	0004      	movs	r4, r0
  mu_port_time_t now = mu_port_rtc_now();
    15fc:	4b06      	ldr	r3, [pc, #24]	; (1618 <mu_port_sleep_until+0x20>)
    15fe:	4798      	blx	r3
  return t1 - t2;
    1600:	1a20      	subs	r0, r4, r0
  if (mu_port_time_difference(then, now) > MIN_SLEEP_DURATION) {
    1602:	2820      	cmp	r0, #32
    1604:	dc00      	bgt.n	1608 <mu_port_sleep_until+0x10>
}
    1606:	bd10      	pop	{r4, pc}
    mu_port_rtc_alarm_at(then);
    1608:	0020      	movs	r0, r4
    160a:	4b04      	ldr	r3, [pc, #16]	; (161c <mu_port_sleep_until+0x24>)
    160c:	4798      	blx	r3
  sleep(3); // in hal_sleep
    160e:	2003      	movs	r0, #3
    1610:	4b03      	ldr	r3, [pc, #12]	; (1620 <mu_port_sleep_until+0x28>)
    1612:	4798      	blx	r3
}
    1614:	e7f7      	b.n	1606 <mu_port_sleep_until+0xe>
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	0000146d 	.word	0x0000146d
    161c:	0000149d 	.word	0x0000149d
    1620:	00000529 	.word	0x00000529

00001624 <mu_port_sleep>:
void mu_port_sleep(void) { go_to_sleep(); }
    1624:	b510      	push	{r4, lr}
  sleep(3); // in hal_sleep
    1626:	2003      	movs	r0, #3
    1628:	4b01      	ldr	r3, [pc, #4]	; (1630 <mu_port_sleep+0xc>)
    162a:	4798      	blx	r3
void mu_port_sleep(void) { go_to_sleep(); }
    162c:	bd10      	pop	{r4, pc}
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	00000529 	.word	0x00000529

00001634 <__udivsi3>:
    1634:	2200      	movs	r2, #0
    1636:	0843      	lsrs	r3, r0, #1
    1638:	428b      	cmp	r3, r1
    163a:	d374      	bcc.n	1726 <__udivsi3+0xf2>
    163c:	0903      	lsrs	r3, r0, #4
    163e:	428b      	cmp	r3, r1
    1640:	d35f      	bcc.n	1702 <__udivsi3+0xce>
    1642:	0a03      	lsrs	r3, r0, #8
    1644:	428b      	cmp	r3, r1
    1646:	d344      	bcc.n	16d2 <__udivsi3+0x9e>
    1648:	0b03      	lsrs	r3, r0, #12
    164a:	428b      	cmp	r3, r1
    164c:	d328      	bcc.n	16a0 <__udivsi3+0x6c>
    164e:	0c03      	lsrs	r3, r0, #16
    1650:	428b      	cmp	r3, r1
    1652:	d30d      	bcc.n	1670 <__udivsi3+0x3c>
    1654:	22ff      	movs	r2, #255	; 0xff
    1656:	0209      	lsls	r1, r1, #8
    1658:	ba12      	rev	r2, r2
    165a:	0c03      	lsrs	r3, r0, #16
    165c:	428b      	cmp	r3, r1
    165e:	d302      	bcc.n	1666 <__udivsi3+0x32>
    1660:	1212      	asrs	r2, r2, #8
    1662:	0209      	lsls	r1, r1, #8
    1664:	d065      	beq.n	1732 <__udivsi3+0xfe>
    1666:	0b03      	lsrs	r3, r0, #12
    1668:	428b      	cmp	r3, r1
    166a:	d319      	bcc.n	16a0 <__udivsi3+0x6c>
    166c:	e000      	b.n	1670 <__udivsi3+0x3c>
    166e:	0a09      	lsrs	r1, r1, #8
    1670:	0bc3      	lsrs	r3, r0, #15
    1672:	428b      	cmp	r3, r1
    1674:	d301      	bcc.n	167a <__udivsi3+0x46>
    1676:	03cb      	lsls	r3, r1, #15
    1678:	1ac0      	subs	r0, r0, r3
    167a:	4152      	adcs	r2, r2
    167c:	0b83      	lsrs	r3, r0, #14
    167e:	428b      	cmp	r3, r1
    1680:	d301      	bcc.n	1686 <__udivsi3+0x52>
    1682:	038b      	lsls	r3, r1, #14
    1684:	1ac0      	subs	r0, r0, r3
    1686:	4152      	adcs	r2, r2
    1688:	0b43      	lsrs	r3, r0, #13
    168a:	428b      	cmp	r3, r1
    168c:	d301      	bcc.n	1692 <__udivsi3+0x5e>
    168e:	034b      	lsls	r3, r1, #13
    1690:	1ac0      	subs	r0, r0, r3
    1692:	4152      	adcs	r2, r2
    1694:	0b03      	lsrs	r3, r0, #12
    1696:	428b      	cmp	r3, r1
    1698:	d301      	bcc.n	169e <__udivsi3+0x6a>
    169a:	030b      	lsls	r3, r1, #12
    169c:	1ac0      	subs	r0, r0, r3
    169e:	4152      	adcs	r2, r2
    16a0:	0ac3      	lsrs	r3, r0, #11
    16a2:	428b      	cmp	r3, r1
    16a4:	d301      	bcc.n	16aa <__udivsi3+0x76>
    16a6:	02cb      	lsls	r3, r1, #11
    16a8:	1ac0      	subs	r0, r0, r3
    16aa:	4152      	adcs	r2, r2
    16ac:	0a83      	lsrs	r3, r0, #10
    16ae:	428b      	cmp	r3, r1
    16b0:	d301      	bcc.n	16b6 <__udivsi3+0x82>
    16b2:	028b      	lsls	r3, r1, #10
    16b4:	1ac0      	subs	r0, r0, r3
    16b6:	4152      	adcs	r2, r2
    16b8:	0a43      	lsrs	r3, r0, #9
    16ba:	428b      	cmp	r3, r1
    16bc:	d301      	bcc.n	16c2 <__udivsi3+0x8e>
    16be:	024b      	lsls	r3, r1, #9
    16c0:	1ac0      	subs	r0, r0, r3
    16c2:	4152      	adcs	r2, r2
    16c4:	0a03      	lsrs	r3, r0, #8
    16c6:	428b      	cmp	r3, r1
    16c8:	d301      	bcc.n	16ce <__udivsi3+0x9a>
    16ca:	020b      	lsls	r3, r1, #8
    16cc:	1ac0      	subs	r0, r0, r3
    16ce:	4152      	adcs	r2, r2
    16d0:	d2cd      	bcs.n	166e <__udivsi3+0x3a>
    16d2:	09c3      	lsrs	r3, r0, #7
    16d4:	428b      	cmp	r3, r1
    16d6:	d301      	bcc.n	16dc <__udivsi3+0xa8>
    16d8:	01cb      	lsls	r3, r1, #7
    16da:	1ac0      	subs	r0, r0, r3
    16dc:	4152      	adcs	r2, r2
    16de:	0983      	lsrs	r3, r0, #6
    16e0:	428b      	cmp	r3, r1
    16e2:	d301      	bcc.n	16e8 <__udivsi3+0xb4>
    16e4:	018b      	lsls	r3, r1, #6
    16e6:	1ac0      	subs	r0, r0, r3
    16e8:	4152      	adcs	r2, r2
    16ea:	0943      	lsrs	r3, r0, #5
    16ec:	428b      	cmp	r3, r1
    16ee:	d301      	bcc.n	16f4 <__udivsi3+0xc0>
    16f0:	014b      	lsls	r3, r1, #5
    16f2:	1ac0      	subs	r0, r0, r3
    16f4:	4152      	adcs	r2, r2
    16f6:	0903      	lsrs	r3, r0, #4
    16f8:	428b      	cmp	r3, r1
    16fa:	d301      	bcc.n	1700 <__udivsi3+0xcc>
    16fc:	010b      	lsls	r3, r1, #4
    16fe:	1ac0      	subs	r0, r0, r3
    1700:	4152      	adcs	r2, r2
    1702:	08c3      	lsrs	r3, r0, #3
    1704:	428b      	cmp	r3, r1
    1706:	d301      	bcc.n	170c <__udivsi3+0xd8>
    1708:	00cb      	lsls	r3, r1, #3
    170a:	1ac0      	subs	r0, r0, r3
    170c:	4152      	adcs	r2, r2
    170e:	0883      	lsrs	r3, r0, #2
    1710:	428b      	cmp	r3, r1
    1712:	d301      	bcc.n	1718 <__udivsi3+0xe4>
    1714:	008b      	lsls	r3, r1, #2
    1716:	1ac0      	subs	r0, r0, r3
    1718:	4152      	adcs	r2, r2
    171a:	0843      	lsrs	r3, r0, #1
    171c:	428b      	cmp	r3, r1
    171e:	d301      	bcc.n	1724 <__udivsi3+0xf0>
    1720:	004b      	lsls	r3, r1, #1
    1722:	1ac0      	subs	r0, r0, r3
    1724:	4152      	adcs	r2, r2
    1726:	1a41      	subs	r1, r0, r1
    1728:	d200      	bcs.n	172c <__udivsi3+0xf8>
    172a:	4601      	mov	r1, r0
    172c:	4152      	adcs	r2, r2
    172e:	4610      	mov	r0, r2
    1730:	4770      	bx	lr
    1732:	e7ff      	b.n	1734 <__udivsi3+0x100>
    1734:	b501      	push	{r0, lr}
    1736:	2000      	movs	r0, #0
    1738:	f000 f8f0 	bl	191c <__aeabi_idiv0>
    173c:	bd02      	pop	{r1, pc}
    173e:	46c0      	nop			; (mov r8, r8)

00001740 <__aeabi_uidivmod>:
    1740:	2900      	cmp	r1, #0
    1742:	d0f7      	beq.n	1734 <__udivsi3+0x100>
    1744:	e776      	b.n	1634 <__udivsi3>
    1746:	4770      	bx	lr

00001748 <__divsi3>:
    1748:	4603      	mov	r3, r0
    174a:	430b      	orrs	r3, r1
    174c:	d47f      	bmi.n	184e <__divsi3+0x106>
    174e:	2200      	movs	r2, #0
    1750:	0843      	lsrs	r3, r0, #1
    1752:	428b      	cmp	r3, r1
    1754:	d374      	bcc.n	1840 <__divsi3+0xf8>
    1756:	0903      	lsrs	r3, r0, #4
    1758:	428b      	cmp	r3, r1
    175a:	d35f      	bcc.n	181c <__divsi3+0xd4>
    175c:	0a03      	lsrs	r3, r0, #8
    175e:	428b      	cmp	r3, r1
    1760:	d344      	bcc.n	17ec <__divsi3+0xa4>
    1762:	0b03      	lsrs	r3, r0, #12
    1764:	428b      	cmp	r3, r1
    1766:	d328      	bcc.n	17ba <__divsi3+0x72>
    1768:	0c03      	lsrs	r3, r0, #16
    176a:	428b      	cmp	r3, r1
    176c:	d30d      	bcc.n	178a <__divsi3+0x42>
    176e:	22ff      	movs	r2, #255	; 0xff
    1770:	0209      	lsls	r1, r1, #8
    1772:	ba12      	rev	r2, r2
    1774:	0c03      	lsrs	r3, r0, #16
    1776:	428b      	cmp	r3, r1
    1778:	d302      	bcc.n	1780 <__divsi3+0x38>
    177a:	1212      	asrs	r2, r2, #8
    177c:	0209      	lsls	r1, r1, #8
    177e:	d065      	beq.n	184c <__divsi3+0x104>
    1780:	0b03      	lsrs	r3, r0, #12
    1782:	428b      	cmp	r3, r1
    1784:	d319      	bcc.n	17ba <__divsi3+0x72>
    1786:	e000      	b.n	178a <__divsi3+0x42>
    1788:	0a09      	lsrs	r1, r1, #8
    178a:	0bc3      	lsrs	r3, r0, #15
    178c:	428b      	cmp	r3, r1
    178e:	d301      	bcc.n	1794 <__divsi3+0x4c>
    1790:	03cb      	lsls	r3, r1, #15
    1792:	1ac0      	subs	r0, r0, r3
    1794:	4152      	adcs	r2, r2
    1796:	0b83      	lsrs	r3, r0, #14
    1798:	428b      	cmp	r3, r1
    179a:	d301      	bcc.n	17a0 <__divsi3+0x58>
    179c:	038b      	lsls	r3, r1, #14
    179e:	1ac0      	subs	r0, r0, r3
    17a0:	4152      	adcs	r2, r2
    17a2:	0b43      	lsrs	r3, r0, #13
    17a4:	428b      	cmp	r3, r1
    17a6:	d301      	bcc.n	17ac <__divsi3+0x64>
    17a8:	034b      	lsls	r3, r1, #13
    17aa:	1ac0      	subs	r0, r0, r3
    17ac:	4152      	adcs	r2, r2
    17ae:	0b03      	lsrs	r3, r0, #12
    17b0:	428b      	cmp	r3, r1
    17b2:	d301      	bcc.n	17b8 <__divsi3+0x70>
    17b4:	030b      	lsls	r3, r1, #12
    17b6:	1ac0      	subs	r0, r0, r3
    17b8:	4152      	adcs	r2, r2
    17ba:	0ac3      	lsrs	r3, r0, #11
    17bc:	428b      	cmp	r3, r1
    17be:	d301      	bcc.n	17c4 <__divsi3+0x7c>
    17c0:	02cb      	lsls	r3, r1, #11
    17c2:	1ac0      	subs	r0, r0, r3
    17c4:	4152      	adcs	r2, r2
    17c6:	0a83      	lsrs	r3, r0, #10
    17c8:	428b      	cmp	r3, r1
    17ca:	d301      	bcc.n	17d0 <__divsi3+0x88>
    17cc:	028b      	lsls	r3, r1, #10
    17ce:	1ac0      	subs	r0, r0, r3
    17d0:	4152      	adcs	r2, r2
    17d2:	0a43      	lsrs	r3, r0, #9
    17d4:	428b      	cmp	r3, r1
    17d6:	d301      	bcc.n	17dc <__divsi3+0x94>
    17d8:	024b      	lsls	r3, r1, #9
    17da:	1ac0      	subs	r0, r0, r3
    17dc:	4152      	adcs	r2, r2
    17de:	0a03      	lsrs	r3, r0, #8
    17e0:	428b      	cmp	r3, r1
    17e2:	d301      	bcc.n	17e8 <__divsi3+0xa0>
    17e4:	020b      	lsls	r3, r1, #8
    17e6:	1ac0      	subs	r0, r0, r3
    17e8:	4152      	adcs	r2, r2
    17ea:	d2cd      	bcs.n	1788 <__divsi3+0x40>
    17ec:	09c3      	lsrs	r3, r0, #7
    17ee:	428b      	cmp	r3, r1
    17f0:	d301      	bcc.n	17f6 <__divsi3+0xae>
    17f2:	01cb      	lsls	r3, r1, #7
    17f4:	1ac0      	subs	r0, r0, r3
    17f6:	4152      	adcs	r2, r2
    17f8:	0983      	lsrs	r3, r0, #6
    17fa:	428b      	cmp	r3, r1
    17fc:	d301      	bcc.n	1802 <__divsi3+0xba>
    17fe:	018b      	lsls	r3, r1, #6
    1800:	1ac0      	subs	r0, r0, r3
    1802:	4152      	adcs	r2, r2
    1804:	0943      	lsrs	r3, r0, #5
    1806:	428b      	cmp	r3, r1
    1808:	d301      	bcc.n	180e <__divsi3+0xc6>
    180a:	014b      	lsls	r3, r1, #5
    180c:	1ac0      	subs	r0, r0, r3
    180e:	4152      	adcs	r2, r2
    1810:	0903      	lsrs	r3, r0, #4
    1812:	428b      	cmp	r3, r1
    1814:	d301      	bcc.n	181a <__divsi3+0xd2>
    1816:	010b      	lsls	r3, r1, #4
    1818:	1ac0      	subs	r0, r0, r3
    181a:	4152      	adcs	r2, r2
    181c:	08c3      	lsrs	r3, r0, #3
    181e:	428b      	cmp	r3, r1
    1820:	d301      	bcc.n	1826 <__divsi3+0xde>
    1822:	00cb      	lsls	r3, r1, #3
    1824:	1ac0      	subs	r0, r0, r3
    1826:	4152      	adcs	r2, r2
    1828:	0883      	lsrs	r3, r0, #2
    182a:	428b      	cmp	r3, r1
    182c:	d301      	bcc.n	1832 <__divsi3+0xea>
    182e:	008b      	lsls	r3, r1, #2
    1830:	1ac0      	subs	r0, r0, r3
    1832:	4152      	adcs	r2, r2
    1834:	0843      	lsrs	r3, r0, #1
    1836:	428b      	cmp	r3, r1
    1838:	d301      	bcc.n	183e <__divsi3+0xf6>
    183a:	004b      	lsls	r3, r1, #1
    183c:	1ac0      	subs	r0, r0, r3
    183e:	4152      	adcs	r2, r2
    1840:	1a41      	subs	r1, r0, r1
    1842:	d200      	bcs.n	1846 <__divsi3+0xfe>
    1844:	4601      	mov	r1, r0
    1846:	4152      	adcs	r2, r2
    1848:	4610      	mov	r0, r2
    184a:	4770      	bx	lr
    184c:	e05d      	b.n	190a <__divsi3+0x1c2>
    184e:	0fca      	lsrs	r2, r1, #31
    1850:	d000      	beq.n	1854 <__divsi3+0x10c>
    1852:	4249      	negs	r1, r1
    1854:	1003      	asrs	r3, r0, #32
    1856:	d300      	bcc.n	185a <__divsi3+0x112>
    1858:	4240      	negs	r0, r0
    185a:	4053      	eors	r3, r2
    185c:	2200      	movs	r2, #0
    185e:	469c      	mov	ip, r3
    1860:	0903      	lsrs	r3, r0, #4
    1862:	428b      	cmp	r3, r1
    1864:	d32d      	bcc.n	18c2 <__divsi3+0x17a>
    1866:	0a03      	lsrs	r3, r0, #8
    1868:	428b      	cmp	r3, r1
    186a:	d312      	bcc.n	1892 <__divsi3+0x14a>
    186c:	22fc      	movs	r2, #252	; 0xfc
    186e:	0189      	lsls	r1, r1, #6
    1870:	ba12      	rev	r2, r2
    1872:	0a03      	lsrs	r3, r0, #8
    1874:	428b      	cmp	r3, r1
    1876:	d30c      	bcc.n	1892 <__divsi3+0x14a>
    1878:	0189      	lsls	r1, r1, #6
    187a:	1192      	asrs	r2, r2, #6
    187c:	428b      	cmp	r3, r1
    187e:	d308      	bcc.n	1892 <__divsi3+0x14a>
    1880:	0189      	lsls	r1, r1, #6
    1882:	1192      	asrs	r2, r2, #6
    1884:	428b      	cmp	r3, r1
    1886:	d304      	bcc.n	1892 <__divsi3+0x14a>
    1888:	0189      	lsls	r1, r1, #6
    188a:	d03a      	beq.n	1902 <__divsi3+0x1ba>
    188c:	1192      	asrs	r2, r2, #6
    188e:	e000      	b.n	1892 <__divsi3+0x14a>
    1890:	0989      	lsrs	r1, r1, #6
    1892:	09c3      	lsrs	r3, r0, #7
    1894:	428b      	cmp	r3, r1
    1896:	d301      	bcc.n	189c <__divsi3+0x154>
    1898:	01cb      	lsls	r3, r1, #7
    189a:	1ac0      	subs	r0, r0, r3
    189c:	4152      	adcs	r2, r2
    189e:	0983      	lsrs	r3, r0, #6
    18a0:	428b      	cmp	r3, r1
    18a2:	d301      	bcc.n	18a8 <__divsi3+0x160>
    18a4:	018b      	lsls	r3, r1, #6
    18a6:	1ac0      	subs	r0, r0, r3
    18a8:	4152      	adcs	r2, r2
    18aa:	0943      	lsrs	r3, r0, #5
    18ac:	428b      	cmp	r3, r1
    18ae:	d301      	bcc.n	18b4 <__divsi3+0x16c>
    18b0:	014b      	lsls	r3, r1, #5
    18b2:	1ac0      	subs	r0, r0, r3
    18b4:	4152      	adcs	r2, r2
    18b6:	0903      	lsrs	r3, r0, #4
    18b8:	428b      	cmp	r3, r1
    18ba:	d301      	bcc.n	18c0 <__divsi3+0x178>
    18bc:	010b      	lsls	r3, r1, #4
    18be:	1ac0      	subs	r0, r0, r3
    18c0:	4152      	adcs	r2, r2
    18c2:	08c3      	lsrs	r3, r0, #3
    18c4:	428b      	cmp	r3, r1
    18c6:	d301      	bcc.n	18cc <__divsi3+0x184>
    18c8:	00cb      	lsls	r3, r1, #3
    18ca:	1ac0      	subs	r0, r0, r3
    18cc:	4152      	adcs	r2, r2
    18ce:	0883      	lsrs	r3, r0, #2
    18d0:	428b      	cmp	r3, r1
    18d2:	d301      	bcc.n	18d8 <__divsi3+0x190>
    18d4:	008b      	lsls	r3, r1, #2
    18d6:	1ac0      	subs	r0, r0, r3
    18d8:	4152      	adcs	r2, r2
    18da:	d2d9      	bcs.n	1890 <__divsi3+0x148>
    18dc:	0843      	lsrs	r3, r0, #1
    18de:	428b      	cmp	r3, r1
    18e0:	d301      	bcc.n	18e6 <__divsi3+0x19e>
    18e2:	004b      	lsls	r3, r1, #1
    18e4:	1ac0      	subs	r0, r0, r3
    18e6:	4152      	adcs	r2, r2
    18e8:	1a41      	subs	r1, r0, r1
    18ea:	d200      	bcs.n	18ee <__divsi3+0x1a6>
    18ec:	4601      	mov	r1, r0
    18ee:	4663      	mov	r3, ip
    18f0:	4152      	adcs	r2, r2
    18f2:	105b      	asrs	r3, r3, #1
    18f4:	4610      	mov	r0, r2
    18f6:	d301      	bcc.n	18fc <__divsi3+0x1b4>
    18f8:	4240      	negs	r0, r0
    18fa:	2b00      	cmp	r3, #0
    18fc:	d500      	bpl.n	1900 <__divsi3+0x1b8>
    18fe:	4249      	negs	r1, r1
    1900:	4770      	bx	lr
    1902:	4663      	mov	r3, ip
    1904:	105b      	asrs	r3, r3, #1
    1906:	d300      	bcc.n	190a <__divsi3+0x1c2>
    1908:	4240      	negs	r0, r0
    190a:	b501      	push	{r0, lr}
    190c:	2000      	movs	r0, #0
    190e:	f000 f805 	bl	191c <__aeabi_idiv0>
    1912:	bd02      	pop	{r1, pc}

00001914 <__aeabi_idivmod>:
    1914:	2900      	cmp	r1, #0
    1916:	d0f8      	beq.n	190a <__divsi3+0x1c2>
    1918:	e716      	b.n	1748 <__divsi3>
    191a:	4770      	bx	lr

0000191c <__aeabi_idiv0>:
    191c:	4770      	bx	lr
    191e:	46c0      	nop			; (mov r8, r8)

00001920 <__ffssi2>:
    1920:	b510      	push	{r4, lr}
    1922:	2300      	movs	r3, #0
    1924:	2800      	cmp	r0, #0
    1926:	d002      	beq.n	192e <__ffssi2+0xe>
    1928:	f000 f804 	bl	1934 <__ctzsi2>
    192c:	1c43      	adds	r3, r0, #1
    192e:	0018      	movs	r0, r3
    1930:	bd10      	pop	{r4, pc}
    1932:	46c0      	nop			; (mov r8, r8)

00001934 <__ctzsi2>:
    1934:	4241      	negs	r1, r0
    1936:	4008      	ands	r0, r1
    1938:	211c      	movs	r1, #28
    193a:	2301      	movs	r3, #1
    193c:	041b      	lsls	r3, r3, #16
    193e:	4298      	cmp	r0, r3
    1940:	d301      	bcc.n	1946 <__ctzsi2+0x12>
    1942:	0c00      	lsrs	r0, r0, #16
    1944:	3910      	subs	r1, #16
    1946:	0a1b      	lsrs	r3, r3, #8
    1948:	4298      	cmp	r0, r3
    194a:	d301      	bcc.n	1950 <__ctzsi2+0x1c>
    194c:	0a00      	lsrs	r0, r0, #8
    194e:	3908      	subs	r1, #8
    1950:	091b      	lsrs	r3, r3, #4
    1952:	4298      	cmp	r0, r3
    1954:	d301      	bcc.n	195a <__ctzsi2+0x26>
    1956:	0900      	lsrs	r0, r0, #4
    1958:	3904      	subs	r1, #4
    195a:	a202      	add	r2, pc, #8	; (adr r2, 1964 <__ctzsi2+0x30>)
    195c:	5c10      	ldrb	r0, [r2, r0]
    195e:	1a40      	subs	r0, r0, r1
    1960:	4770      	bx	lr
    1962:	46c0      	nop			; (mov r8, r8)
    1964:	1d1d1c1b 	.word	0x1d1d1c1b
    1968:	1e1e1e1e 	.word	0x1e1e1e1e
    196c:	1f1f1f1f 	.word	0x1f1f1f1f
    1970:	1f1f1f1f 	.word	0x1f1f1f1f

00001974 <__libc_init_array>:
    1974:	b570      	push	{r4, r5, r6, lr}
    1976:	2600      	movs	r6, #0
    1978:	4d0c      	ldr	r5, [pc, #48]	; (19ac <__libc_init_array+0x38>)
    197a:	4c0d      	ldr	r4, [pc, #52]	; (19b0 <__libc_init_array+0x3c>)
    197c:	1b64      	subs	r4, r4, r5
    197e:	10a4      	asrs	r4, r4, #2
    1980:	42a6      	cmp	r6, r4
    1982:	d109      	bne.n	1998 <__libc_init_array+0x24>
    1984:	2600      	movs	r6, #0
    1986:	f000 fdef 	bl	2568 <_init>
    198a:	4d0a      	ldr	r5, [pc, #40]	; (19b4 <__libc_init_array+0x40>)
    198c:	4c0a      	ldr	r4, [pc, #40]	; (19b8 <__libc_init_array+0x44>)
    198e:	1b64      	subs	r4, r4, r5
    1990:	10a4      	asrs	r4, r4, #2
    1992:	42a6      	cmp	r6, r4
    1994:	d105      	bne.n	19a2 <__libc_init_array+0x2e>
    1996:	bd70      	pop	{r4, r5, r6, pc}
    1998:	00b3      	lsls	r3, r6, #2
    199a:	58eb      	ldr	r3, [r5, r3]
    199c:	4798      	blx	r3
    199e:	3601      	adds	r6, #1
    19a0:	e7ee      	b.n	1980 <__libc_init_array+0xc>
    19a2:	00b3      	lsls	r3, r6, #2
    19a4:	58eb      	ldr	r3, [r5, r3]
    19a6:	4798      	blx	r3
    19a8:	3601      	adds	r6, #1
    19aa:	e7f2      	b.n	1992 <__libc_init_array+0x1e>
    19ac:	00002574 	.word	0x00002574
    19b0:	00002574 	.word	0x00002574
    19b4:	00002574 	.word	0x00002574
    19b8:	00002578 	.word	0x00002578

000019bc <_vsniprintf_r>:
    19bc:	b530      	push	{r4, r5, lr}
    19be:	0014      	movs	r4, r2
    19c0:	b09b      	sub	sp, #108	; 0x6c
    19c2:	0005      	movs	r5, r0
    19c4:	001a      	movs	r2, r3
    19c6:	2c00      	cmp	r4, #0
    19c8:	da05      	bge.n	19d6 <_vsniprintf_r+0x1a>
    19ca:	238b      	movs	r3, #139	; 0x8b
    19cc:	6003      	str	r3, [r0, #0]
    19ce:	2001      	movs	r0, #1
    19d0:	4240      	negs	r0, r0
    19d2:	b01b      	add	sp, #108	; 0x6c
    19d4:	bd30      	pop	{r4, r5, pc}
    19d6:	2382      	movs	r3, #130	; 0x82
    19d8:	4668      	mov	r0, sp
    19da:	009b      	lsls	r3, r3, #2
    19dc:	8183      	strh	r3, [r0, #12]
    19de:	2300      	movs	r3, #0
    19e0:	9100      	str	r1, [sp, #0]
    19e2:	9104      	str	r1, [sp, #16]
    19e4:	429c      	cmp	r4, r3
    19e6:	d000      	beq.n	19ea <_vsniprintf_r+0x2e>
    19e8:	1e63      	subs	r3, r4, #1
    19ea:	9302      	str	r3, [sp, #8]
    19ec:	9305      	str	r3, [sp, #20]
    19ee:	2301      	movs	r3, #1
    19f0:	4669      	mov	r1, sp
    19f2:	425b      	negs	r3, r3
    19f4:	81cb      	strh	r3, [r1, #14]
    19f6:	0028      	movs	r0, r5
    19f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    19fa:	f000 f8d7 	bl	1bac <_svfiprintf_r>
    19fe:	1c43      	adds	r3, r0, #1
    1a00:	da01      	bge.n	1a06 <_vsniprintf_r+0x4a>
    1a02:	238b      	movs	r3, #139	; 0x8b
    1a04:	602b      	str	r3, [r5, #0]
    1a06:	2c00      	cmp	r4, #0
    1a08:	d0e3      	beq.n	19d2 <_vsniprintf_r+0x16>
    1a0a:	2300      	movs	r3, #0
    1a0c:	9a00      	ldr	r2, [sp, #0]
    1a0e:	7013      	strb	r3, [r2, #0]
    1a10:	e7df      	b.n	19d2 <_vsniprintf_r+0x16>
	...

00001a14 <vsniprintf>:
    1a14:	b507      	push	{r0, r1, r2, lr}
    1a16:	9300      	str	r3, [sp, #0]
    1a18:	0013      	movs	r3, r2
    1a1a:	000a      	movs	r2, r1
    1a1c:	0001      	movs	r1, r0
    1a1e:	4802      	ldr	r0, [pc, #8]	; (1a28 <vsniprintf+0x14>)
    1a20:	6800      	ldr	r0, [r0, #0]
    1a22:	f7ff ffcb 	bl	19bc <_vsniprintf_r>
    1a26:	bd0e      	pop	{r1, r2, r3, pc}
    1a28:	20000000 	.word	0x20000000

00001a2c <_malloc_r>:
    1a2c:	2303      	movs	r3, #3
    1a2e:	b570      	push	{r4, r5, r6, lr}
    1a30:	1ccd      	adds	r5, r1, #3
    1a32:	439d      	bics	r5, r3
    1a34:	3508      	adds	r5, #8
    1a36:	0006      	movs	r6, r0
    1a38:	2d0c      	cmp	r5, #12
    1a3a:	d21e      	bcs.n	1a7a <_malloc_r+0x4e>
    1a3c:	250c      	movs	r5, #12
    1a3e:	42a9      	cmp	r1, r5
    1a40:	d81d      	bhi.n	1a7e <_malloc_r+0x52>
    1a42:	0030      	movs	r0, r6
    1a44:	f000 fb76 	bl	2134 <__malloc_lock>
    1a48:	4a25      	ldr	r2, [pc, #148]	; (1ae0 <_malloc_r+0xb4>)
    1a4a:	6814      	ldr	r4, [r2, #0]
    1a4c:	0021      	movs	r1, r4
    1a4e:	2900      	cmp	r1, #0
    1a50:	d119      	bne.n	1a86 <_malloc_r+0x5a>
    1a52:	4c24      	ldr	r4, [pc, #144]	; (1ae4 <_malloc_r+0xb8>)
    1a54:	6823      	ldr	r3, [r4, #0]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d103      	bne.n	1a62 <_malloc_r+0x36>
    1a5a:	0030      	movs	r0, r6
    1a5c:	f000 fb32 	bl	20c4 <_sbrk_r>
    1a60:	6020      	str	r0, [r4, #0]
    1a62:	0029      	movs	r1, r5
    1a64:	0030      	movs	r0, r6
    1a66:	f000 fb2d 	bl	20c4 <_sbrk_r>
    1a6a:	1c43      	adds	r3, r0, #1
    1a6c:	d12c      	bne.n	1ac8 <_malloc_r+0x9c>
    1a6e:	230c      	movs	r3, #12
    1a70:	0030      	movs	r0, r6
    1a72:	6033      	str	r3, [r6, #0]
    1a74:	f000 fb5f 	bl	2136 <__malloc_unlock>
    1a78:	e003      	b.n	1a82 <_malloc_r+0x56>
    1a7a:	2d00      	cmp	r5, #0
    1a7c:	dadf      	bge.n	1a3e <_malloc_r+0x12>
    1a7e:	230c      	movs	r3, #12
    1a80:	6033      	str	r3, [r6, #0]
    1a82:	2000      	movs	r0, #0
    1a84:	bd70      	pop	{r4, r5, r6, pc}
    1a86:	680b      	ldr	r3, [r1, #0]
    1a88:	1b5b      	subs	r3, r3, r5
    1a8a:	d41a      	bmi.n	1ac2 <_malloc_r+0x96>
    1a8c:	2b0b      	cmp	r3, #11
    1a8e:	d903      	bls.n	1a98 <_malloc_r+0x6c>
    1a90:	600b      	str	r3, [r1, #0]
    1a92:	18cc      	adds	r4, r1, r3
    1a94:	6025      	str	r5, [r4, #0]
    1a96:	e003      	b.n	1aa0 <_malloc_r+0x74>
    1a98:	428c      	cmp	r4, r1
    1a9a:	d10e      	bne.n	1aba <_malloc_r+0x8e>
    1a9c:	6863      	ldr	r3, [r4, #4]
    1a9e:	6013      	str	r3, [r2, #0]
    1aa0:	0030      	movs	r0, r6
    1aa2:	f000 fb48 	bl	2136 <__malloc_unlock>
    1aa6:	0020      	movs	r0, r4
    1aa8:	2207      	movs	r2, #7
    1aaa:	300b      	adds	r0, #11
    1aac:	1d23      	adds	r3, r4, #4
    1aae:	4390      	bics	r0, r2
    1ab0:	1ac3      	subs	r3, r0, r3
    1ab2:	d0e7      	beq.n	1a84 <_malloc_r+0x58>
    1ab4:	425a      	negs	r2, r3
    1ab6:	50e2      	str	r2, [r4, r3]
    1ab8:	e7e4      	b.n	1a84 <_malloc_r+0x58>
    1aba:	684b      	ldr	r3, [r1, #4]
    1abc:	6063      	str	r3, [r4, #4]
    1abe:	000c      	movs	r4, r1
    1ac0:	e7ee      	b.n	1aa0 <_malloc_r+0x74>
    1ac2:	000c      	movs	r4, r1
    1ac4:	6849      	ldr	r1, [r1, #4]
    1ac6:	e7c2      	b.n	1a4e <_malloc_r+0x22>
    1ac8:	2303      	movs	r3, #3
    1aca:	1cc4      	adds	r4, r0, #3
    1acc:	439c      	bics	r4, r3
    1ace:	42a0      	cmp	r0, r4
    1ad0:	d0e0      	beq.n	1a94 <_malloc_r+0x68>
    1ad2:	1a21      	subs	r1, r4, r0
    1ad4:	0030      	movs	r0, r6
    1ad6:	f000 faf5 	bl	20c4 <_sbrk_r>
    1ada:	1c43      	adds	r3, r0, #1
    1adc:	d1da      	bne.n	1a94 <_malloc_r+0x68>
    1ade:	e7c6      	b.n	1a6e <_malloc_r+0x42>
    1ae0:	20000108 	.word	0x20000108
    1ae4:	2000010c 	.word	0x2000010c

00001ae8 <__ssputs_r>:
    1ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aea:	688e      	ldr	r6, [r1, #8]
    1aec:	b085      	sub	sp, #20
    1aee:	0007      	movs	r7, r0
    1af0:	000c      	movs	r4, r1
    1af2:	9203      	str	r2, [sp, #12]
    1af4:	9301      	str	r3, [sp, #4]
    1af6:	429e      	cmp	r6, r3
    1af8:	d839      	bhi.n	1b6e <__ssputs_r+0x86>
    1afa:	2390      	movs	r3, #144	; 0x90
    1afc:	898a      	ldrh	r2, [r1, #12]
    1afe:	00db      	lsls	r3, r3, #3
    1b00:	421a      	tst	r2, r3
    1b02:	d034      	beq.n	1b6e <__ssputs_r+0x86>
    1b04:	2503      	movs	r5, #3
    1b06:	6909      	ldr	r1, [r1, #16]
    1b08:	6823      	ldr	r3, [r4, #0]
    1b0a:	1a5b      	subs	r3, r3, r1
    1b0c:	9302      	str	r3, [sp, #8]
    1b0e:	6963      	ldr	r3, [r4, #20]
    1b10:	9802      	ldr	r0, [sp, #8]
    1b12:	435d      	muls	r5, r3
    1b14:	0feb      	lsrs	r3, r5, #31
    1b16:	195d      	adds	r5, r3, r5
    1b18:	9b01      	ldr	r3, [sp, #4]
    1b1a:	106d      	asrs	r5, r5, #1
    1b1c:	3301      	adds	r3, #1
    1b1e:	181b      	adds	r3, r3, r0
    1b20:	42ab      	cmp	r3, r5
    1b22:	d900      	bls.n	1b26 <__ssputs_r+0x3e>
    1b24:	001d      	movs	r5, r3
    1b26:	0553      	lsls	r3, r2, #21
    1b28:	d532      	bpl.n	1b90 <__ssputs_r+0xa8>
    1b2a:	0029      	movs	r1, r5
    1b2c:	0038      	movs	r0, r7
    1b2e:	f7ff ff7d 	bl	1a2c <_malloc_r>
    1b32:	1e06      	subs	r6, r0, #0
    1b34:	d109      	bne.n	1b4a <__ssputs_r+0x62>
    1b36:	230c      	movs	r3, #12
    1b38:	603b      	str	r3, [r7, #0]
    1b3a:	2340      	movs	r3, #64	; 0x40
    1b3c:	2001      	movs	r0, #1
    1b3e:	89a2      	ldrh	r2, [r4, #12]
    1b40:	4240      	negs	r0, r0
    1b42:	4313      	orrs	r3, r2
    1b44:	81a3      	strh	r3, [r4, #12]
    1b46:	b005      	add	sp, #20
    1b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b4a:	9a02      	ldr	r2, [sp, #8]
    1b4c:	6921      	ldr	r1, [r4, #16]
    1b4e:	f000 fad6 	bl	20fe <memcpy>
    1b52:	89a3      	ldrh	r3, [r4, #12]
    1b54:	4a14      	ldr	r2, [pc, #80]	; (1ba8 <__ssputs_r+0xc0>)
    1b56:	401a      	ands	r2, r3
    1b58:	2380      	movs	r3, #128	; 0x80
    1b5a:	4313      	orrs	r3, r2
    1b5c:	81a3      	strh	r3, [r4, #12]
    1b5e:	9b02      	ldr	r3, [sp, #8]
    1b60:	6126      	str	r6, [r4, #16]
    1b62:	18f6      	adds	r6, r6, r3
    1b64:	6026      	str	r6, [r4, #0]
    1b66:	6165      	str	r5, [r4, #20]
    1b68:	9e01      	ldr	r6, [sp, #4]
    1b6a:	1aed      	subs	r5, r5, r3
    1b6c:	60a5      	str	r5, [r4, #8]
    1b6e:	9b01      	ldr	r3, [sp, #4]
    1b70:	42b3      	cmp	r3, r6
    1b72:	d200      	bcs.n	1b76 <__ssputs_r+0x8e>
    1b74:	001e      	movs	r6, r3
    1b76:	0032      	movs	r2, r6
    1b78:	9903      	ldr	r1, [sp, #12]
    1b7a:	6820      	ldr	r0, [r4, #0]
    1b7c:	f000 fac8 	bl	2110 <memmove>
    1b80:	68a3      	ldr	r3, [r4, #8]
    1b82:	2000      	movs	r0, #0
    1b84:	1b9b      	subs	r3, r3, r6
    1b86:	60a3      	str	r3, [r4, #8]
    1b88:	6823      	ldr	r3, [r4, #0]
    1b8a:	199e      	adds	r6, r3, r6
    1b8c:	6026      	str	r6, [r4, #0]
    1b8e:	e7da      	b.n	1b46 <__ssputs_r+0x5e>
    1b90:	002a      	movs	r2, r5
    1b92:	0038      	movs	r0, r7
    1b94:	f000 fb1a 	bl	21cc <_realloc_r>
    1b98:	1e06      	subs	r6, r0, #0
    1b9a:	d1e0      	bne.n	1b5e <__ssputs_r+0x76>
    1b9c:	6921      	ldr	r1, [r4, #16]
    1b9e:	0038      	movs	r0, r7
    1ba0:	f000 faca 	bl	2138 <_free_r>
    1ba4:	e7c7      	b.n	1b36 <__ssputs_r+0x4e>
    1ba6:	46c0      	nop			; (mov r8, r8)
    1ba8:	fffffb7f 	.word	0xfffffb7f

00001bac <_svfiprintf_r>:
    1bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bae:	b09f      	sub	sp, #124	; 0x7c
    1bb0:	9002      	str	r0, [sp, #8]
    1bb2:	9305      	str	r3, [sp, #20]
    1bb4:	898b      	ldrh	r3, [r1, #12]
    1bb6:	000f      	movs	r7, r1
    1bb8:	0016      	movs	r6, r2
    1bba:	061b      	lsls	r3, r3, #24
    1bbc:	d511      	bpl.n	1be2 <_svfiprintf_r+0x36>
    1bbe:	690b      	ldr	r3, [r1, #16]
    1bc0:	2b00      	cmp	r3, #0
    1bc2:	d10e      	bne.n	1be2 <_svfiprintf_r+0x36>
    1bc4:	2140      	movs	r1, #64	; 0x40
    1bc6:	f7ff ff31 	bl	1a2c <_malloc_r>
    1bca:	6038      	str	r0, [r7, #0]
    1bcc:	6138      	str	r0, [r7, #16]
    1bce:	2800      	cmp	r0, #0
    1bd0:	d105      	bne.n	1bde <_svfiprintf_r+0x32>
    1bd2:	230c      	movs	r3, #12
    1bd4:	9a02      	ldr	r2, [sp, #8]
    1bd6:	3801      	subs	r0, #1
    1bd8:	6013      	str	r3, [r2, #0]
    1bda:	b01f      	add	sp, #124	; 0x7c
    1bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bde:	2340      	movs	r3, #64	; 0x40
    1be0:	617b      	str	r3, [r7, #20]
    1be2:	2300      	movs	r3, #0
    1be4:	ad06      	add	r5, sp, #24
    1be6:	616b      	str	r3, [r5, #20]
    1be8:	3320      	adds	r3, #32
    1bea:	766b      	strb	r3, [r5, #25]
    1bec:	3310      	adds	r3, #16
    1bee:	76ab      	strb	r3, [r5, #26]
    1bf0:	0034      	movs	r4, r6
    1bf2:	7823      	ldrb	r3, [r4, #0]
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	d147      	bne.n	1c88 <_svfiprintf_r+0xdc>
    1bf8:	1ba3      	subs	r3, r4, r6
    1bfa:	9304      	str	r3, [sp, #16]
    1bfc:	d00d      	beq.n	1c1a <_svfiprintf_r+0x6e>
    1bfe:	1ba3      	subs	r3, r4, r6
    1c00:	0032      	movs	r2, r6
    1c02:	0039      	movs	r1, r7
    1c04:	9802      	ldr	r0, [sp, #8]
    1c06:	f7ff ff6f 	bl	1ae8 <__ssputs_r>
    1c0a:	1c43      	adds	r3, r0, #1
    1c0c:	d100      	bne.n	1c10 <_svfiprintf_r+0x64>
    1c0e:	e0b5      	b.n	1d7c <_svfiprintf_r+0x1d0>
    1c10:	696a      	ldr	r2, [r5, #20]
    1c12:	9b04      	ldr	r3, [sp, #16]
    1c14:	4694      	mov	ip, r2
    1c16:	4463      	add	r3, ip
    1c18:	616b      	str	r3, [r5, #20]
    1c1a:	7823      	ldrb	r3, [r4, #0]
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	d100      	bne.n	1c22 <_svfiprintf_r+0x76>
    1c20:	e0ac      	b.n	1d7c <_svfiprintf_r+0x1d0>
    1c22:	2201      	movs	r2, #1
    1c24:	2300      	movs	r3, #0
    1c26:	4252      	negs	r2, r2
    1c28:	606a      	str	r2, [r5, #4]
    1c2a:	a902      	add	r1, sp, #8
    1c2c:	3254      	adds	r2, #84	; 0x54
    1c2e:	1852      	adds	r2, r2, r1
    1c30:	3401      	adds	r4, #1
    1c32:	602b      	str	r3, [r5, #0]
    1c34:	60eb      	str	r3, [r5, #12]
    1c36:	60ab      	str	r3, [r5, #8]
    1c38:	7013      	strb	r3, [r2, #0]
    1c3a:	65ab      	str	r3, [r5, #88]	; 0x58
    1c3c:	4e58      	ldr	r6, [pc, #352]	; (1da0 <_svfiprintf_r+0x1f4>)
    1c3e:	2205      	movs	r2, #5
    1c40:	7821      	ldrb	r1, [r4, #0]
    1c42:	0030      	movs	r0, r6
    1c44:	f000 fa50 	bl	20e8 <memchr>
    1c48:	1c62      	adds	r2, r4, #1
    1c4a:	2800      	cmp	r0, #0
    1c4c:	d120      	bne.n	1c90 <_svfiprintf_r+0xe4>
    1c4e:	6829      	ldr	r1, [r5, #0]
    1c50:	06cb      	lsls	r3, r1, #27
    1c52:	d504      	bpl.n	1c5e <_svfiprintf_r+0xb2>
    1c54:	2353      	movs	r3, #83	; 0x53
    1c56:	ae02      	add	r6, sp, #8
    1c58:	3020      	adds	r0, #32
    1c5a:	199b      	adds	r3, r3, r6
    1c5c:	7018      	strb	r0, [r3, #0]
    1c5e:	070b      	lsls	r3, r1, #28
    1c60:	d504      	bpl.n	1c6c <_svfiprintf_r+0xc0>
    1c62:	2353      	movs	r3, #83	; 0x53
    1c64:	202b      	movs	r0, #43	; 0x2b
    1c66:	ae02      	add	r6, sp, #8
    1c68:	199b      	adds	r3, r3, r6
    1c6a:	7018      	strb	r0, [r3, #0]
    1c6c:	7823      	ldrb	r3, [r4, #0]
    1c6e:	2b2a      	cmp	r3, #42	; 0x2a
    1c70:	d016      	beq.n	1ca0 <_svfiprintf_r+0xf4>
    1c72:	2000      	movs	r0, #0
    1c74:	210a      	movs	r1, #10
    1c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c78:	7822      	ldrb	r2, [r4, #0]
    1c7a:	3a30      	subs	r2, #48	; 0x30
    1c7c:	2a09      	cmp	r2, #9
    1c7e:	d955      	bls.n	1d2c <_svfiprintf_r+0x180>
    1c80:	2800      	cmp	r0, #0
    1c82:	d015      	beq.n	1cb0 <_svfiprintf_r+0x104>
    1c84:	9309      	str	r3, [sp, #36]	; 0x24
    1c86:	e013      	b.n	1cb0 <_svfiprintf_r+0x104>
    1c88:	2b25      	cmp	r3, #37	; 0x25
    1c8a:	d0b5      	beq.n	1bf8 <_svfiprintf_r+0x4c>
    1c8c:	3401      	adds	r4, #1
    1c8e:	e7b0      	b.n	1bf2 <_svfiprintf_r+0x46>
    1c90:	2301      	movs	r3, #1
    1c92:	1b80      	subs	r0, r0, r6
    1c94:	4083      	lsls	r3, r0
    1c96:	6829      	ldr	r1, [r5, #0]
    1c98:	0014      	movs	r4, r2
    1c9a:	430b      	orrs	r3, r1
    1c9c:	602b      	str	r3, [r5, #0]
    1c9e:	e7cd      	b.n	1c3c <_svfiprintf_r+0x90>
    1ca0:	9b05      	ldr	r3, [sp, #20]
    1ca2:	1d18      	adds	r0, r3, #4
    1ca4:	681b      	ldr	r3, [r3, #0]
    1ca6:	9005      	str	r0, [sp, #20]
    1ca8:	2b00      	cmp	r3, #0
    1caa:	db39      	blt.n	1d20 <_svfiprintf_r+0x174>
    1cac:	9309      	str	r3, [sp, #36]	; 0x24
    1cae:	0014      	movs	r4, r2
    1cb0:	7823      	ldrb	r3, [r4, #0]
    1cb2:	2b2e      	cmp	r3, #46	; 0x2e
    1cb4:	d10b      	bne.n	1cce <_svfiprintf_r+0x122>
    1cb6:	7863      	ldrb	r3, [r4, #1]
    1cb8:	1c62      	adds	r2, r4, #1
    1cba:	2b2a      	cmp	r3, #42	; 0x2a
    1cbc:	d13e      	bne.n	1d3c <_svfiprintf_r+0x190>
    1cbe:	9b05      	ldr	r3, [sp, #20]
    1cc0:	3402      	adds	r4, #2
    1cc2:	1d1a      	adds	r2, r3, #4
    1cc4:	681b      	ldr	r3, [r3, #0]
    1cc6:	9205      	str	r2, [sp, #20]
    1cc8:	2b00      	cmp	r3, #0
    1cca:	db34      	blt.n	1d36 <_svfiprintf_r+0x18a>
    1ccc:	9307      	str	r3, [sp, #28]
    1cce:	4e35      	ldr	r6, [pc, #212]	; (1da4 <_svfiprintf_r+0x1f8>)
    1cd0:	7821      	ldrb	r1, [r4, #0]
    1cd2:	2203      	movs	r2, #3
    1cd4:	0030      	movs	r0, r6
    1cd6:	f000 fa07 	bl	20e8 <memchr>
    1cda:	2800      	cmp	r0, #0
    1cdc:	d006      	beq.n	1cec <_svfiprintf_r+0x140>
    1cde:	2340      	movs	r3, #64	; 0x40
    1ce0:	1b80      	subs	r0, r0, r6
    1ce2:	4083      	lsls	r3, r0
    1ce4:	682a      	ldr	r2, [r5, #0]
    1ce6:	3401      	adds	r4, #1
    1ce8:	4313      	orrs	r3, r2
    1cea:	602b      	str	r3, [r5, #0]
    1cec:	7821      	ldrb	r1, [r4, #0]
    1cee:	2206      	movs	r2, #6
    1cf0:	482d      	ldr	r0, [pc, #180]	; (1da8 <_svfiprintf_r+0x1fc>)
    1cf2:	1c66      	adds	r6, r4, #1
    1cf4:	7629      	strb	r1, [r5, #24]
    1cf6:	f000 f9f7 	bl	20e8 <memchr>
    1cfa:	2800      	cmp	r0, #0
    1cfc:	d046      	beq.n	1d8c <_svfiprintf_r+0x1e0>
    1cfe:	4b2b      	ldr	r3, [pc, #172]	; (1dac <_svfiprintf_r+0x200>)
    1d00:	2b00      	cmp	r3, #0
    1d02:	d12f      	bne.n	1d64 <_svfiprintf_r+0x1b8>
    1d04:	6829      	ldr	r1, [r5, #0]
    1d06:	9b05      	ldr	r3, [sp, #20]
    1d08:	2207      	movs	r2, #7
    1d0a:	05c9      	lsls	r1, r1, #23
    1d0c:	d528      	bpl.n	1d60 <_svfiprintf_r+0x1b4>
    1d0e:	189b      	adds	r3, r3, r2
    1d10:	4393      	bics	r3, r2
    1d12:	3308      	adds	r3, #8
    1d14:	9305      	str	r3, [sp, #20]
    1d16:	696b      	ldr	r3, [r5, #20]
    1d18:	9a03      	ldr	r2, [sp, #12]
    1d1a:	189b      	adds	r3, r3, r2
    1d1c:	616b      	str	r3, [r5, #20]
    1d1e:	e767      	b.n	1bf0 <_svfiprintf_r+0x44>
    1d20:	425b      	negs	r3, r3
    1d22:	60eb      	str	r3, [r5, #12]
    1d24:	2302      	movs	r3, #2
    1d26:	430b      	orrs	r3, r1
    1d28:	602b      	str	r3, [r5, #0]
    1d2a:	e7c0      	b.n	1cae <_svfiprintf_r+0x102>
    1d2c:	434b      	muls	r3, r1
    1d2e:	3401      	adds	r4, #1
    1d30:	189b      	adds	r3, r3, r2
    1d32:	2001      	movs	r0, #1
    1d34:	e7a0      	b.n	1c78 <_svfiprintf_r+0xcc>
    1d36:	2301      	movs	r3, #1
    1d38:	425b      	negs	r3, r3
    1d3a:	e7c7      	b.n	1ccc <_svfiprintf_r+0x120>
    1d3c:	2300      	movs	r3, #0
    1d3e:	0014      	movs	r4, r2
    1d40:	200a      	movs	r0, #10
    1d42:	001a      	movs	r2, r3
    1d44:	606b      	str	r3, [r5, #4]
    1d46:	7821      	ldrb	r1, [r4, #0]
    1d48:	3930      	subs	r1, #48	; 0x30
    1d4a:	2909      	cmp	r1, #9
    1d4c:	d903      	bls.n	1d56 <_svfiprintf_r+0x1aa>
    1d4e:	2b00      	cmp	r3, #0
    1d50:	d0bd      	beq.n	1cce <_svfiprintf_r+0x122>
    1d52:	9207      	str	r2, [sp, #28]
    1d54:	e7bb      	b.n	1cce <_svfiprintf_r+0x122>
    1d56:	4342      	muls	r2, r0
    1d58:	3401      	adds	r4, #1
    1d5a:	1852      	adds	r2, r2, r1
    1d5c:	2301      	movs	r3, #1
    1d5e:	e7f2      	b.n	1d46 <_svfiprintf_r+0x19a>
    1d60:	3307      	adds	r3, #7
    1d62:	e7d5      	b.n	1d10 <_svfiprintf_r+0x164>
    1d64:	ab05      	add	r3, sp, #20
    1d66:	9300      	str	r3, [sp, #0]
    1d68:	003a      	movs	r2, r7
    1d6a:	4b11      	ldr	r3, [pc, #68]	; (1db0 <_svfiprintf_r+0x204>)
    1d6c:	0029      	movs	r1, r5
    1d6e:	9802      	ldr	r0, [sp, #8]
    1d70:	e000      	b.n	1d74 <_svfiprintf_r+0x1c8>
    1d72:	bf00      	nop
    1d74:	9003      	str	r0, [sp, #12]
    1d76:	9b03      	ldr	r3, [sp, #12]
    1d78:	3301      	adds	r3, #1
    1d7a:	d1cc      	bne.n	1d16 <_svfiprintf_r+0x16a>
    1d7c:	89bb      	ldrh	r3, [r7, #12]
    1d7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1d80:	065b      	lsls	r3, r3, #25
    1d82:	d400      	bmi.n	1d86 <_svfiprintf_r+0x1da>
    1d84:	e729      	b.n	1bda <_svfiprintf_r+0x2e>
    1d86:	2001      	movs	r0, #1
    1d88:	4240      	negs	r0, r0
    1d8a:	e726      	b.n	1bda <_svfiprintf_r+0x2e>
    1d8c:	ab05      	add	r3, sp, #20
    1d8e:	9300      	str	r3, [sp, #0]
    1d90:	003a      	movs	r2, r7
    1d92:	4b07      	ldr	r3, [pc, #28]	; (1db0 <_svfiprintf_r+0x204>)
    1d94:	0029      	movs	r1, r5
    1d96:	9802      	ldr	r0, [sp, #8]
    1d98:	f000 f87a 	bl	1e90 <_printf_i>
    1d9c:	e7ea      	b.n	1d74 <_svfiprintf_r+0x1c8>
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	00002534 	.word	0x00002534
    1da4:	0000253a 	.word	0x0000253a
    1da8:	0000253e 	.word	0x0000253e
    1dac:	00000000 	.word	0x00000000
    1db0:	00001ae9 	.word	0x00001ae9

00001db4 <_printf_common>:
    1db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1db6:	0015      	movs	r5, r2
    1db8:	9301      	str	r3, [sp, #4]
    1dba:	688a      	ldr	r2, [r1, #8]
    1dbc:	690b      	ldr	r3, [r1, #16]
    1dbe:	9000      	str	r0, [sp, #0]
    1dc0:	000c      	movs	r4, r1
    1dc2:	4293      	cmp	r3, r2
    1dc4:	da00      	bge.n	1dc8 <_printf_common+0x14>
    1dc6:	0013      	movs	r3, r2
    1dc8:	0022      	movs	r2, r4
    1dca:	602b      	str	r3, [r5, #0]
    1dcc:	3243      	adds	r2, #67	; 0x43
    1dce:	7812      	ldrb	r2, [r2, #0]
    1dd0:	2a00      	cmp	r2, #0
    1dd2:	d001      	beq.n	1dd8 <_printf_common+0x24>
    1dd4:	3301      	adds	r3, #1
    1dd6:	602b      	str	r3, [r5, #0]
    1dd8:	6823      	ldr	r3, [r4, #0]
    1dda:	069b      	lsls	r3, r3, #26
    1ddc:	d502      	bpl.n	1de4 <_printf_common+0x30>
    1dde:	682b      	ldr	r3, [r5, #0]
    1de0:	3302      	adds	r3, #2
    1de2:	602b      	str	r3, [r5, #0]
    1de4:	2706      	movs	r7, #6
    1de6:	6823      	ldr	r3, [r4, #0]
    1de8:	401f      	ands	r7, r3
    1dea:	d027      	beq.n	1e3c <_printf_common+0x88>
    1dec:	0023      	movs	r3, r4
    1dee:	3343      	adds	r3, #67	; 0x43
    1df0:	781b      	ldrb	r3, [r3, #0]
    1df2:	1e5a      	subs	r2, r3, #1
    1df4:	4193      	sbcs	r3, r2
    1df6:	6822      	ldr	r2, [r4, #0]
    1df8:	0692      	lsls	r2, r2, #26
    1dfa:	d430      	bmi.n	1e5e <_printf_common+0xaa>
    1dfc:	0022      	movs	r2, r4
    1dfe:	9901      	ldr	r1, [sp, #4]
    1e00:	3243      	adds	r2, #67	; 0x43
    1e02:	9800      	ldr	r0, [sp, #0]
    1e04:	9e08      	ldr	r6, [sp, #32]
    1e06:	47b0      	blx	r6
    1e08:	1c43      	adds	r3, r0, #1
    1e0a:	d025      	beq.n	1e58 <_printf_common+0xa4>
    1e0c:	2306      	movs	r3, #6
    1e0e:	6820      	ldr	r0, [r4, #0]
    1e10:	682a      	ldr	r2, [r5, #0]
    1e12:	68e1      	ldr	r1, [r4, #12]
    1e14:	4003      	ands	r3, r0
    1e16:	2500      	movs	r5, #0
    1e18:	2b04      	cmp	r3, #4
    1e1a:	d103      	bne.n	1e24 <_printf_common+0x70>
    1e1c:	1a8d      	subs	r5, r1, r2
    1e1e:	43eb      	mvns	r3, r5
    1e20:	17db      	asrs	r3, r3, #31
    1e22:	401d      	ands	r5, r3
    1e24:	68a3      	ldr	r3, [r4, #8]
    1e26:	6922      	ldr	r2, [r4, #16]
    1e28:	4293      	cmp	r3, r2
    1e2a:	dd01      	ble.n	1e30 <_printf_common+0x7c>
    1e2c:	1a9b      	subs	r3, r3, r2
    1e2e:	18ed      	adds	r5, r5, r3
    1e30:	2700      	movs	r7, #0
    1e32:	42bd      	cmp	r5, r7
    1e34:	d120      	bne.n	1e78 <_printf_common+0xc4>
    1e36:	2000      	movs	r0, #0
    1e38:	e010      	b.n	1e5c <_printf_common+0xa8>
    1e3a:	3701      	adds	r7, #1
    1e3c:	68e3      	ldr	r3, [r4, #12]
    1e3e:	682a      	ldr	r2, [r5, #0]
    1e40:	1a9b      	subs	r3, r3, r2
    1e42:	429f      	cmp	r7, r3
    1e44:	dad2      	bge.n	1dec <_printf_common+0x38>
    1e46:	0022      	movs	r2, r4
    1e48:	2301      	movs	r3, #1
    1e4a:	3219      	adds	r2, #25
    1e4c:	9901      	ldr	r1, [sp, #4]
    1e4e:	9800      	ldr	r0, [sp, #0]
    1e50:	9e08      	ldr	r6, [sp, #32]
    1e52:	47b0      	blx	r6
    1e54:	1c43      	adds	r3, r0, #1
    1e56:	d1f0      	bne.n	1e3a <_printf_common+0x86>
    1e58:	2001      	movs	r0, #1
    1e5a:	4240      	negs	r0, r0
    1e5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1e5e:	2030      	movs	r0, #48	; 0x30
    1e60:	18e1      	adds	r1, r4, r3
    1e62:	3143      	adds	r1, #67	; 0x43
    1e64:	7008      	strb	r0, [r1, #0]
    1e66:	0021      	movs	r1, r4
    1e68:	1c5a      	adds	r2, r3, #1
    1e6a:	3145      	adds	r1, #69	; 0x45
    1e6c:	7809      	ldrb	r1, [r1, #0]
    1e6e:	18a2      	adds	r2, r4, r2
    1e70:	3243      	adds	r2, #67	; 0x43
    1e72:	3302      	adds	r3, #2
    1e74:	7011      	strb	r1, [r2, #0]
    1e76:	e7c1      	b.n	1dfc <_printf_common+0x48>
    1e78:	0022      	movs	r2, r4
    1e7a:	2301      	movs	r3, #1
    1e7c:	321a      	adds	r2, #26
    1e7e:	9901      	ldr	r1, [sp, #4]
    1e80:	9800      	ldr	r0, [sp, #0]
    1e82:	9e08      	ldr	r6, [sp, #32]
    1e84:	47b0      	blx	r6
    1e86:	1c43      	adds	r3, r0, #1
    1e88:	d0e6      	beq.n	1e58 <_printf_common+0xa4>
    1e8a:	3701      	adds	r7, #1
    1e8c:	e7d1      	b.n	1e32 <_printf_common+0x7e>
	...

00001e90 <_printf_i>:
    1e90:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e92:	b08b      	sub	sp, #44	; 0x2c
    1e94:	9206      	str	r2, [sp, #24]
    1e96:	000a      	movs	r2, r1
    1e98:	3243      	adds	r2, #67	; 0x43
    1e9a:	9307      	str	r3, [sp, #28]
    1e9c:	9005      	str	r0, [sp, #20]
    1e9e:	9204      	str	r2, [sp, #16]
    1ea0:	7e0a      	ldrb	r2, [r1, #24]
    1ea2:	000c      	movs	r4, r1
    1ea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1ea6:	2a6e      	cmp	r2, #110	; 0x6e
    1ea8:	d100      	bne.n	1eac <_printf_i+0x1c>
    1eaa:	e08f      	b.n	1fcc <_printf_i+0x13c>
    1eac:	d817      	bhi.n	1ede <_printf_i+0x4e>
    1eae:	2a63      	cmp	r2, #99	; 0x63
    1eb0:	d02c      	beq.n	1f0c <_printf_i+0x7c>
    1eb2:	d808      	bhi.n	1ec6 <_printf_i+0x36>
    1eb4:	2a00      	cmp	r2, #0
    1eb6:	d100      	bne.n	1eba <_printf_i+0x2a>
    1eb8:	e099      	b.n	1fee <_printf_i+0x15e>
    1eba:	2a58      	cmp	r2, #88	; 0x58
    1ebc:	d054      	beq.n	1f68 <_printf_i+0xd8>
    1ebe:	0026      	movs	r6, r4
    1ec0:	3642      	adds	r6, #66	; 0x42
    1ec2:	7032      	strb	r2, [r6, #0]
    1ec4:	e029      	b.n	1f1a <_printf_i+0x8a>
    1ec6:	2a64      	cmp	r2, #100	; 0x64
    1ec8:	d001      	beq.n	1ece <_printf_i+0x3e>
    1eca:	2a69      	cmp	r2, #105	; 0x69
    1ecc:	d1f7      	bne.n	1ebe <_printf_i+0x2e>
    1ece:	6821      	ldr	r1, [r4, #0]
    1ed0:	681a      	ldr	r2, [r3, #0]
    1ed2:	0608      	lsls	r0, r1, #24
    1ed4:	d523      	bpl.n	1f1e <_printf_i+0x8e>
    1ed6:	1d11      	adds	r1, r2, #4
    1ed8:	6019      	str	r1, [r3, #0]
    1eda:	6815      	ldr	r5, [r2, #0]
    1edc:	e025      	b.n	1f2a <_printf_i+0x9a>
    1ede:	2a73      	cmp	r2, #115	; 0x73
    1ee0:	d100      	bne.n	1ee4 <_printf_i+0x54>
    1ee2:	e088      	b.n	1ff6 <_printf_i+0x166>
    1ee4:	d808      	bhi.n	1ef8 <_printf_i+0x68>
    1ee6:	2a6f      	cmp	r2, #111	; 0x6f
    1ee8:	d029      	beq.n	1f3e <_printf_i+0xae>
    1eea:	2a70      	cmp	r2, #112	; 0x70
    1eec:	d1e7      	bne.n	1ebe <_printf_i+0x2e>
    1eee:	2220      	movs	r2, #32
    1ef0:	6809      	ldr	r1, [r1, #0]
    1ef2:	430a      	orrs	r2, r1
    1ef4:	6022      	str	r2, [r4, #0]
    1ef6:	e003      	b.n	1f00 <_printf_i+0x70>
    1ef8:	2a75      	cmp	r2, #117	; 0x75
    1efa:	d020      	beq.n	1f3e <_printf_i+0xae>
    1efc:	2a78      	cmp	r2, #120	; 0x78
    1efe:	d1de      	bne.n	1ebe <_printf_i+0x2e>
    1f00:	0022      	movs	r2, r4
    1f02:	2178      	movs	r1, #120	; 0x78
    1f04:	3245      	adds	r2, #69	; 0x45
    1f06:	7011      	strb	r1, [r2, #0]
    1f08:	4a6c      	ldr	r2, [pc, #432]	; (20bc <STACK_SIZE+0xbc>)
    1f0a:	e030      	b.n	1f6e <_printf_i+0xde>
    1f0c:	000e      	movs	r6, r1
    1f0e:	681a      	ldr	r2, [r3, #0]
    1f10:	3642      	adds	r6, #66	; 0x42
    1f12:	1d11      	adds	r1, r2, #4
    1f14:	6019      	str	r1, [r3, #0]
    1f16:	6813      	ldr	r3, [r2, #0]
    1f18:	7033      	strb	r3, [r6, #0]
    1f1a:	2301      	movs	r3, #1
    1f1c:	e079      	b.n	2012 <STACK_SIZE+0x12>
    1f1e:	0649      	lsls	r1, r1, #25
    1f20:	d5d9      	bpl.n	1ed6 <_printf_i+0x46>
    1f22:	1d11      	adds	r1, r2, #4
    1f24:	6019      	str	r1, [r3, #0]
    1f26:	2300      	movs	r3, #0
    1f28:	5ed5      	ldrsh	r5, [r2, r3]
    1f2a:	2d00      	cmp	r5, #0
    1f2c:	da03      	bge.n	1f36 <_printf_i+0xa6>
    1f2e:	232d      	movs	r3, #45	; 0x2d
    1f30:	9a04      	ldr	r2, [sp, #16]
    1f32:	426d      	negs	r5, r5
    1f34:	7013      	strb	r3, [r2, #0]
    1f36:	4b62      	ldr	r3, [pc, #392]	; (20c0 <STACK_SIZE+0xc0>)
    1f38:	270a      	movs	r7, #10
    1f3a:	9303      	str	r3, [sp, #12]
    1f3c:	e02f      	b.n	1f9e <_printf_i+0x10e>
    1f3e:	6820      	ldr	r0, [r4, #0]
    1f40:	6819      	ldr	r1, [r3, #0]
    1f42:	0605      	lsls	r5, r0, #24
    1f44:	d503      	bpl.n	1f4e <_printf_i+0xbe>
    1f46:	1d08      	adds	r0, r1, #4
    1f48:	6018      	str	r0, [r3, #0]
    1f4a:	680d      	ldr	r5, [r1, #0]
    1f4c:	e005      	b.n	1f5a <_printf_i+0xca>
    1f4e:	0640      	lsls	r0, r0, #25
    1f50:	d5f9      	bpl.n	1f46 <_printf_i+0xb6>
    1f52:	680d      	ldr	r5, [r1, #0]
    1f54:	1d08      	adds	r0, r1, #4
    1f56:	6018      	str	r0, [r3, #0]
    1f58:	b2ad      	uxth	r5, r5
    1f5a:	4b59      	ldr	r3, [pc, #356]	; (20c0 <STACK_SIZE+0xc0>)
    1f5c:	2708      	movs	r7, #8
    1f5e:	9303      	str	r3, [sp, #12]
    1f60:	2a6f      	cmp	r2, #111	; 0x6f
    1f62:	d018      	beq.n	1f96 <_printf_i+0x106>
    1f64:	270a      	movs	r7, #10
    1f66:	e016      	b.n	1f96 <_printf_i+0x106>
    1f68:	3145      	adds	r1, #69	; 0x45
    1f6a:	700a      	strb	r2, [r1, #0]
    1f6c:	4a54      	ldr	r2, [pc, #336]	; (20c0 <STACK_SIZE+0xc0>)
    1f6e:	9203      	str	r2, [sp, #12]
    1f70:	681a      	ldr	r2, [r3, #0]
    1f72:	6821      	ldr	r1, [r4, #0]
    1f74:	1d10      	adds	r0, r2, #4
    1f76:	6018      	str	r0, [r3, #0]
    1f78:	6815      	ldr	r5, [r2, #0]
    1f7a:	0608      	lsls	r0, r1, #24
    1f7c:	d522      	bpl.n	1fc4 <_printf_i+0x134>
    1f7e:	07cb      	lsls	r3, r1, #31
    1f80:	d502      	bpl.n	1f88 <_printf_i+0xf8>
    1f82:	2320      	movs	r3, #32
    1f84:	4319      	orrs	r1, r3
    1f86:	6021      	str	r1, [r4, #0]
    1f88:	2710      	movs	r7, #16
    1f8a:	2d00      	cmp	r5, #0
    1f8c:	d103      	bne.n	1f96 <_printf_i+0x106>
    1f8e:	2320      	movs	r3, #32
    1f90:	6822      	ldr	r2, [r4, #0]
    1f92:	439a      	bics	r2, r3
    1f94:	6022      	str	r2, [r4, #0]
    1f96:	0023      	movs	r3, r4
    1f98:	2200      	movs	r2, #0
    1f9a:	3343      	adds	r3, #67	; 0x43
    1f9c:	701a      	strb	r2, [r3, #0]
    1f9e:	6863      	ldr	r3, [r4, #4]
    1fa0:	60a3      	str	r3, [r4, #8]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	db5c      	blt.n	2060 <STACK_SIZE+0x60>
    1fa6:	2204      	movs	r2, #4
    1fa8:	6821      	ldr	r1, [r4, #0]
    1faa:	4391      	bics	r1, r2
    1fac:	6021      	str	r1, [r4, #0]
    1fae:	2d00      	cmp	r5, #0
    1fb0:	d158      	bne.n	2064 <STACK_SIZE+0x64>
    1fb2:	9e04      	ldr	r6, [sp, #16]
    1fb4:	2b00      	cmp	r3, #0
    1fb6:	d064      	beq.n	2082 <STACK_SIZE+0x82>
    1fb8:	0026      	movs	r6, r4
    1fba:	9b03      	ldr	r3, [sp, #12]
    1fbc:	3642      	adds	r6, #66	; 0x42
    1fbe:	781b      	ldrb	r3, [r3, #0]
    1fc0:	7033      	strb	r3, [r6, #0]
    1fc2:	e05e      	b.n	2082 <STACK_SIZE+0x82>
    1fc4:	0648      	lsls	r0, r1, #25
    1fc6:	d5da      	bpl.n	1f7e <_printf_i+0xee>
    1fc8:	b2ad      	uxth	r5, r5
    1fca:	e7d8      	b.n	1f7e <_printf_i+0xee>
    1fcc:	6809      	ldr	r1, [r1, #0]
    1fce:	681a      	ldr	r2, [r3, #0]
    1fd0:	0608      	lsls	r0, r1, #24
    1fd2:	d505      	bpl.n	1fe0 <_printf_i+0x150>
    1fd4:	1d11      	adds	r1, r2, #4
    1fd6:	6019      	str	r1, [r3, #0]
    1fd8:	6813      	ldr	r3, [r2, #0]
    1fda:	6962      	ldr	r2, [r4, #20]
    1fdc:	601a      	str	r2, [r3, #0]
    1fde:	e006      	b.n	1fee <_printf_i+0x15e>
    1fe0:	0649      	lsls	r1, r1, #25
    1fe2:	d5f7      	bpl.n	1fd4 <_printf_i+0x144>
    1fe4:	1d11      	adds	r1, r2, #4
    1fe6:	6019      	str	r1, [r3, #0]
    1fe8:	6813      	ldr	r3, [r2, #0]
    1fea:	8aa2      	ldrh	r2, [r4, #20]
    1fec:	801a      	strh	r2, [r3, #0]
    1fee:	2300      	movs	r3, #0
    1ff0:	9e04      	ldr	r6, [sp, #16]
    1ff2:	6123      	str	r3, [r4, #16]
    1ff4:	e054      	b.n	20a0 <STACK_SIZE+0xa0>
    1ff6:	681a      	ldr	r2, [r3, #0]
    1ff8:	1d11      	adds	r1, r2, #4
    1ffa:	6019      	str	r1, [r3, #0]
    1ffc:	6816      	ldr	r6, [r2, #0]
    1ffe:	2100      	movs	r1, #0
    2000:	6862      	ldr	r2, [r4, #4]
    2002:	0030      	movs	r0, r6
    2004:	f000 f870 	bl	20e8 <memchr>
    2008:	2800      	cmp	r0, #0
    200a:	d001      	beq.n	2010 <STACK_SIZE+0x10>
    200c:	1b80      	subs	r0, r0, r6
    200e:	6060      	str	r0, [r4, #4]
    2010:	6863      	ldr	r3, [r4, #4]
    2012:	6123      	str	r3, [r4, #16]
    2014:	2300      	movs	r3, #0
    2016:	9a04      	ldr	r2, [sp, #16]
    2018:	7013      	strb	r3, [r2, #0]
    201a:	e041      	b.n	20a0 <STACK_SIZE+0xa0>
    201c:	6923      	ldr	r3, [r4, #16]
    201e:	0032      	movs	r2, r6
    2020:	9906      	ldr	r1, [sp, #24]
    2022:	9805      	ldr	r0, [sp, #20]
    2024:	9d07      	ldr	r5, [sp, #28]
    2026:	47a8      	blx	r5
    2028:	1c43      	adds	r3, r0, #1
    202a:	d043      	beq.n	20b4 <STACK_SIZE+0xb4>
    202c:	6823      	ldr	r3, [r4, #0]
    202e:	2500      	movs	r5, #0
    2030:	079b      	lsls	r3, r3, #30
    2032:	d40f      	bmi.n	2054 <STACK_SIZE+0x54>
    2034:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2036:	68e0      	ldr	r0, [r4, #12]
    2038:	4298      	cmp	r0, r3
    203a:	da3d      	bge.n	20b8 <STACK_SIZE+0xb8>
    203c:	0018      	movs	r0, r3
    203e:	e03b      	b.n	20b8 <STACK_SIZE+0xb8>
    2040:	0022      	movs	r2, r4
    2042:	2301      	movs	r3, #1
    2044:	3219      	adds	r2, #25
    2046:	9906      	ldr	r1, [sp, #24]
    2048:	9805      	ldr	r0, [sp, #20]
    204a:	9e07      	ldr	r6, [sp, #28]
    204c:	47b0      	blx	r6
    204e:	1c43      	adds	r3, r0, #1
    2050:	d030      	beq.n	20b4 <STACK_SIZE+0xb4>
    2052:	3501      	adds	r5, #1
    2054:	68e3      	ldr	r3, [r4, #12]
    2056:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2058:	1a9b      	subs	r3, r3, r2
    205a:	429d      	cmp	r5, r3
    205c:	dbf0      	blt.n	2040 <STACK_SIZE+0x40>
    205e:	e7e9      	b.n	2034 <STACK_SIZE+0x34>
    2060:	2d00      	cmp	r5, #0
    2062:	d0a9      	beq.n	1fb8 <_printf_i+0x128>
    2064:	9e04      	ldr	r6, [sp, #16]
    2066:	0028      	movs	r0, r5
    2068:	0039      	movs	r1, r7
    206a:	f7ff fb69 	bl	1740 <__aeabi_uidivmod>
    206e:	9b03      	ldr	r3, [sp, #12]
    2070:	3e01      	subs	r6, #1
    2072:	5c5b      	ldrb	r3, [r3, r1]
    2074:	0028      	movs	r0, r5
    2076:	7033      	strb	r3, [r6, #0]
    2078:	0039      	movs	r1, r7
    207a:	f7ff fadb 	bl	1634 <__udivsi3>
    207e:	1e05      	subs	r5, r0, #0
    2080:	d1f1      	bne.n	2066 <STACK_SIZE+0x66>
    2082:	2f08      	cmp	r7, #8
    2084:	d109      	bne.n	209a <STACK_SIZE+0x9a>
    2086:	6823      	ldr	r3, [r4, #0]
    2088:	07db      	lsls	r3, r3, #31
    208a:	d506      	bpl.n	209a <STACK_SIZE+0x9a>
    208c:	6863      	ldr	r3, [r4, #4]
    208e:	6922      	ldr	r2, [r4, #16]
    2090:	4293      	cmp	r3, r2
    2092:	dc02      	bgt.n	209a <STACK_SIZE+0x9a>
    2094:	2330      	movs	r3, #48	; 0x30
    2096:	3e01      	subs	r6, #1
    2098:	7033      	strb	r3, [r6, #0]
    209a:	9b04      	ldr	r3, [sp, #16]
    209c:	1b9b      	subs	r3, r3, r6
    209e:	6123      	str	r3, [r4, #16]
    20a0:	9b07      	ldr	r3, [sp, #28]
    20a2:	aa09      	add	r2, sp, #36	; 0x24
    20a4:	9300      	str	r3, [sp, #0]
    20a6:	0021      	movs	r1, r4
    20a8:	9b06      	ldr	r3, [sp, #24]
    20aa:	9805      	ldr	r0, [sp, #20]
    20ac:	f7ff fe82 	bl	1db4 <_printf_common>
    20b0:	1c43      	adds	r3, r0, #1
    20b2:	d1b3      	bne.n	201c <STACK_SIZE+0x1c>
    20b4:	2001      	movs	r0, #1
    20b6:	4240      	negs	r0, r0
    20b8:	b00b      	add	sp, #44	; 0x2c
    20ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20bc:	00002556 	.word	0x00002556
    20c0:	00002545 	.word	0x00002545

000020c4 <_sbrk_r>:
    20c4:	2300      	movs	r3, #0
    20c6:	b570      	push	{r4, r5, r6, lr}
    20c8:	4c06      	ldr	r4, [pc, #24]	; (20e4 <_sbrk_r+0x20>)
    20ca:	0005      	movs	r5, r0
    20cc:	0008      	movs	r0, r1
    20ce:	6023      	str	r3, [r4, #0]
    20d0:	f7fe fc6c 	bl	9ac <_sbrk>
    20d4:	1c43      	adds	r3, r0, #1
    20d6:	d103      	bne.n	20e0 <_sbrk_r+0x1c>
    20d8:	6823      	ldr	r3, [r4, #0]
    20da:	2b00      	cmp	r3, #0
    20dc:	d000      	beq.n	20e0 <_sbrk_r+0x1c>
    20de:	602b      	str	r3, [r5, #0]
    20e0:	bd70      	pop	{r4, r5, r6, pc}
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	2000017c 	.word	0x2000017c

000020e8 <memchr>:
    20e8:	b2c9      	uxtb	r1, r1
    20ea:	1882      	adds	r2, r0, r2
    20ec:	4290      	cmp	r0, r2
    20ee:	d101      	bne.n	20f4 <memchr+0xc>
    20f0:	2000      	movs	r0, #0
    20f2:	4770      	bx	lr
    20f4:	7803      	ldrb	r3, [r0, #0]
    20f6:	428b      	cmp	r3, r1
    20f8:	d0fb      	beq.n	20f2 <memchr+0xa>
    20fa:	3001      	adds	r0, #1
    20fc:	e7f6      	b.n	20ec <memchr+0x4>

000020fe <memcpy>:
    20fe:	2300      	movs	r3, #0
    2100:	b510      	push	{r4, lr}
    2102:	429a      	cmp	r2, r3
    2104:	d100      	bne.n	2108 <memcpy+0xa>
    2106:	bd10      	pop	{r4, pc}
    2108:	5ccc      	ldrb	r4, [r1, r3]
    210a:	54c4      	strb	r4, [r0, r3]
    210c:	3301      	adds	r3, #1
    210e:	e7f8      	b.n	2102 <memcpy+0x4>

00002110 <memmove>:
    2110:	b510      	push	{r4, lr}
    2112:	4288      	cmp	r0, r1
    2114:	d902      	bls.n	211c <memmove+0xc>
    2116:	188b      	adds	r3, r1, r2
    2118:	4298      	cmp	r0, r3
    211a:	d308      	bcc.n	212e <memmove+0x1e>
    211c:	2300      	movs	r3, #0
    211e:	429a      	cmp	r2, r3
    2120:	d007      	beq.n	2132 <memmove+0x22>
    2122:	5ccc      	ldrb	r4, [r1, r3]
    2124:	54c4      	strb	r4, [r0, r3]
    2126:	3301      	adds	r3, #1
    2128:	e7f9      	b.n	211e <memmove+0xe>
    212a:	5c8b      	ldrb	r3, [r1, r2]
    212c:	5483      	strb	r3, [r0, r2]
    212e:	3a01      	subs	r2, #1
    2130:	d2fb      	bcs.n	212a <memmove+0x1a>
    2132:	bd10      	pop	{r4, pc}

00002134 <__malloc_lock>:
    2134:	4770      	bx	lr

00002136 <__malloc_unlock>:
    2136:	4770      	bx	lr

00002138 <_free_r>:
    2138:	b570      	push	{r4, r5, r6, lr}
    213a:	0005      	movs	r5, r0
    213c:	2900      	cmp	r1, #0
    213e:	d010      	beq.n	2162 <_free_r+0x2a>
    2140:	1f0c      	subs	r4, r1, #4
    2142:	6823      	ldr	r3, [r4, #0]
    2144:	2b00      	cmp	r3, #0
    2146:	da00      	bge.n	214a <_free_r+0x12>
    2148:	18e4      	adds	r4, r4, r3
    214a:	0028      	movs	r0, r5
    214c:	f7ff fff2 	bl	2134 <__malloc_lock>
    2150:	4a1d      	ldr	r2, [pc, #116]	; (21c8 <_free_r+0x90>)
    2152:	6813      	ldr	r3, [r2, #0]
    2154:	2b00      	cmp	r3, #0
    2156:	d105      	bne.n	2164 <_free_r+0x2c>
    2158:	6063      	str	r3, [r4, #4]
    215a:	6014      	str	r4, [r2, #0]
    215c:	0028      	movs	r0, r5
    215e:	f7ff ffea 	bl	2136 <__malloc_unlock>
    2162:	bd70      	pop	{r4, r5, r6, pc}
    2164:	42a3      	cmp	r3, r4
    2166:	d909      	bls.n	217c <_free_r+0x44>
    2168:	6821      	ldr	r1, [r4, #0]
    216a:	1860      	adds	r0, r4, r1
    216c:	4283      	cmp	r3, r0
    216e:	d1f3      	bne.n	2158 <_free_r+0x20>
    2170:	6818      	ldr	r0, [r3, #0]
    2172:	685b      	ldr	r3, [r3, #4]
    2174:	1841      	adds	r1, r0, r1
    2176:	6021      	str	r1, [r4, #0]
    2178:	e7ee      	b.n	2158 <_free_r+0x20>
    217a:	0013      	movs	r3, r2
    217c:	685a      	ldr	r2, [r3, #4]
    217e:	2a00      	cmp	r2, #0
    2180:	d001      	beq.n	2186 <_free_r+0x4e>
    2182:	42a2      	cmp	r2, r4
    2184:	d9f9      	bls.n	217a <_free_r+0x42>
    2186:	6819      	ldr	r1, [r3, #0]
    2188:	1858      	adds	r0, r3, r1
    218a:	42a0      	cmp	r0, r4
    218c:	d10b      	bne.n	21a6 <_free_r+0x6e>
    218e:	6820      	ldr	r0, [r4, #0]
    2190:	1809      	adds	r1, r1, r0
    2192:	1858      	adds	r0, r3, r1
    2194:	6019      	str	r1, [r3, #0]
    2196:	4282      	cmp	r2, r0
    2198:	d1e0      	bne.n	215c <_free_r+0x24>
    219a:	6810      	ldr	r0, [r2, #0]
    219c:	6852      	ldr	r2, [r2, #4]
    219e:	1841      	adds	r1, r0, r1
    21a0:	6019      	str	r1, [r3, #0]
    21a2:	605a      	str	r2, [r3, #4]
    21a4:	e7da      	b.n	215c <_free_r+0x24>
    21a6:	42a0      	cmp	r0, r4
    21a8:	d902      	bls.n	21b0 <_free_r+0x78>
    21aa:	230c      	movs	r3, #12
    21ac:	602b      	str	r3, [r5, #0]
    21ae:	e7d5      	b.n	215c <_free_r+0x24>
    21b0:	6821      	ldr	r1, [r4, #0]
    21b2:	1860      	adds	r0, r4, r1
    21b4:	4282      	cmp	r2, r0
    21b6:	d103      	bne.n	21c0 <_free_r+0x88>
    21b8:	6810      	ldr	r0, [r2, #0]
    21ba:	6852      	ldr	r2, [r2, #4]
    21bc:	1841      	adds	r1, r0, r1
    21be:	6021      	str	r1, [r4, #0]
    21c0:	6062      	str	r2, [r4, #4]
    21c2:	605c      	str	r4, [r3, #4]
    21c4:	e7ca      	b.n	215c <_free_r+0x24>
    21c6:	46c0      	nop			; (mov r8, r8)
    21c8:	20000108 	.word	0x20000108

000021cc <_realloc_r>:
    21cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ce:	0007      	movs	r7, r0
    21d0:	000d      	movs	r5, r1
    21d2:	0016      	movs	r6, r2
    21d4:	2900      	cmp	r1, #0
    21d6:	d105      	bne.n	21e4 <_realloc_r+0x18>
    21d8:	0011      	movs	r1, r2
    21da:	f7ff fc27 	bl	1a2c <_malloc_r>
    21de:	0004      	movs	r4, r0
    21e0:	0020      	movs	r0, r4
    21e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21e4:	2a00      	cmp	r2, #0
    21e6:	d103      	bne.n	21f0 <_realloc_r+0x24>
    21e8:	f7ff ffa6 	bl	2138 <_free_r>
    21ec:	0034      	movs	r4, r6
    21ee:	e7f7      	b.n	21e0 <_realloc_r+0x14>
    21f0:	f000 f812 	bl	2218 <_malloc_usable_size_r>
    21f4:	002c      	movs	r4, r5
    21f6:	4286      	cmp	r6, r0
    21f8:	d9f2      	bls.n	21e0 <_realloc_r+0x14>
    21fa:	0031      	movs	r1, r6
    21fc:	0038      	movs	r0, r7
    21fe:	f7ff fc15 	bl	1a2c <_malloc_r>
    2202:	1e04      	subs	r4, r0, #0
    2204:	d0ec      	beq.n	21e0 <_realloc_r+0x14>
    2206:	0029      	movs	r1, r5
    2208:	0032      	movs	r2, r6
    220a:	f7ff ff78 	bl	20fe <memcpy>
    220e:	0029      	movs	r1, r5
    2210:	0038      	movs	r0, r7
    2212:	f7ff ff91 	bl	2138 <_free_r>
    2216:	e7e3      	b.n	21e0 <_realloc_r+0x14>

00002218 <_malloc_usable_size_r>:
    2218:	1f0b      	subs	r3, r1, #4
    221a:	681b      	ldr	r3, [r3, #0]
    221c:	1f18      	subs	r0, r3, #4
    221e:	2b00      	cmp	r3, #0
    2220:	da01      	bge.n	2226 <_malloc_usable_size_r+0xe>
    2222:	580b      	ldr	r3, [r1, r0]
    2224:	18c0      	adds	r0, r0, r3
    2226:	4770      	bx	lr
    2228:	682f2e2e 	.word	0x682f2e2e
    222c:	732f6c61 	.word	0x732f6c61
    2230:	682f6372 	.word	0x682f6372
    2234:	635f6c61 	.word	0x635f6c61
    2238:	6e656c61 	.word	0x6e656c61
    223c:	2e726164 	.word	0x2e726164
    2240:	00000063 	.word	0x00000063
    2244:	682f2e2e 	.word	0x682f2e2e
    2248:	732f6c61 	.word	0x732f6c61
    224c:	682f6372 	.word	0x682f6372
    2250:	695f6c61 	.word	0x695f6c61
    2254:	00632e6f 	.word	0x00632e6f
    2258:	682f2e2e 	.word	0x682f2e2e
    225c:	732f6c61 	.word	0x732f6c61
    2260:	682f6372 	.word	0x682f6372
    2264:	755f6c61 	.word	0x755f6c61
    2268:	74726173 	.word	0x74726173
    226c:	7973615f 	.word	0x7973615f
    2270:	632e636e 	.word	0x632e636e
    2274:	00000000 	.word	0x00000000
    2278:	682f2e2e 	.word	0x682f2e2e
    227c:	752f6c61 	.word	0x752f6c61
    2280:	736c6974 	.word	0x736c6974
    2284:	6372732f 	.word	0x6372732f
    2288:	6974752f 	.word	0x6974752f
    228c:	725f736c 	.word	0x725f736c
    2290:	62676e69 	.word	0x62676e69
    2294:	65666675 	.word	0x65666675
    2298:	00632e72 	.word	0x00632e72

0000229c <_map>:
    229c:	0000000f 0000000f 682f2e2e 652f6c70     ........../hpl/e
    22ac:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    22bc:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    22cc:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
    22dc:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    22ec:	0000632e 3d3d0a0d 3d3d3d3d 3d3d3d3d     .c....==========
    22fc:	3d3d3d3d 0a0d3d3d 72617473 676e6974     ======..starting
    230c:	5f756d20 74726f70 7365745f 000a0d74      mu_port_test...
    231c:	706f6f6c 20676e69 20726f66 20352e32     looping for 2.5 
    232c:	6f636573 2e73646e 00002e2e 656e6f64     seconds.....done
    233c:	00000a0d 74696177 20676e69 20352e32     ....waiting 2.5 
    234c:	6f636573 2073646e 20726f66 20435452     seconds for RTC 
    235c:	6374616d 2e2e2e68 00000000 73616c66     match.......flas
    236c:	676e6968 44454c20 726f6620 352e3220     hing LED for 2.5
    237c:	63657320 73646e6f 002e2e2e 74696177      seconds....wait
    238c:	20676e69 20726f66 74747562 70206e6f     ing for button p
    239c:	73736572 79732820 7268636e 756f6e6f     ress (synchronou
    23ac:	2e2e2973 0000002e 65636572 64657669     s)......received
    23bc:	74756220 206e6f74 73657270 0a0d2e73      button press...
    23cc:	00000000 74696177 20676e69 20726f66     ....waiting for 
    23dc:	74747562 70206e6f 73736572 73612820     button press (as
    23ec:	68636e79 6f6e6f72 2e297375 00002e2e     ynchronous).....
    23fc:	74696177 20676e69 20726f66 6279656b     waiting for keyb
    240c:	6472616f 706e6920 28207475 636e7973     oard input (sync
    241c:	6e6f7268 2973756f 002e2e2e 65636572     hronous)....rece
    242c:	64657669 63252720 000a0d27 74696177     ived '%c'...wait
    243c:	20676e69 20726f66 6279656b 6472616f     ing for keyboard
    244c:	706e6920 28207475 6e797361 6f726863      input (asynchro
    245c:	73756f6e 2e2e2e29 00000000 65656c73     nous).......slee
    246c:	676e6970 726f6620 352e3220 63657320     ping for 2.5 sec
    247c:	73646e6f 002e2e2e 656e6f64 000a0d2e     onds....done....
    248c:	65656c73 676e6970 746e7520 62206c69     sleeping until b
    249c:	6f747475 7270206e 2e737365 00002e2e     utton press.....
    24ac:	20646e65 6d20666f 6f705f75 745f7472     end of mu_port_t
    24bc:	0d747365 3d3d3d0a 3d3d3d3d 3d3d3d3d     est..===========
    24cc:	3d3d3d3d 000a0d3d                       =====...

000024d4 <__sf_fake_stderr>:
	...

000024f4 <__sf_fake_stdin>:
	...

00002514 <__sf_fake_stdout>:
	...
    2534:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2544:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2554:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2564:	00006665                                ef..

00002568 <_init>:
    2568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    256a:	46c0      	nop			; (mov r8, r8)
    256c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    256e:	bc08      	pop	{r3}
    2570:	469e      	mov	lr, r3
    2572:	4770      	bx	lr

00002574 <__init_array_start>:
    2574:	000000dd 	.word	0x000000dd

00002578 <_fini>:
    2578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    257e:	bc08      	pop	{r3}
    2580:	469e      	mov	lr, r3
    2582:	4770      	bx	lr

00002584 <__fini_array_start>:
    2584:	000000b5 	.word	0x000000b5
