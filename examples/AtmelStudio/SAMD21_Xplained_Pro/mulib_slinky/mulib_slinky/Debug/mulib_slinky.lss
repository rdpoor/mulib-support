
mulib_slinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023a4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  000023a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016c  20000064  00002408  00020064  2**2
                  ALLOC
  3 .stack        00002000  200001d0  00002574  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021d56  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a48  00000000  00000000  00041e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004fe6  00000000  00000000  00045883  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000788  00000000  00000000  0004a869  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000708  00000000  00000000  0004aff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000198fc  00000000  00000000  0004b6f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f261  00000000  00000000  00064ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000868de  00000000  00000000  00074256  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000175c  00000000  00000000  000fab34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 21 00 20 59 04 00 00 55 04 00 00 55 04 00 00     .!. Y...U...U...
	...
      2c:	55 04 00 00 00 00 00 00 00 00 00 00 55 04 00 00     U...........U...
      3c:	55 04 00 00 55 04 00 00 55 04 00 00 55 04 00 00     U...U...U...U...
      4c:	ed 0b 00 00 15 09 00 00 55 04 00 00 55 04 00 00     ........U...U...
      5c:	55 04 00 00 55 04 00 00 55 04 00 00 55 04 00 00     U...U...U...U...
      6c:	55 04 00 00 55 04 00 00 55 04 00 00 55 04 00 00     U...U...U...U...
      7c:	55 04 00 00 55 04 00 00 55 04 00 00 55 04 00 00     U...U...U...U...
      8c:	55 04 00 00 55 04 00 00 55 04 00 00 55 04 00 00     U...U...U...U...
      9c:	55 04 00 00 55 04 00 00 55 04 00 00 55 04 00 00     U...U...U...U...
      ac:	55 04 00 00 00 00 00 00                             U.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	000023a4 	.word	0x000023a4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	000023a4 	.word	0x000023a4
     10c:	000023a4 	.word	0x000023a4
     110:	00000000 	.word	0x00000000

00000114 <default_idle_fn>:
}

static void *default_idle_fn(void *self, void *arg) {
  // the default idle task doesn't do much...
  return self;
}
     114:	4770      	bx	lr
	...

00000118 <sched_task_at>:
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
  }
  sched->event_queue_count -= 1;
}

static mu_sched_err_t sched_task_at(mu_sched_t *sched, mu_task_t *task, mu_time_t time) {
     118:	b5f0      	push	{r4, r5, r6, r7, lr}
     11a:	b083      	sub	sp, #12
     11c:	0004      	movs	r4, r0
     11e:	9101      	str	r1, [sp, #4]
     120:	9200      	str	r2, [sp, #0]
  mu_sched_event_t *event;
  size_t index;

  if (sched->event_queue_count >= sched->event_queue_capacity) {
     122:	6885      	ldr	r5, [r0, #8]
    return MU_SCHED_ERR_FULL;
     124:	2002      	movs	r0, #2
  if (sched->event_queue_count >= sched->event_queue_capacity) {
     126:	6863      	ldr	r3, [r4, #4]
     128:	429d      	cmp	r5, r3
     12a:	d301      	bcc.n	130 <sched_task_at+0x18>
  // fill in the event
  event = &sched->event_queue[index];
  event_init(event, task, time);
  sched->event_queue_count += 1;
  return MU_SCHED_ERR_NONE;
}
     12c:	b003      	add	sp, #12
     12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (sched->event_queue_count == 0) {
     130:	2d00      	cmp	r5, #0
     132:	d10c      	bne.n	14e <sched_task_at+0x36>
  event = &sched->event_queue[index];
     134:	00ed      	lsls	r5, r5, #3
     136:	6823      	ldr	r3, [r4, #0]
     138:	469c      	mov	ip, r3
     13a:	4465      	add	r5, ip
  event->task = task;
     13c:	9b01      	ldr	r3, [sp, #4]
     13e:	606b      	str	r3, [r5, #4]
  event->time = time;
     140:	9b00      	ldr	r3, [sp, #0]
     142:	602b      	str	r3, [r5, #0]
  sched->event_queue_count += 1;
     144:	68a3      	ldr	r3, [r4, #8]
     146:	3301      	adds	r3, #1
     148:	60a3      	str	r3, [r4, #8]
  return MU_SCHED_ERR_NONE;
     14a:	2000      	movs	r0, #0
     14c:	e7ee      	b.n	12c <sched_task_at+0x14>
#else
// linear search for insertion point
static size_t find_insertion_index(mu_sched_t *sched, mu_time_t time) {
  mu_sched_event_t *events = sched->event_queue;

  for (size_t i = sched->event_queue_count - 1; i >= 0; i--) {
     14e:	1e6f      	subs	r7, r5, #1
     150:	4b12      	ldr	r3, [pc, #72]	; (19c <sched_task_at+0x84>)
     152:	469c      	mov	ip, r3
     154:	4465      	add	r5, ip
     156:	00ed      	lsls	r5, r5, #3
     158:	6823      	ldr	r3, [r4, #0]
     15a:	469c      	mov	ip, r3
     15c:	4465      	add	r5, ip
    if (mu_time_precedes(time, events[i].time)) {
     15e:	4e10      	ldr	r6, [pc, #64]	; (1a0 <sched_task_at+0x88>)
     160:	6829      	ldr	r1, [r5, #0]
     162:	9800      	ldr	r0, [sp, #0]
     164:	47b0      	blx	r6
     166:	2800      	cmp	r0, #0
     168:	d104      	bne.n	174 <sched_task_at+0x5c>
     16a:	3d08      	subs	r5, #8
      return i+1;    // precedes incumbent
    } else if (i == 0) {
     16c:	2f00      	cmp	r7, #0
     16e:	d012      	beq.n	196 <sched_task_at+0x7e>
  for (size_t i = sched->event_queue_count - 1; i >= 0; i--) {
     170:	3f01      	subs	r7, #1
     172:	e7f5      	b.n	160 <sched_task_at+0x48>
      return i+1;    // precedes incumbent
     174:	1c7d      	adds	r5, r7, #1
  int to_move = sched->event_queue_count - index;
     176:	68a3      	ldr	r3, [r4, #8]
     178:	1b5a      	subs	r2, r3, r5
  if (to_move > 0) {
     17a:	2a00      	cmp	r2, #0
     17c:	ddda      	ble.n	134 <sched_task_at+0x1c>
    mu_sched_event_t *src = &sched->event_queue[index];
     17e:	00eb      	lsls	r3, r5, #3
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     180:	00d2      	lsls	r2, r2, #3
    mu_sched_event_t *src = &sched->event_queue[index];
     182:	6821      	ldr	r1, [r4, #0]
     184:	18c9      	adds	r1, r1, r3
    mu_sched_event_t *dst = &sched->event_queue[index + 1];
     186:	3308      	adds	r3, #8
     188:	0018      	movs	r0, r3
     18a:	6823      	ldr	r3, [r4, #0]
     18c:	469c      	mov	ip, r3
     18e:	4460      	add	r0, ip
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     190:	4b04      	ldr	r3, [pc, #16]	; (1a4 <sched_task_at+0x8c>)
     192:	4798      	blx	r3
     194:	e7ce      	b.n	134 <sched_task_at+0x1c>
      return 0;      // follows all
     196:	003d      	movs	r5, r7
     198:	e7ed      	b.n	176 <sched_task_at+0x5e>
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	1fffffff 	.word	0x1fffffff
     1a0:	0000041d 	.word	0x0000041d
     1a4:	0000128b 	.word	0x0000128b

000001a8 <mu_sched_reset>:
mu_sched_t *mu_sched_reset(mu_sched_t *sched) {
     1a8:	b570      	push	{r4, r5, r6, lr}
     1aa:	0004      	movs	r4, r0
  sched->event_queue_count = 0;
     1ac:	2500      	movs	r5, #0
     1ae:	6085      	str	r5, [r0, #8]
  mu_spscq_reset(sched->isr_queue);
     1b0:	68c0      	ldr	r0, [r0, #12]
     1b2:	4b02      	ldr	r3, [pc, #8]	; (1bc <mu_sched_reset+0x14>)
     1b4:	4798      	blx	r3
  sched->current_event.task = NULL;
     1b6:	61e5      	str	r5, [r4, #28]
}
     1b8:	0020      	movs	r0, r4
     1ba:	bd70      	pop	{r4, r5, r6, pc}
     1bc:	0000033b 	.word	0x0000033b

000001c0 <mu_sched_init>:
                          mu_spscq_t *isr_queue) {
     1c0:	b570      	push	{r4, r5, r6, lr}
     1c2:	0004      	movs	r4, r0
  sched->event_queue = event_queue;
     1c4:	6001      	str	r1, [r0, #0]
  sched->event_queue_capacity = event_queue_capacity;
     1c6:	6042      	str	r2, [r0, #4]
  sched->isr_queue = isr_queue;
     1c8:	60c3      	str	r3, [r0, #12]
  sched->clock_fn = mu_time_now;
     1ca:	4b06      	ldr	r3, [pc, #24]	; (1e4 <mu_sched_init+0x24>)
     1cc:	6103      	str	r3, [r0, #16]
  sched->idle_task = &s_default_idle_task;
     1ce:	4806      	ldr	r0, [pc, #24]	; (1e8 <mu_sched_init+0x28>)
     1d0:	6160      	str	r0, [r4, #20]
  mu_task_init(&s_default_idle_task, default_idle_fn, NULL, "Idle");
     1d2:	4b06      	ldr	r3, [pc, #24]	; (1ec <mu_sched_init+0x2c>)
     1d4:	2200      	movs	r2, #0
     1d6:	4906      	ldr	r1, [pc, #24]	; (1f0 <mu_sched_init+0x30>)
     1d8:	4d06      	ldr	r5, [pc, #24]	; (1f4 <mu_sched_init+0x34>)
     1da:	47a8      	blx	r5
  return mu_sched_reset(sched);
     1dc:	0020      	movs	r0, r4
     1de:	4b06      	ldr	r3, [pc, #24]	; (1f8 <mu_sched_init+0x38>)
     1e0:	4798      	blx	r3
}
     1e2:	bd70      	pop	{r4, r5, r6, pc}
     1e4:	0000043d 	.word	0x0000043d
     1e8:	20000080 	.word	0x20000080
     1ec:	000021f8 	.word	0x000021f8
     1f0:	00000115 	.word	0x00000115
     1f4:	000003b3 	.word	0x000003b3
     1f8:	000001a9 	.word	0x000001a9

000001fc <mu_sched_set_idle_task>:
  sched->idle_task = task;
     1fc:	6141      	str	r1, [r0, #20]
}
     1fe:	4770      	bx	lr

00000200 <mu_sched_get_current_time>:
mu_time_t mu_sched_get_current_time(mu_sched_t *sched) {
     200:	b510      	push	{r4, lr}
  return sched->clock_fn();
     202:	6903      	ldr	r3, [r0, #16]
     204:	4798      	blx	r3
}
     206:	bd10      	pop	{r4, pc}

00000208 <mu_sched_get_next_event>:
  if (sched->event_queue_count == 0) {
     208:	6883      	ldr	r3, [r0, #8]
     20a:	2b00      	cmp	r3, #0
     20c:	d006      	beq.n	21c <mu_sched_get_next_event+0x14>
    return &sched->event_queue[sched->event_queue_count - 1];
     20e:	4a04      	ldr	r2, [pc, #16]	; (220 <mu_sched_get_next_event+0x18>)
     210:	4694      	mov	ip, r2
     212:	4463      	add	r3, ip
     214:	00db      	lsls	r3, r3, #3
     216:	6800      	ldr	r0, [r0, #0]
     218:	18c0      	adds	r0, r0, r3
}
     21a:	4770      	bx	lr
    return NULL;
     21c:	2000      	movs	r0, #0
     21e:	e7fc      	b.n	21a <mu_sched_get_next_event+0x12>
     220:	1fffffff 	.word	0x1fffffff

00000224 <mu_sched_step>:
mu_sched_err_t mu_sched_step(mu_sched_t *sched) {
     224:	b5f0      	push	{r4, r5, r6, r7, lr}
     226:	b083      	sub	sp, #12
     228:	0004      	movs	r4, r0
  mu_time_t now = mu_sched_get_current_time(sched);
     22a:	4b1a      	ldr	r3, [pc, #104]	; (294 <mu_sched_step+0x70>)
     22c:	4798      	blx	r3
     22e:	0005      	movs	r5, r0
  while (mu_spscq_get(sched->isr_queue, (void **)&task) != MU_CQUEUE_ERR_EMPTY) {
     230:	4e19      	ldr	r6, [pc, #100]	; (298 <mu_sched_step+0x74>)
  return sched_task_at(sched, task, at);
     232:	4f1a      	ldr	r7, [pc, #104]	; (29c <mu_sched_step+0x78>)
  while (mu_spscq_get(sched->isr_queue, (void **)&task) != MU_CQUEUE_ERR_EMPTY) {
     234:	a901      	add	r1, sp, #4
     236:	68e0      	ldr	r0, [r4, #12]
     238:	47b0      	blx	r6
     23a:	2801      	cmp	r0, #1
     23c:	d007      	beq.n	24e <mu_sched_step+0x2a>
  return sched_task_at(sched, task, at);
     23e:	002a      	movs	r2, r5
     240:	9901      	ldr	r1, [sp, #4]
     242:	0020      	movs	r0, r4
     244:	47b8      	blx	r7
    if (err != MU_SCHED_ERR_NONE) {
     246:	2800      	cmp	r0, #0
     248:	d0f4      	beq.n	234 <mu_sched_step+0x10>
}
     24a:	b003      	add	sp, #12
     24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  event = mu_sched_get_next_event(sched);
     24e:	0020      	movs	r0, r4
     250:	4b13      	ldr	r3, [pc, #76]	; (2a0 <mu_sched_step+0x7c>)
     252:	4798      	blx	r3
     254:	1e06      	subs	r6, r0, #0
  if (event != NULL) {
     256:	d005      	beq.n	264 <mu_sched_step+0x40>
    if (!mu_time_follows(mu_sched_event_get_time(event), now)) {
     258:	0029      	movs	r1, r5
     25a:	6800      	ldr	r0, [r0, #0]
     25c:	4b11      	ldr	r3, [pc, #68]	; (2a4 <mu_sched_step+0x80>)
     25e:	4798      	blx	r3
     260:	2800      	cmp	r0, #0
     262:	d005      	beq.n	270 <mu_sched_step+0x4c>
  mu_task_call(sched->idle_task, sched);
     264:	6960      	ldr	r0, [r4, #20]
     266:	0021      	movs	r1, r4
     268:	4b0f      	ldr	r3, [pc, #60]	; (2a8 <mu_sched_step+0x84>)
     26a:	4798      	blx	r3
  return MU_SCHED_ERR_NONE;
     26c:	2000      	movs	r0, #0
     26e:	e7ec      	b.n	24a <mu_sched_step+0x26>
      memcpy(&(sched->current_event), event, sizeof(mu_sched_event_t));
     270:	0020      	movs	r0, r4
     272:	3018      	adds	r0, #24
     274:	2208      	movs	r2, #8
     276:	0031      	movs	r1, r6
     278:	4b0c      	ldr	r3, [pc, #48]	; (2ac <mu_sched_step+0x88>)
     27a:	4798      	blx	r3
  return &sched->event_queue[--sched->event_queue_count];
     27c:	68a3      	ldr	r3, [r4, #8]
     27e:	3b01      	subs	r3, #1
     280:	60a3      	str	r3, [r4, #8]
      mu_task_call(sched->current_event.task, sched);
     282:	0021      	movs	r1, r4
     284:	69e0      	ldr	r0, [r4, #28]
     286:	4b08      	ldr	r3, [pc, #32]	; (2a8 <mu_sched_step+0x84>)
     288:	4798      	blx	r3
      sched->current_event.task = NULL;
     28a:	2300      	movs	r3, #0
     28c:	61e3      	str	r3, [r4, #28]
      return MU_SCHED_ERR_NONE;
     28e:	2000      	movs	r0, #0
     290:	e7db      	b.n	24a <mu_sched_step+0x26>
     292:	46c0      	nop			; (mov r8, r8)
     294:	00000201 	.word	0x00000201
     298:	00000389 	.word	0x00000389
     29c:	00000119 	.word	0x00000119
     2a0:	00000209 	.word	0x00000209
     2a4:	00000429 	.word	0x00000429
     2a8:	000003c5 	.word	0x000003c5
     2ac:	00001279 	.word	0x00001279

000002b0 <mu_sched_task_now>:
mu_sched_err_t mu_sched_task_now(mu_sched_t *sched, mu_task_t *task) {
     2b0:	b570      	push	{r4, r5, r6, lr}
     2b2:	0004      	movs	r4, r0
     2b4:	000d      	movs	r5, r1
  return sched_task_at(sched, task, mu_sched_get_current_time(sched));
     2b6:	4b04      	ldr	r3, [pc, #16]	; (2c8 <mu_sched_task_now+0x18>)
     2b8:	4798      	blx	r3
     2ba:	0002      	movs	r2, r0
     2bc:	0029      	movs	r1, r5
     2be:	0020      	movs	r0, r4
     2c0:	4b02      	ldr	r3, [pc, #8]	; (2cc <mu_sched_task_now+0x1c>)
     2c2:	4798      	blx	r3
}
     2c4:	bd70      	pop	{r4, r5, r6, pc}
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	00000201 	.word	0x00000201
     2cc:	00000119 	.word	0x00000119

000002d0 <mu_sched_reschedule_in>:
mu_sched_err_t mu_sched_reschedule_in(mu_sched_t *sched, mu_time_dt in) {
     2d0:	b570      	push	{r4, r5, r6, lr}
     2d2:	0004      	movs	r4, r0
  if (sched->current_event.task == NULL) {
     2d4:	69c3      	ldr	r3, [r0, #28]
     2d6:	2b00      	cmp	r3, #0
     2d8:	d00d      	beq.n	2f6 <mu_sched_reschedule_in+0x26>
    return MU_SCHED_ERR_NOT_FOUND;
     2da:	2003      	movs	r0, #3
  if (!event) {
     2dc:	0023      	movs	r3, r4
     2de:	3318      	adds	r3, #24
     2e0:	d008      	beq.n	2f4 <mu_sched_reschedule_in+0x24>
  mu_task_t *task = event->task;
     2e2:	69e5      	ldr	r5, [r4, #28]
  return sched_task_at(sched, task, mu_time_offset(time, in));
     2e4:	69a0      	ldr	r0, [r4, #24]
     2e6:	4b05      	ldr	r3, [pc, #20]	; (2fc <mu_sched_reschedule_in+0x2c>)
     2e8:	4798      	blx	r3
     2ea:	0002      	movs	r2, r0
     2ec:	0029      	movs	r1, r5
     2ee:	0020      	movs	r0, r4
     2f0:	4b03      	ldr	r3, [pc, #12]	; (300 <mu_sched_reschedule_in+0x30>)
     2f2:	4798      	blx	r3
}
     2f4:	bd70      	pop	{r4, r5, r6, pc}
    return MU_SCHED_ERR_NOT_FOUND;
     2f6:	2003      	movs	r0, #3
     2f8:	e7fc      	b.n	2f4 <mu_sched_reschedule_in+0x24>
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	00000405 	.word	0x00000405
     300:	00000119 	.word	0x00000119

00000304 <mu_sched_task_from_isr>:
mu_sched_err_t mu_sched_task_from_isr(mu_sched_t *sched, mu_task_t *task) {
     304:	b510      	push	{r4, lr}
  if (mu_spscq_put(sched->isr_queue, task) == MU_CQUEUE_ERR_FULL) {
     306:	68c0      	ldr	r0, [r0, #12]
     308:	4b03      	ldr	r3, [pc, #12]	; (318 <mu_sched_task_from_isr+0x14>)
     30a:	4798      	blx	r3
    return MU_SCHED_ERR_NONE;
     30c:	3802      	subs	r0, #2
     30e:	4243      	negs	r3, r0
     310:	4158      	adcs	r0, r3
     312:	0040      	lsls	r0, r0, #1
}
     314:	bd10      	pop	{r4, pc}
     316:	46c0      	nop			; (mov r8, r8)
     318:	00000359 	.word	0x00000359

0000031c <mu_spscq_init>:
// =============================================================================
// public code

mu_spscq_err_t mu_spscq_init(mu_spscq_t *q,
                               mu_spscq_item_t *store,
                               uint16_t capacity) {
     31c:	b510      	push	{r4, lr}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
    return MU_CQUEUE_ERR_SIZE;
     31e:	2303      	movs	r3, #3
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     320:	2a00      	cmp	r2, #0
     322:	d101      	bne.n	328 <mu_spscq_init+0xc>
  }
  q->mask = capacity - 1;
  q->store = store;
  return mu_spscq_reset(q);
}
     324:	0018      	movs	r0, r3
     326:	bd10      	pop	{r4, pc}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     328:	1e54      	subs	r4, r2, #1
     32a:	4222      	tst	r2, r4
     32c:	d1fa      	bne.n	324 <mu_spscq_init+0x8>
  q->mask = capacity - 1;
     32e:	8004      	strh	r4, [r0, #0]
  q->store = store;
     330:	6081      	str	r1, [r0, #8]

mu_spscq_err_t mu_spscq_reset(mu_spscq_t *q) {
  q->head = 0;
     332:	2300      	movs	r3, #0
     334:	8043      	strh	r3, [r0, #2]
  q->tail = 0;
     336:	8083      	strh	r3, [r0, #4]
  return mu_spscq_reset(q);
     338:	e7f4      	b.n	324 <mu_spscq_init+0x8>

0000033a <mu_spscq_reset>:
  q->head = 0;
     33a:	2300      	movs	r3, #0
     33c:	8043      	strh	r3, [r0, #2]
  q->tail = 0;
     33e:	8083      	strh	r3, [r0, #4]
  return MU_CQUEUE_ERR_NONE;
}
     340:	2000      	movs	r0, #0
     342:	4770      	bx	lr

00000344 <mu_spscq_is_full>:

bool mu_spscq_is_empty(mu_spscq_t *q) { return q->head == q->tail; }

bool mu_spscq_is_full(mu_spscq_t *q) {
  // would advancing tail by 1 make it catch up with head?
  return ((q->tail + 1) & q->mask) == q->head;
     344:	8883      	ldrh	r3, [r0, #4]
     346:	8842      	ldrh	r2, [r0, #2]
     348:	3301      	adds	r3, #1
     34a:	8800      	ldrh	r0, [r0, #0]
     34c:	4018      	ands	r0, r3
     34e:	1a80      	subs	r0, r0, r2
     350:	4243      	negs	r3, r0
     352:	4158      	adcs	r0, r3
     354:	b2c0      	uxtb	r0, r0
}
     356:	4770      	bx	lr

00000358 <mu_spscq_put>:

mu_spscq_err_t mu_spscq_put(mu_spscq_t *q, mu_spscq_item_t item) {
     358:	b570      	push	{r4, r5, r6, lr}
     35a:	0004      	movs	r4, r0
     35c:	000d      	movs	r5, r1
  if (mu_spscq_is_full(q)) {
     35e:	4b09      	ldr	r3, [pc, #36]	; (384 <mu_spscq_put+0x2c>)
     360:	4798      	blx	r3
    return MU_CQUEUE_ERR_FULL;
     362:	2302      	movs	r3, #2
  if (mu_spscq_is_full(q)) {
     364:	2800      	cmp	r0, #0
     366:	d001      	beq.n	36c <mu_spscq_put+0x14>
  }
  q->store[q->tail] = item;
  q->tail = (q->tail + 1) & q->mask;
  return MU_CQUEUE_ERR_NONE;
}
     368:	0018      	movs	r0, r3
     36a:	bd70      	pop	{r4, r5, r6, pc}
  q->store[q->tail] = item;
     36c:	88a3      	ldrh	r3, [r4, #4]
     36e:	009b      	lsls	r3, r3, #2
     370:	68a2      	ldr	r2, [r4, #8]
     372:	509d      	str	r5, [r3, r2]
  q->tail = (q->tail + 1) & q->mask;
     374:	88a2      	ldrh	r2, [r4, #4]
     376:	3201      	adds	r2, #1
     378:	8823      	ldrh	r3, [r4, #0]
     37a:	4013      	ands	r3, r2
     37c:	80a3      	strh	r3, [r4, #4]
  return MU_CQUEUE_ERR_NONE;
     37e:	2300      	movs	r3, #0
     380:	e7f2      	b.n	368 <mu_spscq_put+0x10>
     382:	46c0      	nop			; (mov r8, r8)
     384:	00000345 	.word	0x00000345

00000388 <mu_spscq_get>:
bool mu_spscq_is_empty(mu_spscq_t *q) { return q->head == q->tail; }
     388:	8843      	ldrh	r3, [r0, #2]
     38a:	8882      	ldrh	r2, [r0, #4]
     38c:	b29b      	uxth	r3, r3

mu_spscq_err_t mu_spscq_get(mu_spscq_t *q, mu_spscq_item_t *item) {
  if (mu_spscq_is_empty(q)) {
     38e:	4293      	cmp	r3, r2
     390:	d00b      	beq.n	3aa <mu_spscq_get+0x22>
    *item = NULL;
    return MU_CQUEUE_ERR_EMPTY;
  }
  *item = q->store[q->head];
     392:	8843      	ldrh	r3, [r0, #2]
     394:	6882      	ldr	r2, [r0, #8]
     396:	009b      	lsls	r3, r3, #2
     398:	589b      	ldr	r3, [r3, r2]
     39a:	600b      	str	r3, [r1, #0]
  q->head = (q->head + 1) & q->mask;
     39c:	8842      	ldrh	r2, [r0, #2]
     39e:	3201      	adds	r2, #1
     3a0:	8803      	ldrh	r3, [r0, #0]
     3a2:	4013      	ands	r3, r2
     3a4:	8043      	strh	r3, [r0, #2]
  return MU_CQUEUE_ERR_NONE;
     3a6:	2000      	movs	r0, #0
}
     3a8:	4770      	bx	lr
    *item = NULL;
     3aa:	2300      	movs	r3, #0
     3ac:	600b      	str	r3, [r1, #0]
    return MU_CQUEUE_ERR_EMPTY;
     3ae:	2001      	movs	r0, #1
     3b0:	e7fa      	b.n	3a8 <mu_spscq_get+0x20>

000003b2 <mu_task_init>:

mu_task_t *mu_task_init(mu_task_t *task,
                        mu_task_fn fn,
                        void *ctx,
                        const char *name) {
  task->fn = fn;
     3b2:	6001      	str	r1, [r0, #0]
  task->ctx = ctx;
     3b4:	6042      	str	r2, [r0, #4]
#if (MU_TASK_PROFILING)
  task->name = name;
     3b6:	6083      	str	r3, [r0, #8]
  task->call_count = 0;
     3b8:	2300      	movs	r3, #0
     3ba:	60c3      	str	r3, [r0, #12]
  task->runtime = 0;
     3bc:	6103      	str	r3, [r0, #16]
  task->max_duration = 0;
     3be:	6143      	str	r3, [r0, #20]
#endif
  return task;
}
     3c0:	4770      	bx	lr
	...

000003c4 <mu_task_call>:
#else
  return "";
#endif
}

void *mu_task_call(mu_task_t *task, void *arg) {
     3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3c6:	0004      	movs	r4, r0
     3c8:	000d      	movs	r5, r1

#if (MU_TASK_PROFILING)
  mu_time_t called_at = mu_time_now();
     3ca:	4f0c      	ldr	r7, [pc, #48]	; (3fc <mu_task_call+0x38>)
     3cc:	47b8      	blx	r7
     3ce:	0006      	movs	r6, r0
#endif
  void *result = task->fn(task->ctx, arg);
     3d0:	0029      	movs	r1, r5
     3d2:	6860      	ldr	r0, [r4, #4]
     3d4:	6823      	ldr	r3, [r4, #0]
     3d6:	4798      	blx	r3
     3d8:	0005      	movs	r5, r0
#if (MU_TASK_PROFILING)
  task->call_count += 1;
     3da:	68e3      	ldr	r3, [r4, #12]
     3dc:	3301      	adds	r3, #1
     3de:	60e3      	str	r3, [r4, #12]
  mu_time_dt duration = mu_time_difference(mu_time_now(), called_at);
     3e0:	47b8      	blx	r7
     3e2:	0031      	movs	r1, r6
     3e4:	4b06      	ldr	r3, [pc, #24]	; (400 <mu_task_call+0x3c>)
     3e6:	4798      	blx	r3
  task->runtime += duration;
     3e8:	6923      	ldr	r3, [r4, #16]
     3ea:	181b      	adds	r3, r3, r0
     3ec:	6123      	str	r3, [r4, #16]
  if (duration > task->max_duration) task->max_duration = duration;
     3ee:	6963      	ldr	r3, [r4, #20]
     3f0:	4298      	cmp	r0, r3
     3f2:	dd00      	ble.n	3f6 <mu_task_call+0x32>
     3f4:	6160      	str	r0, [r4, #20]
#endif
  return result;
}
     3f6:	0028      	movs	r0, r5
     3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	0000043d 	.word	0x0000043d
     400:	00000411 	.word	0x00000411

00000404 <mu_time_offset>:

void mu_time_init(void) {
  // mu_port_init() must be called separately
}

mu_time_t mu_time_offset(mu_time_t t1, mu_time_dt dt) {
     404:	b510      	push	{r4, lr}
  return mu_port_time_offset(t1, dt);
     406:	4b01      	ldr	r3, [pc, #4]	; (40c <mu_time_offset+0x8>)
     408:	4798      	blx	r3
}
     40a:	bd10      	pop	{r4, pc}
     40c:	00001031 	.word	0x00001031

00000410 <mu_time_difference>:

mu_time_dt mu_time_difference(mu_time_t t1, mu_time_t t2) {
     410:	b510      	push	{r4, lr}
  return mu_port_time_difference(t1, t2);
     412:	4b01      	ldr	r3, [pc, #4]	; (418 <mu_time_difference+0x8>)
     414:	4798      	blx	r3
}
     416:	bd10      	pop	{r4, pc}
     418:	00001035 	.word	0x00001035

0000041c <mu_time_precedes>:

bool mu_time_precedes(mu_time_t t1, mu_time_t t2) {
     41c:	b510      	push	{r4, lr}
  return mu_port_time_precedes(t1, t2);
     41e:	4b01      	ldr	r3, [pc, #4]	; (424 <mu_time_precedes+0x8>)
     420:	4798      	blx	r3
}
     422:	bd10      	pop	{r4, pc}
     424:	00001039 	.word	0x00001039

00000428 <mu_time_follows>:

bool mu_time_is_equal(mu_time_t t1, mu_time_t t2) {
  return mu_port_time_is_equal(t1, t2);
}

bool mu_time_follows(mu_time_t t1, mu_time_t t2) {
     428:	b510      	push	{r4, lr}
     42a:	000b      	movs	r3, r1
  return mu_port_time_precedes(t2, t1);
     42c:	0001      	movs	r1, r0
     42e:	0018      	movs	r0, r3
     430:	4b01      	ldr	r3, [pc, #4]	; (438 <mu_time_follows+0x10>)
     432:	4798      	blx	r3
}
     434:	bd10      	pop	{r4, pc}
     436:	46c0      	nop			; (mov r8, r8)
     438:	00001039 	.word	0x00001039

0000043c <mu_time_now>:

mu_time_dt mu_time_seconds_to_duration(mu_time_seconds_dt s) {
  return mu_port_time_seconds_to_duration(s);
}

mu_time_t mu_time_now() {
     43c:	b510      	push	{r4, lr}
  return mu_port_rtc_now();
     43e:	4b01      	ldr	r3, [pc, #4]	; (444 <mu_time_now+0x8>)
     440:	4798      	blx	r3
}
     442:	bd10      	pop	{r4, pc}
     444:	00001041 	.word	0x00001041

00000448 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     448:	b510      	push	{r4, lr}
	system_init();
     44a:	4b01      	ldr	r3, [pc, #4]	; (450 <atmel_start_init+0x8>)
     44c:	4798      	blx	r3
}
     44e:	bd10      	pop	{r4, pc}
     450:	0000063d 	.word	0x0000063d

00000454 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     454:	e7fe      	b.n	454 <Dummy_Handler>
	...

00000458 <Reset_Handler>:
{
     458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     45a:	4a2a      	ldr	r2, [pc, #168]	; (504 <Reset_Handler+0xac>)
     45c:	4b2a      	ldr	r3, [pc, #168]	; (508 <Reset_Handler+0xb0>)
     45e:	429a      	cmp	r2, r3
     460:	d011      	beq.n	486 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     462:	001a      	movs	r2, r3
     464:	4b29      	ldr	r3, [pc, #164]	; (50c <Reset_Handler+0xb4>)
     466:	429a      	cmp	r2, r3
     468:	d20d      	bcs.n	486 <Reset_Handler+0x2e>
     46a:	4a29      	ldr	r2, [pc, #164]	; (510 <Reset_Handler+0xb8>)
     46c:	3303      	adds	r3, #3
     46e:	1a9b      	subs	r3, r3, r2
     470:	089b      	lsrs	r3, r3, #2
     472:	3301      	adds	r3, #1
     474:	009b      	lsls	r3, r3, #2
     476:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     478:	4823      	ldr	r0, [pc, #140]	; (508 <Reset_Handler+0xb0>)
     47a:	4922      	ldr	r1, [pc, #136]	; (504 <Reset_Handler+0xac>)
     47c:	588c      	ldr	r4, [r1, r2]
     47e:	5084      	str	r4, [r0, r2]
     480:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     482:	429a      	cmp	r2, r3
     484:	d1fa      	bne.n	47c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     486:	4a23      	ldr	r2, [pc, #140]	; (514 <Reset_Handler+0xbc>)
     488:	4b23      	ldr	r3, [pc, #140]	; (518 <Reset_Handler+0xc0>)
     48a:	429a      	cmp	r2, r3
     48c:	d20a      	bcs.n	4a4 <Reset_Handler+0x4c>
     48e:	43d3      	mvns	r3, r2
     490:	4921      	ldr	r1, [pc, #132]	; (518 <Reset_Handler+0xc0>)
     492:	185b      	adds	r3, r3, r1
     494:	2103      	movs	r1, #3
     496:	438b      	bics	r3, r1
     498:	3304      	adds	r3, #4
     49a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     49c:	2100      	movs	r1, #0
     49e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     4a0:	4293      	cmp	r3, r2
     4a2:	d1fc      	bne.n	49e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     4a4:	4a1d      	ldr	r2, [pc, #116]	; (51c <Reset_Handler+0xc4>)
     4a6:	21ff      	movs	r1, #255	; 0xff
     4a8:	4b1d      	ldr	r3, [pc, #116]	; (520 <Reset_Handler+0xc8>)
     4aa:	438b      	bics	r3, r1
     4ac:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     4ae:	39fd      	subs	r1, #253	; 0xfd
     4b0:	2390      	movs	r3, #144	; 0x90
     4b2:	005b      	lsls	r3, r3, #1
     4b4:	4a1b      	ldr	r2, [pc, #108]	; (524 <Reset_Handler+0xcc>)
     4b6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     4b8:	4a1b      	ldr	r2, [pc, #108]	; (528 <Reset_Handler+0xd0>)
     4ba:	78d3      	ldrb	r3, [r2, #3]
     4bc:	2503      	movs	r5, #3
     4be:	43ab      	bics	r3, r5
     4c0:	2402      	movs	r4, #2
     4c2:	4323      	orrs	r3, r4
     4c4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     4c6:	78d3      	ldrb	r3, [r2, #3]
     4c8:	270c      	movs	r7, #12
     4ca:	43bb      	bics	r3, r7
     4cc:	2608      	movs	r6, #8
     4ce:	4333      	orrs	r3, r6
     4d0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     4d2:	4b16      	ldr	r3, [pc, #88]	; (52c <Reset_Handler+0xd4>)
     4d4:	7b98      	ldrb	r0, [r3, #14]
     4d6:	2230      	movs	r2, #48	; 0x30
     4d8:	4390      	bics	r0, r2
     4da:	2220      	movs	r2, #32
     4dc:	4310      	orrs	r0, r2
     4de:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     4e0:	7b99      	ldrb	r1, [r3, #14]
     4e2:	43b9      	bics	r1, r7
     4e4:	4331      	orrs	r1, r6
     4e6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     4e8:	7b9a      	ldrb	r2, [r3, #14]
     4ea:	43aa      	bics	r2, r5
     4ec:	4322      	orrs	r2, r4
     4ee:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     4f0:	4a0f      	ldr	r2, [pc, #60]	; (530 <Reset_Handler+0xd8>)
     4f2:	6853      	ldr	r3, [r2, #4]
     4f4:	2180      	movs	r1, #128	; 0x80
     4f6:	430b      	orrs	r3, r1
     4f8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     4fa:	4b0e      	ldr	r3, [pc, #56]	; (534 <Reset_Handler+0xdc>)
     4fc:	4798      	blx	r3
        main();
     4fe:	4b0e      	ldr	r3, [pc, #56]	; (538 <Reset_Handler+0xe0>)
     500:	4798      	blx	r3
     502:	e7fe      	b.n	502 <Reset_Handler+0xaa>
     504:	000023a4 	.word	0x000023a4
     508:	20000000 	.word	0x20000000
     50c:	20000064 	.word	0x20000064
     510:	20000004 	.word	0x20000004
     514:	20000064 	.word	0x20000064
     518:	200001d0 	.word	0x200001d0
     51c:	e000ed00 	.word	0xe000ed00
     520:	00000000 	.word	0x00000000
     524:	41007000 	.word	0x41007000
     528:	41005000 	.word	0x41005000
     52c:	41004800 	.word	0x41004800
     530:	41004000 	.word	0x41004000
     534:	00001231 	.word	0x00001231
     538:	00000ff5 	.word	0x00000ff5

0000053c <EXTERNAL_IRQ_0_init>:
#include <hpl_pm_base.h>

struct calendar_descriptor CALENDAR_0;

void EXTERNAL_IRQ_0_init(void)
{
     53c:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     53e:	4a11      	ldr	r2, [pc, #68]	; (584 <EXTERNAL_IRQ_0_init+0x48>)
     540:	4b11      	ldr	r3, [pc, #68]	; (588 <EXTERNAL_IRQ_0_init+0x4c>)
     542:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     544:	22c0      	movs	r2, #192	; 0xc0
     546:	05d2      	lsls	r2, r2, #23
     548:	2080      	movs	r0, #128	; 0x80
     54a:	0200      	lsls	r0, r0, #8
     54c:	6050      	str	r0, [r2, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     54e:	4b0f      	ldr	r3, [pc, #60]	; (58c <EXTERNAL_IRQ_0_init+0x50>)
     550:	490f      	ldr	r1, [pc, #60]	; (590 <EXTERNAL_IRQ_0_init+0x54>)
     552:	6299      	str	r1, [r3, #40]	; 0x28
     554:	490f      	ldr	r1, [pc, #60]	; (594 <EXTERNAL_IRQ_0_init+0x58>)
     556:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     558:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     55a:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     55c:	214f      	movs	r1, #79	; 0x4f
     55e:	5c5c      	ldrb	r4, [r3, r1]
     560:	2504      	movs	r5, #4
     562:	432c      	orrs	r4, r5
     564:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     566:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     568:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     56a:	2001      	movs	r0, #1
     56c:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     56e:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     570:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     572:	3918      	subs	r1, #24
     574:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     576:	300e      	adds	r0, #14
     578:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     57a:	545a      	strb	r2, [r3, r1]
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA15A_EIC_EXTINT15);

	ext_irq_init();
     57c:	4b06      	ldr	r3, [pc, #24]	; (598 <EXTERNAL_IRQ_0_init+0x5c>)
     57e:	4798      	blx	r3
}
     580:	bd70      	pop	{r4, r5, r6, pc}
     582:	46c0      	nop			; (mov r8, r8)
     584:	00004005 	.word	0x00004005
     588:	40000c00 	.word	0x40000c00
     58c:	41004400 	.word	0x41004400
     590:	40028000 	.word	0x40028000
     594:	c0020000 	.word	0xc0020000
     598:	00000749 	.word	0x00000749

0000059c <USART_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     59c:	4a04      	ldr	r2, [pc, #16]	; (5b0 <USART_0_CLOCK_init+0x14>)
     59e:	6a13      	ldr	r3, [r2, #32]
     5a0:	2120      	movs	r1, #32
     5a2:	430b      	orrs	r3, r1
     5a4:	6213      	str	r3, [r2, #32]
     5a6:	4a03      	ldr	r2, [pc, #12]	; (5b4 <USART_0_CLOCK_init+0x18>)
     5a8:	4b03      	ldr	r3, [pc, #12]	; (5b8 <USART_0_CLOCK_init+0x1c>)
     5aa:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     5ac:	4770      	bx	lr
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	40000400 	.word	0x40000400
     5b4:	00004017 	.word	0x00004017
     5b8:	40000c00 	.word	0x40000c00

000005bc <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     5bc:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5be:	4b0e      	ldr	r3, [pc, #56]	; (5f8 <USART_0_PORT_init+0x3c>)
     5c0:	2256      	movs	r2, #86	; 0x56
     5c2:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5c4:	2501      	movs	r5, #1
     5c6:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5c8:	2401      	movs	r4, #1
     5ca:	4321      	orrs	r1, r4
     5cc:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ce:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5d0:	203b      	movs	r0, #59	; 0x3b
     5d2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5d4:	3a47      	subs	r2, #71	; 0x47
     5d6:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     5d8:	3a0d      	subs	r2, #13
     5da:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5dc:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5de:	2157      	movs	r1, #87	; 0x57
     5e0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5e2:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5e4:	4322      	orrs	r2, r4
     5e6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5e8:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5ea:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5ec:	3948      	subs	r1, #72	; 0x48
     5ee:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     5f0:	3111      	adds	r1, #17
     5f2:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5f4:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(EDBG_TX, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(EDBG_RX, PINMUX_PA23C_SERCOM3_PAD1);
}
     5f6:	bd30      	pop	{r4, r5, pc}
     5f8:	41004400 	.word	0x41004400

000005fc <CALENDAR_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     5fc:	4a04      	ldr	r2, [pc, #16]	; (610 <CALENDAR_0_CLOCK_init+0x14>)
     5fe:	6993      	ldr	r3, [r2, #24]
     600:	2120      	movs	r1, #32
     602:	430b      	orrs	r3, r1
     604:	6193      	str	r3, [r2, #24]
     606:	4a03      	ldr	r2, [pc, #12]	; (614 <CALENDAR_0_CLOCK_init+0x18>)
     608:	4b03      	ldr	r3, [pc, #12]	; (618 <CALENDAR_0_CLOCK_init+0x1c>)
     60a:	805a      	strh	r2, [r3, #2]

void CALENDAR_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
     60c:	4770      	bx	lr
     60e:	46c0      	nop			; (mov r8, r8)
     610:	40000400 	.word	0x40000400
     614:	00004304 	.word	0x00004304
     618:	40000c00 	.word	0x40000c00

0000061c <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     61c:	b510      	push	{r4, lr}
	CALENDAR_0_CLOCK_init();
     61e:	4b03      	ldr	r3, [pc, #12]	; (62c <CALENDAR_0_init+0x10>)
     620:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     622:	4903      	ldr	r1, [pc, #12]	; (630 <CALENDAR_0_init+0x14>)
     624:	4803      	ldr	r0, [pc, #12]	; (634 <CALENDAR_0_init+0x18>)
     626:	4b04      	ldr	r3, [pc, #16]	; (638 <CALENDAR_0_init+0x1c>)
     628:	4798      	blx	r3
}
     62a:	bd10      	pop	{r4, pc}
     62c:	000005fd 	.word	0x000005fd
     630:	40001400 	.word	0x40001400
     634:	200001b0 	.word	0x200001b0
     638:	0000069d 	.word	0x0000069d

0000063c <system_init>:

void system_init(void)
{
     63c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     63e:	4b0f      	ldr	r3, [pc, #60]	; (67c <system_init+0x40>)
     640:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     642:	23c0      	movs	r3, #192	; 0xc0
     644:	05db      	lsls	r3, r3, #23
     646:	2280      	movs	r2, #128	; 0x80
     648:	05d2      	lsls	r2, r2, #23
     64a:	2198      	movs	r1, #152	; 0x98
     64c:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     64e:	3910      	subs	r1, #16
     650:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     652:	4b0b      	ldr	r3, [pc, #44]	; (680 <system_init+0x44>)
     654:	3120      	adds	r1, #32
     656:	505a      	str	r2, [r3, r1]
     658:	4a0a      	ldr	r2, [pc, #40]	; (684 <system_init+0x48>)
     65a:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65c:	3136      	adds	r1, #54	; 0x36
     65e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     660:	2001      	movs	r0, #1
     662:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     664:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(USER_LED_AL, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(USER_LED_AL, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     666:	4b08      	ldr	r3, [pc, #32]	; (688 <system_init+0x4c>)
     668:	4798      	blx	r3

	USART_0_CLOCK_init();
     66a:	4b08      	ldr	r3, [pc, #32]	; (68c <system_init+0x50>)
     66c:	4798      	blx	r3
	USART_0_init();
     66e:	4b08      	ldr	r3, [pc, #32]	; (690 <system_init+0x54>)
     670:	4798      	blx	r3
	USART_0_PORT_init();
     672:	4b08      	ldr	r3, [pc, #32]	; (694 <system_init+0x58>)
     674:	4798      	blx	r3

	CALENDAR_0_init();
     676:	4b08      	ldr	r3, [pc, #32]	; (698 <system_init+0x5c>)
     678:	4798      	blx	r3
}
     67a:	bd10      	pop	{r4, pc}
     67c:	00000821 	.word	0x00000821
     680:	41004400 	.word	0x41004400
     684:	c0004000 	.word	0xc0004000
     688:	0000053d 	.word	0x0000053d
     68c:	0000059d 	.word	0x0000059d
     690:	00000c65 	.word	0x00000c65
     694:	000005bd 	.word	0x000005bd
     698:	0000061d 	.word	0x0000061d

0000069c <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
     69c:	b570      	push	{r4, r5, r6, lr}
     69e:	0004      	movs	r4, r0
     6a0:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
     6a2:	1e43      	subs	r3, r0, #1
     6a4:	4198      	sbcs	r0, r3
     6a6:	b2c0      	uxtb	r0, r0
     6a8:	22e0      	movs	r2, #224	; 0xe0
     6aa:	0052      	lsls	r2, r2, #1
     6ac:	4909      	ldr	r1, [pc, #36]	; (6d4 <calendar_init+0x38>)
     6ae:	4b0a      	ldr	r3, [pc, #40]	; (6d8 <calendar_init+0x3c>)
     6b0:	4798      	blx	r3

	if (calendar->device.hw == hw) {
     6b2:	6823      	ldr	r3, [r4, #0]
     6b4:	42ab      	cmp	r3, r5
     6b6:	d008      	beq.n	6ca <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
     6b8:	2b00      	cmp	r3, #0
     6ba:	d108      	bne.n	6ce <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
     6bc:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
     6be:	0020      	movs	r0, r4
     6c0:	4b06      	ldr	r3, [pc, #24]	; (6dc <calendar_init+0x40>)
     6c2:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
     6c4:	4b06      	ldr	r3, [pc, #24]	; (6e0 <calendar_init+0x44>)
     6c6:	6163      	str	r3, [r4, #20]

	return ret;
}
     6c8:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
     6ca:	2000      	movs	r0, #0
     6cc:	e7fc      	b.n	6c8 <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
     6ce:	2012      	movs	r0, #18
     6d0:	4240      	negs	r0, r0
     6d2:	e7f9      	b.n	6c8 <calendar_init+0x2c>
     6d4:	00002200 	.word	0x00002200
     6d8:	000007d5 	.word	0x000007d5
     6dc:	00000af1 	.word	0x00000af1
     6e0:	000007b2 	.word	0x000007b2

000006e4 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
     6e4:	b510      	push	{r4, lr}
     6e6:	0004      	movs	r4, r0
	/* Sanity check arguments */
	ASSERT(calendar);
     6e8:	1e43      	subs	r3, r0, #1
     6ea:	4198      	sbcs	r0, r3
     6ec:	b2c0      	uxtb	r0, r0
     6ee:	22e6      	movs	r2, #230	; 0xe6
     6f0:	32ff      	adds	r2, #255	; 0xff
     6f2:	4904      	ldr	r1, [pc, #16]	; (704 <calendar_enable+0x20>)
     6f4:	4b04      	ldr	r3, [pc, #16]	; (708 <calendar_enable+0x24>)
     6f6:	4798      	blx	r3

	_calendar_enable(&calendar->device);
     6f8:	0020      	movs	r0, r4
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <calendar_enable+0x28>)
     6fc:	4798      	blx	r3

	return ERR_NONE;
}
     6fe:	2000      	movs	r0, #0
     700:	bd10      	pop	{r4, pc}
     702:	46c0      	nop			; (mov r8, r8)
     704:	00002200 	.word	0x00002200
     708:	000007d5 	.word	0x000007d5
     70c:	00000b7d 	.word	0x00000b7d

00000710 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     710:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     712:	4b0c      	ldr	r3, [pc, #48]	; (744 <process_ext_irq+0x34>)
     714:	685c      	ldr	r4, [r3, #4]
     716:	42a0      	cmp	r0, r4
     718:	d00e      	beq.n	738 <process_ext_irq+0x28>
     71a:	2201      	movs	r2, #1
     71c:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     71e:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     720:	25ff      	movs	r5, #255	; 0xff
     722:	e003      	b.n	72c <process_ext_irq+0x1c>
     724:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     726:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     728:	085b      	lsrs	r3, r3, #1
     72a:	d10a      	bne.n	742 <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     72c:	42a0      	cmp	r0, r4
     72e:	d9f9      	bls.n	724 <process_ext_irq+0x14>
	while (upper >= lower) {
     730:	2a00      	cmp	r2, #0
     732:	d006      	beq.n	742 <process_ext_irq+0x32>
			lower = middle + 1;
     734:	0031      	movs	r1, r6
     736:	e7f6      	b.n	726 <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     738:	4b02      	ldr	r3, [pc, #8]	; (744 <process_ext_irq+0x34>)
     73a:	681b      	ldr	r3, [r3, #0]
     73c:	2b00      	cmp	r3, #0
     73e:	d000      	beq.n	742 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     740:	4798      	blx	r3
		}
	}
}
     742:	bd70      	pop	{r4, r5, r6, pc}
     744:	20000098 	.word	0x20000098

00000748 <ext_irq_init>:
{
     748:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     74a:	4b05      	ldr	r3, [pc, #20]	; (760 <ext_irq_init+0x18>)
     74c:	2201      	movs	r2, #1
     74e:	4252      	negs	r2, r2
     750:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     752:	2200      	movs	r2, #0
     754:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     756:	4803      	ldr	r0, [pc, #12]	; (764 <ext_irq_init+0x1c>)
     758:	4b03      	ldr	r3, [pc, #12]	; (768 <ext_irq_init+0x20>)
     75a:	4798      	blx	r3
}
     75c:	bd10      	pop	{r4, pc}
     75e:	46c0      	nop			; (mov r8, r8)
     760:	20000098 	.word	0x20000098
     764:	00000711 	.word	0x00000711
     768:	00000851 	.word	0x00000851

0000076c <ext_irq_register>:
{
     76c:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     76e:	4b0f      	ldr	r3, [pc, #60]	; (7ac <ext_irq_register+0x40>)
     770:	685b      	ldr	r3, [r3, #4]
     772:	4298      	cmp	r0, r3
     774:	d008      	beq.n	788 <ext_irq_register+0x1c>
	if (NULL == cb) {
     776:	2900      	cmp	r1, #0
     778:	d014      	beq.n	7a4 <ext_irq_register+0x38>
			if (NULL == ext_irqs[i].cb) {
     77a:	4b0c      	ldr	r3, [pc, #48]	; (7ac <ext_irq_register+0x40>)
     77c:	681b      	ldr	r3, [r3, #0]
     77e:	2b00      	cmp	r3, #0
     780:	d009      	beq.n	796 <ext_irq_register+0x2a>
		return ERR_INVALID_ARG;
     782:	200d      	movs	r0, #13
     784:	4240      	negs	r0, r0
     786:	e00c      	b.n	7a2 <ext_irq_register+0x36>
			ext_irqs[i].cb = cb;
     788:	4b08      	ldr	r3, [pc, #32]	; (7ac <ext_irq_register+0x40>)
     78a:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     78c:	2900      	cmp	r1, #0
     78e:	d105      	bne.n	79c <ext_irq_register+0x30>
		return _ext_irq_enable(pin, false);
     790:	4b07      	ldr	r3, [pc, #28]	; (7b0 <ext_irq_register+0x44>)
     792:	4798      	blx	r3
     794:	e005      	b.n	7a2 <ext_irq_register+0x36>
				ext_irqs[i].cb  = cb;
     796:	4b05      	ldr	r3, [pc, #20]	; (7ac <ext_irq_register+0x40>)
     798:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     79a:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     79c:	2101      	movs	r1, #1
     79e:	4b04      	ldr	r3, [pc, #16]	; (7b0 <ext_irq_register+0x44>)
     7a0:	4798      	blx	r3
}
     7a2:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     7a4:	200d      	movs	r0, #13
     7a6:	4240      	negs	r0, r0
     7a8:	e7fb      	b.n	7a2 <ext_irq_register+0x36>
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	20000098 	.word	0x20000098
     7b0:	000008e9 	.word	0x000008e9

000007b4 <sleep>:
 * \retval -1 The requested sleep mode was invalid or not available
 * \retval  0 The operation completed successfully, returned after leaving the
 *            sleep
 */
int sleep(const uint8_t mode)
{
     7b4:	b510      	push	{r4, lr}
	if (ERR_NONE != _set_sleep_mode(mode))
     7b6:	4b05      	ldr	r3, [pc, #20]	; (7cc <sleep+0x18>)
     7b8:	4798      	blx	r3
     7ba:	2800      	cmp	r0, #0
     7bc:	d103      	bne.n	7c6 <sleep+0x12>
		return ERR_INVALID_ARG;

	_go_to_sleep();
     7be:	4b04      	ldr	r3, [pc, #16]	; (7d0 <sleep+0x1c>)
     7c0:	4798      	blx	r3

	return ERR_NONE;
     7c2:	2000      	movs	r0, #0
}
     7c4:	bd10      	pop	{r4, pc}
		return ERR_INVALID_ARG;
     7c6:	200d      	movs	r0, #13
     7c8:	4240      	negs	r0, r0
     7ca:	e7fb      	b.n	7c4 <sleep+0x10>
     7cc:	00000a39 	.word	0x00000a39
     7d0:	00000819 	.word	0x00000819

000007d4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     7d4:	2800      	cmp	r0, #0
     7d6:	d100      	bne.n	7da <assert+0x6>
		__asm("BKPT #0");
     7d8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     7da:	4770      	bx	lr

000007dc <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     7dc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     7de:	4a06      	ldr	r2, [pc, #24]	; (7f8 <_sbrk+0x1c>)
     7e0:	6812      	ldr	r2, [r2, #0]
     7e2:	2a00      	cmp	r2, #0
     7e4:	d004      	beq.n	7f0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     7e6:	4a04      	ldr	r2, [pc, #16]	; (7f8 <_sbrk+0x1c>)
     7e8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     7ea:	18c3      	adds	r3, r0, r3
     7ec:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     7ee:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     7f0:	4902      	ldr	r1, [pc, #8]	; (7fc <_sbrk+0x20>)
     7f2:	4a01      	ldr	r2, [pc, #4]	; (7f8 <_sbrk+0x1c>)
     7f4:	6011      	str	r1, [r2, #0]
     7f6:	e7f6      	b.n	7e6 <_sbrk+0xa>
     7f8:	200000a0 	.word	0x200000a0
     7fc:	200021d0 	.word	0x200021d0

00000800 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     800:	2001      	movs	r0, #1
     802:	4240      	negs	r0, r0
     804:	4770      	bx	lr

00000806 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     806:	2380      	movs	r3, #128	; 0x80
     808:	019b      	lsls	r3, r3, #6
     80a:	604b      	str	r3, [r1, #4]

	return 0;
}
     80c:	2000      	movs	r0, #0
     80e:	4770      	bx	lr

00000810 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     810:	2001      	movs	r0, #1
     812:	4770      	bx	lr

00000814 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     814:	2000      	movs	r0, #0
     816:	4770      	bx	lr

00000818 <_go_to_sleep>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     818:	f3bf 8f4f 	dsb	sy
 * \brief Put MCU to sleep
 */
void _go_to_sleep(void)
{
	__DSB();
	__WFI();
     81c:	bf30      	wfi
}
     81e:	4770      	bx	lr

00000820 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     820:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     822:	4b06      	ldr	r3, [pc, #24]	; (83c <_init_chip+0x1c>)
     824:	685a      	ldr	r2, [r3, #4]
     826:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     828:	4b05      	ldr	r3, [pc, #20]	; (840 <_init_chip+0x20>)
     82a:	4798      	blx	r3
	_sysctrl_init_sources();
     82c:	4b05      	ldr	r3, [pc, #20]	; (844 <_init_chip+0x24>)
     82e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     830:	4b05      	ldr	r3, [pc, #20]	; (848 <_init_chip+0x28>)
     832:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     834:	20ff      	movs	r0, #255	; 0xff
     836:	4b05      	ldr	r3, [pc, #20]	; (84c <_init_chip+0x2c>)
     838:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     83a:	bd10      	pop	{r4, pc}
     83c:	41004000 	.word	0x41004000
     840:	00000a71 	.word	0x00000a71
     844:	00000c11 	.word	0x00000c11
     848:	00000c55 	.word	0x00000c55
     84c:	000009fd 	.word	0x000009fd

00000850 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     850:	4a22      	ldr	r2, [pc, #136]	; (8dc <_ext_irq_init+0x8c>)
     852:	7853      	ldrb	r3, [r2, #1]
     854:	09db      	lsrs	r3, r3, #7
     856:	d1fc      	bne.n	852 <_ext_irq_init+0x2>
     858:	4a20      	ldr	r2, [pc, #128]	; (8dc <_ext_irq_init+0x8c>)
     85a:	7853      	ldrb	r3, [r2, #1]
     85c:	09db      	lsrs	r3, r3, #7
     85e:	d1fc      	bne.n	85a <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     860:	4b1e      	ldr	r3, [pc, #120]	; (8dc <_ext_irq_init+0x8c>)
     862:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     864:	079b      	lsls	r3, r3, #30
     866:	d50a      	bpl.n	87e <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     868:	2200      	movs	r2, #0
     86a:	4b1c      	ldr	r3, [pc, #112]	; (8dc <_ext_irq_init+0x8c>)
     86c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     86e:	001a      	movs	r2, r3
     870:	7853      	ldrb	r3, [r2, #1]
     872:	09db      	lsrs	r3, r3, #7
     874:	d1fc      	bne.n	870 <_ext_irq_init+0x20>
     876:	4a19      	ldr	r2, [pc, #100]	; (8dc <_ext_irq_init+0x8c>)
     878:	7853      	ldrb	r3, [r2, #1]
     87a:	09db      	lsrs	r3, r3, #7
     87c:	d1fc      	bne.n	878 <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
     87e:	2201      	movs	r2, #1
     880:	4b16      	ldr	r3, [pc, #88]	; (8dc <_ext_irq_init+0x8c>)
     882:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     884:	001a      	movs	r2, r3
     886:	7853      	ldrb	r3, [r2, #1]
     888:	09db      	lsrs	r3, r3, #7
     88a:	d1fc      	bne.n	886 <_ext_irq_init+0x36>
     88c:	4a13      	ldr	r2, [pc, #76]	; (8dc <_ext_irq_init+0x8c>)
     88e:	7853      	ldrb	r3, [r2, #1]
     890:	09db      	lsrs	r3, r3, #7
     892:	d1fc      	bne.n	88e <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     894:	4b11      	ldr	r3, [pc, #68]	; (8dc <_ext_irq_init+0x8c>)
     896:	2200      	movs	r2, #0
     898:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     89a:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     89c:	2180      	movs	r1, #128	; 0x80
     89e:	0209      	lsls	r1, r1, #8
     8a0:	6159      	str	r1, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     8a2:	619a      	str	r2, [r3, #24]
     8a4:	22a0      	movs	r2, #160	; 0xa0
     8a6:	0612      	lsls	r2, r2, #24
     8a8:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     8aa:	781a      	ldrb	r2, [r3, #0]
     8ac:	2102      	movs	r1, #2
     8ae:	430a      	orrs	r2, r1
     8b0:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     8b2:	001a      	movs	r2, r3
     8b4:	7853      	ldrb	r3, [r2, #1]
     8b6:	09db      	lsrs	r3, r3, #7
     8b8:	d1fc      	bne.n	8b4 <_ext_irq_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8ba:	4b09      	ldr	r3, [pc, #36]	; (8e0 <_ext_irq_init+0x90>)
     8bc:	2210      	movs	r2, #16
     8be:	2180      	movs	r1, #128	; 0x80
     8c0:	505a      	str	r2, [r3, r1]
     8c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     8c6:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8ca:	3101      	adds	r1, #1
     8cc:	31ff      	adds	r1, #255	; 0xff
     8ce:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8d0:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     8d2:	4b04      	ldr	r3, [pc, #16]	; (8e4 <_ext_irq_init+0x94>)
     8d4:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     8d6:	2000      	movs	r0, #0
     8d8:	4770      	bx	lr
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	40001800 	.word	0x40001800
     8e0:	e000e100 	.word	0xe000e100
     8e4:	200000a4 	.word	0x200000a4

000008e8 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
     8e8:	280f      	cmp	r0, #15
     8ea:	d002      	beq.n	8f2 <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
     8ec:	200d      	movs	r0, #13
     8ee:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
     8f0:	4770      	bx	lr
	if (enable) {
     8f2:	2900      	cmp	r1, #0
     8f4:	d106      	bne.n	904 <_ext_irq_enable+0x1c>
	((Eic *)hw)->INTENCLR.reg = mask;
     8f6:	4b06      	ldr	r3, [pc, #24]	; (910 <_ext_irq_enable+0x28>)
     8f8:	2280      	movs	r2, #128	; 0x80
     8fa:	0212      	lsls	r2, r2, #8
     8fc:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     8fe:	611a      	str	r2, [r3, #16]
	return ERR_NONE;
     900:	2000      	movs	r0, #0
     902:	e7f5      	b.n	8f0 <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
     904:	2280      	movs	r2, #128	; 0x80
     906:	0212      	lsls	r2, r2, #8
     908:	4b01      	ldr	r3, [pc, #4]	; (910 <_ext_irq_enable+0x28>)
     90a:	60da      	str	r2, [r3, #12]
     90c:	2000      	movs	r0, #0
     90e:	e7ef      	b.n	8f0 <_ext_irq_enable+0x8>
     910:	40001800 	.word	0x40001800

00000914 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     914:	b5f0      	push	{r4, r5, r6, r7, lr}
     916:	46ce      	mov	lr, r9
     918:	4647      	mov	r7, r8
     91a:	b580      	push	{r7, lr}
     91c:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
     91e:	4b31      	ldr	r3, [pc, #196]	; (9e4 <EIC_Handler+0xd0>)
     920:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     922:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     924:	400a      	ands	r2, r1
     926:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     928:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     92a:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     92c:	4b2e      	ldr	r3, [pc, #184]	; (9e8 <EIC_Handler+0xd4>)
     92e:	6818      	ldr	r0, [r3, #0]
     930:	1e43      	subs	r3, r0, #1
     932:	4198      	sbcs	r0, r3
     934:	b2c0      	uxtb	r0, r0
     936:	22d2      	movs	r2, #210	; 0xd2
     938:	492c      	ldr	r1, [pc, #176]	; (9ec <EIC_Handler+0xd8>)
     93a:	4b2d      	ldr	r3, [pc, #180]	; (9f0 <EIC_Handler+0xdc>)
     93c:	4798      	blx	r3

	while (flags) {
     93e:	9b01      	ldr	r3, [sp, #4]
     940:	2b00      	cmp	r3, #0
     942:	d049      	beq.n	9d8 <EIC_Handler+0xc4>
     944:	2301      	movs	r3, #1
     946:	425b      	negs	r3, r3
     948:	4699      	mov	r9, r3
		pos = ffs(flags) - 1;
     94a:	4b2a      	ldr	r3, [pc, #168]	; (9f4 <EIC_Handler+0xe0>)
     94c:	4698      	mov	r8, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
     94e:	4f26      	ldr	r7, [pc, #152]	; (9e8 <EIC_Handler+0xd4>)
				if (_map[middle].extint == pos) {
     950:	4d29      	ldr	r5, [pc, #164]	; (9f8 <EIC_Handler+0xe4>)
     952:	e03a      	b.n	9ca <EIC_Handler+0xb6>
					upper = middle - 1;
     954:	3a01      	subs	r2, #1
     956:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
     958:	42b1      	cmp	r1, r6
     95a:	d80c      	bhi.n	976 <EIC_Handler+0x62>
				middle = (upper + lower) >> 1;
     95c:	1873      	adds	r3, r6, r1
     95e:	105b      	asrs	r3, r3, #1
     960:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
     962:	4003      	ands	r3, r0
     964:	00db      	lsls	r3, r3, #3
     966:	5d5b      	ldrb	r3, [r3, r5]
     968:	42a3      	cmp	r3, r4
     96a:	d008      	beq.n	97e <EIC_Handler+0x6a>
				if (_map[middle].extint < pos) {
     96c:	429c      	cmp	r4, r3
     96e:	ddf1      	ble.n	954 <EIC_Handler+0x40>
					lower = middle + 1;
     970:	3201      	adds	r2, #1
     972:	b2d1      	uxtb	r1, r2
     974:	e7f0      	b.n	958 <EIC_Handler+0x44>
			if (INVALID_PIN_NUMBER != pin) {
     976:	464b      	mov	r3, r9
     978:	3301      	adds	r3, #1
     97a:	d005      	beq.n	988 <EIC_Handler+0x74>
     97c:	e001      	b.n	982 <EIC_Handler+0x6e>
     97e:	230f      	movs	r3, #15
     980:	4699      	mov	r9, r3
				callback(pin);
     982:	4648      	mov	r0, r9
     984:	683b      	ldr	r3, [r7, #0]
     986:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     988:	9b01      	ldr	r3, [sp, #4]
     98a:	2201      	movs	r2, #1
     98c:	40a2      	lsls	r2, r4
     98e:	4393      	bics	r3, r2
     990:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     992:	9801      	ldr	r0, [sp, #4]
     994:	4b17      	ldr	r3, [pc, #92]	; (9f4 <EIC_Handler+0xe0>)
     996:	4798      	blx	r3
     998:	3801      	subs	r0, #1
     99a:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     99c:	1c63      	adds	r3, r4, #1
     99e:	d00a      	beq.n	9b6 <EIC_Handler+0xa2>
				if (_map[middle].extint == pos) {
     9a0:	2c0f      	cmp	r4, #15
     9a2:	d005      	beq.n	9b0 <EIC_Handler+0x9c>
     9a4:	230f      	movs	r3, #15
     9a6:	2200      	movs	r2, #0
     9a8:	2601      	movs	r6, #1
     9aa:	2100      	movs	r1, #0
     9ac:	20ff      	movs	r0, #255	; 0xff
     9ae:	e7dd      	b.n	96c <EIC_Handler+0x58>
     9b0:	230f      	movs	r3, #15
     9b2:	4699      	mov	r9, r3
     9b4:	e7e5      	b.n	982 <EIC_Handler+0x6e>
	return ((Eic *)hw)->INTFLAG.reg;
     9b6:	4b0b      	ldr	r3, [pc, #44]	; (9e4 <EIC_Handler+0xd0>)
     9b8:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     9ba:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     9bc:	400a      	ands	r2, r1
     9be:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     9c0:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     9c2:	611a      	str	r2, [r3, #16]
	while (flags) {
     9c4:	9b01      	ldr	r3, [sp, #4]
     9c6:	2b00      	cmp	r3, #0
     9c8:	d006      	beq.n	9d8 <EIC_Handler+0xc4>
		pos = ffs(flags) - 1;
     9ca:	9801      	ldr	r0, [sp, #4]
     9cc:	47c0      	blx	r8
     9ce:	3801      	subs	r0, #1
     9d0:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     9d2:	1c63      	adds	r3, r4, #1
     9d4:	d1e4      	bne.n	9a0 <EIC_Handler+0x8c>
     9d6:	e7ee      	b.n	9b6 <EIC_Handler+0xa2>
	}
}
     9d8:	b003      	add	sp, #12
     9da:	bc0c      	pop	{r2, r3}
     9dc:	4690      	mov	r8, r2
     9de:	4699      	mov	r9, r3
     9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	40001800 	.word	0x40001800
     9e8:	200000a4 	.word	0x200000a4
     9ec:	00002224 	.word	0x00002224
     9f0:	000007d5 	.word	0x000007d5
     9f4:	000011dd 	.word	0x000011dd
     9f8:	0000221c 	.word	0x0000221c

000009fc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     9fc:	07c3      	lsls	r3, r0, #31
     9fe:	d50a      	bpl.n	a16 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     a00:	4b0b      	ldr	r3, [pc, #44]	; (a30 <_gclk_init_generators_by_fref+0x34>)
     a02:	2280      	movs	r2, #128	; 0x80
     a04:	0052      	lsls	r2, r2, #1
     a06:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     a08:	2283      	movs	r2, #131	; 0x83
     a0a:	0252      	lsls	r2, r2, #9
     a0c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     a0e:	001a      	movs	r2, r3
     a10:	7853      	ldrb	r3, [r2, #1]
     a12:	09db      	lsrs	r3, r3, #7
     a14:	d1fc      	bne.n	a10 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     a16:	0703      	lsls	r3, r0, #28
     a18:	d509      	bpl.n	a2e <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
     a1a:	4b05      	ldr	r3, [pc, #20]	; (a30 <_gclk_init_generators_by_fref+0x34>)
     a1c:	2204      	movs	r2, #4
     a1e:	32ff      	adds	r2, #255	; 0xff
     a20:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     a22:	4a04      	ldr	r2, [pc, #16]	; (a34 <_gclk_init_generators_by_fref+0x38>)
     a24:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     a26:	001a      	movs	r2, r3
     a28:	7853      	ldrb	r3, [r2, #1]
     a2a:	09db      	lsrs	r3, r3, #7
     a2c:	d1fc      	bne.n	a28 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     a2e:	4770      	bx	lr
     a30:	40000c00 	.word	0x40000c00
     a34:	00210303 	.word	0x00210303

00000a38 <_set_sleep_mode>:
/**
 * \brief Set the sleep mode for the device
 */
int32_t _set_sleep_mode(const uint8_t mode)
{
	switch (mode) {
     a38:	2802      	cmp	r0, #2
     a3a:	d904      	bls.n	a46 <_set_sleep_mode+0xe>
     a3c:	2803      	cmp	r0, #3
     a3e:	d00b      	beq.n	a58 <_set_sleep_mode+0x20>
		return ERR_NONE;
	case 3:
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
		return ERR_NONE;
	default:
		return ERR_INVALID_ARG;
     a40:	200d      	movs	r0, #13
     a42:	4240      	negs	r0, r0
     a44:	e007      	b.n	a56 <_set_sleep_mode+0x1e>
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
     a46:	4a08      	ldr	r2, [pc, #32]	; (a68 <_set_sleep_mode+0x30>)
     a48:	6913      	ldr	r3, [r2, #16]
     a4a:	2104      	movs	r1, #4
     a4c:	438b      	bics	r3, r1
     a4e:	6113      	str	r3, [r2, #16]
		PM->SLEEP.reg = mode;
     a50:	4b06      	ldr	r3, [pc, #24]	; (a6c <_set_sleep_mode+0x34>)
     a52:	7058      	strb	r0, [r3, #1]
		return ERR_NONE;
     a54:	2000      	movs	r0, #0
	}
}
     a56:	4770      	bx	lr
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
     a58:	4a03      	ldr	r2, [pc, #12]	; (a68 <_set_sleep_mode+0x30>)
     a5a:	6913      	ldr	r3, [r2, #16]
     a5c:	2104      	movs	r1, #4
     a5e:	430b      	orrs	r3, r1
     a60:	6113      	str	r3, [r2, #16]
		return ERR_NONE;
     a62:	2000      	movs	r0, #0
     a64:	e7f7      	b.n	a56 <_set_sleep_mode+0x1e>
     a66:	46c0      	nop			; (mov r8, r8)
     a68:	e000ed00 	.word	0xe000ed00
     a6c:	40000400 	.word	0x40000400

00000a70 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     a70:	4b06      	ldr	r3, [pc, #24]	; (a8c <_pm_init+0x1c>)
     a72:	7a1a      	ldrb	r2, [r3, #8]
     a74:	b2d2      	uxtb	r2, r2
     a76:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     a78:	7a5a      	ldrb	r2, [r3, #9]
     a7a:	b2d2      	uxtb	r2, r2
     a7c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     a7e:	7a9a      	ldrb	r2, [r3, #10]
     a80:	b2d2      	uxtb	r2, r2
     a82:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     a84:	7ada      	ldrb	r2, [r3, #11]
     a86:	b2d2      	uxtb	r2, r2
     a88:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     a8a:	4770      	bx	lr
     a8c:	40000400 	.word	0x40000400

00000a90 <_calendar_register_callback>:

/**
 * \brief Registers callback for the specified callback type
 */
int32_t _calendar_register_callback(struct calendar_dev *const dev, calendar_drv_cb_alarm_t callback)
{
     a90:	b570      	push	{r4, r5, r6, lr}
     a92:	0004      	movs	r4, r0
     a94:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     a96:	2800      	cmp	r0, #0
     a98:	d015      	beq.n	ac6 <_calendar_register_callback+0x36>
     a9a:	6800      	ldr	r0, [r0, #0]
     a9c:	1e43      	subs	r3, r0, #1
     a9e:	4198      	sbcs	r0, r3
     aa0:	b2c0      	uxtb	r0, r0
     aa2:	2233      	movs	r2, #51	; 0x33
     aa4:	490f      	ldr	r1, [pc, #60]	; (ae4 <_calendar_register_callback+0x54>)
     aa6:	4b10      	ldr	r3, [pc, #64]	; (ae8 <_calendar_register_callback+0x58>)
     aa8:	4798      	blx	r3

	/* Check callback */
	if (callback != NULL) {
     aaa:	2d00      	cmp	r5, #0
     aac:	d00d      	beq.n	aca <_calendar_register_callback+0x3a>
		/* register the callback */
		dev->callback = callback;
     aae:	6065      	str	r5, [r4, #4]
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ab0:	4b0e      	ldr	r3, [pc, #56]	; (aec <_calendar_register_callback+0x5c>)
     ab2:	2208      	movs	r2, #8
     ab4:	21c0      	movs	r1, #192	; 0xc0
     ab6:	0049      	lsls	r1, r1, #1
     ab8:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     aba:	601a      	str	r2, [r3, #0]
		/* enable RTC_IRQn */
		NVIC_ClearPendingIRQ(RTC_IRQn);
		NVIC_EnableIRQ(RTC_IRQn);

		/* enable cmp */
		hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
     abc:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE2.INTFLAG.reg = mask;
}

static inline void hri_rtcmode0_set_INTEN_CMP0_bit(const void *const hw)
{
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     abe:	3a07      	subs	r2, #7
     ac0:	71da      	strb	r2, [r3, #7]
		/* disable RTC_IRQn */
		NVIC_DisableIRQ(RTC_IRQn);
	}

	return ERR_NONE;
}
     ac2:	2000      	movs	r0, #0
     ac4:	bd70      	pop	{r4, r5, r6, pc}
     ac6:	2000      	movs	r0, #0
     ac8:	e7eb      	b.n	aa2 <_calendar_register_callback+0x12>
		hri_rtcmode0_clear_INTEN_CMP0_bit(dev->hw);
     aca:	6823      	ldr	r3, [r4, #0]
	}
}

static inline void hri_rtcmode0_clear_INTEN_CMP0_bit(const void *const hw)
{
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_CMP0;
     acc:	2201      	movs	r2, #1
     ace:	719a      	strb	r2, [r3, #6]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ad0:	2108      	movs	r1, #8
     ad2:	2380      	movs	r3, #128	; 0x80
     ad4:	4a05      	ldr	r2, [pc, #20]	; (aec <_calendar_register_callback+0x5c>)
     ad6:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
     ad8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     adc:	f3bf 8f6f 	isb	sy
     ae0:	e7ef      	b.n	ac2 <_calendar_register_callback+0x32>
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	0000223c 	.word	0x0000223c
     ae8:	000007d5 	.word	0x000007d5
     aec:	e000e100 	.word	0xe000e100

00000af0 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
     af0:	b510      	push	{r4, lr}
     af2:	1e04      	subs	r4, r0, #0
	uint16_t register_value;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     af4:	d039      	beq.n	b6a <_calendar_init+0x7a>
     af6:	6800      	ldr	r0, [r0, #0]
     af8:	1e43      	subs	r3, r0, #1
     afa:	4198      	sbcs	r0, r3
     afc:	b2c0      	uxtb	r0, r0
     afe:	2278      	movs	r2, #120	; 0x78
     b00:	491b      	ldr	r1, [pc, #108]	; (b70 <_calendar_init+0x80>)
     b02:	4b1c      	ldr	r3, [pc, #112]	; (b74 <_calendar_init+0x84>)
     b04:	4798      	blx	r3

	_rtc_dev = dev;
     b06:	4b1c      	ldr	r3, [pc, #112]	; (b78 <_calendar_init+0x88>)
     b08:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw);
     b0a:	6822      	ldr	r2, [r4, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     b0c:	7a93      	ldrb	r3, [r2, #10]
     b0e:	09db      	lsrs	r3, r3, #7
     b10:	d1fc      	bne.n	b0c <_calendar_init+0x1c>
     b12:	7a93      	ldrb	r3, [r2, #10]
     b14:	09db      	lsrs	r3, r3, #7
     b16:	d1fc      	bne.n	b12 <_calendar_init+0x22>

static inline bool hri_rtcmode0_get_CTRL_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
     b18:	8813      	ldrh	r3, [r2, #0]
	if (hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw)) {
     b1a:	079b      	lsls	r3, r3, #30
     b1c:	d50a      	bpl.n	b34 <_calendar_init+0x44>
}

static inline void hri_rtcmode0_clear_CTRL_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     b1e:	8813      	ldrh	r3, [r2, #0]
     b20:	2102      	movs	r1, #2
     b22:	438b      	bics	r3, r1
     b24:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     b26:	7a93      	ldrb	r3, [r2, #10]
     b28:	09db      	lsrs	r3, r3, #7
     b2a:	d1fc      	bne.n	b26 <_calendar_init+0x36>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw);
     b2c:	6822      	ldr	r2, [r4, #0]
     b2e:	7a93      	ldrb	r3, [r2, #10]
     b30:	09db      	lsrs	r3, r3, #7
     b32:	d1fc      	bne.n	b2e <_calendar_init+0x3e>
#endif
	}
	hri_rtcmode0_set_CTRL_SWRST_bit(dev->hw);
     b34:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     b36:	8813      	ldrh	r3, [r2, #0]
     b38:	2101      	movs	r1, #1
     b3a:	430b      	orrs	r3, r1
     b3c:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     b3e:	7a93      	ldrb	r3, [r2, #10]
     b40:	09db      	lsrs	r3, r3, #7
     b42:	d1fc      	bne.n	b3e <_calendar_init+0x4e>
	hri_rtcmode0_wait_for_sync(dev->hw);
     b44:	6822      	ldr	r2, [r4, #0]
     b46:	7a93      	ldrb	r3, [r2, #10]
     b48:	09db      	lsrs	r3, r3, #7
     b4a:	d1fc      	bne.n	b46 <_calendar_init+0x56>
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     b4c:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     b4e:	7a93      	ldrb	r3, [r2, #10]
     b50:	09db      	lsrs	r3, r3, #7
     b52:	d1fc      	bne.n	b4e <_calendar_init+0x5e>
	register_value &= (~RTC_MODE0_CTRL_MATCHCLR);

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	/* set continuously clock read update mode */
	hri_rtcmode0_set_READREQ_RCONT_bit(dev->hw);
     b54:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_rtc_set_READREQ_RCONT_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     b56:	8853      	ldrh	r3, [r2, #2]
     b58:	2180      	movs	r1, #128	; 0x80
     b5a:	01c9      	lsls	r1, r1, #7
     b5c:	430b      	orrs	r3, r1
     b5e:	8053      	strh	r3, [r2, #2]

	/* set event control */
#if CONF_RTC_EVENT_CONTROL_ENABLE == 1
	hri_rtcmode0_write_EVCTRL_reg(
	    dev->hw,
     b60:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
     b62:	2200      	movs	r2, #0
     b64:	809a      	strh	r2, [r3, #4]
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	return ERR_NONE;
}
     b66:	2000      	movs	r0, #0
     b68:	bd10      	pop	{r4, pc}
     b6a:	2000      	movs	r0, #0
     b6c:	e7c7      	b.n	afe <_calendar_init+0xe>
     b6e:	46c0      	nop			; (mov r8, r8)
     b70:	0000223c 	.word	0x0000223c
     b74:	000007d5 	.word	0x000007d5
     b78:	200000a8 	.word	0x200000a8

00000b7c <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
     b7c:	b510      	push	{r4, lr}
     b7e:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     b80:	d011      	beq.n	ba6 <_calendar_enable+0x2a>
     b82:	6800      	ldr	r0, [r0, #0]
     b84:	1e43      	subs	r3, r0, #1
     b86:	4198      	sbcs	r0, r3
     b88:	b2c0      	uxtb	r0, r0
     b8a:	22aa      	movs	r2, #170	; 0xaa
     b8c:	4907      	ldr	r1, [pc, #28]	; (bac <_calendar_enable+0x30>)
     b8e:	4b08      	ldr	r3, [pc, #32]	; (bb0 <_calendar_enable+0x34>)
     b90:	4798      	blx	r3

	/* Enable rtc */
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
     b92:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     b94:	8813      	ldrh	r3, [r2, #0]
     b96:	2102      	movs	r1, #2
     b98:	430b      	orrs	r3, r1
     b9a:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     b9c:	7a93      	ldrb	r3, [r2, #10]
     b9e:	09db      	lsrs	r3, r3, #7
     ba0:	d1fc      	bne.n	b9c <_calendar_enable+0x20>

	return ERR_NONE;
}
     ba2:	2000      	movs	r0, #0
     ba4:	bd10      	pop	{r4, pc}
     ba6:	2000      	movs	r0, #0
     ba8:	e7ef      	b.n	b8a <_calendar_enable+0xe>
     baa:	46c0      	nop			; (mov r8, r8)
     bac:	0000223c 	.word	0x0000223c
     bb0:	000007d5 	.word	0x000007d5

00000bb4 <_calendar_set_comp>:

/**
 * \brief Set the compare for the specified value.
 */
int32_t _calendar_set_comp(struct calendar_dev *const dev, const uint32_t comp)
{
     bb4:	b570      	push	{r4, r5, r6, lr}
     bb6:	0004      	movs	r4, r0
     bb8:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     bba:	2800      	cmp	r0, #0
     bbc:	d00f      	beq.n	bde <_calendar_set_comp+0x2a>
     bbe:	6800      	ldr	r0, [r0, #0]
     bc0:	1e43      	subs	r3, r0, #1
     bc2:	4198      	sbcs	r0, r3
     bc4:	b2c0      	uxtb	r0, r0
     bc6:	22e4      	movs	r2, #228	; 0xe4
     bc8:	4906      	ldr	r1, [pc, #24]	; (be4 <_calendar_set_comp+0x30>)
     bca:	4b07      	ldr	r3, [pc, #28]	; (be8 <_calendar_set_comp+0x34>)
     bcc:	4798      	blx	r3

	/* Set value into alarm register. */
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, comp);
     bce:	6822      	ldr	r2, [r4, #0]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     bd0:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     bd2:	6195      	str	r5, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     bd4:	7a93      	ldrb	r3, [r2, #10]
     bd6:	09db      	lsrs	r3, r3, #7
     bd8:	d1fc      	bne.n	bd4 <_calendar_set_comp+0x20>

	return ERR_NONE;
}
     bda:	2000      	movs	r0, #0
     bdc:	bd70      	pop	{r4, r5, r6, pc}
     bde:	2000      	movs	r0, #0
     be0:	e7f1      	b.n	bc6 <_calendar_set_comp+0x12>
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	0000223c 	.word	0x0000223c
     be8:	000007d5 	.word	0x000007d5

00000bec <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     bec:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
     bee:	4b07      	ldr	r3, [pc, #28]	; (c0c <RTC_Handler+0x20>)
     bf0:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     bf2:	6823      	ldr	r3, [r4, #0]
     bf4:	7a1b      	ldrb	r3, [r3, #8]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
     bf6:	07db      	lsls	r3, r3, #31
     bf8:	d400      	bmi.n	bfc <RTC_Handler+0x10>
}
     bfa:	bd10      	pop	{r4, pc}
		dev->callback(dev);
     bfc:	0020      	movs	r0, r4
     bfe:	6863      	ldr	r3, [r4, #4]
     c00:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     c02:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     c04:	2201      	movs	r2, #1
     c06:	721a      	strb	r2, [r3, #8]
}
     c08:	e7f7      	b.n	bfa <RTC_Handler+0xe>
     c0a:	46c0      	nop			; (mov r8, r8)
     c0c:	200000a8 	.word	0x200000a8

00000c10 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     c10:	4b0e      	ldr	r3, [pc, #56]	; (c4c <_sysctrl_init_sources+0x3c>)
     c12:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     c14:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     c16:	480e      	ldr	r0, [pc, #56]	; (c50 <_sysctrl_init_sources+0x40>)
     c18:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     c1a:	0f92      	lsrs	r2, r2, #30
     c1c:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
     c1e:	2002      	movs	r0, #2
     c20:	4302      	orrs	r2, r0
     c22:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     c24:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     c26:	699a      	ldr	r2, [r3, #24]
     c28:	4302      	orrs	r2, r0
     c2a:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     c2c:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     c2e:	211f      	movs	r1, #31
     c30:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     c32:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
     c34:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     c36:	2208      	movs	r2, #8
     c38:	68cb      	ldr	r3, [r1, #12]
     c3a:	421a      	tst	r2, r3
     c3c:	d0fc      	beq.n	c38 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
     c3e:	4a03      	ldr	r2, [pc, #12]	; (c4c <_sysctrl_init_sources+0x3c>)
     c40:	6a13      	ldr	r3, [r2, #32]
     c42:	2180      	movs	r1, #128	; 0x80
     c44:	430b      	orrs	r3, r1
     c46:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     c48:	4770      	bx	lr
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	40000800 	.word	0x40000800
     c50:	0fff0000 	.word	0x0fff0000

00000c54 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
     c54:	4a02      	ldr	r2, [pc, #8]	; (c60 <_sysctrl_init_referenced_generators+0xc>)
     c56:	6993      	ldr	r3, [r2, #24]
     c58:	2102      	movs	r1, #2
     c5a:	438b      	bics	r3, r1
     c5c:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     c5e:	4770      	bx	lr
     c60:	40000800 	.word	0x40000800

00000c64 <USART_0_init>:
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     c64:	4b30      	ldr	r3, [pc, #192]	; (d28 <USART_0_init+0xc4>)
     c66:	69db      	ldr	r3, [r3, #28]
 * \brief Initialize USART interface
 */
int8_t USART_0_init()
{

	if (!hri_sercomusart_is_syncing(SERCOM3, SERCOM_USART_SYNCBUSY_SWRST)) {
     c68:	07db      	lsls	r3, r3, #31
     c6a:	d41f      	bmi.n	cac <USART_0_init+0x48>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c6c:	492e      	ldr	r1, [pc, #184]	; (d28 <USART_0_init+0xc4>)
     c6e:	2203      	movs	r2, #3
     c70:	69cb      	ldr	r3, [r1, #28]
     c72:	421a      	tst	r2, r3
     c74:	d1fc      	bne.n	c70 <USART_0_init+0xc>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     c76:	4b2c      	ldr	r3, [pc, #176]	; (d28 <USART_0_init+0xc4>)
     c78:	681b      	ldr	r3, [r3, #0]
		uint32_t mode = SERCOM_USART_CTRLA_MODE(1);
		if (hri_sercomusart_get_CTRLA_reg(SERCOM3, SERCOM_USART_CTRLA_ENABLE)) {
     c7a:	079b      	lsls	r3, r3, #30
     c7c:	d50e      	bpl.n	c9c <USART_0_init+0x38>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     c7e:	4a2a      	ldr	r2, [pc, #168]	; (d28 <USART_0_init+0xc4>)
     c80:	6813      	ldr	r3, [r2, #0]
     c82:	2102      	movs	r1, #2
     c84:	438b      	bics	r3, r1
     c86:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c88:	0011      	movs	r1, r2
     c8a:	2203      	movs	r2, #3
     c8c:	69cb      	ldr	r3, [r1, #28]
     c8e:	421a      	tst	r2, r3
     c90:	d1fc      	bne.n	c8c <USART_0_init+0x28>
     c92:	4925      	ldr	r1, [pc, #148]	; (d28 <USART_0_init+0xc4>)
     c94:	2202      	movs	r2, #2
     c96:	69cb      	ldr	r3, [r1, #28]
     c98:	421a      	tst	r2, r3
     c9a:	d1fc      	bne.n	c96 <USART_0_init+0x32>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     c9c:	2205      	movs	r2, #5
     c9e:	4b22      	ldr	r3, [pc, #136]	; (d28 <USART_0_init+0xc4>)
     ca0:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ca2:	0019      	movs	r1, r3
     ca4:	3a02      	subs	r2, #2
     ca6:	69cb      	ldr	r3, [r1, #28]
     ca8:	421a      	tst	r2, r3
     caa:	d1fc      	bne.n	ca6 <USART_0_init+0x42>
     cac:	491e      	ldr	r1, [pc, #120]	; (d28 <USART_0_init+0xc4>)
     cae:	2201      	movs	r2, #1
     cb0:	69cb      	ldr	r3, [r1, #28]
     cb2:	421a      	tst	r2, r3
     cb4:	d1fc      	bne.n	cb0 <USART_0_init+0x4c>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     cb6:	4a1d      	ldr	r2, [pc, #116]	; (d2c <USART_0_init+0xc8>)
     cb8:	4b1b      	ldr	r3, [pc, #108]	; (d28 <USART_0_init+0xc4>)
     cba:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cbc:	0019      	movs	r1, r3
     cbe:	2203      	movs	r2, #3
     cc0:	69cb      	ldr	r3, [r1, #28]
     cc2:	421a      	tst	r2, r3
     cc4:	d1fc      	bne.n	cc0 <USART_0_init+0x5c>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     cc6:	4a18      	ldr	r2, [pc, #96]	; (d28 <USART_0_init+0xc4>)
     cc8:	6813      	ldr	r3, [r2, #0]
	tmp &= ~SERCOM_USART_CTRLA_TXPO_Msk;
     cca:	4919      	ldr	r1, [pc, #100]	; (d30 <USART_0_init+0xcc>)
     ccc:	400b      	ands	r3, r1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
     cce:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cd0:	0011      	movs	r1, r2
     cd2:	2207      	movs	r2, #7
     cd4:	69cb      	ldr	r3, [r1, #28]
     cd6:	421a      	tst	r2, r3
     cd8:	d1fc      	bne.n	cd4 <USART_0_init+0x70>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     cda:	4913      	ldr	r1, [pc, #76]	; (d28 <USART_0_init+0xc4>)
     cdc:	680b      	ldr	r3, [r1, #0]
	tmp &= ~SERCOM_USART_CTRLA_RXPO_Msk;
     cde:	4a15      	ldr	r2, [pc, #84]	; (d34 <USART_0_init+0xd0>)
     ce0:	401a      	ands	r2, r3
	tmp |= SERCOM_USART_CTRLA_RXPO(data);
     ce2:	2380      	movs	r3, #128	; 0x80
     ce4:	035b      	lsls	r3, r3, #13
     ce6:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
     ce8:	600b      	str	r3, [r1, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cea:	2207      	movs	r2, #7
     cec:	69cb      	ldr	r3, [r1, #28]
     cee:	421a      	tst	r2, r3
     cf0:	d1fc      	bne.n	cec <USART_0_init+0x88>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     cf2:	22c0      	movs	r2, #192	; 0xc0
     cf4:	0292      	lsls	r2, r2, #10
     cf6:	4b0c      	ldr	r3, [pc, #48]	; (d28 <USART_0_init+0xc4>)
     cf8:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     cfa:	0019      	movs	r1, r3
     cfc:	2207      	movs	r2, #7
     cfe:	69cb      	ldr	r3, [r1, #28]
     d00:	421a      	tst	r2, r3
     d02:	d1fc      	bne.n	cfe <USART_0_init+0x9a>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     d04:	4b08      	ldr	r3, [pc, #32]	; (d28 <USART_0_init+0xc4>)
     d06:	4a0c      	ldr	r2, [pc, #48]	; (d38 <USART_0_init+0xd4>)
     d08:	819a      	strh	r2, [r3, #12]
	((Sercom *)hw)->USART.INTENSET.reg = data;
     d0a:	2207      	movs	r2, #7
     d0c:	759a      	strb	r2, [r3, #22]
	((Sercom *)hw)->USART.INTENCLR.reg = ~data;
     d0e:	32f1      	adds	r2, #241	; 0xf1
     d10:	751a      	strb	r2, [r3, #20]
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     d12:	681a      	ldr	r2, [r3, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
     d14:	2102      	movs	r1, #2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
     d16:	430a      	orrs	r2, r1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
     d18:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     d1a:	0019      	movs	r1, r3
     d1c:	2203      	movs	r2, #3
     d1e:	69cb      	ldr	r3, [r1, #28]
     d20:	421a      	tst	r2, r3
     d22:	d1fc      	bne.n	d1e <USART_0_init+0xba>
	        | 1 << SERCOM_USART_INTENSET_DRE_Pos); /* Data Register Empty Interrupt Enable: enabled */

	hri_sercomusart_write_CTRLA_ENABLE_bit(SERCOM3, 1 << SERCOM_USART_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
     d24:	2000      	movs	r0, #0
     d26:	4770      	bx	lr
     d28:	42001400 	.word	0x42001400
     d2c:	40000084 	.word	0x40000084
     d30:	fffcffff 	.word	0xfffcffff
     d34:	ffcfffff 	.word	0xffcfffff
     d38:	ffffc504 	.word	0xffffc504

00000d3c <USART_0_read_byte>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.DATA.reg;
     d3c:	4b01      	ldr	r3, [pc, #4]	; (d44 <USART_0_read_byte+0x8>)
     d3e:	8d18      	ldrh	r0, [r3, #40]	; 0x28
/**
 * \brief Write a byte to the SERCOM USART instance
 */
uint8_t USART_0_read_byte()
{
	return hri_sercomusart_read_DATA_reg(SERCOM3);
     d40:	b2c0      	uxtb	r0, r0
}
     d42:	4770      	bx	lr
     d44:	42001400 	.word	0x42001400

00000d48 <USART_0_write_byte>:
/**
 * \brief Write a byte to the SERCOM USART instance
 */
void USART_0_write_byte(uint8_t data)
{
	hri_sercomusart_write_DATA_reg(SERCOM3, data);
     d48:	b280      	uxth	r0, r0
	((Sercom *)hw)->USART.DATA.reg = data;
     d4a:	4b01      	ldr	r3, [pc, #4]	; (d50 <USART_0_write_byte+0x8>)
     d4c:	8518      	strh	r0, [r3, #40]	; 0x28
}
     d4e:	4770      	bx	lr
     d50:	42001400 	.word	0x42001400

00000d54 <USART_0_is_byte_sent>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     d54:	4b02      	ldr	r3, [pc, #8]	; (d60 <USART_0_is_byte_sent+0xc>)
     d56:	7e18      	ldrb	r0, [r3, #24]
/**
 * \brief Check if USART is ready to send next byte
 */
bool USART_0_is_byte_sent()
{
	return hri_sercomusart_get_interrupt_DRE_bit(SERCOM3);
     d58:	2301      	movs	r3, #1
     d5a:	4018      	ands	r0, r3
}
     d5c:	4770      	bx	lr
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	42001400 	.word	0x42001400

00000d64 <USART_0_is_byte_received>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     d64:	4b02      	ldr	r3, [pc, #8]	; (d70 <USART_0_is_byte_received+0xc>)
     d66:	7e18      	ldrb	r0, [r3, #24]
     d68:	0740      	lsls	r0, r0, #29
/**
 * \brief Check if there is data received by USART
 */
bool USART_0_is_byte_received()
{
	return hri_sercomusart_get_interrupt_RXC_bit(SERCOM3);
     d6a:	0fc0      	lsrs	r0, r0, #31
}
     d6c:	4770      	bx	lr
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	42001400 	.word	0x42001400

00000d74 <USART_0_enable>:
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     d74:	4a05      	ldr	r2, [pc, #20]	; (d8c <USART_0_enable+0x18>)
     d76:	6813      	ldr	r3, [r2, #0]
     d78:	2102      	movs	r1, #2
     d7a:	430b      	orrs	r3, r1
     d7c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     d7e:	0011      	movs	r1, r2
     d80:	2203      	movs	r2, #3
     d82:	69cb      	ldr	r3, [r1, #28]
     d84:	421a      	tst	r2, r3
     d86:	d1fc      	bne.n	d82 <USART_0_enable+0xe>
 * \brief Enable SERCOM module
 */
void USART_0_enable()
{
	hri_sercomusart_set_CTRLA_ENABLE_bit(SERCOM3);
}
     d88:	4770      	bx	lr
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	42001400 	.word	0x42001400

00000d90 <USART_0_disable>:
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     d90:	4a05      	ldr	r2, [pc, #20]	; (da8 <USART_0_disable+0x18>)
     d92:	6813      	ldr	r3, [r2, #0]
     d94:	2102      	movs	r1, #2
     d96:	438b      	bics	r3, r1
     d98:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     d9a:	0011      	movs	r1, r2
     d9c:	2203      	movs	r2, #3
     d9e:	69cb      	ldr	r3, [r1, #28]
     da0:	421a      	tst	r2, r3
     da2:	d1fc      	bne.n	d9e <USART_0_disable+0xe>
 * \brief Disable SERCOM module
 */
void USART_0_disable()
{
	hri_sercomusart_clear_CTRLA_ENABLE_bit(SERCOM3);
}
     da4:	4770      	bx	lr
     da6:	46c0      	nop			; (mov r8, r8)
     da8:	42001400 	.word	0x42001400

00000dac <rtc_callback>:

static void rtc_callback(struct calendar_dev *const dev) {
  // arrive here on an RTC interrupt, in this case, when the there is a compare
  // match.  No other action is required; we use the interrupt only to wake the
  // processor from Standby mode.  The system code clears the interrupt state.
  asm("nop");
     dac:	46c0      	nop			; (mov r8, r8)
}
     dae:	4770      	bx	lr

00000db0 <idle_task_fn>:
static void *idle_task_fn(void *ctx, void *arg) {
     db0:	b570      	push	{r4, r5, r6, lr}
     db2:	000d      	movs	r5, r1
  mu_sched_event_t *next_event = mu_sched_get_next_event(sched);
     db4:	0008      	movs	r0, r1
     db6:	4b11      	ldr	r3, [pc, #68]	; (dfc <idle_task_fn+0x4c>)
     db8:	4798      	blx	r3
     dba:	0004      	movs	r4, r0
  USART_0_disable();
     dbc:	4b10      	ldr	r3, [pc, #64]	; (e00 <idle_task_fn+0x50>)
     dbe:	4798      	blx	r3
  asm("nop");
     dc0:	46c0      	nop			; (mov r8, r8)
    if (next_event) {
     dc2:	2c00      	cmp	r4, #0
     dc4:	d016      	beq.n	df4 <idle_task_fn+0x44>
      mu_time_t now = mu_sched_get_current_time(sched);
     dc6:	0028      	movs	r0, r5
     dc8:	4b0e      	ldr	r3, [pc, #56]	; (e04 <idle_task_fn+0x54>)
     dca:	4798      	blx	r3
     dcc:	0001      	movs	r1, r0
      mu_time_t then = next_event->time;
     dce:	6824      	ldr	r4, [r4, #0]
      if (mu_time_difference(then, now) > MIN_SLEEP_DURATION) {
     dd0:	0020      	movs	r0, r4
     dd2:	4b0d      	ldr	r3, [pc, #52]	; (e08 <idle_task_fn+0x58>)
     dd4:	4798      	blx	r3
     dd6:	2820      	cmp	r0, #32
     dd8:	dc04      	bgt.n	de4 <idle_task_fn+0x34>
  USART_0_enable();
     dda:	4b0c      	ldr	r3, [pc, #48]	; (e0c <idle_task_fn+0x5c>)
     ddc:	4798      	blx	r3
  asm("nop");
     dde:	46c0      	nop			; (mov r8, r8)
}
     de0:	2000      	movs	r0, #0
     de2:	bd70      	pop	{r4, r5, r6, pc}
        _calendar_set_comp(&CALENDAR_0.device, then);
     de4:	0021      	movs	r1, r4
     de6:	480a      	ldr	r0, [pc, #40]	; (e10 <idle_task_fn+0x60>)
     de8:	4b0a      	ldr	r3, [pc, #40]	; (e14 <idle_task_fn+0x64>)
     dea:	4798      	blx	r3
  sleep(3); // in hal_sleep
     dec:	2003      	movs	r0, #3
     dee:	4b0a      	ldr	r3, [pc, #40]	; (e18 <idle_task_fn+0x68>)
     df0:	4798      	blx	r3
     df2:	e7f2      	b.n	dda <idle_task_fn+0x2a>
     df4:	2003      	movs	r0, #3
     df6:	4b08      	ldr	r3, [pc, #32]	; (e18 <idle_task_fn+0x68>)
     df8:	4798      	blx	r3
     dfa:	e7ee      	b.n	dda <idle_task_fn+0x2a>
     dfc:	00000209 	.word	0x00000209
     e00:	00000d91 	.word	0x00000d91
     e04:	00000201 	.word	0x00000201
     e08:	00000411 	.word	0x00000411
     e0c:	00000d75 	.word	0x00000d75
     e10:	200001b0 	.word	0x200001b0
     e14:	00000bb5 	.word	0x00000bb5
     e18:	000007b5 	.word	0x000007b5

00000e1c <idle_task_init>:
mu_task_t *idle_task_init(mu_task_t *idle_task, mu_sched_t *sched) {
     e1c:	b570      	push	{r4, r5, r6, lr}
     e1e:	0004      	movs	r4, r0
     e20:	000d      	movs	r5, r1
  _calendar_register_callback(&CALENDAR_0.device, rtc_callback);
     e22:	4908      	ldr	r1, [pc, #32]	; (e44 <idle_task_init+0x28>)
     e24:	4808      	ldr	r0, [pc, #32]	; (e48 <idle_task_init+0x2c>)
     e26:	4b09      	ldr	r3, [pc, #36]	; (e4c <idle_task_init+0x30>)
     e28:	4798      	blx	r3
  mu_task_init(idle_task, idle_task_fn, NULL, "Sleeping Idle");
     e2a:	4b09      	ldr	r3, [pc, #36]	; (e50 <idle_task_init+0x34>)
     e2c:	2200      	movs	r2, #0
     e2e:	4909      	ldr	r1, [pc, #36]	; (e54 <idle_task_init+0x38>)
     e30:	0020      	movs	r0, r4
     e32:	4e09      	ldr	r6, [pc, #36]	; (e58 <idle_task_init+0x3c>)
     e34:	47b0      	blx	r6
  mu_sched_set_idle_task(sched, idle_task);
     e36:	0021      	movs	r1, r4
     e38:	0028      	movs	r0, r5
     e3a:	4b08      	ldr	r3, [pc, #32]	; (e5c <idle_task_init+0x40>)
     e3c:	4798      	blx	r3
}
     e3e:	0020      	movs	r0, r4
     e40:	bd70      	pop	{r4, r5, r6, pc}
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	00000dad 	.word	0x00000dad
     e48:	200001b0 	.word	0x200001b0
     e4c:	00000a91 	.word	0x00000a91
     e50:	00002254 	.word	0x00002254
     e54:	00000db1 	.word	0x00000db1
     e58:	000003b3 	.word	0x000003b3
     e5c:	000001fd 	.word	0x000001fd

00000e60 <mulib_slinky_init>:
// ... no context required

// =============================================================================
// public code

void mulib_slinky_init() {
     e60:	b570      	push	{r4, r5, r6, lr}
  printf("\r\n\r\n# ===========\r\n");
     e62:	4819      	ldr	r0, [pc, #100]	; (ec8 <mulib_slinky_init+0x68>)
     e64:	4b19      	ldr	r3, [pc, #100]	; (ecc <mulib_slinky_init+0x6c>)
     e66:	4798      	blx	r3
  printf("# mulib_slinky %s: see https://github.com/rdpoor/mulib\r\n", MULIB_SLINKY_VERSION);
     e68:	4919      	ldr	r1, [pc, #100]	; (ed0 <mulib_slinky_init+0x70>)
     e6a:	481a      	ldr	r0, [pc, #104]	; (ed4 <mulib_slinky_init+0x74>)
     e6c:	4b1a      	ldr	r3, [pc, #104]	; (ed8 <mulib_slinky_init+0x78>)
     e6e:	4798      	blx	r3

  // initialize the port-specific interface
  mu_port_init();
     e70:	4b1a      	ldr	r3, [pc, #104]	; (edc <mulib_slinky_init+0x7c>)
     e72:	4798      	blx	r3

  // set up the isr queue and the scheduler
  mu_spscq_init(&s_isr_queue, s_isr_queue_items, ISR_Q_CAPACITY);
     e74:	4c1a      	ldr	r4, [pc, #104]	; (ee0 <mulib_slinky_init+0x80>)
     e76:	0025      	movs	r5, r4
     e78:	3520      	adds	r5, #32
     e7a:	2208      	movs	r2, #8
     e7c:	0021      	movs	r1, r4
     e7e:	0028      	movs	r0, r5
     e80:	4b18      	ldr	r3, [pc, #96]	; (ee4 <mulib_slinky_init+0x84>)
     e82:	4798      	blx	r3
  mu_sched_init(&s_sched, s_event_queue, EVENT_QUEUE_CAPACITY, &s_isr_queue);
     e84:	0021      	movs	r1, r4
     e86:	312c      	adds	r1, #44	; 0x2c
     e88:	347c      	adds	r4, #124	; 0x7c
     e8a:	002b      	movs	r3, r5
     e8c:	220a      	movs	r2, #10
     e8e:	0020      	movs	r0, r4
     e90:	4d15      	ldr	r5, [pc, #84]	; (ee8 <mulib_slinky_init+0x88>)
     e92:	47a8      	blx	r5

  // initialize tasks
  led_task_init(&s_led_task, &s_led_ctx);
     e94:	4d15      	ldr	r5, [pc, #84]	; (eec <mulib_slinky_init+0x8c>)
     e96:	0029      	movs	r1, r5
     e98:	311c      	adds	r1, #28
     e9a:	002e      	movs	r6, r5
     e9c:	3620      	adds	r6, #32
     e9e:	0030      	movs	r0, r6
     ea0:	4b13      	ldr	r3, [pc, #76]	; (ef0 <mulib_slinky_init+0x90>)
     ea2:	4798      	blx	r3
  button_task_init(&s_button_task, &s_button_ctx, &s_sched);
     ea4:	0029      	movs	r1, r5
     ea6:	3138      	adds	r1, #56	; 0x38
     ea8:	0028      	movs	r0, r5
     eaa:	3040      	adds	r0, #64	; 0x40
     eac:	0022      	movs	r2, r4
     eae:	4b11      	ldr	r3, [pc, #68]	; (ef4 <mulib_slinky_init+0x94>)
     eb0:	4798      	blx	r3
  idle_task_init(&s_idle_task, &s_sched);
     eb2:	0028      	movs	r0, r5
     eb4:	3058      	adds	r0, #88	; 0x58
     eb6:	0021      	movs	r1, r4
     eb8:	4b0f      	ldr	r3, [pc, #60]	; (ef8 <mulib_slinky_init+0x98>)
     eba:	4798      	blx	r3

  // schedule the initial call to the LED task
  mu_sched_task_now(&s_sched, &s_led_task);
     ebc:	0031      	movs	r1, r6
     ebe:	0020      	movs	r0, r4
     ec0:	4b0e      	ldr	r3, [pc, #56]	; (efc <mulib_slinky_init+0x9c>)
     ec2:	4798      	blx	r3
}
     ec4:	bd70      	pop	{r4, r5, r6, pc}
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	00002264 	.word	0x00002264
     ecc:	000013b5 	.word	0x000013b5
     ed0:	00002278 	.word	0x00002278
     ed4:	00002280 	.word	0x00002280
     ed8:	000012c1 	.word	0x000012c1
     edc:	00001011 	.word	0x00001011
     ee0:	200000ac 	.word	0x200000ac
     ee4:	0000031d 	.word	0x0000031d
     ee8:	000001c1 	.word	0x000001c1
     eec:	2000012c 	.word	0x2000012c
     ef0:	00000fd1 	.word	0x00000fd1
     ef4:	00000f4d 	.word	0x00000f4d
     ef8:	00000e1d 	.word	0x00000e1d
     efc:	000002b1 	.word	0x000002b1

00000f00 <mulib_slinky_step>:

void mulib_slinky_step() {
     f00:	b510      	push	{r4, lr}
  // called repeatedly from main(): run the scheduler
  mu_sched_step(&s_sched);
     f02:	4802      	ldr	r0, [pc, #8]	; (f0c <mulib_slinky_step+0xc>)
     f04:	307c      	adds	r0, #124	; 0x7c
     f06:	4b02      	ldr	r3, [pc, #8]	; (f10 <mulib_slinky_step+0x10>)
     f08:	4798      	blx	r3
}
     f0a:	bd10      	pop	{r4, pc}
     f0c:	200000ac 	.word	0x200000ac
     f10:	00000225 	.word	0x00000225

00000f14 <button_task_fn>:
}

// =============================================================================
// local (static) code

static void *button_task_fn(void *ctx, void *arg) {
     f14:	b510      	push	{r4, lr}
  // button context (unused) is passed as first arg, scheduler as second.
  mu_sched_t *sched = (mu_sched_t *)arg;
  mu_time_t now = mu_sched_get_current_time(sched);
     f16:	0008      	movs	r0, r1
     f18:	4b03      	ldr	r3, [pc, #12]	; (f28 <button_task_fn+0x14>)
     f1a:	4798      	blx	r3
     f1c:	0001      	movs	r1, r0

  printf("button pressed at %lu\r\n", now);
     f1e:	4803      	ldr	r0, [pc, #12]	; (f2c <button_task_fn+0x18>)
     f20:	4b03      	ldr	r3, [pc, #12]	; (f30 <button_task_fn+0x1c>)
     f22:	4798      	blx	r3
  return NULL;
}
     f24:	2000      	movs	r0, #0
     f26:	bd10      	pop	{r4, pc}
     f28:	00000201 	.word	0x00000201
     f2c:	000022bc 	.word	0x000022bc
     f30:	000012c1 	.word	0x000012c1

00000f34 <button_cb>:

// button_cb is triggered when a button press generates an interrupt.
// From interrupt level, schedule the button task upon leaving interrupt level.
static void button_cb(void) {
     f34:	b510      	push	{r4, lr}
  mu_sched_task_from_isr(s_sched, s_button_task);
     f36:	4b03      	ldr	r3, [pc, #12]	; (f44 <button_cb+0x10>)
     f38:	6819      	ldr	r1, [r3, #0]
     f3a:	6858      	ldr	r0, [r3, #4]
     f3c:	4b02      	ldr	r3, [pc, #8]	; (f48 <button_cb+0x14>)
     f3e:	4798      	blx	r3
}
     f40:	bd10      	pop	{r4, pc}
     f42:	46c0      	nop			; (mov r8, r8)
     f44:	2000019c 	.word	0x2000019c
     f48:	00000305 	.word	0x00000305

00000f4c <button_task_init>:
                            mu_sched_t *sched) {
     f4c:	b570      	push	{r4, r5, r6, lr}
     f4e:	0004      	movs	r4, r0
  s_button_task = button_task;
     f50:	4b07      	ldr	r3, [pc, #28]	; (f70 <button_task_init+0x24>)
     f52:	6018      	str	r0, [r3, #0]
  s_sched = sched;
     f54:	605a      	str	r2, [r3, #4]
  ext_irq_register(PIN_PA15, button_cb);
     f56:	4907      	ldr	r1, [pc, #28]	; (f74 <button_task_init+0x28>)
     f58:	200f      	movs	r0, #15
     f5a:	4b07      	ldr	r3, [pc, #28]	; (f78 <button_task_init+0x2c>)
     f5c:	4798      	blx	r3
  mu_task_init(button_task, button_task_fn, NULL, "Button Interrupt");
     f5e:	4b07      	ldr	r3, [pc, #28]	; (f7c <button_task_init+0x30>)
     f60:	2200      	movs	r2, #0
     f62:	4907      	ldr	r1, [pc, #28]	; (f80 <button_task_init+0x34>)
     f64:	0020      	movs	r0, r4
     f66:	4d07      	ldr	r5, [pc, #28]	; (f84 <button_task_init+0x38>)
     f68:	47a8      	blx	r5
}
     f6a:	0020      	movs	r0, r4
     f6c:	bd70      	pop	{r4, r5, r6, pc}
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	2000019c 	.word	0x2000019c
     f74:	00000f35 	.word	0x00000f35
     f78:	0000076d 	.word	0x0000076d
     f7c:	000022d4 	.word	0x000022d4
     f80:	00000f15 	.word	0x00000f15
     f84:	000003b3 	.word	0x000003b3

00000f88 <led_task_fn>:
}

// =============================================================================
// local (static) code

static void *led_task_fn(void *ctx, void *arg) {
     f88:	b510      	push	{r4, lr}
     f8a:	000b      	movs	r3, r1
  // "context" is passed as the first argument, scheduler is second
  led_ctx_t *led_ctx = (led_ctx_t *)ctx;
  mu_sched_t *sched = (mu_sched_t *)arg;

  if (led_ctx->state == LED_OFF) {
     f8c:	7802      	ldrb	r2, [r0, #0]
     f8e:	2a00      	cmp	r2, #0
     f90:	d00d      	beq.n	fae <led_task_fn+0x26>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f92:	2480      	movs	r4, #128	; 0x80
     f94:	05e4      	lsls	r4, r4, #23
     f96:	2298      	movs	r2, #152	; 0x98
     f98:	21c0      	movs	r1, #192	; 0xc0
     f9a:	05c9      	lsls	r1, r1, #23
     f9c:	508c      	str	r4, [r1, r2]
    led_ctx->state = LED_ON;
    mu_sched_reschedule_in(sched, MU_TIME_MS_TO_DURATION(LED_ON_TIME_MS));

  } else {
    LED_Off();
    led_ctx->state = LED_OFF;
     f9e:	2200      	movs	r2, #0
     fa0:	7002      	strb	r2, [r0, #0]
    mu_sched_reschedule_in(sched, MU_TIME_MS_TO_DURATION(LED_OFF_TIME_MS));
     fa2:	4909      	ldr	r1, [pc, #36]	; (fc8 <led_task_fn+0x40>)
     fa4:	0018      	movs	r0, r3
     fa6:	4b09      	ldr	r3, [pc, #36]	; (fcc <led_task_fn+0x44>)
     fa8:	4798      	blx	r3
  }

  return NULL;
}
     faa:	2000      	movs	r0, #0
     fac:	bd10      	pop	{r4, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fae:	2480      	movs	r4, #128	; 0x80
     fb0:	05e4      	lsls	r4, r4, #23
     fb2:	3294      	adds	r2, #148	; 0x94
     fb4:	21c0      	movs	r1, #192	; 0xc0
     fb6:	05c9      	lsls	r1, r1, #23
     fb8:	508c      	str	r4, [r1, r2]
    led_ctx->state = LED_ON;
     fba:	3a93      	subs	r2, #147	; 0x93
     fbc:	7002      	strb	r2, [r0, #0]
    mu_sched_reschedule_in(sched, MU_TIME_MS_TO_DURATION(LED_ON_TIME_MS));
     fbe:	21a3      	movs	r1, #163	; 0xa3
     fc0:	0018      	movs	r0, r3
     fc2:	4b02      	ldr	r3, [pc, #8]	; (fcc <led_task_fn+0x44>)
     fc4:	4798      	blx	r3
     fc6:	e7f0      	b.n	faa <led_task_fn+0x22>
     fc8:	00003f5c 	.word	0x00003f5c
     fcc:	000002d1 	.word	0x000002d1

00000fd0 <led_task_init>:
mu_task_t *led_task_init(mu_task_t *led_task, led_ctx_t *led_ctx) {
     fd0:	b570      	push	{r4, r5, r6, lr}
     fd2:	0004      	movs	r4, r0
     fd4:	000a      	movs	r2, r1
  led_ctx->state = LED_OFF;
     fd6:	2300      	movs	r3, #0
     fd8:	700b      	strb	r3, [r1, #0]
  mu_task_init(led_task, led_task_fn, led_ctx, "LED");
     fda:	4b03      	ldr	r3, [pc, #12]	; (fe8 <led_task_init+0x18>)
     fdc:	4903      	ldr	r1, [pc, #12]	; (fec <led_task_init+0x1c>)
     fde:	4d04      	ldr	r5, [pc, #16]	; (ff0 <led_task_init+0x20>)
     fe0:	47a8      	blx	r5
}
     fe2:	0020      	movs	r0, r4
     fe4:	bd70      	pop	{r4, r5, r6, pc}
     fe6:	46c0      	nop			; (mov r8, r8)
     fe8:	000022e8 	.word	0x000022e8
     fec:	00000f89 	.word	0x00000f89
     ff0:	000003b3 	.word	0x000003b3

00000ff4 <main>:

#include <atmel_start.h>
#include "mulib_slinky.h"

int main(void)
{
     ff4:	b510      	push	{r4, lr}
  /* Initializes MCU, drivers and middleware */
  atmel_start_init();
     ff6:	4b03      	ldr	r3, [pc, #12]	; (1004 <main+0x10>)
     ff8:	4798      	blx	r3
  mulib_slinky_init();
     ffa:	4b03      	ldr	r3, [pc, #12]	; (1008 <main+0x14>)
     ffc:	4798      	blx	r3

  /* Replace with your application code */
  while (1) {
    mulib_slinky_step();
     ffe:	4c03      	ldr	r4, [pc, #12]	; (100c <main+0x18>)
    1000:	47a0      	blx	r4
    1002:	e7fd      	b.n	1000 <main+0xc>
    1004:	00000449 	.word	0x00000449
    1008:	00000e61 	.word	0x00000e61
    100c:	00000f01 	.word	0x00000f01

00001010 <mu_port_init>:
static mu_port_time_seconds_dt s_rtc_period;

// =============================================================================
// main code starts here

void mu_port_init() {
    1010:	b510      	push	{r4, lr}
  // Initialize the RTC.  Use CALENDAR_0 since that's the only published
  // interface for interacting with the underlying RTC.
	calendar_enable(&CALENDAR_0);  // start RTC
    1012:	4804      	ldr	r0, [pc, #16]	; (1024 <mu_port_init+0x14>)
    1014:	4b04      	ldr	r3, [pc, #16]	; (1028 <mu_port_init+0x18>)
    1016:	4798      	blx	r3
  s_rtc_period = 1.0/(mu_port_time_seconds_dt)CONF_GCLK_RTC_FREQUENCY;
    1018:	22e0      	movs	r2, #224	; 0xe0
    101a:	0592      	lsls	r2, r2, #22
    101c:	4b03      	ldr	r3, [pc, #12]	; (102c <mu_port_init+0x1c>)
    101e:	601a      	str	r2, [r3, #0]
}
    1020:	bd10      	pop	{r4, pc}
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	200001b0 	.word	0x200001b0
    1028:	000006e5 	.word	0x000006e5
    102c:	200001a4 	.word	0x200001a4

00001030 <mu_port_time_offset>:

mu_port_time_t mu_port_time_offset(mu_port_time_t t, mu_port_time_dt dt) {
  return t + dt;
    1030:	1808      	adds	r0, r1, r0
}
    1032:	4770      	bx	lr

00001034 <mu_port_time_difference>:

mu_port_time_dt mu_port_time_difference(mu_port_time_t t1, mu_port_time_t t2) {
  return t1 - t2;
    1034:	1a40      	subs	r0, r0, r1
}
    1036:	4770      	bx	lr

00001038 <mu_port_time_precedes>:
  return t1 - t2;
    1038:	1a40      	subs	r0, r0, r1

bool mu_port_time_precedes(mu_port_time_t t1, mu_port_time_t t2) {
  return mu_port_time_difference(t1, t2) > MAX_DURATION;
    103a:	0fc0      	lsrs	r0, r0, #31
}
    103c:	4770      	bx	lr
	...

00001040 <mu_port_rtc_now>:
mu_port_time_seconds_dt mu_port_time_duration_to_seconds(mu_port_time_dt dt) {
  return dt * s_rtc_period;
}

mu_port_time_t mu_port_rtc_now() {
	return hri_rtcmode0_read_COUNT_COUNT_bf(CALENDAR_0.device.hw);
    1040:	4b03      	ldr	r3, [pc, #12]	; (1050 <mu_port_rtc_now+0x10>)
    1042:	681a      	ldr	r2, [r3, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1044:	7a93      	ldrb	r3, [r2, #10]
    1046:	09db      	lsrs	r3, r3, #7
    1048:	d1fc      	bne.n	1044 <mu_port_rtc_now+0x4>
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
    104a:	6910      	ldr	r0, [r2, #16]
}
    104c:	4770      	bx	lr
    104e:	46c0      	nop			; (mov r8, r8)
    1050:	200001b0 	.word	0x200001b0

00001054 <_write>:

// ================
// support for printf()

int _write(int file, char *ptr, int len) {
    1054:	b5f0      	push	{r4, r5, r6, r7, lr}
    1056:	46c6      	mov	lr, r8
    1058:	b500      	push	{lr}
    105a:	4690      	mov	r8, r2
  // void file;
  int n = len;

  while (n-- > 0) {
    105c:	2a00      	cmp	r2, #0
    105e:	dd0c      	ble.n	107a <_write+0x26>
    1060:	000d      	movs	r5, r1
    1062:	4441      	add	r1, r8
    1064:	000e      	movs	r6, r1
    while (!USART_0_is_byte_sent())
    1066:	4c07      	ldr	r4, [pc, #28]	; (1084 <_write+0x30>)
  		;
    USART_0_write_byte(*ptr++);
    1068:	4f07      	ldr	r7, [pc, #28]	; (1088 <_write+0x34>)
    while (!USART_0_is_byte_sent())
    106a:	47a0      	blx	r4
    106c:	2800      	cmp	r0, #0
    106e:	d0fc      	beq.n	106a <_write+0x16>
    USART_0_write_byte(*ptr++);
    1070:	7828      	ldrb	r0, [r5, #0]
    1072:	47b8      	blx	r7
    1074:	3501      	adds	r5, #1
  while (n-- > 0) {
    1076:	42b5      	cmp	r5, r6
    1078:	d1f7      	bne.n	106a <_write+0x16>
  }
  return len;
}
    107a:	4640      	mov	r0, r8
    107c:	bc04      	pop	{r2}
    107e:	4690      	mov	r8, r2
    1080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	00000d55 	.word	0x00000d55
    1088:	00000d49 	.word	0x00000d49

0000108c <_read>:

int _read(int file, char *ptr, int len) {
    108c:	b5f0      	push	{r4, r5, r6, r7, lr}
    108e:	46c6      	mov	lr, r8
    1090:	b500      	push	{lr}
    1092:	4690      	mov	r8, r2
  // void file;
  int n = len;

  while (n-- > 0) {
    1094:	2a00      	cmp	r2, #0
    1096:	dd0c      	ble.n	10b2 <_read+0x26>
    1098:	000d      	movs	r5, r1
    109a:	4441      	add	r1, r8
    109c:	000e      	movs	r6, r1
    while (!USART_0_is_byte_received())
    109e:	4c07      	ldr	r4, [pc, #28]	; (10bc <_read+0x30>)
			;
    *ptr++ = USART_0_read_byte();
    10a0:	4f07      	ldr	r7, [pc, #28]	; (10c0 <_read+0x34>)
    while (!USART_0_is_byte_received())
    10a2:	47a0      	blx	r4
    10a4:	2800      	cmp	r0, #0
    10a6:	d0fc      	beq.n	10a2 <_read+0x16>
    *ptr++ = USART_0_read_byte();
    10a8:	47b8      	blx	r7
    10aa:	7028      	strb	r0, [r5, #0]
    10ac:	3501      	adds	r5, #1
  while (n-- > 0) {
    10ae:	42b5      	cmp	r5, r6
    10b0:	d1f7      	bne.n	10a2 <_read+0x16>
  }
  return len;
}
    10b2:	4640      	mov	r0, r8
    10b4:	bc04      	pop	{r2}
    10b6:	4690      	mov	r8, r2
    10b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	00000d65 	.word	0x00000d65
    10c0:	00000d3d 	.word	0x00000d3d

000010c4 <__udivsi3>:
    10c4:	2200      	movs	r2, #0
    10c6:	0843      	lsrs	r3, r0, #1
    10c8:	428b      	cmp	r3, r1
    10ca:	d374      	bcc.n	11b6 <__udivsi3+0xf2>
    10cc:	0903      	lsrs	r3, r0, #4
    10ce:	428b      	cmp	r3, r1
    10d0:	d35f      	bcc.n	1192 <__udivsi3+0xce>
    10d2:	0a03      	lsrs	r3, r0, #8
    10d4:	428b      	cmp	r3, r1
    10d6:	d344      	bcc.n	1162 <__udivsi3+0x9e>
    10d8:	0b03      	lsrs	r3, r0, #12
    10da:	428b      	cmp	r3, r1
    10dc:	d328      	bcc.n	1130 <__udivsi3+0x6c>
    10de:	0c03      	lsrs	r3, r0, #16
    10e0:	428b      	cmp	r3, r1
    10e2:	d30d      	bcc.n	1100 <__udivsi3+0x3c>
    10e4:	22ff      	movs	r2, #255	; 0xff
    10e6:	0209      	lsls	r1, r1, #8
    10e8:	ba12      	rev	r2, r2
    10ea:	0c03      	lsrs	r3, r0, #16
    10ec:	428b      	cmp	r3, r1
    10ee:	d302      	bcc.n	10f6 <__udivsi3+0x32>
    10f0:	1212      	asrs	r2, r2, #8
    10f2:	0209      	lsls	r1, r1, #8
    10f4:	d065      	beq.n	11c2 <__udivsi3+0xfe>
    10f6:	0b03      	lsrs	r3, r0, #12
    10f8:	428b      	cmp	r3, r1
    10fa:	d319      	bcc.n	1130 <__udivsi3+0x6c>
    10fc:	e000      	b.n	1100 <__udivsi3+0x3c>
    10fe:	0a09      	lsrs	r1, r1, #8
    1100:	0bc3      	lsrs	r3, r0, #15
    1102:	428b      	cmp	r3, r1
    1104:	d301      	bcc.n	110a <__udivsi3+0x46>
    1106:	03cb      	lsls	r3, r1, #15
    1108:	1ac0      	subs	r0, r0, r3
    110a:	4152      	adcs	r2, r2
    110c:	0b83      	lsrs	r3, r0, #14
    110e:	428b      	cmp	r3, r1
    1110:	d301      	bcc.n	1116 <__udivsi3+0x52>
    1112:	038b      	lsls	r3, r1, #14
    1114:	1ac0      	subs	r0, r0, r3
    1116:	4152      	adcs	r2, r2
    1118:	0b43      	lsrs	r3, r0, #13
    111a:	428b      	cmp	r3, r1
    111c:	d301      	bcc.n	1122 <__udivsi3+0x5e>
    111e:	034b      	lsls	r3, r1, #13
    1120:	1ac0      	subs	r0, r0, r3
    1122:	4152      	adcs	r2, r2
    1124:	0b03      	lsrs	r3, r0, #12
    1126:	428b      	cmp	r3, r1
    1128:	d301      	bcc.n	112e <__udivsi3+0x6a>
    112a:	030b      	lsls	r3, r1, #12
    112c:	1ac0      	subs	r0, r0, r3
    112e:	4152      	adcs	r2, r2
    1130:	0ac3      	lsrs	r3, r0, #11
    1132:	428b      	cmp	r3, r1
    1134:	d301      	bcc.n	113a <__udivsi3+0x76>
    1136:	02cb      	lsls	r3, r1, #11
    1138:	1ac0      	subs	r0, r0, r3
    113a:	4152      	adcs	r2, r2
    113c:	0a83      	lsrs	r3, r0, #10
    113e:	428b      	cmp	r3, r1
    1140:	d301      	bcc.n	1146 <__udivsi3+0x82>
    1142:	028b      	lsls	r3, r1, #10
    1144:	1ac0      	subs	r0, r0, r3
    1146:	4152      	adcs	r2, r2
    1148:	0a43      	lsrs	r3, r0, #9
    114a:	428b      	cmp	r3, r1
    114c:	d301      	bcc.n	1152 <__udivsi3+0x8e>
    114e:	024b      	lsls	r3, r1, #9
    1150:	1ac0      	subs	r0, r0, r3
    1152:	4152      	adcs	r2, r2
    1154:	0a03      	lsrs	r3, r0, #8
    1156:	428b      	cmp	r3, r1
    1158:	d301      	bcc.n	115e <__udivsi3+0x9a>
    115a:	020b      	lsls	r3, r1, #8
    115c:	1ac0      	subs	r0, r0, r3
    115e:	4152      	adcs	r2, r2
    1160:	d2cd      	bcs.n	10fe <__udivsi3+0x3a>
    1162:	09c3      	lsrs	r3, r0, #7
    1164:	428b      	cmp	r3, r1
    1166:	d301      	bcc.n	116c <__udivsi3+0xa8>
    1168:	01cb      	lsls	r3, r1, #7
    116a:	1ac0      	subs	r0, r0, r3
    116c:	4152      	adcs	r2, r2
    116e:	0983      	lsrs	r3, r0, #6
    1170:	428b      	cmp	r3, r1
    1172:	d301      	bcc.n	1178 <__udivsi3+0xb4>
    1174:	018b      	lsls	r3, r1, #6
    1176:	1ac0      	subs	r0, r0, r3
    1178:	4152      	adcs	r2, r2
    117a:	0943      	lsrs	r3, r0, #5
    117c:	428b      	cmp	r3, r1
    117e:	d301      	bcc.n	1184 <__udivsi3+0xc0>
    1180:	014b      	lsls	r3, r1, #5
    1182:	1ac0      	subs	r0, r0, r3
    1184:	4152      	adcs	r2, r2
    1186:	0903      	lsrs	r3, r0, #4
    1188:	428b      	cmp	r3, r1
    118a:	d301      	bcc.n	1190 <__udivsi3+0xcc>
    118c:	010b      	lsls	r3, r1, #4
    118e:	1ac0      	subs	r0, r0, r3
    1190:	4152      	adcs	r2, r2
    1192:	08c3      	lsrs	r3, r0, #3
    1194:	428b      	cmp	r3, r1
    1196:	d301      	bcc.n	119c <__udivsi3+0xd8>
    1198:	00cb      	lsls	r3, r1, #3
    119a:	1ac0      	subs	r0, r0, r3
    119c:	4152      	adcs	r2, r2
    119e:	0883      	lsrs	r3, r0, #2
    11a0:	428b      	cmp	r3, r1
    11a2:	d301      	bcc.n	11a8 <__udivsi3+0xe4>
    11a4:	008b      	lsls	r3, r1, #2
    11a6:	1ac0      	subs	r0, r0, r3
    11a8:	4152      	adcs	r2, r2
    11aa:	0843      	lsrs	r3, r0, #1
    11ac:	428b      	cmp	r3, r1
    11ae:	d301      	bcc.n	11b4 <__udivsi3+0xf0>
    11b0:	004b      	lsls	r3, r1, #1
    11b2:	1ac0      	subs	r0, r0, r3
    11b4:	4152      	adcs	r2, r2
    11b6:	1a41      	subs	r1, r0, r1
    11b8:	d200      	bcs.n	11bc <__udivsi3+0xf8>
    11ba:	4601      	mov	r1, r0
    11bc:	4152      	adcs	r2, r2
    11be:	4610      	mov	r0, r2
    11c0:	4770      	bx	lr
    11c2:	e7ff      	b.n	11c4 <__udivsi3+0x100>
    11c4:	b501      	push	{r0, lr}
    11c6:	2000      	movs	r0, #0
    11c8:	f000 f806 	bl	11d8 <__aeabi_idiv0>
    11cc:	bd02      	pop	{r1, pc}
    11ce:	46c0      	nop			; (mov r8, r8)

000011d0 <__aeabi_uidivmod>:
    11d0:	2900      	cmp	r1, #0
    11d2:	d0f7      	beq.n	11c4 <__udivsi3+0x100>
    11d4:	e776      	b.n	10c4 <__udivsi3>
    11d6:	4770      	bx	lr

000011d8 <__aeabi_idiv0>:
    11d8:	4770      	bx	lr
    11da:	46c0      	nop			; (mov r8, r8)

000011dc <__ffssi2>:
    11dc:	b510      	push	{r4, lr}
    11de:	2300      	movs	r3, #0
    11e0:	2800      	cmp	r0, #0
    11e2:	d002      	beq.n	11ea <__ffssi2+0xe>
    11e4:	f000 f804 	bl	11f0 <__ctzsi2>
    11e8:	1c43      	adds	r3, r0, #1
    11ea:	0018      	movs	r0, r3
    11ec:	bd10      	pop	{r4, pc}
    11ee:	46c0      	nop			; (mov r8, r8)

000011f0 <__ctzsi2>:
    11f0:	4241      	negs	r1, r0
    11f2:	4008      	ands	r0, r1
    11f4:	211c      	movs	r1, #28
    11f6:	2301      	movs	r3, #1
    11f8:	041b      	lsls	r3, r3, #16
    11fa:	4298      	cmp	r0, r3
    11fc:	d301      	bcc.n	1202 <__ctzsi2+0x12>
    11fe:	0c00      	lsrs	r0, r0, #16
    1200:	3910      	subs	r1, #16
    1202:	0a1b      	lsrs	r3, r3, #8
    1204:	4298      	cmp	r0, r3
    1206:	d301      	bcc.n	120c <__ctzsi2+0x1c>
    1208:	0a00      	lsrs	r0, r0, #8
    120a:	3908      	subs	r1, #8
    120c:	091b      	lsrs	r3, r3, #4
    120e:	4298      	cmp	r0, r3
    1210:	d301      	bcc.n	1216 <__ctzsi2+0x26>
    1212:	0900      	lsrs	r0, r0, #4
    1214:	3904      	subs	r1, #4
    1216:	a202      	add	r2, pc, #8	; (adr r2, 1220 <__ctzsi2+0x30>)
    1218:	5c10      	ldrb	r0, [r2, r0]
    121a:	1a40      	subs	r0, r0, r1
    121c:	4770      	bx	lr
    121e:	46c0      	nop			; (mov r8, r8)
    1220:	1d1d1c1b 	.word	0x1d1d1c1b
    1224:	1e1e1e1e 	.word	0x1e1e1e1e
    1228:	1f1f1f1f 	.word	0x1f1f1f1f
    122c:	1f1f1f1f 	.word	0x1f1f1f1f

00001230 <__libc_init_array>:
    1230:	b570      	push	{r4, r5, r6, lr}
    1232:	2600      	movs	r6, #0
    1234:	4d0c      	ldr	r5, [pc, #48]	; (1268 <__libc_init_array+0x38>)
    1236:	4c0d      	ldr	r4, [pc, #52]	; (126c <__libc_init_array+0x3c>)
    1238:	1b64      	subs	r4, r4, r5
    123a:	10a4      	asrs	r4, r4, #2
    123c:	42a6      	cmp	r6, r4
    123e:	d109      	bne.n	1254 <__libc_init_array+0x24>
    1240:	2600      	movs	r6, #0
    1242:	f001 f89f 	bl	2384 <_init>
    1246:	4d0a      	ldr	r5, [pc, #40]	; (1270 <__libc_init_array+0x40>)
    1248:	4c0a      	ldr	r4, [pc, #40]	; (1274 <__libc_init_array+0x44>)
    124a:	1b64      	subs	r4, r4, r5
    124c:	10a4      	asrs	r4, r4, #2
    124e:	42a6      	cmp	r6, r4
    1250:	d105      	bne.n	125e <__libc_init_array+0x2e>
    1252:	bd70      	pop	{r4, r5, r6, pc}
    1254:	00b3      	lsls	r3, r6, #2
    1256:	58eb      	ldr	r3, [r5, r3]
    1258:	4798      	blx	r3
    125a:	3601      	adds	r6, #1
    125c:	e7ee      	b.n	123c <__libc_init_array+0xc>
    125e:	00b3      	lsls	r3, r6, #2
    1260:	58eb      	ldr	r3, [r5, r3]
    1262:	4798      	blx	r3
    1264:	3601      	adds	r6, #1
    1266:	e7f2      	b.n	124e <__libc_init_array+0x1e>
    1268:	00002390 	.word	0x00002390
    126c:	00002390 	.word	0x00002390
    1270:	00002390 	.word	0x00002390
    1274:	00002394 	.word	0x00002394

00001278 <memcpy>:
    1278:	2300      	movs	r3, #0
    127a:	b510      	push	{r4, lr}
    127c:	429a      	cmp	r2, r3
    127e:	d100      	bne.n	1282 <memcpy+0xa>
    1280:	bd10      	pop	{r4, pc}
    1282:	5ccc      	ldrb	r4, [r1, r3]
    1284:	54c4      	strb	r4, [r0, r3]
    1286:	3301      	adds	r3, #1
    1288:	e7f8      	b.n	127c <memcpy+0x4>

0000128a <memmove>:
    128a:	b510      	push	{r4, lr}
    128c:	4288      	cmp	r0, r1
    128e:	d902      	bls.n	1296 <memmove+0xc>
    1290:	188b      	adds	r3, r1, r2
    1292:	4298      	cmp	r0, r3
    1294:	d308      	bcc.n	12a8 <memmove+0x1e>
    1296:	2300      	movs	r3, #0
    1298:	429a      	cmp	r2, r3
    129a:	d007      	beq.n	12ac <memmove+0x22>
    129c:	5ccc      	ldrb	r4, [r1, r3]
    129e:	54c4      	strb	r4, [r0, r3]
    12a0:	3301      	adds	r3, #1
    12a2:	e7f9      	b.n	1298 <memmove+0xe>
    12a4:	5c8b      	ldrb	r3, [r1, r2]
    12a6:	5483      	strb	r3, [r0, r2]
    12a8:	3a01      	subs	r2, #1
    12aa:	d2fb      	bcs.n	12a4 <memmove+0x1a>
    12ac:	bd10      	pop	{r4, pc}

000012ae <memset>:
    12ae:	0003      	movs	r3, r0
    12b0:	1882      	adds	r2, r0, r2
    12b2:	4293      	cmp	r3, r2
    12b4:	d100      	bne.n	12b8 <memset+0xa>
    12b6:	4770      	bx	lr
    12b8:	7019      	strb	r1, [r3, #0]
    12ba:	3301      	adds	r3, #1
    12bc:	e7f9      	b.n	12b2 <memset+0x4>
	...

000012c0 <iprintf>:
    12c0:	b40f      	push	{r0, r1, r2, r3}
    12c2:	4b0b      	ldr	r3, [pc, #44]	; (12f0 <iprintf+0x30>)
    12c4:	b513      	push	{r0, r1, r4, lr}
    12c6:	681c      	ldr	r4, [r3, #0]
    12c8:	2c00      	cmp	r4, #0
    12ca:	d005      	beq.n	12d8 <iprintf+0x18>
    12cc:	69a3      	ldr	r3, [r4, #24]
    12ce:	2b00      	cmp	r3, #0
    12d0:	d102      	bne.n	12d8 <iprintf+0x18>
    12d2:	0020      	movs	r0, r4
    12d4:	f000 fa3c 	bl	1750 <__sinit>
    12d8:	ab05      	add	r3, sp, #20
    12da:	9a04      	ldr	r2, [sp, #16]
    12dc:	68a1      	ldr	r1, [r4, #8]
    12de:	0020      	movs	r0, r4
    12e0:	9301      	str	r3, [sp, #4]
    12e2:	f000 fc07 	bl	1af4 <_vfiprintf_r>
    12e6:	bc16      	pop	{r1, r2, r4}
    12e8:	bc08      	pop	{r3}
    12ea:	b004      	add	sp, #16
    12ec:	4718      	bx	r3
    12ee:	46c0      	nop			; (mov r8, r8)
    12f0:	20000000 	.word	0x20000000

000012f4 <_puts_r>:
    12f4:	b570      	push	{r4, r5, r6, lr}
    12f6:	0005      	movs	r5, r0
    12f8:	000e      	movs	r6, r1
    12fa:	2800      	cmp	r0, #0
    12fc:	d004      	beq.n	1308 <_puts_r+0x14>
    12fe:	6983      	ldr	r3, [r0, #24]
    1300:	2b00      	cmp	r3, #0
    1302:	d101      	bne.n	1308 <_puts_r+0x14>
    1304:	f000 fa24 	bl	1750 <__sinit>
    1308:	69ab      	ldr	r3, [r5, #24]
    130a:	68ac      	ldr	r4, [r5, #8]
    130c:	2b00      	cmp	r3, #0
    130e:	d102      	bne.n	1316 <_puts_r+0x22>
    1310:	0028      	movs	r0, r5
    1312:	f000 fa1d 	bl	1750 <__sinit>
    1316:	4b24      	ldr	r3, [pc, #144]	; (13a8 <_puts_r+0xb4>)
    1318:	429c      	cmp	r4, r3
    131a:	d10f      	bne.n	133c <_puts_r+0x48>
    131c:	686c      	ldr	r4, [r5, #4]
    131e:	89a3      	ldrh	r3, [r4, #12]
    1320:	071b      	lsls	r3, r3, #28
    1322:	d502      	bpl.n	132a <_puts_r+0x36>
    1324:	6923      	ldr	r3, [r4, #16]
    1326:	2b00      	cmp	r3, #0
    1328:	d120      	bne.n	136c <_puts_r+0x78>
    132a:	0021      	movs	r1, r4
    132c:	0028      	movs	r0, r5
    132e:	f000 f8a1 	bl	1474 <__swsetup_r>
    1332:	2800      	cmp	r0, #0
    1334:	d01a      	beq.n	136c <_puts_r+0x78>
    1336:	2001      	movs	r0, #1
    1338:	4240      	negs	r0, r0
    133a:	bd70      	pop	{r4, r5, r6, pc}
    133c:	4b1b      	ldr	r3, [pc, #108]	; (13ac <_puts_r+0xb8>)
    133e:	429c      	cmp	r4, r3
    1340:	d101      	bne.n	1346 <_puts_r+0x52>
    1342:	68ac      	ldr	r4, [r5, #8]
    1344:	e7eb      	b.n	131e <_puts_r+0x2a>
    1346:	4b1a      	ldr	r3, [pc, #104]	; (13b0 <_puts_r+0xbc>)
    1348:	429c      	cmp	r4, r3
    134a:	d1e8      	bne.n	131e <_puts_r+0x2a>
    134c:	68ec      	ldr	r4, [r5, #12]
    134e:	e7e6      	b.n	131e <_puts_r+0x2a>
    1350:	3b01      	subs	r3, #1
    1352:	3601      	adds	r6, #1
    1354:	60a3      	str	r3, [r4, #8]
    1356:	2b00      	cmp	r3, #0
    1358:	da04      	bge.n	1364 <_puts_r+0x70>
    135a:	69a2      	ldr	r2, [r4, #24]
    135c:	4293      	cmp	r3, r2
    135e:	db16      	blt.n	138e <_puts_r+0x9a>
    1360:	290a      	cmp	r1, #10
    1362:	d014      	beq.n	138e <_puts_r+0x9a>
    1364:	6823      	ldr	r3, [r4, #0]
    1366:	1c5a      	adds	r2, r3, #1
    1368:	6022      	str	r2, [r4, #0]
    136a:	7019      	strb	r1, [r3, #0]
    136c:	7831      	ldrb	r1, [r6, #0]
    136e:	68a3      	ldr	r3, [r4, #8]
    1370:	2900      	cmp	r1, #0
    1372:	d1ed      	bne.n	1350 <_puts_r+0x5c>
    1374:	3b01      	subs	r3, #1
    1376:	60a3      	str	r3, [r4, #8]
    1378:	2b00      	cmp	r3, #0
    137a:	da0f      	bge.n	139c <_puts_r+0xa8>
    137c:	0022      	movs	r2, r4
    137e:	310a      	adds	r1, #10
    1380:	0028      	movs	r0, r5
    1382:	f000 f821 	bl	13c8 <__swbuf_r>
    1386:	1c43      	adds	r3, r0, #1
    1388:	d0d5      	beq.n	1336 <_puts_r+0x42>
    138a:	200a      	movs	r0, #10
    138c:	e7d5      	b.n	133a <_puts_r+0x46>
    138e:	0022      	movs	r2, r4
    1390:	0028      	movs	r0, r5
    1392:	f000 f819 	bl	13c8 <__swbuf_r>
    1396:	1c43      	adds	r3, r0, #1
    1398:	d1e8      	bne.n	136c <_puts_r+0x78>
    139a:	e7cc      	b.n	1336 <_puts_r+0x42>
    139c:	200a      	movs	r0, #10
    139e:	6823      	ldr	r3, [r4, #0]
    13a0:	1c5a      	adds	r2, r3, #1
    13a2:	6022      	str	r2, [r4, #0]
    13a4:	7018      	strb	r0, [r3, #0]
    13a6:	e7c8      	b.n	133a <_puts_r+0x46>
    13a8:	00002310 	.word	0x00002310
    13ac:	00002330 	.word	0x00002330
    13b0:	000022f0 	.word	0x000022f0

000013b4 <puts>:
    13b4:	b510      	push	{r4, lr}
    13b6:	4b03      	ldr	r3, [pc, #12]	; (13c4 <puts+0x10>)
    13b8:	0001      	movs	r1, r0
    13ba:	6818      	ldr	r0, [r3, #0]
    13bc:	f7ff ff9a 	bl	12f4 <_puts_r>
    13c0:	bd10      	pop	{r4, pc}
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	20000000 	.word	0x20000000

000013c8 <__swbuf_r>:
    13c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13ca:	0005      	movs	r5, r0
    13cc:	000e      	movs	r6, r1
    13ce:	0014      	movs	r4, r2
    13d0:	2800      	cmp	r0, #0
    13d2:	d004      	beq.n	13de <__swbuf_r+0x16>
    13d4:	6983      	ldr	r3, [r0, #24]
    13d6:	2b00      	cmp	r3, #0
    13d8:	d101      	bne.n	13de <__swbuf_r+0x16>
    13da:	f000 f9b9 	bl	1750 <__sinit>
    13de:	4b22      	ldr	r3, [pc, #136]	; (1468 <__swbuf_r+0xa0>)
    13e0:	429c      	cmp	r4, r3
    13e2:	d12d      	bne.n	1440 <__swbuf_r+0x78>
    13e4:	686c      	ldr	r4, [r5, #4]
    13e6:	69a3      	ldr	r3, [r4, #24]
    13e8:	60a3      	str	r3, [r4, #8]
    13ea:	89a3      	ldrh	r3, [r4, #12]
    13ec:	071b      	lsls	r3, r3, #28
    13ee:	d531      	bpl.n	1454 <__swbuf_r+0x8c>
    13f0:	6923      	ldr	r3, [r4, #16]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d02e      	beq.n	1454 <__swbuf_r+0x8c>
    13f6:	6823      	ldr	r3, [r4, #0]
    13f8:	6922      	ldr	r2, [r4, #16]
    13fa:	b2f7      	uxtb	r7, r6
    13fc:	1a98      	subs	r0, r3, r2
    13fe:	6963      	ldr	r3, [r4, #20]
    1400:	b2f6      	uxtb	r6, r6
    1402:	4298      	cmp	r0, r3
    1404:	db05      	blt.n	1412 <__swbuf_r+0x4a>
    1406:	0021      	movs	r1, r4
    1408:	0028      	movs	r0, r5
    140a:	f000 f933 	bl	1674 <_fflush_r>
    140e:	2800      	cmp	r0, #0
    1410:	d126      	bne.n	1460 <__swbuf_r+0x98>
    1412:	68a3      	ldr	r3, [r4, #8]
    1414:	3001      	adds	r0, #1
    1416:	3b01      	subs	r3, #1
    1418:	60a3      	str	r3, [r4, #8]
    141a:	6823      	ldr	r3, [r4, #0]
    141c:	1c5a      	adds	r2, r3, #1
    141e:	6022      	str	r2, [r4, #0]
    1420:	701f      	strb	r7, [r3, #0]
    1422:	6963      	ldr	r3, [r4, #20]
    1424:	4298      	cmp	r0, r3
    1426:	d004      	beq.n	1432 <__swbuf_r+0x6a>
    1428:	89a3      	ldrh	r3, [r4, #12]
    142a:	07db      	lsls	r3, r3, #31
    142c:	d51a      	bpl.n	1464 <__swbuf_r+0x9c>
    142e:	2e0a      	cmp	r6, #10
    1430:	d118      	bne.n	1464 <__swbuf_r+0x9c>
    1432:	0021      	movs	r1, r4
    1434:	0028      	movs	r0, r5
    1436:	f000 f91d 	bl	1674 <_fflush_r>
    143a:	2800      	cmp	r0, #0
    143c:	d012      	beq.n	1464 <__swbuf_r+0x9c>
    143e:	e00f      	b.n	1460 <__swbuf_r+0x98>
    1440:	4b0a      	ldr	r3, [pc, #40]	; (146c <__swbuf_r+0xa4>)
    1442:	429c      	cmp	r4, r3
    1444:	d101      	bne.n	144a <__swbuf_r+0x82>
    1446:	68ac      	ldr	r4, [r5, #8]
    1448:	e7cd      	b.n	13e6 <__swbuf_r+0x1e>
    144a:	4b09      	ldr	r3, [pc, #36]	; (1470 <__swbuf_r+0xa8>)
    144c:	429c      	cmp	r4, r3
    144e:	d1ca      	bne.n	13e6 <__swbuf_r+0x1e>
    1450:	68ec      	ldr	r4, [r5, #12]
    1452:	e7c8      	b.n	13e6 <__swbuf_r+0x1e>
    1454:	0021      	movs	r1, r4
    1456:	0028      	movs	r0, r5
    1458:	f000 f80c 	bl	1474 <__swsetup_r>
    145c:	2800      	cmp	r0, #0
    145e:	d0ca      	beq.n	13f6 <__swbuf_r+0x2e>
    1460:	2601      	movs	r6, #1
    1462:	4276      	negs	r6, r6
    1464:	0030      	movs	r0, r6
    1466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1468:	00002310 	.word	0x00002310
    146c:	00002330 	.word	0x00002330
    1470:	000022f0 	.word	0x000022f0

00001474 <__swsetup_r>:
    1474:	4b36      	ldr	r3, [pc, #216]	; (1550 <__swsetup_r+0xdc>)
    1476:	b570      	push	{r4, r5, r6, lr}
    1478:	681d      	ldr	r5, [r3, #0]
    147a:	0006      	movs	r6, r0
    147c:	000c      	movs	r4, r1
    147e:	2d00      	cmp	r5, #0
    1480:	d005      	beq.n	148e <__swsetup_r+0x1a>
    1482:	69ab      	ldr	r3, [r5, #24]
    1484:	2b00      	cmp	r3, #0
    1486:	d102      	bne.n	148e <__swsetup_r+0x1a>
    1488:	0028      	movs	r0, r5
    148a:	f000 f961 	bl	1750 <__sinit>
    148e:	4b31      	ldr	r3, [pc, #196]	; (1554 <__swsetup_r+0xe0>)
    1490:	429c      	cmp	r4, r3
    1492:	d10f      	bne.n	14b4 <__swsetup_r+0x40>
    1494:	686c      	ldr	r4, [r5, #4]
    1496:	230c      	movs	r3, #12
    1498:	5ee2      	ldrsh	r2, [r4, r3]
    149a:	b293      	uxth	r3, r2
    149c:	0719      	lsls	r1, r3, #28
    149e:	d42d      	bmi.n	14fc <__swsetup_r+0x88>
    14a0:	06d9      	lsls	r1, r3, #27
    14a2:	d411      	bmi.n	14c8 <__swsetup_r+0x54>
    14a4:	2309      	movs	r3, #9
    14a6:	2001      	movs	r0, #1
    14a8:	6033      	str	r3, [r6, #0]
    14aa:	3337      	adds	r3, #55	; 0x37
    14ac:	4313      	orrs	r3, r2
    14ae:	81a3      	strh	r3, [r4, #12]
    14b0:	4240      	negs	r0, r0
    14b2:	bd70      	pop	{r4, r5, r6, pc}
    14b4:	4b28      	ldr	r3, [pc, #160]	; (1558 <__swsetup_r+0xe4>)
    14b6:	429c      	cmp	r4, r3
    14b8:	d101      	bne.n	14be <__swsetup_r+0x4a>
    14ba:	68ac      	ldr	r4, [r5, #8]
    14bc:	e7eb      	b.n	1496 <__swsetup_r+0x22>
    14be:	4b27      	ldr	r3, [pc, #156]	; (155c <__swsetup_r+0xe8>)
    14c0:	429c      	cmp	r4, r3
    14c2:	d1e8      	bne.n	1496 <__swsetup_r+0x22>
    14c4:	68ec      	ldr	r4, [r5, #12]
    14c6:	e7e6      	b.n	1496 <__swsetup_r+0x22>
    14c8:	075b      	lsls	r3, r3, #29
    14ca:	d513      	bpl.n	14f4 <__swsetup_r+0x80>
    14cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    14ce:	2900      	cmp	r1, #0
    14d0:	d008      	beq.n	14e4 <__swsetup_r+0x70>
    14d2:	0023      	movs	r3, r4
    14d4:	3344      	adds	r3, #68	; 0x44
    14d6:	4299      	cmp	r1, r3
    14d8:	d002      	beq.n	14e0 <__swsetup_r+0x6c>
    14da:	0030      	movs	r0, r6
    14dc:	f000 fa3a 	bl	1954 <_free_r>
    14e0:	2300      	movs	r3, #0
    14e2:	6363      	str	r3, [r4, #52]	; 0x34
    14e4:	2224      	movs	r2, #36	; 0x24
    14e6:	89a3      	ldrh	r3, [r4, #12]
    14e8:	4393      	bics	r3, r2
    14ea:	81a3      	strh	r3, [r4, #12]
    14ec:	2300      	movs	r3, #0
    14ee:	6063      	str	r3, [r4, #4]
    14f0:	6923      	ldr	r3, [r4, #16]
    14f2:	6023      	str	r3, [r4, #0]
    14f4:	2308      	movs	r3, #8
    14f6:	89a2      	ldrh	r2, [r4, #12]
    14f8:	4313      	orrs	r3, r2
    14fa:	81a3      	strh	r3, [r4, #12]
    14fc:	6923      	ldr	r3, [r4, #16]
    14fe:	2b00      	cmp	r3, #0
    1500:	d10b      	bne.n	151a <__swsetup_r+0xa6>
    1502:	21a0      	movs	r1, #160	; 0xa0
    1504:	2280      	movs	r2, #128	; 0x80
    1506:	89a3      	ldrh	r3, [r4, #12]
    1508:	0089      	lsls	r1, r1, #2
    150a:	0092      	lsls	r2, r2, #2
    150c:	400b      	ands	r3, r1
    150e:	4293      	cmp	r3, r2
    1510:	d003      	beq.n	151a <__swsetup_r+0xa6>
    1512:	0021      	movs	r1, r4
    1514:	0030      	movs	r0, r6
    1516:	f000 f9d9 	bl	18cc <__smakebuf_r>
    151a:	2301      	movs	r3, #1
    151c:	89a2      	ldrh	r2, [r4, #12]
    151e:	4013      	ands	r3, r2
    1520:	d011      	beq.n	1546 <__swsetup_r+0xd2>
    1522:	2300      	movs	r3, #0
    1524:	60a3      	str	r3, [r4, #8]
    1526:	6963      	ldr	r3, [r4, #20]
    1528:	425b      	negs	r3, r3
    152a:	61a3      	str	r3, [r4, #24]
    152c:	2000      	movs	r0, #0
    152e:	6923      	ldr	r3, [r4, #16]
    1530:	4283      	cmp	r3, r0
    1532:	d1be      	bne.n	14b2 <__swsetup_r+0x3e>
    1534:	230c      	movs	r3, #12
    1536:	5ee2      	ldrsh	r2, [r4, r3]
    1538:	0613      	lsls	r3, r2, #24
    153a:	d5ba      	bpl.n	14b2 <__swsetup_r+0x3e>
    153c:	2340      	movs	r3, #64	; 0x40
    153e:	4313      	orrs	r3, r2
    1540:	81a3      	strh	r3, [r4, #12]
    1542:	3801      	subs	r0, #1
    1544:	e7b5      	b.n	14b2 <__swsetup_r+0x3e>
    1546:	0792      	lsls	r2, r2, #30
    1548:	d400      	bmi.n	154c <__swsetup_r+0xd8>
    154a:	6963      	ldr	r3, [r4, #20]
    154c:	60a3      	str	r3, [r4, #8]
    154e:	e7ed      	b.n	152c <__swsetup_r+0xb8>
    1550:	20000000 	.word	0x20000000
    1554:	00002310 	.word	0x00002310
    1558:	00002330 	.word	0x00002330
    155c:	000022f0 	.word	0x000022f0

00001560 <__sflush_r>:
    1560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1562:	898a      	ldrh	r2, [r1, #12]
    1564:	0005      	movs	r5, r0
    1566:	000c      	movs	r4, r1
    1568:	0713      	lsls	r3, r2, #28
    156a:	d460      	bmi.n	162e <__sflush_r+0xce>
    156c:	684b      	ldr	r3, [r1, #4]
    156e:	2b00      	cmp	r3, #0
    1570:	dc04      	bgt.n	157c <__sflush_r+0x1c>
    1572:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1574:	2b00      	cmp	r3, #0
    1576:	dc01      	bgt.n	157c <__sflush_r+0x1c>
    1578:	2000      	movs	r0, #0
    157a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    157c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    157e:	2f00      	cmp	r7, #0
    1580:	d0fa      	beq.n	1578 <__sflush_r+0x18>
    1582:	2300      	movs	r3, #0
    1584:	682e      	ldr	r6, [r5, #0]
    1586:	602b      	str	r3, [r5, #0]
    1588:	2380      	movs	r3, #128	; 0x80
    158a:	015b      	lsls	r3, r3, #5
    158c:	401a      	ands	r2, r3
    158e:	d034      	beq.n	15fa <__sflush_r+0x9a>
    1590:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1592:	89a3      	ldrh	r3, [r4, #12]
    1594:	075b      	lsls	r3, r3, #29
    1596:	d506      	bpl.n	15a6 <__sflush_r+0x46>
    1598:	6863      	ldr	r3, [r4, #4]
    159a:	1ac0      	subs	r0, r0, r3
    159c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    159e:	2b00      	cmp	r3, #0
    15a0:	d001      	beq.n	15a6 <__sflush_r+0x46>
    15a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    15a4:	1ac0      	subs	r0, r0, r3
    15a6:	0002      	movs	r2, r0
    15a8:	6a21      	ldr	r1, [r4, #32]
    15aa:	2300      	movs	r3, #0
    15ac:	0028      	movs	r0, r5
    15ae:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    15b0:	47b8      	blx	r7
    15b2:	89a1      	ldrh	r1, [r4, #12]
    15b4:	1c43      	adds	r3, r0, #1
    15b6:	d106      	bne.n	15c6 <__sflush_r+0x66>
    15b8:	682b      	ldr	r3, [r5, #0]
    15ba:	2b1d      	cmp	r3, #29
    15bc:	d831      	bhi.n	1622 <__sflush_r+0xc2>
    15be:	4a2c      	ldr	r2, [pc, #176]	; (1670 <__sflush_r+0x110>)
    15c0:	40da      	lsrs	r2, r3
    15c2:	07d3      	lsls	r3, r2, #31
    15c4:	d52d      	bpl.n	1622 <__sflush_r+0xc2>
    15c6:	2300      	movs	r3, #0
    15c8:	6063      	str	r3, [r4, #4]
    15ca:	6923      	ldr	r3, [r4, #16]
    15cc:	6023      	str	r3, [r4, #0]
    15ce:	04cb      	lsls	r3, r1, #19
    15d0:	d505      	bpl.n	15de <__sflush_r+0x7e>
    15d2:	1c43      	adds	r3, r0, #1
    15d4:	d102      	bne.n	15dc <__sflush_r+0x7c>
    15d6:	682b      	ldr	r3, [r5, #0]
    15d8:	2b00      	cmp	r3, #0
    15da:	d100      	bne.n	15de <__sflush_r+0x7e>
    15dc:	6560      	str	r0, [r4, #84]	; 0x54
    15de:	6b61      	ldr	r1, [r4, #52]	; 0x34
    15e0:	602e      	str	r6, [r5, #0]
    15e2:	2900      	cmp	r1, #0
    15e4:	d0c8      	beq.n	1578 <__sflush_r+0x18>
    15e6:	0023      	movs	r3, r4
    15e8:	3344      	adds	r3, #68	; 0x44
    15ea:	4299      	cmp	r1, r3
    15ec:	d002      	beq.n	15f4 <__sflush_r+0x94>
    15ee:	0028      	movs	r0, r5
    15f0:	f000 f9b0 	bl	1954 <_free_r>
    15f4:	2000      	movs	r0, #0
    15f6:	6360      	str	r0, [r4, #52]	; 0x34
    15f8:	e7bf      	b.n	157a <__sflush_r+0x1a>
    15fa:	2301      	movs	r3, #1
    15fc:	6a21      	ldr	r1, [r4, #32]
    15fe:	0028      	movs	r0, r5
    1600:	47b8      	blx	r7
    1602:	1c43      	adds	r3, r0, #1
    1604:	d1c5      	bne.n	1592 <__sflush_r+0x32>
    1606:	682b      	ldr	r3, [r5, #0]
    1608:	2b00      	cmp	r3, #0
    160a:	d0c2      	beq.n	1592 <__sflush_r+0x32>
    160c:	2b1d      	cmp	r3, #29
    160e:	d001      	beq.n	1614 <__sflush_r+0xb4>
    1610:	2b16      	cmp	r3, #22
    1612:	d101      	bne.n	1618 <__sflush_r+0xb8>
    1614:	602e      	str	r6, [r5, #0]
    1616:	e7af      	b.n	1578 <__sflush_r+0x18>
    1618:	2340      	movs	r3, #64	; 0x40
    161a:	89a2      	ldrh	r2, [r4, #12]
    161c:	4313      	orrs	r3, r2
    161e:	81a3      	strh	r3, [r4, #12]
    1620:	e7ab      	b.n	157a <__sflush_r+0x1a>
    1622:	2340      	movs	r3, #64	; 0x40
    1624:	430b      	orrs	r3, r1
    1626:	2001      	movs	r0, #1
    1628:	81a3      	strh	r3, [r4, #12]
    162a:	4240      	negs	r0, r0
    162c:	e7a5      	b.n	157a <__sflush_r+0x1a>
    162e:	690f      	ldr	r7, [r1, #16]
    1630:	2f00      	cmp	r7, #0
    1632:	d0a1      	beq.n	1578 <__sflush_r+0x18>
    1634:	680b      	ldr	r3, [r1, #0]
    1636:	600f      	str	r7, [r1, #0]
    1638:	1bdb      	subs	r3, r3, r7
    163a:	9301      	str	r3, [sp, #4]
    163c:	2300      	movs	r3, #0
    163e:	0792      	lsls	r2, r2, #30
    1640:	d100      	bne.n	1644 <__sflush_r+0xe4>
    1642:	694b      	ldr	r3, [r1, #20]
    1644:	60a3      	str	r3, [r4, #8]
    1646:	9b01      	ldr	r3, [sp, #4]
    1648:	2b00      	cmp	r3, #0
    164a:	dc00      	bgt.n	164e <__sflush_r+0xee>
    164c:	e794      	b.n	1578 <__sflush_r+0x18>
    164e:	9b01      	ldr	r3, [sp, #4]
    1650:	003a      	movs	r2, r7
    1652:	6a21      	ldr	r1, [r4, #32]
    1654:	0028      	movs	r0, r5
    1656:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1658:	47b0      	blx	r6
    165a:	2800      	cmp	r0, #0
    165c:	dc03      	bgt.n	1666 <__sflush_r+0x106>
    165e:	2340      	movs	r3, #64	; 0x40
    1660:	89a2      	ldrh	r2, [r4, #12]
    1662:	4313      	orrs	r3, r2
    1664:	e7df      	b.n	1626 <__sflush_r+0xc6>
    1666:	9b01      	ldr	r3, [sp, #4]
    1668:	183f      	adds	r7, r7, r0
    166a:	1a1b      	subs	r3, r3, r0
    166c:	9301      	str	r3, [sp, #4]
    166e:	e7ea      	b.n	1646 <__sflush_r+0xe6>
    1670:	20400001 	.word	0x20400001

00001674 <_fflush_r>:
    1674:	690b      	ldr	r3, [r1, #16]
    1676:	b570      	push	{r4, r5, r6, lr}
    1678:	0005      	movs	r5, r0
    167a:	000c      	movs	r4, r1
    167c:	2b00      	cmp	r3, #0
    167e:	d101      	bne.n	1684 <_fflush_r+0x10>
    1680:	2000      	movs	r0, #0
    1682:	bd70      	pop	{r4, r5, r6, pc}
    1684:	2800      	cmp	r0, #0
    1686:	d004      	beq.n	1692 <_fflush_r+0x1e>
    1688:	6983      	ldr	r3, [r0, #24]
    168a:	2b00      	cmp	r3, #0
    168c:	d101      	bne.n	1692 <_fflush_r+0x1e>
    168e:	f000 f85f 	bl	1750 <__sinit>
    1692:	4b0b      	ldr	r3, [pc, #44]	; (16c0 <_fflush_r+0x4c>)
    1694:	429c      	cmp	r4, r3
    1696:	d109      	bne.n	16ac <_fflush_r+0x38>
    1698:	686c      	ldr	r4, [r5, #4]
    169a:	220c      	movs	r2, #12
    169c:	5ea3      	ldrsh	r3, [r4, r2]
    169e:	2b00      	cmp	r3, #0
    16a0:	d0ee      	beq.n	1680 <_fflush_r+0xc>
    16a2:	0021      	movs	r1, r4
    16a4:	0028      	movs	r0, r5
    16a6:	f7ff ff5b 	bl	1560 <__sflush_r>
    16aa:	e7ea      	b.n	1682 <_fflush_r+0xe>
    16ac:	4b05      	ldr	r3, [pc, #20]	; (16c4 <_fflush_r+0x50>)
    16ae:	429c      	cmp	r4, r3
    16b0:	d101      	bne.n	16b6 <_fflush_r+0x42>
    16b2:	68ac      	ldr	r4, [r5, #8]
    16b4:	e7f1      	b.n	169a <_fflush_r+0x26>
    16b6:	4b04      	ldr	r3, [pc, #16]	; (16c8 <_fflush_r+0x54>)
    16b8:	429c      	cmp	r4, r3
    16ba:	d1ee      	bne.n	169a <_fflush_r+0x26>
    16bc:	68ec      	ldr	r4, [r5, #12]
    16be:	e7ec      	b.n	169a <_fflush_r+0x26>
    16c0:	00002310 	.word	0x00002310
    16c4:	00002330 	.word	0x00002330
    16c8:	000022f0 	.word	0x000022f0

000016cc <_cleanup_r>:
    16cc:	b510      	push	{r4, lr}
    16ce:	4902      	ldr	r1, [pc, #8]	; (16d8 <_cleanup_r+0xc>)
    16d0:	f000 f8b2 	bl	1838 <_fwalk_reent>
    16d4:	bd10      	pop	{r4, pc}
    16d6:	46c0      	nop			; (mov r8, r8)
    16d8:	00001675 	.word	0x00001675

000016dc <std.isra.0>:
    16dc:	2300      	movs	r3, #0
    16de:	b510      	push	{r4, lr}
    16e0:	0004      	movs	r4, r0
    16e2:	6003      	str	r3, [r0, #0]
    16e4:	6043      	str	r3, [r0, #4]
    16e6:	6083      	str	r3, [r0, #8]
    16e8:	8181      	strh	r1, [r0, #12]
    16ea:	6643      	str	r3, [r0, #100]	; 0x64
    16ec:	81c2      	strh	r2, [r0, #14]
    16ee:	6103      	str	r3, [r0, #16]
    16f0:	6143      	str	r3, [r0, #20]
    16f2:	6183      	str	r3, [r0, #24]
    16f4:	0019      	movs	r1, r3
    16f6:	2208      	movs	r2, #8
    16f8:	305c      	adds	r0, #92	; 0x5c
    16fa:	f7ff fdd8 	bl	12ae <memset>
    16fe:	4b05      	ldr	r3, [pc, #20]	; (1714 <std.isra.0+0x38>)
    1700:	6224      	str	r4, [r4, #32]
    1702:	6263      	str	r3, [r4, #36]	; 0x24
    1704:	4b04      	ldr	r3, [pc, #16]	; (1718 <std.isra.0+0x3c>)
    1706:	62a3      	str	r3, [r4, #40]	; 0x28
    1708:	4b04      	ldr	r3, [pc, #16]	; (171c <std.isra.0+0x40>)
    170a:	62e3      	str	r3, [r4, #44]	; 0x2c
    170c:	4b04      	ldr	r3, [pc, #16]	; (1720 <std.isra.0+0x44>)
    170e:	6323      	str	r3, [r4, #48]	; 0x30
    1710:	bd10      	pop	{r4, pc}
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	00002061 	.word	0x00002061
    1718:	00002089 	.word	0x00002089
    171c:	000020c1 	.word	0x000020c1
    1720:	000020ed 	.word	0x000020ed

00001724 <__sfmoreglue>:
    1724:	b570      	push	{r4, r5, r6, lr}
    1726:	2568      	movs	r5, #104	; 0x68
    1728:	1e4a      	subs	r2, r1, #1
    172a:	4355      	muls	r5, r2
    172c:	000e      	movs	r6, r1
    172e:	0029      	movs	r1, r5
    1730:	3174      	adds	r1, #116	; 0x74
    1732:	f000 f959 	bl	19e8 <_malloc_r>
    1736:	1e04      	subs	r4, r0, #0
    1738:	d008      	beq.n	174c <__sfmoreglue+0x28>
    173a:	2100      	movs	r1, #0
    173c:	002a      	movs	r2, r5
    173e:	6001      	str	r1, [r0, #0]
    1740:	6046      	str	r6, [r0, #4]
    1742:	300c      	adds	r0, #12
    1744:	60a0      	str	r0, [r4, #8]
    1746:	3268      	adds	r2, #104	; 0x68
    1748:	f7ff fdb1 	bl	12ae <memset>
    174c:	0020      	movs	r0, r4
    174e:	bd70      	pop	{r4, r5, r6, pc}

00001750 <__sinit>:
    1750:	6983      	ldr	r3, [r0, #24]
    1752:	b513      	push	{r0, r1, r4, lr}
    1754:	0004      	movs	r4, r0
    1756:	2b00      	cmp	r3, #0
    1758:	d128      	bne.n	17ac <__sinit+0x5c>
    175a:	6483      	str	r3, [r0, #72]	; 0x48
    175c:	64c3      	str	r3, [r0, #76]	; 0x4c
    175e:	6503      	str	r3, [r0, #80]	; 0x50
    1760:	4b13      	ldr	r3, [pc, #76]	; (17b0 <__sinit+0x60>)
    1762:	4a14      	ldr	r2, [pc, #80]	; (17b4 <__sinit+0x64>)
    1764:	681b      	ldr	r3, [r3, #0]
    1766:	6282      	str	r2, [r0, #40]	; 0x28
    1768:	9301      	str	r3, [sp, #4]
    176a:	4298      	cmp	r0, r3
    176c:	d101      	bne.n	1772 <__sinit+0x22>
    176e:	2301      	movs	r3, #1
    1770:	6183      	str	r3, [r0, #24]
    1772:	0020      	movs	r0, r4
    1774:	f000 f820 	bl	17b8 <__sfp>
    1778:	6060      	str	r0, [r4, #4]
    177a:	0020      	movs	r0, r4
    177c:	f000 f81c 	bl	17b8 <__sfp>
    1780:	60a0      	str	r0, [r4, #8]
    1782:	0020      	movs	r0, r4
    1784:	f000 f818 	bl	17b8 <__sfp>
    1788:	2200      	movs	r2, #0
    178a:	60e0      	str	r0, [r4, #12]
    178c:	2104      	movs	r1, #4
    178e:	6860      	ldr	r0, [r4, #4]
    1790:	f7ff ffa4 	bl	16dc <std.isra.0>
    1794:	2201      	movs	r2, #1
    1796:	2109      	movs	r1, #9
    1798:	68a0      	ldr	r0, [r4, #8]
    179a:	f7ff ff9f 	bl	16dc <std.isra.0>
    179e:	2202      	movs	r2, #2
    17a0:	2112      	movs	r1, #18
    17a2:	68e0      	ldr	r0, [r4, #12]
    17a4:	f7ff ff9a 	bl	16dc <std.isra.0>
    17a8:	2301      	movs	r3, #1
    17aa:	61a3      	str	r3, [r4, #24]
    17ac:	bd13      	pop	{r0, r1, r4, pc}
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	000022ec 	.word	0x000022ec
    17b4:	000016cd 	.word	0x000016cd

000017b8 <__sfp>:
    17b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17ba:	4b1e      	ldr	r3, [pc, #120]	; (1834 <__sfp+0x7c>)
    17bc:	0007      	movs	r7, r0
    17be:	681e      	ldr	r6, [r3, #0]
    17c0:	69b3      	ldr	r3, [r6, #24]
    17c2:	2b00      	cmp	r3, #0
    17c4:	d102      	bne.n	17cc <__sfp+0x14>
    17c6:	0030      	movs	r0, r6
    17c8:	f7ff ffc2 	bl	1750 <__sinit>
    17cc:	3648      	adds	r6, #72	; 0x48
    17ce:	68b4      	ldr	r4, [r6, #8]
    17d0:	6873      	ldr	r3, [r6, #4]
    17d2:	3b01      	subs	r3, #1
    17d4:	d504      	bpl.n	17e0 <__sfp+0x28>
    17d6:	6833      	ldr	r3, [r6, #0]
    17d8:	2b00      	cmp	r3, #0
    17da:	d007      	beq.n	17ec <__sfp+0x34>
    17dc:	6836      	ldr	r6, [r6, #0]
    17de:	e7f6      	b.n	17ce <__sfp+0x16>
    17e0:	220c      	movs	r2, #12
    17e2:	5ea5      	ldrsh	r5, [r4, r2]
    17e4:	2d00      	cmp	r5, #0
    17e6:	d00d      	beq.n	1804 <__sfp+0x4c>
    17e8:	3468      	adds	r4, #104	; 0x68
    17ea:	e7f2      	b.n	17d2 <__sfp+0x1a>
    17ec:	2104      	movs	r1, #4
    17ee:	0038      	movs	r0, r7
    17f0:	f7ff ff98 	bl	1724 <__sfmoreglue>
    17f4:	6030      	str	r0, [r6, #0]
    17f6:	2800      	cmp	r0, #0
    17f8:	d1f0      	bne.n	17dc <__sfp+0x24>
    17fa:	230c      	movs	r3, #12
    17fc:	0004      	movs	r4, r0
    17fe:	603b      	str	r3, [r7, #0]
    1800:	0020      	movs	r0, r4
    1802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1804:	2301      	movs	r3, #1
    1806:	0020      	movs	r0, r4
    1808:	425b      	negs	r3, r3
    180a:	81e3      	strh	r3, [r4, #14]
    180c:	3302      	adds	r3, #2
    180e:	81a3      	strh	r3, [r4, #12]
    1810:	6665      	str	r5, [r4, #100]	; 0x64
    1812:	6025      	str	r5, [r4, #0]
    1814:	60a5      	str	r5, [r4, #8]
    1816:	6065      	str	r5, [r4, #4]
    1818:	6125      	str	r5, [r4, #16]
    181a:	6165      	str	r5, [r4, #20]
    181c:	61a5      	str	r5, [r4, #24]
    181e:	2208      	movs	r2, #8
    1820:	0029      	movs	r1, r5
    1822:	305c      	adds	r0, #92	; 0x5c
    1824:	f7ff fd43 	bl	12ae <memset>
    1828:	6365      	str	r5, [r4, #52]	; 0x34
    182a:	63a5      	str	r5, [r4, #56]	; 0x38
    182c:	64a5      	str	r5, [r4, #72]	; 0x48
    182e:	64e5      	str	r5, [r4, #76]	; 0x4c
    1830:	e7e6      	b.n	1800 <__sfp+0x48>
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	000022ec 	.word	0x000022ec

00001838 <_fwalk_reent>:
    1838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    183a:	0004      	movs	r4, r0
    183c:	0007      	movs	r7, r0
    183e:	2600      	movs	r6, #0
    1840:	9101      	str	r1, [sp, #4]
    1842:	3448      	adds	r4, #72	; 0x48
    1844:	2c00      	cmp	r4, #0
    1846:	d101      	bne.n	184c <_fwalk_reent+0x14>
    1848:	0030      	movs	r0, r6
    184a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    184c:	6863      	ldr	r3, [r4, #4]
    184e:	68a5      	ldr	r5, [r4, #8]
    1850:	9300      	str	r3, [sp, #0]
    1852:	9b00      	ldr	r3, [sp, #0]
    1854:	3b01      	subs	r3, #1
    1856:	9300      	str	r3, [sp, #0]
    1858:	d501      	bpl.n	185e <_fwalk_reent+0x26>
    185a:	6824      	ldr	r4, [r4, #0]
    185c:	e7f2      	b.n	1844 <_fwalk_reent+0xc>
    185e:	89ab      	ldrh	r3, [r5, #12]
    1860:	2b01      	cmp	r3, #1
    1862:	d908      	bls.n	1876 <_fwalk_reent+0x3e>
    1864:	220e      	movs	r2, #14
    1866:	5eab      	ldrsh	r3, [r5, r2]
    1868:	3301      	adds	r3, #1
    186a:	d004      	beq.n	1876 <_fwalk_reent+0x3e>
    186c:	0029      	movs	r1, r5
    186e:	0038      	movs	r0, r7
    1870:	9b01      	ldr	r3, [sp, #4]
    1872:	4798      	blx	r3
    1874:	4306      	orrs	r6, r0
    1876:	3568      	adds	r5, #104	; 0x68
    1878:	e7eb      	b.n	1852 <_fwalk_reent+0x1a>
	...

0000187c <__swhatbuf_r>:
    187c:	b570      	push	{r4, r5, r6, lr}
    187e:	000e      	movs	r6, r1
    1880:	001d      	movs	r5, r3
    1882:	230e      	movs	r3, #14
    1884:	5ec9      	ldrsh	r1, [r1, r3]
    1886:	b090      	sub	sp, #64	; 0x40
    1888:	0014      	movs	r4, r2
    188a:	2900      	cmp	r1, #0
    188c:	da07      	bge.n	189e <__swhatbuf_r+0x22>
    188e:	2300      	movs	r3, #0
    1890:	602b      	str	r3, [r5, #0]
    1892:	89b3      	ldrh	r3, [r6, #12]
    1894:	061b      	lsls	r3, r3, #24
    1896:	d411      	bmi.n	18bc <__swhatbuf_r+0x40>
    1898:	2380      	movs	r3, #128	; 0x80
    189a:	00db      	lsls	r3, r3, #3
    189c:	e00f      	b.n	18be <__swhatbuf_r+0x42>
    189e:	aa01      	add	r2, sp, #4
    18a0:	f000 fc50 	bl	2144 <_fstat_r>
    18a4:	2800      	cmp	r0, #0
    18a6:	dbf2      	blt.n	188e <__swhatbuf_r+0x12>
    18a8:	22f0      	movs	r2, #240	; 0xf0
    18aa:	9b02      	ldr	r3, [sp, #8]
    18ac:	0212      	lsls	r2, r2, #8
    18ae:	4013      	ands	r3, r2
    18b0:	4a05      	ldr	r2, [pc, #20]	; (18c8 <__swhatbuf_r+0x4c>)
    18b2:	189b      	adds	r3, r3, r2
    18b4:	425a      	negs	r2, r3
    18b6:	4153      	adcs	r3, r2
    18b8:	602b      	str	r3, [r5, #0]
    18ba:	e7ed      	b.n	1898 <__swhatbuf_r+0x1c>
    18bc:	2340      	movs	r3, #64	; 0x40
    18be:	2000      	movs	r0, #0
    18c0:	6023      	str	r3, [r4, #0]
    18c2:	b010      	add	sp, #64	; 0x40
    18c4:	bd70      	pop	{r4, r5, r6, pc}
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	ffffe000 	.word	0xffffe000

000018cc <__smakebuf_r>:
    18cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    18ce:	2602      	movs	r6, #2
    18d0:	898b      	ldrh	r3, [r1, #12]
    18d2:	0005      	movs	r5, r0
    18d4:	000c      	movs	r4, r1
    18d6:	4233      	tst	r3, r6
    18d8:	d006      	beq.n	18e8 <__smakebuf_r+0x1c>
    18da:	0023      	movs	r3, r4
    18dc:	3347      	adds	r3, #71	; 0x47
    18de:	6023      	str	r3, [r4, #0]
    18e0:	6123      	str	r3, [r4, #16]
    18e2:	2301      	movs	r3, #1
    18e4:	6163      	str	r3, [r4, #20]
    18e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    18e8:	ab01      	add	r3, sp, #4
    18ea:	466a      	mov	r2, sp
    18ec:	f7ff ffc6 	bl	187c <__swhatbuf_r>
    18f0:	9900      	ldr	r1, [sp, #0]
    18f2:	0007      	movs	r7, r0
    18f4:	0028      	movs	r0, r5
    18f6:	f000 f877 	bl	19e8 <_malloc_r>
    18fa:	2800      	cmp	r0, #0
    18fc:	d108      	bne.n	1910 <__smakebuf_r+0x44>
    18fe:	220c      	movs	r2, #12
    1900:	5ea3      	ldrsh	r3, [r4, r2]
    1902:	059a      	lsls	r2, r3, #22
    1904:	d4ef      	bmi.n	18e6 <__smakebuf_r+0x1a>
    1906:	2203      	movs	r2, #3
    1908:	4393      	bics	r3, r2
    190a:	431e      	orrs	r6, r3
    190c:	81a6      	strh	r6, [r4, #12]
    190e:	e7e4      	b.n	18da <__smakebuf_r+0xe>
    1910:	4b0f      	ldr	r3, [pc, #60]	; (1950 <__smakebuf_r+0x84>)
    1912:	62ab      	str	r3, [r5, #40]	; 0x28
    1914:	2380      	movs	r3, #128	; 0x80
    1916:	89a2      	ldrh	r2, [r4, #12]
    1918:	6020      	str	r0, [r4, #0]
    191a:	4313      	orrs	r3, r2
    191c:	81a3      	strh	r3, [r4, #12]
    191e:	9b00      	ldr	r3, [sp, #0]
    1920:	6120      	str	r0, [r4, #16]
    1922:	6163      	str	r3, [r4, #20]
    1924:	9b01      	ldr	r3, [sp, #4]
    1926:	2b00      	cmp	r3, #0
    1928:	d00d      	beq.n	1946 <__smakebuf_r+0x7a>
    192a:	230e      	movs	r3, #14
    192c:	5ee1      	ldrsh	r1, [r4, r3]
    192e:	0028      	movs	r0, r5
    1930:	f000 fc1a 	bl	2168 <_isatty_r>
    1934:	2800      	cmp	r0, #0
    1936:	d006      	beq.n	1946 <__smakebuf_r+0x7a>
    1938:	2203      	movs	r2, #3
    193a:	89a3      	ldrh	r3, [r4, #12]
    193c:	4393      	bics	r3, r2
    193e:	001a      	movs	r2, r3
    1940:	2301      	movs	r3, #1
    1942:	4313      	orrs	r3, r2
    1944:	81a3      	strh	r3, [r4, #12]
    1946:	89a0      	ldrh	r0, [r4, #12]
    1948:	4338      	orrs	r0, r7
    194a:	81a0      	strh	r0, [r4, #12]
    194c:	e7cb      	b.n	18e6 <__smakebuf_r+0x1a>
    194e:	46c0      	nop			; (mov r8, r8)
    1950:	000016cd 	.word	0x000016cd

00001954 <_free_r>:
    1954:	b570      	push	{r4, r5, r6, lr}
    1956:	0005      	movs	r5, r0
    1958:	2900      	cmp	r1, #0
    195a:	d010      	beq.n	197e <_free_r+0x2a>
    195c:	1f0c      	subs	r4, r1, #4
    195e:	6823      	ldr	r3, [r4, #0]
    1960:	2b00      	cmp	r3, #0
    1962:	da00      	bge.n	1966 <_free_r+0x12>
    1964:	18e4      	adds	r4, r4, r3
    1966:	0028      	movs	r0, r5
    1968:	f000 fc2f 	bl	21ca <__malloc_lock>
    196c:	4a1d      	ldr	r2, [pc, #116]	; (19e4 <_free_r+0x90>)
    196e:	6813      	ldr	r3, [r2, #0]
    1970:	2b00      	cmp	r3, #0
    1972:	d105      	bne.n	1980 <_free_r+0x2c>
    1974:	6063      	str	r3, [r4, #4]
    1976:	6014      	str	r4, [r2, #0]
    1978:	0028      	movs	r0, r5
    197a:	f000 fc27 	bl	21cc <__malloc_unlock>
    197e:	bd70      	pop	{r4, r5, r6, pc}
    1980:	42a3      	cmp	r3, r4
    1982:	d909      	bls.n	1998 <_free_r+0x44>
    1984:	6821      	ldr	r1, [r4, #0]
    1986:	1860      	adds	r0, r4, r1
    1988:	4283      	cmp	r3, r0
    198a:	d1f3      	bne.n	1974 <_free_r+0x20>
    198c:	6818      	ldr	r0, [r3, #0]
    198e:	685b      	ldr	r3, [r3, #4]
    1990:	1841      	adds	r1, r0, r1
    1992:	6021      	str	r1, [r4, #0]
    1994:	e7ee      	b.n	1974 <_free_r+0x20>
    1996:	0013      	movs	r3, r2
    1998:	685a      	ldr	r2, [r3, #4]
    199a:	2a00      	cmp	r2, #0
    199c:	d001      	beq.n	19a2 <_free_r+0x4e>
    199e:	42a2      	cmp	r2, r4
    19a0:	d9f9      	bls.n	1996 <_free_r+0x42>
    19a2:	6819      	ldr	r1, [r3, #0]
    19a4:	1858      	adds	r0, r3, r1
    19a6:	42a0      	cmp	r0, r4
    19a8:	d10b      	bne.n	19c2 <_free_r+0x6e>
    19aa:	6820      	ldr	r0, [r4, #0]
    19ac:	1809      	adds	r1, r1, r0
    19ae:	1858      	adds	r0, r3, r1
    19b0:	6019      	str	r1, [r3, #0]
    19b2:	4282      	cmp	r2, r0
    19b4:	d1e0      	bne.n	1978 <_free_r+0x24>
    19b6:	6810      	ldr	r0, [r2, #0]
    19b8:	6852      	ldr	r2, [r2, #4]
    19ba:	1841      	adds	r1, r0, r1
    19bc:	6019      	str	r1, [r3, #0]
    19be:	605a      	str	r2, [r3, #4]
    19c0:	e7da      	b.n	1978 <_free_r+0x24>
    19c2:	42a0      	cmp	r0, r4
    19c4:	d902      	bls.n	19cc <_free_r+0x78>
    19c6:	230c      	movs	r3, #12
    19c8:	602b      	str	r3, [r5, #0]
    19ca:	e7d5      	b.n	1978 <_free_r+0x24>
    19cc:	6821      	ldr	r1, [r4, #0]
    19ce:	1860      	adds	r0, r4, r1
    19d0:	4282      	cmp	r2, r0
    19d2:	d103      	bne.n	19dc <_free_r+0x88>
    19d4:	6810      	ldr	r0, [r2, #0]
    19d6:	6852      	ldr	r2, [r2, #4]
    19d8:	1841      	adds	r1, r0, r1
    19da:	6021      	str	r1, [r4, #0]
    19dc:	6062      	str	r2, [r4, #4]
    19de:	605c      	str	r4, [r3, #4]
    19e0:	e7ca      	b.n	1978 <_free_r+0x24>
    19e2:	46c0      	nop			; (mov r8, r8)
    19e4:	200001a8 	.word	0x200001a8

000019e8 <_malloc_r>:
    19e8:	2303      	movs	r3, #3
    19ea:	b570      	push	{r4, r5, r6, lr}
    19ec:	1ccd      	adds	r5, r1, #3
    19ee:	439d      	bics	r5, r3
    19f0:	3508      	adds	r5, #8
    19f2:	0006      	movs	r6, r0
    19f4:	2d0c      	cmp	r5, #12
    19f6:	d21e      	bcs.n	1a36 <_malloc_r+0x4e>
    19f8:	250c      	movs	r5, #12
    19fa:	42a9      	cmp	r1, r5
    19fc:	d81d      	bhi.n	1a3a <_malloc_r+0x52>
    19fe:	0030      	movs	r0, r6
    1a00:	f000 fbe3 	bl	21ca <__malloc_lock>
    1a04:	4a25      	ldr	r2, [pc, #148]	; (1a9c <_malloc_r+0xb4>)
    1a06:	6814      	ldr	r4, [r2, #0]
    1a08:	0021      	movs	r1, r4
    1a0a:	2900      	cmp	r1, #0
    1a0c:	d119      	bne.n	1a42 <_malloc_r+0x5a>
    1a0e:	4c24      	ldr	r4, [pc, #144]	; (1aa0 <_malloc_r+0xb8>)
    1a10:	6823      	ldr	r3, [r4, #0]
    1a12:	2b00      	cmp	r3, #0
    1a14:	d103      	bne.n	1a1e <_malloc_r+0x36>
    1a16:	0030      	movs	r0, r6
    1a18:	f000 fb10 	bl	203c <_sbrk_r>
    1a1c:	6020      	str	r0, [r4, #0]
    1a1e:	0029      	movs	r1, r5
    1a20:	0030      	movs	r0, r6
    1a22:	f000 fb0b 	bl	203c <_sbrk_r>
    1a26:	1c43      	adds	r3, r0, #1
    1a28:	d12c      	bne.n	1a84 <_malloc_r+0x9c>
    1a2a:	230c      	movs	r3, #12
    1a2c:	0030      	movs	r0, r6
    1a2e:	6033      	str	r3, [r6, #0]
    1a30:	f000 fbcc 	bl	21cc <__malloc_unlock>
    1a34:	e003      	b.n	1a3e <_malloc_r+0x56>
    1a36:	2d00      	cmp	r5, #0
    1a38:	dadf      	bge.n	19fa <_malloc_r+0x12>
    1a3a:	230c      	movs	r3, #12
    1a3c:	6033      	str	r3, [r6, #0]
    1a3e:	2000      	movs	r0, #0
    1a40:	bd70      	pop	{r4, r5, r6, pc}
    1a42:	680b      	ldr	r3, [r1, #0]
    1a44:	1b5b      	subs	r3, r3, r5
    1a46:	d41a      	bmi.n	1a7e <_malloc_r+0x96>
    1a48:	2b0b      	cmp	r3, #11
    1a4a:	d903      	bls.n	1a54 <_malloc_r+0x6c>
    1a4c:	600b      	str	r3, [r1, #0]
    1a4e:	18cc      	adds	r4, r1, r3
    1a50:	6025      	str	r5, [r4, #0]
    1a52:	e003      	b.n	1a5c <_malloc_r+0x74>
    1a54:	428c      	cmp	r4, r1
    1a56:	d10e      	bne.n	1a76 <_malloc_r+0x8e>
    1a58:	6863      	ldr	r3, [r4, #4]
    1a5a:	6013      	str	r3, [r2, #0]
    1a5c:	0030      	movs	r0, r6
    1a5e:	f000 fbb5 	bl	21cc <__malloc_unlock>
    1a62:	0020      	movs	r0, r4
    1a64:	2207      	movs	r2, #7
    1a66:	300b      	adds	r0, #11
    1a68:	1d23      	adds	r3, r4, #4
    1a6a:	4390      	bics	r0, r2
    1a6c:	1ac3      	subs	r3, r0, r3
    1a6e:	d0e7      	beq.n	1a40 <_malloc_r+0x58>
    1a70:	425a      	negs	r2, r3
    1a72:	50e2      	str	r2, [r4, r3]
    1a74:	e7e4      	b.n	1a40 <_malloc_r+0x58>
    1a76:	684b      	ldr	r3, [r1, #4]
    1a78:	6063      	str	r3, [r4, #4]
    1a7a:	000c      	movs	r4, r1
    1a7c:	e7ee      	b.n	1a5c <_malloc_r+0x74>
    1a7e:	000c      	movs	r4, r1
    1a80:	6849      	ldr	r1, [r1, #4]
    1a82:	e7c2      	b.n	1a0a <_malloc_r+0x22>
    1a84:	2303      	movs	r3, #3
    1a86:	1cc4      	adds	r4, r0, #3
    1a88:	439c      	bics	r4, r3
    1a8a:	42a0      	cmp	r0, r4
    1a8c:	d0e0      	beq.n	1a50 <_malloc_r+0x68>
    1a8e:	1a21      	subs	r1, r4, r0
    1a90:	0030      	movs	r0, r6
    1a92:	f000 fad3 	bl	203c <_sbrk_r>
    1a96:	1c43      	adds	r3, r0, #1
    1a98:	d1da      	bne.n	1a50 <_malloc_r+0x68>
    1a9a:	e7c6      	b.n	1a2a <_malloc_r+0x42>
    1a9c:	200001a8 	.word	0x200001a8
    1aa0:	200001ac 	.word	0x200001ac

00001aa4 <__sfputc_r>:
    1aa4:	6893      	ldr	r3, [r2, #8]
    1aa6:	b510      	push	{r4, lr}
    1aa8:	3b01      	subs	r3, #1
    1aaa:	6093      	str	r3, [r2, #8]
    1aac:	2b00      	cmp	r3, #0
    1aae:	da05      	bge.n	1abc <__sfputc_r+0x18>
    1ab0:	6994      	ldr	r4, [r2, #24]
    1ab2:	42a3      	cmp	r3, r4
    1ab4:	db08      	blt.n	1ac8 <__sfputc_r+0x24>
    1ab6:	b2cb      	uxtb	r3, r1
    1ab8:	2b0a      	cmp	r3, #10
    1aba:	d005      	beq.n	1ac8 <__sfputc_r+0x24>
    1abc:	6813      	ldr	r3, [r2, #0]
    1abe:	1c58      	adds	r0, r3, #1
    1ac0:	6010      	str	r0, [r2, #0]
    1ac2:	7019      	strb	r1, [r3, #0]
    1ac4:	b2c8      	uxtb	r0, r1
    1ac6:	bd10      	pop	{r4, pc}
    1ac8:	f7ff fc7e 	bl	13c8 <__swbuf_r>
    1acc:	e7fb      	b.n	1ac6 <__sfputc_r+0x22>

00001ace <__sfputs_r>:
    1ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ad0:	0006      	movs	r6, r0
    1ad2:	000f      	movs	r7, r1
    1ad4:	0014      	movs	r4, r2
    1ad6:	18d5      	adds	r5, r2, r3
    1ad8:	42ac      	cmp	r4, r5
    1ada:	d101      	bne.n	1ae0 <__sfputs_r+0x12>
    1adc:	2000      	movs	r0, #0
    1ade:	e007      	b.n	1af0 <__sfputs_r+0x22>
    1ae0:	7821      	ldrb	r1, [r4, #0]
    1ae2:	003a      	movs	r2, r7
    1ae4:	0030      	movs	r0, r6
    1ae6:	f7ff ffdd 	bl	1aa4 <__sfputc_r>
    1aea:	3401      	adds	r4, #1
    1aec:	1c43      	adds	r3, r0, #1
    1aee:	d1f3      	bne.n	1ad8 <__sfputs_r+0xa>
    1af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001af4 <_vfiprintf_r>:
    1af4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1af6:	b09f      	sub	sp, #124	; 0x7c
    1af8:	0006      	movs	r6, r0
    1afa:	000f      	movs	r7, r1
    1afc:	0014      	movs	r4, r2
    1afe:	9305      	str	r3, [sp, #20]
    1b00:	2800      	cmp	r0, #0
    1b02:	d004      	beq.n	1b0e <_vfiprintf_r+0x1a>
    1b04:	6983      	ldr	r3, [r0, #24]
    1b06:	2b00      	cmp	r3, #0
    1b08:	d101      	bne.n	1b0e <_vfiprintf_r+0x1a>
    1b0a:	f7ff fe21 	bl	1750 <__sinit>
    1b0e:	4b7f      	ldr	r3, [pc, #508]	; (1d0c <_vfiprintf_r+0x218>)
    1b10:	429f      	cmp	r7, r3
    1b12:	d15c      	bne.n	1bce <_vfiprintf_r+0xda>
    1b14:	6877      	ldr	r7, [r6, #4]
    1b16:	89bb      	ldrh	r3, [r7, #12]
    1b18:	071b      	lsls	r3, r3, #28
    1b1a:	d562      	bpl.n	1be2 <_vfiprintf_r+0xee>
    1b1c:	693b      	ldr	r3, [r7, #16]
    1b1e:	2b00      	cmp	r3, #0
    1b20:	d05f      	beq.n	1be2 <_vfiprintf_r+0xee>
    1b22:	2300      	movs	r3, #0
    1b24:	ad06      	add	r5, sp, #24
    1b26:	616b      	str	r3, [r5, #20]
    1b28:	3320      	adds	r3, #32
    1b2a:	766b      	strb	r3, [r5, #25]
    1b2c:	3310      	adds	r3, #16
    1b2e:	76ab      	strb	r3, [r5, #26]
    1b30:	9402      	str	r4, [sp, #8]
    1b32:	9c02      	ldr	r4, [sp, #8]
    1b34:	7823      	ldrb	r3, [r4, #0]
    1b36:	2b00      	cmp	r3, #0
    1b38:	d15d      	bne.n	1bf6 <_vfiprintf_r+0x102>
    1b3a:	9b02      	ldr	r3, [sp, #8]
    1b3c:	1ae3      	subs	r3, r4, r3
    1b3e:	9304      	str	r3, [sp, #16]
    1b40:	d00d      	beq.n	1b5e <_vfiprintf_r+0x6a>
    1b42:	9b04      	ldr	r3, [sp, #16]
    1b44:	9a02      	ldr	r2, [sp, #8]
    1b46:	0039      	movs	r1, r7
    1b48:	0030      	movs	r0, r6
    1b4a:	f7ff ffc0 	bl	1ace <__sfputs_r>
    1b4e:	1c43      	adds	r3, r0, #1
    1b50:	d100      	bne.n	1b54 <_vfiprintf_r+0x60>
    1b52:	e0cc      	b.n	1cee <_vfiprintf_r+0x1fa>
    1b54:	696a      	ldr	r2, [r5, #20]
    1b56:	9b04      	ldr	r3, [sp, #16]
    1b58:	4694      	mov	ip, r2
    1b5a:	4463      	add	r3, ip
    1b5c:	616b      	str	r3, [r5, #20]
    1b5e:	7823      	ldrb	r3, [r4, #0]
    1b60:	2b00      	cmp	r3, #0
    1b62:	d100      	bne.n	1b66 <_vfiprintf_r+0x72>
    1b64:	e0c3      	b.n	1cee <_vfiprintf_r+0x1fa>
    1b66:	2201      	movs	r2, #1
    1b68:	2300      	movs	r3, #0
    1b6a:	4252      	negs	r2, r2
    1b6c:	606a      	str	r2, [r5, #4]
    1b6e:	a902      	add	r1, sp, #8
    1b70:	3254      	adds	r2, #84	; 0x54
    1b72:	1852      	adds	r2, r2, r1
    1b74:	3401      	adds	r4, #1
    1b76:	602b      	str	r3, [r5, #0]
    1b78:	60eb      	str	r3, [r5, #12]
    1b7a:	60ab      	str	r3, [r5, #8]
    1b7c:	7013      	strb	r3, [r2, #0]
    1b7e:	65ab      	str	r3, [r5, #88]	; 0x58
    1b80:	7821      	ldrb	r1, [r4, #0]
    1b82:	2205      	movs	r2, #5
    1b84:	4862      	ldr	r0, [pc, #392]	; (1d10 <_vfiprintf_r+0x21c>)
    1b86:	f000 fb15 	bl	21b4 <memchr>
    1b8a:	1c63      	adds	r3, r4, #1
    1b8c:	469c      	mov	ip, r3
    1b8e:	2800      	cmp	r0, #0
    1b90:	d135      	bne.n	1bfe <_vfiprintf_r+0x10a>
    1b92:	6829      	ldr	r1, [r5, #0]
    1b94:	06cb      	lsls	r3, r1, #27
    1b96:	d504      	bpl.n	1ba2 <_vfiprintf_r+0xae>
    1b98:	2353      	movs	r3, #83	; 0x53
    1b9a:	aa02      	add	r2, sp, #8
    1b9c:	3020      	adds	r0, #32
    1b9e:	189b      	adds	r3, r3, r2
    1ba0:	7018      	strb	r0, [r3, #0]
    1ba2:	070b      	lsls	r3, r1, #28
    1ba4:	d504      	bpl.n	1bb0 <_vfiprintf_r+0xbc>
    1ba6:	2353      	movs	r3, #83	; 0x53
    1ba8:	202b      	movs	r0, #43	; 0x2b
    1baa:	aa02      	add	r2, sp, #8
    1bac:	189b      	adds	r3, r3, r2
    1bae:	7018      	strb	r0, [r3, #0]
    1bb0:	7823      	ldrb	r3, [r4, #0]
    1bb2:	2b2a      	cmp	r3, #42	; 0x2a
    1bb4:	d02c      	beq.n	1c10 <_vfiprintf_r+0x11c>
    1bb6:	2000      	movs	r0, #0
    1bb8:	210a      	movs	r1, #10
    1bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1bbc:	7822      	ldrb	r2, [r4, #0]
    1bbe:	3a30      	subs	r2, #48	; 0x30
    1bc0:	2a09      	cmp	r2, #9
    1bc2:	d800      	bhi.n	1bc6 <_vfiprintf_r+0xd2>
    1bc4:	e06b      	b.n	1c9e <_vfiprintf_r+0x1aa>
    1bc6:	2800      	cmp	r0, #0
    1bc8:	d02a      	beq.n	1c20 <_vfiprintf_r+0x12c>
    1bca:	9309      	str	r3, [sp, #36]	; 0x24
    1bcc:	e028      	b.n	1c20 <_vfiprintf_r+0x12c>
    1bce:	4b51      	ldr	r3, [pc, #324]	; (1d14 <_vfiprintf_r+0x220>)
    1bd0:	429f      	cmp	r7, r3
    1bd2:	d101      	bne.n	1bd8 <_vfiprintf_r+0xe4>
    1bd4:	68b7      	ldr	r7, [r6, #8]
    1bd6:	e79e      	b.n	1b16 <_vfiprintf_r+0x22>
    1bd8:	4b4f      	ldr	r3, [pc, #316]	; (1d18 <_vfiprintf_r+0x224>)
    1bda:	429f      	cmp	r7, r3
    1bdc:	d19b      	bne.n	1b16 <_vfiprintf_r+0x22>
    1bde:	68f7      	ldr	r7, [r6, #12]
    1be0:	e799      	b.n	1b16 <_vfiprintf_r+0x22>
    1be2:	0039      	movs	r1, r7
    1be4:	0030      	movs	r0, r6
    1be6:	f7ff fc45 	bl	1474 <__swsetup_r>
    1bea:	2800      	cmp	r0, #0
    1bec:	d099      	beq.n	1b22 <_vfiprintf_r+0x2e>
    1bee:	2001      	movs	r0, #1
    1bf0:	4240      	negs	r0, r0
    1bf2:	b01f      	add	sp, #124	; 0x7c
    1bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bf6:	2b25      	cmp	r3, #37	; 0x25
    1bf8:	d09f      	beq.n	1b3a <_vfiprintf_r+0x46>
    1bfa:	3401      	adds	r4, #1
    1bfc:	e79a      	b.n	1b34 <_vfiprintf_r+0x40>
    1bfe:	4b44      	ldr	r3, [pc, #272]	; (1d10 <_vfiprintf_r+0x21c>)
    1c00:	6829      	ldr	r1, [r5, #0]
    1c02:	1ac0      	subs	r0, r0, r3
    1c04:	2301      	movs	r3, #1
    1c06:	4083      	lsls	r3, r0
    1c08:	430b      	orrs	r3, r1
    1c0a:	602b      	str	r3, [r5, #0]
    1c0c:	4664      	mov	r4, ip
    1c0e:	e7b7      	b.n	1b80 <_vfiprintf_r+0x8c>
    1c10:	9b05      	ldr	r3, [sp, #20]
    1c12:	1d18      	adds	r0, r3, #4
    1c14:	681b      	ldr	r3, [r3, #0]
    1c16:	9005      	str	r0, [sp, #20]
    1c18:	2b00      	cmp	r3, #0
    1c1a:	db3a      	blt.n	1c92 <_vfiprintf_r+0x19e>
    1c1c:	9309      	str	r3, [sp, #36]	; 0x24
    1c1e:	4664      	mov	r4, ip
    1c20:	7823      	ldrb	r3, [r4, #0]
    1c22:	2b2e      	cmp	r3, #46	; 0x2e
    1c24:	d10b      	bne.n	1c3e <_vfiprintf_r+0x14a>
    1c26:	7863      	ldrb	r3, [r4, #1]
    1c28:	1c62      	adds	r2, r4, #1
    1c2a:	2b2a      	cmp	r3, #42	; 0x2a
    1c2c:	d13f      	bne.n	1cae <_vfiprintf_r+0x1ba>
    1c2e:	9b05      	ldr	r3, [sp, #20]
    1c30:	3402      	adds	r4, #2
    1c32:	1d1a      	adds	r2, r3, #4
    1c34:	681b      	ldr	r3, [r3, #0]
    1c36:	9205      	str	r2, [sp, #20]
    1c38:	2b00      	cmp	r3, #0
    1c3a:	db35      	blt.n	1ca8 <_vfiprintf_r+0x1b4>
    1c3c:	9307      	str	r3, [sp, #28]
    1c3e:	7821      	ldrb	r1, [r4, #0]
    1c40:	2203      	movs	r2, #3
    1c42:	4836      	ldr	r0, [pc, #216]	; (1d1c <_vfiprintf_r+0x228>)
    1c44:	f000 fab6 	bl	21b4 <memchr>
    1c48:	2800      	cmp	r0, #0
    1c4a:	d007      	beq.n	1c5c <_vfiprintf_r+0x168>
    1c4c:	4b33      	ldr	r3, [pc, #204]	; (1d1c <_vfiprintf_r+0x228>)
    1c4e:	682a      	ldr	r2, [r5, #0]
    1c50:	1ac0      	subs	r0, r0, r3
    1c52:	2340      	movs	r3, #64	; 0x40
    1c54:	4083      	lsls	r3, r0
    1c56:	4313      	orrs	r3, r2
    1c58:	602b      	str	r3, [r5, #0]
    1c5a:	3401      	adds	r4, #1
    1c5c:	7821      	ldrb	r1, [r4, #0]
    1c5e:	1c63      	adds	r3, r4, #1
    1c60:	2206      	movs	r2, #6
    1c62:	482f      	ldr	r0, [pc, #188]	; (1d20 <_vfiprintf_r+0x22c>)
    1c64:	9302      	str	r3, [sp, #8]
    1c66:	7629      	strb	r1, [r5, #24]
    1c68:	f000 faa4 	bl	21b4 <memchr>
    1c6c:	2800      	cmp	r0, #0
    1c6e:	d044      	beq.n	1cfa <_vfiprintf_r+0x206>
    1c70:	4b2c      	ldr	r3, [pc, #176]	; (1d24 <_vfiprintf_r+0x230>)
    1c72:	2b00      	cmp	r3, #0
    1c74:	d12f      	bne.n	1cd6 <_vfiprintf_r+0x1e2>
    1c76:	6829      	ldr	r1, [r5, #0]
    1c78:	9b05      	ldr	r3, [sp, #20]
    1c7a:	2207      	movs	r2, #7
    1c7c:	05c9      	lsls	r1, r1, #23
    1c7e:	d528      	bpl.n	1cd2 <_vfiprintf_r+0x1de>
    1c80:	189b      	adds	r3, r3, r2
    1c82:	4393      	bics	r3, r2
    1c84:	3308      	adds	r3, #8
    1c86:	9305      	str	r3, [sp, #20]
    1c88:	696b      	ldr	r3, [r5, #20]
    1c8a:	9a03      	ldr	r2, [sp, #12]
    1c8c:	189b      	adds	r3, r3, r2
    1c8e:	616b      	str	r3, [r5, #20]
    1c90:	e74f      	b.n	1b32 <_vfiprintf_r+0x3e>
    1c92:	425b      	negs	r3, r3
    1c94:	60eb      	str	r3, [r5, #12]
    1c96:	2302      	movs	r3, #2
    1c98:	430b      	orrs	r3, r1
    1c9a:	602b      	str	r3, [r5, #0]
    1c9c:	e7bf      	b.n	1c1e <_vfiprintf_r+0x12a>
    1c9e:	434b      	muls	r3, r1
    1ca0:	3401      	adds	r4, #1
    1ca2:	189b      	adds	r3, r3, r2
    1ca4:	2001      	movs	r0, #1
    1ca6:	e789      	b.n	1bbc <_vfiprintf_r+0xc8>
    1ca8:	2301      	movs	r3, #1
    1caa:	425b      	negs	r3, r3
    1cac:	e7c6      	b.n	1c3c <_vfiprintf_r+0x148>
    1cae:	2300      	movs	r3, #0
    1cb0:	0014      	movs	r4, r2
    1cb2:	200a      	movs	r0, #10
    1cb4:	001a      	movs	r2, r3
    1cb6:	606b      	str	r3, [r5, #4]
    1cb8:	7821      	ldrb	r1, [r4, #0]
    1cba:	3930      	subs	r1, #48	; 0x30
    1cbc:	2909      	cmp	r1, #9
    1cbe:	d903      	bls.n	1cc8 <_vfiprintf_r+0x1d4>
    1cc0:	2b00      	cmp	r3, #0
    1cc2:	d0bc      	beq.n	1c3e <_vfiprintf_r+0x14a>
    1cc4:	9207      	str	r2, [sp, #28]
    1cc6:	e7ba      	b.n	1c3e <_vfiprintf_r+0x14a>
    1cc8:	4342      	muls	r2, r0
    1cca:	3401      	adds	r4, #1
    1ccc:	1852      	adds	r2, r2, r1
    1cce:	2301      	movs	r3, #1
    1cd0:	e7f2      	b.n	1cb8 <_vfiprintf_r+0x1c4>
    1cd2:	3307      	adds	r3, #7
    1cd4:	e7d5      	b.n	1c82 <_vfiprintf_r+0x18e>
    1cd6:	ab05      	add	r3, sp, #20
    1cd8:	9300      	str	r3, [sp, #0]
    1cda:	003a      	movs	r2, r7
    1cdc:	4b12      	ldr	r3, [pc, #72]	; (1d28 <_vfiprintf_r+0x234>)
    1cde:	0029      	movs	r1, r5
    1ce0:	0030      	movs	r0, r6
    1ce2:	e000      	b.n	1ce6 <_vfiprintf_r+0x1f2>
    1ce4:	bf00      	nop
    1ce6:	9003      	str	r0, [sp, #12]
    1ce8:	9b03      	ldr	r3, [sp, #12]
    1cea:	3301      	adds	r3, #1
    1cec:	d1cc      	bne.n	1c88 <_vfiprintf_r+0x194>
    1cee:	89bb      	ldrh	r3, [r7, #12]
    1cf0:	065b      	lsls	r3, r3, #25
    1cf2:	d500      	bpl.n	1cf6 <_vfiprintf_r+0x202>
    1cf4:	e77b      	b.n	1bee <_vfiprintf_r+0xfa>
    1cf6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1cf8:	e77b      	b.n	1bf2 <_vfiprintf_r+0xfe>
    1cfa:	ab05      	add	r3, sp, #20
    1cfc:	9300      	str	r3, [sp, #0]
    1cfe:	003a      	movs	r2, r7
    1d00:	4b09      	ldr	r3, [pc, #36]	; (1d28 <_vfiprintf_r+0x234>)
    1d02:	0029      	movs	r1, r5
    1d04:	0030      	movs	r0, r6
    1d06:	f000 f87f 	bl	1e08 <_printf_i>
    1d0a:	e7ec      	b.n	1ce6 <_vfiprintf_r+0x1f2>
    1d0c:	00002310 	.word	0x00002310
    1d10:	00002350 	.word	0x00002350
    1d14:	00002330 	.word	0x00002330
    1d18:	000022f0 	.word	0x000022f0
    1d1c:	00002356 	.word	0x00002356
    1d20:	0000235a 	.word	0x0000235a
    1d24:	00000000 	.word	0x00000000
    1d28:	00001acf 	.word	0x00001acf

00001d2c <_printf_common>:
    1d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1d2e:	0015      	movs	r5, r2
    1d30:	9301      	str	r3, [sp, #4]
    1d32:	688a      	ldr	r2, [r1, #8]
    1d34:	690b      	ldr	r3, [r1, #16]
    1d36:	9000      	str	r0, [sp, #0]
    1d38:	000c      	movs	r4, r1
    1d3a:	4293      	cmp	r3, r2
    1d3c:	da00      	bge.n	1d40 <_printf_common+0x14>
    1d3e:	0013      	movs	r3, r2
    1d40:	0022      	movs	r2, r4
    1d42:	602b      	str	r3, [r5, #0]
    1d44:	3243      	adds	r2, #67	; 0x43
    1d46:	7812      	ldrb	r2, [r2, #0]
    1d48:	2a00      	cmp	r2, #0
    1d4a:	d001      	beq.n	1d50 <_printf_common+0x24>
    1d4c:	3301      	adds	r3, #1
    1d4e:	602b      	str	r3, [r5, #0]
    1d50:	6823      	ldr	r3, [r4, #0]
    1d52:	069b      	lsls	r3, r3, #26
    1d54:	d502      	bpl.n	1d5c <_printf_common+0x30>
    1d56:	682b      	ldr	r3, [r5, #0]
    1d58:	3302      	adds	r3, #2
    1d5a:	602b      	str	r3, [r5, #0]
    1d5c:	2706      	movs	r7, #6
    1d5e:	6823      	ldr	r3, [r4, #0]
    1d60:	401f      	ands	r7, r3
    1d62:	d027      	beq.n	1db4 <_printf_common+0x88>
    1d64:	0023      	movs	r3, r4
    1d66:	3343      	adds	r3, #67	; 0x43
    1d68:	781b      	ldrb	r3, [r3, #0]
    1d6a:	1e5a      	subs	r2, r3, #1
    1d6c:	4193      	sbcs	r3, r2
    1d6e:	6822      	ldr	r2, [r4, #0]
    1d70:	0692      	lsls	r2, r2, #26
    1d72:	d430      	bmi.n	1dd6 <_printf_common+0xaa>
    1d74:	0022      	movs	r2, r4
    1d76:	9901      	ldr	r1, [sp, #4]
    1d78:	3243      	adds	r2, #67	; 0x43
    1d7a:	9800      	ldr	r0, [sp, #0]
    1d7c:	9e08      	ldr	r6, [sp, #32]
    1d7e:	47b0      	blx	r6
    1d80:	1c43      	adds	r3, r0, #1
    1d82:	d025      	beq.n	1dd0 <_printf_common+0xa4>
    1d84:	2306      	movs	r3, #6
    1d86:	6820      	ldr	r0, [r4, #0]
    1d88:	682a      	ldr	r2, [r5, #0]
    1d8a:	68e1      	ldr	r1, [r4, #12]
    1d8c:	4003      	ands	r3, r0
    1d8e:	2500      	movs	r5, #0
    1d90:	2b04      	cmp	r3, #4
    1d92:	d103      	bne.n	1d9c <_printf_common+0x70>
    1d94:	1a8d      	subs	r5, r1, r2
    1d96:	43eb      	mvns	r3, r5
    1d98:	17db      	asrs	r3, r3, #31
    1d9a:	401d      	ands	r5, r3
    1d9c:	68a3      	ldr	r3, [r4, #8]
    1d9e:	6922      	ldr	r2, [r4, #16]
    1da0:	4293      	cmp	r3, r2
    1da2:	dd01      	ble.n	1da8 <_printf_common+0x7c>
    1da4:	1a9b      	subs	r3, r3, r2
    1da6:	18ed      	adds	r5, r5, r3
    1da8:	2700      	movs	r7, #0
    1daa:	42bd      	cmp	r5, r7
    1dac:	d120      	bne.n	1df0 <_printf_common+0xc4>
    1dae:	2000      	movs	r0, #0
    1db0:	e010      	b.n	1dd4 <_printf_common+0xa8>
    1db2:	3701      	adds	r7, #1
    1db4:	68e3      	ldr	r3, [r4, #12]
    1db6:	682a      	ldr	r2, [r5, #0]
    1db8:	1a9b      	subs	r3, r3, r2
    1dba:	429f      	cmp	r7, r3
    1dbc:	dad2      	bge.n	1d64 <_printf_common+0x38>
    1dbe:	0022      	movs	r2, r4
    1dc0:	2301      	movs	r3, #1
    1dc2:	3219      	adds	r2, #25
    1dc4:	9901      	ldr	r1, [sp, #4]
    1dc6:	9800      	ldr	r0, [sp, #0]
    1dc8:	9e08      	ldr	r6, [sp, #32]
    1dca:	47b0      	blx	r6
    1dcc:	1c43      	adds	r3, r0, #1
    1dce:	d1f0      	bne.n	1db2 <_printf_common+0x86>
    1dd0:	2001      	movs	r0, #1
    1dd2:	4240      	negs	r0, r0
    1dd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1dd6:	2030      	movs	r0, #48	; 0x30
    1dd8:	18e1      	adds	r1, r4, r3
    1dda:	3143      	adds	r1, #67	; 0x43
    1ddc:	7008      	strb	r0, [r1, #0]
    1dde:	0021      	movs	r1, r4
    1de0:	1c5a      	adds	r2, r3, #1
    1de2:	3145      	adds	r1, #69	; 0x45
    1de4:	7809      	ldrb	r1, [r1, #0]
    1de6:	18a2      	adds	r2, r4, r2
    1de8:	3243      	adds	r2, #67	; 0x43
    1dea:	3302      	adds	r3, #2
    1dec:	7011      	strb	r1, [r2, #0]
    1dee:	e7c1      	b.n	1d74 <_printf_common+0x48>
    1df0:	0022      	movs	r2, r4
    1df2:	2301      	movs	r3, #1
    1df4:	321a      	adds	r2, #26
    1df6:	9901      	ldr	r1, [sp, #4]
    1df8:	9800      	ldr	r0, [sp, #0]
    1dfa:	9e08      	ldr	r6, [sp, #32]
    1dfc:	47b0      	blx	r6
    1dfe:	1c43      	adds	r3, r0, #1
    1e00:	d0e6      	beq.n	1dd0 <_printf_common+0xa4>
    1e02:	3701      	adds	r7, #1
    1e04:	e7d1      	b.n	1daa <_printf_common+0x7e>
	...

00001e08 <_printf_i>:
    1e08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e0a:	b08b      	sub	sp, #44	; 0x2c
    1e0c:	9206      	str	r2, [sp, #24]
    1e0e:	000a      	movs	r2, r1
    1e10:	3243      	adds	r2, #67	; 0x43
    1e12:	9307      	str	r3, [sp, #28]
    1e14:	9005      	str	r0, [sp, #20]
    1e16:	9204      	str	r2, [sp, #16]
    1e18:	7e0a      	ldrb	r2, [r1, #24]
    1e1a:	000c      	movs	r4, r1
    1e1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1e1e:	2a6e      	cmp	r2, #110	; 0x6e
    1e20:	d100      	bne.n	1e24 <_printf_i+0x1c>
    1e22:	e08f      	b.n	1f44 <_printf_i+0x13c>
    1e24:	d817      	bhi.n	1e56 <_printf_i+0x4e>
    1e26:	2a63      	cmp	r2, #99	; 0x63
    1e28:	d02c      	beq.n	1e84 <_printf_i+0x7c>
    1e2a:	d808      	bhi.n	1e3e <_printf_i+0x36>
    1e2c:	2a00      	cmp	r2, #0
    1e2e:	d100      	bne.n	1e32 <_printf_i+0x2a>
    1e30:	e099      	b.n	1f66 <_printf_i+0x15e>
    1e32:	2a58      	cmp	r2, #88	; 0x58
    1e34:	d054      	beq.n	1ee0 <_printf_i+0xd8>
    1e36:	0026      	movs	r6, r4
    1e38:	3642      	adds	r6, #66	; 0x42
    1e3a:	7032      	strb	r2, [r6, #0]
    1e3c:	e029      	b.n	1e92 <_printf_i+0x8a>
    1e3e:	2a64      	cmp	r2, #100	; 0x64
    1e40:	d001      	beq.n	1e46 <_printf_i+0x3e>
    1e42:	2a69      	cmp	r2, #105	; 0x69
    1e44:	d1f7      	bne.n	1e36 <_printf_i+0x2e>
    1e46:	6821      	ldr	r1, [r4, #0]
    1e48:	681a      	ldr	r2, [r3, #0]
    1e4a:	0608      	lsls	r0, r1, #24
    1e4c:	d523      	bpl.n	1e96 <_printf_i+0x8e>
    1e4e:	1d11      	adds	r1, r2, #4
    1e50:	6019      	str	r1, [r3, #0]
    1e52:	6815      	ldr	r5, [r2, #0]
    1e54:	e025      	b.n	1ea2 <_printf_i+0x9a>
    1e56:	2a73      	cmp	r2, #115	; 0x73
    1e58:	d100      	bne.n	1e5c <_printf_i+0x54>
    1e5a:	e088      	b.n	1f6e <_printf_i+0x166>
    1e5c:	d808      	bhi.n	1e70 <_printf_i+0x68>
    1e5e:	2a6f      	cmp	r2, #111	; 0x6f
    1e60:	d029      	beq.n	1eb6 <_printf_i+0xae>
    1e62:	2a70      	cmp	r2, #112	; 0x70
    1e64:	d1e7      	bne.n	1e36 <_printf_i+0x2e>
    1e66:	2220      	movs	r2, #32
    1e68:	6809      	ldr	r1, [r1, #0]
    1e6a:	430a      	orrs	r2, r1
    1e6c:	6022      	str	r2, [r4, #0]
    1e6e:	e003      	b.n	1e78 <_printf_i+0x70>
    1e70:	2a75      	cmp	r2, #117	; 0x75
    1e72:	d020      	beq.n	1eb6 <_printf_i+0xae>
    1e74:	2a78      	cmp	r2, #120	; 0x78
    1e76:	d1de      	bne.n	1e36 <_printf_i+0x2e>
    1e78:	0022      	movs	r2, r4
    1e7a:	2178      	movs	r1, #120	; 0x78
    1e7c:	3245      	adds	r2, #69	; 0x45
    1e7e:	7011      	strb	r1, [r2, #0]
    1e80:	4a6c      	ldr	r2, [pc, #432]	; (2034 <STACK_SIZE+0x34>)
    1e82:	e030      	b.n	1ee6 <_printf_i+0xde>
    1e84:	000e      	movs	r6, r1
    1e86:	681a      	ldr	r2, [r3, #0]
    1e88:	3642      	adds	r6, #66	; 0x42
    1e8a:	1d11      	adds	r1, r2, #4
    1e8c:	6019      	str	r1, [r3, #0]
    1e8e:	6813      	ldr	r3, [r2, #0]
    1e90:	7033      	strb	r3, [r6, #0]
    1e92:	2301      	movs	r3, #1
    1e94:	e079      	b.n	1f8a <_printf_i+0x182>
    1e96:	0649      	lsls	r1, r1, #25
    1e98:	d5d9      	bpl.n	1e4e <_printf_i+0x46>
    1e9a:	1d11      	adds	r1, r2, #4
    1e9c:	6019      	str	r1, [r3, #0]
    1e9e:	2300      	movs	r3, #0
    1ea0:	5ed5      	ldrsh	r5, [r2, r3]
    1ea2:	2d00      	cmp	r5, #0
    1ea4:	da03      	bge.n	1eae <_printf_i+0xa6>
    1ea6:	232d      	movs	r3, #45	; 0x2d
    1ea8:	9a04      	ldr	r2, [sp, #16]
    1eaa:	426d      	negs	r5, r5
    1eac:	7013      	strb	r3, [r2, #0]
    1eae:	4b62      	ldr	r3, [pc, #392]	; (2038 <STACK_SIZE+0x38>)
    1eb0:	270a      	movs	r7, #10
    1eb2:	9303      	str	r3, [sp, #12]
    1eb4:	e02f      	b.n	1f16 <_printf_i+0x10e>
    1eb6:	6820      	ldr	r0, [r4, #0]
    1eb8:	6819      	ldr	r1, [r3, #0]
    1eba:	0605      	lsls	r5, r0, #24
    1ebc:	d503      	bpl.n	1ec6 <_printf_i+0xbe>
    1ebe:	1d08      	adds	r0, r1, #4
    1ec0:	6018      	str	r0, [r3, #0]
    1ec2:	680d      	ldr	r5, [r1, #0]
    1ec4:	e005      	b.n	1ed2 <_printf_i+0xca>
    1ec6:	0640      	lsls	r0, r0, #25
    1ec8:	d5f9      	bpl.n	1ebe <_printf_i+0xb6>
    1eca:	680d      	ldr	r5, [r1, #0]
    1ecc:	1d08      	adds	r0, r1, #4
    1ece:	6018      	str	r0, [r3, #0]
    1ed0:	b2ad      	uxth	r5, r5
    1ed2:	4b59      	ldr	r3, [pc, #356]	; (2038 <STACK_SIZE+0x38>)
    1ed4:	2708      	movs	r7, #8
    1ed6:	9303      	str	r3, [sp, #12]
    1ed8:	2a6f      	cmp	r2, #111	; 0x6f
    1eda:	d018      	beq.n	1f0e <_printf_i+0x106>
    1edc:	270a      	movs	r7, #10
    1ede:	e016      	b.n	1f0e <_printf_i+0x106>
    1ee0:	3145      	adds	r1, #69	; 0x45
    1ee2:	700a      	strb	r2, [r1, #0]
    1ee4:	4a54      	ldr	r2, [pc, #336]	; (2038 <STACK_SIZE+0x38>)
    1ee6:	9203      	str	r2, [sp, #12]
    1ee8:	681a      	ldr	r2, [r3, #0]
    1eea:	6821      	ldr	r1, [r4, #0]
    1eec:	1d10      	adds	r0, r2, #4
    1eee:	6018      	str	r0, [r3, #0]
    1ef0:	6815      	ldr	r5, [r2, #0]
    1ef2:	0608      	lsls	r0, r1, #24
    1ef4:	d522      	bpl.n	1f3c <_printf_i+0x134>
    1ef6:	07cb      	lsls	r3, r1, #31
    1ef8:	d502      	bpl.n	1f00 <_printf_i+0xf8>
    1efa:	2320      	movs	r3, #32
    1efc:	4319      	orrs	r1, r3
    1efe:	6021      	str	r1, [r4, #0]
    1f00:	2710      	movs	r7, #16
    1f02:	2d00      	cmp	r5, #0
    1f04:	d103      	bne.n	1f0e <_printf_i+0x106>
    1f06:	2320      	movs	r3, #32
    1f08:	6822      	ldr	r2, [r4, #0]
    1f0a:	439a      	bics	r2, r3
    1f0c:	6022      	str	r2, [r4, #0]
    1f0e:	0023      	movs	r3, r4
    1f10:	2200      	movs	r2, #0
    1f12:	3343      	adds	r3, #67	; 0x43
    1f14:	701a      	strb	r2, [r3, #0]
    1f16:	6863      	ldr	r3, [r4, #4]
    1f18:	60a3      	str	r3, [r4, #8]
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	db5c      	blt.n	1fd8 <_printf_i+0x1d0>
    1f1e:	2204      	movs	r2, #4
    1f20:	6821      	ldr	r1, [r4, #0]
    1f22:	4391      	bics	r1, r2
    1f24:	6021      	str	r1, [r4, #0]
    1f26:	2d00      	cmp	r5, #0
    1f28:	d158      	bne.n	1fdc <_printf_i+0x1d4>
    1f2a:	9e04      	ldr	r6, [sp, #16]
    1f2c:	2b00      	cmp	r3, #0
    1f2e:	d064      	beq.n	1ffa <_printf_i+0x1f2>
    1f30:	0026      	movs	r6, r4
    1f32:	9b03      	ldr	r3, [sp, #12]
    1f34:	3642      	adds	r6, #66	; 0x42
    1f36:	781b      	ldrb	r3, [r3, #0]
    1f38:	7033      	strb	r3, [r6, #0]
    1f3a:	e05e      	b.n	1ffa <_printf_i+0x1f2>
    1f3c:	0648      	lsls	r0, r1, #25
    1f3e:	d5da      	bpl.n	1ef6 <_printf_i+0xee>
    1f40:	b2ad      	uxth	r5, r5
    1f42:	e7d8      	b.n	1ef6 <_printf_i+0xee>
    1f44:	6809      	ldr	r1, [r1, #0]
    1f46:	681a      	ldr	r2, [r3, #0]
    1f48:	0608      	lsls	r0, r1, #24
    1f4a:	d505      	bpl.n	1f58 <_printf_i+0x150>
    1f4c:	1d11      	adds	r1, r2, #4
    1f4e:	6019      	str	r1, [r3, #0]
    1f50:	6813      	ldr	r3, [r2, #0]
    1f52:	6962      	ldr	r2, [r4, #20]
    1f54:	601a      	str	r2, [r3, #0]
    1f56:	e006      	b.n	1f66 <_printf_i+0x15e>
    1f58:	0649      	lsls	r1, r1, #25
    1f5a:	d5f7      	bpl.n	1f4c <_printf_i+0x144>
    1f5c:	1d11      	adds	r1, r2, #4
    1f5e:	6019      	str	r1, [r3, #0]
    1f60:	6813      	ldr	r3, [r2, #0]
    1f62:	8aa2      	ldrh	r2, [r4, #20]
    1f64:	801a      	strh	r2, [r3, #0]
    1f66:	2300      	movs	r3, #0
    1f68:	9e04      	ldr	r6, [sp, #16]
    1f6a:	6123      	str	r3, [r4, #16]
    1f6c:	e054      	b.n	2018 <STACK_SIZE+0x18>
    1f6e:	681a      	ldr	r2, [r3, #0]
    1f70:	1d11      	adds	r1, r2, #4
    1f72:	6019      	str	r1, [r3, #0]
    1f74:	6816      	ldr	r6, [r2, #0]
    1f76:	2100      	movs	r1, #0
    1f78:	6862      	ldr	r2, [r4, #4]
    1f7a:	0030      	movs	r0, r6
    1f7c:	f000 f91a 	bl	21b4 <memchr>
    1f80:	2800      	cmp	r0, #0
    1f82:	d001      	beq.n	1f88 <_printf_i+0x180>
    1f84:	1b80      	subs	r0, r0, r6
    1f86:	6060      	str	r0, [r4, #4]
    1f88:	6863      	ldr	r3, [r4, #4]
    1f8a:	6123      	str	r3, [r4, #16]
    1f8c:	2300      	movs	r3, #0
    1f8e:	9a04      	ldr	r2, [sp, #16]
    1f90:	7013      	strb	r3, [r2, #0]
    1f92:	e041      	b.n	2018 <STACK_SIZE+0x18>
    1f94:	6923      	ldr	r3, [r4, #16]
    1f96:	0032      	movs	r2, r6
    1f98:	9906      	ldr	r1, [sp, #24]
    1f9a:	9805      	ldr	r0, [sp, #20]
    1f9c:	9d07      	ldr	r5, [sp, #28]
    1f9e:	47a8      	blx	r5
    1fa0:	1c43      	adds	r3, r0, #1
    1fa2:	d043      	beq.n	202c <STACK_SIZE+0x2c>
    1fa4:	6823      	ldr	r3, [r4, #0]
    1fa6:	2500      	movs	r5, #0
    1fa8:	079b      	lsls	r3, r3, #30
    1faa:	d40f      	bmi.n	1fcc <_printf_i+0x1c4>
    1fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fae:	68e0      	ldr	r0, [r4, #12]
    1fb0:	4298      	cmp	r0, r3
    1fb2:	da3d      	bge.n	2030 <STACK_SIZE+0x30>
    1fb4:	0018      	movs	r0, r3
    1fb6:	e03b      	b.n	2030 <STACK_SIZE+0x30>
    1fb8:	0022      	movs	r2, r4
    1fba:	2301      	movs	r3, #1
    1fbc:	3219      	adds	r2, #25
    1fbe:	9906      	ldr	r1, [sp, #24]
    1fc0:	9805      	ldr	r0, [sp, #20]
    1fc2:	9e07      	ldr	r6, [sp, #28]
    1fc4:	47b0      	blx	r6
    1fc6:	1c43      	adds	r3, r0, #1
    1fc8:	d030      	beq.n	202c <STACK_SIZE+0x2c>
    1fca:	3501      	adds	r5, #1
    1fcc:	68e3      	ldr	r3, [r4, #12]
    1fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1fd0:	1a9b      	subs	r3, r3, r2
    1fd2:	429d      	cmp	r5, r3
    1fd4:	dbf0      	blt.n	1fb8 <_printf_i+0x1b0>
    1fd6:	e7e9      	b.n	1fac <_printf_i+0x1a4>
    1fd8:	2d00      	cmp	r5, #0
    1fda:	d0a9      	beq.n	1f30 <_printf_i+0x128>
    1fdc:	9e04      	ldr	r6, [sp, #16]
    1fde:	0028      	movs	r0, r5
    1fe0:	0039      	movs	r1, r7
    1fe2:	f7ff f8f5 	bl	11d0 <__aeabi_uidivmod>
    1fe6:	9b03      	ldr	r3, [sp, #12]
    1fe8:	3e01      	subs	r6, #1
    1fea:	5c5b      	ldrb	r3, [r3, r1]
    1fec:	0028      	movs	r0, r5
    1fee:	7033      	strb	r3, [r6, #0]
    1ff0:	0039      	movs	r1, r7
    1ff2:	f7ff f867 	bl	10c4 <__udivsi3>
    1ff6:	1e05      	subs	r5, r0, #0
    1ff8:	d1f1      	bne.n	1fde <_printf_i+0x1d6>
    1ffa:	2f08      	cmp	r7, #8
    1ffc:	d109      	bne.n	2012 <STACK_SIZE+0x12>
    1ffe:	6823      	ldr	r3, [r4, #0]
    2000:	07db      	lsls	r3, r3, #31
    2002:	d506      	bpl.n	2012 <STACK_SIZE+0x12>
    2004:	6863      	ldr	r3, [r4, #4]
    2006:	6922      	ldr	r2, [r4, #16]
    2008:	4293      	cmp	r3, r2
    200a:	dc02      	bgt.n	2012 <STACK_SIZE+0x12>
    200c:	2330      	movs	r3, #48	; 0x30
    200e:	3e01      	subs	r6, #1
    2010:	7033      	strb	r3, [r6, #0]
    2012:	9b04      	ldr	r3, [sp, #16]
    2014:	1b9b      	subs	r3, r3, r6
    2016:	6123      	str	r3, [r4, #16]
    2018:	9b07      	ldr	r3, [sp, #28]
    201a:	aa09      	add	r2, sp, #36	; 0x24
    201c:	9300      	str	r3, [sp, #0]
    201e:	0021      	movs	r1, r4
    2020:	9b06      	ldr	r3, [sp, #24]
    2022:	9805      	ldr	r0, [sp, #20]
    2024:	f7ff fe82 	bl	1d2c <_printf_common>
    2028:	1c43      	adds	r3, r0, #1
    202a:	d1b3      	bne.n	1f94 <_printf_i+0x18c>
    202c:	2001      	movs	r0, #1
    202e:	4240      	negs	r0, r0
    2030:	b00b      	add	sp, #44	; 0x2c
    2032:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2034:	00002372 	.word	0x00002372
    2038:	00002361 	.word	0x00002361

0000203c <_sbrk_r>:
    203c:	2300      	movs	r3, #0
    203e:	b570      	push	{r4, r5, r6, lr}
    2040:	4c06      	ldr	r4, [pc, #24]	; (205c <_sbrk_r+0x20>)
    2042:	0005      	movs	r5, r0
    2044:	0008      	movs	r0, r1
    2046:	6023      	str	r3, [r4, #0]
    2048:	f7fe fbc8 	bl	7dc <_sbrk>
    204c:	1c43      	adds	r3, r0, #1
    204e:	d103      	bne.n	2058 <_sbrk_r+0x1c>
    2050:	6823      	ldr	r3, [r4, #0]
    2052:	2b00      	cmp	r3, #0
    2054:	d000      	beq.n	2058 <_sbrk_r+0x1c>
    2056:	602b      	str	r3, [r5, #0]
    2058:	bd70      	pop	{r4, r5, r6, pc}
    205a:	46c0      	nop			; (mov r8, r8)
    205c:	200001cc 	.word	0x200001cc

00002060 <__sread>:
    2060:	b570      	push	{r4, r5, r6, lr}
    2062:	000c      	movs	r4, r1
    2064:	250e      	movs	r5, #14
    2066:	5f49      	ldrsh	r1, [r1, r5]
    2068:	f000 f8b2 	bl	21d0 <_read_r>
    206c:	2800      	cmp	r0, #0
    206e:	db03      	blt.n	2078 <__sread+0x18>
    2070:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2072:	181b      	adds	r3, r3, r0
    2074:	6563      	str	r3, [r4, #84]	; 0x54
    2076:	bd70      	pop	{r4, r5, r6, pc}
    2078:	89a3      	ldrh	r3, [r4, #12]
    207a:	4a02      	ldr	r2, [pc, #8]	; (2084 <__sread+0x24>)
    207c:	4013      	ands	r3, r2
    207e:	81a3      	strh	r3, [r4, #12]
    2080:	e7f9      	b.n	2076 <__sread+0x16>
    2082:	46c0      	nop			; (mov r8, r8)
    2084:	ffffefff 	.word	0xffffefff

00002088 <__swrite>:
    2088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    208a:	001f      	movs	r7, r3
    208c:	898b      	ldrh	r3, [r1, #12]
    208e:	0005      	movs	r5, r0
    2090:	000c      	movs	r4, r1
    2092:	0016      	movs	r6, r2
    2094:	05db      	lsls	r3, r3, #23
    2096:	d505      	bpl.n	20a4 <__swrite+0x1c>
    2098:	230e      	movs	r3, #14
    209a:	5ec9      	ldrsh	r1, [r1, r3]
    209c:	2200      	movs	r2, #0
    209e:	2302      	movs	r3, #2
    20a0:	f000 f874 	bl	218c <_lseek_r>
    20a4:	89a3      	ldrh	r3, [r4, #12]
    20a6:	4a05      	ldr	r2, [pc, #20]	; (20bc <__swrite+0x34>)
    20a8:	0028      	movs	r0, r5
    20aa:	4013      	ands	r3, r2
    20ac:	81a3      	strh	r3, [r4, #12]
    20ae:	0032      	movs	r2, r6
    20b0:	230e      	movs	r3, #14
    20b2:	5ee1      	ldrsh	r1, [r4, r3]
    20b4:	003b      	movs	r3, r7
    20b6:	f000 f81f 	bl	20f8 <_write_r>
    20ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20bc:	ffffefff 	.word	0xffffefff

000020c0 <__sseek>:
    20c0:	b570      	push	{r4, r5, r6, lr}
    20c2:	000c      	movs	r4, r1
    20c4:	250e      	movs	r5, #14
    20c6:	5f49      	ldrsh	r1, [r1, r5]
    20c8:	f000 f860 	bl	218c <_lseek_r>
    20cc:	89a3      	ldrh	r3, [r4, #12]
    20ce:	1c42      	adds	r2, r0, #1
    20d0:	d103      	bne.n	20da <__sseek+0x1a>
    20d2:	4a05      	ldr	r2, [pc, #20]	; (20e8 <__sseek+0x28>)
    20d4:	4013      	ands	r3, r2
    20d6:	81a3      	strh	r3, [r4, #12]
    20d8:	bd70      	pop	{r4, r5, r6, pc}
    20da:	2280      	movs	r2, #128	; 0x80
    20dc:	0152      	lsls	r2, r2, #5
    20de:	4313      	orrs	r3, r2
    20e0:	81a3      	strh	r3, [r4, #12]
    20e2:	6560      	str	r0, [r4, #84]	; 0x54
    20e4:	e7f8      	b.n	20d8 <__sseek+0x18>
    20e6:	46c0      	nop			; (mov r8, r8)
    20e8:	ffffefff 	.word	0xffffefff

000020ec <__sclose>:
    20ec:	b510      	push	{r4, lr}
    20ee:	230e      	movs	r3, #14
    20f0:	5ec9      	ldrsh	r1, [r1, r3]
    20f2:	f000 f815 	bl	2120 <_close_r>
    20f6:	bd10      	pop	{r4, pc}

000020f8 <_write_r>:
    20f8:	b570      	push	{r4, r5, r6, lr}
    20fa:	0005      	movs	r5, r0
    20fc:	0008      	movs	r0, r1
    20fe:	0011      	movs	r1, r2
    2100:	2200      	movs	r2, #0
    2102:	4c06      	ldr	r4, [pc, #24]	; (211c <_write_r+0x24>)
    2104:	6022      	str	r2, [r4, #0]
    2106:	001a      	movs	r2, r3
    2108:	f7fe ffa4 	bl	1054 <_write>
    210c:	1c43      	adds	r3, r0, #1
    210e:	d103      	bne.n	2118 <_write_r+0x20>
    2110:	6823      	ldr	r3, [r4, #0]
    2112:	2b00      	cmp	r3, #0
    2114:	d000      	beq.n	2118 <_write_r+0x20>
    2116:	602b      	str	r3, [r5, #0]
    2118:	bd70      	pop	{r4, r5, r6, pc}
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	200001cc 	.word	0x200001cc

00002120 <_close_r>:
    2120:	2300      	movs	r3, #0
    2122:	b570      	push	{r4, r5, r6, lr}
    2124:	4c06      	ldr	r4, [pc, #24]	; (2140 <_close_r+0x20>)
    2126:	0005      	movs	r5, r0
    2128:	0008      	movs	r0, r1
    212a:	6023      	str	r3, [r4, #0]
    212c:	f7fe fb68 	bl	800 <_close>
    2130:	1c43      	adds	r3, r0, #1
    2132:	d103      	bne.n	213c <_close_r+0x1c>
    2134:	6823      	ldr	r3, [r4, #0]
    2136:	2b00      	cmp	r3, #0
    2138:	d000      	beq.n	213c <_close_r+0x1c>
    213a:	602b      	str	r3, [r5, #0]
    213c:	bd70      	pop	{r4, r5, r6, pc}
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	200001cc 	.word	0x200001cc

00002144 <_fstat_r>:
    2144:	2300      	movs	r3, #0
    2146:	b570      	push	{r4, r5, r6, lr}
    2148:	4c06      	ldr	r4, [pc, #24]	; (2164 <_fstat_r+0x20>)
    214a:	0005      	movs	r5, r0
    214c:	0008      	movs	r0, r1
    214e:	0011      	movs	r1, r2
    2150:	6023      	str	r3, [r4, #0]
    2152:	f7fe fb58 	bl	806 <_fstat>
    2156:	1c43      	adds	r3, r0, #1
    2158:	d103      	bne.n	2162 <_fstat_r+0x1e>
    215a:	6823      	ldr	r3, [r4, #0]
    215c:	2b00      	cmp	r3, #0
    215e:	d000      	beq.n	2162 <_fstat_r+0x1e>
    2160:	602b      	str	r3, [r5, #0]
    2162:	bd70      	pop	{r4, r5, r6, pc}
    2164:	200001cc 	.word	0x200001cc

00002168 <_isatty_r>:
    2168:	2300      	movs	r3, #0
    216a:	b570      	push	{r4, r5, r6, lr}
    216c:	4c06      	ldr	r4, [pc, #24]	; (2188 <_isatty_r+0x20>)
    216e:	0005      	movs	r5, r0
    2170:	0008      	movs	r0, r1
    2172:	6023      	str	r3, [r4, #0]
    2174:	f7fe fb4c 	bl	810 <_isatty>
    2178:	1c43      	adds	r3, r0, #1
    217a:	d103      	bne.n	2184 <_isatty_r+0x1c>
    217c:	6823      	ldr	r3, [r4, #0]
    217e:	2b00      	cmp	r3, #0
    2180:	d000      	beq.n	2184 <_isatty_r+0x1c>
    2182:	602b      	str	r3, [r5, #0]
    2184:	bd70      	pop	{r4, r5, r6, pc}
    2186:	46c0      	nop			; (mov r8, r8)
    2188:	200001cc 	.word	0x200001cc

0000218c <_lseek_r>:
    218c:	b570      	push	{r4, r5, r6, lr}
    218e:	0005      	movs	r5, r0
    2190:	0008      	movs	r0, r1
    2192:	0011      	movs	r1, r2
    2194:	2200      	movs	r2, #0
    2196:	4c06      	ldr	r4, [pc, #24]	; (21b0 <_lseek_r+0x24>)
    2198:	6022      	str	r2, [r4, #0]
    219a:	001a      	movs	r2, r3
    219c:	f7fe fb3a 	bl	814 <_lseek>
    21a0:	1c43      	adds	r3, r0, #1
    21a2:	d103      	bne.n	21ac <_lseek_r+0x20>
    21a4:	6823      	ldr	r3, [r4, #0]
    21a6:	2b00      	cmp	r3, #0
    21a8:	d000      	beq.n	21ac <_lseek_r+0x20>
    21aa:	602b      	str	r3, [r5, #0]
    21ac:	bd70      	pop	{r4, r5, r6, pc}
    21ae:	46c0      	nop			; (mov r8, r8)
    21b0:	200001cc 	.word	0x200001cc

000021b4 <memchr>:
    21b4:	b2c9      	uxtb	r1, r1
    21b6:	1882      	adds	r2, r0, r2
    21b8:	4290      	cmp	r0, r2
    21ba:	d101      	bne.n	21c0 <memchr+0xc>
    21bc:	2000      	movs	r0, #0
    21be:	4770      	bx	lr
    21c0:	7803      	ldrb	r3, [r0, #0]
    21c2:	428b      	cmp	r3, r1
    21c4:	d0fb      	beq.n	21be <memchr+0xa>
    21c6:	3001      	adds	r0, #1
    21c8:	e7f6      	b.n	21b8 <memchr+0x4>

000021ca <__malloc_lock>:
    21ca:	4770      	bx	lr

000021cc <__malloc_unlock>:
    21cc:	4770      	bx	lr
	...

000021d0 <_read_r>:
    21d0:	b570      	push	{r4, r5, r6, lr}
    21d2:	0005      	movs	r5, r0
    21d4:	0008      	movs	r0, r1
    21d6:	0011      	movs	r1, r2
    21d8:	2200      	movs	r2, #0
    21da:	4c06      	ldr	r4, [pc, #24]	; (21f4 <_read_r+0x24>)
    21dc:	6022      	str	r2, [r4, #0]
    21de:	001a      	movs	r2, r3
    21e0:	f7fe ff54 	bl	108c <_read>
    21e4:	1c43      	adds	r3, r0, #1
    21e6:	d103      	bne.n	21f0 <_read_r+0x20>
    21e8:	6823      	ldr	r3, [r4, #0]
    21ea:	2b00      	cmp	r3, #0
    21ec:	d000      	beq.n	21f0 <_read_r+0x20>
    21ee:	602b      	str	r3, [r5, #0]
    21f0:	bd70      	pop	{r4, r5, r6, pc}
    21f2:	46c0      	nop			; (mov r8, r8)
    21f4:	200001cc 	.word	0x200001cc
    21f8:	656c6449 	.word	0x656c6449
    21fc:	00000000 	.word	0x00000000
    2200:	682f2e2e 	.word	0x682f2e2e
    2204:	732f6c61 	.word	0x732f6c61
    2208:	682f6372 	.word	0x682f6372
    220c:	635f6c61 	.word	0x635f6c61
    2210:	6e656c61 	.word	0x6e656c61
    2214:	2e726164 	.word	0x2e726164
    2218:	00000063 	.word	0x00000063

0000221c <_map>:
    221c:	0000000f 0000000f 682f2e2e 652f6c70     ........../hpl/e
    222c:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    223c:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    224c:	632e6374 00000000 65656c53 676e6970     tc.c....Sleeping
    225c:	6c644920 00000065 0a0d0a0d 3d3d2023      Idle.......# ==
    226c:	3d3d3d3d 3d3d3d3d 00000d3d 2e302e31     =========...1.0.
    227c:	00000030 756d2023 5f62696c 6e696c73     0...# mulib_slin
    228c:	2520796b 73203a73 68206565 73707474     ky %s: see https
    229c:	672f2f3a 75687469 6f632e62 64722f6d     ://github.com/rd
    22ac:	726f6f70 6c756d2f 0a0d6269 00000000     poor/mulib......
    22bc:	74747562 70206e6f 73736572 61206465     button pressed a
    22cc:	6c252074 000a0d75 74747542 49206e6f     t %lu...Button I
    22dc:	7265746e 74707572 00000000 0044454c     nterrupt....LED.

000022ec <_global_impure_ptr>:
    22ec:	20000004                                ... 

000022f0 <__sf_fake_stderr>:
	...

00002310 <__sf_fake_stdin>:
	...

00002330 <__sf_fake_stdout>:
	...
    2350:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2360:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2370:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2380:	00006665                                ef..

00002384 <_init>:
    2384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2386:	46c0      	nop			; (mov r8, r8)
    2388:	bcf8      	pop	{r3, r4, r5, r6, r7}
    238a:	bc08      	pop	{r3}
    238c:	469e      	mov	lr, r3
    238e:	4770      	bx	lr

00002390 <__init_array_start>:
    2390:	000000dd 	.word	0x000000dd

00002394 <_fini>:
    2394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2396:	46c0      	nop			; (mov r8, r8)
    2398:	bcf8      	pop	{r3, r4, r5, r6, r7}
    239a:	bc08      	pop	{r3}
    239c:	469e      	mov	lr, r3
    239e:	4770      	bx	lr

000023a0 <__fini_array_start>:
    23a0:	000000b5 	.word	0x000000b5
