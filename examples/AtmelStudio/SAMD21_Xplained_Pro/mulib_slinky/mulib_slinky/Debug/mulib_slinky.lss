
mulib_slinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cf8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00002cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001f4  20000064  00002d5c  00020064  2**2
                  ALLOC
  3 .stack        00002000  20000258  00002f50  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000306ea  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000044e6  00000000  00000000  000507cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e5bc  00000000  00000000  00054cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e00  00000000  00000000  00063271  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000013c8  00000000  00000000  00064071  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001aaa2  00000000  00000000  00065439  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013517  00000000  00000000  0007fedb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008b7de  00000000  00000000  000933f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000029e4  00000000  00000000  0011ebd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 22 00 20 65 04 00 00 61 04 00 00 61 04 00 00     X". e...a...a...
	...
      2c:	61 04 00 00 00 00 00 00 00 00 00 00 61 04 00 00     a...........a...
      3c:	61 04 00 00 61 04 00 00 61 04 00 00 61 04 00 00     a...a...a...a...
      4c:	e5 0f 00 00 15 0d 00 00 61 04 00 00 61 04 00 00     ........a...a...
      5c:	61 04 00 00 61 04 00 00 61 04 00 00 61 04 00 00     a...a...a...a...
      6c:	61 04 00 00 d5 11 00 00 61 04 00 00 61 04 00 00     a.......a...a...
      7c:	61 04 00 00 61 04 00 00 61 04 00 00 61 04 00 00     a...a...a...a...
      8c:	61 04 00 00 61 04 00 00 61 04 00 00 61 04 00 00     a...a...a...a...
      9c:	61 04 00 00 61 04 00 00 61 04 00 00 61 04 00 00     a...a...a...a...
      ac:	61 04 00 00 00 00 00 00                             a.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	00002cf8 	.word	0x00002cf8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	00002cf8 	.word	0x00002cf8
     10c:	00002cf8 	.word	0x00002cf8
     110:	00000000 	.word	0x00000000

00000114 <default_idle_fn>:
}

static void *default_idle_fn(void *self, void *arg) {
  // the default idle task doesn't do much...
  return self;
}
     114:	4770      	bx	lr
	...

00000118 <sched_task_at>:
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
  }
  sched->event_queue_count -= 1;
}

static mu_sched_err_t sched_task_at(mu_sched_t *sched, mu_task_t *task, mu_time_t time) {
     118:	b5f0      	push	{r4, r5, r6, r7, lr}
     11a:	b083      	sub	sp, #12
     11c:	0004      	movs	r4, r0
     11e:	9101      	str	r1, [sp, #4]
     120:	9200      	str	r2, [sp, #0]
  mu_sched_event_t *event;
  size_t index;

  if (sched->event_queue_count >= sched->event_queue_capacity) {
     122:	6885      	ldr	r5, [r0, #8]
    return MU_SCHED_ERR_FULL;
     124:	2002      	movs	r0, #2
  if (sched->event_queue_count >= sched->event_queue_capacity) {
     126:	6863      	ldr	r3, [r4, #4]
     128:	429d      	cmp	r5, r3
     12a:	d301      	bcc.n	130 <sched_task_at+0x18>
  // fill in the event
  event = &sched->event_queue[index];
  event_init(event, task, time);
  sched->event_queue_count += 1;
  return MU_SCHED_ERR_NONE;
}
     12c:	b003      	add	sp, #12
     12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (sched->event_queue_count == 0) {
     130:	2d00      	cmp	r5, #0
     132:	d10c      	bne.n	14e <sched_task_at+0x36>
  event = &sched->event_queue[index];
     134:	00ed      	lsls	r5, r5, #3
     136:	6823      	ldr	r3, [r4, #0]
     138:	469c      	mov	ip, r3
     13a:	4465      	add	r5, ip
  event->task = task;
     13c:	9b01      	ldr	r3, [sp, #4]
     13e:	606b      	str	r3, [r5, #4]
  event->time = time;
     140:	9b00      	ldr	r3, [sp, #0]
     142:	602b      	str	r3, [r5, #0]
  sched->event_queue_count += 1;
     144:	68a3      	ldr	r3, [r4, #8]
     146:	3301      	adds	r3, #1
     148:	60a3      	str	r3, [r4, #8]
  return MU_SCHED_ERR_NONE;
     14a:	2000      	movs	r0, #0
     14c:	e7ee      	b.n	12c <sched_task_at+0x14>
#else
// linear search for insertion point
static size_t find_insertion_index(mu_sched_t *sched, mu_time_t time) {
  mu_sched_event_t *events = sched->event_queue;

  for (size_t i = sched->event_queue_count - 1; i >= 0; i--) {
     14e:	1e6f      	subs	r7, r5, #1
     150:	4b12      	ldr	r3, [pc, #72]	; (19c <sched_task_at+0x84>)
     152:	469c      	mov	ip, r3
     154:	4465      	add	r5, ip
     156:	00ed      	lsls	r5, r5, #3
     158:	6823      	ldr	r3, [r4, #0]
     15a:	469c      	mov	ip, r3
     15c:	4465      	add	r5, ip
    if (mu_time_precedes(time, events[i].time)) {
     15e:	4e10      	ldr	r6, [pc, #64]	; (1a0 <sched_task_at+0x88>)
     160:	6829      	ldr	r1, [r5, #0]
     162:	9800      	ldr	r0, [sp, #0]
     164:	47b0      	blx	r6
     166:	2800      	cmp	r0, #0
     168:	d104      	bne.n	174 <sched_task_at+0x5c>
     16a:	3d08      	subs	r5, #8
      return i+1;    // precedes incumbent
    } else if (i == 0) {
     16c:	2f00      	cmp	r7, #0
     16e:	d012      	beq.n	196 <sched_task_at+0x7e>
  for (size_t i = sched->event_queue_count - 1; i >= 0; i--) {
     170:	3f01      	subs	r7, #1
     172:	e7f5      	b.n	160 <sched_task_at+0x48>
      return i+1;    // precedes incumbent
     174:	1c7d      	adds	r5, r7, #1
  int to_move = sched->event_queue_count - index;
     176:	68a3      	ldr	r3, [r4, #8]
     178:	1b5a      	subs	r2, r3, r5
  if (to_move > 0) {
     17a:	2a00      	cmp	r2, #0
     17c:	ddda      	ble.n	134 <sched_task_at+0x1c>
    mu_sched_event_t *src = &sched->event_queue[index];
     17e:	00eb      	lsls	r3, r5, #3
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     180:	00d2      	lsls	r2, r2, #3
    mu_sched_event_t *src = &sched->event_queue[index];
     182:	6821      	ldr	r1, [r4, #0]
     184:	18c9      	adds	r1, r1, r3
    mu_sched_event_t *dst = &sched->event_queue[index + 1];
     186:	3308      	adds	r3, #8
     188:	0018      	movs	r0, r3
     18a:	6823      	ldr	r3, [r4, #0]
     18c:	469c      	mov	ip, r3
     18e:	4460      	add	r0, ip
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     190:	4b04      	ldr	r3, [pc, #16]	; (1a4 <sched_task_at+0x8c>)
     192:	4798      	blx	r3
     194:	e7ce      	b.n	134 <sched_task_at+0x1c>
      return 0;      // follows all
     196:	003d      	movs	r5, r7
     198:	e7ed      	b.n	176 <sched_task_at+0x5e>
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	1fffffff 	.word	0x1fffffff
     1a0:	0000041d 	.word	0x0000041d
     1a4:	00001b7f 	.word	0x00001b7f

000001a8 <mu_sched_reset>:
mu_sched_t *mu_sched_reset(mu_sched_t *sched) {
     1a8:	b570      	push	{r4, r5, r6, lr}
     1aa:	0004      	movs	r4, r0
  sched->event_queue_count = 0;
     1ac:	2500      	movs	r5, #0
     1ae:	6085      	str	r5, [r0, #8]
  mu_spscq_reset(sched->isr_queue);
     1b0:	68c0      	ldr	r0, [r0, #12]
     1b2:	4b02      	ldr	r3, [pc, #8]	; (1bc <mu_sched_reset+0x14>)
     1b4:	4798      	blx	r3
  sched->current_event.task = NULL;
     1b6:	61e5      	str	r5, [r4, #28]
}
     1b8:	0020      	movs	r0, r4
     1ba:	bd70      	pop	{r4, r5, r6, pc}
     1bc:	0000033b 	.word	0x0000033b

000001c0 <mu_sched_init>:
                          mu_spscq_t *isr_queue) {
     1c0:	b570      	push	{r4, r5, r6, lr}
     1c2:	0004      	movs	r4, r0
  sched->event_queue = event_queue;
     1c4:	6001      	str	r1, [r0, #0]
  sched->event_queue_capacity = event_queue_capacity;
     1c6:	6042      	str	r2, [r0, #4]
  sched->isr_queue = isr_queue;
     1c8:	60c3      	str	r3, [r0, #12]
  sched->clock_fn = mu_time_now;
     1ca:	4b06      	ldr	r3, [pc, #24]	; (1e4 <mu_sched_init+0x24>)
     1cc:	6103      	str	r3, [r0, #16]
  sched->idle_task = &s_default_idle_task;
     1ce:	4806      	ldr	r0, [pc, #24]	; (1e8 <mu_sched_init+0x28>)
     1d0:	6160      	str	r0, [r4, #20]
  mu_task_init(&s_default_idle_task, default_idle_fn, NULL, "Idle");
     1d2:	4b06      	ldr	r3, [pc, #24]	; (1ec <mu_sched_init+0x2c>)
     1d4:	2200      	movs	r2, #0
     1d6:	4906      	ldr	r1, [pc, #24]	; (1f0 <mu_sched_init+0x30>)
     1d8:	4d06      	ldr	r5, [pc, #24]	; (1f4 <mu_sched_init+0x34>)
     1da:	47a8      	blx	r5
  return mu_sched_reset(sched);
     1dc:	0020      	movs	r0, r4
     1de:	4b06      	ldr	r3, [pc, #24]	; (1f8 <mu_sched_init+0x38>)
     1e0:	4798      	blx	r3
}
     1e2:	bd70      	pop	{r4, r5, r6, pc}
     1e4:	00000449 	.word	0x00000449
     1e8:	20000080 	.word	0x20000080
     1ec:	00002aec 	.word	0x00002aec
     1f0:	00000115 	.word	0x00000115
     1f4:	000003b3 	.word	0x000003b3
     1f8:	000001a9 	.word	0x000001a9

000001fc <mu_sched_set_idle_task>:
  sched->idle_task = task;
     1fc:	6141      	str	r1, [r0, #20]
}
     1fe:	4770      	bx	lr

00000200 <mu_sched_get_current_time>:
mu_time_t mu_sched_get_current_time(mu_sched_t *sched) {
     200:	b510      	push	{r4, lr}
  return sched->clock_fn();
     202:	6903      	ldr	r3, [r0, #16]
     204:	4798      	blx	r3
}
     206:	bd10      	pop	{r4, pc}

00000208 <mu_sched_get_next_event>:
  if (sched->event_queue_count == 0) {
     208:	6883      	ldr	r3, [r0, #8]
     20a:	2b00      	cmp	r3, #0
     20c:	d006      	beq.n	21c <mu_sched_get_next_event+0x14>
    return &sched->event_queue[sched->event_queue_count - 1];
     20e:	4a04      	ldr	r2, [pc, #16]	; (220 <mu_sched_get_next_event+0x18>)
     210:	4694      	mov	ip, r2
     212:	4463      	add	r3, ip
     214:	00db      	lsls	r3, r3, #3
     216:	6800      	ldr	r0, [r0, #0]
     218:	18c0      	adds	r0, r0, r3
}
     21a:	4770      	bx	lr
    return NULL;
     21c:	2000      	movs	r0, #0
     21e:	e7fc      	b.n	21a <mu_sched_get_next_event+0x12>
     220:	1fffffff 	.word	0x1fffffff

00000224 <mu_sched_step>:
mu_sched_err_t mu_sched_step(mu_sched_t *sched) {
     224:	b5f0      	push	{r4, r5, r6, r7, lr}
     226:	b083      	sub	sp, #12
     228:	0004      	movs	r4, r0
  mu_time_t now = mu_sched_get_current_time(sched);
     22a:	4b1a      	ldr	r3, [pc, #104]	; (294 <mu_sched_step+0x70>)
     22c:	4798      	blx	r3
     22e:	0005      	movs	r5, r0
  while (mu_spscq_get(sched->isr_queue, (void **)&task) != MU_CQUEUE_ERR_EMPTY) {
     230:	4e19      	ldr	r6, [pc, #100]	; (298 <mu_sched_step+0x74>)
  return sched_task_at(sched, task, at);
     232:	4f1a      	ldr	r7, [pc, #104]	; (29c <mu_sched_step+0x78>)
  while (mu_spscq_get(sched->isr_queue, (void **)&task) != MU_CQUEUE_ERR_EMPTY) {
     234:	a901      	add	r1, sp, #4
     236:	68e0      	ldr	r0, [r4, #12]
     238:	47b0      	blx	r6
     23a:	2801      	cmp	r0, #1
     23c:	d007      	beq.n	24e <mu_sched_step+0x2a>
  return sched_task_at(sched, task, at);
     23e:	002a      	movs	r2, r5
     240:	9901      	ldr	r1, [sp, #4]
     242:	0020      	movs	r0, r4
     244:	47b8      	blx	r7
    if (err != MU_SCHED_ERR_NONE) {
     246:	2800      	cmp	r0, #0
     248:	d0f4      	beq.n	234 <mu_sched_step+0x10>
}
     24a:	b003      	add	sp, #12
     24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  event = mu_sched_get_next_event(sched);
     24e:	0020      	movs	r0, r4
     250:	4b13      	ldr	r3, [pc, #76]	; (2a0 <mu_sched_step+0x7c>)
     252:	4798      	blx	r3
     254:	1e06      	subs	r6, r0, #0
  if (event != NULL) {
     256:	d005      	beq.n	264 <mu_sched_step+0x40>
    if (!mu_time_follows(mu_sched_event_get_time(event), now)) {
     258:	0029      	movs	r1, r5
     25a:	6800      	ldr	r0, [r0, #0]
     25c:	4b11      	ldr	r3, [pc, #68]	; (2a4 <mu_sched_step+0x80>)
     25e:	4798      	blx	r3
     260:	2800      	cmp	r0, #0
     262:	d005      	beq.n	270 <mu_sched_step+0x4c>
  mu_task_call(sched->idle_task, sched);
     264:	6960      	ldr	r0, [r4, #20]
     266:	0021      	movs	r1, r4
     268:	4b0f      	ldr	r3, [pc, #60]	; (2a8 <mu_sched_step+0x84>)
     26a:	4798      	blx	r3
  return MU_SCHED_ERR_NONE;
     26c:	2000      	movs	r0, #0
     26e:	e7ec      	b.n	24a <mu_sched_step+0x26>
      memcpy(&(sched->current_event), event, sizeof(mu_sched_event_t));
     270:	0020      	movs	r0, r4
     272:	3018      	adds	r0, #24
     274:	2208      	movs	r2, #8
     276:	0031      	movs	r1, r6
     278:	4b0c      	ldr	r3, [pc, #48]	; (2ac <mu_sched_step+0x88>)
     27a:	4798      	blx	r3
  return &sched->event_queue[--sched->event_queue_count];
     27c:	68a3      	ldr	r3, [r4, #8]
     27e:	3b01      	subs	r3, #1
     280:	60a3      	str	r3, [r4, #8]
      mu_task_call(sched->current_event.task, sched);
     282:	0021      	movs	r1, r4
     284:	69e0      	ldr	r0, [r4, #28]
     286:	4b08      	ldr	r3, [pc, #32]	; (2a8 <mu_sched_step+0x84>)
     288:	4798      	blx	r3
      sched->current_event.task = NULL;
     28a:	2300      	movs	r3, #0
     28c:	61e3      	str	r3, [r4, #28]
      return MU_SCHED_ERR_NONE;
     28e:	2000      	movs	r0, #0
     290:	e7db      	b.n	24a <mu_sched_step+0x26>
     292:	46c0      	nop			; (mov r8, r8)
     294:	00000201 	.word	0x00000201
     298:	00000389 	.word	0x00000389
     29c:	00000119 	.word	0x00000119
     2a0:	00000209 	.word	0x00000209
     2a4:	00000429 	.word	0x00000429
     2a8:	000003c5 	.word	0x000003c5
     2ac:	00001b6d 	.word	0x00001b6d

000002b0 <mu_sched_task_now>:
mu_sched_err_t mu_sched_task_now(mu_sched_t *sched, mu_task_t *task) {
     2b0:	b570      	push	{r4, r5, r6, lr}
     2b2:	0004      	movs	r4, r0
     2b4:	000d      	movs	r5, r1
  return sched_task_at(sched, task, mu_sched_get_current_time(sched));
     2b6:	4b04      	ldr	r3, [pc, #16]	; (2c8 <mu_sched_task_now+0x18>)
     2b8:	4798      	blx	r3
     2ba:	0002      	movs	r2, r0
     2bc:	0029      	movs	r1, r5
     2be:	0020      	movs	r0, r4
     2c0:	4b02      	ldr	r3, [pc, #8]	; (2cc <mu_sched_task_now+0x1c>)
     2c2:	4798      	blx	r3
}
     2c4:	bd70      	pop	{r4, r5, r6, pc}
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	00000201 	.word	0x00000201
     2cc:	00000119 	.word	0x00000119

000002d0 <mu_sched_reschedule_in>:
mu_sched_err_t mu_sched_reschedule_in(mu_sched_t *sched, mu_time_dt in) {
     2d0:	b570      	push	{r4, r5, r6, lr}
     2d2:	0004      	movs	r4, r0
  if (sched->current_event.task == NULL) {
     2d4:	69c3      	ldr	r3, [r0, #28]
     2d6:	2b00      	cmp	r3, #0
     2d8:	d00d      	beq.n	2f6 <mu_sched_reschedule_in+0x26>
    return MU_SCHED_ERR_NOT_FOUND;
     2da:	2003      	movs	r0, #3
  if (!event) {
     2dc:	0023      	movs	r3, r4
     2de:	3318      	adds	r3, #24
     2e0:	d008      	beq.n	2f4 <mu_sched_reschedule_in+0x24>
  mu_task_t *task = event->task;
     2e2:	69e5      	ldr	r5, [r4, #28]
  return sched_task_at(sched, task, mu_time_offset(time, in));
     2e4:	69a0      	ldr	r0, [r4, #24]
     2e6:	4b05      	ldr	r3, [pc, #20]	; (2fc <mu_sched_reschedule_in+0x2c>)
     2e8:	4798      	blx	r3
     2ea:	0002      	movs	r2, r0
     2ec:	0029      	movs	r1, r5
     2ee:	0020      	movs	r0, r4
     2f0:	4b03      	ldr	r3, [pc, #12]	; (300 <mu_sched_reschedule_in+0x30>)
     2f2:	4798      	blx	r3
}
     2f4:	bd70      	pop	{r4, r5, r6, pc}
    return MU_SCHED_ERR_NOT_FOUND;
     2f6:	2003      	movs	r0, #3
     2f8:	e7fc      	b.n	2f4 <mu_sched_reschedule_in+0x24>
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	00000405 	.word	0x00000405
     300:	00000119 	.word	0x00000119

00000304 <mu_sched_task_from_isr>:
mu_sched_err_t mu_sched_task_from_isr(mu_sched_t *sched, mu_task_t *task) {
     304:	b510      	push	{r4, lr}
  if (mu_spscq_put(sched->isr_queue, task) == MU_CQUEUE_ERR_FULL) {
     306:	68c0      	ldr	r0, [r0, #12]
     308:	4b03      	ldr	r3, [pc, #12]	; (318 <mu_sched_task_from_isr+0x14>)
     30a:	4798      	blx	r3
    return MU_SCHED_ERR_NONE;
     30c:	3802      	subs	r0, #2
     30e:	4243      	negs	r3, r0
     310:	4158      	adcs	r0, r3
     312:	0040      	lsls	r0, r0, #1
}
     314:	bd10      	pop	{r4, pc}
     316:	46c0      	nop			; (mov r8, r8)
     318:	00000359 	.word	0x00000359

0000031c <mu_spscq_init>:
// =============================================================================
// public code

mu_spscq_err_t mu_spscq_init(mu_spscq_t *q,
                               mu_spscq_item_t *store,
                               uint16_t capacity) {
     31c:	b510      	push	{r4, lr}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
    return MU_CQUEUE_ERR_SIZE;
     31e:	2303      	movs	r3, #3
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     320:	2a00      	cmp	r2, #0
     322:	d101      	bne.n	328 <mu_spscq_init+0xc>
  }
  q->mask = capacity - 1;
  q->store = store;
  return mu_spscq_reset(q);
}
     324:	0018      	movs	r0, r3
     326:	bd10      	pop	{r4, pc}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     328:	1e54      	subs	r4, r2, #1
     32a:	4222      	tst	r2, r4
     32c:	d1fa      	bne.n	324 <mu_spscq_init+0x8>
  q->mask = capacity - 1;
     32e:	8004      	strh	r4, [r0, #0]
  q->store = store;
     330:	6081      	str	r1, [r0, #8]

mu_spscq_err_t mu_spscq_reset(mu_spscq_t *q) {
  q->head = 0;
     332:	2300      	movs	r3, #0
     334:	8043      	strh	r3, [r0, #2]
  q->tail = 0;
     336:	8083      	strh	r3, [r0, #4]
  return mu_spscq_reset(q);
     338:	e7f4      	b.n	324 <mu_spscq_init+0x8>

0000033a <mu_spscq_reset>:
  q->head = 0;
     33a:	2300      	movs	r3, #0
     33c:	8043      	strh	r3, [r0, #2]
  q->tail = 0;
     33e:	8083      	strh	r3, [r0, #4]
  return MU_CQUEUE_ERR_NONE;
}
     340:	2000      	movs	r0, #0
     342:	4770      	bx	lr

00000344 <mu_spscq_is_full>:

bool mu_spscq_is_empty(mu_spscq_t *q) { return q->head == q->tail; }

bool mu_spscq_is_full(mu_spscq_t *q) {
  // would advancing tail by 1 make it catch up with head?
  return ((q->tail + 1) & q->mask) == q->head;
     344:	8883      	ldrh	r3, [r0, #4]
     346:	8842      	ldrh	r2, [r0, #2]
     348:	3301      	adds	r3, #1
     34a:	8800      	ldrh	r0, [r0, #0]
     34c:	4018      	ands	r0, r3
     34e:	1a80      	subs	r0, r0, r2
     350:	4243      	negs	r3, r0
     352:	4158      	adcs	r0, r3
     354:	b2c0      	uxtb	r0, r0
}
     356:	4770      	bx	lr

00000358 <mu_spscq_put>:

mu_spscq_err_t mu_spscq_put(mu_spscq_t *q, mu_spscq_item_t item) {
     358:	b570      	push	{r4, r5, r6, lr}
     35a:	0004      	movs	r4, r0
     35c:	000d      	movs	r5, r1
  if (mu_spscq_is_full(q)) {
     35e:	4b09      	ldr	r3, [pc, #36]	; (384 <mu_spscq_put+0x2c>)
     360:	4798      	blx	r3
    return MU_CQUEUE_ERR_FULL;
     362:	2302      	movs	r3, #2
  if (mu_spscq_is_full(q)) {
     364:	2800      	cmp	r0, #0
     366:	d001      	beq.n	36c <mu_spscq_put+0x14>
  }
  q->store[q->tail] = item;
  q->tail = (q->tail + 1) & q->mask;
  return MU_CQUEUE_ERR_NONE;
}
     368:	0018      	movs	r0, r3
     36a:	bd70      	pop	{r4, r5, r6, pc}
  q->store[q->tail] = item;
     36c:	88a3      	ldrh	r3, [r4, #4]
     36e:	009b      	lsls	r3, r3, #2
     370:	68a2      	ldr	r2, [r4, #8]
     372:	509d      	str	r5, [r3, r2]
  q->tail = (q->tail + 1) & q->mask;
     374:	88a2      	ldrh	r2, [r4, #4]
     376:	3201      	adds	r2, #1
     378:	8823      	ldrh	r3, [r4, #0]
     37a:	4013      	ands	r3, r2
     37c:	80a3      	strh	r3, [r4, #4]
  return MU_CQUEUE_ERR_NONE;
     37e:	2300      	movs	r3, #0
     380:	e7f2      	b.n	368 <mu_spscq_put+0x10>
     382:	46c0      	nop			; (mov r8, r8)
     384:	00000345 	.word	0x00000345

00000388 <mu_spscq_get>:
bool mu_spscq_is_empty(mu_spscq_t *q) { return q->head == q->tail; }
     388:	8843      	ldrh	r3, [r0, #2]
     38a:	8882      	ldrh	r2, [r0, #4]
     38c:	b29b      	uxth	r3, r3

mu_spscq_err_t mu_spscq_get(mu_spscq_t *q, mu_spscq_item_t *item) {
  if (mu_spscq_is_empty(q)) {
     38e:	4293      	cmp	r3, r2
     390:	d00b      	beq.n	3aa <mu_spscq_get+0x22>
    *item = NULL;
    return MU_CQUEUE_ERR_EMPTY;
  }
  *item = q->store[q->head];
     392:	8843      	ldrh	r3, [r0, #2]
     394:	6882      	ldr	r2, [r0, #8]
     396:	009b      	lsls	r3, r3, #2
     398:	589b      	ldr	r3, [r3, r2]
     39a:	600b      	str	r3, [r1, #0]
  q->head = (q->head + 1) & q->mask;
     39c:	8842      	ldrh	r2, [r0, #2]
     39e:	3201      	adds	r2, #1
     3a0:	8803      	ldrh	r3, [r0, #0]
     3a2:	4013      	ands	r3, r2
     3a4:	8043      	strh	r3, [r0, #2]
  return MU_CQUEUE_ERR_NONE;
     3a6:	2000      	movs	r0, #0
}
     3a8:	4770      	bx	lr
    *item = NULL;
     3aa:	2300      	movs	r3, #0
     3ac:	600b      	str	r3, [r1, #0]
    return MU_CQUEUE_ERR_EMPTY;
     3ae:	2001      	movs	r0, #1
     3b0:	e7fa      	b.n	3a8 <mu_spscq_get+0x20>

000003b2 <mu_task_init>:

mu_task_t *mu_task_init(mu_task_t *task,
                        mu_task_fn fn,
                        void *ctx,
                        const char *name) {
  task->fn = fn;
     3b2:	6001      	str	r1, [r0, #0]
  task->ctx = ctx;
     3b4:	6042      	str	r2, [r0, #4]
#if (MU_TASK_PROFILING)
  task->name = name;
     3b6:	6083      	str	r3, [r0, #8]
  task->call_count = 0;
     3b8:	2300      	movs	r3, #0
     3ba:	60c3      	str	r3, [r0, #12]
  task->runtime = 0;
     3bc:	6103      	str	r3, [r0, #16]
  task->max_duration = 0;
     3be:	6143      	str	r3, [r0, #20]
#endif
  return task;
}
     3c0:	4770      	bx	lr
	...

000003c4 <mu_task_call>:
#else
  return "";
#endif
}

void *mu_task_call(mu_task_t *task, void *arg) {
     3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3c6:	0004      	movs	r4, r0
     3c8:	000d      	movs	r5, r1

#if (MU_TASK_PROFILING)
  mu_time_t called_at = mu_time_now();
     3ca:	4f0c      	ldr	r7, [pc, #48]	; (3fc <mu_task_call+0x38>)
     3cc:	47b8      	blx	r7
     3ce:	0006      	movs	r6, r0
#endif
  void *result = task->fn(task->ctx, arg);
     3d0:	0029      	movs	r1, r5
     3d2:	6860      	ldr	r0, [r4, #4]
     3d4:	6823      	ldr	r3, [r4, #0]
     3d6:	4798      	blx	r3
     3d8:	0005      	movs	r5, r0
#if (MU_TASK_PROFILING)
  task->call_count += 1;
     3da:	68e3      	ldr	r3, [r4, #12]
     3dc:	3301      	adds	r3, #1
     3de:	60e3      	str	r3, [r4, #12]
  mu_time_dt duration = mu_time_difference(mu_time_now(), called_at);
     3e0:	47b8      	blx	r7
     3e2:	0031      	movs	r1, r6
     3e4:	4b06      	ldr	r3, [pc, #24]	; (400 <mu_task_call+0x3c>)
     3e6:	4798      	blx	r3
  task->runtime += duration;
     3e8:	6923      	ldr	r3, [r4, #16]
     3ea:	181b      	adds	r3, r3, r0
     3ec:	6123      	str	r3, [r4, #16]
  if (duration > task->max_duration) task->max_duration = duration;
     3ee:	6963      	ldr	r3, [r4, #20]
     3f0:	4298      	cmp	r0, r3
     3f2:	dd00      	ble.n	3f6 <mu_task_call+0x32>
     3f4:	6160      	str	r0, [r4, #20]
#endif
  return result;
}
     3f6:	0028      	movs	r0, r5
     3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	00000449 	.word	0x00000449
     400:	00000411 	.word	0x00000411

00000404 <mu_time_offset>:

void mu_time_init(void) {
  // mu_vm_init() must be called separately
}

mu_time_t mu_time_offset(mu_time_t t1, mu_time_dt dt) {
     404:	b510      	push	{r4, lr}
  return mu_vm_time_offset(t1, dt);
     406:	4b01      	ldr	r3, [pc, #4]	; (40c <mu_time_offset+0x8>)
     408:	4798      	blx	r3
}
     40a:	bd10      	pop	{r4, pc}
     40c:	000015f9 	.word	0x000015f9

00000410 <mu_time_difference>:

mu_time_dt mu_time_difference(mu_time_t t1, mu_time_t t2) {
     410:	b510      	push	{r4, lr}
  return mu_vm_time_difference(t1, t2);
     412:	4b01      	ldr	r3, [pc, #4]	; (418 <mu_time_difference+0x8>)
     414:	4798      	blx	r3
}
     416:	bd10      	pop	{r4, pc}
     418:	000015fd 	.word	0x000015fd

0000041c <mu_time_precedes>:

bool mu_time_precedes(mu_time_t t1, mu_time_t t2) {
     41c:	b510      	push	{r4, lr}
  return mu_vm_time_precedes(t1, t2);
     41e:	4b01      	ldr	r3, [pc, #4]	; (424 <mu_time_precedes+0x8>)
     420:	4798      	blx	r3
}
     422:	bd10      	pop	{r4, pc}
     424:	00001601 	.word	0x00001601

00000428 <mu_time_follows>:

bool mu_time_equals(mu_time_t t1, mu_time_t t2) {
  return mu_vm_time_equals(t1, t2);
}

bool mu_time_follows(mu_time_t t1, mu_time_t t2) {
     428:	b510      	push	{r4, lr}
     42a:	000b      	movs	r3, r1
  return mu_vm_time_precedes(t2, t1);
     42c:	0001      	movs	r1, r0
     42e:	0018      	movs	r0, r3
     430:	4b01      	ldr	r3, [pc, #4]	; (438 <mu_time_follows+0x10>)
     432:	4798      	blx	r3
}
     434:	bd10      	pop	{r4, pc}
     436:	46c0      	nop			; (mov r8, r8)
     438:	00001601 	.word	0x00001601

0000043c <mu_time_ms_to_duration>:

mu_time_ms_dt mu_time_duration_to_ms(mu_time_dt dt) {
  return mu_vm_time_duration_to_ms(dt);
}

mu_time_dt mu_time_ms_to_duration(mu_time_ms_dt ms) {
     43c:	b510      	push	{r4, lr}
  return mu_vm_time_ms_to_duration(ms);
     43e:	4b01      	ldr	r3, [pc, #4]	; (444 <mu_time_ms_to_duration+0x8>)
     440:	4798      	blx	r3
}
     442:	bd10      	pop	{r4, pc}
     444:	00001609 	.word	0x00001609

00000448 <mu_time_now>:
mu_time_dt mu_time_seconds_to_duration(mu_time_seconds_dt s) {
  return mu_vm_time_seconds_to_duration(s);
}
#endif

mu_time_t mu_time_now() {
     448:	b510      	push	{r4, lr}
  return mu_vm_rtc_now();
     44a:	4b01      	ldr	r3, [pc, #4]	; (450 <mu_time_now+0x8>)
     44c:	4798      	blx	r3
}
     44e:	bd10      	pop	{r4, pc}
     450:	00001631 	.word	0x00001631

00000454 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     454:	b510      	push	{r4, lr}
	system_init();
     456:	4b01      	ldr	r3, [pc, #4]	; (45c <atmel_start_init+0x8>)
     458:	4798      	blx	r3
}
     45a:	bd10      	pop	{r4, pc}
     45c:	0000067d 	.word	0x0000067d

00000460 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     460:	e7fe      	b.n	460 <Dummy_Handler>
	...

00000464 <Reset_Handler>:
{
     464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     466:	4a2a      	ldr	r2, [pc, #168]	; (510 <Reset_Handler+0xac>)
     468:	4b2a      	ldr	r3, [pc, #168]	; (514 <Reset_Handler+0xb0>)
     46a:	429a      	cmp	r2, r3
     46c:	d011      	beq.n	492 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     46e:	001a      	movs	r2, r3
     470:	4b29      	ldr	r3, [pc, #164]	; (518 <Reset_Handler+0xb4>)
     472:	429a      	cmp	r2, r3
     474:	d20d      	bcs.n	492 <Reset_Handler+0x2e>
     476:	4a29      	ldr	r2, [pc, #164]	; (51c <Reset_Handler+0xb8>)
     478:	3303      	adds	r3, #3
     47a:	1a9b      	subs	r3, r3, r2
     47c:	089b      	lsrs	r3, r3, #2
     47e:	3301      	adds	r3, #1
     480:	009b      	lsls	r3, r3, #2
     482:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     484:	4823      	ldr	r0, [pc, #140]	; (514 <Reset_Handler+0xb0>)
     486:	4922      	ldr	r1, [pc, #136]	; (510 <Reset_Handler+0xac>)
     488:	588c      	ldr	r4, [r1, r2]
     48a:	5084      	str	r4, [r0, r2]
     48c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     48e:	429a      	cmp	r2, r3
     490:	d1fa      	bne.n	488 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     492:	4a23      	ldr	r2, [pc, #140]	; (520 <Reset_Handler+0xbc>)
     494:	4b23      	ldr	r3, [pc, #140]	; (524 <Reset_Handler+0xc0>)
     496:	429a      	cmp	r2, r3
     498:	d20a      	bcs.n	4b0 <Reset_Handler+0x4c>
     49a:	43d3      	mvns	r3, r2
     49c:	4921      	ldr	r1, [pc, #132]	; (524 <Reset_Handler+0xc0>)
     49e:	185b      	adds	r3, r3, r1
     4a0:	2103      	movs	r1, #3
     4a2:	438b      	bics	r3, r1
     4a4:	3304      	adds	r3, #4
     4a6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     4a8:	2100      	movs	r1, #0
     4aa:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     4ac:	4293      	cmp	r3, r2
     4ae:	d1fc      	bne.n	4aa <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     4b0:	4a1d      	ldr	r2, [pc, #116]	; (528 <Reset_Handler+0xc4>)
     4b2:	21ff      	movs	r1, #255	; 0xff
     4b4:	4b1d      	ldr	r3, [pc, #116]	; (52c <Reset_Handler+0xc8>)
     4b6:	438b      	bics	r3, r1
     4b8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     4ba:	39fd      	subs	r1, #253	; 0xfd
     4bc:	2390      	movs	r3, #144	; 0x90
     4be:	005b      	lsls	r3, r3, #1
     4c0:	4a1b      	ldr	r2, [pc, #108]	; (530 <Reset_Handler+0xcc>)
     4c2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     4c4:	4a1b      	ldr	r2, [pc, #108]	; (534 <Reset_Handler+0xd0>)
     4c6:	78d3      	ldrb	r3, [r2, #3]
     4c8:	2503      	movs	r5, #3
     4ca:	43ab      	bics	r3, r5
     4cc:	2402      	movs	r4, #2
     4ce:	4323      	orrs	r3, r4
     4d0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     4d2:	78d3      	ldrb	r3, [r2, #3]
     4d4:	270c      	movs	r7, #12
     4d6:	43bb      	bics	r3, r7
     4d8:	2608      	movs	r6, #8
     4da:	4333      	orrs	r3, r6
     4dc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     4de:	4b16      	ldr	r3, [pc, #88]	; (538 <Reset_Handler+0xd4>)
     4e0:	7b98      	ldrb	r0, [r3, #14]
     4e2:	2230      	movs	r2, #48	; 0x30
     4e4:	4390      	bics	r0, r2
     4e6:	2220      	movs	r2, #32
     4e8:	4310      	orrs	r0, r2
     4ea:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     4ec:	7b99      	ldrb	r1, [r3, #14]
     4ee:	43b9      	bics	r1, r7
     4f0:	4331      	orrs	r1, r6
     4f2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     4f4:	7b9a      	ldrb	r2, [r3, #14]
     4f6:	43aa      	bics	r2, r5
     4f8:	4322      	orrs	r2, r4
     4fa:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     4fc:	4a0f      	ldr	r2, [pc, #60]	; (53c <Reset_Handler+0xd8>)
     4fe:	6853      	ldr	r3, [r2, #4]
     500:	2180      	movs	r1, #128	; 0x80
     502:	430b      	orrs	r3, r1
     504:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     506:	4b0e      	ldr	r3, [pc, #56]	; (540 <Reset_Handler+0xdc>)
     508:	4798      	blx	r3
        main();
     50a:	4b0e      	ldr	r3, [pc, #56]	; (544 <Reset_Handler+0xe0>)
     50c:	4798      	blx	r3
     50e:	e7fe      	b.n	50e <Reset_Handler+0xaa>
     510:	00002cf8 	.word	0x00002cf8
     514:	20000000 	.word	0x20000000
     518:	20000064 	.word	0x20000064
     51c:	20000004 	.word	0x20000004
     520:	20000064 	.word	0x20000064
     524:	20000258 	.word	0x20000258
     528:	e000ed00 	.word	0xe000ed00
     52c:	00000000 	.word	0x00000000
     530:	41007000 	.word	0x41007000
     534:	41005000 	.word	0x41005000
     538:	41004800 	.word	0x41004800
     53c:	41004000 	.word	0x41004000
     540:	00001b25 	.word	0x00001b25
     544:	000014ad 	.word	0x000014ad

00000548 <EXTERNAL_IRQ_0_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct calendar_descriptor CALENDAR_0;

void EXTERNAL_IRQ_0_init(void)
{
     548:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     54a:	4a10      	ldr	r2, [pc, #64]	; (58c <EXTERNAL_IRQ_0_init+0x44>)
     54c:	4b10      	ldr	r3, [pc, #64]	; (590 <EXTERNAL_IRQ_0_init+0x48>)
     54e:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     550:	22c0      	movs	r2, #192	; 0xc0
     552:	05d2      	lsls	r2, r2, #23
     554:	2080      	movs	r0, #128	; 0x80
     556:	0200      	lsls	r0, r0, #8
     558:	6050      	str	r0, [r2, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     55a:	4b0e      	ldr	r3, [pc, #56]	; (594 <EXTERNAL_IRQ_0_init+0x4c>)
     55c:	490e      	ldr	r1, [pc, #56]	; (598 <EXTERNAL_IRQ_0_init+0x50>)
     55e:	6299      	str	r1, [r3, #40]	; 0x28
     560:	490e      	ldr	r1, [pc, #56]	; (59c <EXTERNAL_IRQ_0_init+0x54>)
     562:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     564:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     566:	214f      	movs	r1, #79	; 0x4f
     568:	5c5c      	ldrb	r4, [r3, r1]
     56a:	2504      	movs	r5, #4
     56c:	432c      	orrs	r4, r5
     56e:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     570:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     572:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     574:	2001      	movs	r0, #1
     576:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     578:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57c:	3918      	subs	r1, #24
     57e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     580:	300e      	adds	r0, #14
     582:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     584:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(USER_BUTTON_AL, PINMUX_PA15A_EIC_EXTINT15);

	ext_irq_init();
     586:	4b06      	ldr	r3, [pc, #24]	; (5a0 <EXTERNAL_IRQ_0_init+0x58>)
     588:	4798      	blx	r3
}
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	00004305 	.word	0x00004305
     590:	40000c00 	.word	0x40000c00
     594:	41004400 	.word	0x41004400
     598:	40028000 	.word	0x40028000
     59c:	c0020000 	.word	0xc0020000
     5a0:	00000795 	.word	0x00000795

000005a4 <USART_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     5a4:	4a04      	ldr	r2, [pc, #16]	; (5b8 <USART_0_CLOCK_init+0x14>)
     5a6:	6a13      	ldr	r3, [r2, #32]
     5a8:	2120      	movs	r1, #32
     5aa:	430b      	orrs	r3, r1
     5ac:	6213      	str	r3, [r2, #32]
     5ae:	4a03      	ldr	r2, [pc, #12]	; (5bc <USART_0_CLOCK_init+0x18>)
     5b0:	4b03      	ldr	r3, [pc, #12]	; (5c0 <USART_0_CLOCK_init+0x1c>)
     5b2:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     5b4:	4770      	bx	lr
     5b6:	46c0      	nop			; (mov r8, r8)
     5b8:	40000400 	.word	0x40000400
     5bc:	00004017 	.word	0x00004017
     5c0:	40000c00 	.word	0x40000c00

000005c4 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     5c4:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5c6:	4b0e      	ldr	r3, [pc, #56]	; (600 <USART_0_PORT_init+0x3c>)
     5c8:	2256      	movs	r2, #86	; 0x56
     5ca:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5cc:	2501      	movs	r5, #1
     5ce:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5d0:	2401      	movs	r4, #1
     5d2:	4321      	orrs	r1, r4
     5d4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5d6:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5d8:	203b      	movs	r0, #59	; 0x3b
     5da:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5dc:	3a47      	subs	r2, #71	; 0x47
     5de:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     5e0:	3a0d      	subs	r2, #13
     5e2:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5e4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5e6:	2157      	movs	r1, #87	; 0x57
     5e8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ea:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ec:	4322      	orrs	r2, r4
     5ee:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5f0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5f2:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5f4:	3948      	subs	r1, #72	; 0x48
     5f6:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     5f8:	3111      	adds	r1, #17
     5fa:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5fc:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     5fe:	bd30      	pop	{r4, r5, pc}
     600:	41004400 	.word	0x41004400

00000604 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     604:	b510      	push	{r4, lr}
     606:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     608:	4b06      	ldr	r3, [pc, #24]	; (624 <USART_0_init+0x20>)
     60a:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     60c:	2300      	movs	r3, #0
     60e:	9300      	str	r3, [sp, #0]
     610:	3310      	adds	r3, #16
     612:	4a05      	ldr	r2, [pc, #20]	; (628 <USART_0_init+0x24>)
     614:	4905      	ldr	r1, [pc, #20]	; (62c <USART_0_init+0x28>)
     616:	4806      	ldr	r0, [pc, #24]	; (630 <USART_0_init+0x2c>)
     618:	4c06      	ldr	r4, [pc, #24]	; (634 <USART_0_init+0x30>)
     61a:	47a0      	blx	r4
	USART_0_PORT_init();
     61c:	4b06      	ldr	r3, [pc, #24]	; (638 <USART_0_init+0x34>)
     61e:	4798      	blx	r3
}
     620:	b002      	add	sp, #8
     622:	bd10      	pop	{r4, pc}
     624:	000005a5 	.word	0x000005a5
     628:	20000098 	.word	0x20000098
     62c:	42001400 	.word	0x42001400
     630:	20000204 	.word	0x20000204
     634:	000009e5 	.word	0x000009e5
     638:	000005c5 	.word	0x000005c5

0000063c <CALENDAR_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     63c:	4a04      	ldr	r2, [pc, #16]	; (650 <CALENDAR_0_CLOCK_init+0x14>)
     63e:	6993      	ldr	r3, [r2, #24]
     640:	2120      	movs	r1, #32
     642:	430b      	orrs	r3, r1
     644:	6193      	str	r3, [r2, #24]
     646:	4a03      	ldr	r2, [pc, #12]	; (654 <CALENDAR_0_CLOCK_init+0x18>)
     648:	4b03      	ldr	r3, [pc, #12]	; (658 <CALENDAR_0_CLOCK_init+0x1c>)
     64a:	805a      	strh	r2, [r3, #2]

void CALENDAR_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
     64c:	4770      	bx	lr
     64e:	46c0      	nop			; (mov r8, r8)
     650:	40000400 	.word	0x40000400
     654:	00004304 	.word	0x00004304
     658:	40000c00 	.word	0x40000c00

0000065c <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     65c:	b510      	push	{r4, lr}
	CALENDAR_0_CLOCK_init();
     65e:	4b03      	ldr	r3, [pc, #12]	; (66c <CALENDAR_0_init+0x10>)
     660:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     662:	4903      	ldr	r1, [pc, #12]	; (670 <CALENDAR_0_init+0x14>)
     664:	4803      	ldr	r0, [pc, #12]	; (674 <CALENDAR_0_init+0x18>)
     666:	4b04      	ldr	r3, [pc, #16]	; (678 <CALENDAR_0_init+0x1c>)
     668:	4798      	blx	r3
}
     66a:	bd10      	pop	{r4, pc}
     66c:	0000063d 	.word	0x0000063d
     670:	40001400 	.word	0x40001400
     674:	200001e8 	.word	0x200001e8
     678:	000006e9 	.word	0x000006e9

0000067c <system_init>:

void system_init(void)
{
     67c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     67e:	4b0d      	ldr	r3, [pc, #52]	; (6b4 <system_init+0x38>)
     680:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     682:	23c0      	movs	r3, #192	; 0xc0
     684:	05db      	lsls	r3, r3, #23
     686:	2280      	movs	r2, #128	; 0x80
     688:	05d2      	lsls	r2, r2, #23
     68a:	2198      	movs	r1, #152	; 0x98
     68c:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     68e:	3910      	subs	r1, #16
     690:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     692:	4b09      	ldr	r3, [pc, #36]	; (6b8 <system_init+0x3c>)
     694:	3120      	adds	r1, #32
     696:	505a      	str	r2, [r3, r1]
     698:	4a08      	ldr	r2, [pc, #32]	; (6bc <system_init+0x40>)
     69a:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     69c:	3136      	adds	r1, #54	; 0x36
     69e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6a0:	2001      	movs	r0, #1
     6a2:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a4:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(USER_LED_AL, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(USER_LED_AL, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     6a6:	4b06      	ldr	r3, [pc, #24]	; (6c0 <system_init+0x44>)
     6a8:	4798      	blx	r3

	USART_0_init();
     6aa:	4b06      	ldr	r3, [pc, #24]	; (6c4 <system_init+0x48>)
     6ac:	4798      	blx	r3

	CALENDAR_0_init();
     6ae:	4b06      	ldr	r3, [pc, #24]	; (6c8 <system_init+0x4c>)
     6b0:	4798      	blx	r3
}
     6b2:	bd10      	pop	{r4, pc}
     6b4:	00000c21 	.word	0x00000c21
     6b8:	41004400 	.word	0x41004400
     6bc:	c0004000 	.word	0xc0004000
     6c0:	00000549 	.word	0x00000549
     6c4:	00000605 	.word	0x00000605
     6c8:	0000065d 	.word	0x0000065d

000006cc <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     6cc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     6d0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     6d2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     6d4:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     6d8:	4770      	bx	lr

000006da <atomic_leave_critical>:
     6da:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     6de:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     6e0:	f383 8810 	msr	PRIMASK, r3
}
     6e4:	4770      	bx	lr
	...

000006e8 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
     6e8:	b570      	push	{r4, r5, r6, lr}
     6ea:	0004      	movs	r4, r0
     6ec:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
     6ee:	1e43      	subs	r3, r0, #1
     6f0:	4198      	sbcs	r0, r3
     6f2:	b2c0      	uxtb	r0, r0
     6f4:	22e0      	movs	r2, #224	; 0xe0
     6f6:	0052      	lsls	r2, r2, #1
     6f8:	4909      	ldr	r1, [pc, #36]	; (720 <calendar_init+0x38>)
     6fa:	4b0a      	ldr	r3, [pc, #40]	; (724 <calendar_init+0x3c>)
     6fc:	4798      	blx	r3

	if (calendar->device.hw == hw) {
     6fe:	6823      	ldr	r3, [r4, #0]
     700:	42ab      	cmp	r3, r5
     702:	d008      	beq.n	716 <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
     704:	2b00      	cmp	r3, #0
     706:	d108      	bne.n	71a <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
     708:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
     70a:	0020      	movs	r0, r4
     70c:	4b06      	ldr	r3, [pc, #24]	; (728 <calendar_init+0x40>)
     70e:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
     710:	4b06      	ldr	r3, [pc, #24]	; (72c <calendar_init+0x44>)
     712:	6163      	str	r3, [r4, #20]

	return ret;
}
     714:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
     716:	2000      	movs	r0, #0
     718:	e7fc      	b.n	714 <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
     71a:	2012      	movs	r0, #18
     71c:	4240      	negs	r0, r0
     71e:	e7f9      	b.n	714 <calendar_init+0x2c>
     720:	00002af4 	.word	0x00002af4
     724:	00000ad5 	.word	0x00000ad5
     728:	00000ef1 	.word	0x00000ef1
     72c:	000007b2 	.word	0x000007b2

00000730 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
     730:	b510      	push	{r4, lr}
     732:	0004      	movs	r4, r0
	/* Sanity check arguments */
	ASSERT(calendar);
     734:	1e43      	subs	r3, r0, #1
     736:	4198      	sbcs	r0, r3
     738:	b2c0      	uxtb	r0, r0
     73a:	22e6      	movs	r2, #230	; 0xe6
     73c:	32ff      	adds	r2, #255	; 0xff
     73e:	4904      	ldr	r1, [pc, #16]	; (750 <calendar_enable+0x20>)
     740:	4b04      	ldr	r3, [pc, #16]	; (754 <calendar_enable+0x24>)
     742:	4798      	blx	r3

	_calendar_enable(&calendar->device);
     744:	0020      	movs	r0, r4
     746:	4b04      	ldr	r3, [pc, #16]	; (758 <calendar_enable+0x28>)
     748:	4798      	blx	r3

	return ERR_NONE;
}
     74a:	2000      	movs	r0, #0
     74c:	bd10      	pop	{r4, pc}
     74e:	46c0      	nop			; (mov r8, r8)
     750:	00002af4 	.word	0x00002af4
     754:	00000ad5 	.word	0x00000ad5
     758:	00000f75 	.word	0x00000f75

0000075c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     75c:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     75e:	4b0c      	ldr	r3, [pc, #48]	; (790 <process_ext_irq+0x34>)
     760:	685c      	ldr	r4, [r3, #4]
     762:	42a0      	cmp	r0, r4
     764:	d00e      	beq.n	784 <process_ext_irq+0x28>
     766:	2201      	movs	r2, #1
     768:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     76a:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     76c:	25ff      	movs	r5, #255	; 0xff
     76e:	e003      	b.n	778 <process_ext_irq+0x1c>
     770:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     772:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     774:	085b      	lsrs	r3, r3, #1
     776:	d10a      	bne.n	78e <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     778:	42a0      	cmp	r0, r4
     77a:	d9f9      	bls.n	770 <process_ext_irq+0x14>
	while (upper >= lower) {
     77c:	2a00      	cmp	r2, #0
     77e:	d006      	beq.n	78e <process_ext_irq+0x32>
			lower = middle + 1;
     780:	0031      	movs	r1, r6
     782:	e7f6      	b.n	772 <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     784:	4b02      	ldr	r3, [pc, #8]	; (790 <process_ext_irq+0x34>)
     786:	681b      	ldr	r3, [r3, #0]
     788:	2b00      	cmp	r3, #0
     78a:	d000      	beq.n	78e <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     78c:	4798      	blx	r3
		}
	}
}
     78e:	bd70      	pop	{r4, r5, r6, pc}
     790:	200000a8 	.word	0x200000a8

00000794 <ext_irq_init>:
{
     794:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     796:	4b05      	ldr	r3, [pc, #20]	; (7ac <ext_irq_init+0x18>)
     798:	2201      	movs	r2, #1
     79a:	4252      	negs	r2, r2
     79c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     79e:	2200      	movs	r2, #0
     7a0:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     7a2:	4803      	ldr	r0, [pc, #12]	; (7b0 <ext_irq_init+0x1c>)
     7a4:	4b03      	ldr	r3, [pc, #12]	; (7b4 <ext_irq_init+0x20>)
     7a6:	4798      	blx	r3
}
     7a8:	bd10      	pop	{r4, pc}
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	200000a8 	.word	0x200000a8
     7b0:	0000075d 	.word	0x0000075d
     7b4:	00000c51 	.word	0x00000c51

000007b8 <ext_irq_register>:
{
     7b8:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     7ba:	4b0f      	ldr	r3, [pc, #60]	; (7f8 <ext_irq_register+0x40>)
     7bc:	685b      	ldr	r3, [r3, #4]
     7be:	4298      	cmp	r0, r3
     7c0:	d008      	beq.n	7d4 <ext_irq_register+0x1c>
	if (NULL == cb) {
     7c2:	2900      	cmp	r1, #0
     7c4:	d014      	beq.n	7f0 <ext_irq_register+0x38>
			if (NULL == ext_irqs[i].cb) {
     7c6:	4b0c      	ldr	r3, [pc, #48]	; (7f8 <ext_irq_register+0x40>)
     7c8:	681b      	ldr	r3, [r3, #0]
     7ca:	2b00      	cmp	r3, #0
     7cc:	d009      	beq.n	7e2 <ext_irq_register+0x2a>
		return ERR_INVALID_ARG;
     7ce:	200d      	movs	r0, #13
     7d0:	4240      	negs	r0, r0
     7d2:	e00c      	b.n	7ee <ext_irq_register+0x36>
			ext_irqs[i].cb = cb;
     7d4:	4b08      	ldr	r3, [pc, #32]	; (7f8 <ext_irq_register+0x40>)
     7d6:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     7d8:	2900      	cmp	r1, #0
     7da:	d105      	bne.n	7e8 <ext_irq_register+0x30>
		return _ext_irq_enable(pin, false);
     7dc:	4b07      	ldr	r3, [pc, #28]	; (7fc <ext_irq_register+0x44>)
     7de:	4798      	blx	r3
     7e0:	e005      	b.n	7ee <ext_irq_register+0x36>
				ext_irqs[i].cb  = cb;
     7e2:	4b05      	ldr	r3, [pc, #20]	; (7f8 <ext_irq_register+0x40>)
     7e4:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     7e6:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     7e8:	2101      	movs	r1, #1
     7ea:	4b04      	ldr	r3, [pc, #16]	; (7fc <ext_irq_register+0x44>)
     7ec:	4798      	blx	r3
}
     7ee:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     7f0:	200d      	movs	r0, #13
     7f2:	4240      	negs	r0, r0
     7f4:	e7fb      	b.n	7ee <ext_irq_register+0x36>
     7f6:	46c0      	nop			; (mov r8, r8)
     7f8:	200000a8 	.word	0x200000a8
     7fc:	00000ce9 	.word	0x00000ce9

00000800 <sleep>:
 * \retval -1 The requested sleep mode was invalid or not available
 * \retval  0 The operation completed successfully, returned after leaving the
 *            sleep
 */
int sleep(const uint8_t mode)
{
     800:	b510      	push	{r4, lr}
	if (ERR_NONE != _set_sleep_mode(mode))
     802:	4b05      	ldr	r3, [pc, #20]	; (818 <sleep+0x18>)
     804:	4798      	blx	r3
     806:	2800      	cmp	r0, #0
     808:	d103      	bne.n	812 <sleep+0x12>
		return ERR_INVALID_ARG;

	_go_to_sleep();
     80a:	4b04      	ldr	r3, [pc, #16]	; (81c <sleep+0x1c>)
     80c:	4798      	blx	r3

	return ERR_NONE;
     80e:	2000      	movs	r0, #0
}
     810:	bd10      	pop	{r4, pc}
		return ERR_INVALID_ARG;
     812:	200d      	movs	r0, #13
     814:	4240      	negs	r0, r0
     816:	e7fb      	b.n	810 <sleep+0x10>
     818:	00000e39 	.word	0x00000e39
     81c:	00000c19 	.word	0x00000c19

00000820 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     820:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     822:	3808      	subs	r0, #8

	descr->stat = 0;
     824:	2300      	movs	r3, #0
     826:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     828:	6a43      	ldr	r3, [r0, #36]	; 0x24
     82a:	2b00      	cmp	r3, #0
     82c:	d000      	beq.n	830 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     82e:	4798      	blx	r3
	}
}
     830:	bd10      	pop	{r4, pc}

00000832 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     832:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     834:	3808      	subs	r0, #8

	descr->stat = 0;
     836:	2300      	movs	r3, #0
     838:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     83a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     83c:	2b00      	cmp	r3, #0
     83e:	d000      	beq.n	842 <usart_error+0x10>
		descr->usart_cb.error(descr);
     840:	4798      	blx	r3
	}
}
     842:	bd10      	pop	{r4, pc}

00000844 <usart_fill_rx_buffer>:
{
     844:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     846:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     848:	302c      	adds	r0, #44	; 0x2c
     84a:	4b04      	ldr	r3, [pc, #16]	; (85c <usart_fill_rx_buffer+0x18>)
     84c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     84e:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     850:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     852:	2b00      	cmp	r3, #0
     854:	d001      	beq.n	85a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     856:	0020      	movs	r0, r4
     858:	4798      	blx	r3
}
     85a:	bd10      	pop	{r4, pc}
     85c:	00000b79 	.word	0x00000b79

00000860 <usart_async_write>:
{
     860:	b570      	push	{r4, r5, r6, lr}
     862:	0004      	movs	r4, r0
     864:	000e      	movs	r6, r1
     866:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     868:	2800      	cmp	r0, #0
     86a:	d01d      	beq.n	8a8 <usart_async_write+0x48>
     86c:	2900      	cmp	r1, #0
     86e:	d01d      	beq.n	8ac <usart_async_write+0x4c>
     870:	0010      	movs	r0, r2
     872:	1e43      	subs	r3, r0, #1
     874:	4198      	sbcs	r0, r3
     876:	223c      	movs	r2, #60	; 0x3c
     878:	32ff      	adds	r2, #255	; 0xff
     87a:	490f      	ldr	r1, [pc, #60]	; (8b8 <usart_async_write+0x58>)
     87c:	4b0f      	ldr	r3, [pc, #60]	; (8bc <usart_async_write+0x5c>)
     87e:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     880:	2344      	movs	r3, #68	; 0x44
     882:	5ae2      	ldrh	r2, [r4, r3]
     884:	3308      	adds	r3, #8
     886:	5ae3      	ldrh	r3, [r4, r3]
     888:	429a      	cmp	r2, r3
     88a:	d111      	bne.n	8b0 <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
     88c:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     88e:	234c      	movs	r3, #76	; 0x4c
     890:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     892:	2200      	movs	r2, #0
     894:	3b08      	subs	r3, #8
     896:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     898:	3b43      	subs	r3, #67	; 0x43
     89a:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     89c:	0020      	movs	r0, r4
     89e:	3008      	adds	r0, #8
     8a0:	4b07      	ldr	r3, [pc, #28]	; (8c0 <usart_async_write+0x60>)
     8a2:	4798      	blx	r3
	return (int32_t)length;
     8a4:	0028      	movs	r0, r5
}
     8a6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     8a8:	2000      	movs	r0, #0
     8aa:	e7e4      	b.n	876 <usart_async_write+0x16>
     8ac:	2000      	movs	r0, #0
     8ae:	e7e2      	b.n	876 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     8b0:	201c      	movs	r0, #28
     8b2:	4240      	negs	r0, r0
     8b4:	e7f7      	b.n	8a6 <usart_async_write+0x46>
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	00002b10 	.word	0x00002b10
     8bc:	00000ad5 	.word	0x00000ad5
     8c0:	00001151 	.word	0x00001151

000008c4 <usart_process_byte_sent>:
{
     8c4:	b570      	push	{r4, r5, r6, lr}
     8c6:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     8c8:	0001      	movs	r1, r0
     8ca:	3908      	subs	r1, #8
     8cc:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     8ce:	224c      	movs	r2, #76	; 0x4c
     8d0:	5a8a      	ldrh	r2, [r1, r2]
     8d2:	429a      	cmp	r2, r3
     8d4:	d00c      	beq.n	8f0 <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     8d6:	000a      	movs	r2, r1
     8d8:	6c89      	ldr	r1, [r1, #72]	; 0x48
     8da:	1c5d      	adds	r5, r3, #1
     8dc:	2044      	movs	r0, #68	; 0x44
     8de:	5215      	strh	r5, [r2, r0]
     8e0:	5cc9      	ldrb	r1, [r1, r3]
     8e2:	0020      	movs	r0, r4
     8e4:	4b04      	ldr	r3, [pc, #16]	; (8f8 <usart_process_byte_sent+0x34>)
     8e6:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     8e8:	0020      	movs	r0, r4
     8ea:	4b04      	ldr	r3, [pc, #16]	; (8fc <usart_process_byte_sent+0x38>)
     8ec:	4798      	blx	r3
}
     8ee:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     8f0:	4b03      	ldr	r3, [pc, #12]	; (900 <usart_process_byte_sent+0x3c>)
     8f2:	4798      	blx	r3
}
     8f4:	e7fb      	b.n	8ee <usart_process_byte_sent+0x2a>
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	00001149 	.word	0x00001149
     8fc:	00001151 	.word	0x00001151
     900:	00001159 	.word	0x00001159

00000904 <usart_async_read>:
{
     904:	b5f0      	push	{r4, r5, r6, r7, lr}
     906:	46ce      	mov	lr, r9
     908:	4647      	mov	r7, r8
     90a:	b580      	push	{r7, lr}
     90c:	b085      	sub	sp, #20
     90e:	0005      	movs	r5, r0
     910:	000e      	movs	r6, r1
     912:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
     914:	2800      	cmp	r0, #0
     916:	d015      	beq.n	944 <usart_async_read+0x40>
     918:	2900      	cmp	r1, #0
     91a:	d013      	beq.n	944 <usart_async_read+0x40>
     91c:	2a00      	cmp	r2, #0
     91e:	d12a      	bne.n	976 <usart_async_read+0x72>
     920:	22ac      	movs	r2, #172	; 0xac
     922:	0052      	lsls	r2, r2, #1
     924:	4929      	ldr	r1, [pc, #164]	; (9cc <usart_async_read+0xc8>)
     926:	2000      	movs	r0, #0
     928:	4b29      	ldr	r3, [pc, #164]	; (9d0 <usart_async_read+0xcc>)
     92a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     92c:	a803      	add	r0, sp, #12
     92e:	4b29      	ldr	r3, [pc, #164]	; (9d4 <usart_async_read+0xd0>)
     930:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     932:	0028      	movs	r0, r5
     934:	3034      	adds	r0, #52	; 0x34
     936:	4b28      	ldr	r3, [pc, #160]	; (9d8 <usart_async_read+0xd4>)
     938:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     93a:	a803      	add	r0, sp, #12
     93c:	4b27      	ldr	r3, [pc, #156]	; (9dc <usart_async_read+0xd8>)
     93e:	4798      	blx	r3
	uint16_t                       was_read = 0;
     940:	2500      	movs	r5, #0
	return (int32_t)was_read;
     942:	e03c      	b.n	9be <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     944:	22ac      	movs	r2, #172	; 0xac
     946:	0052      	lsls	r2, r2, #1
     948:	4920      	ldr	r1, [pc, #128]	; (9cc <usart_async_read+0xc8>)
     94a:	2000      	movs	r0, #0
     94c:	4b20      	ldr	r3, [pc, #128]	; (9d0 <usart_async_read+0xcc>)
     94e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     950:	a803      	add	r0, sp, #12
     952:	4b20      	ldr	r3, [pc, #128]	; (9d4 <usart_async_read+0xd0>)
     954:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     956:	3534      	adds	r5, #52	; 0x34
     958:	0028      	movs	r0, r5
     95a:	9501      	str	r5, [sp, #4]
     95c:	4b1e      	ldr	r3, [pc, #120]	; (9d8 <usart_async_read+0xd4>)
     95e:	4798      	blx	r3
     960:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     962:	a803      	add	r0, sp, #12
     964:	4b1d      	ldr	r3, [pc, #116]	; (9dc <usart_async_read+0xd8>)
     966:	4798      	blx	r3
	uint16_t                       was_read = 0;
     968:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     96a:	4643      	mov	r3, r8
     96c:	2b00      	cmp	r3, #0
     96e:	d026      	beq.n	9be <usart_async_read+0xba>
     970:	2f00      	cmp	r7, #0
     972:	d116      	bne.n	9a2 <usart_async_read+0x9e>
     974:	e023      	b.n	9be <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     976:	22ac      	movs	r2, #172	; 0xac
     978:	0052      	lsls	r2, r2, #1
     97a:	4914      	ldr	r1, [pc, #80]	; (9cc <usart_async_read+0xc8>)
     97c:	2001      	movs	r0, #1
     97e:	4b14      	ldr	r3, [pc, #80]	; (9d0 <usart_async_read+0xcc>)
     980:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     982:	a803      	add	r0, sp, #12
     984:	4b13      	ldr	r3, [pc, #76]	; (9d4 <usart_async_read+0xd0>)
     986:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     988:	3534      	adds	r5, #52	; 0x34
     98a:	0028      	movs	r0, r5
     98c:	9501      	str	r5, [sp, #4]
     98e:	4b12      	ldr	r3, [pc, #72]	; (9d8 <usart_async_read+0xd4>)
     990:	4798      	blx	r3
     992:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     994:	a803      	add	r0, sp, #12
     996:	4b11      	ldr	r3, [pc, #68]	; (9dc <usart_async_read+0xd8>)
     998:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     99a:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
     99c:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     99e:	2b00      	cmp	r3, #0
     9a0:	d00d      	beq.n	9be <usart_async_read+0xba>
{
     9a2:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     9a4:	4b0e      	ldr	r3, [pc, #56]	; (9e0 <usart_async_read+0xdc>)
     9a6:	4699      	mov	r9, r3
     9a8:	1c65      	adds	r5, r4, #1
     9aa:	b2ad      	uxth	r5, r5
     9ac:	1931      	adds	r1, r6, r4
     9ae:	9801      	ldr	r0, [sp, #4]
     9b0:	47c8      	blx	r9
     9b2:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     9b4:	4544      	cmp	r4, r8
     9b6:	d202      	bcs.n	9be <usart_async_read+0xba>
     9b8:	b2a3      	uxth	r3, r4
     9ba:	429f      	cmp	r7, r3
     9bc:	d8f4      	bhi.n	9a8 <usart_async_read+0xa4>
}
     9be:	0028      	movs	r0, r5
     9c0:	b005      	add	sp, #20
     9c2:	bc0c      	pop	{r2, r3}
     9c4:	4690      	mov	r8, r2
     9c6:	4699      	mov	r9, r3
     9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9ca:	46c0      	nop			; (mov r8, r8)
     9cc:	00002b10 	.word	0x00002b10
     9d0:	00000ad5 	.word	0x00000ad5
     9d4:	000006cd 	.word	0x000006cd
     9d8:	00000bb9 	.word	0x00000bb9
     9dc:	000006db 	.word	0x000006db
     9e0:	00000b31 	.word	0x00000b31

000009e4 <usart_async_init>:
{
     9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9e6:	0004      	movs	r4, r0
     9e8:	000d      	movs	r5, r1
     9ea:	0016      	movs	r6, r2
     9ec:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     9ee:	2800      	cmp	r0, #0
     9f0:	d026      	beq.n	a40 <usart_async_init+0x5c>
     9f2:	2900      	cmp	r1, #0
     9f4:	d026      	beq.n	a44 <usart_async_init+0x60>
     9f6:	2a00      	cmp	r2, #0
     9f8:	d026      	beq.n	a48 <usart_async_init+0x64>
     9fa:	0018      	movs	r0, r3
     9fc:	1e43      	subs	r3, r0, #1
     9fe:	4198      	sbcs	r0, r3
     a00:	223a      	movs	r2, #58	; 0x3a
     a02:	4914      	ldr	r1, [pc, #80]	; (a54 <usart_async_init+0x70>)
     a04:	4b14      	ldr	r3, [pc, #80]	; (a58 <usart_async_init+0x74>)
     a06:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     a08:	0020      	movs	r0, r4
     a0a:	3034      	adds	r0, #52	; 0x34
     a0c:	003a      	movs	r2, r7
     a0e:	0031      	movs	r1, r6
     a10:	4b12      	ldr	r3, [pc, #72]	; (a5c <usart_async_init+0x78>)
     a12:	4798      	blx	r3
     a14:	2800      	cmp	r0, #0
     a16:	d119      	bne.n	a4c <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
     a18:	0020      	movs	r0, r4
     a1a:	3008      	adds	r0, #8
     a1c:	0029      	movs	r1, r5
     a1e:	4b10      	ldr	r3, [pc, #64]	; (a60 <usart_async_init+0x7c>)
     a20:	4798      	blx	r3
	if (init_status) {
     a22:	2800      	cmp	r0, #0
     a24:	d10b      	bne.n	a3e <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     a26:	4b0f      	ldr	r3, [pc, #60]	; (a64 <usart_async_init+0x80>)
     a28:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     a2a:	4b0f      	ldr	r3, [pc, #60]	; (a68 <usart_async_init+0x84>)
     a2c:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     a2e:	4b0f      	ldr	r3, [pc, #60]	; (a6c <usart_async_init+0x88>)
     a30:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     a32:	4b0f      	ldr	r3, [pc, #60]	; (a70 <usart_async_init+0x8c>)
     a34:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     a36:	4b0f      	ldr	r3, [pc, #60]	; (a74 <usart_async_init+0x90>)
     a38:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     a3a:	4b0f      	ldr	r3, [pc, #60]	; (a78 <usart_async_init+0x94>)
     a3c:	6163      	str	r3, [r4, #20]
}
     a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     a40:	2000      	movs	r0, #0
     a42:	e7dd      	b.n	a00 <usart_async_init+0x1c>
     a44:	2000      	movs	r0, #0
     a46:	e7db      	b.n	a00 <usart_async_init+0x1c>
     a48:	2000      	movs	r0, #0
     a4a:	e7d9      	b.n	a00 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     a4c:	200d      	movs	r0, #13
     a4e:	4240      	negs	r0, r0
     a50:	e7f5      	b.n	a3e <usart_async_init+0x5a>
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	00002b10 	.word	0x00002b10
     a58:	00000ad5 	.word	0x00000ad5
     a5c:	00000add 	.word	0x00000add
     a60:	000010a5 	.word	0x000010a5
     a64:	00000905 	.word	0x00000905
     a68:	00000861 	.word	0x00000861
     a6c:	000008c5 	.word	0x000008c5
     a70:	00000845 	.word	0x00000845
     a74:	00000821 	.word	0x00000821
     a78:	00000833 	.word	0x00000833

00000a7c <usart_async_enable>:
{
     a7c:	b510      	push	{r4, lr}
     a7e:	0004      	movs	r4, r0
	ASSERT(descr);
     a80:	1e43      	subs	r3, r0, #1
     a82:	4198      	sbcs	r0, r3
     a84:	b2c0      	uxtb	r0, r0
     a86:	2261      	movs	r2, #97	; 0x61
     a88:	4904      	ldr	r1, [pc, #16]	; (a9c <usart_async_enable+0x20>)
     a8a:	4b05      	ldr	r3, [pc, #20]	; (aa0 <usart_async_enable+0x24>)
     a8c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     a8e:	0020      	movs	r0, r4
     a90:	3008      	adds	r0, #8
     a92:	4b04      	ldr	r3, [pc, #16]	; (aa4 <usart_async_enable+0x28>)
     a94:	4798      	blx	r3
}
     a96:	2000      	movs	r0, #0
     a98:	bd10      	pop	{r4, pc}
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	00002b10 	.word	0x00002b10
     aa0:	00000ad5 	.word	0x00000ad5
     aa4:	00001121 	.word	0x00001121

00000aa8 <usart_async_disable>:
{
     aa8:	b510      	push	{r4, lr}
     aaa:	0004      	movs	r4, r0
	ASSERT(descr);
     aac:	1e43      	subs	r3, r0, #1
     aae:	4198      	sbcs	r0, r3
     ab0:	b2c0      	uxtb	r0, r0
     ab2:	226c      	movs	r2, #108	; 0x6c
     ab4:	4904      	ldr	r1, [pc, #16]	; (ac8 <usart_async_disable+0x20>)
     ab6:	4b05      	ldr	r3, [pc, #20]	; (acc <usart_async_disable+0x24>)
     ab8:	4798      	blx	r3
	_usart_async_disable(&descr->device);
     aba:	0020      	movs	r0, r4
     abc:	3008      	adds	r0, #8
     abe:	4b04      	ldr	r3, [pc, #16]	; (ad0 <usart_async_disable+0x28>)
     ac0:	4798      	blx	r3
}
     ac2:	2000      	movs	r0, #0
     ac4:	bd10      	pop	{r4, pc}
     ac6:	46c0      	nop			; (mov r8, r8)
     ac8:	00002b10 	.word	0x00002b10
     acc:	00000ad5 	.word	0x00000ad5
     ad0:	00001135 	.word	0x00001135

00000ad4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     ad4:	2800      	cmp	r0, #0
     ad6:	d100      	bne.n	ada <assert+0x6>
		__asm("BKPT #0");
     ad8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     ada:	4770      	bx	lr

00000adc <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     adc:	b570      	push	{r4, r5, r6, lr}
     ade:	0004      	movs	r4, r0
     ae0:	000e      	movs	r6, r1
     ae2:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     ae4:	2800      	cmp	r0, #0
     ae6:	d00b      	beq.n	b00 <ringbuffer_init+0x24>
     ae8:	2900      	cmp	r1, #0
     aea:	d018      	beq.n	b1e <ringbuffer_init+0x42>
     aec:	2001      	movs	r0, #1
     aee:	2a00      	cmp	r2, #0
     af0:	d107      	bne.n	b02 <ringbuffer_init+0x26>
     af2:	2228      	movs	r2, #40	; 0x28
     af4:	490c      	ldr	r1, [pc, #48]	; (b28 <ringbuffer_init+0x4c>)
     af6:	2000      	movs	r0, #0
     af8:	4b0c      	ldr	r3, [pc, #48]	; (b2c <ringbuffer_init+0x50>)
     afa:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     afc:	1e6b      	subs	r3, r5, #1
     afe:	e007      	b.n	b10 <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
     b00:	2000      	movs	r0, #0
     b02:	2228      	movs	r2, #40	; 0x28
     b04:	4908      	ldr	r1, [pc, #32]	; (b28 <ringbuffer_init+0x4c>)
     b06:	4b09      	ldr	r3, [pc, #36]	; (b2c <ringbuffer_init+0x50>)
     b08:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
     b0a:	1e6b      	subs	r3, r5, #1
     b0c:	422b      	tst	r3, r5
     b0e:	d108      	bne.n	b22 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     b10:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     b12:	2300      	movs	r3, #0
     b14:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     b16:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     b18:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     b1a:	2000      	movs	r0, #0
}
     b1c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     b1e:	2000      	movs	r0, #0
     b20:	e7ef      	b.n	b02 <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
     b22:	200d      	movs	r0, #13
     b24:	4240      	negs	r0, r0
     b26:	e7f9      	b.n	b1c <ringbuffer_init+0x40>
     b28:	00002b30 	.word	0x00002b30
     b2c:	00000ad5 	.word	0x00000ad5

00000b30 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     b30:	b570      	push	{r4, r5, r6, lr}
     b32:	0004      	movs	r4, r0
     b34:	000d      	movs	r5, r1
	ASSERT(rb && data);
     b36:	2800      	cmp	r0, #0
     b38:	d015      	beq.n	b66 <ringbuffer_get+0x36>
     b3a:	0008      	movs	r0, r1
     b3c:	1e43      	subs	r3, r0, #1
     b3e:	4198      	sbcs	r0, r3
     b40:	b2c0      	uxtb	r0, r0
     b42:	2240      	movs	r2, #64	; 0x40
     b44:	490a      	ldr	r1, [pc, #40]	; (b70 <ringbuffer_get+0x40>)
     b46:	4b0b      	ldr	r3, [pc, #44]	; (b74 <ringbuffer_get+0x44>)
     b48:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     b4a:	68a3      	ldr	r3, [r4, #8]
     b4c:	68e2      	ldr	r2, [r4, #12]
     b4e:	429a      	cmp	r2, r3
     b50:	d00b      	beq.n	b6a <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
     b52:	6862      	ldr	r2, [r4, #4]
     b54:	4013      	ands	r3, r2
     b56:	6822      	ldr	r2, [r4, #0]
     b58:	5cd3      	ldrb	r3, [r2, r3]
     b5a:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     b5c:	68a3      	ldr	r3, [r4, #8]
     b5e:	3301      	adds	r3, #1
     b60:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     b62:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     b64:	bd70      	pop	{r4, r5, r6, pc}
     b66:	2000      	movs	r0, #0
     b68:	e7eb      	b.n	b42 <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
     b6a:	200a      	movs	r0, #10
     b6c:	4240      	negs	r0, r0
     b6e:	e7f9      	b.n	b64 <ringbuffer_get+0x34>
     b70:	00002b30 	.word	0x00002b30
     b74:	00000ad5 	.word	0x00000ad5

00000b78 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     b78:	b570      	push	{r4, r5, r6, lr}
     b7a:	0004      	movs	r4, r0
     b7c:	000d      	movs	r5, r1
	ASSERT(rb);
     b7e:	1e43      	subs	r3, r0, #1
     b80:	4198      	sbcs	r0, r3
     b82:	b2c0      	uxtb	r0, r0
     b84:	2251      	movs	r2, #81	; 0x51
     b86:	490a      	ldr	r1, [pc, #40]	; (bb0 <ringbuffer_put+0x38>)
     b88:	4b0a      	ldr	r3, [pc, #40]	; (bb4 <ringbuffer_put+0x3c>)
     b8a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     b8c:	6863      	ldr	r3, [r4, #4]
     b8e:	68e2      	ldr	r2, [r4, #12]
     b90:	4013      	ands	r3, r2
     b92:	6822      	ldr	r2, [r4, #0]
     b94:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     b96:	68e3      	ldr	r3, [r4, #12]
     b98:	6861      	ldr	r1, [r4, #4]
     b9a:	68a2      	ldr	r2, [r4, #8]
     b9c:	1a9a      	subs	r2, r3, r2
     b9e:	428a      	cmp	r2, r1
     ba0:	d901      	bls.n	ba6 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     ba2:	1a59      	subs	r1, r3, r1
     ba4:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     ba6:	3301      	adds	r3, #1
     ba8:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     baa:	2000      	movs	r0, #0
     bac:	bd70      	pop	{r4, r5, r6, pc}
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	00002b30 	.word	0x00002b30
     bb4:	00000ad5 	.word	0x00000ad5

00000bb8 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     bb8:	b510      	push	{r4, lr}
     bba:	0004      	movs	r4, r0
	ASSERT(rb);
     bbc:	1e43      	subs	r3, r0, #1
     bbe:	4198      	sbcs	r0, r3
     bc0:	b2c0      	uxtb	r0, r0
     bc2:	2267      	movs	r2, #103	; 0x67
     bc4:	4903      	ldr	r1, [pc, #12]	; (bd4 <ringbuffer_num+0x1c>)
     bc6:	4b04      	ldr	r3, [pc, #16]	; (bd8 <ringbuffer_num+0x20>)
     bc8:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     bca:	68e0      	ldr	r0, [r4, #12]
     bcc:	68a3      	ldr	r3, [r4, #8]
     bce:	1ac0      	subs	r0, r0, r3
}
     bd0:	bd10      	pop	{r4, pc}
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	00002b30 	.word	0x00002b30
     bd8:	00000ad5 	.word	0x00000ad5

00000bdc <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     bdc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     bde:	4a06      	ldr	r2, [pc, #24]	; (bf8 <_sbrk+0x1c>)
     be0:	6812      	ldr	r2, [r2, #0]
     be2:	2a00      	cmp	r2, #0
     be4:	d004      	beq.n	bf0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     be6:	4a04      	ldr	r2, [pc, #16]	; (bf8 <_sbrk+0x1c>)
     be8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     bea:	18c3      	adds	r3, r0, r3
     bec:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     bee:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     bf0:	4902      	ldr	r1, [pc, #8]	; (bfc <_sbrk+0x20>)
     bf2:	4a01      	ldr	r2, [pc, #4]	; (bf8 <_sbrk+0x1c>)
     bf4:	6011      	str	r1, [r2, #0]
     bf6:	e7f6      	b.n	be6 <_sbrk+0xa>
     bf8:	200000b0 	.word	0x200000b0
     bfc:	20002258 	.word	0x20002258

00000c00 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     c00:	2001      	movs	r0, #1
     c02:	4240      	negs	r0, r0
     c04:	4770      	bx	lr

00000c06 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     c06:	2380      	movs	r3, #128	; 0x80
     c08:	019b      	lsls	r3, r3, #6
     c0a:	604b      	str	r3, [r1, #4]

	return 0;
}
     c0c:	2000      	movs	r0, #0
     c0e:	4770      	bx	lr

00000c10 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     c10:	2001      	movs	r0, #1
     c12:	4770      	bx	lr

00000c14 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     c14:	2000      	movs	r0, #0
     c16:	4770      	bx	lr

00000c18 <_go_to_sleep>:
  __ASM volatile ("dsb 0xF":::"memory");
     c18:	f3bf 8f4f 	dsb	sy
 * \brief Put MCU to sleep
 */
void _go_to_sleep(void)
{
	__DSB();
	__WFI();
     c1c:	bf30      	wfi
}
     c1e:	4770      	bx	lr

00000c20 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     c20:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     c22:	4b06      	ldr	r3, [pc, #24]	; (c3c <_init_chip+0x1c>)
     c24:	685a      	ldr	r2, [r3, #4]
     c26:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     c28:	4b05      	ldr	r3, [pc, #20]	; (c40 <_init_chip+0x20>)
     c2a:	4798      	blx	r3
	_sysctrl_init_sources();
     c2c:	4b05      	ldr	r3, [pc, #20]	; (c44 <_init_chip+0x24>)
     c2e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     c30:	4b05      	ldr	r3, [pc, #20]	; (c48 <_init_chip+0x28>)
     c32:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     c34:	20ff      	movs	r0, #255	; 0xff
     c36:	4b05      	ldr	r3, [pc, #20]	; (c4c <_init_chip+0x2c>)
     c38:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     c3a:	bd10      	pop	{r4, pc}
     c3c:	41004000 	.word	0x41004000
     c40:	00000e71 	.word	0x00000e71
     c44:	00001241 	.word	0x00001241
     c48:	00001285 	.word	0x00001285
     c4c:	00000dfd 	.word	0x00000dfd

00000c50 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c50:	4a22      	ldr	r2, [pc, #136]	; (cdc <_ext_irq_init+0x8c>)
     c52:	7853      	ldrb	r3, [r2, #1]
     c54:	09db      	lsrs	r3, r3, #7
     c56:	d1fc      	bne.n	c52 <_ext_irq_init+0x2>
     c58:	4a20      	ldr	r2, [pc, #128]	; (cdc <_ext_irq_init+0x8c>)
     c5a:	7853      	ldrb	r3, [r2, #1]
     c5c:	09db      	lsrs	r3, r3, #7
     c5e:	d1fc      	bne.n	c5a <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     c60:	4b1e      	ldr	r3, [pc, #120]	; (cdc <_ext_irq_init+0x8c>)
     c62:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     c64:	079b      	lsls	r3, r3, #30
     c66:	d50a      	bpl.n	c7e <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     c68:	2200      	movs	r2, #0
     c6a:	4b1c      	ldr	r3, [pc, #112]	; (cdc <_ext_irq_init+0x8c>)
     c6c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c6e:	001a      	movs	r2, r3
     c70:	7853      	ldrb	r3, [r2, #1]
     c72:	09db      	lsrs	r3, r3, #7
     c74:	d1fc      	bne.n	c70 <_ext_irq_init+0x20>
     c76:	4a19      	ldr	r2, [pc, #100]	; (cdc <_ext_irq_init+0x8c>)
     c78:	7853      	ldrb	r3, [r2, #1]
     c7a:	09db      	lsrs	r3, r3, #7
     c7c:	d1fc      	bne.n	c78 <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
     c7e:	2201      	movs	r2, #1
     c80:	4b16      	ldr	r3, [pc, #88]	; (cdc <_ext_irq_init+0x8c>)
     c82:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c84:	001a      	movs	r2, r3
     c86:	7853      	ldrb	r3, [r2, #1]
     c88:	09db      	lsrs	r3, r3, #7
     c8a:	d1fc      	bne.n	c86 <_ext_irq_init+0x36>
     c8c:	4a13      	ldr	r2, [pc, #76]	; (cdc <_ext_irq_init+0x8c>)
     c8e:	7853      	ldrb	r3, [r2, #1]
     c90:	09db      	lsrs	r3, r3, #7
     c92:	d1fc      	bne.n	c8e <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     c94:	4b11      	ldr	r3, [pc, #68]	; (cdc <_ext_irq_init+0x8c>)
     c96:	2200      	movs	r2, #0
     c98:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     c9a:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     c9c:	2180      	movs	r1, #128	; 0x80
     c9e:	0209      	lsls	r1, r1, #8
     ca0:	6159      	str	r1, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     ca2:	619a      	str	r2, [r3, #24]
     ca4:	22a0      	movs	r2, #160	; 0xa0
     ca6:	0612      	lsls	r2, r2, #24
     ca8:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     caa:	781a      	ldrb	r2, [r3, #0]
     cac:	2102      	movs	r1, #2
     cae:	430a      	orrs	r2, r1
     cb0:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     cb2:	001a      	movs	r2, r3
     cb4:	7853      	ldrb	r3, [r2, #1]
     cb6:	09db      	lsrs	r3, r3, #7
     cb8:	d1fc      	bne.n	cb4 <_ext_irq_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     cba:	4b09      	ldr	r3, [pc, #36]	; (ce0 <_ext_irq_init+0x90>)
     cbc:	2210      	movs	r2, #16
     cbe:	2180      	movs	r1, #128	; 0x80
     cc0:	505a      	str	r2, [r3, r1]
     cc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     cc6:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     cca:	3101      	adds	r1, #1
     ccc:	31ff      	adds	r1, #255	; 0xff
     cce:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     cd0:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     cd2:	4b04      	ldr	r3, [pc, #16]	; (ce4 <_ext_irq_init+0x94>)
     cd4:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     cd6:	2000      	movs	r0, #0
     cd8:	4770      	bx	lr
     cda:	46c0      	nop			; (mov r8, r8)
     cdc:	40001800 	.word	0x40001800
     ce0:	e000e100 	.word	0xe000e100
     ce4:	200000b4 	.word	0x200000b4

00000ce8 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
     ce8:	280f      	cmp	r0, #15
     cea:	d002      	beq.n	cf2 <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
     cec:	200d      	movs	r0, #13
     cee:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
     cf0:	4770      	bx	lr
	if (enable) {
     cf2:	2900      	cmp	r1, #0
     cf4:	d106      	bne.n	d04 <_ext_irq_enable+0x1c>
	((Eic *)hw)->INTENCLR.reg = mask;
     cf6:	4b06      	ldr	r3, [pc, #24]	; (d10 <_ext_irq_enable+0x28>)
     cf8:	2280      	movs	r2, #128	; 0x80
     cfa:	0212      	lsls	r2, r2, #8
     cfc:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     cfe:	611a      	str	r2, [r3, #16]
	return ERR_NONE;
     d00:	2000      	movs	r0, #0
     d02:	e7f5      	b.n	cf0 <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
     d04:	2280      	movs	r2, #128	; 0x80
     d06:	0212      	lsls	r2, r2, #8
     d08:	4b01      	ldr	r3, [pc, #4]	; (d10 <_ext_irq_enable+0x28>)
     d0a:	60da      	str	r2, [r3, #12]
     d0c:	2000      	movs	r0, #0
     d0e:	e7ef      	b.n	cf0 <_ext_irq_enable+0x8>
     d10:	40001800 	.word	0x40001800

00000d14 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     d14:	b5f0      	push	{r4, r5, r6, r7, lr}
     d16:	46ce      	mov	lr, r9
     d18:	4647      	mov	r7, r8
     d1a:	b580      	push	{r7, lr}
     d1c:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
     d1e:	4b31      	ldr	r3, [pc, #196]	; (de4 <EIC_Handler+0xd0>)
     d20:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     d22:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     d24:	400a      	ands	r2, r1
     d26:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     d28:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     d2a:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     d2c:	4b2e      	ldr	r3, [pc, #184]	; (de8 <EIC_Handler+0xd4>)
     d2e:	6818      	ldr	r0, [r3, #0]
     d30:	1e43      	subs	r3, r0, #1
     d32:	4198      	sbcs	r0, r3
     d34:	b2c0      	uxtb	r0, r0
     d36:	22d2      	movs	r2, #210	; 0xd2
     d38:	492c      	ldr	r1, [pc, #176]	; (dec <EIC_Handler+0xd8>)
     d3a:	4b2d      	ldr	r3, [pc, #180]	; (df0 <EIC_Handler+0xdc>)
     d3c:	4798      	blx	r3

	while (flags) {
     d3e:	9b01      	ldr	r3, [sp, #4]
     d40:	2b00      	cmp	r3, #0
     d42:	d049      	beq.n	dd8 <EIC_Handler+0xc4>
     d44:	2301      	movs	r3, #1
     d46:	425b      	negs	r3, r3
     d48:	4699      	mov	r9, r3
		pos = ffs(flags) - 1;
     d4a:	4b2a      	ldr	r3, [pc, #168]	; (df4 <EIC_Handler+0xe0>)
     d4c:	4698      	mov	r8, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
     d4e:	4f26      	ldr	r7, [pc, #152]	; (de8 <EIC_Handler+0xd4>)
				if (_map[middle].extint == pos) {
     d50:	4d29      	ldr	r5, [pc, #164]	; (df8 <EIC_Handler+0xe4>)
     d52:	e03a      	b.n	dca <EIC_Handler+0xb6>
					upper = middle - 1;
     d54:	3a01      	subs	r2, #1
     d56:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
     d58:	42b1      	cmp	r1, r6
     d5a:	d80c      	bhi.n	d76 <EIC_Handler+0x62>
				middle = (upper + lower) >> 1;
     d5c:	1873      	adds	r3, r6, r1
     d5e:	105b      	asrs	r3, r3, #1
     d60:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
     d62:	4003      	ands	r3, r0
     d64:	00db      	lsls	r3, r3, #3
     d66:	5d5b      	ldrb	r3, [r3, r5]
     d68:	42a3      	cmp	r3, r4
     d6a:	d008      	beq.n	d7e <EIC_Handler+0x6a>
				if (_map[middle].extint < pos) {
     d6c:	429c      	cmp	r4, r3
     d6e:	ddf1      	ble.n	d54 <EIC_Handler+0x40>
					lower = middle + 1;
     d70:	3201      	adds	r2, #1
     d72:	b2d1      	uxtb	r1, r2
     d74:	e7f0      	b.n	d58 <EIC_Handler+0x44>
			if (INVALID_PIN_NUMBER != pin) {
     d76:	464b      	mov	r3, r9
     d78:	3301      	adds	r3, #1
     d7a:	d005      	beq.n	d88 <EIC_Handler+0x74>
     d7c:	e001      	b.n	d82 <EIC_Handler+0x6e>
     d7e:	230f      	movs	r3, #15
     d80:	4699      	mov	r9, r3
				callback(pin);
     d82:	4648      	mov	r0, r9
     d84:	683b      	ldr	r3, [r7, #0]
     d86:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     d88:	9b01      	ldr	r3, [sp, #4]
     d8a:	2201      	movs	r2, #1
     d8c:	40a2      	lsls	r2, r4
     d8e:	4393      	bics	r3, r2
     d90:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     d92:	9801      	ldr	r0, [sp, #4]
     d94:	4b17      	ldr	r3, [pc, #92]	; (df4 <EIC_Handler+0xe0>)
     d96:	4798      	blx	r3
     d98:	3801      	subs	r0, #1
     d9a:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     d9c:	1c63      	adds	r3, r4, #1
     d9e:	d00a      	beq.n	db6 <EIC_Handler+0xa2>
				if (_map[middle].extint == pos) {
     da0:	2c0f      	cmp	r4, #15
     da2:	d005      	beq.n	db0 <EIC_Handler+0x9c>
     da4:	230f      	movs	r3, #15
     da6:	2200      	movs	r2, #0
     da8:	2601      	movs	r6, #1
     daa:	2100      	movs	r1, #0
     dac:	20ff      	movs	r0, #255	; 0xff
     dae:	e7dd      	b.n	d6c <EIC_Handler+0x58>
     db0:	230f      	movs	r3, #15
     db2:	4699      	mov	r9, r3
     db4:	e7e5      	b.n	d82 <EIC_Handler+0x6e>
	return ((Eic *)hw)->INTFLAG.reg;
     db6:	4b0b      	ldr	r3, [pc, #44]	; (de4 <EIC_Handler+0xd0>)
     db8:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     dba:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     dbc:	400a      	ands	r2, r1
     dbe:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     dc0:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     dc2:	611a      	str	r2, [r3, #16]
	while (flags) {
     dc4:	9b01      	ldr	r3, [sp, #4]
     dc6:	2b00      	cmp	r3, #0
     dc8:	d006      	beq.n	dd8 <EIC_Handler+0xc4>
		pos = ffs(flags) - 1;
     dca:	9801      	ldr	r0, [sp, #4]
     dcc:	47c0      	blx	r8
     dce:	3801      	subs	r0, #1
     dd0:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     dd2:	1c63      	adds	r3, r4, #1
     dd4:	d1e4      	bne.n	da0 <EIC_Handler+0x8c>
     dd6:	e7ee      	b.n	db6 <EIC_Handler+0xa2>
	}
}
     dd8:	b003      	add	sp, #12
     dda:	bc0c      	pop	{r2, r3}
     ddc:	4690      	mov	r8, r2
     dde:	4699      	mov	r9, r3
     de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	40001800 	.word	0x40001800
     de8:	200000b4 	.word	0x200000b4
     dec:	00002b5c 	.word	0x00002b5c
     df0:	00000ad5 	.word	0x00000ad5
     df4:	00001ad1 	.word	0x00001ad1
     df8:	00002b54 	.word	0x00002b54

00000dfc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     dfc:	07c3      	lsls	r3, r0, #31
     dfe:	d50a      	bpl.n	e16 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     e00:	4b0b      	ldr	r3, [pc, #44]	; (e30 <_gclk_init_generators_by_fref+0x34>)
     e02:	2280      	movs	r2, #128	; 0x80
     e04:	0052      	lsls	r2, r2, #1
     e06:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     e08:	2283      	movs	r2, #131	; 0x83
     e0a:	0252      	lsls	r2, r2, #9
     e0c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     e0e:	001a      	movs	r2, r3
     e10:	7853      	ldrb	r3, [r2, #1]
     e12:	09db      	lsrs	r3, r3, #7
     e14:	d1fc      	bne.n	e10 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     e16:	0703      	lsls	r3, r0, #28
     e18:	d509      	bpl.n	e2e <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
     e1a:	4b05      	ldr	r3, [pc, #20]	; (e30 <_gclk_init_generators_by_fref+0x34>)
     e1c:	2204      	movs	r2, #4
     e1e:	32ff      	adds	r2, #255	; 0xff
     e20:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     e22:	4a04      	ldr	r2, [pc, #16]	; (e34 <_gclk_init_generators_by_fref+0x38>)
     e24:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     e26:	001a      	movs	r2, r3
     e28:	7853      	ldrb	r3, [r2, #1]
     e2a:	09db      	lsrs	r3, r3, #7
     e2c:	d1fc      	bne.n	e28 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     e2e:	4770      	bx	lr
     e30:	40000c00 	.word	0x40000c00
     e34:	00210303 	.word	0x00210303

00000e38 <_set_sleep_mode>:
/**
 * \brief Set the sleep mode for the device
 */
int32_t _set_sleep_mode(const uint8_t mode)
{
	switch (mode) {
     e38:	2802      	cmp	r0, #2
     e3a:	d904      	bls.n	e46 <_set_sleep_mode+0xe>
     e3c:	2803      	cmp	r0, #3
     e3e:	d00b      	beq.n	e58 <_set_sleep_mode+0x20>
		return ERR_NONE;
	case 3:
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
		return ERR_NONE;
	default:
		return ERR_INVALID_ARG;
     e40:	200d      	movs	r0, #13
     e42:	4240      	negs	r0, r0
     e44:	e007      	b.n	e56 <_set_sleep_mode+0x1e>
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
     e46:	4a08      	ldr	r2, [pc, #32]	; (e68 <_set_sleep_mode+0x30>)
     e48:	6913      	ldr	r3, [r2, #16]
     e4a:	2104      	movs	r1, #4
     e4c:	438b      	bics	r3, r1
     e4e:	6113      	str	r3, [r2, #16]
		PM->SLEEP.reg = mode;
     e50:	4b06      	ldr	r3, [pc, #24]	; (e6c <_set_sleep_mode+0x34>)
     e52:	7058      	strb	r0, [r3, #1]
		return ERR_NONE;
     e54:	2000      	movs	r0, #0
	}
}
     e56:	4770      	bx	lr
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
     e58:	4a03      	ldr	r2, [pc, #12]	; (e68 <_set_sleep_mode+0x30>)
     e5a:	6913      	ldr	r3, [r2, #16]
     e5c:	2104      	movs	r1, #4
     e5e:	430b      	orrs	r3, r1
     e60:	6113      	str	r3, [r2, #16]
		return ERR_NONE;
     e62:	2000      	movs	r0, #0
     e64:	e7f7      	b.n	e56 <_set_sleep_mode+0x1e>
     e66:	46c0      	nop			; (mov r8, r8)
     e68:	e000ed00 	.word	0xe000ed00
     e6c:	40000400 	.word	0x40000400

00000e70 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     e70:	4b06      	ldr	r3, [pc, #24]	; (e8c <_pm_init+0x1c>)
     e72:	7a1a      	ldrb	r2, [r3, #8]
     e74:	b2d2      	uxtb	r2, r2
     e76:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     e78:	7a5a      	ldrb	r2, [r3, #9]
     e7a:	b2d2      	uxtb	r2, r2
     e7c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     e7e:	7a9a      	ldrb	r2, [r3, #10]
     e80:	b2d2      	uxtb	r2, r2
     e82:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     e84:	7ada      	ldrb	r2, [r3, #11]
     e86:	b2d2      	uxtb	r2, r2
     e88:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     e8a:	4770      	bx	lr
     e8c:	40000400 	.word	0x40000400

00000e90 <_calendar_register_callback>:

/**
 * \brief Registers callback for the specified callback type
 */
int32_t _calendar_register_callback(struct calendar_dev *const dev, calendar_drv_cb_alarm_t callback)
{
     e90:	b570      	push	{r4, r5, r6, lr}
     e92:	0004      	movs	r4, r0
     e94:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     e96:	2800      	cmp	r0, #0
     e98:	d015      	beq.n	ec6 <_calendar_register_callback+0x36>
     e9a:	6800      	ldr	r0, [r0, #0]
     e9c:	1e43      	subs	r3, r0, #1
     e9e:	4198      	sbcs	r0, r3
     ea0:	b2c0      	uxtb	r0, r0
     ea2:	2233      	movs	r2, #51	; 0x33
     ea4:	490f      	ldr	r1, [pc, #60]	; (ee4 <_calendar_register_callback+0x54>)
     ea6:	4b10      	ldr	r3, [pc, #64]	; (ee8 <_calendar_register_callback+0x58>)
     ea8:	4798      	blx	r3

	/* Check callback */
	if (callback != NULL) {
     eaa:	2d00      	cmp	r5, #0
     eac:	d00d      	beq.n	eca <_calendar_register_callback+0x3a>
		/* register the callback */
		dev->callback = callback;
     eae:	6065      	str	r5, [r4, #4]
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     eb0:	4b0e      	ldr	r3, [pc, #56]	; (eec <_calendar_register_callback+0x5c>)
     eb2:	2208      	movs	r2, #8
     eb4:	21c0      	movs	r1, #192	; 0xc0
     eb6:	0049      	lsls	r1, r1, #1
     eb8:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     eba:	601a      	str	r2, [r3, #0]
		/* enable RTC_IRQn */
		NVIC_ClearPendingIRQ(RTC_IRQn);
		NVIC_EnableIRQ(RTC_IRQn);

		/* enable cmp */
		hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
     ebc:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE2.INTFLAG.reg = mask;
}

static inline void hri_rtcmode0_set_INTEN_CMP0_bit(const void *const hw)
{
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     ebe:	3a07      	subs	r2, #7
     ec0:	71da      	strb	r2, [r3, #7]
		/* disable RTC_IRQn */
		NVIC_DisableIRQ(RTC_IRQn);
	}

	return ERR_NONE;
}
     ec2:	2000      	movs	r0, #0
     ec4:	bd70      	pop	{r4, r5, r6, pc}
     ec6:	2000      	movs	r0, #0
     ec8:	e7eb      	b.n	ea2 <_calendar_register_callback+0x12>
		hri_rtcmode0_clear_INTEN_CMP0_bit(dev->hw);
     eca:	6823      	ldr	r3, [r4, #0]
	}
}

static inline void hri_rtcmode0_clear_INTEN_CMP0_bit(const void *const hw)
{
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_CMP0;
     ecc:	2201      	movs	r2, #1
     ece:	719a      	strb	r2, [r3, #6]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ed0:	2108      	movs	r1, #8
     ed2:	2380      	movs	r3, #128	; 0x80
     ed4:	4a05      	ldr	r2, [pc, #20]	; (eec <_calendar_register_callback+0x5c>)
     ed6:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
     ed8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     edc:	f3bf 8f6f 	isb	sy
     ee0:	e7ef      	b.n	ec2 <_calendar_register_callback+0x32>
     ee2:	46c0      	nop			; (mov r8, r8)
     ee4:	00002b74 	.word	0x00002b74
     ee8:	00000ad5 	.word	0x00000ad5
     eec:	e000e100 	.word	0xe000e100

00000ef0 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
     ef0:	b510      	push	{r4, lr}
     ef2:	1e04      	subs	r4, r0, #0
	uint16_t register_value;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     ef4:	d036      	beq.n	f64 <_calendar_init+0x74>
     ef6:	6800      	ldr	r0, [r0, #0]
     ef8:	1e43      	subs	r3, r0, #1
     efa:	4198      	sbcs	r0, r3
     efc:	b2c0      	uxtb	r0, r0
     efe:	2278      	movs	r2, #120	; 0x78
     f00:	4919      	ldr	r1, [pc, #100]	; (f68 <_calendar_init+0x78>)
     f02:	4b1a      	ldr	r3, [pc, #104]	; (f6c <_calendar_init+0x7c>)
     f04:	4798      	blx	r3

	_rtc_dev = dev;
     f06:	4b1a      	ldr	r3, [pc, #104]	; (f70 <_calendar_init+0x80>)
     f08:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw);
     f0a:	6822      	ldr	r2, [r4, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     f0c:	7a93      	ldrb	r3, [r2, #10]
     f0e:	09db      	lsrs	r3, r3, #7
     f10:	d1fc      	bne.n	f0c <_calendar_init+0x1c>
     f12:	7a93      	ldrb	r3, [r2, #10]
     f14:	09db      	lsrs	r3, r3, #7
     f16:	d1fc      	bne.n	f12 <_calendar_init+0x22>

static inline bool hri_rtcmode0_get_CTRL_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
     f18:	8813      	ldrh	r3, [r2, #0]
	if (hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw)) {
     f1a:	079b      	lsls	r3, r3, #30
     f1c:	d50a      	bpl.n	f34 <_calendar_init+0x44>
}

static inline void hri_rtcmode0_clear_CTRL_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     f1e:	8813      	ldrh	r3, [r2, #0]
     f20:	2102      	movs	r1, #2
     f22:	438b      	bics	r3, r1
     f24:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     f26:	7a93      	ldrb	r3, [r2, #10]
     f28:	09db      	lsrs	r3, r3, #7
     f2a:	d1fc      	bne.n	f26 <_calendar_init+0x36>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw);
     f2c:	6822      	ldr	r2, [r4, #0]
     f2e:	7a93      	ldrb	r3, [r2, #10]
     f30:	09db      	lsrs	r3, r3, #7
     f32:	d1fc      	bne.n	f2e <_calendar_init+0x3e>
#endif
	}
	hri_rtcmode0_set_CTRL_SWRST_bit(dev->hw);
     f34:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     f36:	8813      	ldrh	r3, [r2, #0]
     f38:	2101      	movs	r1, #1
     f3a:	430b      	orrs	r3, r1
     f3c:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     f3e:	7a93      	ldrb	r3, [r2, #10]
     f40:	09db      	lsrs	r3, r3, #7
     f42:	d1fc      	bne.n	f3e <_calendar_init+0x4e>
	hri_rtcmode0_wait_for_sync(dev->hw);
     f44:	6822      	ldr	r2, [r4, #0]
     f46:	7a93      	ldrb	r3, [r2, #10]
     f48:	09db      	lsrs	r3, r3, #7
     f4a:	d1fc      	bne.n	f46 <_calendar_init+0x56>
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     f4c:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     f4e:	7a93      	ldrb	r3, [r2, #10]
     f50:	09db      	lsrs	r3, r3, #7
     f52:	d1fc      	bne.n	f4e <_calendar_init+0x5e>
	register_value &= (~RTC_MODE0_CTRL_MATCHCLR);

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	/* set continuously clock read update mode */
	hri_rtcmode0_set_READREQ_RCONT_bit(dev->hw);
     f54:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_rtc_set_READREQ_RCONT_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     f56:	8853      	ldrh	r3, [r2, #2]
     f58:	2180      	movs	r1, #128	; 0x80
     f5a:	01c9      	lsls	r1, r1, #7
     f5c:	430b      	orrs	r3, r1
     f5e:	8053      	strh	r3, [r2, #2]
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	return ERR_NONE;
}
     f60:	2000      	movs	r0, #0
     f62:	bd10      	pop	{r4, pc}
     f64:	2000      	movs	r0, #0
     f66:	e7ca      	b.n	efe <_calendar_init+0xe>
     f68:	00002b74 	.word	0x00002b74
     f6c:	00000ad5 	.word	0x00000ad5
     f70:	200000b8 	.word	0x200000b8

00000f74 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
     f74:	b510      	push	{r4, lr}
     f76:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     f78:	d011      	beq.n	f9e <_calendar_enable+0x2a>
     f7a:	6800      	ldr	r0, [r0, #0]
     f7c:	1e43      	subs	r3, r0, #1
     f7e:	4198      	sbcs	r0, r3
     f80:	b2c0      	uxtb	r0, r0
     f82:	22aa      	movs	r2, #170	; 0xaa
     f84:	4907      	ldr	r1, [pc, #28]	; (fa4 <_calendar_enable+0x30>)
     f86:	4b08      	ldr	r3, [pc, #32]	; (fa8 <_calendar_enable+0x34>)
     f88:	4798      	blx	r3

	/* Enable rtc */
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
     f8a:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     f8c:	8813      	ldrh	r3, [r2, #0]
     f8e:	2102      	movs	r1, #2
     f90:	430b      	orrs	r3, r1
     f92:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     f94:	7a93      	ldrb	r3, [r2, #10]
     f96:	09db      	lsrs	r3, r3, #7
     f98:	d1fc      	bne.n	f94 <_calendar_enable+0x20>

	return ERR_NONE;
}
     f9a:	2000      	movs	r0, #0
     f9c:	bd10      	pop	{r4, pc}
     f9e:	2000      	movs	r0, #0
     fa0:	e7ef      	b.n	f82 <_calendar_enable+0xe>
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	00002b74 	.word	0x00002b74
     fa8:	00000ad5 	.word	0x00000ad5

00000fac <_calendar_set_comp>:

/**
 * \brief Set the compare for the specified value.
 */
int32_t _calendar_set_comp(struct calendar_dev *const dev, const uint32_t comp)
{
     fac:	b570      	push	{r4, r5, r6, lr}
     fae:	0004      	movs	r4, r0
     fb0:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     fb2:	2800      	cmp	r0, #0
     fb4:	d00f      	beq.n	fd6 <_calendar_set_comp+0x2a>
     fb6:	6800      	ldr	r0, [r0, #0]
     fb8:	1e43      	subs	r3, r0, #1
     fba:	4198      	sbcs	r0, r3
     fbc:	b2c0      	uxtb	r0, r0
     fbe:	22e4      	movs	r2, #228	; 0xe4
     fc0:	4906      	ldr	r1, [pc, #24]	; (fdc <_calendar_set_comp+0x30>)
     fc2:	4b07      	ldr	r3, [pc, #28]	; (fe0 <_calendar_set_comp+0x34>)
     fc4:	4798      	blx	r3

	/* Set value into alarm register. */
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, comp);
     fc6:	6822      	ldr	r2, [r4, #0]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     fc8:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     fca:	6195      	str	r5, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     fcc:	7a93      	ldrb	r3, [r2, #10]
     fce:	09db      	lsrs	r3, r3, #7
     fd0:	d1fc      	bne.n	fcc <_calendar_set_comp+0x20>

	return ERR_NONE;
}
     fd2:	2000      	movs	r0, #0
     fd4:	bd70      	pop	{r4, r5, r6, pc}
     fd6:	2000      	movs	r0, #0
     fd8:	e7f1      	b.n	fbe <_calendar_set_comp+0x12>
     fda:	46c0      	nop			; (mov r8, r8)
     fdc:	00002b74 	.word	0x00002b74
     fe0:	00000ad5 	.word	0x00000ad5

00000fe4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     fe4:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
     fe6:	4b07      	ldr	r3, [pc, #28]	; (1004 <RTC_Handler+0x20>)
     fe8:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     fea:	6823      	ldr	r3, [r4, #0]
     fec:	7a1b      	ldrb	r3, [r3, #8]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
     fee:	07db      	lsls	r3, r3, #31
     ff0:	d400      	bmi.n	ff4 <RTC_Handler+0x10>
}
     ff2:	bd10      	pop	{r4, pc}
		dev->callback(dev);
     ff4:	0020      	movs	r0, r4
     ff6:	6863      	ldr	r3, [r4, #4]
     ff8:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     ffa:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     ffc:	2201      	movs	r2, #1
     ffe:	721a      	strb	r2, [r3, #8]
}
    1000:	e7f7      	b.n	ff2 <RTC_Handler+0xe>
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	200000b8 	.word	0x200000b8

00001008 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1008:	b510      	push	{r4, lr}
    100a:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    100c:	4b1f      	ldr	r3, [pc, #124]	; (108c <_usart_init+0x84>)
    100e:	18c3      	adds	r3, r0, r3
    1010:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    1012:	b2db      	uxtb	r3, r3
    1014:	2b03      	cmp	r3, #3
    1016:	d004      	beq.n	1022 <_usart_init+0x1a>
	ASSERT(false);
    1018:	4a1d      	ldr	r2, [pc, #116]	; (1090 <_usart_init+0x88>)
    101a:	491e      	ldr	r1, [pc, #120]	; (1094 <_usart_init+0x8c>)
    101c:	2000      	movs	r0, #0
    101e:	4b1e      	ldr	r3, [pc, #120]	; (1098 <_usart_init+0x90>)
    1020:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1022:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1024:	07db      	lsls	r3, r3, #31
    1026:	d418      	bmi.n	105a <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1028:	2203      	movs	r2, #3
    102a:	69e3      	ldr	r3, [r4, #28]
    102c:	421a      	tst	r2, r3
    102e:	d1fc      	bne.n	102a <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1030:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1032:	079b      	lsls	r3, r3, #30
    1034:	d50b      	bpl.n	104e <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1036:	6823      	ldr	r3, [r4, #0]
    1038:	2202      	movs	r2, #2
    103a:	4393      	bics	r3, r2
    103c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    103e:	3201      	adds	r2, #1
    1040:	69e3      	ldr	r3, [r4, #28]
    1042:	421a      	tst	r2, r3
    1044:	d1fc      	bne.n	1040 <_usart_init+0x38>
    1046:	2202      	movs	r2, #2
    1048:	69e3      	ldr	r3, [r4, #28]
    104a:	421a      	tst	r2, r3
    104c:	d1fc      	bne.n	1048 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    104e:	2305      	movs	r3, #5
    1050:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1052:	2203      	movs	r2, #3
    1054:	69e3      	ldr	r3, [r4, #28]
    1056:	421a      	tst	r2, r3
    1058:	d1fc      	bne.n	1054 <_usart_init+0x4c>
    105a:	2201      	movs	r2, #1
    105c:	69e3      	ldr	r3, [r4, #28]
    105e:	421a      	tst	r2, r3
    1060:	d1fc      	bne.n	105c <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1062:	4b0e      	ldr	r3, [pc, #56]	; (109c <_usart_init+0x94>)
    1064:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1066:	2203      	movs	r2, #3
    1068:	69e3      	ldr	r3, [r4, #28]
    106a:	421a      	tst	r2, r3
    106c:	d1fc      	bne.n	1068 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    106e:	23c0      	movs	r3, #192	; 0xc0
    1070:	029b      	lsls	r3, r3, #10
    1072:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1074:	2207      	movs	r2, #7
    1076:	69e3      	ldr	r3, [r4, #28]
    1078:	421a      	tst	r2, r3
    107a:	d1fc      	bne.n	1076 <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    107c:	4b08      	ldr	r3, [pc, #32]	; (10a0 <_usart_init+0x98>)
    107e:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1080:	2300      	movs	r3, #0
    1082:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1084:	2230      	movs	r2, #48	; 0x30
    1086:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    1088:	2000      	movs	r0, #0
    108a:	bd10      	pop	{r4, pc}
    108c:	bdfff800 	.word	0xbdfff800
    1090:	0000025e 	.word	0x0000025e
    1094:	00002b8c 	.word	0x00002b8c
    1098:	00000ad5 	.word	0x00000ad5
    109c:	40100004 	.word	0x40100004
    10a0:	ffffc504 	.word	0xffffc504

000010a4 <_usart_async_init>:
{
    10a4:	b570      	push	{r4, r5, r6, lr}
    10a6:	0005      	movs	r5, r0
    10a8:	000c      	movs	r4, r1
	ASSERT(device);
    10aa:	1e43      	subs	r3, r0, #1
    10ac:	4198      	sbcs	r0, r3
    10ae:	b2c0      	uxtb	r0, r0
    10b0:	22c4      	movs	r2, #196	; 0xc4
    10b2:	4914      	ldr	r1, [pc, #80]	; (1104 <_usart_async_init+0x60>)
    10b4:	4b14      	ldr	r3, [pc, #80]	; (1108 <_usart_async_init+0x64>)
    10b6:	4798      	blx	r3
	init_status = _usart_init(hw);
    10b8:	0020      	movs	r0, r4
    10ba:	4b14      	ldr	r3, [pc, #80]	; (110c <_usart_async_init+0x68>)
    10bc:	4798      	blx	r3
	if (init_status) {
    10be:	2800      	cmp	r0, #0
    10c0:	d000      	beq.n	10c4 <_usart_async_init+0x20>
}
    10c2:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    10c4:	61ac      	str	r4, [r5, #24]
	if (hw == SERCOM3) {
    10c6:	4b12      	ldr	r3, [pc, #72]	; (1110 <_usart_async_init+0x6c>)
    10c8:	429c      	cmp	r4, r3
    10ca:	d017      	beq.n	10fc <_usart_async_init+0x58>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    10cc:	4b11      	ldr	r3, [pc, #68]	; (1114 <_usart_async_init+0x70>)
    10ce:	469c      	mov	ip, r3
    10d0:	4464      	add	r4, ip
    10d2:	0aa4      	lsrs	r4, r4, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    10d4:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
    10d6:	b2e3      	uxtb	r3, r4
    10d8:	0622      	lsls	r2, r4, #24
    10da:	d4f2      	bmi.n	10c2 <_usart_async_init+0x1e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10dc:	221f      	movs	r2, #31
    10de:	401a      	ands	r2, r3
    10e0:	2301      	movs	r3, #1
    10e2:	4093      	lsls	r3, r2
    10e4:	4a0c      	ldr	r2, [pc, #48]	; (1118 <_usart_async_init+0x74>)
    10e6:	2180      	movs	r1, #128	; 0x80
    10e8:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    10ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10ee:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10f2:	3101      	adds	r1, #1
    10f4:	31ff      	adds	r1, #255	; 0xff
    10f6:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10f8:	6013      	str	r3, [r2, #0]
    10fa:	e7e2      	b.n	10c2 <_usart_async_init+0x1e>
		_sercom3_dev = (struct _usart_async_device *)dev;
    10fc:	4b07      	ldr	r3, [pc, #28]	; (111c <_usart_async_init+0x78>)
    10fe:	601d      	str	r5, [r3, #0]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1100:	230c      	movs	r3, #12
    1102:	e7eb      	b.n	10dc <_usart_async_init+0x38>
    1104:	00002b8c 	.word	0x00002b8c
    1108:	00000ad5 	.word	0x00000ad5
    110c:	00001009 	.word	0x00001009
    1110:	42001400 	.word	0x42001400
    1114:	bdfff800 	.word	0xbdfff800
    1118:	e000e100 	.word	0xe000e100
    111c:	200000bc 	.word	0x200000bc

00001120 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1120:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1122:	6813      	ldr	r3, [r2, #0]
    1124:	2102      	movs	r1, #2
    1126:	430b      	orrs	r3, r1
    1128:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    112a:	3101      	adds	r1, #1
    112c:	69d3      	ldr	r3, [r2, #28]
    112e:	4219      	tst	r1, r3
    1130:	d1fc      	bne.n	112c <_usart_async_enable+0xc>
}
    1132:	4770      	bx	lr

00001134 <_usart_async_disable>:
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    1134:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1136:	6813      	ldr	r3, [r2, #0]
    1138:	2102      	movs	r1, #2
    113a:	438b      	bics	r3, r1
    113c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    113e:	3101      	adds	r1, #1
    1140:	69d3      	ldr	r3, [r2, #28]
    1142:	4219      	tst	r1, r3
    1144:	d1fc      	bne.n	1140 <_usart_async_disable+0xc>
}
    1146:	4770      	bx	lr

00001148 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1148:	6983      	ldr	r3, [r0, #24]
    114a:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    114c:	8519      	strh	r1, [r3, #40]	; 0x28
}
    114e:	4770      	bx	lr

00001150 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1150:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1152:	2201      	movs	r2, #1
    1154:	759a      	strb	r2, [r3, #22]
}
    1156:	4770      	bx	lr

00001158 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1158:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    115a:	2202      	movs	r2, #2
    115c:	759a      	strb	r2, [r3, #22]
}
    115e:	4770      	bx	lr

00001160 <_usart_async_set_irq_state>:
{
    1160:	b570      	push	{r4, r5, r6, lr}
    1162:	0004      	movs	r4, r0
    1164:	000d      	movs	r5, r1
    1166:	0016      	movs	r6, r2
	ASSERT(device);
    1168:	1e43      	subs	r3, r0, #1
    116a:	4198      	sbcs	r0, r3
    116c:	b2c0      	uxtb	r0, r0
    116e:	4a16      	ldr	r2, [pc, #88]	; (11c8 <_usart_async_set_irq_state+0x68>)
    1170:	4916      	ldr	r1, [pc, #88]	; (11cc <_usart_async_set_irq_state+0x6c>)
    1172:	4b17      	ldr	r3, [pc, #92]	; (11d0 <_usart_async_set_irq_state+0x70>)
    1174:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    1176:	2302      	movs	r3, #2
    1178:	002a      	movs	r2, r5
    117a:	439a      	bics	r2, r3
    117c:	d10e      	bne.n	119c <_usart_async_set_irq_state+0x3c>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    117e:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1180:	2e00      	cmp	r6, #0
    1182:	d105      	bne.n	1190 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1184:	2201      	movs	r2, #1
    1186:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1188:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    118a:	3201      	adds	r2, #1
    118c:	751a      	strb	r2, [r3, #20]
}
    118e:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1190:	2201      	movs	r2, #1
    1192:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1194:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1196:	3201      	adds	r2, #1
    1198:	759a      	strb	r2, [r3, #22]
    119a:	e7f8      	b.n	118e <_usart_async_set_irq_state+0x2e>
	} else if (USART_ASYNC_RX_DONE == type) {
    119c:	2d01      	cmp	r5, #1
    119e:	d007      	beq.n	11b0 <_usart_async_set_irq_state+0x50>
	} else if (USART_ASYNC_ERROR == type) {
    11a0:	2d03      	cmp	r5, #3
    11a2:	d1f4      	bne.n	118e <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    11a4:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    11a6:	2e00      	cmp	r6, #0
    11a8:	d00b      	beq.n	11c2 <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    11aa:	2280      	movs	r2, #128	; 0x80
    11ac:	759a      	strb	r2, [r3, #22]
}
    11ae:	e7ee      	b.n	118e <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    11b0:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    11b2:	2e00      	cmp	r6, #0
    11b4:	d102      	bne.n	11bc <_usart_async_set_irq_state+0x5c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    11b6:	2204      	movs	r2, #4
    11b8:	751a      	strb	r2, [r3, #20]
    11ba:	e7e8      	b.n	118e <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    11bc:	2204      	movs	r2, #4
    11be:	759a      	strb	r2, [r3, #22]
    11c0:	e7e5      	b.n	118e <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    11c2:	2280      	movs	r2, #128	; 0x80
    11c4:	751a      	strb	r2, [r3, #20]
    11c6:	e7e2      	b.n	118e <_usart_async_set_irq_state+0x2e>
    11c8:	0000021e 	.word	0x0000021e
    11cc:	00002b8c 	.word	0x00002b8c
    11d0:	00000ad5 	.word	0x00000ad5

000011d4 <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    11d4:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    11d6:	4b19      	ldr	r3, [pc, #100]	; (123c <SERCOM3_Handler+0x68>)
    11d8:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
    11da:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    11dc:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    11de:	07db      	lsls	r3, r3, #31
    11e0:	d502      	bpl.n	11e8 <SERCOM3_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    11e2:	7da3      	ldrb	r3, [r4, #22]
    11e4:	07db      	lsls	r3, r3, #31
    11e6:	d40f      	bmi.n	1208 <SERCOM3_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    11e8:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    11ea:	079b      	lsls	r3, r3, #30
    11ec:	d502      	bpl.n	11f4 <SERCOM3_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    11ee:	7da3      	ldrb	r3, [r4, #22]
    11f0:	079b      	lsls	r3, r3, #30
    11f2:	d40e      	bmi.n	1212 <SERCOM3_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    11f4:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    11f6:	075b      	lsls	r3, r3, #29
    11f8:	d515      	bpl.n	1226 <SERCOM3_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    11fa:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    11fc:	2337      	movs	r3, #55	; 0x37
    11fe:	421a      	tst	r2, r3
    1200:	d00c      	beq.n	121c <SERCOM3_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1202:	3308      	adds	r3, #8
    1204:	8363      	strh	r3, [r4, #26]
}
    1206:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1208:	2301      	movs	r3, #1
    120a:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    120c:	6803      	ldr	r3, [r0, #0]
    120e:	4798      	blx	r3
    1210:	e7f9      	b.n	1206 <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1212:	2302      	movs	r3, #2
    1214:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1216:	6883      	ldr	r3, [r0, #8]
    1218:	4798      	blx	r3
    121a:	e7f4      	b.n	1206 <SERCOM3_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
    121c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    121e:	b2c9      	uxtb	r1, r1
    1220:	6843      	ldr	r3, [r0, #4]
    1222:	4798      	blx	r3
    1224:	e7ef      	b.n	1206 <SERCOM3_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1226:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1228:	09db      	lsrs	r3, r3, #7
    122a:	d0ec      	beq.n	1206 <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    122c:	2380      	movs	r3, #128	; 0x80
    122e:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    1230:	68c3      	ldr	r3, [r0, #12]
    1232:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1234:	8b63      	ldrh	r3, [r4, #26]
    1236:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1238:	8363      	strh	r3, [r4, #26]
}
    123a:	e7e4      	b.n	1206 <SERCOM3_Handler+0x32>
    123c:	200000bc 	.word	0x200000bc

00001240 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1240:	4b0e      	ldr	r3, [pc, #56]	; (127c <_sysctrl_init_sources+0x3c>)
    1242:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1244:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1246:	480e      	ldr	r0, [pc, #56]	; (1280 <_sysctrl_init_sources+0x40>)
    1248:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    124a:	0f92      	lsrs	r2, r2, #30
    124c:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    124e:	2002      	movs	r0, #2
    1250:	4302      	orrs	r2, r0
    1252:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1254:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1256:	699a      	ldr	r2, [r3, #24]
    1258:	4302      	orrs	r2, r0
    125a:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    125c:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    125e:	211f      	movs	r1, #31
    1260:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1262:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1264:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1266:	2208      	movs	r2, #8
    1268:	68cb      	ldr	r3, [r1, #12]
    126a:	421a      	tst	r2, r3
    126c:	d0fc      	beq.n	1268 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    126e:	4a03      	ldr	r2, [pc, #12]	; (127c <_sysctrl_init_sources+0x3c>)
    1270:	6a13      	ldr	r3, [r2, #32]
    1272:	2180      	movs	r1, #128	; 0x80
    1274:	430b      	orrs	r3, r1
    1276:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1278:	4770      	bx	lr
    127a:	46c0      	nop			; (mov r8, r8)
    127c:	40000800 	.word	0x40000800
    1280:	0fff0000 	.word	0x0fff0000

00001284 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1284:	4a02      	ldr	r2, [pc, #8]	; (1290 <_sysctrl_init_referenced_generators+0xc>)
    1286:	6993      	ldr	r3, [r2, #24]
    1288:	2102      	movs	r1, #2
    128a:	438b      	bics	r3, r1
    128c:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    128e:	4770      	bx	lr
    1290:	40000800 	.word	0x40000800

00001294 <idle_task_fn>:
}

// =============================================================================
// local (static) code

static void *idle_task_fn(void *ctx, void *arg) {
    1294:	b510      	push	{r4, lr}
  // ctx is unused in idle task
  // scheduler is passed as the second argument.
  mu_sched_t *sched = (mu_sched_t *)arg;
  mu_sched_event_t *next_event = mu_sched_get_next_event(sched);
    1296:	0008      	movs	r0, r1
    1298:	4b0a      	ldr	r3, [pc, #40]	; (12c4 <idle_task_fn+0x30>)
    129a:	4798      	blx	r3
    129c:	0004      	movs	r4, r0
}

static void will_sleep(void) {
  // If you have any last-moment cleanup that needs to be done before the
  // processor goes to sleep, you would do it here.
  usart_async_disable(&USART_0);
    129e:	480a      	ldr	r0, [pc, #40]	; (12c8 <idle_task_fn+0x34>)
    12a0:	4b0a      	ldr	r3, [pc, #40]	; (12cc <idle_task_fn+0x38>)
    12a2:	4798      	blx	r3
  asm("nop");
    12a4:	46c0      	nop			; (mov r8, r8)
    if (next_event) {
    12a6:	2c00      	cmp	r4, #0
    12a8:	d008      	beq.n	12bc <idle_task_fn+0x28>
      mu_vm_sleep_until(next_event->time);
    12aa:	6820      	ldr	r0, [r4, #0]
    12ac:	4b08      	ldr	r3, [pc, #32]	; (12d0 <idle_task_fn+0x3c>)
    12ae:	4798      	blx	r3
}

static void did_wake(void) {
  // If you have anything that needs to be done when the processor wakes from
  // sleep, you would do it here.
  usart_async_enable(&USART_0);
    12b0:	4805      	ldr	r0, [pc, #20]	; (12c8 <idle_task_fn+0x34>)
    12b2:	4b08      	ldr	r3, [pc, #32]	; (12d4 <idle_task_fn+0x40>)
    12b4:	4798      	blx	r3
  asm("nop");
    12b6:	46c0      	nop			; (mov r8, r8)
}
    12b8:	2000      	movs	r0, #0
    12ba:	bd10      	pop	{r4, pc}
      mu_vm_sleep();
    12bc:	4b06      	ldr	r3, [pc, #24]	; (12d8 <idle_task_fn+0x44>)
    12be:	4798      	blx	r3
    12c0:	e7f6      	b.n	12b0 <idle_task_fn+0x1c>
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	00000209 	.word	0x00000209
    12c8:	20000204 	.word	0x20000204
    12cc:	00000aa9 	.word	0x00000aa9
    12d0:	00001739 	.word	0x00001739
    12d4:	00000a7d 	.word	0x00000a7d
    12d8:	00001765 	.word	0x00001765

000012dc <idle_task_init>:
mu_task_t *idle_task_init(mu_task_t *idle_task, mu_sched_t *sched) {
    12dc:	b570      	push	{r4, r5, r6, lr}
    12de:	0004      	movs	r4, r0
    12e0:	000d      	movs	r5, r1
  mu_task_init(idle_task, idle_task_fn, NULL, "Sleeping Idle");
    12e2:	4b05      	ldr	r3, [pc, #20]	; (12f8 <idle_task_init+0x1c>)
    12e4:	2200      	movs	r2, #0
    12e6:	4905      	ldr	r1, [pc, #20]	; (12fc <idle_task_init+0x20>)
    12e8:	4e05      	ldr	r6, [pc, #20]	; (1300 <idle_task_init+0x24>)
    12ea:	47b0      	blx	r6
  mu_sched_set_idle_task(sched, idle_task);
    12ec:	0021      	movs	r1, r4
    12ee:	0028      	movs	r0, r5
    12f0:	4b04      	ldr	r3, [pc, #16]	; (1304 <idle_task_init+0x28>)
    12f2:	4798      	blx	r3
}
    12f4:	0020      	movs	r0, r4
    12f6:	bd70      	pop	{r4, r5, r6, pc}
    12f8:	00002ba8 	.word	0x00002ba8
    12fc:	00001295 	.word	0x00001295
    1300:	000003b3 	.word	0x000003b3
    1304:	000001fd 	.word	0x000001fd

00001308 <mulib_slinky_init>:
// ... no context required

// =============================================================================
// public code

void mulib_slinky_init() {
    1308:	b570      	push	{r4, r5, r6, lr}
  // initialize the port-specific interface
  mu_vm_init();
    130a:	4c19      	ldr	r4, [pc, #100]	; (1370 <mulib_slinky_init+0x68>)
    130c:	47a0      	blx	r4

  printf("\r\n\r\n# ===========\r\n");
    130e:	4819      	ldr	r0, [pc, #100]	; (1374 <mulib_slinky_init+0x6c>)
    1310:	4b19      	ldr	r3, [pc, #100]	; (1378 <mulib_slinky_init+0x70>)
    1312:	4798      	blx	r3
  printf("# mulib_slinky %s: see https://github.com/rdpoor/mulib\r\n", MULIB_SLINKY_VERSION);
    1314:	4919      	ldr	r1, [pc, #100]	; (137c <mulib_slinky_init+0x74>)
    1316:	481a      	ldr	r0, [pc, #104]	; (1380 <mulib_slinky_init+0x78>)
    1318:	4b1a      	ldr	r3, [pc, #104]	; (1384 <mulib_slinky_init+0x7c>)
    131a:	4798      	blx	r3

  // initialize the port-specific interface
  mu_vm_init();
    131c:	47a0      	blx	r4

  // set up the isr queue and the scheduler
  mu_spscq_init(&s_isr_queue, s_isr_queue_items, ISR_Q_CAPACITY);
    131e:	4c1a      	ldr	r4, [pc, #104]	; (1388 <mulib_slinky_init+0x80>)
    1320:	0025      	movs	r5, r4
    1322:	3520      	adds	r5, #32
    1324:	2208      	movs	r2, #8
    1326:	0021      	movs	r1, r4
    1328:	0028      	movs	r0, r5
    132a:	4b18      	ldr	r3, [pc, #96]	; (138c <mulib_slinky_init+0x84>)
    132c:	4798      	blx	r3
  mu_sched_init(&s_sched, s_event_queue, EVENT_QUEUE_CAPACITY, &s_isr_queue);
    132e:	0021      	movs	r1, r4
    1330:	312c      	adds	r1, #44	; 0x2c
    1332:	347c      	adds	r4, #124	; 0x7c
    1334:	002b      	movs	r3, r5
    1336:	220a      	movs	r2, #10
    1338:	0020      	movs	r0, r4
    133a:	4d15      	ldr	r5, [pc, #84]	; (1390 <mulib_slinky_init+0x88>)
    133c:	47a8      	blx	r5

  // initialize tasks
  led_task_init(&s_led_task, &s_led_ctx);
    133e:	4d15      	ldr	r5, [pc, #84]	; (1394 <mulib_slinky_init+0x8c>)
    1340:	0029      	movs	r1, r5
    1342:	311c      	adds	r1, #28
    1344:	002e      	movs	r6, r5
    1346:	3620      	adds	r6, #32
    1348:	0030      	movs	r0, r6
    134a:	4b13      	ldr	r3, [pc, #76]	; (1398 <mulib_slinky_init+0x90>)
    134c:	4798      	blx	r3
  button_task_init(&s_button_task, &s_button_ctx, &s_sched);
    134e:	0029      	movs	r1, r5
    1350:	3138      	adds	r1, #56	; 0x38
    1352:	0028      	movs	r0, r5
    1354:	3040      	adds	r0, #64	; 0x40
    1356:	0022      	movs	r2, r4
    1358:	4b10      	ldr	r3, [pc, #64]	; (139c <mulib_slinky_init+0x94>)
    135a:	4798      	blx	r3
  idle_task_init(&s_idle_task, &s_sched);
    135c:	0028      	movs	r0, r5
    135e:	3058      	adds	r0, #88	; 0x58
    1360:	0021      	movs	r1, r4
    1362:	4b0f      	ldr	r3, [pc, #60]	; (13a0 <mulib_slinky_init+0x98>)
    1364:	4798      	blx	r3

  // schedule the initial call to the LED task
  mu_sched_task_now(&s_sched, &s_led_task);
    1366:	0031      	movs	r1, r6
    1368:	0020      	movs	r0, r4
    136a:	4b0e      	ldr	r3, [pc, #56]	; (13a4 <mulib_slinky_init+0x9c>)
    136c:	4798      	blx	r3
}
    136e:	bd70      	pop	{r4, r5, r6, pc}
    1370:	0000156d 	.word	0x0000156d
    1374:	00002bb8 	.word	0x00002bb8
    1378:	00001ca9 	.word	0x00001ca9
    137c:	00002bcc 	.word	0x00002bcc
    1380:	00002bd4 	.word	0x00002bd4
    1384:	00001bb5 	.word	0x00001bb5
    1388:	200000c0 	.word	0x200000c0
    138c:	0000031d 	.word	0x0000031d
    1390:	000001c1 	.word	0x000001c1
    1394:	20000140 	.word	0x20000140
    1398:	00001489 	.word	0x00001489
    139c:	000013f5 	.word	0x000013f5
    13a0:	000012dd 	.word	0x000012dd
    13a4:	000002b1 	.word	0x000002b1

000013a8 <mulib_slinky_step>:

void mulib_slinky_step() {
    13a8:	b510      	push	{r4, lr}
  // called repeatedly from main(): run the scheduler
  mu_sched_step(&s_sched);
    13aa:	4802      	ldr	r0, [pc, #8]	; (13b4 <mulib_slinky_step+0xc>)
    13ac:	307c      	adds	r0, #124	; 0x7c
    13ae:	4b02      	ldr	r3, [pc, #8]	; (13b8 <mulib_slinky_step+0x10>)
    13b0:	4798      	blx	r3
}
    13b2:	bd10      	pop	{r4, pc}
    13b4:	200000c0 	.word	0x200000c0
    13b8:	00000225 	.word	0x00000225

000013bc <button_task_fn>:
}

// =============================================================================
// local (static) code

static void *button_task_fn(void *ctx, void *arg) {
    13bc:	b510      	push	{r4, lr}
  // button context (unused) is passed as first arg, scheduler as second.
  mu_sched_t *sched = (mu_sched_t *)arg;
  mu_time_t now = mu_sched_get_current_time(sched);
    13be:	0008      	movs	r0, r1
    13c0:	4b03      	ldr	r3, [pc, #12]	; (13d0 <button_task_fn+0x14>)
    13c2:	4798      	blx	r3
    13c4:	0001      	movs	r1, r0

  printf("button pressed at %lu\r\n", now);
    13c6:	4803      	ldr	r0, [pc, #12]	; (13d4 <button_task_fn+0x18>)
    13c8:	4b03      	ldr	r3, [pc, #12]	; (13d8 <button_task_fn+0x1c>)
    13ca:	4798      	blx	r3
  return NULL;
}
    13cc:	2000      	movs	r0, #0
    13ce:	bd10      	pop	{r4, pc}
    13d0:	00000201 	.word	0x00000201
    13d4:	00002c10 	.word	0x00002c10
    13d8:	00001bb5 	.word	0x00001bb5

000013dc <button_cb>:

// button_cb is triggered when a button press generates an interrupt.
// From interrupt level, schedule the button task upon leaving interrupt level.
static void button_cb(void) {
    13dc:	b510      	push	{r4, lr}
  mu_sched_task_from_isr(s_sched, s_button_task);
    13de:	4b03      	ldr	r3, [pc, #12]	; (13ec <button_cb+0x10>)
    13e0:	6819      	ldr	r1, [r3, #0]
    13e2:	6858      	ldr	r0, [r3, #4]
    13e4:	4b02      	ldr	r3, [pc, #8]	; (13f0 <button_cb+0x14>)
    13e6:	4798      	blx	r3
}
    13e8:	bd10      	pop	{r4, pc}
    13ea:	46c0      	nop			; (mov r8, r8)
    13ec:	200001b0 	.word	0x200001b0
    13f0:	00000305 	.word	0x00000305

000013f4 <button_task_init>:
                            mu_sched_t *sched) {
    13f4:	b570      	push	{r4, r5, r6, lr}
    13f6:	0004      	movs	r4, r0
  s_button_task = button_task;
    13f8:	4b07      	ldr	r3, [pc, #28]	; (1418 <button_task_init+0x24>)
    13fa:	6018      	str	r0, [r3, #0]
  s_sched = sched;
    13fc:	605a      	str	r2, [r3, #4]
  ext_irq_register(PIN_PA15, button_cb);
    13fe:	4907      	ldr	r1, [pc, #28]	; (141c <button_task_init+0x28>)
    1400:	200f      	movs	r0, #15
    1402:	4b07      	ldr	r3, [pc, #28]	; (1420 <button_task_init+0x2c>)
    1404:	4798      	blx	r3
  mu_task_init(button_task, button_task_fn, NULL, "Button Interrupt");
    1406:	4b07      	ldr	r3, [pc, #28]	; (1424 <button_task_init+0x30>)
    1408:	2200      	movs	r2, #0
    140a:	4907      	ldr	r1, [pc, #28]	; (1428 <button_task_init+0x34>)
    140c:	0020      	movs	r0, r4
    140e:	4d07      	ldr	r5, [pc, #28]	; (142c <button_task_init+0x38>)
    1410:	47a8      	blx	r5
}
    1412:	0020      	movs	r0, r4
    1414:	bd70      	pop	{r4, r5, r6, pc}
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	200001b0 	.word	0x200001b0
    141c:	000013dd 	.word	0x000013dd
    1420:	000007b9 	.word	0x000007b9
    1424:	00002c28 	.word	0x00002c28
    1428:	000013bd 	.word	0x000013bd
    142c:	000003b3 	.word	0x000003b3

00001430 <led_task_fn>:
}

// =============================================================================
// local (static) code

static void *led_task_fn(void *ctx, void *arg) {
    1430:	b510      	push	{r4, lr}
    1432:	000c      	movs	r4, r1
  // "context" is passed as the first argument, scheduler is second
  led_ctx_t *led_ctx = (led_ctx_t *)ctx;
  mu_sched_t *sched = (mu_sched_t *)arg;

  if (led_ctx->state == LED_OFF) {
    1434:	7803      	ldrb	r3, [r0, #0]
    1436:	2b00      	cmp	r3, #0
    1438:	d011      	beq.n	145e <led_task_fn+0x2e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    143a:	2180      	movs	r1, #128	; 0x80
    143c:	05c9      	lsls	r1, r1, #23
    143e:	2398      	movs	r3, #152	; 0x98
    1440:	22c0      	movs	r2, #192	; 0xc0
    1442:	05d2      	lsls	r2, r2, #23
    1444:	50d1      	str	r1, [r2, r3]
    led_ctx->state = LED_ON;
    mu_sched_reschedule_in(sched, mu_time_ms_to_duration(LED_ON_TIME_MS));

  } else {
    LED_Off();
    led_ctx->state = LED_OFF;
    1446:	2300      	movs	r3, #0
    1448:	7003      	strb	r3, [r0, #0]
    mu_sched_reschedule_in(sched, mu_time_ms_to_duration(LED_OFF_TIME_MS));
    144a:	20f0      	movs	r0, #240	; 0xf0
    144c:	30ff      	adds	r0, #255	; 0xff
    144e:	4b0c      	ldr	r3, [pc, #48]	; (1480 <led_task_fn+0x50>)
    1450:	4798      	blx	r3
    1452:	0001      	movs	r1, r0
    1454:	0020      	movs	r0, r4
    1456:	4b0b      	ldr	r3, [pc, #44]	; (1484 <led_task_fn+0x54>)
    1458:	4798      	blx	r3
  }

  return NULL;
}
    145a:	2000      	movs	r0, #0
    145c:	bd10      	pop	{r4, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    145e:	2180      	movs	r1, #128	; 0x80
    1460:	05c9      	lsls	r1, r1, #23
    1462:	3394      	adds	r3, #148	; 0x94
    1464:	22c0      	movs	r2, #192	; 0xc0
    1466:	05d2      	lsls	r2, r2, #23
    1468:	50d1      	str	r1, [r2, r3]
    led_ctx->state = LED_ON;
    146a:	3b93      	subs	r3, #147	; 0x93
    146c:	7003      	strb	r3, [r0, #0]
    mu_sched_reschedule_in(sched, mu_time_ms_to_duration(LED_ON_TIME_MS));
    146e:	2005      	movs	r0, #5
    1470:	4b03      	ldr	r3, [pc, #12]	; (1480 <led_task_fn+0x50>)
    1472:	4798      	blx	r3
    1474:	0001      	movs	r1, r0
    1476:	0020      	movs	r0, r4
    1478:	4b02      	ldr	r3, [pc, #8]	; (1484 <led_task_fn+0x54>)
    147a:	4798      	blx	r3
    147c:	e7ed      	b.n	145a <led_task_fn+0x2a>
    147e:	46c0      	nop			; (mov r8, r8)
    1480:	0000043d 	.word	0x0000043d
    1484:	000002d1 	.word	0x000002d1

00001488 <led_task_init>:
mu_task_t *led_task_init(mu_task_t *led_task, led_ctx_t *led_ctx) {
    1488:	b570      	push	{r4, r5, r6, lr}
    148a:	0004      	movs	r4, r0
    148c:	000a      	movs	r2, r1
  led_ctx->state = LED_OFF;
    148e:	2300      	movs	r3, #0
    1490:	700b      	strb	r3, [r1, #0]
  mu_task_init(led_task, led_task_fn, led_ctx, "LED");
    1492:	4b03      	ldr	r3, [pc, #12]	; (14a0 <led_task_init+0x18>)
    1494:	4903      	ldr	r1, [pc, #12]	; (14a4 <led_task_init+0x1c>)
    1496:	4d04      	ldr	r5, [pc, #16]	; (14a8 <led_task_init+0x20>)
    1498:	47a8      	blx	r5
}
    149a:	0020      	movs	r0, r4
    149c:	bd70      	pop	{r4, r5, r6, pc}
    149e:	46c0      	nop			; (mov r8, r8)
    14a0:	00002c3c 	.word	0x00002c3c
    14a4:	00001431 	.word	0x00001431
    14a8:	000003b3 	.word	0x000003b3

000014ac <main>:

#include <atmel_start.h>
#include "mulib_slinky.h"

int main(void)
{
    14ac:	b510      	push	{r4, lr}
  /* Initializes MCU, drivers and middleware */
  atmel_start_init();
    14ae:	4b03      	ldr	r3, [pc, #12]	; (14bc <main+0x10>)
    14b0:	4798      	blx	r3
  mulib_slinky_init();
    14b2:	4b03      	ldr	r3, [pc, #12]	; (14c0 <main+0x14>)
    14b4:	4798      	blx	r3

  /* Replace with your application code */
  while (1) {
    mulib_slinky_step();
    14b6:	4c03      	ldr	r4, [pc, #12]	; (14c4 <main+0x18>)
    14b8:	47a0      	blx	r4
    14ba:	e7fd      	b.n	14b8 <main+0xc>
    14bc:	00000455 	.word	0x00000455
    14c0:	00001309 	.word	0x00001309
    14c4:	000013a9 	.word	0x000013a9

000014c8 <button_cb_trampoline>:
void mu_vm_sleep(void) { go_to_sleep(); }

// =============================================================================
// private (local) code

static void button_cb_trampoline(void) {
    14c8:	b510      	push	{r4, lr}
  if (s_port.button_cb) {
    14ca:	4b04      	ldr	r3, [pc, #16]	; (14dc <button_cb_trampoline+0x14>)
    14cc:	681b      	ldr	r3, [r3, #0]
    14ce:	2b00      	cmp	r3, #0
    14d0:	d002      	beq.n	14d8 <button_cb_trampoline+0x10>
    s_port.button_cb(s_port.button_cb_arg);
    14d2:	4a02      	ldr	r2, [pc, #8]	; (14dc <button_cb_trampoline+0x14>)
    14d4:	6850      	ldr	r0, [r2, #4]
    14d6:	4798      	blx	r3
  }
}
    14d8:	bd10      	pop	{r4, pc}
    14da:	46c0      	nop			; (mov r8, r8)
    14dc:	200001b8 	.word	0x200001b8

000014e0 <rx_done_cb>:
 // 	if (descr->usart_cb.rx_done) {
 // 		descr->usart_cb.rx_done(descr);
 // 	}
 // }
 */
static void rx_done_cb(struct _usart_async_device *device, uint8_t data) {
    14e0:	b510      	push	{r4, lr}
  // capture the data (since the _sercom_usart_interrupt_handler has already
  // read the data and cleared the RXD bit)
  s_rx_data = data;
    14e2:	4b08      	ldr	r3, [pc, #32]	; (1504 <rx_done_cb+0x24>)
    14e4:	2220      	movs	r2, #32
    14e6:	5499      	strb	r1, [r3, r2]
  s_rx_has_data = true;
    14e8:	2101      	movs	r1, #1
    14ea:	3201      	adds	r2, #1
    14ec:	5499      	strb	r1, [r3, r2]

  // clear the start of frame flag so mu_vm_serial_read_in_progress() will
  // return false.
  hri_sercomusart_clear_INTFLAG_RXS_bit(USART_0.device.hw);
    14ee:	4a06      	ldr	r2, [pc, #24]	; (1508 <rx_done_cb+0x28>)
    14f0:	6a12      	ldr	r2, [r2, #32]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    14f2:	3107      	adds	r1, #7
    14f4:	7611      	strb	r1, [r2, #24]

  // notify user callback if set
  if (s_port.rx_cb) {
    14f6:	691b      	ldr	r3, [r3, #16]
    14f8:	2b00      	cmp	r3, #0
    14fa:	d002      	beq.n	1502 <rx_done_cb+0x22>
    s_port.rx_cb(s_port.rx_cb_arg);
    14fc:	4a01      	ldr	r2, [pc, #4]	; (1504 <rx_done_cb+0x24>)
    14fe:	6950      	ldr	r0, [r2, #20]
    1500:	4798      	blx	r3
  }
}
    1502:	bd10      	pop	{r4, pc}
    1504:	200001b8 	.word	0x200001b8
    1508:	20000204 	.word	0x20000204

0000150c <tx_done_cb>:
 // }
 */
static void tx_done_cb(struct _usart_async_device *device) {
  // No action.  In the future, we might use this for an async version of
  // mu_vm_serial_write_in_progress().
  asm("nop");
    150c:	46c0      	nop			; (mov r8, r8)
}
    150e:	4770      	bx	lr

00001510 <error_cb>:
 // 		descr->usart_cb.error(descr);
 // 	}
 // }
 */
static void error_cb(struct _usart_async_device *device) {
  asm("nop");
    1510:	46c0      	nop			; (mov r8, r8)
}
    1512:	4770      	bx	lr

00001514 <rtc_cb_trampoline>:

static void rtc_cb_trampoline(struct calendar_dev *const dev) {
    1514:	b510      	push	{r4, lr}
  // Arrive here when the RTC count register matches the RTC compare register.
  // Even if the user hasn't registered a callback, this will wake the processor
  // from sleep...
  if (s_port.rtc_cb) {
    1516:	4b04      	ldr	r3, [pc, #16]	; (1528 <rtc_cb_trampoline+0x14>)
    1518:	699b      	ldr	r3, [r3, #24]
    151a:	2b00      	cmp	r3, #0
    151c:	d002      	beq.n	1524 <rtc_cb_trampoline+0x10>
    s_port.rtc_cb(s_port.rtc_cb_arg);
    151e:	4a02      	ldr	r2, [pc, #8]	; (1528 <rtc_cb_trampoline+0x14>)
    1520:	69d0      	ldr	r0, [r2, #28]
    1522:	4798      	blx	r3
  }
}
    1524:	bd10      	pop	{r4, pc}
    1526:	46c0      	nop			; (mov r8, r8)
    1528:	200001b8 	.word	0x200001b8

0000152c <tx_byte_sent>:
static void tx_byte_sent(struct _usart_async_device *device) {
    152c:	b510      	push	{r4, lr}
  if (s_tx_has_data) {
    152e:	2322      	movs	r3, #34	; 0x22
    1530:	4a0b      	ldr	r2, [pc, #44]	; (1560 <tx_byte_sent+0x34>)
    1532:	5cd3      	ldrb	r3, [r2, r3]
    1534:	2b00      	cmp	r3, #0
    1536:	d107      	bne.n	1548 <tx_byte_sent+0x1c>
  if (s_port.tx_cb) {
    1538:	4b09      	ldr	r3, [pc, #36]	; (1560 <tx_byte_sent+0x34>)
    153a:	689b      	ldr	r3, [r3, #8]
    153c:	2b00      	cmp	r3, #0
    153e:	d002      	beq.n	1546 <tx_byte_sent+0x1a>
    s_port.tx_cb(s_port.tx_cb_arg);
    1540:	4a07      	ldr	r2, [pc, #28]	; (1560 <tx_byte_sent+0x34>)
    1542:	68d0      	ldr	r0, [r2, #12]
    1544:	4798      	blx	r3
}
    1546:	bd10      	pop	{r4, pc}
    _usart_async_write_byte(&USART_0.device, s_tx_data);
    1548:	0014      	movs	r4, r2
    154a:	2323      	movs	r3, #35	; 0x23
    154c:	5cd1      	ldrb	r1, [r2, r3]
    154e:	b2c9      	uxtb	r1, r1
    1550:	4804      	ldr	r0, [pc, #16]	; (1564 <tx_byte_sent+0x38>)
    1552:	4b05      	ldr	r3, [pc, #20]	; (1568 <tx_byte_sent+0x3c>)
    1554:	4798      	blx	r3
    s_tx_has_data = false;
    1556:	2200      	movs	r2, #0
    1558:	2322      	movs	r3, #34	; 0x22
    155a:	54e2      	strb	r2, [r4, r3]
    155c:	e7ec      	b.n	1538 <tx_byte_sent+0xc>
    155e:	46c0      	nop			; (mov r8, r8)
    1560:	200001b8 	.word	0x200001b8
    1564:	2000020c 	.word	0x2000020c
    1568:	00001149 	.word	0x00001149

0000156c <mu_vm_init>:
void mu_vm_init(void) {
    156c:	b510      	push	{r4, lr}
  memset(&s_port, 0, sizeof(s_port));
    156e:	2220      	movs	r2, #32
    1570:	2100      	movs	r1, #0
    1572:	4813      	ldr	r0, [pc, #76]	; (15c0 <mu_vm_init+0x54>)
    1574:	4b13      	ldr	r3, [pc, #76]	; (15c4 <mu_vm_init+0x58>)
    1576:	4798      	blx	r3
  ext_irq_register(PIN_PA15, button_cb_trampoline);
    1578:	4913      	ldr	r1, [pc, #76]	; (15c8 <mu_vm_init+0x5c>)
    157a:	200f      	movs	r0, #15
    157c:	4b13      	ldr	r3, [pc, #76]	; (15cc <mu_vm_init+0x60>)
    157e:	4798      	blx	r3
  USART_0.device.usart_cb.tx_byte_sent = tx_byte_sent;
    1580:	4b13      	ldr	r3, [pc, #76]	; (15d0 <mu_vm_init+0x64>)
    1582:	4a14      	ldr	r2, [pc, #80]	; (15d4 <mu_vm_init+0x68>)
    1584:	609a      	str	r2, [r3, #8]
  USART_0.device.usart_cb.rx_done_cb = rx_done_cb;
    1586:	4a14      	ldr	r2, [pc, #80]	; (15d8 <mu_vm_init+0x6c>)
    1588:	60da      	str	r2, [r3, #12]
  USART_0.device.usart_cb.tx_done_cb = tx_done_cb;
    158a:	4a14      	ldr	r2, [pc, #80]	; (15dc <mu_vm_init+0x70>)
    158c:	611a      	str	r2, [r3, #16]
  USART_0.device.usart_cb.error_cb = error_cb;
    158e:	4a14      	ldr	r2, [pc, #80]	; (15e0 <mu_vm_init+0x74>)
    1590:	615a      	str	r2, [r3, #20]
  hri_sercomusart_set_CTRLB_SFDE_bit(USART_0.device.hw);
    1592:	6a1a      	ldr	r2, [r3, #32]
	((Sercom *)hw)->USART.CTRLB.reg |= SERCOM_USART_CTRLB_SFDE;
    1594:	6851      	ldr	r1, [r2, #4]
    1596:	2380      	movs	r3, #128	; 0x80
    1598:	009b      	lsls	r3, r3, #2
    159a:	430b      	orrs	r3, r1
    159c:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    159e:	2107      	movs	r1, #7
    15a0:	69d3      	ldr	r3, [r2, #28]
    15a2:	4219      	tst	r1, r3
    15a4:	d1fc      	bne.n	15a0 <mu_vm_init+0x34>
  usart_async_enable(&USART_0);
    15a6:	480a      	ldr	r0, [pc, #40]	; (15d0 <mu_vm_init+0x64>)
    15a8:	4b0e      	ldr	r3, [pc, #56]	; (15e4 <mu_vm_init+0x78>)
    15aa:	4798      	blx	r3
  calendar_enable(&CALENDAR_0); // start RTC
    15ac:	4c0e      	ldr	r4, [pc, #56]	; (15e8 <mu_vm_init+0x7c>)
    15ae:	0020      	movs	r0, r4
    15b0:	4b0e      	ldr	r3, [pc, #56]	; (15ec <mu_vm_init+0x80>)
    15b2:	4798      	blx	r3
  _calendar_register_callback(&CALENDAR_0.device, rtc_cb_trampoline);
    15b4:	490e      	ldr	r1, [pc, #56]	; (15f0 <mu_vm_init+0x84>)
    15b6:	0020      	movs	r0, r4
    15b8:	4b0e      	ldr	r3, [pc, #56]	; (15f4 <mu_vm_init+0x88>)
    15ba:	4798      	blx	r3
}
    15bc:	bd10      	pop	{r4, pc}
    15be:	46c0      	nop			; (mov r8, r8)
    15c0:	200001b8 	.word	0x200001b8
    15c4:	00001ba3 	.word	0x00001ba3
    15c8:	000014c9 	.word	0x000014c9
    15cc:	000007b9 	.word	0x000007b9
    15d0:	20000204 	.word	0x20000204
    15d4:	0000152d 	.word	0x0000152d
    15d8:	000014e1 	.word	0x000014e1
    15dc:	0000150d 	.word	0x0000150d
    15e0:	00001511 	.word	0x00001511
    15e4:	00000a7d 	.word	0x00000a7d
    15e8:	200001e8 	.word	0x200001e8
    15ec:	00000731 	.word	0x00000731
    15f0:	00001515 	.word	0x00001515
    15f4:	00000e91 	.word	0x00000e91

000015f8 <mu_vm_time_offset>:
  return t + dt;
    15f8:	1808      	adds	r0, r1, r0
}
    15fa:	4770      	bx	lr

000015fc <mu_vm_time_difference>:
  return t1 - t2;
    15fc:	1a40      	subs	r0, r0, r1
}
    15fe:	4770      	bx	lr

00001600 <mu_vm_time_precedes>:
  return t1 - t2;
    1600:	1a40      	subs	r0, r0, r1
  return mu_vm_time_difference(t1, t2) > MAX_DURATION;
    1602:	0fc0      	lsrs	r0, r0, #31
}
    1604:	4770      	bx	lr
	...

00001608 <mu_vm_time_ms_to_duration>:
mu_vm_time_dt mu_vm_time_ms_to_duration(mu_vm_time_ms_dt ms) {
    1608:	b510      	push	{r4, lr}
  return quo_rounded(ms * CONF_GCLK_RTC_FREQUENCY, 1000);
    160a:	03c0      	lsls	r0, r0, #15
  //   (y < 0) is false (zero) if x is non-negative
  //   (x < 0) ^ (y < 0) is true if x and y have opposite signs
  //   x/y would be the quotient, but it is truncated towards zero.  To round:
  //   (x + y/2)/y is the rounded quotient when x and y have the same sign
  //   (x - y/2)/y is the rounded quotient when x and y have opposite signs
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
    160c:	d506      	bpl.n	161c <mu_vm_time_ms_to_duration+0x14>
    160e:	38f5      	subs	r0, #245	; 0xf5
    1610:	38ff      	subs	r0, #255	; 0xff
    1612:	21fa      	movs	r1, #250	; 0xfa
    1614:	0089      	lsls	r1, r1, #2
    1616:	4b05      	ldr	r3, [pc, #20]	; (162c <mu_vm_time_ms_to_duration+0x24>)
    1618:	4798      	blx	r3
}
    161a:	bd10      	pop	{r4, pc}
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
    161c:	30f5      	adds	r0, #245	; 0xf5
    161e:	30ff      	adds	r0, #255	; 0xff
    1620:	21fa      	movs	r1, #250	; 0xfa
    1622:	0089      	lsls	r1, r1, #2
    1624:	4b01      	ldr	r3, [pc, #4]	; (162c <mu_vm_time_ms_to_duration+0x24>)
    1626:	4798      	blx	r3
    1628:	e7f7      	b.n	161a <mu_vm_time_ms_to_duration+0x12>
    162a:	46c0      	nop			; (mov r8, r8)
    162c:	000018f9 	.word	0x000018f9

00001630 <mu_vm_rtc_now>:
  return hri_rtcmode0_read_COUNT_COUNT_bf(CALENDAR_0.device.hw);
    1630:	4b03      	ldr	r3, [pc, #12]	; (1640 <mu_vm_rtc_now+0x10>)
    1632:	681a      	ldr	r2, [r3, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1634:	7a93      	ldrb	r3, [r2, #10]
    1636:	09db      	lsrs	r3, r3, #7
    1638:	d1fc      	bne.n	1634 <mu_vm_rtc_now+0x4>
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
    163a:	6910      	ldr	r0, [r2, #16]
}
    163c:	4770      	bx	lr
    163e:	46c0      	nop			; (mov r8, r8)
    1640:	200001e8 	.word	0x200001e8

00001644 <mu_vm_rtc_alarm_at>:
void mu_vm_rtc_alarm_at(mu_vm_time_t at) {
    1644:	b510      	push	{r4, lr}
    1646:	0001      	movs	r1, r0
  _calendar_set_comp(&CALENDAR_0.device, at);
    1648:	4807      	ldr	r0, [pc, #28]	; (1668 <mu_vm_rtc_alarm_at+0x24>)
    164a:	4b08      	ldr	r3, [pc, #32]	; (166c <mu_vm_rtc_alarm_at+0x28>)
    164c:	4798      	blx	r3
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    164e:	4b08      	ldr	r3, [pc, #32]	; (1670 <mu_vm_rtc_alarm_at+0x2c>)
    1650:	885a      	ldrh	r2, [r3, #2]
    1652:	2180      	movs	r1, #128	; 0x80
    1654:	01c9      	lsls	r1, r1, #7
    1656:	430a      	orrs	r2, r1
    1658:	805a      	strh	r2, [r3, #2]
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
    165a:	885a      	ldrh	r2, [r3, #2]
    165c:	2180      	movs	r1, #128	; 0x80
    165e:	0209      	lsls	r1, r1, #8
    1660:	430a      	orrs	r2, r1
    1662:	805a      	strh	r2, [r3, #2]
}
    1664:	bd10      	pop	{r4, pc}
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	200001e8 	.word	0x200001e8
    166c:	00000fad 	.word	0x00000fad
    1670:	40001400 	.word	0x40001400

00001674 <mu_vm_serial_can_write>:
  return hri_sercomusart_get_interrupt_DRE_bit(USART_0.device.hw);
    1674:	4b02      	ldr	r3, [pc, #8]	; (1680 <mu_vm_serial_can_write+0xc>)
    1676:	6a1b      	ldr	r3, [r3, #32]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1678:	7e18      	ldrb	r0, [r3, #24]
    167a:	2301      	movs	r3, #1
    167c:	4018      	ands	r0, r3
}
    167e:	4770      	bx	lr
    1680:	20000204 	.word	0x20000204

00001684 <mu_vm_serial_write>:
void mu_vm_serial_write(uint8_t byte) {
    1684:	b570      	push	{r4, r5, r6, lr}
    1686:	0004      	movs	r4, r0
  if (s_port.tx_cb) {
    1688:	4b12      	ldr	r3, [pc, #72]	; (16d4 <mu_vm_serial_write+0x50>)
    168a:	689b      	ldr	r3, [r3, #8]
    168c:	2b00      	cmp	r3, #0
    168e:	d01f      	beq.n	16d0 <mu_vm_serial_write+0x4c>
    while (s_tx_has_data) {
    1690:	2322      	movs	r3, #34	; 0x22
    1692:	4a10      	ldr	r2, [pc, #64]	; (16d4 <mu_vm_serial_write+0x50>)
    1694:	5cd3      	ldrb	r3, [r2, r3]
    1696:	2b00      	cmp	r3, #0
    1698:	d005      	beq.n	16a6 <mu_vm_serial_write+0x22>
    169a:	0011      	movs	r1, r2
    169c:	2222      	movs	r2, #34	; 0x22
      asm("nop");
    169e:	46c0      	nop			; (mov r8, r8)
    while (s_tx_has_data) {
    16a0:	5c8b      	ldrb	r3, [r1, r2]
    16a2:	2b00      	cmp	r3, #0
    16a4:	d1fb      	bne.n	169e <mu_vm_serial_write+0x1a>
    s_tx_data = byte;
    16a6:	4b0b      	ldr	r3, [pc, #44]	; (16d4 <mu_vm_serial_write+0x50>)
    16a8:	2223      	movs	r2, #35	; 0x23
    16aa:	549c      	strb	r4, [r3, r2]
    s_tx_has_data = true;
    16ac:	2101      	movs	r1, #1
    16ae:	3a01      	subs	r2, #1
    16b0:	5499      	strb	r1, [r3, r2]
    _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_BYTE_SENT, true);
    16b2:	3a21      	subs	r2, #33	; 0x21
    16b4:	2100      	movs	r1, #0
    16b6:	4808      	ldr	r0, [pc, #32]	; (16d8 <mu_vm_serial_write+0x54>)
    16b8:	4b08      	ldr	r3, [pc, #32]	; (16dc <mu_vm_serial_write+0x58>)
    16ba:	4798      	blx	r3
}
    16bc:	bd70      	pop	{r4, r5, r6, pc}
      asm("nop");
    16be:	46c0      	nop			; (mov r8, r8)
    while (!mu_vm_serial_can_write()) {
    16c0:	47a8      	blx	r5
    16c2:	2800      	cmp	r0, #0
    16c4:	d0fb      	beq.n	16be <mu_vm_serial_write+0x3a>
    _usart_async_write_byte(&USART_0.device, byte);
    16c6:	0021      	movs	r1, r4
    16c8:	4803      	ldr	r0, [pc, #12]	; (16d8 <mu_vm_serial_write+0x54>)
    16ca:	4b05      	ldr	r3, [pc, #20]	; (16e0 <mu_vm_serial_write+0x5c>)
    16cc:	4798      	blx	r3
}
    16ce:	e7f5      	b.n	16bc <mu_vm_serial_write+0x38>
    while (!mu_vm_serial_can_write()) {
    16d0:	4d04      	ldr	r5, [pc, #16]	; (16e4 <mu_vm_serial_write+0x60>)
    16d2:	e7f5      	b.n	16c0 <mu_vm_serial_write+0x3c>
    16d4:	200001b8 	.word	0x200001b8
    16d8:	2000020c 	.word	0x2000020c
    16dc:	00001161 	.word	0x00001161
    16e0:	00001149 	.word	0x00001149
    16e4:	00001675 	.word	0x00001675

000016e8 <mu_vm_serial_read>:
uint8_t mu_vm_serial_read(void) {
    16e8:	b510      	push	{r4, lr}
  _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_RX_DONE, true);
    16ea:	2201      	movs	r2, #1
    16ec:	2101      	movs	r1, #1
    16ee:	480b      	ldr	r0, [pc, #44]	; (171c <mu_vm_serial_read+0x34>)
    16f0:	4b0b      	ldr	r3, [pc, #44]	; (1720 <mu_vm_serial_read+0x38>)
    16f2:	4798      	blx	r3
  return s_rx_has_data;
    16f4:	2321      	movs	r3, #33	; 0x21
    16f6:	4a0b      	ldr	r2, [pc, #44]	; (1724 <mu_vm_serial_read+0x3c>)
    16f8:	5cd3      	ldrb	r3, [r2, r3]
  while (!mu_vm_serial_can_read()) {
    16fa:	2b00      	cmp	r3, #0
    16fc:	d105      	bne.n	170a <mu_vm_serial_read+0x22>
  return s_rx_has_data;
    16fe:	0011      	movs	r1, r2
    1700:	2221      	movs	r2, #33	; 0x21
    asm("nop");
    1702:	46c0      	nop			; (mov r8, r8)
  return s_rx_has_data;
    1704:	5c8b      	ldrb	r3, [r1, r2]
  while (!mu_vm_serial_can_read()) {
    1706:	2b00      	cmp	r3, #0
    1708:	d0fb      	beq.n	1702 <mu_vm_serial_read+0x1a>
  s_rx_has_data = false;       // clear the virtual RXD bit
    170a:	4b06      	ldr	r3, [pc, #24]	; (1724 <mu_vm_serial_read+0x3c>)
    170c:	2100      	movs	r1, #0
    170e:	2221      	movs	r2, #33	; 0x21
    1710:	5499      	strb	r1, [r3, r2]
  return s_rx_data;
    1712:	3a01      	subs	r2, #1
    1714:	5c98      	ldrb	r0, [r3, r2]
    1716:	b2c0      	uxtb	r0, r0
}
    1718:	bd10      	pop	{r4, pc}
    171a:	46c0      	nop			; (mov r8, r8)
    171c:	2000020c 	.word	0x2000020c
    1720:	00001161 	.word	0x00001161
    1724:	200001b8 	.word	0x200001b8

00001728 <mu_vm_serial_can_read>:
  return s_rx_has_data;
    1728:	2321      	movs	r3, #33	; 0x21
    172a:	4a02      	ldr	r2, [pc, #8]	; (1734 <mu_vm_serial_can_read+0xc>)
    172c:	5cd0      	ldrb	r0, [r2, r3]
    172e:	b2c0      	uxtb	r0, r0
}
    1730:	4770      	bx	lr
    1732:	46c0      	nop			; (mov r8, r8)
    1734:	200001b8 	.word	0x200001b8

00001738 <mu_vm_sleep_until>:
void mu_vm_sleep_until(mu_vm_time_t then) {
    1738:	b510      	push	{r4, lr}
    173a:	0004      	movs	r4, r0
  mu_vm_time_t now = mu_vm_rtc_now();
    173c:	4b06      	ldr	r3, [pc, #24]	; (1758 <mu_vm_sleep_until+0x20>)
    173e:	4798      	blx	r3
  return t1 - t2;
    1740:	1a20      	subs	r0, r4, r0
  if (mu_vm_time_difference(then, now) > MIN_SLEEP_DURATION) {
    1742:	2820      	cmp	r0, #32
    1744:	dc00      	bgt.n	1748 <mu_vm_sleep_until+0x10>
}
    1746:	bd10      	pop	{r4, pc}
    mu_vm_rtc_alarm_at(then);
    1748:	0020      	movs	r0, r4
    174a:	4b04      	ldr	r3, [pc, #16]	; (175c <mu_vm_sleep_until+0x24>)
    174c:	4798      	blx	r3
  sleep(3); // in hal_sleep
    174e:	2003      	movs	r0, #3
    1750:	4b03      	ldr	r3, [pc, #12]	; (1760 <mu_vm_sleep_until+0x28>)
    1752:	4798      	blx	r3
}
    1754:	e7f7      	b.n	1746 <mu_vm_sleep_until+0xe>
    1756:	46c0      	nop			; (mov r8, r8)
    1758:	00001631 	.word	0x00001631
    175c:	00001645 	.word	0x00001645
    1760:	00000801 	.word	0x00000801

00001764 <mu_vm_sleep>:
void mu_vm_sleep(void) { go_to_sleep(); }
    1764:	b510      	push	{r4, lr}
  sleep(3); // in hal_sleep
    1766:	2003      	movs	r0, #3
    1768:	4b01      	ldr	r3, [pc, #4]	; (1770 <mu_vm_sleep+0xc>)
    176a:	4798      	blx	r3
void mu_vm_sleep(void) { go_to_sleep(); }
    176c:	bd10      	pop	{r4, pc}
    176e:	46c0      	nop			; (mov r8, r8)
    1770:	00000801 	.word	0x00000801

00001774 <_write>:
#include "mu_vm.h"

// ================
// support for printf()

int _write(int file, char *ptr, int len) {
    1774:	b5f0      	push	{r4, r5, r6, r7, lr}
    1776:	46c6      	mov	lr, r8
    1778:	b500      	push	{lr}
    177a:	4690      	mov	r8, r2
  // void file;
  int n = len;

  while (n-- > 0) {
    177c:	2a00      	cmp	r2, #0
    177e:	dd0c      	ble.n	179a <_write+0x26>
    1780:	000d      	movs	r5, r1
    1782:	4441      	add	r1, r8
    1784:	000e      	movs	r6, r1
    while (!mu_vm_serial_can_write())
    1786:	4c07      	ldr	r4, [pc, #28]	; (17a4 <_write+0x30>)
  		;
    mu_vm_serial_write(*ptr++);
    1788:	4f07      	ldr	r7, [pc, #28]	; (17a8 <_write+0x34>)
    while (!mu_vm_serial_can_write())
    178a:	47a0      	blx	r4
    178c:	2800      	cmp	r0, #0
    178e:	d0fc      	beq.n	178a <_write+0x16>
    mu_vm_serial_write(*ptr++);
    1790:	7828      	ldrb	r0, [r5, #0]
    1792:	47b8      	blx	r7
    1794:	3501      	adds	r5, #1
  while (n-- > 0) {
    1796:	42b5      	cmp	r5, r6
    1798:	d1f7      	bne.n	178a <_write+0x16>
  }
  return len;
}
    179a:	4640      	mov	r0, r8
    179c:	bc04      	pop	{r2}
    179e:	4690      	mov	r8, r2
    17a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17a2:	46c0      	nop			; (mov r8, r8)
    17a4:	00001675 	.word	0x00001675
    17a8:	00001685 	.word	0x00001685

000017ac <_read>:

int _read(int file, char *ptr, int len) {
    17ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ae:	46c6      	mov	lr, r8
    17b0:	b500      	push	{lr}
    17b2:	4690      	mov	r8, r2
  // void file;
  int n = len;

  while (n-- > 0) {
    17b4:	2a00      	cmp	r2, #0
    17b6:	dd0c      	ble.n	17d2 <_read+0x26>
    17b8:	000d      	movs	r5, r1
    17ba:	4441      	add	r1, r8
    17bc:	000e      	movs	r6, r1
    while (!mu_vm_serial_can_read())
    17be:	4c07      	ldr	r4, [pc, #28]	; (17dc <_read+0x30>)
			;
    *ptr++ = mu_vm_serial_read();
    17c0:	4f07      	ldr	r7, [pc, #28]	; (17e0 <_read+0x34>)
    while (!mu_vm_serial_can_read())
    17c2:	47a0      	blx	r4
    17c4:	2800      	cmp	r0, #0
    17c6:	d0fc      	beq.n	17c2 <_read+0x16>
    *ptr++ = mu_vm_serial_read();
    17c8:	47b8      	blx	r7
    17ca:	7028      	strb	r0, [r5, #0]
    17cc:	3501      	adds	r5, #1
  while (n-- > 0) {
    17ce:	42b5      	cmp	r5, r6
    17d0:	d1f7      	bne.n	17c2 <_read+0x16>
  }
  return len;
}
    17d2:	4640      	mov	r0, r8
    17d4:	bc04      	pop	{r2}
    17d6:	4690      	mov	r8, r2
    17d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17da:	46c0      	nop			; (mov r8, r8)
    17dc:	00001729 	.word	0x00001729
    17e0:	000016e9 	.word	0x000016e9

000017e4 <__udivsi3>:
    17e4:	2200      	movs	r2, #0
    17e6:	0843      	lsrs	r3, r0, #1
    17e8:	428b      	cmp	r3, r1
    17ea:	d374      	bcc.n	18d6 <__udivsi3+0xf2>
    17ec:	0903      	lsrs	r3, r0, #4
    17ee:	428b      	cmp	r3, r1
    17f0:	d35f      	bcc.n	18b2 <__udivsi3+0xce>
    17f2:	0a03      	lsrs	r3, r0, #8
    17f4:	428b      	cmp	r3, r1
    17f6:	d344      	bcc.n	1882 <__udivsi3+0x9e>
    17f8:	0b03      	lsrs	r3, r0, #12
    17fa:	428b      	cmp	r3, r1
    17fc:	d328      	bcc.n	1850 <__udivsi3+0x6c>
    17fe:	0c03      	lsrs	r3, r0, #16
    1800:	428b      	cmp	r3, r1
    1802:	d30d      	bcc.n	1820 <__udivsi3+0x3c>
    1804:	22ff      	movs	r2, #255	; 0xff
    1806:	0209      	lsls	r1, r1, #8
    1808:	ba12      	rev	r2, r2
    180a:	0c03      	lsrs	r3, r0, #16
    180c:	428b      	cmp	r3, r1
    180e:	d302      	bcc.n	1816 <__udivsi3+0x32>
    1810:	1212      	asrs	r2, r2, #8
    1812:	0209      	lsls	r1, r1, #8
    1814:	d065      	beq.n	18e2 <__udivsi3+0xfe>
    1816:	0b03      	lsrs	r3, r0, #12
    1818:	428b      	cmp	r3, r1
    181a:	d319      	bcc.n	1850 <__udivsi3+0x6c>
    181c:	e000      	b.n	1820 <__udivsi3+0x3c>
    181e:	0a09      	lsrs	r1, r1, #8
    1820:	0bc3      	lsrs	r3, r0, #15
    1822:	428b      	cmp	r3, r1
    1824:	d301      	bcc.n	182a <__udivsi3+0x46>
    1826:	03cb      	lsls	r3, r1, #15
    1828:	1ac0      	subs	r0, r0, r3
    182a:	4152      	adcs	r2, r2
    182c:	0b83      	lsrs	r3, r0, #14
    182e:	428b      	cmp	r3, r1
    1830:	d301      	bcc.n	1836 <__udivsi3+0x52>
    1832:	038b      	lsls	r3, r1, #14
    1834:	1ac0      	subs	r0, r0, r3
    1836:	4152      	adcs	r2, r2
    1838:	0b43      	lsrs	r3, r0, #13
    183a:	428b      	cmp	r3, r1
    183c:	d301      	bcc.n	1842 <__udivsi3+0x5e>
    183e:	034b      	lsls	r3, r1, #13
    1840:	1ac0      	subs	r0, r0, r3
    1842:	4152      	adcs	r2, r2
    1844:	0b03      	lsrs	r3, r0, #12
    1846:	428b      	cmp	r3, r1
    1848:	d301      	bcc.n	184e <__udivsi3+0x6a>
    184a:	030b      	lsls	r3, r1, #12
    184c:	1ac0      	subs	r0, r0, r3
    184e:	4152      	adcs	r2, r2
    1850:	0ac3      	lsrs	r3, r0, #11
    1852:	428b      	cmp	r3, r1
    1854:	d301      	bcc.n	185a <__udivsi3+0x76>
    1856:	02cb      	lsls	r3, r1, #11
    1858:	1ac0      	subs	r0, r0, r3
    185a:	4152      	adcs	r2, r2
    185c:	0a83      	lsrs	r3, r0, #10
    185e:	428b      	cmp	r3, r1
    1860:	d301      	bcc.n	1866 <__udivsi3+0x82>
    1862:	028b      	lsls	r3, r1, #10
    1864:	1ac0      	subs	r0, r0, r3
    1866:	4152      	adcs	r2, r2
    1868:	0a43      	lsrs	r3, r0, #9
    186a:	428b      	cmp	r3, r1
    186c:	d301      	bcc.n	1872 <__udivsi3+0x8e>
    186e:	024b      	lsls	r3, r1, #9
    1870:	1ac0      	subs	r0, r0, r3
    1872:	4152      	adcs	r2, r2
    1874:	0a03      	lsrs	r3, r0, #8
    1876:	428b      	cmp	r3, r1
    1878:	d301      	bcc.n	187e <__udivsi3+0x9a>
    187a:	020b      	lsls	r3, r1, #8
    187c:	1ac0      	subs	r0, r0, r3
    187e:	4152      	adcs	r2, r2
    1880:	d2cd      	bcs.n	181e <__udivsi3+0x3a>
    1882:	09c3      	lsrs	r3, r0, #7
    1884:	428b      	cmp	r3, r1
    1886:	d301      	bcc.n	188c <__udivsi3+0xa8>
    1888:	01cb      	lsls	r3, r1, #7
    188a:	1ac0      	subs	r0, r0, r3
    188c:	4152      	adcs	r2, r2
    188e:	0983      	lsrs	r3, r0, #6
    1890:	428b      	cmp	r3, r1
    1892:	d301      	bcc.n	1898 <__udivsi3+0xb4>
    1894:	018b      	lsls	r3, r1, #6
    1896:	1ac0      	subs	r0, r0, r3
    1898:	4152      	adcs	r2, r2
    189a:	0943      	lsrs	r3, r0, #5
    189c:	428b      	cmp	r3, r1
    189e:	d301      	bcc.n	18a4 <__udivsi3+0xc0>
    18a0:	014b      	lsls	r3, r1, #5
    18a2:	1ac0      	subs	r0, r0, r3
    18a4:	4152      	adcs	r2, r2
    18a6:	0903      	lsrs	r3, r0, #4
    18a8:	428b      	cmp	r3, r1
    18aa:	d301      	bcc.n	18b0 <__udivsi3+0xcc>
    18ac:	010b      	lsls	r3, r1, #4
    18ae:	1ac0      	subs	r0, r0, r3
    18b0:	4152      	adcs	r2, r2
    18b2:	08c3      	lsrs	r3, r0, #3
    18b4:	428b      	cmp	r3, r1
    18b6:	d301      	bcc.n	18bc <__udivsi3+0xd8>
    18b8:	00cb      	lsls	r3, r1, #3
    18ba:	1ac0      	subs	r0, r0, r3
    18bc:	4152      	adcs	r2, r2
    18be:	0883      	lsrs	r3, r0, #2
    18c0:	428b      	cmp	r3, r1
    18c2:	d301      	bcc.n	18c8 <__udivsi3+0xe4>
    18c4:	008b      	lsls	r3, r1, #2
    18c6:	1ac0      	subs	r0, r0, r3
    18c8:	4152      	adcs	r2, r2
    18ca:	0843      	lsrs	r3, r0, #1
    18cc:	428b      	cmp	r3, r1
    18ce:	d301      	bcc.n	18d4 <__udivsi3+0xf0>
    18d0:	004b      	lsls	r3, r1, #1
    18d2:	1ac0      	subs	r0, r0, r3
    18d4:	4152      	adcs	r2, r2
    18d6:	1a41      	subs	r1, r0, r1
    18d8:	d200      	bcs.n	18dc <__udivsi3+0xf8>
    18da:	4601      	mov	r1, r0
    18dc:	4152      	adcs	r2, r2
    18de:	4610      	mov	r0, r2
    18e0:	4770      	bx	lr
    18e2:	e7ff      	b.n	18e4 <__udivsi3+0x100>
    18e4:	b501      	push	{r0, lr}
    18e6:	2000      	movs	r0, #0
    18e8:	f000 f8f0 	bl	1acc <__aeabi_idiv0>
    18ec:	bd02      	pop	{r1, pc}
    18ee:	46c0      	nop			; (mov r8, r8)

000018f0 <__aeabi_uidivmod>:
    18f0:	2900      	cmp	r1, #0
    18f2:	d0f7      	beq.n	18e4 <__udivsi3+0x100>
    18f4:	e776      	b.n	17e4 <__udivsi3>
    18f6:	4770      	bx	lr

000018f8 <__divsi3>:
    18f8:	4603      	mov	r3, r0
    18fa:	430b      	orrs	r3, r1
    18fc:	d47f      	bmi.n	19fe <__divsi3+0x106>
    18fe:	2200      	movs	r2, #0
    1900:	0843      	lsrs	r3, r0, #1
    1902:	428b      	cmp	r3, r1
    1904:	d374      	bcc.n	19f0 <__divsi3+0xf8>
    1906:	0903      	lsrs	r3, r0, #4
    1908:	428b      	cmp	r3, r1
    190a:	d35f      	bcc.n	19cc <__divsi3+0xd4>
    190c:	0a03      	lsrs	r3, r0, #8
    190e:	428b      	cmp	r3, r1
    1910:	d344      	bcc.n	199c <__divsi3+0xa4>
    1912:	0b03      	lsrs	r3, r0, #12
    1914:	428b      	cmp	r3, r1
    1916:	d328      	bcc.n	196a <__divsi3+0x72>
    1918:	0c03      	lsrs	r3, r0, #16
    191a:	428b      	cmp	r3, r1
    191c:	d30d      	bcc.n	193a <__divsi3+0x42>
    191e:	22ff      	movs	r2, #255	; 0xff
    1920:	0209      	lsls	r1, r1, #8
    1922:	ba12      	rev	r2, r2
    1924:	0c03      	lsrs	r3, r0, #16
    1926:	428b      	cmp	r3, r1
    1928:	d302      	bcc.n	1930 <__divsi3+0x38>
    192a:	1212      	asrs	r2, r2, #8
    192c:	0209      	lsls	r1, r1, #8
    192e:	d065      	beq.n	19fc <__divsi3+0x104>
    1930:	0b03      	lsrs	r3, r0, #12
    1932:	428b      	cmp	r3, r1
    1934:	d319      	bcc.n	196a <__divsi3+0x72>
    1936:	e000      	b.n	193a <__divsi3+0x42>
    1938:	0a09      	lsrs	r1, r1, #8
    193a:	0bc3      	lsrs	r3, r0, #15
    193c:	428b      	cmp	r3, r1
    193e:	d301      	bcc.n	1944 <__divsi3+0x4c>
    1940:	03cb      	lsls	r3, r1, #15
    1942:	1ac0      	subs	r0, r0, r3
    1944:	4152      	adcs	r2, r2
    1946:	0b83      	lsrs	r3, r0, #14
    1948:	428b      	cmp	r3, r1
    194a:	d301      	bcc.n	1950 <__divsi3+0x58>
    194c:	038b      	lsls	r3, r1, #14
    194e:	1ac0      	subs	r0, r0, r3
    1950:	4152      	adcs	r2, r2
    1952:	0b43      	lsrs	r3, r0, #13
    1954:	428b      	cmp	r3, r1
    1956:	d301      	bcc.n	195c <__divsi3+0x64>
    1958:	034b      	lsls	r3, r1, #13
    195a:	1ac0      	subs	r0, r0, r3
    195c:	4152      	adcs	r2, r2
    195e:	0b03      	lsrs	r3, r0, #12
    1960:	428b      	cmp	r3, r1
    1962:	d301      	bcc.n	1968 <__divsi3+0x70>
    1964:	030b      	lsls	r3, r1, #12
    1966:	1ac0      	subs	r0, r0, r3
    1968:	4152      	adcs	r2, r2
    196a:	0ac3      	lsrs	r3, r0, #11
    196c:	428b      	cmp	r3, r1
    196e:	d301      	bcc.n	1974 <__divsi3+0x7c>
    1970:	02cb      	lsls	r3, r1, #11
    1972:	1ac0      	subs	r0, r0, r3
    1974:	4152      	adcs	r2, r2
    1976:	0a83      	lsrs	r3, r0, #10
    1978:	428b      	cmp	r3, r1
    197a:	d301      	bcc.n	1980 <__divsi3+0x88>
    197c:	028b      	lsls	r3, r1, #10
    197e:	1ac0      	subs	r0, r0, r3
    1980:	4152      	adcs	r2, r2
    1982:	0a43      	lsrs	r3, r0, #9
    1984:	428b      	cmp	r3, r1
    1986:	d301      	bcc.n	198c <__divsi3+0x94>
    1988:	024b      	lsls	r3, r1, #9
    198a:	1ac0      	subs	r0, r0, r3
    198c:	4152      	adcs	r2, r2
    198e:	0a03      	lsrs	r3, r0, #8
    1990:	428b      	cmp	r3, r1
    1992:	d301      	bcc.n	1998 <__divsi3+0xa0>
    1994:	020b      	lsls	r3, r1, #8
    1996:	1ac0      	subs	r0, r0, r3
    1998:	4152      	adcs	r2, r2
    199a:	d2cd      	bcs.n	1938 <__divsi3+0x40>
    199c:	09c3      	lsrs	r3, r0, #7
    199e:	428b      	cmp	r3, r1
    19a0:	d301      	bcc.n	19a6 <__divsi3+0xae>
    19a2:	01cb      	lsls	r3, r1, #7
    19a4:	1ac0      	subs	r0, r0, r3
    19a6:	4152      	adcs	r2, r2
    19a8:	0983      	lsrs	r3, r0, #6
    19aa:	428b      	cmp	r3, r1
    19ac:	d301      	bcc.n	19b2 <__divsi3+0xba>
    19ae:	018b      	lsls	r3, r1, #6
    19b0:	1ac0      	subs	r0, r0, r3
    19b2:	4152      	adcs	r2, r2
    19b4:	0943      	lsrs	r3, r0, #5
    19b6:	428b      	cmp	r3, r1
    19b8:	d301      	bcc.n	19be <__divsi3+0xc6>
    19ba:	014b      	lsls	r3, r1, #5
    19bc:	1ac0      	subs	r0, r0, r3
    19be:	4152      	adcs	r2, r2
    19c0:	0903      	lsrs	r3, r0, #4
    19c2:	428b      	cmp	r3, r1
    19c4:	d301      	bcc.n	19ca <__divsi3+0xd2>
    19c6:	010b      	lsls	r3, r1, #4
    19c8:	1ac0      	subs	r0, r0, r3
    19ca:	4152      	adcs	r2, r2
    19cc:	08c3      	lsrs	r3, r0, #3
    19ce:	428b      	cmp	r3, r1
    19d0:	d301      	bcc.n	19d6 <__divsi3+0xde>
    19d2:	00cb      	lsls	r3, r1, #3
    19d4:	1ac0      	subs	r0, r0, r3
    19d6:	4152      	adcs	r2, r2
    19d8:	0883      	lsrs	r3, r0, #2
    19da:	428b      	cmp	r3, r1
    19dc:	d301      	bcc.n	19e2 <__divsi3+0xea>
    19de:	008b      	lsls	r3, r1, #2
    19e0:	1ac0      	subs	r0, r0, r3
    19e2:	4152      	adcs	r2, r2
    19e4:	0843      	lsrs	r3, r0, #1
    19e6:	428b      	cmp	r3, r1
    19e8:	d301      	bcc.n	19ee <__divsi3+0xf6>
    19ea:	004b      	lsls	r3, r1, #1
    19ec:	1ac0      	subs	r0, r0, r3
    19ee:	4152      	adcs	r2, r2
    19f0:	1a41      	subs	r1, r0, r1
    19f2:	d200      	bcs.n	19f6 <__divsi3+0xfe>
    19f4:	4601      	mov	r1, r0
    19f6:	4152      	adcs	r2, r2
    19f8:	4610      	mov	r0, r2
    19fa:	4770      	bx	lr
    19fc:	e05d      	b.n	1aba <__divsi3+0x1c2>
    19fe:	0fca      	lsrs	r2, r1, #31
    1a00:	d000      	beq.n	1a04 <__divsi3+0x10c>
    1a02:	4249      	negs	r1, r1
    1a04:	1003      	asrs	r3, r0, #32
    1a06:	d300      	bcc.n	1a0a <__divsi3+0x112>
    1a08:	4240      	negs	r0, r0
    1a0a:	4053      	eors	r3, r2
    1a0c:	2200      	movs	r2, #0
    1a0e:	469c      	mov	ip, r3
    1a10:	0903      	lsrs	r3, r0, #4
    1a12:	428b      	cmp	r3, r1
    1a14:	d32d      	bcc.n	1a72 <__divsi3+0x17a>
    1a16:	0a03      	lsrs	r3, r0, #8
    1a18:	428b      	cmp	r3, r1
    1a1a:	d312      	bcc.n	1a42 <__divsi3+0x14a>
    1a1c:	22fc      	movs	r2, #252	; 0xfc
    1a1e:	0189      	lsls	r1, r1, #6
    1a20:	ba12      	rev	r2, r2
    1a22:	0a03      	lsrs	r3, r0, #8
    1a24:	428b      	cmp	r3, r1
    1a26:	d30c      	bcc.n	1a42 <__divsi3+0x14a>
    1a28:	0189      	lsls	r1, r1, #6
    1a2a:	1192      	asrs	r2, r2, #6
    1a2c:	428b      	cmp	r3, r1
    1a2e:	d308      	bcc.n	1a42 <__divsi3+0x14a>
    1a30:	0189      	lsls	r1, r1, #6
    1a32:	1192      	asrs	r2, r2, #6
    1a34:	428b      	cmp	r3, r1
    1a36:	d304      	bcc.n	1a42 <__divsi3+0x14a>
    1a38:	0189      	lsls	r1, r1, #6
    1a3a:	d03a      	beq.n	1ab2 <__divsi3+0x1ba>
    1a3c:	1192      	asrs	r2, r2, #6
    1a3e:	e000      	b.n	1a42 <__divsi3+0x14a>
    1a40:	0989      	lsrs	r1, r1, #6
    1a42:	09c3      	lsrs	r3, r0, #7
    1a44:	428b      	cmp	r3, r1
    1a46:	d301      	bcc.n	1a4c <__divsi3+0x154>
    1a48:	01cb      	lsls	r3, r1, #7
    1a4a:	1ac0      	subs	r0, r0, r3
    1a4c:	4152      	adcs	r2, r2
    1a4e:	0983      	lsrs	r3, r0, #6
    1a50:	428b      	cmp	r3, r1
    1a52:	d301      	bcc.n	1a58 <__divsi3+0x160>
    1a54:	018b      	lsls	r3, r1, #6
    1a56:	1ac0      	subs	r0, r0, r3
    1a58:	4152      	adcs	r2, r2
    1a5a:	0943      	lsrs	r3, r0, #5
    1a5c:	428b      	cmp	r3, r1
    1a5e:	d301      	bcc.n	1a64 <__divsi3+0x16c>
    1a60:	014b      	lsls	r3, r1, #5
    1a62:	1ac0      	subs	r0, r0, r3
    1a64:	4152      	adcs	r2, r2
    1a66:	0903      	lsrs	r3, r0, #4
    1a68:	428b      	cmp	r3, r1
    1a6a:	d301      	bcc.n	1a70 <__divsi3+0x178>
    1a6c:	010b      	lsls	r3, r1, #4
    1a6e:	1ac0      	subs	r0, r0, r3
    1a70:	4152      	adcs	r2, r2
    1a72:	08c3      	lsrs	r3, r0, #3
    1a74:	428b      	cmp	r3, r1
    1a76:	d301      	bcc.n	1a7c <__divsi3+0x184>
    1a78:	00cb      	lsls	r3, r1, #3
    1a7a:	1ac0      	subs	r0, r0, r3
    1a7c:	4152      	adcs	r2, r2
    1a7e:	0883      	lsrs	r3, r0, #2
    1a80:	428b      	cmp	r3, r1
    1a82:	d301      	bcc.n	1a88 <__divsi3+0x190>
    1a84:	008b      	lsls	r3, r1, #2
    1a86:	1ac0      	subs	r0, r0, r3
    1a88:	4152      	adcs	r2, r2
    1a8a:	d2d9      	bcs.n	1a40 <__divsi3+0x148>
    1a8c:	0843      	lsrs	r3, r0, #1
    1a8e:	428b      	cmp	r3, r1
    1a90:	d301      	bcc.n	1a96 <__divsi3+0x19e>
    1a92:	004b      	lsls	r3, r1, #1
    1a94:	1ac0      	subs	r0, r0, r3
    1a96:	4152      	adcs	r2, r2
    1a98:	1a41      	subs	r1, r0, r1
    1a9a:	d200      	bcs.n	1a9e <__divsi3+0x1a6>
    1a9c:	4601      	mov	r1, r0
    1a9e:	4663      	mov	r3, ip
    1aa0:	4152      	adcs	r2, r2
    1aa2:	105b      	asrs	r3, r3, #1
    1aa4:	4610      	mov	r0, r2
    1aa6:	d301      	bcc.n	1aac <__divsi3+0x1b4>
    1aa8:	4240      	negs	r0, r0
    1aaa:	2b00      	cmp	r3, #0
    1aac:	d500      	bpl.n	1ab0 <__divsi3+0x1b8>
    1aae:	4249      	negs	r1, r1
    1ab0:	4770      	bx	lr
    1ab2:	4663      	mov	r3, ip
    1ab4:	105b      	asrs	r3, r3, #1
    1ab6:	d300      	bcc.n	1aba <__divsi3+0x1c2>
    1ab8:	4240      	negs	r0, r0
    1aba:	b501      	push	{r0, lr}
    1abc:	2000      	movs	r0, #0
    1abe:	f000 f805 	bl	1acc <__aeabi_idiv0>
    1ac2:	bd02      	pop	{r1, pc}

00001ac4 <__aeabi_idivmod>:
    1ac4:	2900      	cmp	r1, #0
    1ac6:	d0f8      	beq.n	1aba <__divsi3+0x1c2>
    1ac8:	e716      	b.n	18f8 <__divsi3>
    1aca:	4770      	bx	lr

00001acc <__aeabi_idiv0>:
    1acc:	4770      	bx	lr
    1ace:	46c0      	nop			; (mov r8, r8)

00001ad0 <__ffssi2>:
    1ad0:	b510      	push	{r4, lr}
    1ad2:	2300      	movs	r3, #0
    1ad4:	2800      	cmp	r0, #0
    1ad6:	d002      	beq.n	1ade <__ffssi2+0xe>
    1ad8:	f000 f804 	bl	1ae4 <__ctzsi2>
    1adc:	1c43      	adds	r3, r0, #1
    1ade:	0018      	movs	r0, r3
    1ae0:	bd10      	pop	{r4, pc}
    1ae2:	46c0      	nop			; (mov r8, r8)

00001ae4 <__ctzsi2>:
    1ae4:	4241      	negs	r1, r0
    1ae6:	4008      	ands	r0, r1
    1ae8:	211c      	movs	r1, #28
    1aea:	2301      	movs	r3, #1
    1aec:	041b      	lsls	r3, r3, #16
    1aee:	4298      	cmp	r0, r3
    1af0:	d301      	bcc.n	1af6 <__ctzsi2+0x12>
    1af2:	0c00      	lsrs	r0, r0, #16
    1af4:	3910      	subs	r1, #16
    1af6:	0a1b      	lsrs	r3, r3, #8
    1af8:	4298      	cmp	r0, r3
    1afa:	d301      	bcc.n	1b00 <__ctzsi2+0x1c>
    1afc:	0a00      	lsrs	r0, r0, #8
    1afe:	3908      	subs	r1, #8
    1b00:	091b      	lsrs	r3, r3, #4
    1b02:	4298      	cmp	r0, r3
    1b04:	d301      	bcc.n	1b0a <__ctzsi2+0x26>
    1b06:	0900      	lsrs	r0, r0, #4
    1b08:	3904      	subs	r1, #4
    1b0a:	a202      	add	r2, pc, #8	; (adr r2, 1b14 <__ctzsi2+0x30>)
    1b0c:	5c10      	ldrb	r0, [r2, r0]
    1b0e:	1a40      	subs	r0, r0, r1
    1b10:	4770      	bx	lr
    1b12:	46c0      	nop			; (mov r8, r8)
    1b14:	1d1d1c1b 	.word	0x1d1d1c1b
    1b18:	1e1e1e1e 	.word	0x1e1e1e1e
    1b1c:	1f1f1f1f 	.word	0x1f1f1f1f
    1b20:	1f1f1f1f 	.word	0x1f1f1f1f

00001b24 <__libc_init_array>:
    1b24:	b570      	push	{r4, r5, r6, lr}
    1b26:	2600      	movs	r6, #0
    1b28:	4d0c      	ldr	r5, [pc, #48]	; (1b5c <__libc_init_array+0x38>)
    1b2a:	4c0d      	ldr	r4, [pc, #52]	; (1b60 <__libc_init_array+0x3c>)
    1b2c:	1b64      	subs	r4, r4, r5
    1b2e:	10a4      	asrs	r4, r4, #2
    1b30:	42a6      	cmp	r6, r4
    1b32:	d109      	bne.n	1b48 <__libc_init_array+0x24>
    1b34:	2600      	movs	r6, #0
    1b36:	f001 f8cf 	bl	2cd8 <_init>
    1b3a:	4d0a      	ldr	r5, [pc, #40]	; (1b64 <__libc_init_array+0x40>)
    1b3c:	4c0a      	ldr	r4, [pc, #40]	; (1b68 <__libc_init_array+0x44>)
    1b3e:	1b64      	subs	r4, r4, r5
    1b40:	10a4      	asrs	r4, r4, #2
    1b42:	42a6      	cmp	r6, r4
    1b44:	d105      	bne.n	1b52 <__libc_init_array+0x2e>
    1b46:	bd70      	pop	{r4, r5, r6, pc}
    1b48:	00b3      	lsls	r3, r6, #2
    1b4a:	58eb      	ldr	r3, [r5, r3]
    1b4c:	4798      	blx	r3
    1b4e:	3601      	adds	r6, #1
    1b50:	e7ee      	b.n	1b30 <__libc_init_array+0xc>
    1b52:	00b3      	lsls	r3, r6, #2
    1b54:	58eb      	ldr	r3, [r5, r3]
    1b56:	4798      	blx	r3
    1b58:	3601      	adds	r6, #1
    1b5a:	e7f2      	b.n	1b42 <__libc_init_array+0x1e>
    1b5c:	00002ce4 	.word	0x00002ce4
    1b60:	00002ce4 	.word	0x00002ce4
    1b64:	00002ce4 	.word	0x00002ce4
    1b68:	00002ce8 	.word	0x00002ce8

00001b6c <memcpy>:
    1b6c:	2300      	movs	r3, #0
    1b6e:	b510      	push	{r4, lr}
    1b70:	429a      	cmp	r2, r3
    1b72:	d100      	bne.n	1b76 <memcpy+0xa>
    1b74:	bd10      	pop	{r4, pc}
    1b76:	5ccc      	ldrb	r4, [r1, r3]
    1b78:	54c4      	strb	r4, [r0, r3]
    1b7a:	3301      	adds	r3, #1
    1b7c:	e7f8      	b.n	1b70 <memcpy+0x4>

00001b7e <memmove>:
    1b7e:	b510      	push	{r4, lr}
    1b80:	4288      	cmp	r0, r1
    1b82:	d902      	bls.n	1b8a <memmove+0xc>
    1b84:	188b      	adds	r3, r1, r2
    1b86:	4298      	cmp	r0, r3
    1b88:	d308      	bcc.n	1b9c <memmove+0x1e>
    1b8a:	2300      	movs	r3, #0
    1b8c:	429a      	cmp	r2, r3
    1b8e:	d007      	beq.n	1ba0 <memmove+0x22>
    1b90:	5ccc      	ldrb	r4, [r1, r3]
    1b92:	54c4      	strb	r4, [r0, r3]
    1b94:	3301      	adds	r3, #1
    1b96:	e7f9      	b.n	1b8c <memmove+0xe>
    1b98:	5c8b      	ldrb	r3, [r1, r2]
    1b9a:	5483      	strb	r3, [r0, r2]
    1b9c:	3a01      	subs	r2, #1
    1b9e:	d2fb      	bcs.n	1b98 <memmove+0x1a>
    1ba0:	bd10      	pop	{r4, pc}

00001ba2 <memset>:
    1ba2:	0003      	movs	r3, r0
    1ba4:	1882      	adds	r2, r0, r2
    1ba6:	4293      	cmp	r3, r2
    1ba8:	d100      	bne.n	1bac <memset+0xa>
    1baa:	4770      	bx	lr
    1bac:	7019      	strb	r1, [r3, #0]
    1bae:	3301      	adds	r3, #1
    1bb0:	e7f9      	b.n	1ba6 <memset+0x4>
	...

00001bb4 <iprintf>:
    1bb4:	b40f      	push	{r0, r1, r2, r3}
    1bb6:	4b0b      	ldr	r3, [pc, #44]	; (1be4 <iprintf+0x30>)
    1bb8:	b513      	push	{r0, r1, r4, lr}
    1bba:	681c      	ldr	r4, [r3, #0]
    1bbc:	2c00      	cmp	r4, #0
    1bbe:	d005      	beq.n	1bcc <iprintf+0x18>
    1bc0:	69a3      	ldr	r3, [r4, #24]
    1bc2:	2b00      	cmp	r3, #0
    1bc4:	d102      	bne.n	1bcc <iprintf+0x18>
    1bc6:	0020      	movs	r0, r4
    1bc8:	f000 fa3c 	bl	2044 <__sinit>
    1bcc:	ab05      	add	r3, sp, #20
    1bce:	9a04      	ldr	r2, [sp, #16]
    1bd0:	68a1      	ldr	r1, [r4, #8]
    1bd2:	0020      	movs	r0, r4
    1bd4:	9301      	str	r3, [sp, #4]
    1bd6:	f000 fc07 	bl	23e8 <_vfiprintf_r>
    1bda:	bc16      	pop	{r1, r2, r4}
    1bdc:	bc08      	pop	{r3}
    1bde:	b004      	add	sp, #16
    1be0:	4718      	bx	r3
    1be2:	46c0      	nop			; (mov r8, r8)
    1be4:	20000000 	.word	0x20000000

00001be8 <_puts_r>:
    1be8:	b570      	push	{r4, r5, r6, lr}
    1bea:	0005      	movs	r5, r0
    1bec:	000e      	movs	r6, r1
    1bee:	2800      	cmp	r0, #0
    1bf0:	d004      	beq.n	1bfc <_puts_r+0x14>
    1bf2:	6983      	ldr	r3, [r0, #24]
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	d101      	bne.n	1bfc <_puts_r+0x14>
    1bf8:	f000 fa24 	bl	2044 <__sinit>
    1bfc:	69ab      	ldr	r3, [r5, #24]
    1bfe:	68ac      	ldr	r4, [r5, #8]
    1c00:	2b00      	cmp	r3, #0
    1c02:	d102      	bne.n	1c0a <_puts_r+0x22>
    1c04:	0028      	movs	r0, r5
    1c06:	f000 fa1d 	bl	2044 <__sinit>
    1c0a:	4b24      	ldr	r3, [pc, #144]	; (1c9c <_puts_r+0xb4>)
    1c0c:	429c      	cmp	r4, r3
    1c0e:	d10f      	bne.n	1c30 <_puts_r+0x48>
    1c10:	686c      	ldr	r4, [r5, #4]
    1c12:	89a3      	ldrh	r3, [r4, #12]
    1c14:	071b      	lsls	r3, r3, #28
    1c16:	d502      	bpl.n	1c1e <_puts_r+0x36>
    1c18:	6923      	ldr	r3, [r4, #16]
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	d120      	bne.n	1c60 <_puts_r+0x78>
    1c1e:	0021      	movs	r1, r4
    1c20:	0028      	movs	r0, r5
    1c22:	f000 f8a1 	bl	1d68 <__swsetup_r>
    1c26:	2800      	cmp	r0, #0
    1c28:	d01a      	beq.n	1c60 <_puts_r+0x78>
    1c2a:	2001      	movs	r0, #1
    1c2c:	4240      	negs	r0, r0
    1c2e:	bd70      	pop	{r4, r5, r6, pc}
    1c30:	4b1b      	ldr	r3, [pc, #108]	; (1ca0 <_puts_r+0xb8>)
    1c32:	429c      	cmp	r4, r3
    1c34:	d101      	bne.n	1c3a <_puts_r+0x52>
    1c36:	68ac      	ldr	r4, [r5, #8]
    1c38:	e7eb      	b.n	1c12 <_puts_r+0x2a>
    1c3a:	4b1a      	ldr	r3, [pc, #104]	; (1ca4 <_puts_r+0xbc>)
    1c3c:	429c      	cmp	r4, r3
    1c3e:	d1e8      	bne.n	1c12 <_puts_r+0x2a>
    1c40:	68ec      	ldr	r4, [r5, #12]
    1c42:	e7e6      	b.n	1c12 <_puts_r+0x2a>
    1c44:	3b01      	subs	r3, #1
    1c46:	3601      	adds	r6, #1
    1c48:	60a3      	str	r3, [r4, #8]
    1c4a:	2b00      	cmp	r3, #0
    1c4c:	da04      	bge.n	1c58 <_puts_r+0x70>
    1c4e:	69a2      	ldr	r2, [r4, #24]
    1c50:	4293      	cmp	r3, r2
    1c52:	db16      	blt.n	1c82 <_puts_r+0x9a>
    1c54:	290a      	cmp	r1, #10
    1c56:	d014      	beq.n	1c82 <_puts_r+0x9a>
    1c58:	6823      	ldr	r3, [r4, #0]
    1c5a:	1c5a      	adds	r2, r3, #1
    1c5c:	6022      	str	r2, [r4, #0]
    1c5e:	7019      	strb	r1, [r3, #0]
    1c60:	7831      	ldrb	r1, [r6, #0]
    1c62:	68a3      	ldr	r3, [r4, #8]
    1c64:	2900      	cmp	r1, #0
    1c66:	d1ed      	bne.n	1c44 <_puts_r+0x5c>
    1c68:	3b01      	subs	r3, #1
    1c6a:	60a3      	str	r3, [r4, #8]
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	da0f      	bge.n	1c90 <_puts_r+0xa8>
    1c70:	0022      	movs	r2, r4
    1c72:	310a      	adds	r1, #10
    1c74:	0028      	movs	r0, r5
    1c76:	f000 f821 	bl	1cbc <__swbuf_r>
    1c7a:	1c43      	adds	r3, r0, #1
    1c7c:	d0d5      	beq.n	1c2a <_puts_r+0x42>
    1c7e:	200a      	movs	r0, #10
    1c80:	e7d5      	b.n	1c2e <_puts_r+0x46>
    1c82:	0022      	movs	r2, r4
    1c84:	0028      	movs	r0, r5
    1c86:	f000 f819 	bl	1cbc <__swbuf_r>
    1c8a:	1c43      	adds	r3, r0, #1
    1c8c:	d1e8      	bne.n	1c60 <_puts_r+0x78>
    1c8e:	e7cc      	b.n	1c2a <_puts_r+0x42>
    1c90:	200a      	movs	r0, #10
    1c92:	6823      	ldr	r3, [r4, #0]
    1c94:	1c5a      	adds	r2, r3, #1
    1c96:	6022      	str	r2, [r4, #0]
    1c98:	7018      	strb	r0, [r3, #0]
    1c9a:	e7c8      	b.n	1c2e <_puts_r+0x46>
    1c9c:	00002c64 	.word	0x00002c64
    1ca0:	00002c84 	.word	0x00002c84
    1ca4:	00002c44 	.word	0x00002c44

00001ca8 <puts>:
    1ca8:	b510      	push	{r4, lr}
    1caa:	4b03      	ldr	r3, [pc, #12]	; (1cb8 <puts+0x10>)
    1cac:	0001      	movs	r1, r0
    1cae:	6818      	ldr	r0, [r3, #0]
    1cb0:	f7ff ff9a 	bl	1be8 <_puts_r>
    1cb4:	bd10      	pop	{r4, pc}
    1cb6:	46c0      	nop			; (mov r8, r8)
    1cb8:	20000000 	.word	0x20000000

00001cbc <__swbuf_r>:
    1cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cbe:	0005      	movs	r5, r0
    1cc0:	000e      	movs	r6, r1
    1cc2:	0014      	movs	r4, r2
    1cc4:	2800      	cmp	r0, #0
    1cc6:	d004      	beq.n	1cd2 <__swbuf_r+0x16>
    1cc8:	6983      	ldr	r3, [r0, #24]
    1cca:	2b00      	cmp	r3, #0
    1ccc:	d101      	bne.n	1cd2 <__swbuf_r+0x16>
    1cce:	f000 f9b9 	bl	2044 <__sinit>
    1cd2:	4b22      	ldr	r3, [pc, #136]	; (1d5c <__swbuf_r+0xa0>)
    1cd4:	429c      	cmp	r4, r3
    1cd6:	d12d      	bne.n	1d34 <__swbuf_r+0x78>
    1cd8:	686c      	ldr	r4, [r5, #4]
    1cda:	69a3      	ldr	r3, [r4, #24]
    1cdc:	60a3      	str	r3, [r4, #8]
    1cde:	89a3      	ldrh	r3, [r4, #12]
    1ce0:	071b      	lsls	r3, r3, #28
    1ce2:	d531      	bpl.n	1d48 <__swbuf_r+0x8c>
    1ce4:	6923      	ldr	r3, [r4, #16]
    1ce6:	2b00      	cmp	r3, #0
    1ce8:	d02e      	beq.n	1d48 <__swbuf_r+0x8c>
    1cea:	6823      	ldr	r3, [r4, #0]
    1cec:	6922      	ldr	r2, [r4, #16]
    1cee:	b2f7      	uxtb	r7, r6
    1cf0:	1a98      	subs	r0, r3, r2
    1cf2:	6963      	ldr	r3, [r4, #20]
    1cf4:	b2f6      	uxtb	r6, r6
    1cf6:	4298      	cmp	r0, r3
    1cf8:	db05      	blt.n	1d06 <__swbuf_r+0x4a>
    1cfa:	0021      	movs	r1, r4
    1cfc:	0028      	movs	r0, r5
    1cfe:	f000 f933 	bl	1f68 <_fflush_r>
    1d02:	2800      	cmp	r0, #0
    1d04:	d126      	bne.n	1d54 <__swbuf_r+0x98>
    1d06:	68a3      	ldr	r3, [r4, #8]
    1d08:	3001      	adds	r0, #1
    1d0a:	3b01      	subs	r3, #1
    1d0c:	60a3      	str	r3, [r4, #8]
    1d0e:	6823      	ldr	r3, [r4, #0]
    1d10:	1c5a      	adds	r2, r3, #1
    1d12:	6022      	str	r2, [r4, #0]
    1d14:	701f      	strb	r7, [r3, #0]
    1d16:	6963      	ldr	r3, [r4, #20]
    1d18:	4298      	cmp	r0, r3
    1d1a:	d004      	beq.n	1d26 <__swbuf_r+0x6a>
    1d1c:	89a3      	ldrh	r3, [r4, #12]
    1d1e:	07db      	lsls	r3, r3, #31
    1d20:	d51a      	bpl.n	1d58 <__swbuf_r+0x9c>
    1d22:	2e0a      	cmp	r6, #10
    1d24:	d118      	bne.n	1d58 <__swbuf_r+0x9c>
    1d26:	0021      	movs	r1, r4
    1d28:	0028      	movs	r0, r5
    1d2a:	f000 f91d 	bl	1f68 <_fflush_r>
    1d2e:	2800      	cmp	r0, #0
    1d30:	d012      	beq.n	1d58 <__swbuf_r+0x9c>
    1d32:	e00f      	b.n	1d54 <__swbuf_r+0x98>
    1d34:	4b0a      	ldr	r3, [pc, #40]	; (1d60 <__swbuf_r+0xa4>)
    1d36:	429c      	cmp	r4, r3
    1d38:	d101      	bne.n	1d3e <__swbuf_r+0x82>
    1d3a:	68ac      	ldr	r4, [r5, #8]
    1d3c:	e7cd      	b.n	1cda <__swbuf_r+0x1e>
    1d3e:	4b09      	ldr	r3, [pc, #36]	; (1d64 <__swbuf_r+0xa8>)
    1d40:	429c      	cmp	r4, r3
    1d42:	d1ca      	bne.n	1cda <__swbuf_r+0x1e>
    1d44:	68ec      	ldr	r4, [r5, #12]
    1d46:	e7c8      	b.n	1cda <__swbuf_r+0x1e>
    1d48:	0021      	movs	r1, r4
    1d4a:	0028      	movs	r0, r5
    1d4c:	f000 f80c 	bl	1d68 <__swsetup_r>
    1d50:	2800      	cmp	r0, #0
    1d52:	d0ca      	beq.n	1cea <__swbuf_r+0x2e>
    1d54:	2601      	movs	r6, #1
    1d56:	4276      	negs	r6, r6
    1d58:	0030      	movs	r0, r6
    1d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d5c:	00002c64 	.word	0x00002c64
    1d60:	00002c84 	.word	0x00002c84
    1d64:	00002c44 	.word	0x00002c44

00001d68 <__swsetup_r>:
    1d68:	4b36      	ldr	r3, [pc, #216]	; (1e44 <__swsetup_r+0xdc>)
    1d6a:	b570      	push	{r4, r5, r6, lr}
    1d6c:	681d      	ldr	r5, [r3, #0]
    1d6e:	0006      	movs	r6, r0
    1d70:	000c      	movs	r4, r1
    1d72:	2d00      	cmp	r5, #0
    1d74:	d005      	beq.n	1d82 <__swsetup_r+0x1a>
    1d76:	69ab      	ldr	r3, [r5, #24]
    1d78:	2b00      	cmp	r3, #0
    1d7a:	d102      	bne.n	1d82 <__swsetup_r+0x1a>
    1d7c:	0028      	movs	r0, r5
    1d7e:	f000 f961 	bl	2044 <__sinit>
    1d82:	4b31      	ldr	r3, [pc, #196]	; (1e48 <__swsetup_r+0xe0>)
    1d84:	429c      	cmp	r4, r3
    1d86:	d10f      	bne.n	1da8 <__swsetup_r+0x40>
    1d88:	686c      	ldr	r4, [r5, #4]
    1d8a:	230c      	movs	r3, #12
    1d8c:	5ee2      	ldrsh	r2, [r4, r3]
    1d8e:	b293      	uxth	r3, r2
    1d90:	0719      	lsls	r1, r3, #28
    1d92:	d42d      	bmi.n	1df0 <__swsetup_r+0x88>
    1d94:	06d9      	lsls	r1, r3, #27
    1d96:	d411      	bmi.n	1dbc <__swsetup_r+0x54>
    1d98:	2309      	movs	r3, #9
    1d9a:	2001      	movs	r0, #1
    1d9c:	6033      	str	r3, [r6, #0]
    1d9e:	3337      	adds	r3, #55	; 0x37
    1da0:	4313      	orrs	r3, r2
    1da2:	81a3      	strh	r3, [r4, #12]
    1da4:	4240      	negs	r0, r0
    1da6:	bd70      	pop	{r4, r5, r6, pc}
    1da8:	4b28      	ldr	r3, [pc, #160]	; (1e4c <__swsetup_r+0xe4>)
    1daa:	429c      	cmp	r4, r3
    1dac:	d101      	bne.n	1db2 <__swsetup_r+0x4a>
    1dae:	68ac      	ldr	r4, [r5, #8]
    1db0:	e7eb      	b.n	1d8a <__swsetup_r+0x22>
    1db2:	4b27      	ldr	r3, [pc, #156]	; (1e50 <__swsetup_r+0xe8>)
    1db4:	429c      	cmp	r4, r3
    1db6:	d1e8      	bne.n	1d8a <__swsetup_r+0x22>
    1db8:	68ec      	ldr	r4, [r5, #12]
    1dba:	e7e6      	b.n	1d8a <__swsetup_r+0x22>
    1dbc:	075b      	lsls	r3, r3, #29
    1dbe:	d513      	bpl.n	1de8 <__swsetup_r+0x80>
    1dc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1dc2:	2900      	cmp	r1, #0
    1dc4:	d008      	beq.n	1dd8 <__swsetup_r+0x70>
    1dc6:	0023      	movs	r3, r4
    1dc8:	3344      	adds	r3, #68	; 0x44
    1dca:	4299      	cmp	r1, r3
    1dcc:	d002      	beq.n	1dd4 <__swsetup_r+0x6c>
    1dce:	0030      	movs	r0, r6
    1dd0:	f000 fa3a 	bl	2248 <_free_r>
    1dd4:	2300      	movs	r3, #0
    1dd6:	6363      	str	r3, [r4, #52]	; 0x34
    1dd8:	2224      	movs	r2, #36	; 0x24
    1dda:	89a3      	ldrh	r3, [r4, #12]
    1ddc:	4393      	bics	r3, r2
    1dde:	81a3      	strh	r3, [r4, #12]
    1de0:	2300      	movs	r3, #0
    1de2:	6063      	str	r3, [r4, #4]
    1de4:	6923      	ldr	r3, [r4, #16]
    1de6:	6023      	str	r3, [r4, #0]
    1de8:	2308      	movs	r3, #8
    1dea:	89a2      	ldrh	r2, [r4, #12]
    1dec:	4313      	orrs	r3, r2
    1dee:	81a3      	strh	r3, [r4, #12]
    1df0:	6923      	ldr	r3, [r4, #16]
    1df2:	2b00      	cmp	r3, #0
    1df4:	d10b      	bne.n	1e0e <__swsetup_r+0xa6>
    1df6:	21a0      	movs	r1, #160	; 0xa0
    1df8:	2280      	movs	r2, #128	; 0x80
    1dfa:	89a3      	ldrh	r3, [r4, #12]
    1dfc:	0089      	lsls	r1, r1, #2
    1dfe:	0092      	lsls	r2, r2, #2
    1e00:	400b      	ands	r3, r1
    1e02:	4293      	cmp	r3, r2
    1e04:	d003      	beq.n	1e0e <__swsetup_r+0xa6>
    1e06:	0021      	movs	r1, r4
    1e08:	0030      	movs	r0, r6
    1e0a:	f000 f9d9 	bl	21c0 <__smakebuf_r>
    1e0e:	2301      	movs	r3, #1
    1e10:	89a2      	ldrh	r2, [r4, #12]
    1e12:	4013      	ands	r3, r2
    1e14:	d011      	beq.n	1e3a <__swsetup_r+0xd2>
    1e16:	2300      	movs	r3, #0
    1e18:	60a3      	str	r3, [r4, #8]
    1e1a:	6963      	ldr	r3, [r4, #20]
    1e1c:	425b      	negs	r3, r3
    1e1e:	61a3      	str	r3, [r4, #24]
    1e20:	2000      	movs	r0, #0
    1e22:	6923      	ldr	r3, [r4, #16]
    1e24:	4283      	cmp	r3, r0
    1e26:	d1be      	bne.n	1da6 <__swsetup_r+0x3e>
    1e28:	230c      	movs	r3, #12
    1e2a:	5ee2      	ldrsh	r2, [r4, r3]
    1e2c:	0613      	lsls	r3, r2, #24
    1e2e:	d5ba      	bpl.n	1da6 <__swsetup_r+0x3e>
    1e30:	2340      	movs	r3, #64	; 0x40
    1e32:	4313      	orrs	r3, r2
    1e34:	81a3      	strh	r3, [r4, #12]
    1e36:	3801      	subs	r0, #1
    1e38:	e7b5      	b.n	1da6 <__swsetup_r+0x3e>
    1e3a:	0792      	lsls	r2, r2, #30
    1e3c:	d400      	bmi.n	1e40 <__swsetup_r+0xd8>
    1e3e:	6963      	ldr	r3, [r4, #20]
    1e40:	60a3      	str	r3, [r4, #8]
    1e42:	e7ed      	b.n	1e20 <__swsetup_r+0xb8>
    1e44:	20000000 	.word	0x20000000
    1e48:	00002c64 	.word	0x00002c64
    1e4c:	00002c84 	.word	0x00002c84
    1e50:	00002c44 	.word	0x00002c44

00001e54 <__sflush_r>:
    1e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e56:	898a      	ldrh	r2, [r1, #12]
    1e58:	0005      	movs	r5, r0
    1e5a:	000c      	movs	r4, r1
    1e5c:	0713      	lsls	r3, r2, #28
    1e5e:	d460      	bmi.n	1f22 <__sflush_r+0xce>
    1e60:	684b      	ldr	r3, [r1, #4]
    1e62:	2b00      	cmp	r3, #0
    1e64:	dc04      	bgt.n	1e70 <__sflush_r+0x1c>
    1e66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1e68:	2b00      	cmp	r3, #0
    1e6a:	dc01      	bgt.n	1e70 <__sflush_r+0x1c>
    1e6c:	2000      	movs	r0, #0
    1e6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1e70:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1e72:	2f00      	cmp	r7, #0
    1e74:	d0fa      	beq.n	1e6c <__sflush_r+0x18>
    1e76:	2300      	movs	r3, #0
    1e78:	682e      	ldr	r6, [r5, #0]
    1e7a:	602b      	str	r3, [r5, #0]
    1e7c:	2380      	movs	r3, #128	; 0x80
    1e7e:	015b      	lsls	r3, r3, #5
    1e80:	401a      	ands	r2, r3
    1e82:	d034      	beq.n	1eee <__sflush_r+0x9a>
    1e84:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1e86:	89a3      	ldrh	r3, [r4, #12]
    1e88:	075b      	lsls	r3, r3, #29
    1e8a:	d506      	bpl.n	1e9a <__sflush_r+0x46>
    1e8c:	6863      	ldr	r3, [r4, #4]
    1e8e:	1ac0      	subs	r0, r0, r3
    1e90:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1e92:	2b00      	cmp	r3, #0
    1e94:	d001      	beq.n	1e9a <__sflush_r+0x46>
    1e96:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1e98:	1ac0      	subs	r0, r0, r3
    1e9a:	0002      	movs	r2, r0
    1e9c:	6a21      	ldr	r1, [r4, #32]
    1e9e:	2300      	movs	r3, #0
    1ea0:	0028      	movs	r0, r5
    1ea2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1ea4:	47b8      	blx	r7
    1ea6:	89a1      	ldrh	r1, [r4, #12]
    1ea8:	1c43      	adds	r3, r0, #1
    1eaa:	d106      	bne.n	1eba <__sflush_r+0x66>
    1eac:	682b      	ldr	r3, [r5, #0]
    1eae:	2b1d      	cmp	r3, #29
    1eb0:	d831      	bhi.n	1f16 <__sflush_r+0xc2>
    1eb2:	4a2c      	ldr	r2, [pc, #176]	; (1f64 <__sflush_r+0x110>)
    1eb4:	40da      	lsrs	r2, r3
    1eb6:	07d3      	lsls	r3, r2, #31
    1eb8:	d52d      	bpl.n	1f16 <__sflush_r+0xc2>
    1eba:	2300      	movs	r3, #0
    1ebc:	6063      	str	r3, [r4, #4]
    1ebe:	6923      	ldr	r3, [r4, #16]
    1ec0:	6023      	str	r3, [r4, #0]
    1ec2:	04cb      	lsls	r3, r1, #19
    1ec4:	d505      	bpl.n	1ed2 <__sflush_r+0x7e>
    1ec6:	1c43      	adds	r3, r0, #1
    1ec8:	d102      	bne.n	1ed0 <__sflush_r+0x7c>
    1eca:	682b      	ldr	r3, [r5, #0]
    1ecc:	2b00      	cmp	r3, #0
    1ece:	d100      	bne.n	1ed2 <__sflush_r+0x7e>
    1ed0:	6560      	str	r0, [r4, #84]	; 0x54
    1ed2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1ed4:	602e      	str	r6, [r5, #0]
    1ed6:	2900      	cmp	r1, #0
    1ed8:	d0c8      	beq.n	1e6c <__sflush_r+0x18>
    1eda:	0023      	movs	r3, r4
    1edc:	3344      	adds	r3, #68	; 0x44
    1ede:	4299      	cmp	r1, r3
    1ee0:	d002      	beq.n	1ee8 <__sflush_r+0x94>
    1ee2:	0028      	movs	r0, r5
    1ee4:	f000 f9b0 	bl	2248 <_free_r>
    1ee8:	2000      	movs	r0, #0
    1eea:	6360      	str	r0, [r4, #52]	; 0x34
    1eec:	e7bf      	b.n	1e6e <__sflush_r+0x1a>
    1eee:	2301      	movs	r3, #1
    1ef0:	6a21      	ldr	r1, [r4, #32]
    1ef2:	0028      	movs	r0, r5
    1ef4:	47b8      	blx	r7
    1ef6:	1c43      	adds	r3, r0, #1
    1ef8:	d1c5      	bne.n	1e86 <__sflush_r+0x32>
    1efa:	682b      	ldr	r3, [r5, #0]
    1efc:	2b00      	cmp	r3, #0
    1efe:	d0c2      	beq.n	1e86 <__sflush_r+0x32>
    1f00:	2b1d      	cmp	r3, #29
    1f02:	d001      	beq.n	1f08 <__sflush_r+0xb4>
    1f04:	2b16      	cmp	r3, #22
    1f06:	d101      	bne.n	1f0c <__sflush_r+0xb8>
    1f08:	602e      	str	r6, [r5, #0]
    1f0a:	e7af      	b.n	1e6c <__sflush_r+0x18>
    1f0c:	2340      	movs	r3, #64	; 0x40
    1f0e:	89a2      	ldrh	r2, [r4, #12]
    1f10:	4313      	orrs	r3, r2
    1f12:	81a3      	strh	r3, [r4, #12]
    1f14:	e7ab      	b.n	1e6e <__sflush_r+0x1a>
    1f16:	2340      	movs	r3, #64	; 0x40
    1f18:	430b      	orrs	r3, r1
    1f1a:	2001      	movs	r0, #1
    1f1c:	81a3      	strh	r3, [r4, #12]
    1f1e:	4240      	negs	r0, r0
    1f20:	e7a5      	b.n	1e6e <__sflush_r+0x1a>
    1f22:	690f      	ldr	r7, [r1, #16]
    1f24:	2f00      	cmp	r7, #0
    1f26:	d0a1      	beq.n	1e6c <__sflush_r+0x18>
    1f28:	680b      	ldr	r3, [r1, #0]
    1f2a:	600f      	str	r7, [r1, #0]
    1f2c:	1bdb      	subs	r3, r3, r7
    1f2e:	9301      	str	r3, [sp, #4]
    1f30:	2300      	movs	r3, #0
    1f32:	0792      	lsls	r2, r2, #30
    1f34:	d100      	bne.n	1f38 <__sflush_r+0xe4>
    1f36:	694b      	ldr	r3, [r1, #20]
    1f38:	60a3      	str	r3, [r4, #8]
    1f3a:	9b01      	ldr	r3, [sp, #4]
    1f3c:	2b00      	cmp	r3, #0
    1f3e:	dc00      	bgt.n	1f42 <__sflush_r+0xee>
    1f40:	e794      	b.n	1e6c <__sflush_r+0x18>
    1f42:	9b01      	ldr	r3, [sp, #4]
    1f44:	003a      	movs	r2, r7
    1f46:	6a21      	ldr	r1, [r4, #32]
    1f48:	0028      	movs	r0, r5
    1f4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1f4c:	47b0      	blx	r6
    1f4e:	2800      	cmp	r0, #0
    1f50:	dc03      	bgt.n	1f5a <__sflush_r+0x106>
    1f52:	2340      	movs	r3, #64	; 0x40
    1f54:	89a2      	ldrh	r2, [r4, #12]
    1f56:	4313      	orrs	r3, r2
    1f58:	e7df      	b.n	1f1a <__sflush_r+0xc6>
    1f5a:	9b01      	ldr	r3, [sp, #4]
    1f5c:	183f      	adds	r7, r7, r0
    1f5e:	1a1b      	subs	r3, r3, r0
    1f60:	9301      	str	r3, [sp, #4]
    1f62:	e7ea      	b.n	1f3a <__sflush_r+0xe6>
    1f64:	20400001 	.word	0x20400001

00001f68 <_fflush_r>:
    1f68:	690b      	ldr	r3, [r1, #16]
    1f6a:	b570      	push	{r4, r5, r6, lr}
    1f6c:	0005      	movs	r5, r0
    1f6e:	000c      	movs	r4, r1
    1f70:	2b00      	cmp	r3, #0
    1f72:	d101      	bne.n	1f78 <_fflush_r+0x10>
    1f74:	2000      	movs	r0, #0
    1f76:	bd70      	pop	{r4, r5, r6, pc}
    1f78:	2800      	cmp	r0, #0
    1f7a:	d004      	beq.n	1f86 <_fflush_r+0x1e>
    1f7c:	6983      	ldr	r3, [r0, #24]
    1f7e:	2b00      	cmp	r3, #0
    1f80:	d101      	bne.n	1f86 <_fflush_r+0x1e>
    1f82:	f000 f85f 	bl	2044 <__sinit>
    1f86:	4b0b      	ldr	r3, [pc, #44]	; (1fb4 <_fflush_r+0x4c>)
    1f88:	429c      	cmp	r4, r3
    1f8a:	d109      	bne.n	1fa0 <_fflush_r+0x38>
    1f8c:	686c      	ldr	r4, [r5, #4]
    1f8e:	220c      	movs	r2, #12
    1f90:	5ea3      	ldrsh	r3, [r4, r2]
    1f92:	2b00      	cmp	r3, #0
    1f94:	d0ee      	beq.n	1f74 <_fflush_r+0xc>
    1f96:	0021      	movs	r1, r4
    1f98:	0028      	movs	r0, r5
    1f9a:	f7ff ff5b 	bl	1e54 <__sflush_r>
    1f9e:	e7ea      	b.n	1f76 <_fflush_r+0xe>
    1fa0:	4b05      	ldr	r3, [pc, #20]	; (1fb8 <_fflush_r+0x50>)
    1fa2:	429c      	cmp	r4, r3
    1fa4:	d101      	bne.n	1faa <_fflush_r+0x42>
    1fa6:	68ac      	ldr	r4, [r5, #8]
    1fa8:	e7f1      	b.n	1f8e <_fflush_r+0x26>
    1faa:	4b04      	ldr	r3, [pc, #16]	; (1fbc <_fflush_r+0x54>)
    1fac:	429c      	cmp	r4, r3
    1fae:	d1ee      	bne.n	1f8e <_fflush_r+0x26>
    1fb0:	68ec      	ldr	r4, [r5, #12]
    1fb2:	e7ec      	b.n	1f8e <_fflush_r+0x26>
    1fb4:	00002c64 	.word	0x00002c64
    1fb8:	00002c84 	.word	0x00002c84
    1fbc:	00002c44 	.word	0x00002c44

00001fc0 <_cleanup_r>:
    1fc0:	b510      	push	{r4, lr}
    1fc2:	4902      	ldr	r1, [pc, #8]	; (1fcc <_cleanup_r+0xc>)
    1fc4:	f000 f8b2 	bl	212c <_fwalk_reent>
    1fc8:	bd10      	pop	{r4, pc}
    1fca:	46c0      	nop			; (mov r8, r8)
    1fcc:	00001f69 	.word	0x00001f69

00001fd0 <std.isra.0>:
    1fd0:	2300      	movs	r3, #0
    1fd2:	b510      	push	{r4, lr}
    1fd4:	0004      	movs	r4, r0
    1fd6:	6003      	str	r3, [r0, #0]
    1fd8:	6043      	str	r3, [r0, #4]
    1fda:	6083      	str	r3, [r0, #8]
    1fdc:	8181      	strh	r1, [r0, #12]
    1fde:	6643      	str	r3, [r0, #100]	; 0x64
    1fe0:	81c2      	strh	r2, [r0, #14]
    1fe2:	6103      	str	r3, [r0, #16]
    1fe4:	6143      	str	r3, [r0, #20]
    1fe6:	6183      	str	r3, [r0, #24]
    1fe8:	0019      	movs	r1, r3
    1fea:	2208      	movs	r2, #8
    1fec:	305c      	adds	r0, #92	; 0x5c
    1fee:	f7ff fdd8 	bl	1ba2 <memset>
    1ff2:	4b05      	ldr	r3, [pc, #20]	; (2008 <STACK_SIZE+0x8>)
    1ff4:	6224      	str	r4, [r4, #32]
    1ff6:	6263      	str	r3, [r4, #36]	; 0x24
    1ff8:	4b04      	ldr	r3, [pc, #16]	; (200c <STACK_SIZE+0xc>)
    1ffa:	62a3      	str	r3, [r4, #40]	; 0x28
    1ffc:	4b04      	ldr	r3, [pc, #16]	; (2010 <STACK_SIZE+0x10>)
    1ffe:	62e3      	str	r3, [r4, #44]	; 0x2c
    2000:	4b04      	ldr	r3, [pc, #16]	; (2014 <STACK_SIZE+0x14>)
    2002:	6323      	str	r3, [r4, #48]	; 0x30
    2004:	bd10      	pop	{r4, pc}
    2006:	46c0      	nop			; (mov r8, r8)
    2008:	00002955 	.word	0x00002955
    200c:	0000297d 	.word	0x0000297d
    2010:	000029b5 	.word	0x000029b5
    2014:	000029e1 	.word	0x000029e1

00002018 <__sfmoreglue>:
    2018:	b570      	push	{r4, r5, r6, lr}
    201a:	2568      	movs	r5, #104	; 0x68
    201c:	1e4a      	subs	r2, r1, #1
    201e:	4355      	muls	r5, r2
    2020:	000e      	movs	r6, r1
    2022:	0029      	movs	r1, r5
    2024:	3174      	adds	r1, #116	; 0x74
    2026:	f000 f959 	bl	22dc <_malloc_r>
    202a:	1e04      	subs	r4, r0, #0
    202c:	d008      	beq.n	2040 <__sfmoreglue+0x28>
    202e:	2100      	movs	r1, #0
    2030:	002a      	movs	r2, r5
    2032:	6001      	str	r1, [r0, #0]
    2034:	6046      	str	r6, [r0, #4]
    2036:	300c      	adds	r0, #12
    2038:	60a0      	str	r0, [r4, #8]
    203a:	3268      	adds	r2, #104	; 0x68
    203c:	f7ff fdb1 	bl	1ba2 <memset>
    2040:	0020      	movs	r0, r4
    2042:	bd70      	pop	{r4, r5, r6, pc}

00002044 <__sinit>:
    2044:	6983      	ldr	r3, [r0, #24]
    2046:	b513      	push	{r0, r1, r4, lr}
    2048:	0004      	movs	r4, r0
    204a:	2b00      	cmp	r3, #0
    204c:	d128      	bne.n	20a0 <__sinit+0x5c>
    204e:	6483      	str	r3, [r0, #72]	; 0x48
    2050:	64c3      	str	r3, [r0, #76]	; 0x4c
    2052:	6503      	str	r3, [r0, #80]	; 0x50
    2054:	4b13      	ldr	r3, [pc, #76]	; (20a4 <__sinit+0x60>)
    2056:	4a14      	ldr	r2, [pc, #80]	; (20a8 <__sinit+0x64>)
    2058:	681b      	ldr	r3, [r3, #0]
    205a:	6282      	str	r2, [r0, #40]	; 0x28
    205c:	9301      	str	r3, [sp, #4]
    205e:	4298      	cmp	r0, r3
    2060:	d101      	bne.n	2066 <__sinit+0x22>
    2062:	2301      	movs	r3, #1
    2064:	6183      	str	r3, [r0, #24]
    2066:	0020      	movs	r0, r4
    2068:	f000 f820 	bl	20ac <__sfp>
    206c:	6060      	str	r0, [r4, #4]
    206e:	0020      	movs	r0, r4
    2070:	f000 f81c 	bl	20ac <__sfp>
    2074:	60a0      	str	r0, [r4, #8]
    2076:	0020      	movs	r0, r4
    2078:	f000 f818 	bl	20ac <__sfp>
    207c:	2200      	movs	r2, #0
    207e:	60e0      	str	r0, [r4, #12]
    2080:	2104      	movs	r1, #4
    2082:	6860      	ldr	r0, [r4, #4]
    2084:	f7ff ffa4 	bl	1fd0 <std.isra.0>
    2088:	2201      	movs	r2, #1
    208a:	2109      	movs	r1, #9
    208c:	68a0      	ldr	r0, [r4, #8]
    208e:	f7ff ff9f 	bl	1fd0 <std.isra.0>
    2092:	2202      	movs	r2, #2
    2094:	2112      	movs	r1, #18
    2096:	68e0      	ldr	r0, [r4, #12]
    2098:	f7ff ff9a 	bl	1fd0 <std.isra.0>
    209c:	2301      	movs	r3, #1
    209e:	61a3      	str	r3, [r4, #24]
    20a0:	bd13      	pop	{r0, r1, r4, pc}
    20a2:	46c0      	nop			; (mov r8, r8)
    20a4:	00002c40 	.word	0x00002c40
    20a8:	00001fc1 	.word	0x00001fc1

000020ac <__sfp>:
    20ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20ae:	4b1e      	ldr	r3, [pc, #120]	; (2128 <__sfp+0x7c>)
    20b0:	0007      	movs	r7, r0
    20b2:	681e      	ldr	r6, [r3, #0]
    20b4:	69b3      	ldr	r3, [r6, #24]
    20b6:	2b00      	cmp	r3, #0
    20b8:	d102      	bne.n	20c0 <__sfp+0x14>
    20ba:	0030      	movs	r0, r6
    20bc:	f7ff ffc2 	bl	2044 <__sinit>
    20c0:	3648      	adds	r6, #72	; 0x48
    20c2:	68b4      	ldr	r4, [r6, #8]
    20c4:	6873      	ldr	r3, [r6, #4]
    20c6:	3b01      	subs	r3, #1
    20c8:	d504      	bpl.n	20d4 <__sfp+0x28>
    20ca:	6833      	ldr	r3, [r6, #0]
    20cc:	2b00      	cmp	r3, #0
    20ce:	d007      	beq.n	20e0 <__sfp+0x34>
    20d0:	6836      	ldr	r6, [r6, #0]
    20d2:	e7f6      	b.n	20c2 <__sfp+0x16>
    20d4:	220c      	movs	r2, #12
    20d6:	5ea5      	ldrsh	r5, [r4, r2]
    20d8:	2d00      	cmp	r5, #0
    20da:	d00d      	beq.n	20f8 <__sfp+0x4c>
    20dc:	3468      	adds	r4, #104	; 0x68
    20de:	e7f2      	b.n	20c6 <__sfp+0x1a>
    20e0:	2104      	movs	r1, #4
    20e2:	0038      	movs	r0, r7
    20e4:	f7ff ff98 	bl	2018 <__sfmoreglue>
    20e8:	6030      	str	r0, [r6, #0]
    20ea:	2800      	cmp	r0, #0
    20ec:	d1f0      	bne.n	20d0 <__sfp+0x24>
    20ee:	230c      	movs	r3, #12
    20f0:	0004      	movs	r4, r0
    20f2:	603b      	str	r3, [r7, #0]
    20f4:	0020      	movs	r0, r4
    20f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20f8:	2301      	movs	r3, #1
    20fa:	0020      	movs	r0, r4
    20fc:	425b      	negs	r3, r3
    20fe:	81e3      	strh	r3, [r4, #14]
    2100:	3302      	adds	r3, #2
    2102:	81a3      	strh	r3, [r4, #12]
    2104:	6665      	str	r5, [r4, #100]	; 0x64
    2106:	6025      	str	r5, [r4, #0]
    2108:	60a5      	str	r5, [r4, #8]
    210a:	6065      	str	r5, [r4, #4]
    210c:	6125      	str	r5, [r4, #16]
    210e:	6165      	str	r5, [r4, #20]
    2110:	61a5      	str	r5, [r4, #24]
    2112:	2208      	movs	r2, #8
    2114:	0029      	movs	r1, r5
    2116:	305c      	adds	r0, #92	; 0x5c
    2118:	f7ff fd43 	bl	1ba2 <memset>
    211c:	6365      	str	r5, [r4, #52]	; 0x34
    211e:	63a5      	str	r5, [r4, #56]	; 0x38
    2120:	64a5      	str	r5, [r4, #72]	; 0x48
    2122:	64e5      	str	r5, [r4, #76]	; 0x4c
    2124:	e7e6      	b.n	20f4 <__sfp+0x48>
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	00002c40 	.word	0x00002c40

0000212c <_fwalk_reent>:
    212c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    212e:	0004      	movs	r4, r0
    2130:	0007      	movs	r7, r0
    2132:	2600      	movs	r6, #0
    2134:	9101      	str	r1, [sp, #4]
    2136:	3448      	adds	r4, #72	; 0x48
    2138:	2c00      	cmp	r4, #0
    213a:	d101      	bne.n	2140 <_fwalk_reent+0x14>
    213c:	0030      	movs	r0, r6
    213e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2140:	6863      	ldr	r3, [r4, #4]
    2142:	68a5      	ldr	r5, [r4, #8]
    2144:	9300      	str	r3, [sp, #0]
    2146:	9b00      	ldr	r3, [sp, #0]
    2148:	3b01      	subs	r3, #1
    214a:	9300      	str	r3, [sp, #0]
    214c:	d501      	bpl.n	2152 <_fwalk_reent+0x26>
    214e:	6824      	ldr	r4, [r4, #0]
    2150:	e7f2      	b.n	2138 <_fwalk_reent+0xc>
    2152:	89ab      	ldrh	r3, [r5, #12]
    2154:	2b01      	cmp	r3, #1
    2156:	d908      	bls.n	216a <_fwalk_reent+0x3e>
    2158:	220e      	movs	r2, #14
    215a:	5eab      	ldrsh	r3, [r5, r2]
    215c:	3301      	adds	r3, #1
    215e:	d004      	beq.n	216a <_fwalk_reent+0x3e>
    2160:	0029      	movs	r1, r5
    2162:	0038      	movs	r0, r7
    2164:	9b01      	ldr	r3, [sp, #4]
    2166:	4798      	blx	r3
    2168:	4306      	orrs	r6, r0
    216a:	3568      	adds	r5, #104	; 0x68
    216c:	e7eb      	b.n	2146 <_fwalk_reent+0x1a>
	...

00002170 <__swhatbuf_r>:
    2170:	b570      	push	{r4, r5, r6, lr}
    2172:	000e      	movs	r6, r1
    2174:	001d      	movs	r5, r3
    2176:	230e      	movs	r3, #14
    2178:	5ec9      	ldrsh	r1, [r1, r3]
    217a:	b090      	sub	sp, #64	; 0x40
    217c:	0014      	movs	r4, r2
    217e:	2900      	cmp	r1, #0
    2180:	da07      	bge.n	2192 <__swhatbuf_r+0x22>
    2182:	2300      	movs	r3, #0
    2184:	602b      	str	r3, [r5, #0]
    2186:	89b3      	ldrh	r3, [r6, #12]
    2188:	061b      	lsls	r3, r3, #24
    218a:	d411      	bmi.n	21b0 <__swhatbuf_r+0x40>
    218c:	2380      	movs	r3, #128	; 0x80
    218e:	00db      	lsls	r3, r3, #3
    2190:	e00f      	b.n	21b2 <__swhatbuf_r+0x42>
    2192:	aa01      	add	r2, sp, #4
    2194:	f000 fc50 	bl	2a38 <_fstat_r>
    2198:	2800      	cmp	r0, #0
    219a:	dbf2      	blt.n	2182 <__swhatbuf_r+0x12>
    219c:	22f0      	movs	r2, #240	; 0xf0
    219e:	9b02      	ldr	r3, [sp, #8]
    21a0:	0212      	lsls	r2, r2, #8
    21a2:	4013      	ands	r3, r2
    21a4:	4a05      	ldr	r2, [pc, #20]	; (21bc <__swhatbuf_r+0x4c>)
    21a6:	189b      	adds	r3, r3, r2
    21a8:	425a      	negs	r2, r3
    21aa:	4153      	adcs	r3, r2
    21ac:	602b      	str	r3, [r5, #0]
    21ae:	e7ed      	b.n	218c <__swhatbuf_r+0x1c>
    21b0:	2340      	movs	r3, #64	; 0x40
    21b2:	2000      	movs	r0, #0
    21b4:	6023      	str	r3, [r4, #0]
    21b6:	b010      	add	sp, #64	; 0x40
    21b8:	bd70      	pop	{r4, r5, r6, pc}
    21ba:	46c0      	nop			; (mov r8, r8)
    21bc:	ffffe000 	.word	0xffffe000

000021c0 <__smakebuf_r>:
    21c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    21c2:	2602      	movs	r6, #2
    21c4:	898b      	ldrh	r3, [r1, #12]
    21c6:	0005      	movs	r5, r0
    21c8:	000c      	movs	r4, r1
    21ca:	4233      	tst	r3, r6
    21cc:	d006      	beq.n	21dc <__smakebuf_r+0x1c>
    21ce:	0023      	movs	r3, r4
    21d0:	3347      	adds	r3, #71	; 0x47
    21d2:	6023      	str	r3, [r4, #0]
    21d4:	6123      	str	r3, [r4, #16]
    21d6:	2301      	movs	r3, #1
    21d8:	6163      	str	r3, [r4, #20]
    21da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    21dc:	ab01      	add	r3, sp, #4
    21de:	466a      	mov	r2, sp
    21e0:	f7ff ffc6 	bl	2170 <__swhatbuf_r>
    21e4:	9900      	ldr	r1, [sp, #0]
    21e6:	0007      	movs	r7, r0
    21e8:	0028      	movs	r0, r5
    21ea:	f000 f877 	bl	22dc <_malloc_r>
    21ee:	2800      	cmp	r0, #0
    21f0:	d108      	bne.n	2204 <__smakebuf_r+0x44>
    21f2:	220c      	movs	r2, #12
    21f4:	5ea3      	ldrsh	r3, [r4, r2]
    21f6:	059a      	lsls	r2, r3, #22
    21f8:	d4ef      	bmi.n	21da <__smakebuf_r+0x1a>
    21fa:	2203      	movs	r2, #3
    21fc:	4393      	bics	r3, r2
    21fe:	431e      	orrs	r6, r3
    2200:	81a6      	strh	r6, [r4, #12]
    2202:	e7e4      	b.n	21ce <__smakebuf_r+0xe>
    2204:	4b0f      	ldr	r3, [pc, #60]	; (2244 <__smakebuf_r+0x84>)
    2206:	62ab      	str	r3, [r5, #40]	; 0x28
    2208:	2380      	movs	r3, #128	; 0x80
    220a:	89a2      	ldrh	r2, [r4, #12]
    220c:	6020      	str	r0, [r4, #0]
    220e:	4313      	orrs	r3, r2
    2210:	81a3      	strh	r3, [r4, #12]
    2212:	9b00      	ldr	r3, [sp, #0]
    2214:	6120      	str	r0, [r4, #16]
    2216:	6163      	str	r3, [r4, #20]
    2218:	9b01      	ldr	r3, [sp, #4]
    221a:	2b00      	cmp	r3, #0
    221c:	d00d      	beq.n	223a <__smakebuf_r+0x7a>
    221e:	230e      	movs	r3, #14
    2220:	5ee1      	ldrsh	r1, [r4, r3]
    2222:	0028      	movs	r0, r5
    2224:	f000 fc1a 	bl	2a5c <_isatty_r>
    2228:	2800      	cmp	r0, #0
    222a:	d006      	beq.n	223a <__smakebuf_r+0x7a>
    222c:	2203      	movs	r2, #3
    222e:	89a3      	ldrh	r3, [r4, #12]
    2230:	4393      	bics	r3, r2
    2232:	001a      	movs	r2, r3
    2234:	2301      	movs	r3, #1
    2236:	4313      	orrs	r3, r2
    2238:	81a3      	strh	r3, [r4, #12]
    223a:	89a0      	ldrh	r0, [r4, #12]
    223c:	4338      	orrs	r0, r7
    223e:	81a0      	strh	r0, [r4, #12]
    2240:	e7cb      	b.n	21da <__smakebuf_r+0x1a>
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	00001fc1 	.word	0x00001fc1

00002248 <_free_r>:
    2248:	b570      	push	{r4, r5, r6, lr}
    224a:	0005      	movs	r5, r0
    224c:	2900      	cmp	r1, #0
    224e:	d010      	beq.n	2272 <_free_r+0x2a>
    2250:	1f0c      	subs	r4, r1, #4
    2252:	6823      	ldr	r3, [r4, #0]
    2254:	2b00      	cmp	r3, #0
    2256:	da00      	bge.n	225a <_free_r+0x12>
    2258:	18e4      	adds	r4, r4, r3
    225a:	0028      	movs	r0, r5
    225c:	f000 fc2f 	bl	2abe <__malloc_lock>
    2260:	4a1d      	ldr	r2, [pc, #116]	; (22d8 <_free_r+0x90>)
    2262:	6813      	ldr	r3, [r2, #0]
    2264:	2b00      	cmp	r3, #0
    2266:	d105      	bne.n	2274 <_free_r+0x2c>
    2268:	6063      	str	r3, [r4, #4]
    226a:	6014      	str	r4, [r2, #0]
    226c:	0028      	movs	r0, r5
    226e:	f000 fc27 	bl	2ac0 <__malloc_unlock>
    2272:	bd70      	pop	{r4, r5, r6, pc}
    2274:	42a3      	cmp	r3, r4
    2276:	d909      	bls.n	228c <_free_r+0x44>
    2278:	6821      	ldr	r1, [r4, #0]
    227a:	1860      	adds	r0, r4, r1
    227c:	4283      	cmp	r3, r0
    227e:	d1f3      	bne.n	2268 <_free_r+0x20>
    2280:	6818      	ldr	r0, [r3, #0]
    2282:	685b      	ldr	r3, [r3, #4]
    2284:	1841      	adds	r1, r0, r1
    2286:	6021      	str	r1, [r4, #0]
    2288:	e7ee      	b.n	2268 <_free_r+0x20>
    228a:	0013      	movs	r3, r2
    228c:	685a      	ldr	r2, [r3, #4]
    228e:	2a00      	cmp	r2, #0
    2290:	d001      	beq.n	2296 <_free_r+0x4e>
    2292:	42a2      	cmp	r2, r4
    2294:	d9f9      	bls.n	228a <_free_r+0x42>
    2296:	6819      	ldr	r1, [r3, #0]
    2298:	1858      	adds	r0, r3, r1
    229a:	42a0      	cmp	r0, r4
    229c:	d10b      	bne.n	22b6 <_free_r+0x6e>
    229e:	6820      	ldr	r0, [r4, #0]
    22a0:	1809      	adds	r1, r1, r0
    22a2:	1858      	adds	r0, r3, r1
    22a4:	6019      	str	r1, [r3, #0]
    22a6:	4282      	cmp	r2, r0
    22a8:	d1e0      	bne.n	226c <_free_r+0x24>
    22aa:	6810      	ldr	r0, [r2, #0]
    22ac:	6852      	ldr	r2, [r2, #4]
    22ae:	1841      	adds	r1, r0, r1
    22b0:	6019      	str	r1, [r3, #0]
    22b2:	605a      	str	r2, [r3, #4]
    22b4:	e7da      	b.n	226c <_free_r+0x24>
    22b6:	42a0      	cmp	r0, r4
    22b8:	d902      	bls.n	22c0 <_free_r+0x78>
    22ba:	230c      	movs	r3, #12
    22bc:	602b      	str	r3, [r5, #0]
    22be:	e7d5      	b.n	226c <_free_r+0x24>
    22c0:	6821      	ldr	r1, [r4, #0]
    22c2:	1860      	adds	r0, r4, r1
    22c4:	4282      	cmp	r2, r0
    22c6:	d103      	bne.n	22d0 <_free_r+0x88>
    22c8:	6810      	ldr	r0, [r2, #0]
    22ca:	6852      	ldr	r2, [r2, #4]
    22cc:	1841      	adds	r1, r0, r1
    22ce:	6021      	str	r1, [r4, #0]
    22d0:	6062      	str	r2, [r4, #4]
    22d2:	605c      	str	r4, [r3, #4]
    22d4:	e7ca      	b.n	226c <_free_r+0x24>
    22d6:	46c0      	nop			; (mov r8, r8)
    22d8:	200001e0 	.word	0x200001e0

000022dc <_malloc_r>:
    22dc:	2303      	movs	r3, #3
    22de:	b570      	push	{r4, r5, r6, lr}
    22e0:	1ccd      	adds	r5, r1, #3
    22e2:	439d      	bics	r5, r3
    22e4:	3508      	adds	r5, #8
    22e6:	0006      	movs	r6, r0
    22e8:	2d0c      	cmp	r5, #12
    22ea:	d21e      	bcs.n	232a <_malloc_r+0x4e>
    22ec:	250c      	movs	r5, #12
    22ee:	42a9      	cmp	r1, r5
    22f0:	d81d      	bhi.n	232e <_malloc_r+0x52>
    22f2:	0030      	movs	r0, r6
    22f4:	f000 fbe3 	bl	2abe <__malloc_lock>
    22f8:	4a25      	ldr	r2, [pc, #148]	; (2390 <_malloc_r+0xb4>)
    22fa:	6814      	ldr	r4, [r2, #0]
    22fc:	0021      	movs	r1, r4
    22fe:	2900      	cmp	r1, #0
    2300:	d119      	bne.n	2336 <_malloc_r+0x5a>
    2302:	4c24      	ldr	r4, [pc, #144]	; (2394 <_malloc_r+0xb8>)
    2304:	6823      	ldr	r3, [r4, #0]
    2306:	2b00      	cmp	r3, #0
    2308:	d103      	bne.n	2312 <_malloc_r+0x36>
    230a:	0030      	movs	r0, r6
    230c:	f000 fb10 	bl	2930 <_sbrk_r>
    2310:	6020      	str	r0, [r4, #0]
    2312:	0029      	movs	r1, r5
    2314:	0030      	movs	r0, r6
    2316:	f000 fb0b 	bl	2930 <_sbrk_r>
    231a:	1c43      	adds	r3, r0, #1
    231c:	d12c      	bne.n	2378 <_malloc_r+0x9c>
    231e:	230c      	movs	r3, #12
    2320:	0030      	movs	r0, r6
    2322:	6033      	str	r3, [r6, #0]
    2324:	f000 fbcc 	bl	2ac0 <__malloc_unlock>
    2328:	e003      	b.n	2332 <_malloc_r+0x56>
    232a:	2d00      	cmp	r5, #0
    232c:	dadf      	bge.n	22ee <_malloc_r+0x12>
    232e:	230c      	movs	r3, #12
    2330:	6033      	str	r3, [r6, #0]
    2332:	2000      	movs	r0, #0
    2334:	bd70      	pop	{r4, r5, r6, pc}
    2336:	680b      	ldr	r3, [r1, #0]
    2338:	1b5b      	subs	r3, r3, r5
    233a:	d41a      	bmi.n	2372 <_malloc_r+0x96>
    233c:	2b0b      	cmp	r3, #11
    233e:	d903      	bls.n	2348 <_malloc_r+0x6c>
    2340:	600b      	str	r3, [r1, #0]
    2342:	18cc      	adds	r4, r1, r3
    2344:	6025      	str	r5, [r4, #0]
    2346:	e003      	b.n	2350 <_malloc_r+0x74>
    2348:	428c      	cmp	r4, r1
    234a:	d10e      	bne.n	236a <_malloc_r+0x8e>
    234c:	6863      	ldr	r3, [r4, #4]
    234e:	6013      	str	r3, [r2, #0]
    2350:	0030      	movs	r0, r6
    2352:	f000 fbb5 	bl	2ac0 <__malloc_unlock>
    2356:	0020      	movs	r0, r4
    2358:	2207      	movs	r2, #7
    235a:	300b      	adds	r0, #11
    235c:	1d23      	adds	r3, r4, #4
    235e:	4390      	bics	r0, r2
    2360:	1ac3      	subs	r3, r0, r3
    2362:	d0e7      	beq.n	2334 <_malloc_r+0x58>
    2364:	425a      	negs	r2, r3
    2366:	50e2      	str	r2, [r4, r3]
    2368:	e7e4      	b.n	2334 <_malloc_r+0x58>
    236a:	684b      	ldr	r3, [r1, #4]
    236c:	6063      	str	r3, [r4, #4]
    236e:	000c      	movs	r4, r1
    2370:	e7ee      	b.n	2350 <_malloc_r+0x74>
    2372:	000c      	movs	r4, r1
    2374:	6849      	ldr	r1, [r1, #4]
    2376:	e7c2      	b.n	22fe <_malloc_r+0x22>
    2378:	2303      	movs	r3, #3
    237a:	1cc4      	adds	r4, r0, #3
    237c:	439c      	bics	r4, r3
    237e:	42a0      	cmp	r0, r4
    2380:	d0e0      	beq.n	2344 <_malloc_r+0x68>
    2382:	1a21      	subs	r1, r4, r0
    2384:	0030      	movs	r0, r6
    2386:	f000 fad3 	bl	2930 <_sbrk_r>
    238a:	1c43      	adds	r3, r0, #1
    238c:	d1da      	bne.n	2344 <_malloc_r+0x68>
    238e:	e7c6      	b.n	231e <_malloc_r+0x42>
    2390:	200001e0 	.word	0x200001e0
    2394:	200001e4 	.word	0x200001e4

00002398 <__sfputc_r>:
    2398:	6893      	ldr	r3, [r2, #8]
    239a:	b510      	push	{r4, lr}
    239c:	3b01      	subs	r3, #1
    239e:	6093      	str	r3, [r2, #8]
    23a0:	2b00      	cmp	r3, #0
    23a2:	da05      	bge.n	23b0 <__sfputc_r+0x18>
    23a4:	6994      	ldr	r4, [r2, #24]
    23a6:	42a3      	cmp	r3, r4
    23a8:	db08      	blt.n	23bc <__sfputc_r+0x24>
    23aa:	b2cb      	uxtb	r3, r1
    23ac:	2b0a      	cmp	r3, #10
    23ae:	d005      	beq.n	23bc <__sfputc_r+0x24>
    23b0:	6813      	ldr	r3, [r2, #0]
    23b2:	1c58      	adds	r0, r3, #1
    23b4:	6010      	str	r0, [r2, #0]
    23b6:	7019      	strb	r1, [r3, #0]
    23b8:	b2c8      	uxtb	r0, r1
    23ba:	bd10      	pop	{r4, pc}
    23bc:	f7ff fc7e 	bl	1cbc <__swbuf_r>
    23c0:	e7fb      	b.n	23ba <__sfputc_r+0x22>

000023c2 <__sfputs_r>:
    23c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23c4:	0006      	movs	r6, r0
    23c6:	000f      	movs	r7, r1
    23c8:	0014      	movs	r4, r2
    23ca:	18d5      	adds	r5, r2, r3
    23cc:	42ac      	cmp	r4, r5
    23ce:	d101      	bne.n	23d4 <__sfputs_r+0x12>
    23d0:	2000      	movs	r0, #0
    23d2:	e007      	b.n	23e4 <__sfputs_r+0x22>
    23d4:	7821      	ldrb	r1, [r4, #0]
    23d6:	003a      	movs	r2, r7
    23d8:	0030      	movs	r0, r6
    23da:	f7ff ffdd 	bl	2398 <__sfputc_r>
    23de:	3401      	adds	r4, #1
    23e0:	1c43      	adds	r3, r0, #1
    23e2:	d1f3      	bne.n	23cc <__sfputs_r+0xa>
    23e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000023e8 <_vfiprintf_r>:
    23e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ea:	b09f      	sub	sp, #124	; 0x7c
    23ec:	0006      	movs	r6, r0
    23ee:	000f      	movs	r7, r1
    23f0:	0014      	movs	r4, r2
    23f2:	9305      	str	r3, [sp, #20]
    23f4:	2800      	cmp	r0, #0
    23f6:	d004      	beq.n	2402 <_vfiprintf_r+0x1a>
    23f8:	6983      	ldr	r3, [r0, #24]
    23fa:	2b00      	cmp	r3, #0
    23fc:	d101      	bne.n	2402 <_vfiprintf_r+0x1a>
    23fe:	f7ff fe21 	bl	2044 <__sinit>
    2402:	4b7f      	ldr	r3, [pc, #508]	; (2600 <_vfiprintf_r+0x218>)
    2404:	429f      	cmp	r7, r3
    2406:	d15c      	bne.n	24c2 <_vfiprintf_r+0xda>
    2408:	6877      	ldr	r7, [r6, #4]
    240a:	89bb      	ldrh	r3, [r7, #12]
    240c:	071b      	lsls	r3, r3, #28
    240e:	d562      	bpl.n	24d6 <_vfiprintf_r+0xee>
    2410:	693b      	ldr	r3, [r7, #16]
    2412:	2b00      	cmp	r3, #0
    2414:	d05f      	beq.n	24d6 <_vfiprintf_r+0xee>
    2416:	2300      	movs	r3, #0
    2418:	ad06      	add	r5, sp, #24
    241a:	616b      	str	r3, [r5, #20]
    241c:	3320      	adds	r3, #32
    241e:	766b      	strb	r3, [r5, #25]
    2420:	3310      	adds	r3, #16
    2422:	76ab      	strb	r3, [r5, #26]
    2424:	9402      	str	r4, [sp, #8]
    2426:	9c02      	ldr	r4, [sp, #8]
    2428:	7823      	ldrb	r3, [r4, #0]
    242a:	2b00      	cmp	r3, #0
    242c:	d15d      	bne.n	24ea <_vfiprintf_r+0x102>
    242e:	9b02      	ldr	r3, [sp, #8]
    2430:	1ae3      	subs	r3, r4, r3
    2432:	9304      	str	r3, [sp, #16]
    2434:	d00d      	beq.n	2452 <_vfiprintf_r+0x6a>
    2436:	9b04      	ldr	r3, [sp, #16]
    2438:	9a02      	ldr	r2, [sp, #8]
    243a:	0039      	movs	r1, r7
    243c:	0030      	movs	r0, r6
    243e:	f7ff ffc0 	bl	23c2 <__sfputs_r>
    2442:	1c43      	adds	r3, r0, #1
    2444:	d100      	bne.n	2448 <_vfiprintf_r+0x60>
    2446:	e0cc      	b.n	25e2 <_vfiprintf_r+0x1fa>
    2448:	696a      	ldr	r2, [r5, #20]
    244a:	9b04      	ldr	r3, [sp, #16]
    244c:	4694      	mov	ip, r2
    244e:	4463      	add	r3, ip
    2450:	616b      	str	r3, [r5, #20]
    2452:	7823      	ldrb	r3, [r4, #0]
    2454:	2b00      	cmp	r3, #0
    2456:	d100      	bne.n	245a <_vfiprintf_r+0x72>
    2458:	e0c3      	b.n	25e2 <_vfiprintf_r+0x1fa>
    245a:	2201      	movs	r2, #1
    245c:	2300      	movs	r3, #0
    245e:	4252      	negs	r2, r2
    2460:	606a      	str	r2, [r5, #4]
    2462:	a902      	add	r1, sp, #8
    2464:	3254      	adds	r2, #84	; 0x54
    2466:	1852      	adds	r2, r2, r1
    2468:	3401      	adds	r4, #1
    246a:	602b      	str	r3, [r5, #0]
    246c:	60eb      	str	r3, [r5, #12]
    246e:	60ab      	str	r3, [r5, #8]
    2470:	7013      	strb	r3, [r2, #0]
    2472:	65ab      	str	r3, [r5, #88]	; 0x58
    2474:	7821      	ldrb	r1, [r4, #0]
    2476:	2205      	movs	r2, #5
    2478:	4862      	ldr	r0, [pc, #392]	; (2604 <_vfiprintf_r+0x21c>)
    247a:	f000 fb15 	bl	2aa8 <memchr>
    247e:	1c63      	adds	r3, r4, #1
    2480:	469c      	mov	ip, r3
    2482:	2800      	cmp	r0, #0
    2484:	d135      	bne.n	24f2 <_vfiprintf_r+0x10a>
    2486:	6829      	ldr	r1, [r5, #0]
    2488:	06cb      	lsls	r3, r1, #27
    248a:	d504      	bpl.n	2496 <_vfiprintf_r+0xae>
    248c:	2353      	movs	r3, #83	; 0x53
    248e:	aa02      	add	r2, sp, #8
    2490:	3020      	adds	r0, #32
    2492:	189b      	adds	r3, r3, r2
    2494:	7018      	strb	r0, [r3, #0]
    2496:	070b      	lsls	r3, r1, #28
    2498:	d504      	bpl.n	24a4 <_vfiprintf_r+0xbc>
    249a:	2353      	movs	r3, #83	; 0x53
    249c:	202b      	movs	r0, #43	; 0x2b
    249e:	aa02      	add	r2, sp, #8
    24a0:	189b      	adds	r3, r3, r2
    24a2:	7018      	strb	r0, [r3, #0]
    24a4:	7823      	ldrb	r3, [r4, #0]
    24a6:	2b2a      	cmp	r3, #42	; 0x2a
    24a8:	d02c      	beq.n	2504 <_vfiprintf_r+0x11c>
    24aa:	2000      	movs	r0, #0
    24ac:	210a      	movs	r1, #10
    24ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    24b0:	7822      	ldrb	r2, [r4, #0]
    24b2:	3a30      	subs	r2, #48	; 0x30
    24b4:	2a09      	cmp	r2, #9
    24b6:	d800      	bhi.n	24ba <_vfiprintf_r+0xd2>
    24b8:	e06b      	b.n	2592 <_vfiprintf_r+0x1aa>
    24ba:	2800      	cmp	r0, #0
    24bc:	d02a      	beq.n	2514 <_vfiprintf_r+0x12c>
    24be:	9309      	str	r3, [sp, #36]	; 0x24
    24c0:	e028      	b.n	2514 <_vfiprintf_r+0x12c>
    24c2:	4b51      	ldr	r3, [pc, #324]	; (2608 <_vfiprintf_r+0x220>)
    24c4:	429f      	cmp	r7, r3
    24c6:	d101      	bne.n	24cc <_vfiprintf_r+0xe4>
    24c8:	68b7      	ldr	r7, [r6, #8]
    24ca:	e79e      	b.n	240a <_vfiprintf_r+0x22>
    24cc:	4b4f      	ldr	r3, [pc, #316]	; (260c <_vfiprintf_r+0x224>)
    24ce:	429f      	cmp	r7, r3
    24d0:	d19b      	bne.n	240a <_vfiprintf_r+0x22>
    24d2:	68f7      	ldr	r7, [r6, #12]
    24d4:	e799      	b.n	240a <_vfiprintf_r+0x22>
    24d6:	0039      	movs	r1, r7
    24d8:	0030      	movs	r0, r6
    24da:	f7ff fc45 	bl	1d68 <__swsetup_r>
    24de:	2800      	cmp	r0, #0
    24e0:	d099      	beq.n	2416 <_vfiprintf_r+0x2e>
    24e2:	2001      	movs	r0, #1
    24e4:	4240      	negs	r0, r0
    24e6:	b01f      	add	sp, #124	; 0x7c
    24e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24ea:	2b25      	cmp	r3, #37	; 0x25
    24ec:	d09f      	beq.n	242e <_vfiprintf_r+0x46>
    24ee:	3401      	adds	r4, #1
    24f0:	e79a      	b.n	2428 <_vfiprintf_r+0x40>
    24f2:	4b44      	ldr	r3, [pc, #272]	; (2604 <_vfiprintf_r+0x21c>)
    24f4:	6829      	ldr	r1, [r5, #0]
    24f6:	1ac0      	subs	r0, r0, r3
    24f8:	2301      	movs	r3, #1
    24fa:	4083      	lsls	r3, r0
    24fc:	430b      	orrs	r3, r1
    24fe:	602b      	str	r3, [r5, #0]
    2500:	4664      	mov	r4, ip
    2502:	e7b7      	b.n	2474 <_vfiprintf_r+0x8c>
    2504:	9b05      	ldr	r3, [sp, #20]
    2506:	1d18      	adds	r0, r3, #4
    2508:	681b      	ldr	r3, [r3, #0]
    250a:	9005      	str	r0, [sp, #20]
    250c:	2b00      	cmp	r3, #0
    250e:	db3a      	blt.n	2586 <_vfiprintf_r+0x19e>
    2510:	9309      	str	r3, [sp, #36]	; 0x24
    2512:	4664      	mov	r4, ip
    2514:	7823      	ldrb	r3, [r4, #0]
    2516:	2b2e      	cmp	r3, #46	; 0x2e
    2518:	d10b      	bne.n	2532 <_vfiprintf_r+0x14a>
    251a:	7863      	ldrb	r3, [r4, #1]
    251c:	1c62      	adds	r2, r4, #1
    251e:	2b2a      	cmp	r3, #42	; 0x2a
    2520:	d13f      	bne.n	25a2 <_vfiprintf_r+0x1ba>
    2522:	9b05      	ldr	r3, [sp, #20]
    2524:	3402      	adds	r4, #2
    2526:	1d1a      	adds	r2, r3, #4
    2528:	681b      	ldr	r3, [r3, #0]
    252a:	9205      	str	r2, [sp, #20]
    252c:	2b00      	cmp	r3, #0
    252e:	db35      	blt.n	259c <_vfiprintf_r+0x1b4>
    2530:	9307      	str	r3, [sp, #28]
    2532:	7821      	ldrb	r1, [r4, #0]
    2534:	2203      	movs	r2, #3
    2536:	4836      	ldr	r0, [pc, #216]	; (2610 <_vfiprintf_r+0x228>)
    2538:	f000 fab6 	bl	2aa8 <memchr>
    253c:	2800      	cmp	r0, #0
    253e:	d007      	beq.n	2550 <_vfiprintf_r+0x168>
    2540:	4b33      	ldr	r3, [pc, #204]	; (2610 <_vfiprintf_r+0x228>)
    2542:	682a      	ldr	r2, [r5, #0]
    2544:	1ac0      	subs	r0, r0, r3
    2546:	2340      	movs	r3, #64	; 0x40
    2548:	4083      	lsls	r3, r0
    254a:	4313      	orrs	r3, r2
    254c:	602b      	str	r3, [r5, #0]
    254e:	3401      	adds	r4, #1
    2550:	7821      	ldrb	r1, [r4, #0]
    2552:	1c63      	adds	r3, r4, #1
    2554:	2206      	movs	r2, #6
    2556:	482f      	ldr	r0, [pc, #188]	; (2614 <_vfiprintf_r+0x22c>)
    2558:	9302      	str	r3, [sp, #8]
    255a:	7629      	strb	r1, [r5, #24]
    255c:	f000 faa4 	bl	2aa8 <memchr>
    2560:	2800      	cmp	r0, #0
    2562:	d044      	beq.n	25ee <_vfiprintf_r+0x206>
    2564:	4b2c      	ldr	r3, [pc, #176]	; (2618 <_vfiprintf_r+0x230>)
    2566:	2b00      	cmp	r3, #0
    2568:	d12f      	bne.n	25ca <_vfiprintf_r+0x1e2>
    256a:	6829      	ldr	r1, [r5, #0]
    256c:	9b05      	ldr	r3, [sp, #20]
    256e:	2207      	movs	r2, #7
    2570:	05c9      	lsls	r1, r1, #23
    2572:	d528      	bpl.n	25c6 <_vfiprintf_r+0x1de>
    2574:	189b      	adds	r3, r3, r2
    2576:	4393      	bics	r3, r2
    2578:	3308      	adds	r3, #8
    257a:	9305      	str	r3, [sp, #20]
    257c:	696b      	ldr	r3, [r5, #20]
    257e:	9a03      	ldr	r2, [sp, #12]
    2580:	189b      	adds	r3, r3, r2
    2582:	616b      	str	r3, [r5, #20]
    2584:	e74f      	b.n	2426 <_vfiprintf_r+0x3e>
    2586:	425b      	negs	r3, r3
    2588:	60eb      	str	r3, [r5, #12]
    258a:	2302      	movs	r3, #2
    258c:	430b      	orrs	r3, r1
    258e:	602b      	str	r3, [r5, #0]
    2590:	e7bf      	b.n	2512 <_vfiprintf_r+0x12a>
    2592:	434b      	muls	r3, r1
    2594:	3401      	adds	r4, #1
    2596:	189b      	adds	r3, r3, r2
    2598:	2001      	movs	r0, #1
    259a:	e789      	b.n	24b0 <_vfiprintf_r+0xc8>
    259c:	2301      	movs	r3, #1
    259e:	425b      	negs	r3, r3
    25a0:	e7c6      	b.n	2530 <_vfiprintf_r+0x148>
    25a2:	2300      	movs	r3, #0
    25a4:	0014      	movs	r4, r2
    25a6:	200a      	movs	r0, #10
    25a8:	001a      	movs	r2, r3
    25aa:	606b      	str	r3, [r5, #4]
    25ac:	7821      	ldrb	r1, [r4, #0]
    25ae:	3930      	subs	r1, #48	; 0x30
    25b0:	2909      	cmp	r1, #9
    25b2:	d903      	bls.n	25bc <_vfiprintf_r+0x1d4>
    25b4:	2b00      	cmp	r3, #0
    25b6:	d0bc      	beq.n	2532 <_vfiprintf_r+0x14a>
    25b8:	9207      	str	r2, [sp, #28]
    25ba:	e7ba      	b.n	2532 <_vfiprintf_r+0x14a>
    25bc:	4342      	muls	r2, r0
    25be:	3401      	adds	r4, #1
    25c0:	1852      	adds	r2, r2, r1
    25c2:	2301      	movs	r3, #1
    25c4:	e7f2      	b.n	25ac <_vfiprintf_r+0x1c4>
    25c6:	3307      	adds	r3, #7
    25c8:	e7d5      	b.n	2576 <_vfiprintf_r+0x18e>
    25ca:	ab05      	add	r3, sp, #20
    25cc:	9300      	str	r3, [sp, #0]
    25ce:	003a      	movs	r2, r7
    25d0:	4b12      	ldr	r3, [pc, #72]	; (261c <_vfiprintf_r+0x234>)
    25d2:	0029      	movs	r1, r5
    25d4:	0030      	movs	r0, r6
    25d6:	e000      	b.n	25da <_vfiprintf_r+0x1f2>
    25d8:	bf00      	nop
    25da:	9003      	str	r0, [sp, #12]
    25dc:	9b03      	ldr	r3, [sp, #12]
    25de:	3301      	adds	r3, #1
    25e0:	d1cc      	bne.n	257c <_vfiprintf_r+0x194>
    25e2:	89bb      	ldrh	r3, [r7, #12]
    25e4:	065b      	lsls	r3, r3, #25
    25e6:	d500      	bpl.n	25ea <_vfiprintf_r+0x202>
    25e8:	e77b      	b.n	24e2 <_vfiprintf_r+0xfa>
    25ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
    25ec:	e77b      	b.n	24e6 <_vfiprintf_r+0xfe>
    25ee:	ab05      	add	r3, sp, #20
    25f0:	9300      	str	r3, [sp, #0]
    25f2:	003a      	movs	r2, r7
    25f4:	4b09      	ldr	r3, [pc, #36]	; (261c <_vfiprintf_r+0x234>)
    25f6:	0029      	movs	r1, r5
    25f8:	0030      	movs	r0, r6
    25fa:	f000 f87f 	bl	26fc <_printf_i>
    25fe:	e7ec      	b.n	25da <_vfiprintf_r+0x1f2>
    2600:	00002c64 	.word	0x00002c64
    2604:	00002ca4 	.word	0x00002ca4
    2608:	00002c84 	.word	0x00002c84
    260c:	00002c44 	.word	0x00002c44
    2610:	00002caa 	.word	0x00002caa
    2614:	00002cae 	.word	0x00002cae
    2618:	00000000 	.word	0x00000000
    261c:	000023c3 	.word	0x000023c3

00002620 <_printf_common>:
    2620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2622:	0015      	movs	r5, r2
    2624:	9301      	str	r3, [sp, #4]
    2626:	688a      	ldr	r2, [r1, #8]
    2628:	690b      	ldr	r3, [r1, #16]
    262a:	9000      	str	r0, [sp, #0]
    262c:	000c      	movs	r4, r1
    262e:	4293      	cmp	r3, r2
    2630:	da00      	bge.n	2634 <_printf_common+0x14>
    2632:	0013      	movs	r3, r2
    2634:	0022      	movs	r2, r4
    2636:	602b      	str	r3, [r5, #0]
    2638:	3243      	adds	r2, #67	; 0x43
    263a:	7812      	ldrb	r2, [r2, #0]
    263c:	2a00      	cmp	r2, #0
    263e:	d001      	beq.n	2644 <_printf_common+0x24>
    2640:	3301      	adds	r3, #1
    2642:	602b      	str	r3, [r5, #0]
    2644:	6823      	ldr	r3, [r4, #0]
    2646:	069b      	lsls	r3, r3, #26
    2648:	d502      	bpl.n	2650 <_printf_common+0x30>
    264a:	682b      	ldr	r3, [r5, #0]
    264c:	3302      	adds	r3, #2
    264e:	602b      	str	r3, [r5, #0]
    2650:	2706      	movs	r7, #6
    2652:	6823      	ldr	r3, [r4, #0]
    2654:	401f      	ands	r7, r3
    2656:	d027      	beq.n	26a8 <_printf_common+0x88>
    2658:	0023      	movs	r3, r4
    265a:	3343      	adds	r3, #67	; 0x43
    265c:	781b      	ldrb	r3, [r3, #0]
    265e:	1e5a      	subs	r2, r3, #1
    2660:	4193      	sbcs	r3, r2
    2662:	6822      	ldr	r2, [r4, #0]
    2664:	0692      	lsls	r2, r2, #26
    2666:	d430      	bmi.n	26ca <_printf_common+0xaa>
    2668:	0022      	movs	r2, r4
    266a:	9901      	ldr	r1, [sp, #4]
    266c:	3243      	adds	r2, #67	; 0x43
    266e:	9800      	ldr	r0, [sp, #0]
    2670:	9e08      	ldr	r6, [sp, #32]
    2672:	47b0      	blx	r6
    2674:	1c43      	adds	r3, r0, #1
    2676:	d025      	beq.n	26c4 <_printf_common+0xa4>
    2678:	2306      	movs	r3, #6
    267a:	6820      	ldr	r0, [r4, #0]
    267c:	682a      	ldr	r2, [r5, #0]
    267e:	68e1      	ldr	r1, [r4, #12]
    2680:	4003      	ands	r3, r0
    2682:	2500      	movs	r5, #0
    2684:	2b04      	cmp	r3, #4
    2686:	d103      	bne.n	2690 <_printf_common+0x70>
    2688:	1a8d      	subs	r5, r1, r2
    268a:	43eb      	mvns	r3, r5
    268c:	17db      	asrs	r3, r3, #31
    268e:	401d      	ands	r5, r3
    2690:	68a3      	ldr	r3, [r4, #8]
    2692:	6922      	ldr	r2, [r4, #16]
    2694:	4293      	cmp	r3, r2
    2696:	dd01      	ble.n	269c <_printf_common+0x7c>
    2698:	1a9b      	subs	r3, r3, r2
    269a:	18ed      	adds	r5, r5, r3
    269c:	2700      	movs	r7, #0
    269e:	42bd      	cmp	r5, r7
    26a0:	d120      	bne.n	26e4 <_printf_common+0xc4>
    26a2:	2000      	movs	r0, #0
    26a4:	e010      	b.n	26c8 <_printf_common+0xa8>
    26a6:	3701      	adds	r7, #1
    26a8:	68e3      	ldr	r3, [r4, #12]
    26aa:	682a      	ldr	r2, [r5, #0]
    26ac:	1a9b      	subs	r3, r3, r2
    26ae:	429f      	cmp	r7, r3
    26b0:	dad2      	bge.n	2658 <_printf_common+0x38>
    26b2:	0022      	movs	r2, r4
    26b4:	2301      	movs	r3, #1
    26b6:	3219      	adds	r2, #25
    26b8:	9901      	ldr	r1, [sp, #4]
    26ba:	9800      	ldr	r0, [sp, #0]
    26bc:	9e08      	ldr	r6, [sp, #32]
    26be:	47b0      	blx	r6
    26c0:	1c43      	adds	r3, r0, #1
    26c2:	d1f0      	bne.n	26a6 <_printf_common+0x86>
    26c4:	2001      	movs	r0, #1
    26c6:	4240      	negs	r0, r0
    26c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    26ca:	2030      	movs	r0, #48	; 0x30
    26cc:	18e1      	adds	r1, r4, r3
    26ce:	3143      	adds	r1, #67	; 0x43
    26d0:	7008      	strb	r0, [r1, #0]
    26d2:	0021      	movs	r1, r4
    26d4:	1c5a      	adds	r2, r3, #1
    26d6:	3145      	adds	r1, #69	; 0x45
    26d8:	7809      	ldrb	r1, [r1, #0]
    26da:	18a2      	adds	r2, r4, r2
    26dc:	3243      	adds	r2, #67	; 0x43
    26de:	3302      	adds	r3, #2
    26e0:	7011      	strb	r1, [r2, #0]
    26e2:	e7c1      	b.n	2668 <_printf_common+0x48>
    26e4:	0022      	movs	r2, r4
    26e6:	2301      	movs	r3, #1
    26e8:	321a      	adds	r2, #26
    26ea:	9901      	ldr	r1, [sp, #4]
    26ec:	9800      	ldr	r0, [sp, #0]
    26ee:	9e08      	ldr	r6, [sp, #32]
    26f0:	47b0      	blx	r6
    26f2:	1c43      	adds	r3, r0, #1
    26f4:	d0e6      	beq.n	26c4 <_printf_common+0xa4>
    26f6:	3701      	adds	r7, #1
    26f8:	e7d1      	b.n	269e <_printf_common+0x7e>
	...

000026fc <_printf_i>:
    26fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    26fe:	b08b      	sub	sp, #44	; 0x2c
    2700:	9206      	str	r2, [sp, #24]
    2702:	000a      	movs	r2, r1
    2704:	3243      	adds	r2, #67	; 0x43
    2706:	9307      	str	r3, [sp, #28]
    2708:	9005      	str	r0, [sp, #20]
    270a:	9204      	str	r2, [sp, #16]
    270c:	7e0a      	ldrb	r2, [r1, #24]
    270e:	000c      	movs	r4, r1
    2710:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2712:	2a6e      	cmp	r2, #110	; 0x6e
    2714:	d100      	bne.n	2718 <_printf_i+0x1c>
    2716:	e08f      	b.n	2838 <_printf_i+0x13c>
    2718:	d817      	bhi.n	274a <_printf_i+0x4e>
    271a:	2a63      	cmp	r2, #99	; 0x63
    271c:	d02c      	beq.n	2778 <_printf_i+0x7c>
    271e:	d808      	bhi.n	2732 <_printf_i+0x36>
    2720:	2a00      	cmp	r2, #0
    2722:	d100      	bne.n	2726 <_printf_i+0x2a>
    2724:	e099      	b.n	285a <_printf_i+0x15e>
    2726:	2a58      	cmp	r2, #88	; 0x58
    2728:	d054      	beq.n	27d4 <_printf_i+0xd8>
    272a:	0026      	movs	r6, r4
    272c:	3642      	adds	r6, #66	; 0x42
    272e:	7032      	strb	r2, [r6, #0]
    2730:	e029      	b.n	2786 <_printf_i+0x8a>
    2732:	2a64      	cmp	r2, #100	; 0x64
    2734:	d001      	beq.n	273a <_printf_i+0x3e>
    2736:	2a69      	cmp	r2, #105	; 0x69
    2738:	d1f7      	bne.n	272a <_printf_i+0x2e>
    273a:	6821      	ldr	r1, [r4, #0]
    273c:	681a      	ldr	r2, [r3, #0]
    273e:	0608      	lsls	r0, r1, #24
    2740:	d523      	bpl.n	278a <_printf_i+0x8e>
    2742:	1d11      	adds	r1, r2, #4
    2744:	6019      	str	r1, [r3, #0]
    2746:	6815      	ldr	r5, [r2, #0]
    2748:	e025      	b.n	2796 <_printf_i+0x9a>
    274a:	2a73      	cmp	r2, #115	; 0x73
    274c:	d100      	bne.n	2750 <_printf_i+0x54>
    274e:	e088      	b.n	2862 <_printf_i+0x166>
    2750:	d808      	bhi.n	2764 <_printf_i+0x68>
    2752:	2a6f      	cmp	r2, #111	; 0x6f
    2754:	d029      	beq.n	27aa <_printf_i+0xae>
    2756:	2a70      	cmp	r2, #112	; 0x70
    2758:	d1e7      	bne.n	272a <_printf_i+0x2e>
    275a:	2220      	movs	r2, #32
    275c:	6809      	ldr	r1, [r1, #0]
    275e:	430a      	orrs	r2, r1
    2760:	6022      	str	r2, [r4, #0]
    2762:	e003      	b.n	276c <_printf_i+0x70>
    2764:	2a75      	cmp	r2, #117	; 0x75
    2766:	d020      	beq.n	27aa <_printf_i+0xae>
    2768:	2a78      	cmp	r2, #120	; 0x78
    276a:	d1de      	bne.n	272a <_printf_i+0x2e>
    276c:	0022      	movs	r2, r4
    276e:	2178      	movs	r1, #120	; 0x78
    2770:	3245      	adds	r2, #69	; 0x45
    2772:	7011      	strb	r1, [r2, #0]
    2774:	4a6c      	ldr	r2, [pc, #432]	; (2928 <_printf_i+0x22c>)
    2776:	e030      	b.n	27da <_printf_i+0xde>
    2778:	000e      	movs	r6, r1
    277a:	681a      	ldr	r2, [r3, #0]
    277c:	3642      	adds	r6, #66	; 0x42
    277e:	1d11      	adds	r1, r2, #4
    2780:	6019      	str	r1, [r3, #0]
    2782:	6813      	ldr	r3, [r2, #0]
    2784:	7033      	strb	r3, [r6, #0]
    2786:	2301      	movs	r3, #1
    2788:	e079      	b.n	287e <_printf_i+0x182>
    278a:	0649      	lsls	r1, r1, #25
    278c:	d5d9      	bpl.n	2742 <_printf_i+0x46>
    278e:	1d11      	adds	r1, r2, #4
    2790:	6019      	str	r1, [r3, #0]
    2792:	2300      	movs	r3, #0
    2794:	5ed5      	ldrsh	r5, [r2, r3]
    2796:	2d00      	cmp	r5, #0
    2798:	da03      	bge.n	27a2 <_printf_i+0xa6>
    279a:	232d      	movs	r3, #45	; 0x2d
    279c:	9a04      	ldr	r2, [sp, #16]
    279e:	426d      	negs	r5, r5
    27a0:	7013      	strb	r3, [r2, #0]
    27a2:	4b62      	ldr	r3, [pc, #392]	; (292c <_printf_i+0x230>)
    27a4:	270a      	movs	r7, #10
    27a6:	9303      	str	r3, [sp, #12]
    27a8:	e02f      	b.n	280a <_printf_i+0x10e>
    27aa:	6820      	ldr	r0, [r4, #0]
    27ac:	6819      	ldr	r1, [r3, #0]
    27ae:	0605      	lsls	r5, r0, #24
    27b0:	d503      	bpl.n	27ba <_printf_i+0xbe>
    27b2:	1d08      	adds	r0, r1, #4
    27b4:	6018      	str	r0, [r3, #0]
    27b6:	680d      	ldr	r5, [r1, #0]
    27b8:	e005      	b.n	27c6 <_printf_i+0xca>
    27ba:	0640      	lsls	r0, r0, #25
    27bc:	d5f9      	bpl.n	27b2 <_printf_i+0xb6>
    27be:	680d      	ldr	r5, [r1, #0]
    27c0:	1d08      	adds	r0, r1, #4
    27c2:	6018      	str	r0, [r3, #0]
    27c4:	b2ad      	uxth	r5, r5
    27c6:	4b59      	ldr	r3, [pc, #356]	; (292c <_printf_i+0x230>)
    27c8:	2708      	movs	r7, #8
    27ca:	9303      	str	r3, [sp, #12]
    27cc:	2a6f      	cmp	r2, #111	; 0x6f
    27ce:	d018      	beq.n	2802 <_printf_i+0x106>
    27d0:	270a      	movs	r7, #10
    27d2:	e016      	b.n	2802 <_printf_i+0x106>
    27d4:	3145      	adds	r1, #69	; 0x45
    27d6:	700a      	strb	r2, [r1, #0]
    27d8:	4a54      	ldr	r2, [pc, #336]	; (292c <_printf_i+0x230>)
    27da:	9203      	str	r2, [sp, #12]
    27dc:	681a      	ldr	r2, [r3, #0]
    27de:	6821      	ldr	r1, [r4, #0]
    27e0:	1d10      	adds	r0, r2, #4
    27e2:	6018      	str	r0, [r3, #0]
    27e4:	6815      	ldr	r5, [r2, #0]
    27e6:	0608      	lsls	r0, r1, #24
    27e8:	d522      	bpl.n	2830 <_printf_i+0x134>
    27ea:	07cb      	lsls	r3, r1, #31
    27ec:	d502      	bpl.n	27f4 <_printf_i+0xf8>
    27ee:	2320      	movs	r3, #32
    27f0:	4319      	orrs	r1, r3
    27f2:	6021      	str	r1, [r4, #0]
    27f4:	2710      	movs	r7, #16
    27f6:	2d00      	cmp	r5, #0
    27f8:	d103      	bne.n	2802 <_printf_i+0x106>
    27fa:	2320      	movs	r3, #32
    27fc:	6822      	ldr	r2, [r4, #0]
    27fe:	439a      	bics	r2, r3
    2800:	6022      	str	r2, [r4, #0]
    2802:	0023      	movs	r3, r4
    2804:	2200      	movs	r2, #0
    2806:	3343      	adds	r3, #67	; 0x43
    2808:	701a      	strb	r2, [r3, #0]
    280a:	6863      	ldr	r3, [r4, #4]
    280c:	60a3      	str	r3, [r4, #8]
    280e:	2b00      	cmp	r3, #0
    2810:	db5c      	blt.n	28cc <_printf_i+0x1d0>
    2812:	2204      	movs	r2, #4
    2814:	6821      	ldr	r1, [r4, #0]
    2816:	4391      	bics	r1, r2
    2818:	6021      	str	r1, [r4, #0]
    281a:	2d00      	cmp	r5, #0
    281c:	d158      	bne.n	28d0 <_printf_i+0x1d4>
    281e:	9e04      	ldr	r6, [sp, #16]
    2820:	2b00      	cmp	r3, #0
    2822:	d064      	beq.n	28ee <_printf_i+0x1f2>
    2824:	0026      	movs	r6, r4
    2826:	9b03      	ldr	r3, [sp, #12]
    2828:	3642      	adds	r6, #66	; 0x42
    282a:	781b      	ldrb	r3, [r3, #0]
    282c:	7033      	strb	r3, [r6, #0]
    282e:	e05e      	b.n	28ee <_printf_i+0x1f2>
    2830:	0648      	lsls	r0, r1, #25
    2832:	d5da      	bpl.n	27ea <_printf_i+0xee>
    2834:	b2ad      	uxth	r5, r5
    2836:	e7d8      	b.n	27ea <_printf_i+0xee>
    2838:	6809      	ldr	r1, [r1, #0]
    283a:	681a      	ldr	r2, [r3, #0]
    283c:	0608      	lsls	r0, r1, #24
    283e:	d505      	bpl.n	284c <_printf_i+0x150>
    2840:	1d11      	adds	r1, r2, #4
    2842:	6019      	str	r1, [r3, #0]
    2844:	6813      	ldr	r3, [r2, #0]
    2846:	6962      	ldr	r2, [r4, #20]
    2848:	601a      	str	r2, [r3, #0]
    284a:	e006      	b.n	285a <_printf_i+0x15e>
    284c:	0649      	lsls	r1, r1, #25
    284e:	d5f7      	bpl.n	2840 <_printf_i+0x144>
    2850:	1d11      	adds	r1, r2, #4
    2852:	6019      	str	r1, [r3, #0]
    2854:	6813      	ldr	r3, [r2, #0]
    2856:	8aa2      	ldrh	r2, [r4, #20]
    2858:	801a      	strh	r2, [r3, #0]
    285a:	2300      	movs	r3, #0
    285c:	9e04      	ldr	r6, [sp, #16]
    285e:	6123      	str	r3, [r4, #16]
    2860:	e054      	b.n	290c <_printf_i+0x210>
    2862:	681a      	ldr	r2, [r3, #0]
    2864:	1d11      	adds	r1, r2, #4
    2866:	6019      	str	r1, [r3, #0]
    2868:	6816      	ldr	r6, [r2, #0]
    286a:	2100      	movs	r1, #0
    286c:	6862      	ldr	r2, [r4, #4]
    286e:	0030      	movs	r0, r6
    2870:	f000 f91a 	bl	2aa8 <memchr>
    2874:	2800      	cmp	r0, #0
    2876:	d001      	beq.n	287c <_printf_i+0x180>
    2878:	1b80      	subs	r0, r0, r6
    287a:	6060      	str	r0, [r4, #4]
    287c:	6863      	ldr	r3, [r4, #4]
    287e:	6123      	str	r3, [r4, #16]
    2880:	2300      	movs	r3, #0
    2882:	9a04      	ldr	r2, [sp, #16]
    2884:	7013      	strb	r3, [r2, #0]
    2886:	e041      	b.n	290c <_printf_i+0x210>
    2888:	6923      	ldr	r3, [r4, #16]
    288a:	0032      	movs	r2, r6
    288c:	9906      	ldr	r1, [sp, #24]
    288e:	9805      	ldr	r0, [sp, #20]
    2890:	9d07      	ldr	r5, [sp, #28]
    2892:	47a8      	blx	r5
    2894:	1c43      	adds	r3, r0, #1
    2896:	d043      	beq.n	2920 <_printf_i+0x224>
    2898:	6823      	ldr	r3, [r4, #0]
    289a:	2500      	movs	r5, #0
    289c:	079b      	lsls	r3, r3, #30
    289e:	d40f      	bmi.n	28c0 <_printf_i+0x1c4>
    28a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    28a2:	68e0      	ldr	r0, [r4, #12]
    28a4:	4298      	cmp	r0, r3
    28a6:	da3d      	bge.n	2924 <_printf_i+0x228>
    28a8:	0018      	movs	r0, r3
    28aa:	e03b      	b.n	2924 <_printf_i+0x228>
    28ac:	0022      	movs	r2, r4
    28ae:	2301      	movs	r3, #1
    28b0:	3219      	adds	r2, #25
    28b2:	9906      	ldr	r1, [sp, #24]
    28b4:	9805      	ldr	r0, [sp, #20]
    28b6:	9e07      	ldr	r6, [sp, #28]
    28b8:	47b0      	blx	r6
    28ba:	1c43      	adds	r3, r0, #1
    28bc:	d030      	beq.n	2920 <_printf_i+0x224>
    28be:	3501      	adds	r5, #1
    28c0:	68e3      	ldr	r3, [r4, #12]
    28c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    28c4:	1a9b      	subs	r3, r3, r2
    28c6:	429d      	cmp	r5, r3
    28c8:	dbf0      	blt.n	28ac <_printf_i+0x1b0>
    28ca:	e7e9      	b.n	28a0 <_printf_i+0x1a4>
    28cc:	2d00      	cmp	r5, #0
    28ce:	d0a9      	beq.n	2824 <_printf_i+0x128>
    28d0:	9e04      	ldr	r6, [sp, #16]
    28d2:	0028      	movs	r0, r5
    28d4:	0039      	movs	r1, r7
    28d6:	f7ff f80b 	bl	18f0 <__aeabi_uidivmod>
    28da:	9b03      	ldr	r3, [sp, #12]
    28dc:	3e01      	subs	r6, #1
    28de:	5c5b      	ldrb	r3, [r3, r1]
    28e0:	0028      	movs	r0, r5
    28e2:	7033      	strb	r3, [r6, #0]
    28e4:	0039      	movs	r1, r7
    28e6:	f7fe ff7d 	bl	17e4 <__udivsi3>
    28ea:	1e05      	subs	r5, r0, #0
    28ec:	d1f1      	bne.n	28d2 <_printf_i+0x1d6>
    28ee:	2f08      	cmp	r7, #8
    28f0:	d109      	bne.n	2906 <_printf_i+0x20a>
    28f2:	6823      	ldr	r3, [r4, #0]
    28f4:	07db      	lsls	r3, r3, #31
    28f6:	d506      	bpl.n	2906 <_printf_i+0x20a>
    28f8:	6863      	ldr	r3, [r4, #4]
    28fa:	6922      	ldr	r2, [r4, #16]
    28fc:	4293      	cmp	r3, r2
    28fe:	dc02      	bgt.n	2906 <_printf_i+0x20a>
    2900:	2330      	movs	r3, #48	; 0x30
    2902:	3e01      	subs	r6, #1
    2904:	7033      	strb	r3, [r6, #0]
    2906:	9b04      	ldr	r3, [sp, #16]
    2908:	1b9b      	subs	r3, r3, r6
    290a:	6123      	str	r3, [r4, #16]
    290c:	9b07      	ldr	r3, [sp, #28]
    290e:	aa09      	add	r2, sp, #36	; 0x24
    2910:	9300      	str	r3, [sp, #0]
    2912:	0021      	movs	r1, r4
    2914:	9b06      	ldr	r3, [sp, #24]
    2916:	9805      	ldr	r0, [sp, #20]
    2918:	f7ff fe82 	bl	2620 <_printf_common>
    291c:	1c43      	adds	r3, r0, #1
    291e:	d1b3      	bne.n	2888 <_printf_i+0x18c>
    2920:	2001      	movs	r0, #1
    2922:	4240      	negs	r0, r0
    2924:	b00b      	add	sp, #44	; 0x2c
    2926:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2928:	00002cc6 	.word	0x00002cc6
    292c:	00002cb5 	.word	0x00002cb5

00002930 <_sbrk_r>:
    2930:	2300      	movs	r3, #0
    2932:	b570      	push	{r4, r5, r6, lr}
    2934:	4c06      	ldr	r4, [pc, #24]	; (2950 <_sbrk_r+0x20>)
    2936:	0005      	movs	r5, r0
    2938:	0008      	movs	r0, r1
    293a:	6023      	str	r3, [r4, #0]
    293c:	f7fe f94e 	bl	bdc <_sbrk>
    2940:	1c43      	adds	r3, r0, #1
    2942:	d103      	bne.n	294c <_sbrk_r+0x1c>
    2944:	6823      	ldr	r3, [r4, #0]
    2946:	2b00      	cmp	r3, #0
    2948:	d000      	beq.n	294c <_sbrk_r+0x1c>
    294a:	602b      	str	r3, [r5, #0]
    294c:	bd70      	pop	{r4, r5, r6, pc}
    294e:	46c0      	nop			; (mov r8, r8)
    2950:	20000254 	.word	0x20000254

00002954 <__sread>:
    2954:	b570      	push	{r4, r5, r6, lr}
    2956:	000c      	movs	r4, r1
    2958:	250e      	movs	r5, #14
    295a:	5f49      	ldrsh	r1, [r1, r5]
    295c:	f000 f8b2 	bl	2ac4 <_read_r>
    2960:	2800      	cmp	r0, #0
    2962:	db03      	blt.n	296c <__sread+0x18>
    2964:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2966:	181b      	adds	r3, r3, r0
    2968:	6563      	str	r3, [r4, #84]	; 0x54
    296a:	bd70      	pop	{r4, r5, r6, pc}
    296c:	89a3      	ldrh	r3, [r4, #12]
    296e:	4a02      	ldr	r2, [pc, #8]	; (2978 <__sread+0x24>)
    2970:	4013      	ands	r3, r2
    2972:	81a3      	strh	r3, [r4, #12]
    2974:	e7f9      	b.n	296a <__sread+0x16>
    2976:	46c0      	nop			; (mov r8, r8)
    2978:	ffffefff 	.word	0xffffefff

0000297c <__swrite>:
    297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    297e:	001f      	movs	r7, r3
    2980:	898b      	ldrh	r3, [r1, #12]
    2982:	0005      	movs	r5, r0
    2984:	000c      	movs	r4, r1
    2986:	0016      	movs	r6, r2
    2988:	05db      	lsls	r3, r3, #23
    298a:	d505      	bpl.n	2998 <__swrite+0x1c>
    298c:	230e      	movs	r3, #14
    298e:	5ec9      	ldrsh	r1, [r1, r3]
    2990:	2200      	movs	r2, #0
    2992:	2302      	movs	r3, #2
    2994:	f000 f874 	bl	2a80 <_lseek_r>
    2998:	89a3      	ldrh	r3, [r4, #12]
    299a:	4a05      	ldr	r2, [pc, #20]	; (29b0 <__swrite+0x34>)
    299c:	0028      	movs	r0, r5
    299e:	4013      	ands	r3, r2
    29a0:	81a3      	strh	r3, [r4, #12]
    29a2:	0032      	movs	r2, r6
    29a4:	230e      	movs	r3, #14
    29a6:	5ee1      	ldrsh	r1, [r4, r3]
    29a8:	003b      	movs	r3, r7
    29aa:	f000 f81f 	bl	29ec <_write_r>
    29ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29b0:	ffffefff 	.word	0xffffefff

000029b4 <__sseek>:
    29b4:	b570      	push	{r4, r5, r6, lr}
    29b6:	000c      	movs	r4, r1
    29b8:	250e      	movs	r5, #14
    29ba:	5f49      	ldrsh	r1, [r1, r5]
    29bc:	f000 f860 	bl	2a80 <_lseek_r>
    29c0:	89a3      	ldrh	r3, [r4, #12]
    29c2:	1c42      	adds	r2, r0, #1
    29c4:	d103      	bne.n	29ce <__sseek+0x1a>
    29c6:	4a05      	ldr	r2, [pc, #20]	; (29dc <__sseek+0x28>)
    29c8:	4013      	ands	r3, r2
    29ca:	81a3      	strh	r3, [r4, #12]
    29cc:	bd70      	pop	{r4, r5, r6, pc}
    29ce:	2280      	movs	r2, #128	; 0x80
    29d0:	0152      	lsls	r2, r2, #5
    29d2:	4313      	orrs	r3, r2
    29d4:	81a3      	strh	r3, [r4, #12]
    29d6:	6560      	str	r0, [r4, #84]	; 0x54
    29d8:	e7f8      	b.n	29cc <__sseek+0x18>
    29da:	46c0      	nop			; (mov r8, r8)
    29dc:	ffffefff 	.word	0xffffefff

000029e0 <__sclose>:
    29e0:	b510      	push	{r4, lr}
    29e2:	230e      	movs	r3, #14
    29e4:	5ec9      	ldrsh	r1, [r1, r3]
    29e6:	f000 f815 	bl	2a14 <_close_r>
    29ea:	bd10      	pop	{r4, pc}

000029ec <_write_r>:
    29ec:	b570      	push	{r4, r5, r6, lr}
    29ee:	0005      	movs	r5, r0
    29f0:	0008      	movs	r0, r1
    29f2:	0011      	movs	r1, r2
    29f4:	2200      	movs	r2, #0
    29f6:	4c06      	ldr	r4, [pc, #24]	; (2a10 <_write_r+0x24>)
    29f8:	6022      	str	r2, [r4, #0]
    29fa:	001a      	movs	r2, r3
    29fc:	f7fe feba 	bl	1774 <_write>
    2a00:	1c43      	adds	r3, r0, #1
    2a02:	d103      	bne.n	2a0c <_write_r+0x20>
    2a04:	6823      	ldr	r3, [r4, #0]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d000      	beq.n	2a0c <_write_r+0x20>
    2a0a:	602b      	str	r3, [r5, #0]
    2a0c:	bd70      	pop	{r4, r5, r6, pc}
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	20000254 	.word	0x20000254

00002a14 <_close_r>:
    2a14:	2300      	movs	r3, #0
    2a16:	b570      	push	{r4, r5, r6, lr}
    2a18:	4c06      	ldr	r4, [pc, #24]	; (2a34 <_close_r+0x20>)
    2a1a:	0005      	movs	r5, r0
    2a1c:	0008      	movs	r0, r1
    2a1e:	6023      	str	r3, [r4, #0]
    2a20:	f7fe f8ee 	bl	c00 <_close>
    2a24:	1c43      	adds	r3, r0, #1
    2a26:	d103      	bne.n	2a30 <_close_r+0x1c>
    2a28:	6823      	ldr	r3, [r4, #0]
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	d000      	beq.n	2a30 <_close_r+0x1c>
    2a2e:	602b      	str	r3, [r5, #0]
    2a30:	bd70      	pop	{r4, r5, r6, pc}
    2a32:	46c0      	nop			; (mov r8, r8)
    2a34:	20000254 	.word	0x20000254

00002a38 <_fstat_r>:
    2a38:	2300      	movs	r3, #0
    2a3a:	b570      	push	{r4, r5, r6, lr}
    2a3c:	4c06      	ldr	r4, [pc, #24]	; (2a58 <_fstat_r+0x20>)
    2a3e:	0005      	movs	r5, r0
    2a40:	0008      	movs	r0, r1
    2a42:	0011      	movs	r1, r2
    2a44:	6023      	str	r3, [r4, #0]
    2a46:	f7fe f8de 	bl	c06 <_fstat>
    2a4a:	1c43      	adds	r3, r0, #1
    2a4c:	d103      	bne.n	2a56 <_fstat_r+0x1e>
    2a4e:	6823      	ldr	r3, [r4, #0]
    2a50:	2b00      	cmp	r3, #0
    2a52:	d000      	beq.n	2a56 <_fstat_r+0x1e>
    2a54:	602b      	str	r3, [r5, #0]
    2a56:	bd70      	pop	{r4, r5, r6, pc}
    2a58:	20000254 	.word	0x20000254

00002a5c <_isatty_r>:
    2a5c:	2300      	movs	r3, #0
    2a5e:	b570      	push	{r4, r5, r6, lr}
    2a60:	4c06      	ldr	r4, [pc, #24]	; (2a7c <_isatty_r+0x20>)
    2a62:	0005      	movs	r5, r0
    2a64:	0008      	movs	r0, r1
    2a66:	6023      	str	r3, [r4, #0]
    2a68:	f7fe f8d2 	bl	c10 <_isatty>
    2a6c:	1c43      	adds	r3, r0, #1
    2a6e:	d103      	bne.n	2a78 <_isatty_r+0x1c>
    2a70:	6823      	ldr	r3, [r4, #0]
    2a72:	2b00      	cmp	r3, #0
    2a74:	d000      	beq.n	2a78 <_isatty_r+0x1c>
    2a76:	602b      	str	r3, [r5, #0]
    2a78:	bd70      	pop	{r4, r5, r6, pc}
    2a7a:	46c0      	nop			; (mov r8, r8)
    2a7c:	20000254 	.word	0x20000254

00002a80 <_lseek_r>:
    2a80:	b570      	push	{r4, r5, r6, lr}
    2a82:	0005      	movs	r5, r0
    2a84:	0008      	movs	r0, r1
    2a86:	0011      	movs	r1, r2
    2a88:	2200      	movs	r2, #0
    2a8a:	4c06      	ldr	r4, [pc, #24]	; (2aa4 <_lseek_r+0x24>)
    2a8c:	6022      	str	r2, [r4, #0]
    2a8e:	001a      	movs	r2, r3
    2a90:	f7fe f8c0 	bl	c14 <_lseek>
    2a94:	1c43      	adds	r3, r0, #1
    2a96:	d103      	bne.n	2aa0 <_lseek_r+0x20>
    2a98:	6823      	ldr	r3, [r4, #0]
    2a9a:	2b00      	cmp	r3, #0
    2a9c:	d000      	beq.n	2aa0 <_lseek_r+0x20>
    2a9e:	602b      	str	r3, [r5, #0]
    2aa0:	bd70      	pop	{r4, r5, r6, pc}
    2aa2:	46c0      	nop			; (mov r8, r8)
    2aa4:	20000254 	.word	0x20000254

00002aa8 <memchr>:
    2aa8:	b2c9      	uxtb	r1, r1
    2aaa:	1882      	adds	r2, r0, r2
    2aac:	4290      	cmp	r0, r2
    2aae:	d101      	bne.n	2ab4 <memchr+0xc>
    2ab0:	2000      	movs	r0, #0
    2ab2:	4770      	bx	lr
    2ab4:	7803      	ldrb	r3, [r0, #0]
    2ab6:	428b      	cmp	r3, r1
    2ab8:	d0fb      	beq.n	2ab2 <memchr+0xa>
    2aba:	3001      	adds	r0, #1
    2abc:	e7f6      	b.n	2aac <memchr+0x4>

00002abe <__malloc_lock>:
    2abe:	4770      	bx	lr

00002ac0 <__malloc_unlock>:
    2ac0:	4770      	bx	lr
	...

00002ac4 <_read_r>:
    2ac4:	b570      	push	{r4, r5, r6, lr}
    2ac6:	0005      	movs	r5, r0
    2ac8:	0008      	movs	r0, r1
    2aca:	0011      	movs	r1, r2
    2acc:	2200      	movs	r2, #0
    2ace:	4c06      	ldr	r4, [pc, #24]	; (2ae8 <_read_r+0x24>)
    2ad0:	6022      	str	r2, [r4, #0]
    2ad2:	001a      	movs	r2, r3
    2ad4:	f7fe fe6a 	bl	17ac <_read>
    2ad8:	1c43      	adds	r3, r0, #1
    2ada:	d103      	bne.n	2ae4 <_read_r+0x20>
    2adc:	6823      	ldr	r3, [r4, #0]
    2ade:	2b00      	cmp	r3, #0
    2ae0:	d000      	beq.n	2ae4 <_read_r+0x20>
    2ae2:	602b      	str	r3, [r5, #0]
    2ae4:	bd70      	pop	{r4, r5, r6, pc}
    2ae6:	46c0      	nop			; (mov r8, r8)
    2ae8:	20000254 	.word	0x20000254
    2aec:	656c6449 	.word	0x656c6449
    2af0:	00000000 	.word	0x00000000
    2af4:	682f2e2e 	.word	0x682f2e2e
    2af8:	732f6c61 	.word	0x732f6c61
    2afc:	682f6372 	.word	0x682f6372
    2b00:	635f6c61 	.word	0x635f6c61
    2b04:	6e656c61 	.word	0x6e656c61
    2b08:	2e726164 	.word	0x2e726164
    2b0c:	00000063 	.word	0x00000063
    2b10:	682f2e2e 	.word	0x682f2e2e
    2b14:	732f6c61 	.word	0x732f6c61
    2b18:	682f6372 	.word	0x682f6372
    2b1c:	755f6c61 	.word	0x755f6c61
    2b20:	74726173 	.word	0x74726173
    2b24:	7973615f 	.word	0x7973615f
    2b28:	632e636e 	.word	0x632e636e
    2b2c:	00000000 	.word	0x00000000
    2b30:	682f2e2e 	.word	0x682f2e2e
    2b34:	752f6c61 	.word	0x752f6c61
    2b38:	736c6974 	.word	0x736c6974
    2b3c:	6372732f 	.word	0x6372732f
    2b40:	6974752f 	.word	0x6974752f
    2b44:	725f736c 	.word	0x725f736c
    2b48:	62676e69 	.word	0x62676e69
    2b4c:	65666675 	.word	0x65666675
    2b50:	00632e72 	.word	0x00632e72

00002b54 <_map>:
    2b54:	0000000f 0000000f 682f2e2e 652f6c70     ........../hpl/e
    2b64:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    2b74:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    2b84:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
    2b94:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    2ba4:	0000632e 65656c53 676e6970 6c644920     .c..Sleeping Idl
    2bb4:	00000065 0a0d0a0d 3d3d2023 3d3d3d3d     e.......# ======
    2bc4:	3d3d3d3d 00000d3d 2e302e31 00000030     =====...1.0.0...
    2bd4:	756d2023 5f62696c 6e696c73 2520796b     # mulib_slinky %
    2be4:	73203a73 68206565 73707474 672f2f3a     s: see https://g
    2bf4:	75687469 6f632e62 64722f6d 726f6f70     ithub.com/rdpoor
    2c04:	6c756d2f 0a0d6269 00000000 74747562     /mulib......butt
    2c14:	70206e6f 73736572 61206465 6c252074     on pressed at %l
    2c24:	000a0d75 74747542 49206e6f 7265746e     u...Button Inter
    2c34:	74707572 00000000 0044454c              rupt....LED.

00002c40 <_global_impure_ptr>:
    2c40:	20000004                                ... 

00002c44 <__sf_fake_stderr>:
	...

00002c64 <__sf_fake_stdin>:
	...

00002c84 <__sf_fake_stdout>:
	...
    2ca4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2cb4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2cc4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2cd4:	00006665                                ef..

00002cd8 <_init>:
    2cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cda:	46c0      	nop			; (mov r8, r8)
    2cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2cde:	bc08      	pop	{r3}
    2ce0:	469e      	mov	lr, r3
    2ce2:	4770      	bx	lr

00002ce4 <__init_array_start>:
    2ce4:	000000dd 	.word	0x000000dd

00002ce8 <_fini>:
    2ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cea:	46c0      	nop			; (mov r8, r8)
    2cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2cee:	bc08      	pop	{r3}
    2cf0:	469e      	mov	lr, r3
    2cf2:	4770      	bx	lr

00002cf4 <__fini_array_start>:
    2cf4:	000000b5 	.word	0x000000b5
