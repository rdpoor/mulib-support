
mulib_slinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ce0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00002ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001f4  20000064  00002d44  00020064  2**2
                  ALLOC
  3 .stack        00002000  20000258  00002f38  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000301e6  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000044f3  00000000  00000000  000502cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e774  00000000  00000000  000547be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e40  00000000  00000000  00062f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000013f8  00000000  00000000  00063d72  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b39d  00000000  00000000  0006516a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000146ba  00000000  00000000  00080507  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008b7c3  00000000  00000000  00094bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002a78  00000000  00000000  00120384  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 22 00 20 f1 06 00 00 ed 06 00 00 ed 06 00 00     X". ............
	...
      2c:	ed 06 00 00 00 00 00 00 00 00 00 00 ed 06 00 00     ................
      3c:	ed 06 00 00 ed 06 00 00 ed 06 00 00 ed 06 00 00     ................
      4c:	7d 12 00 00 e5 0f 00 00 ed 06 00 00 ed 06 00 00     }...............
      5c:	ed 06 00 00 ed 06 00 00 ed 06 00 00 ed 06 00 00     ................
      6c:	ed 06 00 00 6d 14 00 00 ed 06 00 00 ed 06 00 00     ....m...........
      7c:	ed 06 00 00 ed 06 00 00 ed 06 00 00 ed 06 00 00     ................
      8c:	ed 06 00 00 ed 06 00 00 ed 06 00 00 ed 06 00 00     ................
      9c:	ed 06 00 00 ed 06 00 00 ed 06 00 00 ed 06 00 00     ................
      ac:	ed 06 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	00002ce0 	.word	0x00002ce0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	00002ce0 	.word	0x00002ce0
     10c:	00002ce0 	.word	0x00002ce0
     110:	00000000 	.word	0x00000000

00000114 <default_idle_fn>:
}

static void *default_idle_fn(void *self, void *arg) {
  // the default idle task doesn't do much...
  return self;
}
     114:	4770      	bx	lr
	...

00000118 <sched_task_at>:
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
  }
  sched->event_queue_count -= 1;
}

static mu_sched_err_t sched_task_at(mu_sched_t *sched, mu_task_t *task, mu_time_t time) {
     118:	b5f0      	push	{r4, r5, r6, r7, lr}
     11a:	b083      	sub	sp, #12
     11c:	0004      	movs	r4, r0
     11e:	9101      	str	r1, [sp, #4]
     120:	9200      	str	r2, [sp, #0]
  mu_sched_event_t *event;
  size_t index;

  if (sched->event_queue_count >= sched->event_queue_capacity) {
     122:	6885      	ldr	r5, [r0, #8]
    return MU_SCHED_ERR_FULL;
     124:	2002      	movs	r0, #2
  if (sched->event_queue_count >= sched->event_queue_capacity) {
     126:	6863      	ldr	r3, [r4, #4]
     128:	429d      	cmp	r5, r3
     12a:	d301      	bcc.n	130 <sched_task_at+0x18>
  // fill in the event
  event = &sched->event_queue[index];
  event_init(event, task, time);
  sched->event_queue_count += 1;
  return MU_SCHED_ERR_NONE;
}
     12c:	b003      	add	sp, #12
     12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (sched->event_queue_count == 0) {
     130:	2d00      	cmp	r5, #0
     132:	d10c      	bne.n	14e <sched_task_at+0x36>
  event = &sched->event_queue[index];
     134:	00ed      	lsls	r5, r5, #3
     136:	6823      	ldr	r3, [r4, #0]
     138:	469c      	mov	ip, r3
     13a:	4465      	add	r5, ip
  event->task = task;
     13c:	9b01      	ldr	r3, [sp, #4]
     13e:	606b      	str	r3, [r5, #4]
  event->time = time;
     140:	9b00      	ldr	r3, [sp, #0]
     142:	602b      	str	r3, [r5, #0]
  sched->event_queue_count += 1;
     144:	68a3      	ldr	r3, [r4, #8]
     146:	3301      	adds	r3, #1
     148:	60a3      	str	r3, [r4, #8]
  return MU_SCHED_ERR_NONE;
     14a:	2000      	movs	r0, #0
     14c:	e7ee      	b.n	12c <sched_task_at+0x14>
#else
// linear search for insertion point
static size_t find_insertion_index(mu_sched_t *sched, mu_time_t time) {
  mu_sched_event_t *events = sched->event_queue;

  for (size_t i = sched->event_queue_count - 1; i >= 0; i--) {
     14e:	1e6f      	subs	r7, r5, #1
     150:	4b12      	ldr	r3, [pc, #72]	; (19c <sched_task_at+0x84>)
     152:	469c      	mov	ip, r3
     154:	4465      	add	r5, ip
     156:	00ed      	lsls	r5, r5, #3
     158:	6823      	ldr	r3, [r4, #0]
     15a:	469c      	mov	ip, r3
     15c:	4465      	add	r5, ip
    if (mu_time_precedes(time, events[i].time)) {
     15e:	4e10      	ldr	r6, [pc, #64]	; (1a0 <sched_task_at+0x88>)
     160:	6829      	ldr	r1, [r5, #0]
     162:	9800      	ldr	r0, [sp, #0]
     164:	47b0      	blx	r6
     166:	2800      	cmp	r0, #0
     168:	d104      	bne.n	174 <sched_task_at+0x5c>
     16a:	3d08      	subs	r5, #8
      return i+1;    // precedes incumbent
    } else if (i == 0) {
     16c:	2f00      	cmp	r7, #0
     16e:	d012      	beq.n	196 <sched_task_at+0x7e>
  for (size_t i = sched->event_queue_count - 1; i >= 0; i--) {
     170:	3f01      	subs	r7, #1
     172:	e7f5      	b.n	160 <sched_task_at+0x48>
      return i+1;    // precedes incumbent
     174:	1c7d      	adds	r5, r7, #1
  int to_move = sched->event_queue_count - index;
     176:	68a3      	ldr	r3, [r4, #8]
     178:	1b5a      	subs	r2, r3, r5
  if (to_move > 0) {
     17a:	2a00      	cmp	r2, #0
     17c:	ddda      	ble.n	134 <sched_task_at+0x1c>
    mu_sched_event_t *src = &sched->event_queue[index];
     17e:	00eb      	lsls	r3, r5, #3
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     180:	00d2      	lsls	r2, r2, #3
    mu_sched_event_t *src = &sched->event_queue[index];
     182:	6821      	ldr	r1, [r4, #0]
     184:	18c9      	adds	r1, r1, r3
    mu_sched_event_t *dst = &sched->event_queue[index + 1];
     186:	3308      	adds	r3, #8
     188:	0018      	movs	r0, r3
     18a:	6823      	ldr	r3, [r4, #0]
     18c:	469c      	mov	ip, r3
     18e:	4460      	add	r0, ip
    memmove(dst, src, sizeof(mu_sched_event_t) * to_move);
     190:	4b04      	ldr	r3, [pc, #16]	; (1a4 <sched_task_at+0x8c>)
     192:	4798      	blx	r3
     194:	e7ce      	b.n	134 <sched_task_at+0x1c>
      return 0;      // follows all
     196:	003d      	movs	r5, r7
     198:	e7ed      	b.n	176 <sched_task_at+0x5e>
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	1fffffff 	.word	0x1fffffff
     1a0:	0000041d 	.word	0x0000041d
     1a4:	00001b67 	.word	0x00001b67

000001a8 <mu_sched_reset>:
mu_sched_t *mu_sched_reset(mu_sched_t *sched) {
     1a8:	b570      	push	{r4, r5, r6, lr}
     1aa:	0004      	movs	r4, r0
  sched->event_queue_count = 0;
     1ac:	2500      	movs	r5, #0
     1ae:	6085      	str	r5, [r0, #8]
  mu_spscq_reset(sched->isr_queue);
     1b0:	68c0      	ldr	r0, [r0, #12]
     1b2:	4b02      	ldr	r3, [pc, #8]	; (1bc <mu_sched_reset+0x14>)
     1b4:	4798      	blx	r3
  sched->current_event.task = NULL;
     1b6:	61e5      	str	r5, [r4, #28]
}
     1b8:	0020      	movs	r0, r4
     1ba:	bd70      	pop	{r4, r5, r6, pc}
     1bc:	0000033b 	.word	0x0000033b

000001c0 <mu_sched_init>:
                          mu_spscq_t *isr_queue) {
     1c0:	b570      	push	{r4, r5, r6, lr}
     1c2:	0004      	movs	r4, r0
  sched->event_queue = event_queue;
     1c4:	6001      	str	r1, [r0, #0]
  sched->event_queue_capacity = event_queue_capacity;
     1c6:	6042      	str	r2, [r0, #4]
  sched->isr_queue = isr_queue;
     1c8:	60c3      	str	r3, [r0, #12]
  sched->clock_fn = mu_time_now;
     1ca:	4b06      	ldr	r3, [pc, #24]	; (1e4 <mu_sched_init+0x24>)
     1cc:	6103      	str	r3, [r0, #16]
  sched->idle_task = &s_default_idle_task;
     1ce:	4806      	ldr	r0, [pc, #24]	; (1e8 <mu_sched_init+0x28>)
     1d0:	6160      	str	r0, [r4, #20]
  mu_task_init(&s_default_idle_task, default_idle_fn, NULL, "Idle");
     1d2:	4b06      	ldr	r3, [pc, #24]	; (1ec <mu_sched_init+0x2c>)
     1d4:	2200      	movs	r2, #0
     1d6:	4906      	ldr	r1, [pc, #24]	; (1f0 <mu_sched_init+0x30>)
     1d8:	4d06      	ldr	r5, [pc, #24]	; (1f4 <mu_sched_init+0x34>)
     1da:	47a8      	blx	r5
  return mu_sched_reset(sched);
     1dc:	0020      	movs	r0, r4
     1de:	4b06      	ldr	r3, [pc, #24]	; (1f8 <mu_sched_init+0x38>)
     1e0:	4798      	blx	r3
}
     1e2:	bd70      	pop	{r4, r5, r6, pc}
     1e4:	00000449 	.word	0x00000449
     1e8:	20000080 	.word	0x20000080
     1ec:	00002ad4 	.word	0x00002ad4
     1f0:	00000115 	.word	0x00000115
     1f4:	000003b3 	.word	0x000003b3
     1f8:	000001a9 	.word	0x000001a9

000001fc <mu_sched_set_idle_task>:
  sched->idle_task = task;
     1fc:	6141      	str	r1, [r0, #20]
}
     1fe:	4770      	bx	lr

00000200 <mu_sched_get_current_time>:
mu_time_t mu_sched_get_current_time(mu_sched_t *sched) {
     200:	b510      	push	{r4, lr}
  return sched->clock_fn();
     202:	6903      	ldr	r3, [r0, #16]
     204:	4798      	blx	r3
}
     206:	bd10      	pop	{r4, pc}

00000208 <mu_sched_get_next_event>:
  if (sched->event_queue_count == 0) {
     208:	6883      	ldr	r3, [r0, #8]
     20a:	2b00      	cmp	r3, #0
     20c:	d006      	beq.n	21c <mu_sched_get_next_event+0x14>
    return &sched->event_queue[sched->event_queue_count - 1];
     20e:	4a04      	ldr	r2, [pc, #16]	; (220 <mu_sched_get_next_event+0x18>)
     210:	4694      	mov	ip, r2
     212:	4463      	add	r3, ip
     214:	00db      	lsls	r3, r3, #3
     216:	6800      	ldr	r0, [r0, #0]
     218:	18c0      	adds	r0, r0, r3
}
     21a:	4770      	bx	lr
    return NULL;
     21c:	2000      	movs	r0, #0
     21e:	e7fc      	b.n	21a <mu_sched_get_next_event+0x12>
     220:	1fffffff 	.word	0x1fffffff

00000224 <mu_sched_step>:
mu_sched_err_t mu_sched_step(mu_sched_t *sched) {
     224:	b5f0      	push	{r4, r5, r6, r7, lr}
     226:	b083      	sub	sp, #12
     228:	0004      	movs	r4, r0
  mu_time_t now = mu_sched_get_current_time(sched);
     22a:	4b1a      	ldr	r3, [pc, #104]	; (294 <mu_sched_step+0x70>)
     22c:	4798      	blx	r3
     22e:	0005      	movs	r5, r0
  while (mu_spscq_get(sched->isr_queue, (void **)&task) != MU_CQUEUE_ERR_EMPTY) {
     230:	4e19      	ldr	r6, [pc, #100]	; (298 <mu_sched_step+0x74>)
  return sched_task_at(sched, task, at);
     232:	4f1a      	ldr	r7, [pc, #104]	; (29c <mu_sched_step+0x78>)
  while (mu_spscq_get(sched->isr_queue, (void **)&task) != MU_CQUEUE_ERR_EMPTY) {
     234:	a901      	add	r1, sp, #4
     236:	68e0      	ldr	r0, [r4, #12]
     238:	47b0      	blx	r6
     23a:	2801      	cmp	r0, #1
     23c:	d007      	beq.n	24e <mu_sched_step+0x2a>
  return sched_task_at(sched, task, at);
     23e:	002a      	movs	r2, r5
     240:	9901      	ldr	r1, [sp, #4]
     242:	0020      	movs	r0, r4
     244:	47b8      	blx	r7
    if (err != MU_SCHED_ERR_NONE) {
     246:	2800      	cmp	r0, #0
     248:	d0f4      	beq.n	234 <mu_sched_step+0x10>
}
     24a:	b003      	add	sp, #12
     24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  event = mu_sched_get_next_event(sched);
     24e:	0020      	movs	r0, r4
     250:	4b13      	ldr	r3, [pc, #76]	; (2a0 <mu_sched_step+0x7c>)
     252:	4798      	blx	r3
     254:	1e06      	subs	r6, r0, #0
  if (event != NULL) {
     256:	d005      	beq.n	264 <mu_sched_step+0x40>
    if (!mu_time_follows(mu_sched_event_get_time(event), now)) {
     258:	0029      	movs	r1, r5
     25a:	6800      	ldr	r0, [r0, #0]
     25c:	4b11      	ldr	r3, [pc, #68]	; (2a4 <mu_sched_step+0x80>)
     25e:	4798      	blx	r3
     260:	2800      	cmp	r0, #0
     262:	d005      	beq.n	270 <mu_sched_step+0x4c>
  mu_task_call(sched->idle_task, sched);
     264:	6960      	ldr	r0, [r4, #20]
     266:	0021      	movs	r1, r4
     268:	4b0f      	ldr	r3, [pc, #60]	; (2a8 <mu_sched_step+0x84>)
     26a:	4798      	blx	r3
  return MU_SCHED_ERR_NONE;
     26c:	2000      	movs	r0, #0
     26e:	e7ec      	b.n	24a <mu_sched_step+0x26>
      memcpy(&(sched->current_event), event, sizeof(mu_sched_event_t));
     270:	0020      	movs	r0, r4
     272:	3018      	adds	r0, #24
     274:	2208      	movs	r2, #8
     276:	0031      	movs	r1, r6
     278:	4b0c      	ldr	r3, [pc, #48]	; (2ac <mu_sched_step+0x88>)
     27a:	4798      	blx	r3
  return &sched->event_queue[--sched->event_queue_count];
     27c:	68a3      	ldr	r3, [r4, #8]
     27e:	3b01      	subs	r3, #1
     280:	60a3      	str	r3, [r4, #8]
      mu_task_call(sched->current_event.task, sched);
     282:	0021      	movs	r1, r4
     284:	69e0      	ldr	r0, [r4, #28]
     286:	4b08      	ldr	r3, [pc, #32]	; (2a8 <mu_sched_step+0x84>)
     288:	4798      	blx	r3
      sched->current_event.task = NULL;
     28a:	2300      	movs	r3, #0
     28c:	61e3      	str	r3, [r4, #28]
      return MU_SCHED_ERR_NONE;
     28e:	2000      	movs	r0, #0
     290:	e7db      	b.n	24a <mu_sched_step+0x26>
     292:	46c0      	nop			; (mov r8, r8)
     294:	00000201 	.word	0x00000201
     298:	00000389 	.word	0x00000389
     29c:	00000119 	.word	0x00000119
     2a0:	00000209 	.word	0x00000209
     2a4:	00000429 	.word	0x00000429
     2a8:	000003c5 	.word	0x000003c5
     2ac:	00001b55 	.word	0x00001b55

000002b0 <mu_sched_task_now>:
mu_sched_err_t mu_sched_task_now(mu_sched_t *sched, mu_task_t *task) {
     2b0:	b570      	push	{r4, r5, r6, lr}
     2b2:	0004      	movs	r4, r0
     2b4:	000d      	movs	r5, r1
  return sched_task_at(sched, task, mu_sched_get_current_time(sched));
     2b6:	4b04      	ldr	r3, [pc, #16]	; (2c8 <mu_sched_task_now+0x18>)
     2b8:	4798      	blx	r3
     2ba:	0002      	movs	r2, r0
     2bc:	0029      	movs	r1, r5
     2be:	0020      	movs	r0, r4
     2c0:	4b02      	ldr	r3, [pc, #8]	; (2cc <mu_sched_task_now+0x1c>)
     2c2:	4798      	blx	r3
}
     2c4:	bd70      	pop	{r4, r5, r6, pc}
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	00000201 	.word	0x00000201
     2cc:	00000119 	.word	0x00000119

000002d0 <mu_sched_reschedule_in>:
mu_sched_err_t mu_sched_reschedule_in(mu_sched_t *sched, mu_time_dt in) {
     2d0:	b570      	push	{r4, r5, r6, lr}
     2d2:	0004      	movs	r4, r0
  if (sched->current_event.task == NULL) {
     2d4:	69c3      	ldr	r3, [r0, #28]
     2d6:	2b00      	cmp	r3, #0
     2d8:	d00d      	beq.n	2f6 <mu_sched_reschedule_in+0x26>
    return MU_SCHED_ERR_NOT_FOUND;
     2da:	2003      	movs	r0, #3
  if (!event) {
     2dc:	0023      	movs	r3, r4
     2de:	3318      	adds	r3, #24
     2e0:	d008      	beq.n	2f4 <mu_sched_reschedule_in+0x24>
  mu_task_t *task = event->task;
     2e2:	69e5      	ldr	r5, [r4, #28]
  return sched_task_at(sched, task, mu_time_offset(time, in));
     2e4:	69a0      	ldr	r0, [r4, #24]
     2e6:	4b05      	ldr	r3, [pc, #20]	; (2fc <mu_sched_reschedule_in+0x2c>)
     2e8:	4798      	blx	r3
     2ea:	0002      	movs	r2, r0
     2ec:	0029      	movs	r1, r5
     2ee:	0020      	movs	r0, r4
     2f0:	4b03      	ldr	r3, [pc, #12]	; (300 <mu_sched_reschedule_in+0x30>)
     2f2:	4798      	blx	r3
}
     2f4:	bd70      	pop	{r4, r5, r6, pc}
    return MU_SCHED_ERR_NOT_FOUND;
     2f6:	2003      	movs	r0, #3
     2f8:	e7fc      	b.n	2f4 <mu_sched_reschedule_in+0x24>
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	00000405 	.word	0x00000405
     300:	00000119 	.word	0x00000119

00000304 <mu_sched_task_from_isr>:
mu_sched_err_t mu_sched_task_from_isr(mu_sched_t *sched, mu_task_t *task) {
     304:	b510      	push	{r4, lr}
  if (mu_spscq_put(sched->isr_queue, task) == MU_CQUEUE_ERR_FULL) {
     306:	68c0      	ldr	r0, [r0, #12]
     308:	4b03      	ldr	r3, [pc, #12]	; (318 <mu_sched_task_from_isr+0x14>)
     30a:	4798      	blx	r3
    return MU_SCHED_ERR_NONE;
     30c:	3802      	subs	r0, #2
     30e:	4243      	negs	r3, r0
     310:	4158      	adcs	r0, r3
     312:	0040      	lsls	r0, r0, #1
}
     314:	bd10      	pop	{r4, pc}
     316:	46c0      	nop			; (mov r8, r8)
     318:	00000359 	.word	0x00000359

0000031c <mu_spscq_init>:
// =============================================================================
// public code

mu_spscq_err_t mu_spscq_init(mu_spscq_t *q,
                               mu_spscq_item_t *store,
                               uint16_t capacity) {
     31c:	b510      	push	{r4, lr}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
    return MU_CQUEUE_ERR_SIZE;
     31e:	2303      	movs	r3, #3
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     320:	2a00      	cmp	r2, #0
     322:	d101      	bne.n	328 <mu_spscq_init+0xc>
  }
  q->mask = capacity - 1;
  q->store = store;
  return mu_spscq_reset(q);
}
     324:	0018      	movs	r0, r3
     326:	bd10      	pop	{r4, pc}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     328:	1e54      	subs	r4, r2, #1
     32a:	4222      	tst	r2, r4
     32c:	d1fa      	bne.n	324 <mu_spscq_init+0x8>
  q->mask = capacity - 1;
     32e:	8004      	strh	r4, [r0, #0]
  q->store = store;
     330:	6081      	str	r1, [r0, #8]

mu_spscq_err_t mu_spscq_reset(mu_spscq_t *q) {
  q->head = 0;
     332:	2300      	movs	r3, #0
     334:	8043      	strh	r3, [r0, #2]
  q->tail = 0;
     336:	8083      	strh	r3, [r0, #4]
  return mu_spscq_reset(q);
     338:	e7f4      	b.n	324 <mu_spscq_init+0x8>

0000033a <mu_spscq_reset>:
  q->head = 0;
     33a:	2300      	movs	r3, #0
     33c:	8043      	strh	r3, [r0, #2]
  q->tail = 0;
     33e:	8083      	strh	r3, [r0, #4]
  return MU_CQUEUE_ERR_NONE;
}
     340:	2000      	movs	r0, #0
     342:	4770      	bx	lr

00000344 <mu_spscq_is_full>:

bool mu_spscq_is_empty(mu_spscq_t *q) { return q->head == q->tail; }

bool mu_spscq_is_full(mu_spscq_t *q) {
  // would advancing tail by 1 make it catch up with head?
  return ((q->tail + 1) & q->mask) == q->head;
     344:	8883      	ldrh	r3, [r0, #4]
     346:	8842      	ldrh	r2, [r0, #2]
     348:	3301      	adds	r3, #1
     34a:	8800      	ldrh	r0, [r0, #0]
     34c:	4018      	ands	r0, r3
     34e:	1a80      	subs	r0, r0, r2
     350:	4243      	negs	r3, r0
     352:	4158      	adcs	r0, r3
     354:	b2c0      	uxtb	r0, r0
}
     356:	4770      	bx	lr

00000358 <mu_spscq_put>:

mu_spscq_err_t mu_spscq_put(mu_spscq_t *q, mu_spscq_item_t item) {
     358:	b570      	push	{r4, r5, r6, lr}
     35a:	0004      	movs	r4, r0
     35c:	000d      	movs	r5, r1
  if (mu_spscq_is_full(q)) {
     35e:	4b09      	ldr	r3, [pc, #36]	; (384 <mu_spscq_put+0x2c>)
     360:	4798      	blx	r3
    return MU_CQUEUE_ERR_FULL;
     362:	2302      	movs	r3, #2
  if (mu_spscq_is_full(q)) {
     364:	2800      	cmp	r0, #0
     366:	d001      	beq.n	36c <mu_spscq_put+0x14>
  }
  q->store[q->tail] = item;
  q->tail = (q->tail + 1) & q->mask;
  return MU_CQUEUE_ERR_NONE;
}
     368:	0018      	movs	r0, r3
     36a:	bd70      	pop	{r4, r5, r6, pc}
  q->store[q->tail] = item;
     36c:	88a3      	ldrh	r3, [r4, #4]
     36e:	009b      	lsls	r3, r3, #2
     370:	68a2      	ldr	r2, [r4, #8]
     372:	509d      	str	r5, [r3, r2]
  q->tail = (q->tail + 1) & q->mask;
     374:	88a2      	ldrh	r2, [r4, #4]
     376:	3201      	adds	r2, #1
     378:	8823      	ldrh	r3, [r4, #0]
     37a:	4013      	ands	r3, r2
     37c:	80a3      	strh	r3, [r4, #4]
  return MU_CQUEUE_ERR_NONE;
     37e:	2300      	movs	r3, #0
     380:	e7f2      	b.n	368 <mu_spscq_put+0x10>
     382:	46c0      	nop			; (mov r8, r8)
     384:	00000345 	.word	0x00000345

00000388 <mu_spscq_get>:
bool mu_spscq_is_empty(mu_spscq_t *q) { return q->head == q->tail; }
     388:	8843      	ldrh	r3, [r0, #2]
     38a:	8882      	ldrh	r2, [r0, #4]
     38c:	b29b      	uxth	r3, r3

mu_spscq_err_t mu_spscq_get(mu_spscq_t *q, mu_spscq_item_t *item) {
  if (mu_spscq_is_empty(q)) {
     38e:	4293      	cmp	r3, r2
     390:	d00b      	beq.n	3aa <mu_spscq_get+0x22>
    *item = NULL;
    return MU_CQUEUE_ERR_EMPTY;
  }
  *item = q->store[q->head];
     392:	8843      	ldrh	r3, [r0, #2]
     394:	6882      	ldr	r2, [r0, #8]
     396:	009b      	lsls	r3, r3, #2
     398:	589b      	ldr	r3, [r3, r2]
     39a:	600b      	str	r3, [r1, #0]
  q->head = (q->head + 1) & q->mask;
     39c:	8842      	ldrh	r2, [r0, #2]
     39e:	3201      	adds	r2, #1
     3a0:	8803      	ldrh	r3, [r0, #0]
     3a2:	4013      	ands	r3, r2
     3a4:	8043      	strh	r3, [r0, #2]
  return MU_CQUEUE_ERR_NONE;
     3a6:	2000      	movs	r0, #0
}
     3a8:	4770      	bx	lr
    *item = NULL;
     3aa:	2300      	movs	r3, #0
     3ac:	600b      	str	r3, [r1, #0]
    return MU_CQUEUE_ERR_EMPTY;
     3ae:	2001      	movs	r0, #1
     3b0:	e7fa      	b.n	3a8 <mu_spscq_get+0x20>

000003b2 <mu_task_init>:

mu_task_t *mu_task_init(mu_task_t *task,
                        mu_task_fn fn,
                        void *ctx,
                        const char *name) {
  task->fn = fn;
     3b2:	6001      	str	r1, [r0, #0]
  task->ctx = ctx;
     3b4:	6042      	str	r2, [r0, #4]
#if (MU_TASK_PROFILING)
  task->name = name;
     3b6:	6083      	str	r3, [r0, #8]
  task->call_count = 0;
     3b8:	2300      	movs	r3, #0
     3ba:	60c3      	str	r3, [r0, #12]
  task->runtime = 0;
     3bc:	6103      	str	r3, [r0, #16]
  task->max_duration = 0;
     3be:	6143      	str	r3, [r0, #20]
#endif
  return task;
}
     3c0:	4770      	bx	lr
	...

000003c4 <mu_task_call>:
#else
  return "";
#endif
}

void *mu_task_call(mu_task_t *task, void *arg) {
     3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3c6:	0004      	movs	r4, r0
     3c8:	000d      	movs	r5, r1

#if (MU_TASK_PROFILING)
  mu_time_t called_at = mu_time_now();
     3ca:	4f0c      	ldr	r7, [pc, #48]	; (3fc <mu_task_call+0x38>)
     3cc:	47b8      	blx	r7
     3ce:	0006      	movs	r6, r0
#endif
  void *result = task->fn(task->ctx, arg);
     3d0:	0029      	movs	r1, r5
     3d2:	6860      	ldr	r0, [r4, #4]
     3d4:	6823      	ldr	r3, [r4, #0]
     3d6:	4798      	blx	r3
     3d8:	0005      	movs	r5, r0
#if (MU_TASK_PROFILING)
  task->call_count += 1;
     3da:	68e3      	ldr	r3, [r4, #12]
     3dc:	3301      	adds	r3, #1
     3de:	60e3      	str	r3, [r4, #12]
  mu_time_dt duration = mu_time_difference(mu_time_now(), called_at);
     3e0:	47b8      	blx	r7
     3e2:	0031      	movs	r1, r6
     3e4:	4b06      	ldr	r3, [pc, #24]	; (400 <mu_task_call+0x3c>)
     3e6:	4798      	blx	r3
  task->runtime += duration;
     3e8:	6923      	ldr	r3, [r4, #16]
     3ea:	181b      	adds	r3, r3, r0
     3ec:	6123      	str	r3, [r4, #16]
  if (duration > task->max_duration) task->max_duration = duration;
     3ee:	6963      	ldr	r3, [r4, #20]
     3f0:	4298      	cmp	r0, r3
     3f2:	dd00      	ble.n	3f6 <mu_task_call+0x32>
     3f4:	6160      	str	r0, [r4, #20]
#endif
  return result;
}
     3f6:	0028      	movs	r0, r5
     3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	00000449 	.word	0x00000449
     400:	00000411 	.word	0x00000411

00000404 <mu_time_offset>:

void mu_time_init(void) {
  // mu_vm_init() must be called separately
}

mu_time_t mu_time_offset(mu_time_t t1, mu_time_dt dt) {
     404:	b510      	push	{r4, lr}
  return mu_vm_time_offset(t1, dt);
     406:	4b01      	ldr	r3, [pc, #4]	; (40c <mu_time_offset+0x8>)
     408:	4798      	blx	r3
}
     40a:	bd10      	pop	{r4, pc}
     40c:	0000055d 	.word	0x0000055d

00000410 <mu_time_difference>:

mu_time_dt mu_time_difference(mu_time_t t1, mu_time_t t2) {
     410:	b510      	push	{r4, lr}
  return mu_vm_time_difference(t1, t2);
     412:	4b01      	ldr	r3, [pc, #4]	; (418 <mu_time_difference+0x8>)
     414:	4798      	blx	r3
}
     416:	bd10      	pop	{r4, pc}
     418:	00000561 	.word	0x00000561

0000041c <mu_time_precedes>:

bool mu_time_precedes(mu_time_t t1, mu_time_t t2) {
     41c:	b510      	push	{r4, lr}
  return mu_vm_time_precedes(t1, t2);
     41e:	4b01      	ldr	r3, [pc, #4]	; (424 <mu_time_precedes+0x8>)
     420:	4798      	blx	r3
}
     422:	bd10      	pop	{r4, pc}
     424:	00000565 	.word	0x00000565

00000428 <mu_time_follows>:

bool mu_time_equals(mu_time_t t1, mu_time_t t2) {
  return mu_vm_time_equals(t1, t2);
}

bool mu_time_follows(mu_time_t t1, mu_time_t t2) {
     428:	b510      	push	{r4, lr}
     42a:	000b      	movs	r3, r1
  return mu_vm_time_precedes(t2, t1);
     42c:	0001      	movs	r1, r0
     42e:	0018      	movs	r0, r3
     430:	4b01      	ldr	r3, [pc, #4]	; (438 <mu_time_follows+0x10>)
     432:	4798      	blx	r3
}
     434:	bd10      	pop	{r4, pc}
     436:	46c0      	nop			; (mov r8, r8)
     438:	00000565 	.word	0x00000565

0000043c <mu_time_ms_to_duration>:

mu_time_ms_dt mu_time_duration_to_ms(mu_time_dt dt) {
  return mu_vm_time_duration_to_ms(dt);
}

mu_time_dt mu_time_ms_to_duration(mu_time_ms_dt ms) {
     43c:	b510      	push	{r4, lr}
  return mu_vm_time_ms_to_duration(ms);
     43e:	4b01      	ldr	r3, [pc, #4]	; (444 <mu_time_ms_to_duration+0x8>)
     440:	4798      	blx	r3
}
     442:	bd10      	pop	{r4, pc}
     444:	0000056d 	.word	0x0000056d

00000448 <mu_time_now>:
mu_time_dt mu_time_s_to_duration(mu_time_s_dt s) {
  return mu_vm_time_s_to_duration(s);
}
#endif

mu_time_t mu_time_now() {
     448:	b510      	push	{r4, lr}
  return mu_vm_rtc_now();
     44a:	4b01      	ldr	r3, [pc, #4]	; (450 <mu_time_now+0x8>)
     44c:	4798      	blx	r3
}
     44e:	bd10      	pop	{r4, pc}
     450:	00000595 	.word	0x00000595

00000454 <button_cb_trampoline>:
void mu_vm_sleep(void) { go_to_sleep(); }

// =============================================================================
// private (local) code

static void button_cb_trampoline(void) {
     454:	b510      	push	{r4, lr}
  if (s_port.button_cb) {
     456:	4b04      	ldr	r3, [pc, #16]	; (468 <button_cb_trampoline+0x14>)
     458:	681b      	ldr	r3, [r3, #0]
     45a:	2b00      	cmp	r3, #0
     45c:	d002      	beq.n	464 <button_cb_trampoline+0x10>
    s_port.button_cb(s_port.button_cb_arg);
     45e:	4a02      	ldr	r2, [pc, #8]	; (468 <button_cb_trampoline+0x14>)
     460:	6850      	ldr	r0, [r2, #4]
     462:	4798      	blx	r3
  }
}
     464:	bd10      	pop	{r4, pc}
     466:	46c0      	nop			; (mov r8, r8)
     468:	20000098 	.word	0x20000098

0000046c <tx_byte_sent>:
}

/**
 * Arrive here when the USART is ready to accept a new character.
 */
static void tx_byte_sent(struct _usart_async_device *device) {
     46c:	b510      	push	{r4, lr}
  // notify user callback if set
  if (s_port.tx_cb) {
     46e:	4b04      	ldr	r3, [pc, #16]	; (480 <tx_byte_sent+0x14>)
     470:	689b      	ldr	r3, [r3, #8]
     472:	2b00      	cmp	r3, #0
     474:	d002      	beq.n	47c <tx_byte_sent+0x10>
    s_port.tx_cb(s_port.tx_cb_arg);
     476:	4a02      	ldr	r2, [pc, #8]	; (480 <tx_byte_sent+0x14>)
     478:	68d0      	ldr	r0, [r2, #12]
     47a:	4798      	blx	r3
  }
}
     47c:	bd10      	pop	{r4, pc}
     47e:	46c0      	nop			; (mov r8, r8)
     480:	20000098 	.word	0x20000098

00000484 <rx_done_cb>:

/**
 * Arrive here when a character has been fully received.
 */
static void rx_done_cb(struct _usart_async_device *device, uint8_t data) {
     484:	b510      	push	{r4, lr}
  // The ASF4 serial interrupt handler reads the data register which clears the
  // RXD bit (as well as fetching the data).  The user needs to know if there is
  // data available, so we shadow the RXD bit and the data register with
  // s_rx_has_data and s_rx_data respectively.
  s_rx_data = data;
     486:	4b08      	ldr	r3, [pc, #32]	; (4a8 <rx_done_cb+0x24>)
     488:	2220      	movs	r2, #32
     48a:	5499      	strb	r1, [r3, r2]
  s_rx_has_data = true;
     48c:	2101      	movs	r1, #1
     48e:	3201      	adds	r2, #1
     490:	5499      	strb	r1, [r3, r2]

  // clear the start of frame flag so mu_vm_serial_read_in_progress() will
  // return false.
  hri_sercomusart_clear_INTFLAG_RXS_bit(USART_0.device.hw);
     492:	4a06      	ldr	r2, [pc, #24]	; (4ac <rx_done_cb+0x28>)
     494:	6a12      	ldr	r2, [r2, #32]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXS) >> SERCOM_USART_INTFLAG_RXS_Pos;
}

static inline void hri_sercomusart_clear_INTFLAG_RXS_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     496:	3107      	adds	r1, #7
     498:	7611      	strb	r1, [r2, #24]

  // notify user callback if set
  if (s_port.rx_cb) {
     49a:	691b      	ldr	r3, [r3, #16]
     49c:	2b00      	cmp	r3, #0
     49e:	d002      	beq.n	4a6 <rx_done_cb+0x22>
    s_port.rx_cb(s_port.rx_cb_arg);
     4a0:	4a01      	ldr	r2, [pc, #4]	; (4a8 <rx_done_cb+0x24>)
     4a2:	6950      	ldr	r0, [r2, #20]
     4a4:	4798      	blx	r3
  }
}
     4a6:	bd10      	pop	{r4, pc}
     4a8:	20000098 	.word	0x20000098
     4ac:	20000204 	.word	0x20000204

000004b0 <tx_done_cb>:
 * Arrive here when the previous character has been fully transmitted.
 */
static void tx_done_cb(struct _usart_async_device *device) {
  // No action.  In the future, we might use this for an async version of
  // mu_vm_serial_write_in_progress().
  asm("nop");
     4b0:	46c0      	nop			; (mov r8, r8)
}
     4b2:	4770      	bx	lr

000004b4 <error_cb>:

/**
 * Arrive here on an error condition.
 */
static void error_cb(struct _usart_async_device *device) {
  asm("nop");
     4b4:	46c0      	nop			; (mov r8, r8)
}
     4b6:	4770      	bx	lr

000004b8 <rtc_cb_trampoline>:

static void rtc_cb_trampoline(struct calendar_dev *const dev) {
     4b8:	b510      	push	{r4, lr}
  // Arrive here when the RTC count register matches the RTC compare register.
  // Even if the user hasn't registered a callback, this will wake the processor
  // from sleep...
  if (s_port.rtc_cb) {
     4ba:	4b04      	ldr	r3, [pc, #16]	; (4cc <rtc_cb_trampoline+0x14>)
     4bc:	699b      	ldr	r3, [r3, #24]
     4be:	2b00      	cmp	r3, #0
     4c0:	d002      	beq.n	4c8 <rtc_cb_trampoline+0x10>
    s_port.rtc_cb(s_port.rtc_cb_arg);
     4c2:	4a02      	ldr	r2, [pc, #8]	; (4cc <rtc_cb_trampoline+0x14>)
     4c4:	69d0      	ldr	r0, [r2, #28]
     4c6:	4798      	blx	r3
  }
}
     4c8:	bd10      	pop	{r4, pc}
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	20000098 	.word	0x20000098

000004d0 <mu_vm_init>:
void mu_vm_init(void) {
     4d0:	b510      	push	{r4, lr}
  memset(&s_port, 0, sizeof(s_port));
     4d2:	2220      	movs	r2, #32
     4d4:	2100      	movs	r1, #0
     4d6:	4813      	ldr	r0, [pc, #76]	; (524 <mu_vm_init+0x54>)
     4d8:	4b13      	ldr	r3, [pc, #76]	; (528 <mu_vm_init+0x58>)
     4da:	4798      	blx	r3
  ext_irq_register(PIN_PA15, button_cb_trampoline);
     4dc:	4913      	ldr	r1, [pc, #76]	; (52c <mu_vm_init+0x5c>)
     4de:	200f      	movs	r0, #15
     4e0:	4b13      	ldr	r3, [pc, #76]	; (530 <mu_vm_init+0x60>)
     4e2:	4798      	blx	r3
  USART_0.device.usart_cb.tx_byte_sent = tx_byte_sent;
     4e4:	4b13      	ldr	r3, [pc, #76]	; (534 <mu_vm_init+0x64>)
     4e6:	4a14      	ldr	r2, [pc, #80]	; (538 <mu_vm_init+0x68>)
     4e8:	609a      	str	r2, [r3, #8]
  USART_0.device.usart_cb.rx_done_cb = rx_done_cb;
     4ea:	4a14      	ldr	r2, [pc, #80]	; (53c <mu_vm_init+0x6c>)
     4ec:	60da      	str	r2, [r3, #12]
  USART_0.device.usart_cb.tx_done_cb = tx_done_cb;
     4ee:	4a14      	ldr	r2, [pc, #80]	; (540 <mu_vm_init+0x70>)
     4f0:	611a      	str	r2, [r3, #16]
  USART_0.device.usart_cb.error_cb = error_cb;
     4f2:	4a14      	ldr	r2, [pc, #80]	; (544 <mu_vm_init+0x74>)
     4f4:	615a      	str	r2, [r3, #20]
  hri_sercomusart_set_CTRLB_SFDE_bit(USART_0.device.hw);
     4f6:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_sercomusart_set_CTRLB_SFDE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg |= SERCOM_USART_CTRLB_SFDE;
     4f8:	6851      	ldr	r1, [r2, #4]
     4fa:	2380      	movs	r3, #128	; 0x80
     4fc:	009b      	lsls	r3, r3, #2
     4fe:	430b      	orrs	r3, r1
     500:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     502:	2107      	movs	r1, #7
     504:	69d3      	ldr	r3, [r2, #28]
     506:	4219      	tst	r1, r3
     508:	d1fc      	bne.n	504 <mu_vm_init+0x34>
  usart_async_enable(&USART_0);
     50a:	480a      	ldr	r0, [pc, #40]	; (534 <mu_vm_init+0x64>)
     50c:	4b0e      	ldr	r3, [pc, #56]	; (548 <mu_vm_init+0x78>)
     50e:	4798      	blx	r3
  calendar_enable(&CALENDAR_0); // start RTC
     510:	4c0e      	ldr	r4, [pc, #56]	; (54c <mu_vm_init+0x7c>)
     512:	0020      	movs	r0, r4
     514:	4b0e      	ldr	r3, [pc, #56]	; (550 <mu_vm_init+0x80>)
     516:	4798      	blx	r3
  _calendar_register_callback(&CALENDAR_0.device, rtc_cb_trampoline);
     518:	490e      	ldr	r1, [pc, #56]	; (554 <mu_vm_init+0x84>)
     51a:	0020      	movs	r0, r4
     51c:	4b0e      	ldr	r3, [pc, #56]	; (558 <mu_vm_init+0x88>)
     51e:	4798      	blx	r3
}
     520:	bd10      	pop	{r4, pc}
     522:	46c0      	nop			; (mov r8, r8)
     524:	20000098 	.word	0x20000098
     528:	00001b8b 	.word	0x00001b8b
     52c:	00000455 	.word	0x00000455
     530:	00000a65 	.word	0x00000a65
     534:	20000204 	.word	0x20000204
     538:	0000046d 	.word	0x0000046d
     53c:	00000485 	.word	0x00000485
     540:	000004b1 	.word	0x000004b1
     544:	000004b5 	.word	0x000004b5
     548:	00000d29 	.word	0x00000d29
     54c:	200001e8 	.word	0x200001e8
     550:	000009bd 	.word	0x000009bd
     554:	000004b9 	.word	0x000004b9
     558:	00001161 	.word	0x00001161

0000055c <mu_vm_time_offset>:
  return t + dt;
     55c:	1808      	adds	r0, r1, r0
}
     55e:	4770      	bx	lr

00000560 <mu_vm_time_difference>:
  return t1 - t2;
     560:	1a40      	subs	r0, r0, r1
}
     562:	4770      	bx	lr

00000564 <mu_vm_time_precedes>:
  return t1 - t2;
     564:	1a40      	subs	r0, r0, r1
  return mu_vm_time_difference(t1, t2) > MAX_DURATION;
     566:	0fc0      	lsrs	r0, r0, #31
}
     568:	4770      	bx	lr
	...

0000056c <mu_vm_time_ms_to_duration>:
mu_vm_time_dt mu_vm_time_ms_to_duration(mu_vm_time_ms_dt ms) {
     56c:	b510      	push	{r4, lr}
  return quo_rounded(ms * CONF_GCLK_RTC_FREQUENCY, 1000);
     56e:	03c0      	lsls	r0, r0, #15
  //   (y < 0) is false (zero) if x is non-negative
  //   (x < 0) ^ (y < 0) is true if x and y have opposite signs
  //   x/y would be the quotient, but it is truncated towards zero.  To round:
  //   (x + y/2)/y is the rounded quotient when x and y have the same sign
  //   (x - y/2)/y is the rounded quotient when x and y have opposite signs
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
     570:	d506      	bpl.n	580 <mu_vm_time_ms_to_duration+0x14>
     572:	38f5      	subs	r0, #245	; 0xf5
     574:	38ff      	subs	r0, #255	; 0xff
     576:	21fa      	movs	r1, #250	; 0xfa
     578:	0089      	lsls	r1, r1, #2
     57a:	4b05      	ldr	r3, [pc, #20]	; (590 <mu_vm_time_ms_to_duration+0x24>)
     57c:	4798      	blx	r3
}
     57e:	bd10      	pop	{r4, pc}
  return ((x < 0) ^ (y < 0)) ? ((x - y/2)/y) : ((x + y/2)/y);
     580:	30f5      	adds	r0, #245	; 0xf5
     582:	30ff      	adds	r0, #255	; 0xff
     584:	21fa      	movs	r1, #250	; 0xfa
     586:	0089      	lsls	r1, r1, #2
     588:	4b01      	ldr	r3, [pc, #4]	; (590 <mu_vm_time_ms_to_duration+0x24>)
     58a:	4798      	blx	r3
     58c:	e7f7      	b.n	57e <mu_vm_time_ms_to_duration+0x12>
     58e:	46c0      	nop			; (mov r8, r8)
     590:	000018e1 	.word	0x000018e1

00000594 <mu_vm_rtc_now>:
typedef uint8_t  hri_rtcmode2_intflag_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtc_wait_for_sync(const void *const hw)
{
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     594:	4a03      	ldr	r2, [pc, #12]	; (5a4 <mu_vm_rtc_now+0x10>)
     596:	7a93      	ldrb	r3, [r2, #10]
     598:	09db      	lsrs	r3, r3, #7
     59a:	d1fc      	bne.n	596 <mu_vm_rtc_now+0x2>

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_COUNT_bf(const void *const hw)
{
	uint32_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
     59c:	4b01      	ldr	r3, [pc, #4]	; (5a4 <mu_vm_rtc_now+0x10>)
     59e:	6918      	ldr	r0, [r3, #16]
}
     5a0:	4770      	bx	lr
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	40001400 	.word	0x40001400

000005a8 <mu_vm_rtc_alarm_at>:

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     5a8:	4b09      	ldr	r3, [pc, #36]	; (5d0 <mu_vm_rtc_alarm_at+0x28>)
     5aa:	699a      	ldr	r2, [r3, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     5ac:	6198      	str	r0, [r3, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     5ae:	001a      	movs	r2, r3
     5b0:	7a93      	ldrb	r3, [r2, #10]
     5b2:	09db      	lsrs	r3, r3, #7
     5b4:	d1fc      	bne.n	5b0 <mu_vm_rtc_alarm_at+0x8>
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     5b6:	4b06      	ldr	r3, [pc, #24]	; (5d0 <mu_vm_rtc_alarm_at+0x28>)
     5b8:	885a      	ldrh	r2, [r3, #2]
     5ba:	2180      	movs	r1, #128	; 0x80
     5bc:	01c9      	lsls	r1, r1, #7
     5be:	430a      	orrs	r2, r1
     5c0:	805a      	strh	r2, [r3, #2]
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
     5c2:	885a      	ldrh	r2, [r3, #2]
     5c4:	2180      	movs	r1, #128	; 0x80
     5c6:	0209      	lsls	r1, r1, #8
     5c8:	430a      	orrs	r2, r1
     5ca:	805a      	strh	r2, [r3, #2]
}
     5cc:	4770      	bx	lr
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	40001400 	.word	0x40001400

000005d4 <mu_vm_led_set>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
     5d4:	2800      	cmp	r0, #0
     5d6:	d006      	beq.n	5e6 <mu_vm_led_set+0x12>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5d8:	2180      	movs	r1, #128	; 0x80
     5da:	05c9      	lsls	r1, r1, #23
     5dc:	2394      	movs	r3, #148	; 0x94
     5de:	22c0      	movs	r2, #192	; 0xc0
     5e0:	05d2      	lsls	r2, r2, #23
     5e2:	50d1      	str	r1, [r2, r3]
void mu_vm_led_set(bool on) { gpio_set_pin_level(USER_LED_AL, !on); }
     5e4:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5e6:	2180      	movs	r1, #128	; 0x80
     5e8:	05c9      	lsls	r1, r1, #23
     5ea:	2398      	movs	r3, #152	; 0x98
     5ec:	22c0      	movs	r2, #192	; 0xc0
     5ee:	05d2      	lsls	r2, r2, #23
     5f0:	50d1      	str	r1, [r2, r3]
     5f2:	e7f7      	b.n	5e4 <mu_vm_led_set+0x10>

000005f4 <mu_vm_serial_can_write>:
  return hri_sercomusart_get_interrupt_DRE_bit(USART_0.device.hw);
     5f4:	4b02      	ldr	r3, [pc, #8]	; (600 <mu_vm_serial_can_write+0xc>)
     5f6:	6a1b      	ldr	r3, [r3, #32]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     5f8:	7e18      	ldrb	r0, [r3, #24]
     5fa:	2301      	movs	r3, #1
     5fc:	4018      	ands	r0, r3
}
     5fe:	4770      	bx	lr
     600:	20000204 	.word	0x20000204

00000604 <mu_vm_serial_write>:
void mu_vm_serial_write(uint8_t byte) {
     604:	b570      	push	{r4, r5, r6, lr}
     606:	0005      	movs	r5, r0
  while (!mu_vm_serial_can_write()) {
     608:	4c09      	ldr	r4, [pc, #36]	; (630 <mu_vm_serial_write+0x2c>)
     60a:	e000      	b.n	60e <mu_vm_serial_write+0xa>
    asm("nop");
     60c:	46c0      	nop			; (mov r8, r8)
  while (!mu_vm_serial_can_write()) {
     60e:	47a0      	blx	r4
     610:	2800      	cmp	r0, #0
     612:	d0fb      	beq.n	60c <mu_vm_serial_write+0x8>
  _usart_async_write_byte(&USART_0.device, byte);
     614:	0029      	movs	r1, r5
     616:	4807      	ldr	r0, [pc, #28]	; (634 <mu_vm_serial_write+0x30>)
     618:	4b07      	ldr	r3, [pc, #28]	; (638 <mu_vm_serial_write+0x34>)
     61a:	4798      	blx	r3
  if (s_port.tx_cb) {
     61c:	4b07      	ldr	r3, [pc, #28]	; (63c <mu_vm_serial_write+0x38>)
     61e:	689b      	ldr	r3, [r3, #8]
     620:	2b00      	cmp	r3, #0
     622:	d004      	beq.n	62e <mu_vm_serial_write+0x2a>
    _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_BYTE_SENT, true);
     624:	2201      	movs	r2, #1
     626:	2100      	movs	r1, #0
     628:	4802      	ldr	r0, [pc, #8]	; (634 <mu_vm_serial_write+0x30>)
     62a:	4b05      	ldr	r3, [pc, #20]	; (640 <mu_vm_serial_write+0x3c>)
     62c:	4798      	blx	r3
}
     62e:	bd70      	pop	{r4, r5, r6, pc}
     630:	000005f5 	.word	0x000005f5
     634:	2000020c 	.word	0x2000020c
     638:	000013e1 	.word	0x000013e1
     63c:	20000098 	.word	0x20000098
     640:	000013f9 	.word	0x000013f9

00000644 <mu_vm_serial_read>:
uint8_t mu_vm_serial_read(void) {
     644:	b510      	push	{r4, lr}
  _usart_async_set_irq_state(&USART_0.device, USART_ASYNC_RX_DONE, true);
     646:	2201      	movs	r2, #1
     648:	2101      	movs	r1, #1
     64a:	480b      	ldr	r0, [pc, #44]	; (678 <mu_vm_serial_read+0x34>)
     64c:	4b0b      	ldr	r3, [pc, #44]	; (67c <mu_vm_serial_read+0x38>)
     64e:	4798      	blx	r3
  return s_rx_has_data;
     650:	2321      	movs	r3, #33	; 0x21
     652:	4a0b      	ldr	r2, [pc, #44]	; (680 <mu_vm_serial_read+0x3c>)
     654:	5cd3      	ldrb	r3, [r2, r3]
  while (!mu_vm_serial_can_read()) {
     656:	2b00      	cmp	r3, #0
     658:	d105      	bne.n	666 <mu_vm_serial_read+0x22>
  return s_rx_has_data;
     65a:	0011      	movs	r1, r2
     65c:	2221      	movs	r2, #33	; 0x21
    asm("nop");
     65e:	46c0      	nop			; (mov r8, r8)
  return s_rx_has_data;
     660:	5c8b      	ldrb	r3, [r1, r2]
  while (!mu_vm_serial_can_read()) {
     662:	2b00      	cmp	r3, #0
     664:	d0fb      	beq.n	65e <mu_vm_serial_read+0x1a>
  s_rx_has_data = false;       // clear the virtual RXD bit
     666:	4b06      	ldr	r3, [pc, #24]	; (680 <mu_vm_serial_read+0x3c>)
     668:	2100      	movs	r1, #0
     66a:	2221      	movs	r2, #33	; 0x21
     66c:	5499      	strb	r1, [r3, r2]
  return s_rx_data;
     66e:	3a01      	subs	r2, #1
     670:	5c98      	ldrb	r0, [r3, r2]
     672:	b2c0      	uxtb	r0, r0
}
     674:	bd10      	pop	{r4, pc}
     676:	46c0      	nop			; (mov r8, r8)
     678:	2000020c 	.word	0x2000020c
     67c:	000013f9 	.word	0x000013f9
     680:	20000098 	.word	0x20000098

00000684 <mu_vm_serial_can_read>:
  return s_rx_has_data;
     684:	2321      	movs	r3, #33	; 0x21
     686:	4a02      	ldr	r2, [pc, #8]	; (690 <mu_vm_serial_can_read+0xc>)
     688:	5cd0      	ldrb	r0, [r2, r3]
     68a:	b2c0      	uxtb	r0, r0
}
     68c:	4770      	bx	lr
     68e:	46c0      	nop			; (mov r8, r8)
     690:	20000098 	.word	0x20000098

00000694 <mu_vm_sleep_until>:
void mu_vm_sleep_until(mu_vm_time_t then) {
     694:	b510      	push	{r4, lr}
     696:	0004      	movs	r4, r0
  mu_vm_time_t now = mu_vm_rtc_now();
     698:	4b07      	ldr	r3, [pc, #28]	; (6b8 <mu_vm_sleep_until+0x24>)
     69a:	4798      	blx	r3
  return t1 - t2;
     69c:	1a20      	subs	r0, r4, r0
  if (mu_vm_time_difference(then, now) > MIN_SLEEP_DURATION) {
     69e:	2820      	cmp	r0, #32
     6a0:	dc00      	bgt.n	6a4 <mu_vm_sleep_until+0x10>
}
     6a2:	bd10      	pop	{r4, pc}
    mu_vm_rtc_alarm_at(then);
     6a4:	0020      	movs	r0, r4
     6a6:	4b05      	ldr	r3, [pc, #20]	; (6bc <mu_vm_sleep_until+0x28>)
     6a8:	4798      	blx	r3
  sleep(3); // in hal_sleep
     6aa:	2003      	movs	r0, #3
     6ac:	4b04      	ldr	r3, [pc, #16]	; (6c0 <mu_vm_sleep_until+0x2c>)
     6ae:	4798      	blx	r3
  delay_us(200);
     6b0:	20c8      	movs	r0, #200	; 0xc8
     6b2:	4b04      	ldr	r3, [pc, #16]	; (6c4 <mu_vm_sleep_until+0x30>)
     6b4:	4798      	blx	r3
}
     6b6:	e7f4      	b.n	6a2 <mu_vm_sleep_until+0xe>
     6b8:	00000595 	.word	0x00000595
     6bc:	000005a9 	.word	0x000005a9
     6c0:	00000aad 	.word	0x00000aad
     6c4:	000009e9 	.word	0x000009e9

000006c8 <mu_vm_sleep>:
void mu_vm_sleep(void) { go_to_sleep(); }
     6c8:	b510      	push	{r4, lr}
  sleep(3); // in hal_sleep
     6ca:	2003      	movs	r0, #3
     6cc:	4b02      	ldr	r3, [pc, #8]	; (6d8 <mu_vm_sleep+0x10>)
     6ce:	4798      	blx	r3
  delay_us(200);
     6d0:	20c8      	movs	r0, #200	; 0xc8
     6d2:	4b02      	ldr	r3, [pc, #8]	; (6dc <mu_vm_sleep+0x14>)
     6d4:	4798      	blx	r3
void mu_vm_sleep(void) { go_to_sleep(); }
     6d6:	bd10      	pop	{r4, pc}
     6d8:	00000aad 	.word	0x00000aad
     6dc:	000009e9 	.word	0x000009e9

000006e0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     6e0:	b510      	push	{r4, lr}
	system_init();
     6e2:	4b01      	ldr	r3, [pc, #4]	; (6e8 <atmel_start_init+0x8>)
     6e4:	4798      	blx	r3
}
     6e6:	bd10      	pop	{r4, pc}
     6e8:	00000909 	.word	0x00000909

000006ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     6ec:	e7fe      	b.n	6ec <Dummy_Handler>
	...

000006f0 <Reset_Handler>:
{
     6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     6f2:	4a2a      	ldr	r2, [pc, #168]	; (79c <Reset_Handler+0xac>)
     6f4:	4b2a      	ldr	r3, [pc, #168]	; (7a0 <Reset_Handler+0xb0>)
     6f6:	429a      	cmp	r2, r3
     6f8:	d011      	beq.n	71e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     6fa:	001a      	movs	r2, r3
     6fc:	4b29      	ldr	r3, [pc, #164]	; (7a4 <Reset_Handler+0xb4>)
     6fe:	429a      	cmp	r2, r3
     700:	d20d      	bcs.n	71e <Reset_Handler+0x2e>
     702:	4a29      	ldr	r2, [pc, #164]	; (7a8 <Reset_Handler+0xb8>)
     704:	3303      	adds	r3, #3
     706:	1a9b      	subs	r3, r3, r2
     708:	089b      	lsrs	r3, r3, #2
     70a:	3301      	adds	r3, #1
     70c:	009b      	lsls	r3, r3, #2
     70e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     710:	4823      	ldr	r0, [pc, #140]	; (7a0 <Reset_Handler+0xb0>)
     712:	4922      	ldr	r1, [pc, #136]	; (79c <Reset_Handler+0xac>)
     714:	588c      	ldr	r4, [r1, r2]
     716:	5084      	str	r4, [r0, r2]
     718:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     71a:	429a      	cmp	r2, r3
     71c:	d1fa      	bne.n	714 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     71e:	4a23      	ldr	r2, [pc, #140]	; (7ac <Reset_Handler+0xbc>)
     720:	4b23      	ldr	r3, [pc, #140]	; (7b0 <Reset_Handler+0xc0>)
     722:	429a      	cmp	r2, r3
     724:	d20a      	bcs.n	73c <Reset_Handler+0x4c>
     726:	43d3      	mvns	r3, r2
     728:	4921      	ldr	r1, [pc, #132]	; (7b0 <Reset_Handler+0xc0>)
     72a:	185b      	adds	r3, r3, r1
     72c:	2103      	movs	r1, #3
     72e:	438b      	bics	r3, r1
     730:	3304      	adds	r3, #4
     732:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     734:	2100      	movs	r1, #0
     736:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     738:	4293      	cmp	r3, r2
     73a:	d1fc      	bne.n	736 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     73c:	4a1d      	ldr	r2, [pc, #116]	; (7b4 <Reset_Handler+0xc4>)
     73e:	21ff      	movs	r1, #255	; 0xff
     740:	4b1d      	ldr	r3, [pc, #116]	; (7b8 <Reset_Handler+0xc8>)
     742:	438b      	bics	r3, r1
     744:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     746:	39fd      	subs	r1, #253	; 0xfd
     748:	2390      	movs	r3, #144	; 0x90
     74a:	005b      	lsls	r3, r3, #1
     74c:	4a1b      	ldr	r2, [pc, #108]	; (7bc <Reset_Handler+0xcc>)
     74e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     750:	4a1b      	ldr	r2, [pc, #108]	; (7c0 <Reset_Handler+0xd0>)
     752:	78d3      	ldrb	r3, [r2, #3]
     754:	2503      	movs	r5, #3
     756:	43ab      	bics	r3, r5
     758:	2402      	movs	r4, #2
     75a:	4323      	orrs	r3, r4
     75c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     75e:	78d3      	ldrb	r3, [r2, #3]
     760:	270c      	movs	r7, #12
     762:	43bb      	bics	r3, r7
     764:	2608      	movs	r6, #8
     766:	4333      	orrs	r3, r6
     768:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     76a:	4b16      	ldr	r3, [pc, #88]	; (7c4 <Reset_Handler+0xd4>)
     76c:	7b98      	ldrb	r0, [r3, #14]
     76e:	2230      	movs	r2, #48	; 0x30
     770:	4390      	bics	r0, r2
     772:	2220      	movs	r2, #32
     774:	4310      	orrs	r0, r2
     776:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     778:	7b99      	ldrb	r1, [r3, #14]
     77a:	43b9      	bics	r1, r7
     77c:	4331      	orrs	r1, r6
     77e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     780:	7b9a      	ldrb	r2, [r3, #14]
     782:	43aa      	bics	r2, r5
     784:	4322      	orrs	r2, r4
     786:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     788:	4a0f      	ldr	r2, [pc, #60]	; (7c8 <Reset_Handler+0xd8>)
     78a:	6853      	ldr	r3, [r2, #4]
     78c:	2180      	movs	r1, #128	; 0x80
     78e:	430b      	orrs	r3, r1
     790:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     792:	4b0e      	ldr	r3, [pc, #56]	; (7cc <Reset_Handler+0xdc>)
     794:	4798      	blx	r3
        main();
     796:	4b0e      	ldr	r3, [pc, #56]	; (7d0 <Reset_Handler+0xe0>)
     798:	4798      	blx	r3
     79a:	e7fe      	b.n	79a <Reset_Handler+0xaa>
     79c:	00002ce0 	.word	0x00002ce0
     7a0:	20000000 	.word	0x20000000
     7a4:	20000064 	.word	0x20000064
     7a8:	20000004 	.word	0x20000004
     7ac:	20000064 	.word	0x20000064
     7b0:	20000258 	.word	0x20000258
     7b4:	e000ed00 	.word	0xe000ed00
     7b8:	00000000 	.word	0x00000000
     7bc:	41007000 	.word	0x41007000
     7c0:	41005000 	.word	0x41005000
     7c4:	41004800 	.word	0x41004800
     7c8:	41004000 	.word	0x41004000
     7cc:	00001b0d 	.word	0x00001b0d
     7d0:	00001741 	.word	0x00001741

000007d4 <EXTERNAL_IRQ_0_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct calendar_descriptor CALENDAR_0;

void EXTERNAL_IRQ_0_init(void)
{
     7d4:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     7d6:	4a10      	ldr	r2, [pc, #64]	; (818 <EXTERNAL_IRQ_0_init+0x44>)
     7d8:	4b10      	ldr	r3, [pc, #64]	; (81c <EXTERNAL_IRQ_0_init+0x48>)
     7da:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7dc:	22c0      	movs	r2, #192	; 0xc0
     7de:	05d2      	lsls	r2, r2, #23
     7e0:	2080      	movs	r0, #128	; 0x80
     7e2:	0200      	lsls	r0, r0, #8
     7e4:	6050      	str	r0, [r2, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7e6:	4b0e      	ldr	r3, [pc, #56]	; (820 <EXTERNAL_IRQ_0_init+0x4c>)
     7e8:	490e      	ldr	r1, [pc, #56]	; (824 <EXTERNAL_IRQ_0_init+0x50>)
     7ea:	6299      	str	r1, [r3, #40]	; 0x28
     7ec:	490e      	ldr	r1, [pc, #56]	; (828 <EXTERNAL_IRQ_0_init+0x54>)
     7ee:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7f0:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     7f2:	214f      	movs	r1, #79	; 0x4f
     7f4:	5c5c      	ldrb	r4, [r3, r1]
     7f6:	2504      	movs	r5, #4
     7f8:	432c      	orrs	r4, r5
     7fa:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7fc:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7fe:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     800:	2001      	movs	r0, #1
     802:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     804:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     806:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     808:	3918      	subs	r1, #24
     80a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     80c:	300e      	adds	r0, #14
     80e:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     810:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(USER_BUTTON_AL, PINMUX_PA15A_EIC_EXTINT15);

	ext_irq_init();
     812:	4b06      	ldr	r3, [pc, #24]	; (82c <EXTERNAL_IRQ_0_init+0x58>)
     814:	4798      	blx	r3
}
     816:	bd70      	pop	{r4, r5, r6, pc}
     818:	00004305 	.word	0x00004305
     81c:	40000c00 	.word	0x40000c00
     820:	41004400 	.word	0x41004400
     824:	40028000 	.word	0x40028000
     828:	c0020000 	.word	0xc0020000
     82c:	00000a41 	.word	0x00000a41

00000830 <USART_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     830:	4a04      	ldr	r2, [pc, #16]	; (844 <USART_0_CLOCK_init+0x14>)
     832:	6a13      	ldr	r3, [r2, #32]
     834:	2120      	movs	r1, #32
     836:	430b      	orrs	r3, r1
     838:	6213      	str	r3, [r2, #32]
     83a:	4a03      	ldr	r2, [pc, #12]	; (848 <USART_0_CLOCK_init+0x18>)
     83c:	4b03      	ldr	r3, [pc, #12]	; (84c <USART_0_CLOCK_init+0x1c>)
     83e:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     840:	4770      	bx	lr
     842:	46c0      	nop			; (mov r8, r8)
     844:	40000400 	.word	0x40000400
     848:	00004017 	.word	0x00004017
     84c:	40000c00 	.word	0x40000c00

00000850 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     850:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     852:	4b0e      	ldr	r3, [pc, #56]	; (88c <USART_0_PORT_init+0x3c>)
     854:	2256      	movs	r2, #86	; 0x56
     856:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     858:	2501      	movs	r5, #1
     85a:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     85c:	2401      	movs	r4, #1
     85e:	4321      	orrs	r1, r4
     860:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     862:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     864:	203b      	movs	r0, #59	; 0x3b
     866:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     868:	3a47      	subs	r2, #71	; 0x47
     86a:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     86c:	3a0d      	subs	r2, #13
     86e:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     870:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     872:	2157      	movs	r1, #87	; 0x57
     874:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     876:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     878:	4322      	orrs	r2, r4
     87a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     87c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     880:	3948      	subs	r1, #72	; 0x48
     882:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     884:	3111      	adds	r1, #17
     886:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     888:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     88a:	bd30      	pop	{r4, r5, pc}
     88c:	41004400 	.word	0x41004400

00000890 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     890:	b510      	push	{r4, lr}
     892:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     894:	4b06      	ldr	r3, [pc, #24]	; (8b0 <USART_0_init+0x20>)
     896:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     898:	2300      	movs	r3, #0
     89a:	9300      	str	r3, [sp, #0]
     89c:	3310      	adds	r3, #16
     89e:	4a05      	ldr	r2, [pc, #20]	; (8b4 <USART_0_init+0x24>)
     8a0:	4905      	ldr	r1, [pc, #20]	; (8b8 <USART_0_init+0x28>)
     8a2:	4806      	ldr	r0, [pc, #24]	; (8bc <USART_0_init+0x2c>)
     8a4:	4c06      	ldr	r4, [pc, #24]	; (8c0 <USART_0_init+0x30>)
     8a6:	47a0      	blx	r4
	USART_0_PORT_init();
     8a8:	4b06      	ldr	r3, [pc, #24]	; (8c4 <USART_0_init+0x34>)
     8aa:	4798      	blx	r3
}
     8ac:	b002      	add	sp, #8
     8ae:	bd10      	pop	{r4, pc}
     8b0:	00000831 	.word	0x00000831
     8b4:	200000bc 	.word	0x200000bc
     8b8:	42001400 	.word	0x42001400
     8bc:	20000204 	.word	0x20000204
     8c0:	00000c91 	.word	0x00000c91
     8c4:	00000851 	.word	0x00000851

000008c8 <CALENDAR_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     8c8:	4a04      	ldr	r2, [pc, #16]	; (8dc <CALENDAR_0_CLOCK_init+0x14>)
     8ca:	6993      	ldr	r3, [r2, #24]
     8cc:	2120      	movs	r1, #32
     8ce:	430b      	orrs	r3, r1
     8d0:	6193      	str	r3, [r2, #24]
     8d2:	4a03      	ldr	r2, [pc, #12]	; (8e0 <CALENDAR_0_CLOCK_init+0x18>)
     8d4:	4b03      	ldr	r3, [pc, #12]	; (8e4 <CALENDAR_0_CLOCK_init+0x1c>)
     8d6:	805a      	strh	r2, [r3, #2]

void CALENDAR_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
     8d8:	4770      	bx	lr
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	40000400 	.word	0x40000400
     8e0:	00004304 	.word	0x00004304
     8e4:	40000c00 	.word	0x40000c00

000008e8 <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     8e8:	b510      	push	{r4, lr}
	CALENDAR_0_CLOCK_init();
     8ea:	4b03      	ldr	r3, [pc, #12]	; (8f8 <CALENDAR_0_init+0x10>)
     8ec:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     8ee:	4903      	ldr	r1, [pc, #12]	; (8fc <CALENDAR_0_init+0x14>)
     8f0:	4803      	ldr	r0, [pc, #12]	; (900 <CALENDAR_0_init+0x18>)
     8f2:	4b04      	ldr	r3, [pc, #16]	; (904 <CALENDAR_0_init+0x1c>)
     8f4:	4798      	blx	r3
}
     8f6:	bd10      	pop	{r4, pc}
     8f8:	000008c9 	.word	0x000008c9
     8fc:	40001400 	.word	0x40001400
     900:	200001e8 	.word	0x200001e8
     904:	00000975 	.word	0x00000975

00000908 <system_init>:

void system_init(void)
{
     908:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     90a:	4b0d      	ldr	r3, [pc, #52]	; (940 <system_init+0x38>)
     90c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     90e:	23c0      	movs	r3, #192	; 0xc0
     910:	05db      	lsls	r3, r3, #23
     912:	2280      	movs	r2, #128	; 0x80
     914:	05d2      	lsls	r2, r2, #23
     916:	2198      	movs	r1, #152	; 0x98
     918:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     91a:	3910      	subs	r1, #16
     91c:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     91e:	4b09      	ldr	r3, [pc, #36]	; (944 <system_init+0x3c>)
     920:	3120      	adds	r1, #32
     922:	505a      	str	r2, [r3, r1]
     924:	4a08      	ldr	r2, [pc, #32]	; (948 <system_init+0x40>)
     926:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     928:	3136      	adds	r1, #54	; 0x36
     92a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     92c:	2001      	movs	r0, #1
     92e:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     930:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(USER_LED_AL, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(USER_LED_AL, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     932:	4b06      	ldr	r3, [pc, #24]	; (94c <system_init+0x44>)
     934:	4798      	blx	r3

	USART_0_init();
     936:	4b06      	ldr	r3, [pc, #24]	; (950 <system_init+0x48>)
     938:	4798      	blx	r3

	CALENDAR_0_init();
     93a:	4b06      	ldr	r3, [pc, #24]	; (954 <system_init+0x4c>)
     93c:	4798      	blx	r3
}
     93e:	bd10      	pop	{r4, pc}
     940:	00000ef1 	.word	0x00000ef1
     944:	41004400 	.word	0x41004400
     948:	c0004000 	.word	0xc0004000
     94c:	000007d5 	.word	0x000007d5
     950:	00000891 	.word	0x00000891
     954:	000008e9 	.word	0x000008e9

00000958 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     958:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     95c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     95e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     960:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     964:	4770      	bx	lr

00000966 <atomic_leave_critical>:
     966:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     96a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     96c:	f383 8810 	msr	PRIMASK, r3
}
     970:	4770      	bx	lr
	...

00000974 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
     974:	b570      	push	{r4, r5, r6, lr}
     976:	0004      	movs	r4, r0
     978:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
     97a:	1e43      	subs	r3, r0, #1
     97c:	4198      	sbcs	r0, r3
     97e:	b2c0      	uxtb	r0, r0
     980:	22e0      	movs	r2, #224	; 0xe0
     982:	0052      	lsls	r2, r2, #1
     984:	4909      	ldr	r1, [pc, #36]	; (9ac <calendar_init+0x38>)
     986:	4b0a      	ldr	r3, [pc, #40]	; (9b0 <calendar_init+0x3c>)
     988:	4798      	blx	r3

	if (calendar->device.hw == hw) {
     98a:	6823      	ldr	r3, [r4, #0]
     98c:	42ab      	cmp	r3, r5
     98e:	d008      	beq.n	9a2 <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
     990:	2b00      	cmp	r3, #0
     992:	d108      	bne.n	9a6 <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
     994:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
     996:	0020      	movs	r0, r4
     998:	4b06      	ldr	r3, [pc, #24]	; (9b4 <calendar_init+0x40>)
     99a:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
     99c:	4b06      	ldr	r3, [pc, #24]	; (9b8 <calendar_init+0x44>)
     99e:	6163      	str	r3, [r4, #20]

	return ret;
}
     9a0:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
     9a2:	2000      	movs	r0, #0
     9a4:	e7fc      	b.n	9a0 <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
     9a6:	2012      	movs	r0, #18
     9a8:	4240      	negs	r0, r0
     9aa:	e7f9      	b.n	9a0 <calendar_init+0x2c>
     9ac:	00002adc 	.word	0x00002adc
     9b0:	00000d81 	.word	0x00000d81
     9b4:	000011c1 	.word	0x000011c1
     9b8:	000007b2 	.word	0x000007b2

000009bc <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
     9bc:	b510      	push	{r4, lr}
     9be:	0004      	movs	r4, r0
	/* Sanity check arguments */
	ASSERT(calendar);
     9c0:	1e43      	subs	r3, r0, #1
     9c2:	4198      	sbcs	r0, r3
     9c4:	b2c0      	uxtb	r0, r0
     9c6:	22e6      	movs	r2, #230	; 0xe6
     9c8:	32ff      	adds	r2, #255	; 0xff
     9ca:	4904      	ldr	r1, [pc, #16]	; (9dc <calendar_enable+0x20>)
     9cc:	4b04      	ldr	r3, [pc, #16]	; (9e0 <calendar_enable+0x24>)
     9ce:	4798      	blx	r3

	_calendar_enable(&calendar->device);
     9d0:	0020      	movs	r0, r4
     9d2:	4b04      	ldr	r3, [pc, #16]	; (9e4 <calendar_enable+0x28>)
     9d4:	4798      	blx	r3

	return ERR_NONE;
}
     9d6:	2000      	movs	r0, #0
     9d8:	bd10      	pop	{r4, pc}
     9da:	46c0      	nop			; (mov r8, r8)
     9dc:	00002adc 	.word	0x00002adc
     9e0:	00000d81 	.word	0x00000d81
     9e4:	00001245 	.word	0x00001245

000009e8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     9e8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     9ea:	4b04      	ldr	r3, [pc, #16]	; (9fc <delay_us+0x14>)
     9ec:	681c      	ldr	r4, [r3, #0]
     9ee:	4b04      	ldr	r3, [pc, #16]	; (a00 <delay_us+0x18>)
     9f0:	4798      	blx	r3
     9f2:	0001      	movs	r1, r0
     9f4:	0020      	movs	r0, r4
     9f6:	4b03      	ldr	r3, [pc, #12]	; (a04 <delay_us+0x1c>)
     9f8:	4798      	blx	r3
}
     9fa:	bd10      	pop	{r4, pc}
     9fc:	200000cc 	.word	0x200000cc
     a00:	00000ecd 	.word	0x00000ecd
     a04:	00000ee9 	.word	0x00000ee9

00000a08 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     a08:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     a0a:	4b0c      	ldr	r3, [pc, #48]	; (a3c <process_ext_irq+0x34>)
     a0c:	685c      	ldr	r4, [r3, #4]
     a0e:	42a0      	cmp	r0, r4
     a10:	d00e      	beq.n	a30 <process_ext_irq+0x28>
     a12:	2201      	movs	r2, #1
     a14:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     a16:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     a18:	25ff      	movs	r5, #255	; 0xff
     a1a:	e003      	b.n	a24 <process_ext_irq+0x1c>
     a1c:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     a1e:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     a20:	085b      	lsrs	r3, r3, #1
     a22:	d10a      	bne.n	a3a <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     a24:	42a0      	cmp	r0, r4
     a26:	d9f9      	bls.n	a1c <process_ext_irq+0x14>
	while (upper >= lower) {
     a28:	2a00      	cmp	r2, #0
     a2a:	d006      	beq.n	a3a <process_ext_irq+0x32>
			lower = middle + 1;
     a2c:	0031      	movs	r1, r6
     a2e:	e7f6      	b.n	a1e <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     a30:	4b02      	ldr	r3, [pc, #8]	; (a3c <process_ext_irq+0x34>)
     a32:	681b      	ldr	r3, [r3, #0]
     a34:	2b00      	cmp	r3, #0
     a36:	d000      	beq.n	a3a <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     a38:	4798      	blx	r3
		}
	}
}
     a3a:	bd70      	pop	{r4, r5, r6, pc}
     a3c:	200000d0 	.word	0x200000d0

00000a40 <ext_irq_init>:
{
     a40:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     a42:	4b05      	ldr	r3, [pc, #20]	; (a58 <ext_irq_init+0x18>)
     a44:	2201      	movs	r2, #1
     a46:	4252      	negs	r2, r2
     a48:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     a4a:	2200      	movs	r2, #0
     a4c:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     a4e:	4803      	ldr	r0, [pc, #12]	; (a5c <ext_irq_init+0x1c>)
     a50:	4b03      	ldr	r3, [pc, #12]	; (a60 <ext_irq_init+0x20>)
     a52:	4798      	blx	r3
}
     a54:	bd10      	pop	{r4, pc}
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	200000d0 	.word	0x200000d0
     a5c:	00000a09 	.word	0x00000a09
     a60:	00000f21 	.word	0x00000f21

00000a64 <ext_irq_register>:
{
     a64:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     a66:	4b0f      	ldr	r3, [pc, #60]	; (aa4 <ext_irq_register+0x40>)
     a68:	685b      	ldr	r3, [r3, #4]
     a6a:	4298      	cmp	r0, r3
     a6c:	d008      	beq.n	a80 <ext_irq_register+0x1c>
	if (NULL == cb) {
     a6e:	2900      	cmp	r1, #0
     a70:	d014      	beq.n	a9c <ext_irq_register+0x38>
			if (NULL == ext_irqs[i].cb) {
     a72:	4b0c      	ldr	r3, [pc, #48]	; (aa4 <ext_irq_register+0x40>)
     a74:	681b      	ldr	r3, [r3, #0]
     a76:	2b00      	cmp	r3, #0
     a78:	d009      	beq.n	a8e <ext_irq_register+0x2a>
		return ERR_INVALID_ARG;
     a7a:	200d      	movs	r0, #13
     a7c:	4240      	negs	r0, r0
     a7e:	e00c      	b.n	a9a <ext_irq_register+0x36>
			ext_irqs[i].cb = cb;
     a80:	4b08      	ldr	r3, [pc, #32]	; (aa4 <ext_irq_register+0x40>)
     a82:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     a84:	2900      	cmp	r1, #0
     a86:	d105      	bne.n	a94 <ext_irq_register+0x30>
		return _ext_irq_enable(pin, false);
     a88:	4b07      	ldr	r3, [pc, #28]	; (aa8 <ext_irq_register+0x44>)
     a8a:	4798      	blx	r3
     a8c:	e005      	b.n	a9a <ext_irq_register+0x36>
				ext_irqs[i].cb  = cb;
     a8e:	4b05      	ldr	r3, [pc, #20]	; (aa4 <ext_irq_register+0x40>)
     a90:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     a92:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     a94:	2101      	movs	r1, #1
     a96:	4b04      	ldr	r3, [pc, #16]	; (aa8 <ext_irq_register+0x44>)
     a98:	4798      	blx	r3
}
     a9a:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     a9c:	200d      	movs	r0, #13
     a9e:	4240      	negs	r0, r0
     aa0:	e7fb      	b.n	a9a <ext_irq_register+0x36>
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	200000d0 	.word	0x200000d0
     aa8:	00000fb9 	.word	0x00000fb9

00000aac <sleep>:
 * \retval -1 The requested sleep mode was invalid or not available
 * \retval  0 The operation completed successfully, returned after leaving the
 *            sleep
 */
int sleep(const uint8_t mode)
{
     aac:	b510      	push	{r4, lr}
	if (ERR_NONE != _set_sleep_mode(mode))
     aae:	4b05      	ldr	r3, [pc, #20]	; (ac4 <sleep+0x18>)
     ab0:	4798      	blx	r3
     ab2:	2800      	cmp	r0, #0
     ab4:	d103      	bne.n	abe <sleep+0x12>
		return ERR_INVALID_ARG;

	_go_to_sleep();
     ab6:	4b04      	ldr	r3, [pc, #16]	; (ac8 <sleep+0x1c>)
     ab8:	4798      	blx	r3

	return ERR_NONE;
     aba:	2000      	movs	r0, #0
}
     abc:	bd10      	pop	{r4, pc}
		return ERR_INVALID_ARG;
     abe:	200d      	movs	r0, #13
     ac0:	4240      	negs	r0, r0
     ac2:	e7fb      	b.n	abc <sleep+0x10>
     ac4:	00001109 	.word	0x00001109
     ac8:	00000ec5 	.word	0x00000ec5

00000acc <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     acc:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     ace:	3808      	subs	r0, #8

	descr->stat = 0;
     ad0:	2300      	movs	r3, #0
     ad2:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     ad4:	6a43      	ldr	r3, [r0, #36]	; 0x24
     ad6:	2b00      	cmp	r3, #0
     ad8:	d000      	beq.n	adc <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     ada:	4798      	blx	r3
	}
}
     adc:	bd10      	pop	{r4, pc}

00000ade <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     ade:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     ae0:	3808      	subs	r0, #8

	descr->stat = 0;
     ae2:	2300      	movs	r3, #0
     ae4:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     ae6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     ae8:	2b00      	cmp	r3, #0
     aea:	d000      	beq.n	aee <usart_error+0x10>
		descr->usart_cb.error(descr);
     aec:	4798      	blx	r3
	}
}
     aee:	bd10      	pop	{r4, pc}

00000af0 <usart_fill_rx_buffer>:
{
     af0:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     af2:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     af4:	302c      	adds	r0, #44	; 0x2c
     af6:	4b04      	ldr	r3, [pc, #16]	; (b08 <usart_fill_rx_buffer+0x18>)
     af8:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     afa:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     afc:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     afe:	2b00      	cmp	r3, #0
     b00:	d001      	beq.n	b06 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     b02:	0020      	movs	r0, r4
     b04:	4798      	blx	r3
}
     b06:	bd10      	pop	{r4, pc}
     b08:	00000e25 	.word	0x00000e25

00000b0c <usart_async_write>:
{
     b0c:	b570      	push	{r4, r5, r6, lr}
     b0e:	0004      	movs	r4, r0
     b10:	000e      	movs	r6, r1
     b12:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     b14:	2800      	cmp	r0, #0
     b16:	d01d      	beq.n	b54 <usart_async_write+0x48>
     b18:	2900      	cmp	r1, #0
     b1a:	d01d      	beq.n	b58 <usart_async_write+0x4c>
     b1c:	0010      	movs	r0, r2
     b1e:	1e43      	subs	r3, r0, #1
     b20:	4198      	sbcs	r0, r3
     b22:	223c      	movs	r2, #60	; 0x3c
     b24:	32ff      	adds	r2, #255	; 0xff
     b26:	490f      	ldr	r1, [pc, #60]	; (b64 <usart_async_write+0x58>)
     b28:	4b0f      	ldr	r3, [pc, #60]	; (b68 <usart_async_write+0x5c>)
     b2a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     b2c:	2344      	movs	r3, #68	; 0x44
     b2e:	5ae2      	ldrh	r2, [r4, r3]
     b30:	3308      	adds	r3, #8
     b32:	5ae3      	ldrh	r3, [r4, r3]
     b34:	429a      	cmp	r2, r3
     b36:	d111      	bne.n	b5c <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
     b38:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     b3a:	234c      	movs	r3, #76	; 0x4c
     b3c:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     b3e:	2200      	movs	r2, #0
     b40:	3b08      	subs	r3, #8
     b42:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     b44:	3b43      	subs	r3, #67	; 0x43
     b46:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     b48:	0020      	movs	r0, r4
     b4a:	3008      	adds	r0, #8
     b4c:	4b07      	ldr	r3, [pc, #28]	; (b6c <usart_async_write+0x60>)
     b4e:	4798      	blx	r3
	return (int32_t)length;
     b50:	0028      	movs	r0, r5
}
     b52:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     b54:	2000      	movs	r0, #0
     b56:	e7e4      	b.n	b22 <usart_async_write+0x16>
     b58:	2000      	movs	r0, #0
     b5a:	e7e2      	b.n	b22 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     b5c:	201c      	movs	r0, #28
     b5e:	4240      	negs	r0, r0
     b60:	e7f7      	b.n	b52 <usart_async_write+0x46>
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	00002af8 	.word	0x00002af8
     b68:	00000d81 	.word	0x00000d81
     b6c:	000013e9 	.word	0x000013e9

00000b70 <usart_process_byte_sent>:
{
     b70:	b570      	push	{r4, r5, r6, lr}
     b72:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     b74:	0001      	movs	r1, r0
     b76:	3908      	subs	r1, #8
     b78:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     b7a:	224c      	movs	r2, #76	; 0x4c
     b7c:	5a8a      	ldrh	r2, [r1, r2]
     b7e:	429a      	cmp	r2, r3
     b80:	d00c      	beq.n	b9c <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     b82:	000a      	movs	r2, r1
     b84:	6c89      	ldr	r1, [r1, #72]	; 0x48
     b86:	1c5d      	adds	r5, r3, #1
     b88:	2044      	movs	r0, #68	; 0x44
     b8a:	5215      	strh	r5, [r2, r0]
     b8c:	5cc9      	ldrb	r1, [r1, r3]
     b8e:	0020      	movs	r0, r4
     b90:	4b04      	ldr	r3, [pc, #16]	; (ba4 <usart_process_byte_sent+0x34>)
     b92:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     b94:	0020      	movs	r0, r4
     b96:	4b04      	ldr	r3, [pc, #16]	; (ba8 <usart_process_byte_sent+0x38>)
     b98:	4798      	blx	r3
}
     b9a:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     b9c:	4b03      	ldr	r3, [pc, #12]	; (bac <usart_process_byte_sent+0x3c>)
     b9e:	4798      	blx	r3
}
     ba0:	e7fb      	b.n	b9a <usart_process_byte_sent+0x2a>
     ba2:	46c0      	nop			; (mov r8, r8)
     ba4:	000013e1 	.word	0x000013e1
     ba8:	000013e9 	.word	0x000013e9
     bac:	000013f1 	.word	0x000013f1

00000bb0 <usart_async_read>:
{
     bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bb2:	46ce      	mov	lr, r9
     bb4:	4647      	mov	r7, r8
     bb6:	b580      	push	{r7, lr}
     bb8:	b085      	sub	sp, #20
     bba:	0005      	movs	r5, r0
     bbc:	000e      	movs	r6, r1
     bbe:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
     bc0:	2800      	cmp	r0, #0
     bc2:	d015      	beq.n	bf0 <usart_async_read+0x40>
     bc4:	2900      	cmp	r1, #0
     bc6:	d013      	beq.n	bf0 <usart_async_read+0x40>
     bc8:	2a00      	cmp	r2, #0
     bca:	d12a      	bne.n	c22 <usart_async_read+0x72>
     bcc:	22ac      	movs	r2, #172	; 0xac
     bce:	0052      	lsls	r2, r2, #1
     bd0:	4929      	ldr	r1, [pc, #164]	; (c78 <usart_async_read+0xc8>)
     bd2:	2000      	movs	r0, #0
     bd4:	4b29      	ldr	r3, [pc, #164]	; (c7c <usart_async_read+0xcc>)
     bd6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     bd8:	a803      	add	r0, sp, #12
     bda:	4b29      	ldr	r3, [pc, #164]	; (c80 <usart_async_read+0xd0>)
     bdc:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     bde:	0028      	movs	r0, r5
     be0:	3034      	adds	r0, #52	; 0x34
     be2:	4b28      	ldr	r3, [pc, #160]	; (c84 <usart_async_read+0xd4>)
     be4:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     be6:	a803      	add	r0, sp, #12
     be8:	4b27      	ldr	r3, [pc, #156]	; (c88 <usart_async_read+0xd8>)
     bea:	4798      	blx	r3
	uint16_t                       was_read = 0;
     bec:	2500      	movs	r5, #0
	return (int32_t)was_read;
     bee:	e03c      	b.n	c6a <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     bf0:	22ac      	movs	r2, #172	; 0xac
     bf2:	0052      	lsls	r2, r2, #1
     bf4:	4920      	ldr	r1, [pc, #128]	; (c78 <usart_async_read+0xc8>)
     bf6:	2000      	movs	r0, #0
     bf8:	4b20      	ldr	r3, [pc, #128]	; (c7c <usart_async_read+0xcc>)
     bfa:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     bfc:	a803      	add	r0, sp, #12
     bfe:	4b20      	ldr	r3, [pc, #128]	; (c80 <usart_async_read+0xd0>)
     c00:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     c02:	3534      	adds	r5, #52	; 0x34
     c04:	0028      	movs	r0, r5
     c06:	9501      	str	r5, [sp, #4]
     c08:	4b1e      	ldr	r3, [pc, #120]	; (c84 <usart_async_read+0xd4>)
     c0a:	4798      	blx	r3
     c0c:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     c0e:	a803      	add	r0, sp, #12
     c10:	4b1d      	ldr	r3, [pc, #116]	; (c88 <usart_async_read+0xd8>)
     c12:	4798      	blx	r3
	uint16_t                       was_read = 0;
     c14:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     c16:	4643      	mov	r3, r8
     c18:	2b00      	cmp	r3, #0
     c1a:	d026      	beq.n	c6a <usart_async_read+0xba>
     c1c:	2f00      	cmp	r7, #0
     c1e:	d116      	bne.n	c4e <usart_async_read+0x9e>
     c20:	e023      	b.n	c6a <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     c22:	22ac      	movs	r2, #172	; 0xac
     c24:	0052      	lsls	r2, r2, #1
     c26:	4914      	ldr	r1, [pc, #80]	; (c78 <usart_async_read+0xc8>)
     c28:	2001      	movs	r0, #1
     c2a:	4b14      	ldr	r3, [pc, #80]	; (c7c <usart_async_read+0xcc>)
     c2c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     c2e:	a803      	add	r0, sp, #12
     c30:	4b13      	ldr	r3, [pc, #76]	; (c80 <usart_async_read+0xd0>)
     c32:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     c34:	3534      	adds	r5, #52	; 0x34
     c36:	0028      	movs	r0, r5
     c38:	9501      	str	r5, [sp, #4]
     c3a:	4b12      	ldr	r3, [pc, #72]	; (c84 <usart_async_read+0xd4>)
     c3c:	4798      	blx	r3
     c3e:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     c40:	a803      	add	r0, sp, #12
     c42:	4b11      	ldr	r3, [pc, #68]	; (c88 <usart_async_read+0xd8>)
     c44:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     c46:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
     c48:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     c4a:	2b00      	cmp	r3, #0
     c4c:	d00d      	beq.n	c6a <usart_async_read+0xba>
{
     c4e:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     c50:	4b0e      	ldr	r3, [pc, #56]	; (c8c <usart_async_read+0xdc>)
     c52:	4699      	mov	r9, r3
     c54:	1c65      	adds	r5, r4, #1
     c56:	b2ad      	uxth	r5, r5
     c58:	1931      	adds	r1, r6, r4
     c5a:	9801      	ldr	r0, [sp, #4]
     c5c:	47c8      	blx	r9
     c5e:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     c60:	4544      	cmp	r4, r8
     c62:	d202      	bcs.n	c6a <usart_async_read+0xba>
     c64:	b2a3      	uxth	r3, r4
     c66:	429f      	cmp	r7, r3
     c68:	d8f4      	bhi.n	c54 <usart_async_read+0xa4>
}
     c6a:	0028      	movs	r0, r5
     c6c:	b005      	add	sp, #20
     c6e:	bc0c      	pop	{r2, r3}
     c70:	4690      	mov	r8, r2
     c72:	4699      	mov	r9, r3
     c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c76:	46c0      	nop			; (mov r8, r8)
     c78:	00002af8 	.word	0x00002af8
     c7c:	00000d81 	.word	0x00000d81
     c80:	00000959 	.word	0x00000959
     c84:	00000e65 	.word	0x00000e65
     c88:	00000967 	.word	0x00000967
     c8c:	00000ddd 	.word	0x00000ddd

00000c90 <usart_async_init>:
{
     c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c92:	0004      	movs	r4, r0
     c94:	000d      	movs	r5, r1
     c96:	0016      	movs	r6, r2
     c98:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     c9a:	2800      	cmp	r0, #0
     c9c:	d026      	beq.n	cec <usart_async_init+0x5c>
     c9e:	2900      	cmp	r1, #0
     ca0:	d026      	beq.n	cf0 <usart_async_init+0x60>
     ca2:	2a00      	cmp	r2, #0
     ca4:	d026      	beq.n	cf4 <usart_async_init+0x64>
     ca6:	0018      	movs	r0, r3
     ca8:	1e43      	subs	r3, r0, #1
     caa:	4198      	sbcs	r0, r3
     cac:	223a      	movs	r2, #58	; 0x3a
     cae:	4914      	ldr	r1, [pc, #80]	; (d00 <usart_async_init+0x70>)
     cb0:	4b14      	ldr	r3, [pc, #80]	; (d04 <usart_async_init+0x74>)
     cb2:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     cb4:	0020      	movs	r0, r4
     cb6:	3034      	adds	r0, #52	; 0x34
     cb8:	003a      	movs	r2, r7
     cba:	0031      	movs	r1, r6
     cbc:	4b12      	ldr	r3, [pc, #72]	; (d08 <usart_async_init+0x78>)
     cbe:	4798      	blx	r3
     cc0:	2800      	cmp	r0, #0
     cc2:	d119      	bne.n	cf8 <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
     cc4:	0020      	movs	r0, r4
     cc6:	3008      	adds	r0, #8
     cc8:	0029      	movs	r1, r5
     cca:	4b10      	ldr	r3, [pc, #64]	; (d0c <usart_async_init+0x7c>)
     ccc:	4798      	blx	r3
	if (init_status) {
     cce:	2800      	cmp	r0, #0
     cd0:	d10b      	bne.n	cea <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     cd2:	4b0f      	ldr	r3, [pc, #60]	; (d10 <usart_async_init+0x80>)
     cd4:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     cd6:	4b0f      	ldr	r3, [pc, #60]	; (d14 <usart_async_init+0x84>)
     cd8:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     cda:	4b0f      	ldr	r3, [pc, #60]	; (d18 <usart_async_init+0x88>)
     cdc:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     cde:	4b0f      	ldr	r3, [pc, #60]	; (d1c <usart_async_init+0x8c>)
     ce0:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     ce2:	4b0f      	ldr	r3, [pc, #60]	; (d20 <usart_async_init+0x90>)
     ce4:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     ce6:	4b0f      	ldr	r3, [pc, #60]	; (d24 <usart_async_init+0x94>)
     ce8:	6163      	str	r3, [r4, #20]
}
     cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     cec:	2000      	movs	r0, #0
     cee:	e7dd      	b.n	cac <usart_async_init+0x1c>
     cf0:	2000      	movs	r0, #0
     cf2:	e7db      	b.n	cac <usart_async_init+0x1c>
     cf4:	2000      	movs	r0, #0
     cf6:	e7d9      	b.n	cac <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     cf8:	200d      	movs	r0, #13
     cfa:	4240      	negs	r0, r0
     cfc:	e7f5      	b.n	cea <usart_async_init+0x5a>
     cfe:	46c0      	nop			; (mov r8, r8)
     d00:	00002af8 	.word	0x00002af8
     d04:	00000d81 	.word	0x00000d81
     d08:	00000d89 	.word	0x00000d89
     d0c:	0000133d 	.word	0x0000133d
     d10:	00000bb1 	.word	0x00000bb1
     d14:	00000b0d 	.word	0x00000b0d
     d18:	00000b71 	.word	0x00000b71
     d1c:	00000af1 	.word	0x00000af1
     d20:	00000acd 	.word	0x00000acd
     d24:	00000adf 	.word	0x00000adf

00000d28 <usart_async_enable>:
{
     d28:	b510      	push	{r4, lr}
     d2a:	0004      	movs	r4, r0
	ASSERT(descr);
     d2c:	1e43      	subs	r3, r0, #1
     d2e:	4198      	sbcs	r0, r3
     d30:	b2c0      	uxtb	r0, r0
     d32:	2261      	movs	r2, #97	; 0x61
     d34:	4904      	ldr	r1, [pc, #16]	; (d48 <usart_async_enable+0x20>)
     d36:	4b05      	ldr	r3, [pc, #20]	; (d4c <usart_async_enable+0x24>)
     d38:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     d3a:	0020      	movs	r0, r4
     d3c:	3008      	adds	r0, #8
     d3e:	4b04      	ldr	r3, [pc, #16]	; (d50 <usart_async_enable+0x28>)
     d40:	4798      	blx	r3
}
     d42:	2000      	movs	r0, #0
     d44:	bd10      	pop	{r4, pc}
     d46:	46c0      	nop			; (mov r8, r8)
     d48:	00002af8 	.word	0x00002af8
     d4c:	00000d81 	.word	0x00000d81
     d50:	000013b9 	.word	0x000013b9

00000d54 <usart_async_disable>:
{
     d54:	b510      	push	{r4, lr}
     d56:	0004      	movs	r4, r0
	ASSERT(descr);
     d58:	1e43      	subs	r3, r0, #1
     d5a:	4198      	sbcs	r0, r3
     d5c:	b2c0      	uxtb	r0, r0
     d5e:	226c      	movs	r2, #108	; 0x6c
     d60:	4904      	ldr	r1, [pc, #16]	; (d74 <usart_async_disable+0x20>)
     d62:	4b05      	ldr	r3, [pc, #20]	; (d78 <usart_async_disable+0x24>)
     d64:	4798      	blx	r3
	_usart_async_disable(&descr->device);
     d66:	0020      	movs	r0, r4
     d68:	3008      	adds	r0, #8
     d6a:	4b04      	ldr	r3, [pc, #16]	; (d7c <usart_async_disable+0x28>)
     d6c:	4798      	blx	r3
}
     d6e:	2000      	movs	r0, #0
     d70:	bd10      	pop	{r4, pc}
     d72:	46c0      	nop			; (mov r8, r8)
     d74:	00002af8 	.word	0x00002af8
     d78:	00000d81 	.word	0x00000d81
     d7c:	000013cd 	.word	0x000013cd

00000d80 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     d80:	2800      	cmp	r0, #0
     d82:	d100      	bne.n	d86 <assert+0x6>
		__asm("BKPT #0");
     d84:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     d86:	4770      	bx	lr

00000d88 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     d88:	b570      	push	{r4, r5, r6, lr}
     d8a:	0004      	movs	r4, r0
     d8c:	000e      	movs	r6, r1
     d8e:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     d90:	2800      	cmp	r0, #0
     d92:	d00b      	beq.n	dac <ringbuffer_init+0x24>
     d94:	2900      	cmp	r1, #0
     d96:	d018      	beq.n	dca <ringbuffer_init+0x42>
     d98:	2001      	movs	r0, #1
     d9a:	2a00      	cmp	r2, #0
     d9c:	d107      	bne.n	dae <ringbuffer_init+0x26>
     d9e:	2228      	movs	r2, #40	; 0x28
     da0:	490c      	ldr	r1, [pc, #48]	; (dd4 <ringbuffer_init+0x4c>)
     da2:	2000      	movs	r0, #0
     da4:	4b0c      	ldr	r3, [pc, #48]	; (dd8 <ringbuffer_init+0x50>)
     da6:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     da8:	1e6b      	subs	r3, r5, #1
     daa:	e007      	b.n	dbc <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
     dac:	2000      	movs	r0, #0
     dae:	2228      	movs	r2, #40	; 0x28
     db0:	4908      	ldr	r1, [pc, #32]	; (dd4 <ringbuffer_init+0x4c>)
     db2:	4b09      	ldr	r3, [pc, #36]	; (dd8 <ringbuffer_init+0x50>)
     db4:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
     db6:	1e6b      	subs	r3, r5, #1
     db8:	422b      	tst	r3, r5
     dba:	d108      	bne.n	dce <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     dbc:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     dbe:	2300      	movs	r3, #0
     dc0:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     dc2:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     dc4:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     dc6:	2000      	movs	r0, #0
}
     dc8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     dca:	2000      	movs	r0, #0
     dcc:	e7ef      	b.n	dae <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
     dce:	200d      	movs	r0, #13
     dd0:	4240      	negs	r0, r0
     dd2:	e7f9      	b.n	dc8 <ringbuffer_init+0x40>
     dd4:	00002b18 	.word	0x00002b18
     dd8:	00000d81 	.word	0x00000d81

00000ddc <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     ddc:	b570      	push	{r4, r5, r6, lr}
     dde:	0004      	movs	r4, r0
     de0:	000d      	movs	r5, r1
	ASSERT(rb && data);
     de2:	2800      	cmp	r0, #0
     de4:	d015      	beq.n	e12 <ringbuffer_get+0x36>
     de6:	0008      	movs	r0, r1
     de8:	1e43      	subs	r3, r0, #1
     dea:	4198      	sbcs	r0, r3
     dec:	b2c0      	uxtb	r0, r0
     dee:	2240      	movs	r2, #64	; 0x40
     df0:	490a      	ldr	r1, [pc, #40]	; (e1c <ringbuffer_get+0x40>)
     df2:	4b0b      	ldr	r3, [pc, #44]	; (e20 <ringbuffer_get+0x44>)
     df4:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     df6:	68a3      	ldr	r3, [r4, #8]
     df8:	68e2      	ldr	r2, [r4, #12]
     dfa:	429a      	cmp	r2, r3
     dfc:	d00b      	beq.n	e16 <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
     dfe:	6862      	ldr	r2, [r4, #4]
     e00:	4013      	ands	r3, r2
     e02:	6822      	ldr	r2, [r4, #0]
     e04:	5cd3      	ldrb	r3, [r2, r3]
     e06:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     e08:	68a3      	ldr	r3, [r4, #8]
     e0a:	3301      	adds	r3, #1
     e0c:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     e0e:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     e10:	bd70      	pop	{r4, r5, r6, pc}
     e12:	2000      	movs	r0, #0
     e14:	e7eb      	b.n	dee <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
     e16:	200a      	movs	r0, #10
     e18:	4240      	negs	r0, r0
     e1a:	e7f9      	b.n	e10 <ringbuffer_get+0x34>
     e1c:	00002b18 	.word	0x00002b18
     e20:	00000d81 	.word	0x00000d81

00000e24 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     e24:	b570      	push	{r4, r5, r6, lr}
     e26:	0004      	movs	r4, r0
     e28:	000d      	movs	r5, r1
	ASSERT(rb);
     e2a:	1e43      	subs	r3, r0, #1
     e2c:	4198      	sbcs	r0, r3
     e2e:	b2c0      	uxtb	r0, r0
     e30:	2251      	movs	r2, #81	; 0x51
     e32:	490a      	ldr	r1, [pc, #40]	; (e5c <ringbuffer_put+0x38>)
     e34:	4b0a      	ldr	r3, [pc, #40]	; (e60 <ringbuffer_put+0x3c>)
     e36:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     e38:	6863      	ldr	r3, [r4, #4]
     e3a:	68e2      	ldr	r2, [r4, #12]
     e3c:	4013      	ands	r3, r2
     e3e:	6822      	ldr	r2, [r4, #0]
     e40:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     e42:	68e3      	ldr	r3, [r4, #12]
     e44:	6861      	ldr	r1, [r4, #4]
     e46:	68a2      	ldr	r2, [r4, #8]
     e48:	1a9a      	subs	r2, r3, r2
     e4a:	428a      	cmp	r2, r1
     e4c:	d901      	bls.n	e52 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     e4e:	1a59      	subs	r1, r3, r1
     e50:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     e52:	3301      	adds	r3, #1
     e54:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     e56:	2000      	movs	r0, #0
     e58:	bd70      	pop	{r4, r5, r6, pc}
     e5a:	46c0      	nop			; (mov r8, r8)
     e5c:	00002b18 	.word	0x00002b18
     e60:	00000d81 	.word	0x00000d81

00000e64 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     e64:	b510      	push	{r4, lr}
     e66:	0004      	movs	r4, r0
	ASSERT(rb);
     e68:	1e43      	subs	r3, r0, #1
     e6a:	4198      	sbcs	r0, r3
     e6c:	b2c0      	uxtb	r0, r0
     e6e:	2267      	movs	r2, #103	; 0x67
     e70:	4903      	ldr	r1, [pc, #12]	; (e80 <ringbuffer_num+0x1c>)
     e72:	4b04      	ldr	r3, [pc, #16]	; (e84 <ringbuffer_num+0x20>)
     e74:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     e76:	68e0      	ldr	r0, [r4, #12]
     e78:	68a3      	ldr	r3, [r4, #8]
     e7a:	1ac0      	subs	r0, r0, r3
}
     e7c:	bd10      	pop	{r4, pc}
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	00002b18 	.word	0x00002b18
     e84:	00000d81 	.word	0x00000d81

00000e88 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     e88:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     e8a:	4a06      	ldr	r2, [pc, #24]	; (ea4 <_sbrk+0x1c>)
     e8c:	6812      	ldr	r2, [r2, #0]
     e8e:	2a00      	cmp	r2, #0
     e90:	d004      	beq.n	e9c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     e92:	4a04      	ldr	r2, [pc, #16]	; (ea4 <_sbrk+0x1c>)
     e94:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     e96:	18c3      	adds	r3, r0, r3
     e98:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     e9a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     e9c:	4902      	ldr	r1, [pc, #8]	; (ea8 <_sbrk+0x20>)
     e9e:	4a01      	ldr	r2, [pc, #4]	; (ea4 <_sbrk+0x1c>)
     ea0:	6011      	str	r1, [r2, #0]
     ea2:	e7f6      	b.n	e92 <_sbrk+0xa>
     ea4:	200000d8 	.word	0x200000d8
     ea8:	20002258 	.word	0x20002258

00000eac <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     eac:	2001      	movs	r0, #1
     eae:	4240      	negs	r0, r0
     eb0:	4770      	bx	lr

00000eb2 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     eb2:	2380      	movs	r3, #128	; 0x80
     eb4:	019b      	lsls	r3, r3, #6
     eb6:	604b      	str	r3, [r1, #4]

	return 0;
}
     eb8:	2000      	movs	r0, #0
     eba:	4770      	bx	lr

00000ebc <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     ebc:	2001      	movs	r0, #1
     ebe:	4770      	bx	lr

00000ec0 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     ec0:	2000      	movs	r0, #0
     ec2:	4770      	bx	lr

00000ec4 <_go_to_sleep>:
  __ASM volatile ("dsb 0xF":::"memory");
     ec4:	f3bf 8f4f 	dsb	sy
 * \brief Put MCU to sleep
 */
void _go_to_sleep(void)
{
	__DSB();
	__WFI();
     ec8:	bf30      	wfi
}
     eca:	4770      	bx	lr

00000ecc <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
     ecc:	b510      	push	{r4, lr}
     ece:	0003      	movs	r3, r0
		return (us * (freq / 10000) + 299) / 300;
     ed0:	20c8      	movs	r0, #200	; 0xc8
     ed2:	0080      	lsls	r0, r0, #2
     ed4:	4358      	muls	r0, r3
     ed6:	302c      	adds	r0, #44	; 0x2c
     ed8:	30ff      	adds	r0, #255	; 0xff
     eda:	2196      	movs	r1, #150	; 0x96
     edc:	0049      	lsls	r1, r1, #1
     ede:	4b01      	ldr	r3, [pc, #4]	; (ee4 <_get_cycles_for_us+0x18>)
     ee0:	4798      	blx	r3
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     ee2:	bd10      	pop	{r4, pc}
     ee4:	000017cd 	.word	0x000017cd

00000ee8 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     ee8:	3901      	subs	r1, #1
     eea:	d8fd      	bhi.n	ee8 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     eec:	4770      	bx	lr
	...

00000ef0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     ef0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     ef2:	4b06      	ldr	r3, [pc, #24]	; (f0c <_init_chip+0x1c>)
     ef4:	685a      	ldr	r2, [r3, #4]
     ef6:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     ef8:	4b05      	ldr	r3, [pc, #20]	; (f10 <_init_chip+0x20>)
     efa:	4798      	blx	r3
	_sysctrl_init_sources();
     efc:	4b05      	ldr	r3, [pc, #20]	; (f14 <_init_chip+0x24>)
     efe:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     f00:	4b05      	ldr	r3, [pc, #20]	; (f18 <_init_chip+0x28>)
     f02:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     f04:	20ff      	movs	r0, #255	; 0xff
     f06:	4b05      	ldr	r3, [pc, #20]	; (f1c <_init_chip+0x2c>)
     f08:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     f0a:	bd10      	pop	{r4, pc}
     f0c:	41004000 	.word	0x41004000
     f10:	00001141 	.word	0x00001141
     f14:	000014d9 	.word	0x000014d9
     f18:	0000151d 	.word	0x0000151d
     f1c:	000010cd 	.word	0x000010cd

00000f20 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     f20:	4a22      	ldr	r2, [pc, #136]	; (fac <_ext_irq_init+0x8c>)
     f22:	7853      	ldrb	r3, [r2, #1]
     f24:	09db      	lsrs	r3, r3, #7
     f26:	d1fc      	bne.n	f22 <_ext_irq_init+0x2>
     f28:	4a20      	ldr	r2, [pc, #128]	; (fac <_ext_irq_init+0x8c>)
     f2a:	7853      	ldrb	r3, [r2, #1]
     f2c:	09db      	lsrs	r3, r3, #7
     f2e:	d1fc      	bne.n	f2a <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     f30:	4b1e      	ldr	r3, [pc, #120]	; (fac <_ext_irq_init+0x8c>)
     f32:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     f34:	079b      	lsls	r3, r3, #30
     f36:	d50a      	bpl.n	f4e <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     f38:	2200      	movs	r2, #0
     f3a:	4b1c      	ldr	r3, [pc, #112]	; (fac <_ext_irq_init+0x8c>)
     f3c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     f3e:	001a      	movs	r2, r3
     f40:	7853      	ldrb	r3, [r2, #1]
     f42:	09db      	lsrs	r3, r3, #7
     f44:	d1fc      	bne.n	f40 <_ext_irq_init+0x20>
     f46:	4a19      	ldr	r2, [pc, #100]	; (fac <_ext_irq_init+0x8c>)
     f48:	7853      	ldrb	r3, [r2, #1]
     f4a:	09db      	lsrs	r3, r3, #7
     f4c:	d1fc      	bne.n	f48 <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
     f4e:	2201      	movs	r2, #1
     f50:	4b16      	ldr	r3, [pc, #88]	; (fac <_ext_irq_init+0x8c>)
     f52:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     f54:	001a      	movs	r2, r3
     f56:	7853      	ldrb	r3, [r2, #1]
     f58:	09db      	lsrs	r3, r3, #7
     f5a:	d1fc      	bne.n	f56 <_ext_irq_init+0x36>
     f5c:	4a13      	ldr	r2, [pc, #76]	; (fac <_ext_irq_init+0x8c>)
     f5e:	7853      	ldrb	r3, [r2, #1]
     f60:	09db      	lsrs	r3, r3, #7
     f62:	d1fc      	bne.n	f5e <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     f64:	4b11      	ldr	r3, [pc, #68]	; (fac <_ext_irq_init+0x8c>)
     f66:	2200      	movs	r2, #0
     f68:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     f6a:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     f6c:	2180      	movs	r1, #128	; 0x80
     f6e:	0209      	lsls	r1, r1, #8
     f70:	6159      	str	r1, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     f72:	619a      	str	r2, [r3, #24]
     f74:	22a0      	movs	r2, #160	; 0xa0
     f76:	0612      	lsls	r2, r2, #24
     f78:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     f7a:	781a      	ldrb	r2, [r3, #0]
     f7c:	2102      	movs	r1, #2
     f7e:	430a      	orrs	r2, r1
     f80:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     f82:	001a      	movs	r2, r3
     f84:	7853      	ldrb	r3, [r2, #1]
     f86:	09db      	lsrs	r3, r3, #7
     f88:	d1fc      	bne.n	f84 <_ext_irq_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f8a:	4b09      	ldr	r3, [pc, #36]	; (fb0 <_ext_irq_init+0x90>)
     f8c:	2210      	movs	r2, #16
     f8e:	2180      	movs	r1, #128	; 0x80
     f90:	505a      	str	r2, [r3, r1]
     f92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f96:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f9a:	3101      	adds	r1, #1
     f9c:	31ff      	adds	r1, #255	; 0xff
     f9e:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fa0:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     fa2:	4b04      	ldr	r3, [pc, #16]	; (fb4 <_ext_irq_init+0x94>)
     fa4:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     fa6:	2000      	movs	r0, #0
     fa8:	4770      	bx	lr
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	40001800 	.word	0x40001800
     fb0:	e000e100 	.word	0xe000e100
     fb4:	200000dc 	.word	0x200000dc

00000fb8 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
     fb8:	280f      	cmp	r0, #15
     fba:	d002      	beq.n	fc2 <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
     fbc:	200d      	movs	r0, #13
     fbe:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
     fc0:	4770      	bx	lr
	if (enable) {
     fc2:	2900      	cmp	r1, #0
     fc4:	d106      	bne.n	fd4 <_ext_irq_enable+0x1c>
	((Eic *)hw)->INTENCLR.reg = mask;
     fc6:	4b06      	ldr	r3, [pc, #24]	; (fe0 <_ext_irq_enable+0x28>)
     fc8:	2280      	movs	r2, #128	; 0x80
     fca:	0212      	lsls	r2, r2, #8
     fcc:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     fce:	611a      	str	r2, [r3, #16]
	return ERR_NONE;
     fd0:	2000      	movs	r0, #0
     fd2:	e7f5      	b.n	fc0 <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
     fd4:	2280      	movs	r2, #128	; 0x80
     fd6:	0212      	lsls	r2, r2, #8
     fd8:	4b01      	ldr	r3, [pc, #4]	; (fe0 <_ext_irq_enable+0x28>)
     fda:	60da      	str	r2, [r3, #12]
     fdc:	2000      	movs	r0, #0
     fde:	e7ef      	b.n	fc0 <_ext_irq_enable+0x8>
     fe0:	40001800 	.word	0x40001800

00000fe4 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
     fe6:	46ce      	mov	lr, r9
     fe8:	4647      	mov	r7, r8
     fea:	b580      	push	{r7, lr}
     fec:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
     fee:	4b31      	ldr	r3, [pc, #196]	; (10b4 <EIC_Handler+0xd0>)
     ff0:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     ff2:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     ff4:	400a      	ands	r2, r1
     ff6:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     ff8:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     ffa:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     ffc:	4b2e      	ldr	r3, [pc, #184]	; (10b8 <EIC_Handler+0xd4>)
     ffe:	6818      	ldr	r0, [r3, #0]
    1000:	1e43      	subs	r3, r0, #1
    1002:	4198      	sbcs	r0, r3
    1004:	b2c0      	uxtb	r0, r0
    1006:	22d2      	movs	r2, #210	; 0xd2
    1008:	492c      	ldr	r1, [pc, #176]	; (10bc <EIC_Handler+0xd8>)
    100a:	4b2d      	ldr	r3, [pc, #180]	; (10c0 <EIC_Handler+0xdc>)
    100c:	4798      	blx	r3

	while (flags) {
    100e:	9b01      	ldr	r3, [sp, #4]
    1010:	2b00      	cmp	r3, #0
    1012:	d049      	beq.n	10a8 <EIC_Handler+0xc4>
    1014:	2301      	movs	r3, #1
    1016:	425b      	negs	r3, r3
    1018:	4699      	mov	r9, r3
		pos = ffs(flags) - 1;
    101a:	4b2a      	ldr	r3, [pc, #168]	; (10c4 <EIC_Handler+0xe0>)
    101c:	4698      	mov	r8, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
    101e:	4f26      	ldr	r7, [pc, #152]	; (10b8 <EIC_Handler+0xd4>)
				if (_map[middle].extint == pos) {
    1020:	4d29      	ldr	r5, [pc, #164]	; (10c8 <EIC_Handler+0xe4>)
    1022:	e03a      	b.n	109a <EIC_Handler+0xb6>
					upper = middle - 1;
    1024:	3a01      	subs	r2, #1
    1026:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
    1028:	42b1      	cmp	r1, r6
    102a:	d80c      	bhi.n	1046 <EIC_Handler+0x62>
				middle = (upper + lower) >> 1;
    102c:	1873      	adds	r3, r6, r1
    102e:	105b      	asrs	r3, r3, #1
    1030:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
    1032:	4003      	ands	r3, r0
    1034:	00db      	lsls	r3, r3, #3
    1036:	5d5b      	ldrb	r3, [r3, r5]
    1038:	42a3      	cmp	r3, r4
    103a:	d008      	beq.n	104e <EIC_Handler+0x6a>
				if (_map[middle].extint < pos) {
    103c:	429c      	cmp	r4, r3
    103e:	ddf1      	ble.n	1024 <EIC_Handler+0x40>
					lower = middle + 1;
    1040:	3201      	adds	r2, #1
    1042:	b2d1      	uxtb	r1, r2
    1044:	e7f0      	b.n	1028 <EIC_Handler+0x44>
			if (INVALID_PIN_NUMBER != pin) {
    1046:	464b      	mov	r3, r9
    1048:	3301      	adds	r3, #1
    104a:	d005      	beq.n	1058 <EIC_Handler+0x74>
    104c:	e001      	b.n	1052 <EIC_Handler+0x6e>
    104e:	230f      	movs	r3, #15
    1050:	4699      	mov	r9, r3
				callback(pin);
    1052:	4648      	mov	r0, r9
    1054:	683b      	ldr	r3, [r7, #0]
    1056:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1058:	9b01      	ldr	r3, [sp, #4]
    105a:	2201      	movs	r2, #1
    105c:	40a2      	lsls	r2, r4
    105e:	4393      	bics	r3, r2
    1060:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    1062:	9801      	ldr	r0, [sp, #4]
    1064:	4b17      	ldr	r3, [pc, #92]	; (10c4 <EIC_Handler+0xe0>)
    1066:	4798      	blx	r3
    1068:	3801      	subs	r0, #1
    106a:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    106c:	1c63      	adds	r3, r4, #1
    106e:	d00a      	beq.n	1086 <EIC_Handler+0xa2>
				if (_map[middle].extint == pos) {
    1070:	2c0f      	cmp	r4, #15
    1072:	d005      	beq.n	1080 <EIC_Handler+0x9c>
    1074:	230f      	movs	r3, #15
    1076:	2200      	movs	r2, #0
    1078:	2601      	movs	r6, #1
    107a:	2100      	movs	r1, #0
    107c:	20ff      	movs	r0, #255	; 0xff
    107e:	e7dd      	b.n	103c <EIC_Handler+0x58>
    1080:	230f      	movs	r3, #15
    1082:	4699      	mov	r9, r3
    1084:	e7e5      	b.n	1052 <EIC_Handler+0x6e>
	return ((Eic *)hw)->INTFLAG.reg;
    1086:	4b0b      	ldr	r3, [pc, #44]	; (10b4 <EIC_Handler+0xd0>)
    1088:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    108a:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    108c:	400a      	ands	r2, r1
    108e:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1090:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1092:	611a      	str	r2, [r3, #16]
	while (flags) {
    1094:	9b01      	ldr	r3, [sp, #4]
    1096:	2b00      	cmp	r3, #0
    1098:	d006      	beq.n	10a8 <EIC_Handler+0xc4>
		pos = ffs(flags) - 1;
    109a:	9801      	ldr	r0, [sp, #4]
    109c:	47c0      	blx	r8
    109e:	3801      	subs	r0, #1
    10a0:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    10a2:	1c63      	adds	r3, r4, #1
    10a4:	d1e4      	bne.n	1070 <EIC_Handler+0x8c>
    10a6:	e7ee      	b.n	1086 <EIC_Handler+0xa2>
	}
}
    10a8:	b003      	add	sp, #12
    10aa:	bc0c      	pop	{r2, r3}
    10ac:	4690      	mov	r8, r2
    10ae:	4699      	mov	r9, r3
    10b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	40001800 	.word	0x40001800
    10b8:	200000dc 	.word	0x200000dc
    10bc:	00002b44 	.word	0x00002b44
    10c0:	00000d81 	.word	0x00000d81
    10c4:	00001ab9 	.word	0x00001ab9
    10c8:	00002b3c 	.word	0x00002b3c

000010cc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    10cc:	07c3      	lsls	r3, r0, #31
    10ce:	d50a      	bpl.n	10e6 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    10d0:	4b0b      	ldr	r3, [pc, #44]	; (1100 <_gclk_init_generators_by_fref+0x34>)
    10d2:	2280      	movs	r2, #128	; 0x80
    10d4:	0052      	lsls	r2, r2, #1
    10d6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    10d8:	2283      	movs	r2, #131	; 0x83
    10da:	0252      	lsls	r2, r2, #9
    10dc:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    10de:	001a      	movs	r2, r3
    10e0:	7853      	ldrb	r3, [r2, #1]
    10e2:	09db      	lsrs	r3, r3, #7
    10e4:	d1fc      	bne.n	10e0 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    10e6:	0703      	lsls	r3, r0, #28
    10e8:	d509      	bpl.n	10fe <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
    10ea:	4b05      	ldr	r3, [pc, #20]	; (1100 <_gclk_init_generators_by_fref+0x34>)
    10ec:	2204      	movs	r2, #4
    10ee:	32ff      	adds	r2, #255	; 0xff
    10f0:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    10f2:	4a04      	ldr	r2, [pc, #16]	; (1104 <_gclk_init_generators_by_fref+0x38>)
    10f4:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    10f6:	001a      	movs	r2, r3
    10f8:	7853      	ldrb	r3, [r2, #1]
    10fa:	09db      	lsrs	r3, r3, #7
    10fc:	d1fc      	bne.n	10f8 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    10fe:	4770      	bx	lr
    1100:	40000c00 	.word	0x40000c00
    1104:	00210303 	.word	0x00210303

00001108 <_set_sleep_mode>:
/**
 * \brief Set the sleep mode for the device
 */
int32_t _set_sleep_mode(const uint8_t mode)
{
	switch (mode) {
    1108:	2802      	cmp	r0, #2
    110a:	d904      	bls.n	1116 <_set_sleep_mode+0xe>
    110c:	2803      	cmp	r0, #3
    110e:	d00b      	beq.n	1128 <_set_sleep_mode+0x20>
		return ERR_NONE;
	case 3:
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
		return ERR_NONE;
	default:
		return ERR_INVALID_ARG;
    1110:	200d      	movs	r0, #13
    1112:	4240      	negs	r0, r0
    1114:	e007      	b.n	1126 <_set_sleep_mode+0x1e>
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    1116:	4a08      	ldr	r2, [pc, #32]	; (1138 <_set_sleep_mode+0x30>)
    1118:	6913      	ldr	r3, [r2, #16]
    111a:	2104      	movs	r1, #4
    111c:	438b      	bics	r3, r1
    111e:	6113      	str	r3, [r2, #16]
		PM->SLEEP.reg = mode;
    1120:	4b06      	ldr	r3, [pc, #24]	; (113c <_set_sleep_mode+0x34>)
    1122:	7058      	strb	r0, [r3, #1]
		return ERR_NONE;
    1124:	2000      	movs	r0, #0
	}
}
    1126:	4770      	bx	lr
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    1128:	4a03      	ldr	r2, [pc, #12]	; (1138 <_set_sleep_mode+0x30>)
    112a:	6913      	ldr	r3, [r2, #16]
    112c:	2104      	movs	r1, #4
    112e:	430b      	orrs	r3, r1
    1130:	6113      	str	r3, [r2, #16]
		return ERR_NONE;
    1132:	2000      	movs	r0, #0
    1134:	e7f7      	b.n	1126 <_set_sleep_mode+0x1e>
    1136:	46c0      	nop			; (mov r8, r8)
    1138:	e000ed00 	.word	0xe000ed00
    113c:	40000400 	.word	0x40000400

00001140 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1140:	4b06      	ldr	r3, [pc, #24]	; (115c <_pm_init+0x1c>)
    1142:	7a1a      	ldrb	r2, [r3, #8]
    1144:	b2d2      	uxtb	r2, r2
    1146:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1148:	7a5a      	ldrb	r2, [r3, #9]
    114a:	b2d2      	uxtb	r2, r2
    114c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    114e:	7a9a      	ldrb	r2, [r3, #10]
    1150:	b2d2      	uxtb	r2, r2
    1152:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1154:	7ada      	ldrb	r2, [r3, #11]
    1156:	b2d2      	uxtb	r2, r2
    1158:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    115a:	4770      	bx	lr
    115c:	40000400 	.word	0x40000400

00001160 <_calendar_register_callback>:

/**
 * \brief Registers callback for the specified callback type
 */
int32_t _calendar_register_callback(struct calendar_dev *const dev, calendar_drv_cb_alarm_t callback)
{
    1160:	b570      	push	{r4, r5, r6, lr}
    1162:	0004      	movs	r4, r0
    1164:	000d      	movs	r5, r1
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1166:	2800      	cmp	r0, #0
    1168:	d015      	beq.n	1196 <_calendar_register_callback+0x36>
    116a:	6800      	ldr	r0, [r0, #0]
    116c:	1e43      	subs	r3, r0, #1
    116e:	4198      	sbcs	r0, r3
    1170:	b2c0      	uxtb	r0, r0
    1172:	2233      	movs	r2, #51	; 0x33
    1174:	490f      	ldr	r1, [pc, #60]	; (11b4 <_calendar_register_callback+0x54>)
    1176:	4b10      	ldr	r3, [pc, #64]	; (11b8 <_calendar_register_callback+0x58>)
    1178:	4798      	blx	r3

	/* Check callback */
	if (callback != NULL) {
    117a:	2d00      	cmp	r5, #0
    117c:	d00d      	beq.n	119a <_calendar_register_callback+0x3a>
		/* register the callback */
		dev->callback = callback;
    117e:	6065      	str	r5, [r4, #4]
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1180:	4b0e      	ldr	r3, [pc, #56]	; (11bc <_calendar_register_callback+0x5c>)
    1182:	2208      	movs	r2, #8
    1184:	21c0      	movs	r1, #192	; 0xc0
    1186:	0049      	lsls	r1, r1, #1
    1188:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    118a:	601a      	str	r2, [r3, #0]
		/* enable RTC_IRQn */
		NVIC_ClearPendingIRQ(RTC_IRQn);
		NVIC_EnableIRQ(RTC_IRQn);

		/* enable cmp */
		hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    118c:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    118e:	3a07      	subs	r2, #7
    1190:	71da      	strb	r2, [r3, #7]
		/* disable RTC_IRQn */
		NVIC_DisableIRQ(RTC_IRQn);
	}

	return ERR_NONE;
}
    1192:	2000      	movs	r0, #0
    1194:	bd70      	pop	{r4, r5, r6, pc}
    1196:	2000      	movs	r0, #0
    1198:	e7eb      	b.n	1172 <_calendar_register_callback+0x12>
		hri_rtcmode0_clear_INTEN_CMP0_bit(dev->hw);
    119a:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_CMP0;
    119c:	2201      	movs	r2, #1
    119e:	719a      	strb	r2, [r3, #6]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11a0:	2108      	movs	r1, #8
    11a2:	2380      	movs	r3, #128	; 0x80
    11a4:	4a05      	ldr	r2, [pc, #20]	; (11bc <_calendar_register_callback+0x5c>)
    11a6:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    11a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    11ac:	f3bf 8f6f 	isb	sy
    11b0:	e7ef      	b.n	1192 <_calendar_register_callback+0x32>
    11b2:	46c0      	nop			; (mov r8, r8)
    11b4:	00002b5c 	.word	0x00002b5c
    11b8:	00000d81 	.word	0x00000d81
    11bc:	e000e100 	.word	0xe000e100

000011c0 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    11c0:	b510      	push	{r4, lr}
    11c2:	1e04      	subs	r4, r0, #0
	uint16_t register_value;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    11c4:	d036      	beq.n	1234 <_calendar_init+0x74>
    11c6:	6800      	ldr	r0, [r0, #0]
    11c8:	1e43      	subs	r3, r0, #1
    11ca:	4198      	sbcs	r0, r3
    11cc:	b2c0      	uxtb	r0, r0
    11ce:	2278      	movs	r2, #120	; 0x78
    11d0:	4919      	ldr	r1, [pc, #100]	; (1238 <_calendar_init+0x78>)
    11d2:	4b1a      	ldr	r3, [pc, #104]	; (123c <_calendar_init+0x7c>)
    11d4:	4798      	blx	r3

	_rtc_dev = dev;
    11d6:	4b1a      	ldr	r3, [pc, #104]	; (1240 <_calendar_init+0x80>)
    11d8:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw);
    11da:	6822      	ldr	r2, [r4, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    11dc:	7a93      	ldrb	r3, [r2, #10]
    11de:	09db      	lsrs	r3, r3, #7
    11e0:	d1fc      	bne.n	11dc <_calendar_init+0x1c>
    11e2:	7a93      	ldrb	r3, [r2, #10]
    11e4:	09db      	lsrs	r3, r3, #7
    11e6:	d1fc      	bne.n	11e2 <_calendar_init+0x22>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
    11e8:	8813      	ldrh	r3, [r2, #0]
	if (hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw)) {
    11ea:	079b      	lsls	r3, r3, #30
    11ec:	d50a      	bpl.n	1204 <_calendar_init+0x44>
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    11ee:	8813      	ldrh	r3, [r2, #0]
    11f0:	2102      	movs	r1, #2
    11f2:	438b      	bics	r3, r1
    11f4:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    11f6:	7a93      	ldrb	r3, [r2, #10]
    11f8:	09db      	lsrs	r3, r3, #7
    11fa:	d1fc      	bne.n	11f6 <_calendar_init+0x36>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw);
    11fc:	6822      	ldr	r2, [r4, #0]
    11fe:	7a93      	ldrb	r3, [r2, #10]
    1200:	09db      	lsrs	r3, r3, #7
    1202:	d1fc      	bne.n	11fe <_calendar_init+0x3e>
#endif
	}
	hri_rtcmode0_set_CTRL_SWRST_bit(dev->hw);
    1204:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    1206:	8813      	ldrh	r3, [r2, #0]
    1208:	2101      	movs	r1, #1
    120a:	430b      	orrs	r3, r1
    120c:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    120e:	7a93      	ldrb	r3, [r2, #10]
    1210:	09db      	lsrs	r3, r3, #7
    1212:	d1fc      	bne.n	120e <_calendar_init+0x4e>
	hri_rtcmode0_wait_for_sync(dev->hw);
    1214:	6822      	ldr	r2, [r4, #0]
    1216:	7a93      	ldrb	r3, [r2, #10]
    1218:	09db      	lsrs	r3, r3, #7
    121a:	d1fc      	bne.n	1216 <_calendar_init+0x56>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    121c:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    121e:	7a93      	ldrb	r3, [r2, #10]
    1220:	09db      	lsrs	r3, r3, #7
    1222:	d1fc      	bne.n	121e <_calendar_init+0x5e>
	register_value &= (~RTC_MODE0_CTRL_MATCHCLR);

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	/* set continuously clock read update mode */
	hri_rtcmode0_set_READREQ_RCONT_bit(dev->hw);
    1224:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    1226:	8853      	ldrh	r3, [r2, #2]
    1228:	2180      	movs	r1, #128	; 0x80
    122a:	01c9      	lsls	r1, r1, #7
    122c:	430b      	orrs	r3, r1
    122e:	8053      	strh	r3, [r2, #2]
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	return ERR_NONE;
}
    1230:	2000      	movs	r0, #0
    1232:	bd10      	pop	{r4, pc}
    1234:	2000      	movs	r0, #0
    1236:	e7ca      	b.n	11ce <_calendar_init+0xe>
    1238:	00002b5c 	.word	0x00002b5c
    123c:	00000d81 	.word	0x00000d81
    1240:	200000e0 	.word	0x200000e0

00001244 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    1244:	b510      	push	{r4, lr}
    1246:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1248:	d011      	beq.n	126e <_calendar_enable+0x2a>
    124a:	6800      	ldr	r0, [r0, #0]
    124c:	1e43      	subs	r3, r0, #1
    124e:	4198      	sbcs	r0, r3
    1250:	b2c0      	uxtb	r0, r0
    1252:	22aa      	movs	r2, #170	; 0xaa
    1254:	4907      	ldr	r1, [pc, #28]	; (1274 <_calendar_enable+0x30>)
    1256:	4b08      	ldr	r3, [pc, #32]	; (1278 <_calendar_enable+0x34>)
    1258:	4798      	blx	r3

	/* Enable rtc */
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
    125a:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    125c:	8813      	ldrh	r3, [r2, #0]
    125e:	2102      	movs	r1, #2
    1260:	430b      	orrs	r3, r1
    1262:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1264:	7a93      	ldrb	r3, [r2, #10]
    1266:	09db      	lsrs	r3, r3, #7
    1268:	d1fc      	bne.n	1264 <_calendar_enable+0x20>

	return ERR_NONE;
}
    126a:	2000      	movs	r0, #0
    126c:	bd10      	pop	{r4, pc}
    126e:	2000      	movs	r0, #0
    1270:	e7ef      	b.n	1252 <_calendar_enable+0xe>
    1272:	46c0      	nop			; (mov r8, r8)
    1274:	00002b5c 	.word	0x00002b5c
    1278:	00000d81 	.word	0x00000d81

0000127c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    127c:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
    127e:	4b07      	ldr	r3, [pc, #28]	; (129c <RTC_Handler+0x20>)
    1280:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1282:	6823      	ldr	r3, [r4, #0]
    1284:	7a1b      	ldrb	r3, [r3, #8]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
    1286:	07db      	lsls	r3, r3, #31
    1288:	d400      	bmi.n	128c <RTC_Handler+0x10>
}
    128a:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    128c:	0020      	movs	r0, r4
    128e:	6863      	ldr	r3, [r4, #4]
    1290:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1292:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    1294:	2201      	movs	r2, #1
    1296:	721a      	strb	r2, [r3, #8]
}
    1298:	e7f7      	b.n	128a <RTC_Handler+0xe>
    129a:	46c0      	nop			; (mov r8, r8)
    129c:	200000e0 	.word	0x200000e0

000012a0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    12a0:	b510      	push	{r4, lr}
    12a2:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    12a4:	4b1f      	ldr	r3, [pc, #124]	; (1324 <_usart_init+0x84>)
    12a6:	18c3      	adds	r3, r0, r3
    12a8:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    12aa:	b2db      	uxtb	r3, r3
    12ac:	2b03      	cmp	r3, #3
    12ae:	d004      	beq.n	12ba <_usart_init+0x1a>
	ASSERT(false);
    12b0:	4a1d      	ldr	r2, [pc, #116]	; (1328 <_usart_init+0x88>)
    12b2:	491e      	ldr	r1, [pc, #120]	; (132c <_usart_init+0x8c>)
    12b4:	2000      	movs	r0, #0
    12b6:	4b1e      	ldr	r3, [pc, #120]	; (1330 <_usart_init+0x90>)
    12b8:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    12ba:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    12bc:	07db      	lsls	r3, r3, #31
    12be:	d418      	bmi.n	12f2 <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12c0:	2203      	movs	r2, #3
    12c2:	69e3      	ldr	r3, [r4, #28]
    12c4:	421a      	tst	r2, r3
    12c6:	d1fc      	bne.n	12c2 <_usart_init+0x22>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    12c8:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    12ca:	079b      	lsls	r3, r3, #30
    12cc:	d50b      	bpl.n	12e6 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    12ce:	6823      	ldr	r3, [r4, #0]
    12d0:	2202      	movs	r2, #2
    12d2:	4393      	bics	r3, r2
    12d4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12d6:	3201      	adds	r2, #1
    12d8:	69e3      	ldr	r3, [r4, #28]
    12da:	421a      	tst	r2, r3
    12dc:	d1fc      	bne.n	12d8 <_usart_init+0x38>
    12de:	2202      	movs	r2, #2
    12e0:	69e3      	ldr	r3, [r4, #28]
    12e2:	421a      	tst	r2, r3
    12e4:	d1fc      	bne.n	12e0 <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    12e6:	2305      	movs	r3, #5
    12e8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12ea:	2203      	movs	r2, #3
    12ec:	69e3      	ldr	r3, [r4, #28]
    12ee:	421a      	tst	r2, r3
    12f0:	d1fc      	bne.n	12ec <_usart_init+0x4c>
    12f2:	2201      	movs	r2, #1
    12f4:	69e3      	ldr	r3, [r4, #28]
    12f6:	421a      	tst	r2, r3
    12f8:	d1fc      	bne.n	12f4 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    12fa:	4b0e      	ldr	r3, [pc, #56]	; (1334 <_usart_init+0x94>)
    12fc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12fe:	2203      	movs	r2, #3
    1300:	69e3      	ldr	r3, [r4, #28]
    1302:	421a      	tst	r2, r3
    1304:	d1fc      	bne.n	1300 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1306:	23c0      	movs	r3, #192	; 0xc0
    1308:	029b      	lsls	r3, r3, #10
    130a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    130c:	2207      	movs	r2, #7
    130e:	69e3      	ldr	r3, [r4, #28]
    1310:	421a      	tst	r2, r3
    1312:	d1fc      	bne.n	130e <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1314:	4b08      	ldr	r3, [pc, #32]	; (1338 <_usart_init+0x98>)
    1316:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1318:	2300      	movs	r3, #0
    131a:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    131c:	2230      	movs	r2, #48	; 0x30
    131e:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    1320:	2000      	movs	r0, #0
    1322:	bd10      	pop	{r4, pc}
    1324:	bdfff800 	.word	0xbdfff800
    1328:	0000025e 	.word	0x0000025e
    132c:	00002b74 	.word	0x00002b74
    1330:	00000d81 	.word	0x00000d81
    1334:	40100004 	.word	0x40100004
    1338:	ffffc504 	.word	0xffffc504

0000133c <_usart_async_init>:
{
    133c:	b570      	push	{r4, r5, r6, lr}
    133e:	0005      	movs	r5, r0
    1340:	000c      	movs	r4, r1
	ASSERT(device);
    1342:	1e43      	subs	r3, r0, #1
    1344:	4198      	sbcs	r0, r3
    1346:	b2c0      	uxtb	r0, r0
    1348:	22c4      	movs	r2, #196	; 0xc4
    134a:	4914      	ldr	r1, [pc, #80]	; (139c <_usart_async_init+0x60>)
    134c:	4b14      	ldr	r3, [pc, #80]	; (13a0 <_usart_async_init+0x64>)
    134e:	4798      	blx	r3
	init_status = _usart_init(hw);
    1350:	0020      	movs	r0, r4
    1352:	4b14      	ldr	r3, [pc, #80]	; (13a4 <_usart_async_init+0x68>)
    1354:	4798      	blx	r3
	if (init_status) {
    1356:	2800      	cmp	r0, #0
    1358:	d000      	beq.n	135c <_usart_async_init+0x20>
}
    135a:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    135c:	61ac      	str	r4, [r5, #24]
	if (hw == SERCOM3) {
    135e:	4b12      	ldr	r3, [pc, #72]	; (13a8 <_usart_async_init+0x6c>)
    1360:	429c      	cmp	r4, r3
    1362:	d017      	beq.n	1394 <_usart_async_init+0x58>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1364:	4b11      	ldr	r3, [pc, #68]	; (13ac <_usart_async_init+0x70>)
    1366:	469c      	mov	ip, r3
    1368:	4464      	add	r4, ip
    136a:	0aa4      	lsrs	r4, r4, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    136c:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
    136e:	b2e3      	uxtb	r3, r4
    1370:	0622      	lsls	r2, r4, #24
    1372:	d4f2      	bmi.n	135a <_usart_async_init+0x1e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1374:	221f      	movs	r2, #31
    1376:	401a      	ands	r2, r3
    1378:	2301      	movs	r3, #1
    137a:	4093      	lsls	r3, r2
    137c:	4a0c      	ldr	r2, [pc, #48]	; (13b0 <_usart_async_init+0x74>)
    137e:	2180      	movs	r1, #128	; 0x80
    1380:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1382:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1386:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    138a:	3101      	adds	r1, #1
    138c:	31ff      	adds	r1, #255	; 0xff
    138e:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1390:	6013      	str	r3, [r2, #0]
    1392:	e7e2      	b.n	135a <_usart_async_init+0x1e>
		_sercom3_dev = (struct _usart_async_device *)dev;
    1394:	4b07      	ldr	r3, [pc, #28]	; (13b4 <_usart_async_init+0x78>)
    1396:	601d      	str	r5, [r3, #0]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1398:	230c      	movs	r3, #12
    139a:	e7eb      	b.n	1374 <_usart_async_init+0x38>
    139c:	00002b74 	.word	0x00002b74
    13a0:	00000d81 	.word	0x00000d81
    13a4:	000012a1 	.word	0x000012a1
    13a8:	42001400 	.word	0x42001400
    13ac:	bdfff800 	.word	0xbdfff800
    13b0:	e000e100 	.word	0xe000e100
    13b4:	200000e4 	.word	0x200000e4

000013b8 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    13b8:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    13ba:	6813      	ldr	r3, [r2, #0]
    13bc:	2102      	movs	r1, #2
    13be:	430b      	orrs	r3, r1
    13c0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13c2:	3101      	adds	r1, #1
    13c4:	69d3      	ldr	r3, [r2, #28]
    13c6:	4219      	tst	r1, r3
    13c8:	d1fc      	bne.n	13c4 <_usart_async_enable+0xc>
}
    13ca:	4770      	bx	lr

000013cc <_usart_async_disable>:
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    13cc:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    13ce:	6813      	ldr	r3, [r2, #0]
    13d0:	2102      	movs	r1, #2
    13d2:	438b      	bics	r3, r1
    13d4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13d6:	3101      	adds	r1, #1
    13d8:	69d3      	ldr	r3, [r2, #28]
    13da:	4219      	tst	r1, r3
    13dc:	d1fc      	bne.n	13d8 <_usart_async_disable+0xc>
}
    13de:	4770      	bx	lr

000013e0 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    13e0:	6983      	ldr	r3, [r0, #24]
    13e2:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    13e4:	8519      	strh	r1, [r3, #40]	; 0x28
}
    13e6:	4770      	bx	lr

000013e8 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    13e8:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    13ea:	2201      	movs	r2, #1
    13ec:	759a      	strb	r2, [r3, #22]
}
    13ee:	4770      	bx	lr

000013f0 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    13f0:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    13f2:	2202      	movs	r2, #2
    13f4:	759a      	strb	r2, [r3, #22]
}
    13f6:	4770      	bx	lr

000013f8 <_usart_async_set_irq_state>:
{
    13f8:	b570      	push	{r4, r5, r6, lr}
    13fa:	0004      	movs	r4, r0
    13fc:	000d      	movs	r5, r1
    13fe:	0016      	movs	r6, r2
	ASSERT(device);
    1400:	1e43      	subs	r3, r0, #1
    1402:	4198      	sbcs	r0, r3
    1404:	b2c0      	uxtb	r0, r0
    1406:	4a16      	ldr	r2, [pc, #88]	; (1460 <_usart_async_set_irq_state+0x68>)
    1408:	4916      	ldr	r1, [pc, #88]	; (1464 <_usart_async_set_irq_state+0x6c>)
    140a:	4b17      	ldr	r3, [pc, #92]	; (1468 <_usart_async_set_irq_state+0x70>)
    140c:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    140e:	2302      	movs	r3, #2
    1410:	002a      	movs	r2, r5
    1412:	439a      	bics	r2, r3
    1414:	d10e      	bne.n	1434 <_usart_async_set_irq_state+0x3c>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1416:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1418:	2e00      	cmp	r6, #0
    141a:	d105      	bne.n	1428 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    141c:	2201      	movs	r2, #1
    141e:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1420:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1422:	3201      	adds	r2, #1
    1424:	751a      	strb	r2, [r3, #20]
}
    1426:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1428:	2201      	movs	r2, #1
    142a:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    142c:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    142e:	3201      	adds	r2, #1
    1430:	759a      	strb	r2, [r3, #22]
    1432:	e7f8      	b.n	1426 <_usart_async_set_irq_state+0x2e>
	} else if (USART_ASYNC_RX_DONE == type) {
    1434:	2d01      	cmp	r5, #1
    1436:	d007      	beq.n	1448 <_usart_async_set_irq_state+0x50>
	} else if (USART_ASYNC_ERROR == type) {
    1438:	2d03      	cmp	r5, #3
    143a:	d1f4      	bne.n	1426 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    143c:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    143e:	2e00      	cmp	r6, #0
    1440:	d00b      	beq.n	145a <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    1442:	2280      	movs	r2, #128	; 0x80
    1444:	759a      	strb	r2, [r3, #22]
}
    1446:	e7ee      	b.n	1426 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    1448:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    144a:	2e00      	cmp	r6, #0
    144c:	d102      	bne.n	1454 <_usart_async_set_irq_state+0x5c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    144e:	2204      	movs	r2, #4
    1450:	751a      	strb	r2, [r3, #20]
    1452:	e7e8      	b.n	1426 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    1454:	2204      	movs	r2, #4
    1456:	759a      	strb	r2, [r3, #22]
    1458:	e7e5      	b.n	1426 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    145a:	2280      	movs	r2, #128	; 0x80
    145c:	751a      	strb	r2, [r3, #20]
    145e:	e7e2      	b.n	1426 <_usart_async_set_irq_state+0x2e>
    1460:	0000021e 	.word	0x0000021e
    1464:	00002b74 	.word	0x00002b74
    1468:	00000d81 	.word	0x00000d81

0000146c <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    146c:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    146e:	4b19      	ldr	r3, [pc, #100]	; (14d4 <SERCOM3_Handler+0x68>)
    1470:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
    1472:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1474:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1476:	07db      	lsls	r3, r3, #31
    1478:	d502      	bpl.n	1480 <SERCOM3_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    147a:	7da3      	ldrb	r3, [r4, #22]
    147c:	07db      	lsls	r3, r3, #31
    147e:	d40f      	bmi.n	14a0 <SERCOM3_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1480:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1482:	079b      	lsls	r3, r3, #30
    1484:	d502      	bpl.n	148c <SERCOM3_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1486:	7da3      	ldrb	r3, [r4, #22]
    1488:	079b      	lsls	r3, r3, #30
    148a:	d40e      	bmi.n	14aa <SERCOM3_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    148c:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    148e:	075b      	lsls	r3, r3, #29
    1490:	d515      	bpl.n	14be <SERCOM3_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    1492:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    1494:	2337      	movs	r3, #55	; 0x37
    1496:	421a      	tst	r2, r3
    1498:	d00c      	beq.n	14b4 <SERCOM3_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    149a:	3308      	adds	r3, #8
    149c:	8363      	strh	r3, [r4, #26]
}
    149e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    14a0:	2301      	movs	r3, #1
    14a2:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    14a4:	6803      	ldr	r3, [r0, #0]
    14a6:	4798      	blx	r3
    14a8:	e7f9      	b.n	149e <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    14aa:	2302      	movs	r3, #2
    14ac:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    14ae:	6883      	ldr	r3, [r0, #8]
    14b0:	4798      	blx	r3
    14b2:	e7f4      	b.n	149e <SERCOM3_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
    14b4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    14b6:	b2c9      	uxtb	r1, r1
    14b8:	6843      	ldr	r3, [r0, #4]
    14ba:	4798      	blx	r3
    14bc:	e7ef      	b.n	149e <SERCOM3_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    14be:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    14c0:	09db      	lsrs	r3, r3, #7
    14c2:	d0ec      	beq.n	149e <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    14c4:	2380      	movs	r3, #128	; 0x80
    14c6:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    14c8:	68c3      	ldr	r3, [r0, #12]
    14ca:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    14cc:	8b63      	ldrh	r3, [r4, #26]
    14ce:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    14d0:	8363      	strh	r3, [r4, #26]
}
    14d2:	e7e4      	b.n	149e <SERCOM3_Handler+0x32>
    14d4:	200000e4 	.word	0x200000e4

000014d8 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    14d8:	4b0e      	ldr	r3, [pc, #56]	; (1514 <_sysctrl_init_sources+0x3c>)
    14da:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    14dc:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    14de:	480e      	ldr	r0, [pc, #56]	; (1518 <_sysctrl_init_sources+0x40>)
    14e0:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    14e2:	0f92      	lsrs	r2, r2, #30
    14e4:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    14e6:	2002      	movs	r0, #2
    14e8:	4302      	orrs	r2, r0
    14ea:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    14ec:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    14ee:	699a      	ldr	r2, [r3, #24]
    14f0:	4302      	orrs	r2, r0
    14f2:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    14f4:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    14f6:	211f      	movs	r1, #31
    14f8:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    14fa:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    14fc:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    14fe:	2208      	movs	r2, #8
    1500:	68cb      	ldr	r3, [r1, #12]
    1502:	421a      	tst	r2, r3
    1504:	d0fc      	beq.n	1500 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1506:	4a03      	ldr	r2, [pc, #12]	; (1514 <_sysctrl_init_sources+0x3c>)
    1508:	6a13      	ldr	r3, [r2, #32]
    150a:	2180      	movs	r1, #128	; 0x80
    150c:	430b      	orrs	r3, r1
    150e:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1510:	4770      	bx	lr
    1512:	46c0      	nop			; (mov r8, r8)
    1514:	40000800 	.word	0x40000800
    1518:	0fff0000 	.word	0x0fff0000

0000151c <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    151c:	4a02      	ldr	r2, [pc, #8]	; (1528 <_sysctrl_init_referenced_generators+0xc>)
    151e:	6993      	ldr	r3, [r2, #24]
    1520:	2102      	movs	r1, #2
    1522:	438b      	bics	r3, r1
    1524:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1526:	4770      	bx	lr
    1528:	40000800 	.word	0x40000800

0000152c <idle_task_fn>:
}

// =============================================================================
// local (static) code

static void *idle_task_fn(void *ctx, void *arg) {
    152c:	b510      	push	{r4, lr}
  // ctx is unused in idle task
  // scheduler is passed as the second argument.
  mu_sched_t *sched = (mu_sched_t *)arg;
  mu_sched_event_t *next_event = mu_sched_get_next_event(sched);
    152e:	0008      	movs	r0, r1
    1530:	4b0a      	ldr	r3, [pc, #40]	; (155c <idle_task_fn+0x30>)
    1532:	4798      	blx	r3
    1534:	0004      	movs	r4, r0
}

static void will_sleep(void) {
  // If you have any last-moment cleanup that needs to be done before the
  // processor goes to sleep, you would do it here.
  usart_async_disable(&USART_0);
    1536:	480a      	ldr	r0, [pc, #40]	; (1560 <idle_task_fn+0x34>)
    1538:	4b0a      	ldr	r3, [pc, #40]	; (1564 <idle_task_fn+0x38>)
    153a:	4798      	blx	r3
  asm("nop");
    153c:	46c0      	nop			; (mov r8, r8)
    if (next_event) {
    153e:	2c00      	cmp	r4, #0
    1540:	d008      	beq.n	1554 <idle_task_fn+0x28>
      mu_vm_sleep_until(next_event->time);
    1542:	6820      	ldr	r0, [r4, #0]
    1544:	4b08      	ldr	r3, [pc, #32]	; (1568 <idle_task_fn+0x3c>)
    1546:	4798      	blx	r3
}

static void did_wake(void) {
  // If you have anything that needs to be done when the processor wakes from
  // sleep, you would do it here.
  usart_async_enable(&USART_0);
    1548:	4805      	ldr	r0, [pc, #20]	; (1560 <idle_task_fn+0x34>)
    154a:	4b08      	ldr	r3, [pc, #32]	; (156c <idle_task_fn+0x40>)
    154c:	4798      	blx	r3
  asm("nop");
    154e:	46c0      	nop			; (mov r8, r8)
}
    1550:	2000      	movs	r0, #0
    1552:	bd10      	pop	{r4, pc}
      mu_vm_sleep();
    1554:	4b06      	ldr	r3, [pc, #24]	; (1570 <idle_task_fn+0x44>)
    1556:	4798      	blx	r3
    1558:	e7f6      	b.n	1548 <idle_task_fn+0x1c>
    155a:	46c0      	nop			; (mov r8, r8)
    155c:	00000209 	.word	0x00000209
    1560:	20000204 	.word	0x20000204
    1564:	00000d55 	.word	0x00000d55
    1568:	00000695 	.word	0x00000695
    156c:	00000d29 	.word	0x00000d29
    1570:	000006c9 	.word	0x000006c9

00001574 <idle_task_init>:
mu_task_t *idle_task_init(mu_task_t *idle_task, mu_sched_t *sched) {
    1574:	b570      	push	{r4, r5, r6, lr}
    1576:	0004      	movs	r4, r0
    1578:	000d      	movs	r5, r1
  mu_task_init(idle_task, idle_task_fn, NULL, "Sleeping Idle");
    157a:	4b05      	ldr	r3, [pc, #20]	; (1590 <idle_task_init+0x1c>)
    157c:	2200      	movs	r2, #0
    157e:	4905      	ldr	r1, [pc, #20]	; (1594 <idle_task_init+0x20>)
    1580:	4e05      	ldr	r6, [pc, #20]	; (1598 <idle_task_init+0x24>)
    1582:	47b0      	blx	r6
  mu_sched_set_idle_task(sched, idle_task);
    1584:	0021      	movs	r1, r4
    1586:	0028      	movs	r0, r5
    1588:	4b04      	ldr	r3, [pc, #16]	; (159c <idle_task_init+0x28>)
    158a:	4798      	blx	r3
}
    158c:	0020      	movs	r0, r4
    158e:	bd70      	pop	{r4, r5, r6, pc}
    1590:	00002b90 	.word	0x00002b90
    1594:	0000152d 	.word	0x0000152d
    1598:	000003b3 	.word	0x000003b3
    159c:	000001fd 	.word	0x000001fd

000015a0 <mulib_slinky_init>:
// ... no context required

// =============================================================================
// public code

void mulib_slinky_init() {
    15a0:	b570      	push	{r4, r5, r6, lr}
  // initialize the port-specific interface
  mu_vm_init();
    15a2:	4b19      	ldr	r3, [pc, #100]	; (1608 <mulib_slinky_init+0x68>)
    15a4:	4798      	blx	r3

  printf("\r\n\r\n# ===========\r\n");
    15a6:	4819      	ldr	r0, [pc, #100]	; (160c <mulib_slinky_init+0x6c>)
    15a8:	4b19      	ldr	r3, [pc, #100]	; (1610 <mulib_slinky_init+0x70>)
    15aa:	4798      	blx	r3
  printf("# mulib_slinky %s: see https://github.com/rdpoor/mulib\r\n",
    15ac:	4919      	ldr	r1, [pc, #100]	; (1614 <mulib_slinky_init+0x74>)
    15ae:	481a      	ldr	r0, [pc, #104]	; (1618 <mulib_slinky_init+0x78>)
    15b0:	4b1a      	ldr	r3, [pc, #104]	; (161c <mulib_slinky_init+0x7c>)
    15b2:	4798      	blx	r3
         MULIB_SLINKY_VERSION);

  // set up the isr queue and the scheduler
  mu_spscq_init(&s_isr_queue, s_isr_queue_items, ISR_Q_CAPACITY);
    15b4:	4c1a      	ldr	r4, [pc, #104]	; (1620 <mulib_slinky_init+0x80>)
    15b6:	0025      	movs	r5, r4
    15b8:	3520      	adds	r5, #32
    15ba:	2208      	movs	r2, #8
    15bc:	0021      	movs	r1, r4
    15be:	0028      	movs	r0, r5
    15c0:	4b18      	ldr	r3, [pc, #96]	; (1624 <mulib_slinky_init+0x84>)
    15c2:	4798      	blx	r3
  mu_sched_init(&s_sched, s_event_queue, EVENT_QUEUE_CAPACITY, &s_isr_queue);
    15c4:	0021      	movs	r1, r4
    15c6:	312c      	adds	r1, #44	; 0x2c
    15c8:	347c      	adds	r4, #124	; 0x7c
    15ca:	002b      	movs	r3, r5
    15cc:	220a      	movs	r2, #10
    15ce:	0020      	movs	r0, r4
    15d0:	4d15      	ldr	r5, [pc, #84]	; (1628 <mulib_slinky_init+0x88>)
    15d2:	47a8      	blx	r5

  // initialize tasks
  led_task_init(&s_led_task, &s_led_ctx);
    15d4:	4d15      	ldr	r5, [pc, #84]	; (162c <mulib_slinky_init+0x8c>)
    15d6:	0029      	movs	r1, r5
    15d8:	311c      	adds	r1, #28
    15da:	002e      	movs	r6, r5
    15dc:	3620      	adds	r6, #32
    15de:	0030      	movs	r0, r6
    15e0:	4b13      	ldr	r3, [pc, #76]	; (1630 <mulib_slinky_init+0x90>)
    15e2:	4798      	blx	r3
  button_task_init(&s_button_task, &s_button_ctx, &s_sched);
    15e4:	0029      	movs	r1, r5
    15e6:	3138      	adds	r1, #56	; 0x38
    15e8:	0028      	movs	r0, r5
    15ea:	3040      	adds	r0, #64	; 0x40
    15ec:	0022      	movs	r2, r4
    15ee:	4b11      	ldr	r3, [pc, #68]	; (1634 <mulib_slinky_init+0x94>)
    15f0:	4798      	blx	r3
  idle_task_init(&s_idle_task, &s_sched);
    15f2:	0028      	movs	r0, r5
    15f4:	3058      	adds	r0, #88	; 0x58
    15f6:	0021      	movs	r1, r4
    15f8:	4b0f      	ldr	r3, [pc, #60]	; (1638 <mulib_slinky_init+0x98>)
    15fa:	4798      	blx	r3

  // schedule the initial call to the LED task
  mu_sched_task_now(&s_sched, &s_led_task);
    15fc:	0031      	movs	r1, r6
    15fe:	0020      	movs	r0, r4
    1600:	4b0e      	ldr	r3, [pc, #56]	; (163c <mulib_slinky_init+0x9c>)
    1602:	4798      	blx	r3
}
    1604:	bd70      	pop	{r4, r5, r6, pc}
    1606:	46c0      	nop			; (mov r8, r8)
    1608:	000004d1 	.word	0x000004d1
    160c:	00002ba0 	.word	0x00002ba0
    1610:	00001c91 	.word	0x00001c91
    1614:	00002bb4 	.word	0x00002bb4
    1618:	00002bbc 	.word	0x00002bbc
    161c:	00001b9d 	.word	0x00001b9d
    1620:	200000e8 	.word	0x200000e8
    1624:	0000031d 	.word	0x0000031d
    1628:	000001c1 	.word	0x000001c1
    162c:	20000168 	.word	0x20000168
    1630:	0000171d 	.word	0x0000171d
    1634:	0000168d 	.word	0x0000168d
    1638:	00001575 	.word	0x00001575
    163c:	000002b1 	.word	0x000002b1

00001640 <mulib_slinky_step>:

void mulib_slinky_step() {
    1640:	b510      	push	{r4, lr}
  // called repeatedly from main(): run the scheduler
  mu_sched_step(&s_sched);
    1642:	4802      	ldr	r0, [pc, #8]	; (164c <mulib_slinky_step+0xc>)
    1644:	307c      	adds	r0, #124	; 0x7c
    1646:	4b02      	ldr	r3, [pc, #8]	; (1650 <mulib_slinky_step+0x10>)
    1648:	4798      	blx	r3
}
    164a:	bd10      	pop	{r4, pc}
    164c:	200000e8 	.word	0x200000e8
    1650:	00000225 	.word	0x00000225

00001654 <button_task_fn>:
}

// =============================================================================
// local (static) code

static void *button_task_fn(void *ctx, void *arg) {
    1654:	b510      	push	{r4, lr}
  // button context (unused) is passed as first arg, scheduler as second.
  mu_sched_t *sched = (mu_sched_t *)arg;
  mu_time_t now = mu_sched_get_current_time(sched);
    1656:	0008      	movs	r0, r1
    1658:	4b03      	ldr	r3, [pc, #12]	; (1668 <button_task_fn+0x14>)
    165a:	4798      	blx	r3
    165c:	0001      	movs	r1, r0

  printf("button pressed at %lu\r\n", now);
    165e:	4803      	ldr	r0, [pc, #12]	; (166c <button_task_fn+0x18>)
    1660:	4b03      	ldr	r3, [pc, #12]	; (1670 <button_task_fn+0x1c>)
    1662:	4798      	blx	r3
  return NULL;
}
    1664:	2000      	movs	r0, #0
    1666:	bd10      	pop	{r4, pc}
    1668:	00000201 	.word	0x00000201
    166c:	00002bf8 	.word	0x00002bf8
    1670:	00001b9d 	.word	0x00001b9d

00001674 <button_cb>:

// button_cb is triggered when a button press generates an interrupt.
// From interrupt level, schedule the button task upon leaving interrupt level.
static void button_cb(void) {
    1674:	b510      	push	{r4, lr}
  mu_sched_task_from_isr(s_sched, s_button_task);
    1676:	4b03      	ldr	r3, [pc, #12]	; (1684 <button_cb+0x10>)
    1678:	6819      	ldr	r1, [r3, #0]
    167a:	6858      	ldr	r0, [r3, #4]
    167c:	4b02      	ldr	r3, [pc, #8]	; (1688 <button_cb+0x14>)
    167e:	4798      	blx	r3
}
    1680:	bd10      	pop	{r4, pc}
    1682:	46c0      	nop			; (mov r8, r8)
    1684:	200001d8 	.word	0x200001d8
    1688:	00000305 	.word	0x00000305

0000168c <button_task_init>:
                            mu_sched_t *sched) {
    168c:	b570      	push	{r4, r5, r6, lr}
    168e:	0004      	movs	r4, r0
  s_button_task = button_task;
    1690:	4b07      	ldr	r3, [pc, #28]	; (16b0 <button_task_init+0x24>)
    1692:	6018      	str	r0, [r3, #0]
  s_sched = sched;
    1694:	605a      	str	r2, [r3, #4]
  ext_irq_register(PIN_PA15, button_cb);
    1696:	4907      	ldr	r1, [pc, #28]	; (16b4 <button_task_init+0x28>)
    1698:	200f      	movs	r0, #15
    169a:	4b07      	ldr	r3, [pc, #28]	; (16b8 <button_task_init+0x2c>)
    169c:	4798      	blx	r3
  mu_task_init(button_task, button_task_fn, NULL, "Button Interrupt");
    169e:	4b07      	ldr	r3, [pc, #28]	; (16bc <button_task_init+0x30>)
    16a0:	2200      	movs	r2, #0
    16a2:	4907      	ldr	r1, [pc, #28]	; (16c0 <button_task_init+0x34>)
    16a4:	0020      	movs	r0, r4
    16a6:	4d07      	ldr	r5, [pc, #28]	; (16c4 <button_task_init+0x38>)
    16a8:	47a8      	blx	r5
}
    16aa:	0020      	movs	r0, r4
    16ac:	bd70      	pop	{r4, r5, r6, pc}
    16ae:	46c0      	nop			; (mov r8, r8)
    16b0:	200001d8 	.word	0x200001d8
    16b4:	00001675 	.word	0x00001675
    16b8:	00000a65 	.word	0x00000a65
    16bc:	00002c10 	.word	0x00002c10
    16c0:	00001655 	.word	0x00001655
    16c4:	000003b3 	.word	0x000003b3

000016c8 <led_task_fn>:
}

// =============================================================================
// local (static) code

static void *led_task_fn(void *ctx, void *arg) {
    16c8:	b570      	push	{r4, r5, r6, lr}
    16ca:	0004      	movs	r4, r0
    16cc:	000d      	movs	r5, r1
  // "context" is passed as the first argument, scheduler is second
  led_ctx_t *led_ctx = (led_ctx_t *)ctx;
  mu_sched_t *sched = (mu_sched_t *)arg;

  if (led_ctx->state == LED_OFF) {
    16ce:	7803      	ldrb	r3, [r0, #0]
    16d0:	2b00      	cmp	r3, #0
    16d2:	d00d      	beq.n	16f0 <led_task_fn+0x28>
    mu_vm_led_set(true);
    led_ctx->state = LED_ON;
    mu_sched_reschedule_in(sched, mu_time_ms_to_duration(LED_ON_TIME_MS));

  } else {
    mu_vm_led_set(false);
    16d4:	2000      	movs	r0, #0
    16d6:	4b0d      	ldr	r3, [pc, #52]	; (170c <led_task_fn+0x44>)
    16d8:	4798      	blx	r3
    led_ctx->state = LED_OFF;
    16da:	2300      	movs	r3, #0
    16dc:	7023      	strb	r3, [r4, #0]
    mu_sched_reschedule_in(sched, mu_time_ms_to_duration(LED_OFF_TIME_MS));
    16de:	480c      	ldr	r0, [pc, #48]	; (1710 <led_task_fn+0x48>)
    16e0:	4b0c      	ldr	r3, [pc, #48]	; (1714 <led_task_fn+0x4c>)
    16e2:	4798      	blx	r3
    16e4:	0001      	movs	r1, r0
    16e6:	0028      	movs	r0, r5
    16e8:	4b0b      	ldr	r3, [pc, #44]	; (1718 <led_task_fn+0x50>)
    16ea:	4798      	blx	r3
  }
  return NULL;
}
    16ec:	2000      	movs	r0, #0
    16ee:	bd70      	pop	{r4, r5, r6, pc}
    mu_vm_led_set(true);
    16f0:	2001      	movs	r0, #1
    16f2:	4b06      	ldr	r3, [pc, #24]	; (170c <led_task_fn+0x44>)
    16f4:	4798      	blx	r3
    led_ctx->state = LED_ON;
    16f6:	2301      	movs	r3, #1
    16f8:	7023      	strb	r3, [r4, #0]
    mu_sched_reschedule_in(sched, mu_time_ms_to_duration(LED_ON_TIME_MS));
    16fa:	2005      	movs	r0, #5
    16fc:	4b05      	ldr	r3, [pc, #20]	; (1714 <led_task_fn+0x4c>)
    16fe:	4798      	blx	r3
    1700:	0001      	movs	r1, r0
    1702:	0028      	movs	r0, r5
    1704:	4b04      	ldr	r3, [pc, #16]	; (1718 <led_task_fn+0x50>)
    1706:	4798      	blx	r3
    1708:	e7f0      	b.n	16ec <led_task_fn+0x24>
    170a:	46c0      	nop			; (mov r8, r8)
    170c:	000005d5 	.word	0x000005d5
    1710:	000003e3 	.word	0x000003e3
    1714:	0000043d 	.word	0x0000043d
    1718:	000002d1 	.word	0x000002d1

0000171c <led_task_init>:
mu_task_t *led_task_init(mu_task_t *led_task, led_ctx_t *led_ctx) {
    171c:	b570      	push	{r4, r5, r6, lr}
    171e:	0004      	movs	r4, r0
    1720:	000a      	movs	r2, r1
  led_ctx->state = LED_OFF;
    1722:	2300      	movs	r3, #0
    1724:	700b      	strb	r3, [r1, #0]
  mu_task_init(led_task, led_task_fn, led_ctx, "LED");
    1726:	4b03      	ldr	r3, [pc, #12]	; (1734 <led_task_init+0x18>)
    1728:	4903      	ldr	r1, [pc, #12]	; (1738 <led_task_init+0x1c>)
    172a:	4d04      	ldr	r5, [pc, #16]	; (173c <led_task_init+0x20>)
    172c:	47a8      	blx	r5
}
    172e:	0020      	movs	r0, r4
    1730:	bd70      	pop	{r4, r5, r6, pc}
    1732:	46c0      	nop			; (mov r8, r8)
    1734:	00002c24 	.word	0x00002c24
    1738:	000016c9 	.word	0x000016c9
    173c:	000003b3 	.word	0x000003b3

00001740 <main>:

#include <atmel_start.h>
#include "mulib_slinky.h"

int main(void)
{
    1740:	b510      	push	{r4, lr}
  /* Initializes MCU, drivers and middleware */
  atmel_start_init();
    1742:	4b03      	ldr	r3, [pc, #12]	; (1750 <main+0x10>)
    1744:	4798      	blx	r3
  mulib_slinky_init();
    1746:	4b03      	ldr	r3, [pc, #12]	; (1754 <main+0x14>)
    1748:	4798      	blx	r3

  /* Replace with your application code */
  while (1) {
    mulib_slinky_step();
    174a:	4c03      	ldr	r4, [pc, #12]	; (1758 <main+0x18>)
    174c:	47a0      	blx	r4
    174e:	e7fd      	b.n	174c <main+0xc>
    1750:	000006e1 	.word	0x000006e1
    1754:	000015a1 	.word	0x000015a1
    1758:	00001641 	.word	0x00001641

0000175c <_write>:
#include "mu_vm.h"

// ================
// support for printf()

int _write(int file, char *ptr, int len) {
    175c:	b5f0      	push	{r4, r5, r6, r7, lr}
    175e:	46c6      	mov	lr, r8
    1760:	b500      	push	{lr}
    1762:	4690      	mov	r8, r2
  // void file;
  int n = len;

  while (n-- > 0) {
    1764:	2a00      	cmp	r2, #0
    1766:	dd0c      	ble.n	1782 <_write+0x26>
    1768:	000d      	movs	r5, r1
    176a:	4441      	add	r1, r8
    176c:	000e      	movs	r6, r1
    while (!mu_vm_serial_can_write())
    176e:	4c07      	ldr	r4, [pc, #28]	; (178c <_write+0x30>)
  		;
    mu_vm_serial_write(*ptr++);
    1770:	4f07      	ldr	r7, [pc, #28]	; (1790 <_write+0x34>)
    while (!mu_vm_serial_can_write())
    1772:	47a0      	blx	r4
    1774:	2800      	cmp	r0, #0
    1776:	d0fc      	beq.n	1772 <_write+0x16>
    mu_vm_serial_write(*ptr++);
    1778:	7828      	ldrb	r0, [r5, #0]
    177a:	47b8      	blx	r7
    177c:	3501      	adds	r5, #1
  while (n-- > 0) {
    177e:	42b5      	cmp	r5, r6
    1780:	d1f7      	bne.n	1772 <_write+0x16>
  }
  return len;
}
    1782:	4640      	mov	r0, r8
    1784:	bc04      	pop	{r2}
    1786:	4690      	mov	r8, r2
    1788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	000005f5 	.word	0x000005f5
    1790:	00000605 	.word	0x00000605

00001794 <_read>:

int _read(int file, char *ptr, int len) {
    1794:	b5f0      	push	{r4, r5, r6, r7, lr}
    1796:	46c6      	mov	lr, r8
    1798:	b500      	push	{lr}
    179a:	4690      	mov	r8, r2
  // void file;
  int n = len;

  while (n-- > 0) {
    179c:	2a00      	cmp	r2, #0
    179e:	dd0c      	ble.n	17ba <_read+0x26>
    17a0:	000d      	movs	r5, r1
    17a2:	4441      	add	r1, r8
    17a4:	000e      	movs	r6, r1
    while (!mu_vm_serial_can_read())
    17a6:	4c07      	ldr	r4, [pc, #28]	; (17c4 <_read+0x30>)
			;
    *ptr++ = mu_vm_serial_read();
    17a8:	4f07      	ldr	r7, [pc, #28]	; (17c8 <_read+0x34>)
    while (!mu_vm_serial_can_read())
    17aa:	47a0      	blx	r4
    17ac:	2800      	cmp	r0, #0
    17ae:	d0fc      	beq.n	17aa <_read+0x16>
    *ptr++ = mu_vm_serial_read();
    17b0:	47b8      	blx	r7
    17b2:	7028      	strb	r0, [r5, #0]
    17b4:	3501      	adds	r5, #1
  while (n-- > 0) {
    17b6:	42b5      	cmp	r5, r6
    17b8:	d1f7      	bne.n	17aa <_read+0x16>
  }
  return len;
}
    17ba:	4640      	mov	r0, r8
    17bc:	bc04      	pop	{r2}
    17be:	4690      	mov	r8, r2
    17c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17c2:	46c0      	nop			; (mov r8, r8)
    17c4:	00000685 	.word	0x00000685
    17c8:	00000645 	.word	0x00000645

000017cc <__udivsi3>:
    17cc:	2200      	movs	r2, #0
    17ce:	0843      	lsrs	r3, r0, #1
    17d0:	428b      	cmp	r3, r1
    17d2:	d374      	bcc.n	18be <__udivsi3+0xf2>
    17d4:	0903      	lsrs	r3, r0, #4
    17d6:	428b      	cmp	r3, r1
    17d8:	d35f      	bcc.n	189a <__udivsi3+0xce>
    17da:	0a03      	lsrs	r3, r0, #8
    17dc:	428b      	cmp	r3, r1
    17de:	d344      	bcc.n	186a <__udivsi3+0x9e>
    17e0:	0b03      	lsrs	r3, r0, #12
    17e2:	428b      	cmp	r3, r1
    17e4:	d328      	bcc.n	1838 <__udivsi3+0x6c>
    17e6:	0c03      	lsrs	r3, r0, #16
    17e8:	428b      	cmp	r3, r1
    17ea:	d30d      	bcc.n	1808 <__udivsi3+0x3c>
    17ec:	22ff      	movs	r2, #255	; 0xff
    17ee:	0209      	lsls	r1, r1, #8
    17f0:	ba12      	rev	r2, r2
    17f2:	0c03      	lsrs	r3, r0, #16
    17f4:	428b      	cmp	r3, r1
    17f6:	d302      	bcc.n	17fe <__udivsi3+0x32>
    17f8:	1212      	asrs	r2, r2, #8
    17fa:	0209      	lsls	r1, r1, #8
    17fc:	d065      	beq.n	18ca <__udivsi3+0xfe>
    17fe:	0b03      	lsrs	r3, r0, #12
    1800:	428b      	cmp	r3, r1
    1802:	d319      	bcc.n	1838 <__udivsi3+0x6c>
    1804:	e000      	b.n	1808 <__udivsi3+0x3c>
    1806:	0a09      	lsrs	r1, r1, #8
    1808:	0bc3      	lsrs	r3, r0, #15
    180a:	428b      	cmp	r3, r1
    180c:	d301      	bcc.n	1812 <__udivsi3+0x46>
    180e:	03cb      	lsls	r3, r1, #15
    1810:	1ac0      	subs	r0, r0, r3
    1812:	4152      	adcs	r2, r2
    1814:	0b83      	lsrs	r3, r0, #14
    1816:	428b      	cmp	r3, r1
    1818:	d301      	bcc.n	181e <__udivsi3+0x52>
    181a:	038b      	lsls	r3, r1, #14
    181c:	1ac0      	subs	r0, r0, r3
    181e:	4152      	adcs	r2, r2
    1820:	0b43      	lsrs	r3, r0, #13
    1822:	428b      	cmp	r3, r1
    1824:	d301      	bcc.n	182a <__udivsi3+0x5e>
    1826:	034b      	lsls	r3, r1, #13
    1828:	1ac0      	subs	r0, r0, r3
    182a:	4152      	adcs	r2, r2
    182c:	0b03      	lsrs	r3, r0, #12
    182e:	428b      	cmp	r3, r1
    1830:	d301      	bcc.n	1836 <__udivsi3+0x6a>
    1832:	030b      	lsls	r3, r1, #12
    1834:	1ac0      	subs	r0, r0, r3
    1836:	4152      	adcs	r2, r2
    1838:	0ac3      	lsrs	r3, r0, #11
    183a:	428b      	cmp	r3, r1
    183c:	d301      	bcc.n	1842 <__udivsi3+0x76>
    183e:	02cb      	lsls	r3, r1, #11
    1840:	1ac0      	subs	r0, r0, r3
    1842:	4152      	adcs	r2, r2
    1844:	0a83      	lsrs	r3, r0, #10
    1846:	428b      	cmp	r3, r1
    1848:	d301      	bcc.n	184e <__udivsi3+0x82>
    184a:	028b      	lsls	r3, r1, #10
    184c:	1ac0      	subs	r0, r0, r3
    184e:	4152      	adcs	r2, r2
    1850:	0a43      	lsrs	r3, r0, #9
    1852:	428b      	cmp	r3, r1
    1854:	d301      	bcc.n	185a <__udivsi3+0x8e>
    1856:	024b      	lsls	r3, r1, #9
    1858:	1ac0      	subs	r0, r0, r3
    185a:	4152      	adcs	r2, r2
    185c:	0a03      	lsrs	r3, r0, #8
    185e:	428b      	cmp	r3, r1
    1860:	d301      	bcc.n	1866 <__udivsi3+0x9a>
    1862:	020b      	lsls	r3, r1, #8
    1864:	1ac0      	subs	r0, r0, r3
    1866:	4152      	adcs	r2, r2
    1868:	d2cd      	bcs.n	1806 <__udivsi3+0x3a>
    186a:	09c3      	lsrs	r3, r0, #7
    186c:	428b      	cmp	r3, r1
    186e:	d301      	bcc.n	1874 <__udivsi3+0xa8>
    1870:	01cb      	lsls	r3, r1, #7
    1872:	1ac0      	subs	r0, r0, r3
    1874:	4152      	adcs	r2, r2
    1876:	0983      	lsrs	r3, r0, #6
    1878:	428b      	cmp	r3, r1
    187a:	d301      	bcc.n	1880 <__udivsi3+0xb4>
    187c:	018b      	lsls	r3, r1, #6
    187e:	1ac0      	subs	r0, r0, r3
    1880:	4152      	adcs	r2, r2
    1882:	0943      	lsrs	r3, r0, #5
    1884:	428b      	cmp	r3, r1
    1886:	d301      	bcc.n	188c <__udivsi3+0xc0>
    1888:	014b      	lsls	r3, r1, #5
    188a:	1ac0      	subs	r0, r0, r3
    188c:	4152      	adcs	r2, r2
    188e:	0903      	lsrs	r3, r0, #4
    1890:	428b      	cmp	r3, r1
    1892:	d301      	bcc.n	1898 <__udivsi3+0xcc>
    1894:	010b      	lsls	r3, r1, #4
    1896:	1ac0      	subs	r0, r0, r3
    1898:	4152      	adcs	r2, r2
    189a:	08c3      	lsrs	r3, r0, #3
    189c:	428b      	cmp	r3, r1
    189e:	d301      	bcc.n	18a4 <__udivsi3+0xd8>
    18a0:	00cb      	lsls	r3, r1, #3
    18a2:	1ac0      	subs	r0, r0, r3
    18a4:	4152      	adcs	r2, r2
    18a6:	0883      	lsrs	r3, r0, #2
    18a8:	428b      	cmp	r3, r1
    18aa:	d301      	bcc.n	18b0 <__udivsi3+0xe4>
    18ac:	008b      	lsls	r3, r1, #2
    18ae:	1ac0      	subs	r0, r0, r3
    18b0:	4152      	adcs	r2, r2
    18b2:	0843      	lsrs	r3, r0, #1
    18b4:	428b      	cmp	r3, r1
    18b6:	d301      	bcc.n	18bc <__udivsi3+0xf0>
    18b8:	004b      	lsls	r3, r1, #1
    18ba:	1ac0      	subs	r0, r0, r3
    18bc:	4152      	adcs	r2, r2
    18be:	1a41      	subs	r1, r0, r1
    18c0:	d200      	bcs.n	18c4 <__udivsi3+0xf8>
    18c2:	4601      	mov	r1, r0
    18c4:	4152      	adcs	r2, r2
    18c6:	4610      	mov	r0, r2
    18c8:	4770      	bx	lr
    18ca:	e7ff      	b.n	18cc <__udivsi3+0x100>
    18cc:	b501      	push	{r0, lr}
    18ce:	2000      	movs	r0, #0
    18d0:	f000 f8f0 	bl	1ab4 <__aeabi_idiv0>
    18d4:	bd02      	pop	{r1, pc}
    18d6:	46c0      	nop			; (mov r8, r8)

000018d8 <__aeabi_uidivmod>:
    18d8:	2900      	cmp	r1, #0
    18da:	d0f7      	beq.n	18cc <__udivsi3+0x100>
    18dc:	e776      	b.n	17cc <__udivsi3>
    18de:	4770      	bx	lr

000018e0 <__divsi3>:
    18e0:	4603      	mov	r3, r0
    18e2:	430b      	orrs	r3, r1
    18e4:	d47f      	bmi.n	19e6 <__divsi3+0x106>
    18e6:	2200      	movs	r2, #0
    18e8:	0843      	lsrs	r3, r0, #1
    18ea:	428b      	cmp	r3, r1
    18ec:	d374      	bcc.n	19d8 <__divsi3+0xf8>
    18ee:	0903      	lsrs	r3, r0, #4
    18f0:	428b      	cmp	r3, r1
    18f2:	d35f      	bcc.n	19b4 <__divsi3+0xd4>
    18f4:	0a03      	lsrs	r3, r0, #8
    18f6:	428b      	cmp	r3, r1
    18f8:	d344      	bcc.n	1984 <__divsi3+0xa4>
    18fa:	0b03      	lsrs	r3, r0, #12
    18fc:	428b      	cmp	r3, r1
    18fe:	d328      	bcc.n	1952 <__divsi3+0x72>
    1900:	0c03      	lsrs	r3, r0, #16
    1902:	428b      	cmp	r3, r1
    1904:	d30d      	bcc.n	1922 <__divsi3+0x42>
    1906:	22ff      	movs	r2, #255	; 0xff
    1908:	0209      	lsls	r1, r1, #8
    190a:	ba12      	rev	r2, r2
    190c:	0c03      	lsrs	r3, r0, #16
    190e:	428b      	cmp	r3, r1
    1910:	d302      	bcc.n	1918 <__divsi3+0x38>
    1912:	1212      	asrs	r2, r2, #8
    1914:	0209      	lsls	r1, r1, #8
    1916:	d065      	beq.n	19e4 <__divsi3+0x104>
    1918:	0b03      	lsrs	r3, r0, #12
    191a:	428b      	cmp	r3, r1
    191c:	d319      	bcc.n	1952 <__divsi3+0x72>
    191e:	e000      	b.n	1922 <__divsi3+0x42>
    1920:	0a09      	lsrs	r1, r1, #8
    1922:	0bc3      	lsrs	r3, r0, #15
    1924:	428b      	cmp	r3, r1
    1926:	d301      	bcc.n	192c <__divsi3+0x4c>
    1928:	03cb      	lsls	r3, r1, #15
    192a:	1ac0      	subs	r0, r0, r3
    192c:	4152      	adcs	r2, r2
    192e:	0b83      	lsrs	r3, r0, #14
    1930:	428b      	cmp	r3, r1
    1932:	d301      	bcc.n	1938 <__divsi3+0x58>
    1934:	038b      	lsls	r3, r1, #14
    1936:	1ac0      	subs	r0, r0, r3
    1938:	4152      	adcs	r2, r2
    193a:	0b43      	lsrs	r3, r0, #13
    193c:	428b      	cmp	r3, r1
    193e:	d301      	bcc.n	1944 <__divsi3+0x64>
    1940:	034b      	lsls	r3, r1, #13
    1942:	1ac0      	subs	r0, r0, r3
    1944:	4152      	adcs	r2, r2
    1946:	0b03      	lsrs	r3, r0, #12
    1948:	428b      	cmp	r3, r1
    194a:	d301      	bcc.n	1950 <__divsi3+0x70>
    194c:	030b      	lsls	r3, r1, #12
    194e:	1ac0      	subs	r0, r0, r3
    1950:	4152      	adcs	r2, r2
    1952:	0ac3      	lsrs	r3, r0, #11
    1954:	428b      	cmp	r3, r1
    1956:	d301      	bcc.n	195c <__divsi3+0x7c>
    1958:	02cb      	lsls	r3, r1, #11
    195a:	1ac0      	subs	r0, r0, r3
    195c:	4152      	adcs	r2, r2
    195e:	0a83      	lsrs	r3, r0, #10
    1960:	428b      	cmp	r3, r1
    1962:	d301      	bcc.n	1968 <__divsi3+0x88>
    1964:	028b      	lsls	r3, r1, #10
    1966:	1ac0      	subs	r0, r0, r3
    1968:	4152      	adcs	r2, r2
    196a:	0a43      	lsrs	r3, r0, #9
    196c:	428b      	cmp	r3, r1
    196e:	d301      	bcc.n	1974 <__divsi3+0x94>
    1970:	024b      	lsls	r3, r1, #9
    1972:	1ac0      	subs	r0, r0, r3
    1974:	4152      	adcs	r2, r2
    1976:	0a03      	lsrs	r3, r0, #8
    1978:	428b      	cmp	r3, r1
    197a:	d301      	bcc.n	1980 <__divsi3+0xa0>
    197c:	020b      	lsls	r3, r1, #8
    197e:	1ac0      	subs	r0, r0, r3
    1980:	4152      	adcs	r2, r2
    1982:	d2cd      	bcs.n	1920 <__divsi3+0x40>
    1984:	09c3      	lsrs	r3, r0, #7
    1986:	428b      	cmp	r3, r1
    1988:	d301      	bcc.n	198e <__divsi3+0xae>
    198a:	01cb      	lsls	r3, r1, #7
    198c:	1ac0      	subs	r0, r0, r3
    198e:	4152      	adcs	r2, r2
    1990:	0983      	lsrs	r3, r0, #6
    1992:	428b      	cmp	r3, r1
    1994:	d301      	bcc.n	199a <__divsi3+0xba>
    1996:	018b      	lsls	r3, r1, #6
    1998:	1ac0      	subs	r0, r0, r3
    199a:	4152      	adcs	r2, r2
    199c:	0943      	lsrs	r3, r0, #5
    199e:	428b      	cmp	r3, r1
    19a0:	d301      	bcc.n	19a6 <__divsi3+0xc6>
    19a2:	014b      	lsls	r3, r1, #5
    19a4:	1ac0      	subs	r0, r0, r3
    19a6:	4152      	adcs	r2, r2
    19a8:	0903      	lsrs	r3, r0, #4
    19aa:	428b      	cmp	r3, r1
    19ac:	d301      	bcc.n	19b2 <__divsi3+0xd2>
    19ae:	010b      	lsls	r3, r1, #4
    19b0:	1ac0      	subs	r0, r0, r3
    19b2:	4152      	adcs	r2, r2
    19b4:	08c3      	lsrs	r3, r0, #3
    19b6:	428b      	cmp	r3, r1
    19b8:	d301      	bcc.n	19be <__divsi3+0xde>
    19ba:	00cb      	lsls	r3, r1, #3
    19bc:	1ac0      	subs	r0, r0, r3
    19be:	4152      	adcs	r2, r2
    19c0:	0883      	lsrs	r3, r0, #2
    19c2:	428b      	cmp	r3, r1
    19c4:	d301      	bcc.n	19ca <__divsi3+0xea>
    19c6:	008b      	lsls	r3, r1, #2
    19c8:	1ac0      	subs	r0, r0, r3
    19ca:	4152      	adcs	r2, r2
    19cc:	0843      	lsrs	r3, r0, #1
    19ce:	428b      	cmp	r3, r1
    19d0:	d301      	bcc.n	19d6 <__divsi3+0xf6>
    19d2:	004b      	lsls	r3, r1, #1
    19d4:	1ac0      	subs	r0, r0, r3
    19d6:	4152      	adcs	r2, r2
    19d8:	1a41      	subs	r1, r0, r1
    19da:	d200      	bcs.n	19de <__divsi3+0xfe>
    19dc:	4601      	mov	r1, r0
    19de:	4152      	adcs	r2, r2
    19e0:	4610      	mov	r0, r2
    19e2:	4770      	bx	lr
    19e4:	e05d      	b.n	1aa2 <__divsi3+0x1c2>
    19e6:	0fca      	lsrs	r2, r1, #31
    19e8:	d000      	beq.n	19ec <__divsi3+0x10c>
    19ea:	4249      	negs	r1, r1
    19ec:	1003      	asrs	r3, r0, #32
    19ee:	d300      	bcc.n	19f2 <__divsi3+0x112>
    19f0:	4240      	negs	r0, r0
    19f2:	4053      	eors	r3, r2
    19f4:	2200      	movs	r2, #0
    19f6:	469c      	mov	ip, r3
    19f8:	0903      	lsrs	r3, r0, #4
    19fa:	428b      	cmp	r3, r1
    19fc:	d32d      	bcc.n	1a5a <__divsi3+0x17a>
    19fe:	0a03      	lsrs	r3, r0, #8
    1a00:	428b      	cmp	r3, r1
    1a02:	d312      	bcc.n	1a2a <__divsi3+0x14a>
    1a04:	22fc      	movs	r2, #252	; 0xfc
    1a06:	0189      	lsls	r1, r1, #6
    1a08:	ba12      	rev	r2, r2
    1a0a:	0a03      	lsrs	r3, r0, #8
    1a0c:	428b      	cmp	r3, r1
    1a0e:	d30c      	bcc.n	1a2a <__divsi3+0x14a>
    1a10:	0189      	lsls	r1, r1, #6
    1a12:	1192      	asrs	r2, r2, #6
    1a14:	428b      	cmp	r3, r1
    1a16:	d308      	bcc.n	1a2a <__divsi3+0x14a>
    1a18:	0189      	lsls	r1, r1, #6
    1a1a:	1192      	asrs	r2, r2, #6
    1a1c:	428b      	cmp	r3, r1
    1a1e:	d304      	bcc.n	1a2a <__divsi3+0x14a>
    1a20:	0189      	lsls	r1, r1, #6
    1a22:	d03a      	beq.n	1a9a <__divsi3+0x1ba>
    1a24:	1192      	asrs	r2, r2, #6
    1a26:	e000      	b.n	1a2a <__divsi3+0x14a>
    1a28:	0989      	lsrs	r1, r1, #6
    1a2a:	09c3      	lsrs	r3, r0, #7
    1a2c:	428b      	cmp	r3, r1
    1a2e:	d301      	bcc.n	1a34 <__divsi3+0x154>
    1a30:	01cb      	lsls	r3, r1, #7
    1a32:	1ac0      	subs	r0, r0, r3
    1a34:	4152      	adcs	r2, r2
    1a36:	0983      	lsrs	r3, r0, #6
    1a38:	428b      	cmp	r3, r1
    1a3a:	d301      	bcc.n	1a40 <__divsi3+0x160>
    1a3c:	018b      	lsls	r3, r1, #6
    1a3e:	1ac0      	subs	r0, r0, r3
    1a40:	4152      	adcs	r2, r2
    1a42:	0943      	lsrs	r3, r0, #5
    1a44:	428b      	cmp	r3, r1
    1a46:	d301      	bcc.n	1a4c <__divsi3+0x16c>
    1a48:	014b      	lsls	r3, r1, #5
    1a4a:	1ac0      	subs	r0, r0, r3
    1a4c:	4152      	adcs	r2, r2
    1a4e:	0903      	lsrs	r3, r0, #4
    1a50:	428b      	cmp	r3, r1
    1a52:	d301      	bcc.n	1a58 <__divsi3+0x178>
    1a54:	010b      	lsls	r3, r1, #4
    1a56:	1ac0      	subs	r0, r0, r3
    1a58:	4152      	adcs	r2, r2
    1a5a:	08c3      	lsrs	r3, r0, #3
    1a5c:	428b      	cmp	r3, r1
    1a5e:	d301      	bcc.n	1a64 <__divsi3+0x184>
    1a60:	00cb      	lsls	r3, r1, #3
    1a62:	1ac0      	subs	r0, r0, r3
    1a64:	4152      	adcs	r2, r2
    1a66:	0883      	lsrs	r3, r0, #2
    1a68:	428b      	cmp	r3, r1
    1a6a:	d301      	bcc.n	1a70 <__divsi3+0x190>
    1a6c:	008b      	lsls	r3, r1, #2
    1a6e:	1ac0      	subs	r0, r0, r3
    1a70:	4152      	adcs	r2, r2
    1a72:	d2d9      	bcs.n	1a28 <__divsi3+0x148>
    1a74:	0843      	lsrs	r3, r0, #1
    1a76:	428b      	cmp	r3, r1
    1a78:	d301      	bcc.n	1a7e <__divsi3+0x19e>
    1a7a:	004b      	lsls	r3, r1, #1
    1a7c:	1ac0      	subs	r0, r0, r3
    1a7e:	4152      	adcs	r2, r2
    1a80:	1a41      	subs	r1, r0, r1
    1a82:	d200      	bcs.n	1a86 <__divsi3+0x1a6>
    1a84:	4601      	mov	r1, r0
    1a86:	4663      	mov	r3, ip
    1a88:	4152      	adcs	r2, r2
    1a8a:	105b      	asrs	r3, r3, #1
    1a8c:	4610      	mov	r0, r2
    1a8e:	d301      	bcc.n	1a94 <__divsi3+0x1b4>
    1a90:	4240      	negs	r0, r0
    1a92:	2b00      	cmp	r3, #0
    1a94:	d500      	bpl.n	1a98 <__divsi3+0x1b8>
    1a96:	4249      	negs	r1, r1
    1a98:	4770      	bx	lr
    1a9a:	4663      	mov	r3, ip
    1a9c:	105b      	asrs	r3, r3, #1
    1a9e:	d300      	bcc.n	1aa2 <__divsi3+0x1c2>
    1aa0:	4240      	negs	r0, r0
    1aa2:	b501      	push	{r0, lr}
    1aa4:	2000      	movs	r0, #0
    1aa6:	f000 f805 	bl	1ab4 <__aeabi_idiv0>
    1aaa:	bd02      	pop	{r1, pc}

00001aac <__aeabi_idivmod>:
    1aac:	2900      	cmp	r1, #0
    1aae:	d0f8      	beq.n	1aa2 <__divsi3+0x1c2>
    1ab0:	e716      	b.n	18e0 <__divsi3>
    1ab2:	4770      	bx	lr

00001ab4 <__aeabi_idiv0>:
    1ab4:	4770      	bx	lr
    1ab6:	46c0      	nop			; (mov r8, r8)

00001ab8 <__ffssi2>:
    1ab8:	b510      	push	{r4, lr}
    1aba:	2300      	movs	r3, #0
    1abc:	2800      	cmp	r0, #0
    1abe:	d002      	beq.n	1ac6 <__ffssi2+0xe>
    1ac0:	f000 f804 	bl	1acc <__ctzsi2>
    1ac4:	1c43      	adds	r3, r0, #1
    1ac6:	0018      	movs	r0, r3
    1ac8:	bd10      	pop	{r4, pc}
    1aca:	46c0      	nop			; (mov r8, r8)

00001acc <__ctzsi2>:
    1acc:	4241      	negs	r1, r0
    1ace:	4008      	ands	r0, r1
    1ad0:	211c      	movs	r1, #28
    1ad2:	2301      	movs	r3, #1
    1ad4:	041b      	lsls	r3, r3, #16
    1ad6:	4298      	cmp	r0, r3
    1ad8:	d301      	bcc.n	1ade <__ctzsi2+0x12>
    1ada:	0c00      	lsrs	r0, r0, #16
    1adc:	3910      	subs	r1, #16
    1ade:	0a1b      	lsrs	r3, r3, #8
    1ae0:	4298      	cmp	r0, r3
    1ae2:	d301      	bcc.n	1ae8 <__ctzsi2+0x1c>
    1ae4:	0a00      	lsrs	r0, r0, #8
    1ae6:	3908      	subs	r1, #8
    1ae8:	091b      	lsrs	r3, r3, #4
    1aea:	4298      	cmp	r0, r3
    1aec:	d301      	bcc.n	1af2 <__ctzsi2+0x26>
    1aee:	0900      	lsrs	r0, r0, #4
    1af0:	3904      	subs	r1, #4
    1af2:	a202      	add	r2, pc, #8	; (adr r2, 1afc <__ctzsi2+0x30>)
    1af4:	5c10      	ldrb	r0, [r2, r0]
    1af6:	1a40      	subs	r0, r0, r1
    1af8:	4770      	bx	lr
    1afa:	46c0      	nop			; (mov r8, r8)
    1afc:	1d1d1c1b 	.word	0x1d1d1c1b
    1b00:	1e1e1e1e 	.word	0x1e1e1e1e
    1b04:	1f1f1f1f 	.word	0x1f1f1f1f
    1b08:	1f1f1f1f 	.word	0x1f1f1f1f

00001b0c <__libc_init_array>:
    1b0c:	b570      	push	{r4, r5, r6, lr}
    1b0e:	2600      	movs	r6, #0
    1b10:	4d0c      	ldr	r5, [pc, #48]	; (1b44 <__libc_init_array+0x38>)
    1b12:	4c0d      	ldr	r4, [pc, #52]	; (1b48 <__libc_init_array+0x3c>)
    1b14:	1b64      	subs	r4, r4, r5
    1b16:	10a4      	asrs	r4, r4, #2
    1b18:	42a6      	cmp	r6, r4
    1b1a:	d109      	bne.n	1b30 <__libc_init_array+0x24>
    1b1c:	2600      	movs	r6, #0
    1b1e:	f001 f8cf 	bl	2cc0 <_init>
    1b22:	4d0a      	ldr	r5, [pc, #40]	; (1b4c <__libc_init_array+0x40>)
    1b24:	4c0a      	ldr	r4, [pc, #40]	; (1b50 <__libc_init_array+0x44>)
    1b26:	1b64      	subs	r4, r4, r5
    1b28:	10a4      	asrs	r4, r4, #2
    1b2a:	42a6      	cmp	r6, r4
    1b2c:	d105      	bne.n	1b3a <__libc_init_array+0x2e>
    1b2e:	bd70      	pop	{r4, r5, r6, pc}
    1b30:	00b3      	lsls	r3, r6, #2
    1b32:	58eb      	ldr	r3, [r5, r3]
    1b34:	4798      	blx	r3
    1b36:	3601      	adds	r6, #1
    1b38:	e7ee      	b.n	1b18 <__libc_init_array+0xc>
    1b3a:	00b3      	lsls	r3, r6, #2
    1b3c:	58eb      	ldr	r3, [r5, r3]
    1b3e:	4798      	blx	r3
    1b40:	3601      	adds	r6, #1
    1b42:	e7f2      	b.n	1b2a <__libc_init_array+0x1e>
    1b44:	00002ccc 	.word	0x00002ccc
    1b48:	00002ccc 	.word	0x00002ccc
    1b4c:	00002ccc 	.word	0x00002ccc
    1b50:	00002cd0 	.word	0x00002cd0

00001b54 <memcpy>:
    1b54:	2300      	movs	r3, #0
    1b56:	b510      	push	{r4, lr}
    1b58:	429a      	cmp	r2, r3
    1b5a:	d100      	bne.n	1b5e <memcpy+0xa>
    1b5c:	bd10      	pop	{r4, pc}
    1b5e:	5ccc      	ldrb	r4, [r1, r3]
    1b60:	54c4      	strb	r4, [r0, r3]
    1b62:	3301      	adds	r3, #1
    1b64:	e7f8      	b.n	1b58 <memcpy+0x4>

00001b66 <memmove>:
    1b66:	b510      	push	{r4, lr}
    1b68:	4288      	cmp	r0, r1
    1b6a:	d902      	bls.n	1b72 <memmove+0xc>
    1b6c:	188b      	adds	r3, r1, r2
    1b6e:	4298      	cmp	r0, r3
    1b70:	d308      	bcc.n	1b84 <memmove+0x1e>
    1b72:	2300      	movs	r3, #0
    1b74:	429a      	cmp	r2, r3
    1b76:	d007      	beq.n	1b88 <memmove+0x22>
    1b78:	5ccc      	ldrb	r4, [r1, r3]
    1b7a:	54c4      	strb	r4, [r0, r3]
    1b7c:	3301      	adds	r3, #1
    1b7e:	e7f9      	b.n	1b74 <memmove+0xe>
    1b80:	5c8b      	ldrb	r3, [r1, r2]
    1b82:	5483      	strb	r3, [r0, r2]
    1b84:	3a01      	subs	r2, #1
    1b86:	d2fb      	bcs.n	1b80 <memmove+0x1a>
    1b88:	bd10      	pop	{r4, pc}

00001b8a <memset>:
    1b8a:	0003      	movs	r3, r0
    1b8c:	1882      	adds	r2, r0, r2
    1b8e:	4293      	cmp	r3, r2
    1b90:	d100      	bne.n	1b94 <memset+0xa>
    1b92:	4770      	bx	lr
    1b94:	7019      	strb	r1, [r3, #0]
    1b96:	3301      	adds	r3, #1
    1b98:	e7f9      	b.n	1b8e <memset+0x4>
	...

00001b9c <iprintf>:
    1b9c:	b40f      	push	{r0, r1, r2, r3}
    1b9e:	4b0b      	ldr	r3, [pc, #44]	; (1bcc <iprintf+0x30>)
    1ba0:	b513      	push	{r0, r1, r4, lr}
    1ba2:	681c      	ldr	r4, [r3, #0]
    1ba4:	2c00      	cmp	r4, #0
    1ba6:	d005      	beq.n	1bb4 <iprintf+0x18>
    1ba8:	69a3      	ldr	r3, [r4, #24]
    1baa:	2b00      	cmp	r3, #0
    1bac:	d102      	bne.n	1bb4 <iprintf+0x18>
    1bae:	0020      	movs	r0, r4
    1bb0:	f000 fa3c 	bl	202c <__sinit>
    1bb4:	ab05      	add	r3, sp, #20
    1bb6:	9a04      	ldr	r2, [sp, #16]
    1bb8:	68a1      	ldr	r1, [r4, #8]
    1bba:	0020      	movs	r0, r4
    1bbc:	9301      	str	r3, [sp, #4]
    1bbe:	f000 fc07 	bl	23d0 <_vfiprintf_r>
    1bc2:	bc16      	pop	{r1, r2, r4}
    1bc4:	bc08      	pop	{r3}
    1bc6:	b004      	add	sp, #16
    1bc8:	4718      	bx	r3
    1bca:	46c0      	nop			; (mov r8, r8)
    1bcc:	20000000 	.word	0x20000000

00001bd0 <_puts_r>:
    1bd0:	b570      	push	{r4, r5, r6, lr}
    1bd2:	0005      	movs	r5, r0
    1bd4:	000e      	movs	r6, r1
    1bd6:	2800      	cmp	r0, #0
    1bd8:	d004      	beq.n	1be4 <_puts_r+0x14>
    1bda:	6983      	ldr	r3, [r0, #24]
    1bdc:	2b00      	cmp	r3, #0
    1bde:	d101      	bne.n	1be4 <_puts_r+0x14>
    1be0:	f000 fa24 	bl	202c <__sinit>
    1be4:	69ab      	ldr	r3, [r5, #24]
    1be6:	68ac      	ldr	r4, [r5, #8]
    1be8:	2b00      	cmp	r3, #0
    1bea:	d102      	bne.n	1bf2 <_puts_r+0x22>
    1bec:	0028      	movs	r0, r5
    1bee:	f000 fa1d 	bl	202c <__sinit>
    1bf2:	4b24      	ldr	r3, [pc, #144]	; (1c84 <_puts_r+0xb4>)
    1bf4:	429c      	cmp	r4, r3
    1bf6:	d10f      	bne.n	1c18 <_puts_r+0x48>
    1bf8:	686c      	ldr	r4, [r5, #4]
    1bfa:	89a3      	ldrh	r3, [r4, #12]
    1bfc:	071b      	lsls	r3, r3, #28
    1bfe:	d502      	bpl.n	1c06 <_puts_r+0x36>
    1c00:	6923      	ldr	r3, [r4, #16]
    1c02:	2b00      	cmp	r3, #0
    1c04:	d120      	bne.n	1c48 <_puts_r+0x78>
    1c06:	0021      	movs	r1, r4
    1c08:	0028      	movs	r0, r5
    1c0a:	f000 f8a1 	bl	1d50 <__swsetup_r>
    1c0e:	2800      	cmp	r0, #0
    1c10:	d01a      	beq.n	1c48 <_puts_r+0x78>
    1c12:	2001      	movs	r0, #1
    1c14:	4240      	negs	r0, r0
    1c16:	bd70      	pop	{r4, r5, r6, pc}
    1c18:	4b1b      	ldr	r3, [pc, #108]	; (1c88 <_puts_r+0xb8>)
    1c1a:	429c      	cmp	r4, r3
    1c1c:	d101      	bne.n	1c22 <_puts_r+0x52>
    1c1e:	68ac      	ldr	r4, [r5, #8]
    1c20:	e7eb      	b.n	1bfa <_puts_r+0x2a>
    1c22:	4b1a      	ldr	r3, [pc, #104]	; (1c8c <_puts_r+0xbc>)
    1c24:	429c      	cmp	r4, r3
    1c26:	d1e8      	bne.n	1bfa <_puts_r+0x2a>
    1c28:	68ec      	ldr	r4, [r5, #12]
    1c2a:	e7e6      	b.n	1bfa <_puts_r+0x2a>
    1c2c:	3b01      	subs	r3, #1
    1c2e:	3601      	adds	r6, #1
    1c30:	60a3      	str	r3, [r4, #8]
    1c32:	2b00      	cmp	r3, #0
    1c34:	da04      	bge.n	1c40 <_puts_r+0x70>
    1c36:	69a2      	ldr	r2, [r4, #24]
    1c38:	4293      	cmp	r3, r2
    1c3a:	db16      	blt.n	1c6a <_puts_r+0x9a>
    1c3c:	290a      	cmp	r1, #10
    1c3e:	d014      	beq.n	1c6a <_puts_r+0x9a>
    1c40:	6823      	ldr	r3, [r4, #0]
    1c42:	1c5a      	adds	r2, r3, #1
    1c44:	6022      	str	r2, [r4, #0]
    1c46:	7019      	strb	r1, [r3, #0]
    1c48:	7831      	ldrb	r1, [r6, #0]
    1c4a:	68a3      	ldr	r3, [r4, #8]
    1c4c:	2900      	cmp	r1, #0
    1c4e:	d1ed      	bne.n	1c2c <_puts_r+0x5c>
    1c50:	3b01      	subs	r3, #1
    1c52:	60a3      	str	r3, [r4, #8]
    1c54:	2b00      	cmp	r3, #0
    1c56:	da0f      	bge.n	1c78 <_puts_r+0xa8>
    1c58:	0022      	movs	r2, r4
    1c5a:	310a      	adds	r1, #10
    1c5c:	0028      	movs	r0, r5
    1c5e:	f000 f821 	bl	1ca4 <__swbuf_r>
    1c62:	1c43      	adds	r3, r0, #1
    1c64:	d0d5      	beq.n	1c12 <_puts_r+0x42>
    1c66:	200a      	movs	r0, #10
    1c68:	e7d5      	b.n	1c16 <_puts_r+0x46>
    1c6a:	0022      	movs	r2, r4
    1c6c:	0028      	movs	r0, r5
    1c6e:	f000 f819 	bl	1ca4 <__swbuf_r>
    1c72:	1c43      	adds	r3, r0, #1
    1c74:	d1e8      	bne.n	1c48 <_puts_r+0x78>
    1c76:	e7cc      	b.n	1c12 <_puts_r+0x42>
    1c78:	200a      	movs	r0, #10
    1c7a:	6823      	ldr	r3, [r4, #0]
    1c7c:	1c5a      	adds	r2, r3, #1
    1c7e:	6022      	str	r2, [r4, #0]
    1c80:	7018      	strb	r0, [r3, #0]
    1c82:	e7c8      	b.n	1c16 <_puts_r+0x46>
    1c84:	00002c4c 	.word	0x00002c4c
    1c88:	00002c6c 	.word	0x00002c6c
    1c8c:	00002c2c 	.word	0x00002c2c

00001c90 <puts>:
    1c90:	b510      	push	{r4, lr}
    1c92:	4b03      	ldr	r3, [pc, #12]	; (1ca0 <puts+0x10>)
    1c94:	0001      	movs	r1, r0
    1c96:	6818      	ldr	r0, [r3, #0]
    1c98:	f7ff ff9a 	bl	1bd0 <_puts_r>
    1c9c:	bd10      	pop	{r4, pc}
    1c9e:	46c0      	nop			; (mov r8, r8)
    1ca0:	20000000 	.word	0x20000000

00001ca4 <__swbuf_r>:
    1ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ca6:	0005      	movs	r5, r0
    1ca8:	000e      	movs	r6, r1
    1caa:	0014      	movs	r4, r2
    1cac:	2800      	cmp	r0, #0
    1cae:	d004      	beq.n	1cba <__swbuf_r+0x16>
    1cb0:	6983      	ldr	r3, [r0, #24]
    1cb2:	2b00      	cmp	r3, #0
    1cb4:	d101      	bne.n	1cba <__swbuf_r+0x16>
    1cb6:	f000 f9b9 	bl	202c <__sinit>
    1cba:	4b22      	ldr	r3, [pc, #136]	; (1d44 <__swbuf_r+0xa0>)
    1cbc:	429c      	cmp	r4, r3
    1cbe:	d12d      	bne.n	1d1c <__swbuf_r+0x78>
    1cc0:	686c      	ldr	r4, [r5, #4]
    1cc2:	69a3      	ldr	r3, [r4, #24]
    1cc4:	60a3      	str	r3, [r4, #8]
    1cc6:	89a3      	ldrh	r3, [r4, #12]
    1cc8:	071b      	lsls	r3, r3, #28
    1cca:	d531      	bpl.n	1d30 <__swbuf_r+0x8c>
    1ccc:	6923      	ldr	r3, [r4, #16]
    1cce:	2b00      	cmp	r3, #0
    1cd0:	d02e      	beq.n	1d30 <__swbuf_r+0x8c>
    1cd2:	6823      	ldr	r3, [r4, #0]
    1cd4:	6922      	ldr	r2, [r4, #16]
    1cd6:	b2f7      	uxtb	r7, r6
    1cd8:	1a98      	subs	r0, r3, r2
    1cda:	6963      	ldr	r3, [r4, #20]
    1cdc:	b2f6      	uxtb	r6, r6
    1cde:	4298      	cmp	r0, r3
    1ce0:	db05      	blt.n	1cee <__swbuf_r+0x4a>
    1ce2:	0021      	movs	r1, r4
    1ce4:	0028      	movs	r0, r5
    1ce6:	f000 f933 	bl	1f50 <_fflush_r>
    1cea:	2800      	cmp	r0, #0
    1cec:	d126      	bne.n	1d3c <__swbuf_r+0x98>
    1cee:	68a3      	ldr	r3, [r4, #8]
    1cf0:	3001      	adds	r0, #1
    1cf2:	3b01      	subs	r3, #1
    1cf4:	60a3      	str	r3, [r4, #8]
    1cf6:	6823      	ldr	r3, [r4, #0]
    1cf8:	1c5a      	adds	r2, r3, #1
    1cfa:	6022      	str	r2, [r4, #0]
    1cfc:	701f      	strb	r7, [r3, #0]
    1cfe:	6963      	ldr	r3, [r4, #20]
    1d00:	4298      	cmp	r0, r3
    1d02:	d004      	beq.n	1d0e <__swbuf_r+0x6a>
    1d04:	89a3      	ldrh	r3, [r4, #12]
    1d06:	07db      	lsls	r3, r3, #31
    1d08:	d51a      	bpl.n	1d40 <__swbuf_r+0x9c>
    1d0a:	2e0a      	cmp	r6, #10
    1d0c:	d118      	bne.n	1d40 <__swbuf_r+0x9c>
    1d0e:	0021      	movs	r1, r4
    1d10:	0028      	movs	r0, r5
    1d12:	f000 f91d 	bl	1f50 <_fflush_r>
    1d16:	2800      	cmp	r0, #0
    1d18:	d012      	beq.n	1d40 <__swbuf_r+0x9c>
    1d1a:	e00f      	b.n	1d3c <__swbuf_r+0x98>
    1d1c:	4b0a      	ldr	r3, [pc, #40]	; (1d48 <__swbuf_r+0xa4>)
    1d1e:	429c      	cmp	r4, r3
    1d20:	d101      	bne.n	1d26 <__swbuf_r+0x82>
    1d22:	68ac      	ldr	r4, [r5, #8]
    1d24:	e7cd      	b.n	1cc2 <__swbuf_r+0x1e>
    1d26:	4b09      	ldr	r3, [pc, #36]	; (1d4c <__swbuf_r+0xa8>)
    1d28:	429c      	cmp	r4, r3
    1d2a:	d1ca      	bne.n	1cc2 <__swbuf_r+0x1e>
    1d2c:	68ec      	ldr	r4, [r5, #12]
    1d2e:	e7c8      	b.n	1cc2 <__swbuf_r+0x1e>
    1d30:	0021      	movs	r1, r4
    1d32:	0028      	movs	r0, r5
    1d34:	f000 f80c 	bl	1d50 <__swsetup_r>
    1d38:	2800      	cmp	r0, #0
    1d3a:	d0ca      	beq.n	1cd2 <__swbuf_r+0x2e>
    1d3c:	2601      	movs	r6, #1
    1d3e:	4276      	negs	r6, r6
    1d40:	0030      	movs	r0, r6
    1d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d44:	00002c4c 	.word	0x00002c4c
    1d48:	00002c6c 	.word	0x00002c6c
    1d4c:	00002c2c 	.word	0x00002c2c

00001d50 <__swsetup_r>:
    1d50:	4b36      	ldr	r3, [pc, #216]	; (1e2c <__swsetup_r+0xdc>)
    1d52:	b570      	push	{r4, r5, r6, lr}
    1d54:	681d      	ldr	r5, [r3, #0]
    1d56:	0006      	movs	r6, r0
    1d58:	000c      	movs	r4, r1
    1d5a:	2d00      	cmp	r5, #0
    1d5c:	d005      	beq.n	1d6a <__swsetup_r+0x1a>
    1d5e:	69ab      	ldr	r3, [r5, #24]
    1d60:	2b00      	cmp	r3, #0
    1d62:	d102      	bne.n	1d6a <__swsetup_r+0x1a>
    1d64:	0028      	movs	r0, r5
    1d66:	f000 f961 	bl	202c <__sinit>
    1d6a:	4b31      	ldr	r3, [pc, #196]	; (1e30 <__swsetup_r+0xe0>)
    1d6c:	429c      	cmp	r4, r3
    1d6e:	d10f      	bne.n	1d90 <__swsetup_r+0x40>
    1d70:	686c      	ldr	r4, [r5, #4]
    1d72:	230c      	movs	r3, #12
    1d74:	5ee2      	ldrsh	r2, [r4, r3]
    1d76:	b293      	uxth	r3, r2
    1d78:	0719      	lsls	r1, r3, #28
    1d7a:	d42d      	bmi.n	1dd8 <__swsetup_r+0x88>
    1d7c:	06d9      	lsls	r1, r3, #27
    1d7e:	d411      	bmi.n	1da4 <__swsetup_r+0x54>
    1d80:	2309      	movs	r3, #9
    1d82:	2001      	movs	r0, #1
    1d84:	6033      	str	r3, [r6, #0]
    1d86:	3337      	adds	r3, #55	; 0x37
    1d88:	4313      	orrs	r3, r2
    1d8a:	81a3      	strh	r3, [r4, #12]
    1d8c:	4240      	negs	r0, r0
    1d8e:	bd70      	pop	{r4, r5, r6, pc}
    1d90:	4b28      	ldr	r3, [pc, #160]	; (1e34 <__swsetup_r+0xe4>)
    1d92:	429c      	cmp	r4, r3
    1d94:	d101      	bne.n	1d9a <__swsetup_r+0x4a>
    1d96:	68ac      	ldr	r4, [r5, #8]
    1d98:	e7eb      	b.n	1d72 <__swsetup_r+0x22>
    1d9a:	4b27      	ldr	r3, [pc, #156]	; (1e38 <__swsetup_r+0xe8>)
    1d9c:	429c      	cmp	r4, r3
    1d9e:	d1e8      	bne.n	1d72 <__swsetup_r+0x22>
    1da0:	68ec      	ldr	r4, [r5, #12]
    1da2:	e7e6      	b.n	1d72 <__swsetup_r+0x22>
    1da4:	075b      	lsls	r3, r3, #29
    1da6:	d513      	bpl.n	1dd0 <__swsetup_r+0x80>
    1da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1daa:	2900      	cmp	r1, #0
    1dac:	d008      	beq.n	1dc0 <__swsetup_r+0x70>
    1dae:	0023      	movs	r3, r4
    1db0:	3344      	adds	r3, #68	; 0x44
    1db2:	4299      	cmp	r1, r3
    1db4:	d002      	beq.n	1dbc <__swsetup_r+0x6c>
    1db6:	0030      	movs	r0, r6
    1db8:	f000 fa3a 	bl	2230 <_free_r>
    1dbc:	2300      	movs	r3, #0
    1dbe:	6363      	str	r3, [r4, #52]	; 0x34
    1dc0:	2224      	movs	r2, #36	; 0x24
    1dc2:	89a3      	ldrh	r3, [r4, #12]
    1dc4:	4393      	bics	r3, r2
    1dc6:	81a3      	strh	r3, [r4, #12]
    1dc8:	2300      	movs	r3, #0
    1dca:	6063      	str	r3, [r4, #4]
    1dcc:	6923      	ldr	r3, [r4, #16]
    1dce:	6023      	str	r3, [r4, #0]
    1dd0:	2308      	movs	r3, #8
    1dd2:	89a2      	ldrh	r2, [r4, #12]
    1dd4:	4313      	orrs	r3, r2
    1dd6:	81a3      	strh	r3, [r4, #12]
    1dd8:	6923      	ldr	r3, [r4, #16]
    1dda:	2b00      	cmp	r3, #0
    1ddc:	d10b      	bne.n	1df6 <__swsetup_r+0xa6>
    1dde:	21a0      	movs	r1, #160	; 0xa0
    1de0:	2280      	movs	r2, #128	; 0x80
    1de2:	89a3      	ldrh	r3, [r4, #12]
    1de4:	0089      	lsls	r1, r1, #2
    1de6:	0092      	lsls	r2, r2, #2
    1de8:	400b      	ands	r3, r1
    1dea:	4293      	cmp	r3, r2
    1dec:	d003      	beq.n	1df6 <__swsetup_r+0xa6>
    1dee:	0021      	movs	r1, r4
    1df0:	0030      	movs	r0, r6
    1df2:	f000 f9d9 	bl	21a8 <__smakebuf_r>
    1df6:	2301      	movs	r3, #1
    1df8:	89a2      	ldrh	r2, [r4, #12]
    1dfa:	4013      	ands	r3, r2
    1dfc:	d011      	beq.n	1e22 <__swsetup_r+0xd2>
    1dfe:	2300      	movs	r3, #0
    1e00:	60a3      	str	r3, [r4, #8]
    1e02:	6963      	ldr	r3, [r4, #20]
    1e04:	425b      	negs	r3, r3
    1e06:	61a3      	str	r3, [r4, #24]
    1e08:	2000      	movs	r0, #0
    1e0a:	6923      	ldr	r3, [r4, #16]
    1e0c:	4283      	cmp	r3, r0
    1e0e:	d1be      	bne.n	1d8e <__swsetup_r+0x3e>
    1e10:	230c      	movs	r3, #12
    1e12:	5ee2      	ldrsh	r2, [r4, r3]
    1e14:	0613      	lsls	r3, r2, #24
    1e16:	d5ba      	bpl.n	1d8e <__swsetup_r+0x3e>
    1e18:	2340      	movs	r3, #64	; 0x40
    1e1a:	4313      	orrs	r3, r2
    1e1c:	81a3      	strh	r3, [r4, #12]
    1e1e:	3801      	subs	r0, #1
    1e20:	e7b5      	b.n	1d8e <__swsetup_r+0x3e>
    1e22:	0792      	lsls	r2, r2, #30
    1e24:	d400      	bmi.n	1e28 <__swsetup_r+0xd8>
    1e26:	6963      	ldr	r3, [r4, #20]
    1e28:	60a3      	str	r3, [r4, #8]
    1e2a:	e7ed      	b.n	1e08 <__swsetup_r+0xb8>
    1e2c:	20000000 	.word	0x20000000
    1e30:	00002c4c 	.word	0x00002c4c
    1e34:	00002c6c 	.word	0x00002c6c
    1e38:	00002c2c 	.word	0x00002c2c

00001e3c <__sflush_r>:
    1e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e3e:	898a      	ldrh	r2, [r1, #12]
    1e40:	0005      	movs	r5, r0
    1e42:	000c      	movs	r4, r1
    1e44:	0713      	lsls	r3, r2, #28
    1e46:	d460      	bmi.n	1f0a <__sflush_r+0xce>
    1e48:	684b      	ldr	r3, [r1, #4]
    1e4a:	2b00      	cmp	r3, #0
    1e4c:	dc04      	bgt.n	1e58 <__sflush_r+0x1c>
    1e4e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1e50:	2b00      	cmp	r3, #0
    1e52:	dc01      	bgt.n	1e58 <__sflush_r+0x1c>
    1e54:	2000      	movs	r0, #0
    1e56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1e58:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1e5a:	2f00      	cmp	r7, #0
    1e5c:	d0fa      	beq.n	1e54 <__sflush_r+0x18>
    1e5e:	2300      	movs	r3, #0
    1e60:	682e      	ldr	r6, [r5, #0]
    1e62:	602b      	str	r3, [r5, #0]
    1e64:	2380      	movs	r3, #128	; 0x80
    1e66:	015b      	lsls	r3, r3, #5
    1e68:	401a      	ands	r2, r3
    1e6a:	d034      	beq.n	1ed6 <__sflush_r+0x9a>
    1e6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1e6e:	89a3      	ldrh	r3, [r4, #12]
    1e70:	075b      	lsls	r3, r3, #29
    1e72:	d506      	bpl.n	1e82 <__sflush_r+0x46>
    1e74:	6863      	ldr	r3, [r4, #4]
    1e76:	1ac0      	subs	r0, r0, r3
    1e78:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	d001      	beq.n	1e82 <__sflush_r+0x46>
    1e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1e80:	1ac0      	subs	r0, r0, r3
    1e82:	0002      	movs	r2, r0
    1e84:	6a21      	ldr	r1, [r4, #32]
    1e86:	2300      	movs	r3, #0
    1e88:	0028      	movs	r0, r5
    1e8a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1e8c:	47b8      	blx	r7
    1e8e:	89a1      	ldrh	r1, [r4, #12]
    1e90:	1c43      	adds	r3, r0, #1
    1e92:	d106      	bne.n	1ea2 <__sflush_r+0x66>
    1e94:	682b      	ldr	r3, [r5, #0]
    1e96:	2b1d      	cmp	r3, #29
    1e98:	d831      	bhi.n	1efe <__sflush_r+0xc2>
    1e9a:	4a2c      	ldr	r2, [pc, #176]	; (1f4c <__sflush_r+0x110>)
    1e9c:	40da      	lsrs	r2, r3
    1e9e:	07d3      	lsls	r3, r2, #31
    1ea0:	d52d      	bpl.n	1efe <__sflush_r+0xc2>
    1ea2:	2300      	movs	r3, #0
    1ea4:	6063      	str	r3, [r4, #4]
    1ea6:	6923      	ldr	r3, [r4, #16]
    1ea8:	6023      	str	r3, [r4, #0]
    1eaa:	04cb      	lsls	r3, r1, #19
    1eac:	d505      	bpl.n	1eba <__sflush_r+0x7e>
    1eae:	1c43      	adds	r3, r0, #1
    1eb0:	d102      	bne.n	1eb8 <__sflush_r+0x7c>
    1eb2:	682b      	ldr	r3, [r5, #0]
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	d100      	bne.n	1eba <__sflush_r+0x7e>
    1eb8:	6560      	str	r0, [r4, #84]	; 0x54
    1eba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1ebc:	602e      	str	r6, [r5, #0]
    1ebe:	2900      	cmp	r1, #0
    1ec0:	d0c8      	beq.n	1e54 <__sflush_r+0x18>
    1ec2:	0023      	movs	r3, r4
    1ec4:	3344      	adds	r3, #68	; 0x44
    1ec6:	4299      	cmp	r1, r3
    1ec8:	d002      	beq.n	1ed0 <__sflush_r+0x94>
    1eca:	0028      	movs	r0, r5
    1ecc:	f000 f9b0 	bl	2230 <_free_r>
    1ed0:	2000      	movs	r0, #0
    1ed2:	6360      	str	r0, [r4, #52]	; 0x34
    1ed4:	e7bf      	b.n	1e56 <__sflush_r+0x1a>
    1ed6:	2301      	movs	r3, #1
    1ed8:	6a21      	ldr	r1, [r4, #32]
    1eda:	0028      	movs	r0, r5
    1edc:	47b8      	blx	r7
    1ede:	1c43      	adds	r3, r0, #1
    1ee0:	d1c5      	bne.n	1e6e <__sflush_r+0x32>
    1ee2:	682b      	ldr	r3, [r5, #0]
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	d0c2      	beq.n	1e6e <__sflush_r+0x32>
    1ee8:	2b1d      	cmp	r3, #29
    1eea:	d001      	beq.n	1ef0 <__sflush_r+0xb4>
    1eec:	2b16      	cmp	r3, #22
    1eee:	d101      	bne.n	1ef4 <__sflush_r+0xb8>
    1ef0:	602e      	str	r6, [r5, #0]
    1ef2:	e7af      	b.n	1e54 <__sflush_r+0x18>
    1ef4:	2340      	movs	r3, #64	; 0x40
    1ef6:	89a2      	ldrh	r2, [r4, #12]
    1ef8:	4313      	orrs	r3, r2
    1efa:	81a3      	strh	r3, [r4, #12]
    1efc:	e7ab      	b.n	1e56 <__sflush_r+0x1a>
    1efe:	2340      	movs	r3, #64	; 0x40
    1f00:	430b      	orrs	r3, r1
    1f02:	2001      	movs	r0, #1
    1f04:	81a3      	strh	r3, [r4, #12]
    1f06:	4240      	negs	r0, r0
    1f08:	e7a5      	b.n	1e56 <__sflush_r+0x1a>
    1f0a:	690f      	ldr	r7, [r1, #16]
    1f0c:	2f00      	cmp	r7, #0
    1f0e:	d0a1      	beq.n	1e54 <__sflush_r+0x18>
    1f10:	680b      	ldr	r3, [r1, #0]
    1f12:	600f      	str	r7, [r1, #0]
    1f14:	1bdb      	subs	r3, r3, r7
    1f16:	9301      	str	r3, [sp, #4]
    1f18:	2300      	movs	r3, #0
    1f1a:	0792      	lsls	r2, r2, #30
    1f1c:	d100      	bne.n	1f20 <__sflush_r+0xe4>
    1f1e:	694b      	ldr	r3, [r1, #20]
    1f20:	60a3      	str	r3, [r4, #8]
    1f22:	9b01      	ldr	r3, [sp, #4]
    1f24:	2b00      	cmp	r3, #0
    1f26:	dc00      	bgt.n	1f2a <__sflush_r+0xee>
    1f28:	e794      	b.n	1e54 <__sflush_r+0x18>
    1f2a:	9b01      	ldr	r3, [sp, #4]
    1f2c:	003a      	movs	r2, r7
    1f2e:	6a21      	ldr	r1, [r4, #32]
    1f30:	0028      	movs	r0, r5
    1f32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1f34:	47b0      	blx	r6
    1f36:	2800      	cmp	r0, #0
    1f38:	dc03      	bgt.n	1f42 <__sflush_r+0x106>
    1f3a:	2340      	movs	r3, #64	; 0x40
    1f3c:	89a2      	ldrh	r2, [r4, #12]
    1f3e:	4313      	orrs	r3, r2
    1f40:	e7df      	b.n	1f02 <__sflush_r+0xc6>
    1f42:	9b01      	ldr	r3, [sp, #4]
    1f44:	183f      	adds	r7, r7, r0
    1f46:	1a1b      	subs	r3, r3, r0
    1f48:	9301      	str	r3, [sp, #4]
    1f4a:	e7ea      	b.n	1f22 <__sflush_r+0xe6>
    1f4c:	20400001 	.word	0x20400001

00001f50 <_fflush_r>:
    1f50:	690b      	ldr	r3, [r1, #16]
    1f52:	b570      	push	{r4, r5, r6, lr}
    1f54:	0005      	movs	r5, r0
    1f56:	000c      	movs	r4, r1
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d101      	bne.n	1f60 <_fflush_r+0x10>
    1f5c:	2000      	movs	r0, #0
    1f5e:	bd70      	pop	{r4, r5, r6, pc}
    1f60:	2800      	cmp	r0, #0
    1f62:	d004      	beq.n	1f6e <_fflush_r+0x1e>
    1f64:	6983      	ldr	r3, [r0, #24]
    1f66:	2b00      	cmp	r3, #0
    1f68:	d101      	bne.n	1f6e <_fflush_r+0x1e>
    1f6a:	f000 f85f 	bl	202c <__sinit>
    1f6e:	4b0b      	ldr	r3, [pc, #44]	; (1f9c <_fflush_r+0x4c>)
    1f70:	429c      	cmp	r4, r3
    1f72:	d109      	bne.n	1f88 <_fflush_r+0x38>
    1f74:	686c      	ldr	r4, [r5, #4]
    1f76:	220c      	movs	r2, #12
    1f78:	5ea3      	ldrsh	r3, [r4, r2]
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d0ee      	beq.n	1f5c <_fflush_r+0xc>
    1f7e:	0021      	movs	r1, r4
    1f80:	0028      	movs	r0, r5
    1f82:	f7ff ff5b 	bl	1e3c <__sflush_r>
    1f86:	e7ea      	b.n	1f5e <_fflush_r+0xe>
    1f88:	4b05      	ldr	r3, [pc, #20]	; (1fa0 <_fflush_r+0x50>)
    1f8a:	429c      	cmp	r4, r3
    1f8c:	d101      	bne.n	1f92 <_fflush_r+0x42>
    1f8e:	68ac      	ldr	r4, [r5, #8]
    1f90:	e7f1      	b.n	1f76 <_fflush_r+0x26>
    1f92:	4b04      	ldr	r3, [pc, #16]	; (1fa4 <_fflush_r+0x54>)
    1f94:	429c      	cmp	r4, r3
    1f96:	d1ee      	bne.n	1f76 <_fflush_r+0x26>
    1f98:	68ec      	ldr	r4, [r5, #12]
    1f9a:	e7ec      	b.n	1f76 <_fflush_r+0x26>
    1f9c:	00002c4c 	.word	0x00002c4c
    1fa0:	00002c6c 	.word	0x00002c6c
    1fa4:	00002c2c 	.word	0x00002c2c

00001fa8 <_cleanup_r>:
    1fa8:	b510      	push	{r4, lr}
    1faa:	4902      	ldr	r1, [pc, #8]	; (1fb4 <_cleanup_r+0xc>)
    1fac:	f000 f8b2 	bl	2114 <_fwalk_reent>
    1fb0:	bd10      	pop	{r4, pc}
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	00001f51 	.word	0x00001f51

00001fb8 <std.isra.0>:
    1fb8:	2300      	movs	r3, #0
    1fba:	b510      	push	{r4, lr}
    1fbc:	0004      	movs	r4, r0
    1fbe:	6003      	str	r3, [r0, #0]
    1fc0:	6043      	str	r3, [r0, #4]
    1fc2:	6083      	str	r3, [r0, #8]
    1fc4:	8181      	strh	r1, [r0, #12]
    1fc6:	6643      	str	r3, [r0, #100]	; 0x64
    1fc8:	81c2      	strh	r2, [r0, #14]
    1fca:	6103      	str	r3, [r0, #16]
    1fcc:	6143      	str	r3, [r0, #20]
    1fce:	6183      	str	r3, [r0, #24]
    1fd0:	0019      	movs	r1, r3
    1fd2:	2208      	movs	r2, #8
    1fd4:	305c      	adds	r0, #92	; 0x5c
    1fd6:	f7ff fdd8 	bl	1b8a <memset>
    1fda:	4b05      	ldr	r3, [pc, #20]	; (1ff0 <std.isra.0+0x38>)
    1fdc:	6224      	str	r4, [r4, #32]
    1fde:	6263      	str	r3, [r4, #36]	; 0x24
    1fe0:	4b04      	ldr	r3, [pc, #16]	; (1ff4 <std.isra.0+0x3c>)
    1fe2:	62a3      	str	r3, [r4, #40]	; 0x28
    1fe4:	4b04      	ldr	r3, [pc, #16]	; (1ff8 <std.isra.0+0x40>)
    1fe6:	62e3      	str	r3, [r4, #44]	; 0x2c
    1fe8:	4b04      	ldr	r3, [pc, #16]	; (1ffc <std.isra.0+0x44>)
    1fea:	6323      	str	r3, [r4, #48]	; 0x30
    1fec:	bd10      	pop	{r4, pc}
    1fee:	46c0      	nop			; (mov r8, r8)
    1ff0:	0000293d 	.word	0x0000293d
    1ff4:	00002965 	.word	0x00002965
    1ff8:	0000299d 	.word	0x0000299d
    1ffc:	000029c9 	.word	0x000029c9

00002000 <__sfmoreglue>:
    2000:	b570      	push	{r4, r5, r6, lr}
    2002:	2568      	movs	r5, #104	; 0x68
    2004:	1e4a      	subs	r2, r1, #1
    2006:	4355      	muls	r5, r2
    2008:	000e      	movs	r6, r1
    200a:	0029      	movs	r1, r5
    200c:	3174      	adds	r1, #116	; 0x74
    200e:	f000 f959 	bl	22c4 <_malloc_r>
    2012:	1e04      	subs	r4, r0, #0
    2014:	d008      	beq.n	2028 <__sfmoreglue+0x28>
    2016:	2100      	movs	r1, #0
    2018:	002a      	movs	r2, r5
    201a:	6001      	str	r1, [r0, #0]
    201c:	6046      	str	r6, [r0, #4]
    201e:	300c      	adds	r0, #12
    2020:	60a0      	str	r0, [r4, #8]
    2022:	3268      	adds	r2, #104	; 0x68
    2024:	f7ff fdb1 	bl	1b8a <memset>
    2028:	0020      	movs	r0, r4
    202a:	bd70      	pop	{r4, r5, r6, pc}

0000202c <__sinit>:
    202c:	6983      	ldr	r3, [r0, #24]
    202e:	b513      	push	{r0, r1, r4, lr}
    2030:	0004      	movs	r4, r0
    2032:	2b00      	cmp	r3, #0
    2034:	d128      	bne.n	2088 <__sinit+0x5c>
    2036:	6483      	str	r3, [r0, #72]	; 0x48
    2038:	64c3      	str	r3, [r0, #76]	; 0x4c
    203a:	6503      	str	r3, [r0, #80]	; 0x50
    203c:	4b13      	ldr	r3, [pc, #76]	; (208c <__sinit+0x60>)
    203e:	4a14      	ldr	r2, [pc, #80]	; (2090 <__sinit+0x64>)
    2040:	681b      	ldr	r3, [r3, #0]
    2042:	6282      	str	r2, [r0, #40]	; 0x28
    2044:	9301      	str	r3, [sp, #4]
    2046:	4298      	cmp	r0, r3
    2048:	d101      	bne.n	204e <__sinit+0x22>
    204a:	2301      	movs	r3, #1
    204c:	6183      	str	r3, [r0, #24]
    204e:	0020      	movs	r0, r4
    2050:	f000 f820 	bl	2094 <__sfp>
    2054:	6060      	str	r0, [r4, #4]
    2056:	0020      	movs	r0, r4
    2058:	f000 f81c 	bl	2094 <__sfp>
    205c:	60a0      	str	r0, [r4, #8]
    205e:	0020      	movs	r0, r4
    2060:	f000 f818 	bl	2094 <__sfp>
    2064:	2200      	movs	r2, #0
    2066:	60e0      	str	r0, [r4, #12]
    2068:	2104      	movs	r1, #4
    206a:	6860      	ldr	r0, [r4, #4]
    206c:	f7ff ffa4 	bl	1fb8 <std.isra.0>
    2070:	2201      	movs	r2, #1
    2072:	2109      	movs	r1, #9
    2074:	68a0      	ldr	r0, [r4, #8]
    2076:	f7ff ff9f 	bl	1fb8 <std.isra.0>
    207a:	2202      	movs	r2, #2
    207c:	2112      	movs	r1, #18
    207e:	68e0      	ldr	r0, [r4, #12]
    2080:	f7ff ff9a 	bl	1fb8 <std.isra.0>
    2084:	2301      	movs	r3, #1
    2086:	61a3      	str	r3, [r4, #24]
    2088:	bd13      	pop	{r0, r1, r4, pc}
    208a:	46c0      	nop			; (mov r8, r8)
    208c:	00002c28 	.word	0x00002c28
    2090:	00001fa9 	.word	0x00001fa9

00002094 <__sfp>:
    2094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2096:	4b1e      	ldr	r3, [pc, #120]	; (2110 <__sfp+0x7c>)
    2098:	0007      	movs	r7, r0
    209a:	681e      	ldr	r6, [r3, #0]
    209c:	69b3      	ldr	r3, [r6, #24]
    209e:	2b00      	cmp	r3, #0
    20a0:	d102      	bne.n	20a8 <__sfp+0x14>
    20a2:	0030      	movs	r0, r6
    20a4:	f7ff ffc2 	bl	202c <__sinit>
    20a8:	3648      	adds	r6, #72	; 0x48
    20aa:	68b4      	ldr	r4, [r6, #8]
    20ac:	6873      	ldr	r3, [r6, #4]
    20ae:	3b01      	subs	r3, #1
    20b0:	d504      	bpl.n	20bc <__sfp+0x28>
    20b2:	6833      	ldr	r3, [r6, #0]
    20b4:	2b00      	cmp	r3, #0
    20b6:	d007      	beq.n	20c8 <__sfp+0x34>
    20b8:	6836      	ldr	r6, [r6, #0]
    20ba:	e7f6      	b.n	20aa <__sfp+0x16>
    20bc:	220c      	movs	r2, #12
    20be:	5ea5      	ldrsh	r5, [r4, r2]
    20c0:	2d00      	cmp	r5, #0
    20c2:	d00d      	beq.n	20e0 <__sfp+0x4c>
    20c4:	3468      	adds	r4, #104	; 0x68
    20c6:	e7f2      	b.n	20ae <__sfp+0x1a>
    20c8:	2104      	movs	r1, #4
    20ca:	0038      	movs	r0, r7
    20cc:	f7ff ff98 	bl	2000 <__sfmoreglue>
    20d0:	6030      	str	r0, [r6, #0]
    20d2:	2800      	cmp	r0, #0
    20d4:	d1f0      	bne.n	20b8 <__sfp+0x24>
    20d6:	230c      	movs	r3, #12
    20d8:	0004      	movs	r4, r0
    20da:	603b      	str	r3, [r7, #0]
    20dc:	0020      	movs	r0, r4
    20de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20e0:	2301      	movs	r3, #1
    20e2:	0020      	movs	r0, r4
    20e4:	425b      	negs	r3, r3
    20e6:	81e3      	strh	r3, [r4, #14]
    20e8:	3302      	adds	r3, #2
    20ea:	81a3      	strh	r3, [r4, #12]
    20ec:	6665      	str	r5, [r4, #100]	; 0x64
    20ee:	6025      	str	r5, [r4, #0]
    20f0:	60a5      	str	r5, [r4, #8]
    20f2:	6065      	str	r5, [r4, #4]
    20f4:	6125      	str	r5, [r4, #16]
    20f6:	6165      	str	r5, [r4, #20]
    20f8:	61a5      	str	r5, [r4, #24]
    20fa:	2208      	movs	r2, #8
    20fc:	0029      	movs	r1, r5
    20fe:	305c      	adds	r0, #92	; 0x5c
    2100:	f7ff fd43 	bl	1b8a <memset>
    2104:	6365      	str	r5, [r4, #52]	; 0x34
    2106:	63a5      	str	r5, [r4, #56]	; 0x38
    2108:	64a5      	str	r5, [r4, #72]	; 0x48
    210a:	64e5      	str	r5, [r4, #76]	; 0x4c
    210c:	e7e6      	b.n	20dc <__sfp+0x48>
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	00002c28 	.word	0x00002c28

00002114 <_fwalk_reent>:
    2114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2116:	0004      	movs	r4, r0
    2118:	0007      	movs	r7, r0
    211a:	2600      	movs	r6, #0
    211c:	9101      	str	r1, [sp, #4]
    211e:	3448      	adds	r4, #72	; 0x48
    2120:	2c00      	cmp	r4, #0
    2122:	d101      	bne.n	2128 <_fwalk_reent+0x14>
    2124:	0030      	movs	r0, r6
    2126:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2128:	6863      	ldr	r3, [r4, #4]
    212a:	68a5      	ldr	r5, [r4, #8]
    212c:	9300      	str	r3, [sp, #0]
    212e:	9b00      	ldr	r3, [sp, #0]
    2130:	3b01      	subs	r3, #1
    2132:	9300      	str	r3, [sp, #0]
    2134:	d501      	bpl.n	213a <_fwalk_reent+0x26>
    2136:	6824      	ldr	r4, [r4, #0]
    2138:	e7f2      	b.n	2120 <_fwalk_reent+0xc>
    213a:	89ab      	ldrh	r3, [r5, #12]
    213c:	2b01      	cmp	r3, #1
    213e:	d908      	bls.n	2152 <_fwalk_reent+0x3e>
    2140:	220e      	movs	r2, #14
    2142:	5eab      	ldrsh	r3, [r5, r2]
    2144:	3301      	adds	r3, #1
    2146:	d004      	beq.n	2152 <_fwalk_reent+0x3e>
    2148:	0029      	movs	r1, r5
    214a:	0038      	movs	r0, r7
    214c:	9b01      	ldr	r3, [sp, #4]
    214e:	4798      	blx	r3
    2150:	4306      	orrs	r6, r0
    2152:	3568      	adds	r5, #104	; 0x68
    2154:	e7eb      	b.n	212e <_fwalk_reent+0x1a>
	...

00002158 <__swhatbuf_r>:
    2158:	b570      	push	{r4, r5, r6, lr}
    215a:	000e      	movs	r6, r1
    215c:	001d      	movs	r5, r3
    215e:	230e      	movs	r3, #14
    2160:	5ec9      	ldrsh	r1, [r1, r3]
    2162:	b090      	sub	sp, #64	; 0x40
    2164:	0014      	movs	r4, r2
    2166:	2900      	cmp	r1, #0
    2168:	da07      	bge.n	217a <__swhatbuf_r+0x22>
    216a:	2300      	movs	r3, #0
    216c:	602b      	str	r3, [r5, #0]
    216e:	89b3      	ldrh	r3, [r6, #12]
    2170:	061b      	lsls	r3, r3, #24
    2172:	d411      	bmi.n	2198 <__swhatbuf_r+0x40>
    2174:	2380      	movs	r3, #128	; 0x80
    2176:	00db      	lsls	r3, r3, #3
    2178:	e00f      	b.n	219a <__swhatbuf_r+0x42>
    217a:	aa01      	add	r2, sp, #4
    217c:	f000 fc50 	bl	2a20 <_fstat_r>
    2180:	2800      	cmp	r0, #0
    2182:	dbf2      	blt.n	216a <__swhatbuf_r+0x12>
    2184:	22f0      	movs	r2, #240	; 0xf0
    2186:	9b02      	ldr	r3, [sp, #8]
    2188:	0212      	lsls	r2, r2, #8
    218a:	4013      	ands	r3, r2
    218c:	4a05      	ldr	r2, [pc, #20]	; (21a4 <__swhatbuf_r+0x4c>)
    218e:	189b      	adds	r3, r3, r2
    2190:	425a      	negs	r2, r3
    2192:	4153      	adcs	r3, r2
    2194:	602b      	str	r3, [r5, #0]
    2196:	e7ed      	b.n	2174 <__swhatbuf_r+0x1c>
    2198:	2340      	movs	r3, #64	; 0x40
    219a:	2000      	movs	r0, #0
    219c:	6023      	str	r3, [r4, #0]
    219e:	b010      	add	sp, #64	; 0x40
    21a0:	bd70      	pop	{r4, r5, r6, pc}
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	ffffe000 	.word	0xffffe000

000021a8 <__smakebuf_r>:
    21a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    21aa:	2602      	movs	r6, #2
    21ac:	898b      	ldrh	r3, [r1, #12]
    21ae:	0005      	movs	r5, r0
    21b0:	000c      	movs	r4, r1
    21b2:	4233      	tst	r3, r6
    21b4:	d006      	beq.n	21c4 <__smakebuf_r+0x1c>
    21b6:	0023      	movs	r3, r4
    21b8:	3347      	adds	r3, #71	; 0x47
    21ba:	6023      	str	r3, [r4, #0]
    21bc:	6123      	str	r3, [r4, #16]
    21be:	2301      	movs	r3, #1
    21c0:	6163      	str	r3, [r4, #20]
    21c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    21c4:	ab01      	add	r3, sp, #4
    21c6:	466a      	mov	r2, sp
    21c8:	f7ff ffc6 	bl	2158 <__swhatbuf_r>
    21cc:	9900      	ldr	r1, [sp, #0]
    21ce:	0007      	movs	r7, r0
    21d0:	0028      	movs	r0, r5
    21d2:	f000 f877 	bl	22c4 <_malloc_r>
    21d6:	2800      	cmp	r0, #0
    21d8:	d108      	bne.n	21ec <__smakebuf_r+0x44>
    21da:	220c      	movs	r2, #12
    21dc:	5ea3      	ldrsh	r3, [r4, r2]
    21de:	059a      	lsls	r2, r3, #22
    21e0:	d4ef      	bmi.n	21c2 <__smakebuf_r+0x1a>
    21e2:	2203      	movs	r2, #3
    21e4:	4393      	bics	r3, r2
    21e6:	431e      	orrs	r6, r3
    21e8:	81a6      	strh	r6, [r4, #12]
    21ea:	e7e4      	b.n	21b6 <__smakebuf_r+0xe>
    21ec:	4b0f      	ldr	r3, [pc, #60]	; (222c <__smakebuf_r+0x84>)
    21ee:	62ab      	str	r3, [r5, #40]	; 0x28
    21f0:	2380      	movs	r3, #128	; 0x80
    21f2:	89a2      	ldrh	r2, [r4, #12]
    21f4:	6020      	str	r0, [r4, #0]
    21f6:	4313      	orrs	r3, r2
    21f8:	81a3      	strh	r3, [r4, #12]
    21fa:	9b00      	ldr	r3, [sp, #0]
    21fc:	6120      	str	r0, [r4, #16]
    21fe:	6163      	str	r3, [r4, #20]
    2200:	9b01      	ldr	r3, [sp, #4]
    2202:	2b00      	cmp	r3, #0
    2204:	d00d      	beq.n	2222 <__smakebuf_r+0x7a>
    2206:	230e      	movs	r3, #14
    2208:	5ee1      	ldrsh	r1, [r4, r3]
    220a:	0028      	movs	r0, r5
    220c:	f000 fc1a 	bl	2a44 <_isatty_r>
    2210:	2800      	cmp	r0, #0
    2212:	d006      	beq.n	2222 <__smakebuf_r+0x7a>
    2214:	2203      	movs	r2, #3
    2216:	89a3      	ldrh	r3, [r4, #12]
    2218:	4393      	bics	r3, r2
    221a:	001a      	movs	r2, r3
    221c:	2301      	movs	r3, #1
    221e:	4313      	orrs	r3, r2
    2220:	81a3      	strh	r3, [r4, #12]
    2222:	89a0      	ldrh	r0, [r4, #12]
    2224:	4338      	orrs	r0, r7
    2226:	81a0      	strh	r0, [r4, #12]
    2228:	e7cb      	b.n	21c2 <__smakebuf_r+0x1a>
    222a:	46c0      	nop			; (mov r8, r8)
    222c:	00001fa9 	.word	0x00001fa9

00002230 <_free_r>:
    2230:	b570      	push	{r4, r5, r6, lr}
    2232:	0005      	movs	r5, r0
    2234:	2900      	cmp	r1, #0
    2236:	d010      	beq.n	225a <_free_r+0x2a>
    2238:	1f0c      	subs	r4, r1, #4
    223a:	6823      	ldr	r3, [r4, #0]
    223c:	2b00      	cmp	r3, #0
    223e:	da00      	bge.n	2242 <_free_r+0x12>
    2240:	18e4      	adds	r4, r4, r3
    2242:	0028      	movs	r0, r5
    2244:	f000 fc2f 	bl	2aa6 <__malloc_lock>
    2248:	4a1d      	ldr	r2, [pc, #116]	; (22c0 <_free_r+0x90>)
    224a:	6813      	ldr	r3, [r2, #0]
    224c:	2b00      	cmp	r3, #0
    224e:	d105      	bne.n	225c <_free_r+0x2c>
    2250:	6063      	str	r3, [r4, #4]
    2252:	6014      	str	r4, [r2, #0]
    2254:	0028      	movs	r0, r5
    2256:	f000 fc27 	bl	2aa8 <__malloc_unlock>
    225a:	bd70      	pop	{r4, r5, r6, pc}
    225c:	42a3      	cmp	r3, r4
    225e:	d909      	bls.n	2274 <_free_r+0x44>
    2260:	6821      	ldr	r1, [r4, #0]
    2262:	1860      	adds	r0, r4, r1
    2264:	4283      	cmp	r3, r0
    2266:	d1f3      	bne.n	2250 <_free_r+0x20>
    2268:	6818      	ldr	r0, [r3, #0]
    226a:	685b      	ldr	r3, [r3, #4]
    226c:	1841      	adds	r1, r0, r1
    226e:	6021      	str	r1, [r4, #0]
    2270:	e7ee      	b.n	2250 <_free_r+0x20>
    2272:	0013      	movs	r3, r2
    2274:	685a      	ldr	r2, [r3, #4]
    2276:	2a00      	cmp	r2, #0
    2278:	d001      	beq.n	227e <_free_r+0x4e>
    227a:	42a2      	cmp	r2, r4
    227c:	d9f9      	bls.n	2272 <_free_r+0x42>
    227e:	6819      	ldr	r1, [r3, #0]
    2280:	1858      	adds	r0, r3, r1
    2282:	42a0      	cmp	r0, r4
    2284:	d10b      	bne.n	229e <_free_r+0x6e>
    2286:	6820      	ldr	r0, [r4, #0]
    2288:	1809      	adds	r1, r1, r0
    228a:	1858      	adds	r0, r3, r1
    228c:	6019      	str	r1, [r3, #0]
    228e:	4282      	cmp	r2, r0
    2290:	d1e0      	bne.n	2254 <_free_r+0x24>
    2292:	6810      	ldr	r0, [r2, #0]
    2294:	6852      	ldr	r2, [r2, #4]
    2296:	1841      	adds	r1, r0, r1
    2298:	6019      	str	r1, [r3, #0]
    229a:	605a      	str	r2, [r3, #4]
    229c:	e7da      	b.n	2254 <_free_r+0x24>
    229e:	42a0      	cmp	r0, r4
    22a0:	d902      	bls.n	22a8 <_free_r+0x78>
    22a2:	230c      	movs	r3, #12
    22a4:	602b      	str	r3, [r5, #0]
    22a6:	e7d5      	b.n	2254 <_free_r+0x24>
    22a8:	6821      	ldr	r1, [r4, #0]
    22aa:	1860      	adds	r0, r4, r1
    22ac:	4282      	cmp	r2, r0
    22ae:	d103      	bne.n	22b8 <_free_r+0x88>
    22b0:	6810      	ldr	r0, [r2, #0]
    22b2:	6852      	ldr	r2, [r2, #4]
    22b4:	1841      	adds	r1, r0, r1
    22b6:	6021      	str	r1, [r4, #0]
    22b8:	6062      	str	r2, [r4, #4]
    22ba:	605c      	str	r4, [r3, #4]
    22bc:	e7ca      	b.n	2254 <_free_r+0x24>
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	200001e0 	.word	0x200001e0

000022c4 <_malloc_r>:
    22c4:	2303      	movs	r3, #3
    22c6:	b570      	push	{r4, r5, r6, lr}
    22c8:	1ccd      	adds	r5, r1, #3
    22ca:	439d      	bics	r5, r3
    22cc:	3508      	adds	r5, #8
    22ce:	0006      	movs	r6, r0
    22d0:	2d0c      	cmp	r5, #12
    22d2:	d21e      	bcs.n	2312 <_malloc_r+0x4e>
    22d4:	250c      	movs	r5, #12
    22d6:	42a9      	cmp	r1, r5
    22d8:	d81d      	bhi.n	2316 <_malloc_r+0x52>
    22da:	0030      	movs	r0, r6
    22dc:	f000 fbe3 	bl	2aa6 <__malloc_lock>
    22e0:	4a25      	ldr	r2, [pc, #148]	; (2378 <_malloc_r+0xb4>)
    22e2:	6814      	ldr	r4, [r2, #0]
    22e4:	0021      	movs	r1, r4
    22e6:	2900      	cmp	r1, #0
    22e8:	d119      	bne.n	231e <_malloc_r+0x5a>
    22ea:	4c24      	ldr	r4, [pc, #144]	; (237c <_malloc_r+0xb8>)
    22ec:	6823      	ldr	r3, [r4, #0]
    22ee:	2b00      	cmp	r3, #0
    22f0:	d103      	bne.n	22fa <_malloc_r+0x36>
    22f2:	0030      	movs	r0, r6
    22f4:	f000 fb10 	bl	2918 <_sbrk_r>
    22f8:	6020      	str	r0, [r4, #0]
    22fa:	0029      	movs	r1, r5
    22fc:	0030      	movs	r0, r6
    22fe:	f000 fb0b 	bl	2918 <_sbrk_r>
    2302:	1c43      	adds	r3, r0, #1
    2304:	d12c      	bne.n	2360 <_malloc_r+0x9c>
    2306:	230c      	movs	r3, #12
    2308:	0030      	movs	r0, r6
    230a:	6033      	str	r3, [r6, #0]
    230c:	f000 fbcc 	bl	2aa8 <__malloc_unlock>
    2310:	e003      	b.n	231a <_malloc_r+0x56>
    2312:	2d00      	cmp	r5, #0
    2314:	dadf      	bge.n	22d6 <_malloc_r+0x12>
    2316:	230c      	movs	r3, #12
    2318:	6033      	str	r3, [r6, #0]
    231a:	2000      	movs	r0, #0
    231c:	bd70      	pop	{r4, r5, r6, pc}
    231e:	680b      	ldr	r3, [r1, #0]
    2320:	1b5b      	subs	r3, r3, r5
    2322:	d41a      	bmi.n	235a <_malloc_r+0x96>
    2324:	2b0b      	cmp	r3, #11
    2326:	d903      	bls.n	2330 <_malloc_r+0x6c>
    2328:	600b      	str	r3, [r1, #0]
    232a:	18cc      	adds	r4, r1, r3
    232c:	6025      	str	r5, [r4, #0]
    232e:	e003      	b.n	2338 <_malloc_r+0x74>
    2330:	428c      	cmp	r4, r1
    2332:	d10e      	bne.n	2352 <_malloc_r+0x8e>
    2334:	6863      	ldr	r3, [r4, #4]
    2336:	6013      	str	r3, [r2, #0]
    2338:	0030      	movs	r0, r6
    233a:	f000 fbb5 	bl	2aa8 <__malloc_unlock>
    233e:	0020      	movs	r0, r4
    2340:	2207      	movs	r2, #7
    2342:	300b      	adds	r0, #11
    2344:	1d23      	adds	r3, r4, #4
    2346:	4390      	bics	r0, r2
    2348:	1ac3      	subs	r3, r0, r3
    234a:	d0e7      	beq.n	231c <_malloc_r+0x58>
    234c:	425a      	negs	r2, r3
    234e:	50e2      	str	r2, [r4, r3]
    2350:	e7e4      	b.n	231c <_malloc_r+0x58>
    2352:	684b      	ldr	r3, [r1, #4]
    2354:	6063      	str	r3, [r4, #4]
    2356:	000c      	movs	r4, r1
    2358:	e7ee      	b.n	2338 <_malloc_r+0x74>
    235a:	000c      	movs	r4, r1
    235c:	6849      	ldr	r1, [r1, #4]
    235e:	e7c2      	b.n	22e6 <_malloc_r+0x22>
    2360:	2303      	movs	r3, #3
    2362:	1cc4      	adds	r4, r0, #3
    2364:	439c      	bics	r4, r3
    2366:	42a0      	cmp	r0, r4
    2368:	d0e0      	beq.n	232c <_malloc_r+0x68>
    236a:	1a21      	subs	r1, r4, r0
    236c:	0030      	movs	r0, r6
    236e:	f000 fad3 	bl	2918 <_sbrk_r>
    2372:	1c43      	adds	r3, r0, #1
    2374:	d1da      	bne.n	232c <_malloc_r+0x68>
    2376:	e7c6      	b.n	2306 <_malloc_r+0x42>
    2378:	200001e0 	.word	0x200001e0
    237c:	200001e4 	.word	0x200001e4

00002380 <__sfputc_r>:
    2380:	6893      	ldr	r3, [r2, #8]
    2382:	b510      	push	{r4, lr}
    2384:	3b01      	subs	r3, #1
    2386:	6093      	str	r3, [r2, #8]
    2388:	2b00      	cmp	r3, #0
    238a:	da05      	bge.n	2398 <__sfputc_r+0x18>
    238c:	6994      	ldr	r4, [r2, #24]
    238e:	42a3      	cmp	r3, r4
    2390:	db08      	blt.n	23a4 <__sfputc_r+0x24>
    2392:	b2cb      	uxtb	r3, r1
    2394:	2b0a      	cmp	r3, #10
    2396:	d005      	beq.n	23a4 <__sfputc_r+0x24>
    2398:	6813      	ldr	r3, [r2, #0]
    239a:	1c58      	adds	r0, r3, #1
    239c:	6010      	str	r0, [r2, #0]
    239e:	7019      	strb	r1, [r3, #0]
    23a0:	b2c8      	uxtb	r0, r1
    23a2:	bd10      	pop	{r4, pc}
    23a4:	f7ff fc7e 	bl	1ca4 <__swbuf_r>
    23a8:	e7fb      	b.n	23a2 <__sfputc_r+0x22>

000023aa <__sfputs_r>:
    23aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23ac:	0006      	movs	r6, r0
    23ae:	000f      	movs	r7, r1
    23b0:	0014      	movs	r4, r2
    23b2:	18d5      	adds	r5, r2, r3
    23b4:	42ac      	cmp	r4, r5
    23b6:	d101      	bne.n	23bc <__sfputs_r+0x12>
    23b8:	2000      	movs	r0, #0
    23ba:	e007      	b.n	23cc <__sfputs_r+0x22>
    23bc:	7821      	ldrb	r1, [r4, #0]
    23be:	003a      	movs	r2, r7
    23c0:	0030      	movs	r0, r6
    23c2:	f7ff ffdd 	bl	2380 <__sfputc_r>
    23c6:	3401      	adds	r4, #1
    23c8:	1c43      	adds	r3, r0, #1
    23ca:	d1f3      	bne.n	23b4 <__sfputs_r+0xa>
    23cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000023d0 <_vfiprintf_r>:
    23d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    23d2:	b09f      	sub	sp, #124	; 0x7c
    23d4:	0006      	movs	r6, r0
    23d6:	000f      	movs	r7, r1
    23d8:	0014      	movs	r4, r2
    23da:	9305      	str	r3, [sp, #20]
    23dc:	2800      	cmp	r0, #0
    23de:	d004      	beq.n	23ea <_vfiprintf_r+0x1a>
    23e0:	6983      	ldr	r3, [r0, #24]
    23e2:	2b00      	cmp	r3, #0
    23e4:	d101      	bne.n	23ea <_vfiprintf_r+0x1a>
    23e6:	f7ff fe21 	bl	202c <__sinit>
    23ea:	4b7f      	ldr	r3, [pc, #508]	; (25e8 <_vfiprintf_r+0x218>)
    23ec:	429f      	cmp	r7, r3
    23ee:	d15c      	bne.n	24aa <_vfiprintf_r+0xda>
    23f0:	6877      	ldr	r7, [r6, #4]
    23f2:	89bb      	ldrh	r3, [r7, #12]
    23f4:	071b      	lsls	r3, r3, #28
    23f6:	d562      	bpl.n	24be <_vfiprintf_r+0xee>
    23f8:	693b      	ldr	r3, [r7, #16]
    23fa:	2b00      	cmp	r3, #0
    23fc:	d05f      	beq.n	24be <_vfiprintf_r+0xee>
    23fe:	2300      	movs	r3, #0
    2400:	ad06      	add	r5, sp, #24
    2402:	616b      	str	r3, [r5, #20]
    2404:	3320      	adds	r3, #32
    2406:	766b      	strb	r3, [r5, #25]
    2408:	3310      	adds	r3, #16
    240a:	76ab      	strb	r3, [r5, #26]
    240c:	9402      	str	r4, [sp, #8]
    240e:	9c02      	ldr	r4, [sp, #8]
    2410:	7823      	ldrb	r3, [r4, #0]
    2412:	2b00      	cmp	r3, #0
    2414:	d15d      	bne.n	24d2 <_vfiprintf_r+0x102>
    2416:	9b02      	ldr	r3, [sp, #8]
    2418:	1ae3      	subs	r3, r4, r3
    241a:	9304      	str	r3, [sp, #16]
    241c:	d00d      	beq.n	243a <_vfiprintf_r+0x6a>
    241e:	9b04      	ldr	r3, [sp, #16]
    2420:	9a02      	ldr	r2, [sp, #8]
    2422:	0039      	movs	r1, r7
    2424:	0030      	movs	r0, r6
    2426:	f7ff ffc0 	bl	23aa <__sfputs_r>
    242a:	1c43      	adds	r3, r0, #1
    242c:	d100      	bne.n	2430 <_vfiprintf_r+0x60>
    242e:	e0cc      	b.n	25ca <_vfiprintf_r+0x1fa>
    2430:	696a      	ldr	r2, [r5, #20]
    2432:	9b04      	ldr	r3, [sp, #16]
    2434:	4694      	mov	ip, r2
    2436:	4463      	add	r3, ip
    2438:	616b      	str	r3, [r5, #20]
    243a:	7823      	ldrb	r3, [r4, #0]
    243c:	2b00      	cmp	r3, #0
    243e:	d100      	bne.n	2442 <_vfiprintf_r+0x72>
    2440:	e0c3      	b.n	25ca <_vfiprintf_r+0x1fa>
    2442:	2201      	movs	r2, #1
    2444:	2300      	movs	r3, #0
    2446:	4252      	negs	r2, r2
    2448:	606a      	str	r2, [r5, #4]
    244a:	a902      	add	r1, sp, #8
    244c:	3254      	adds	r2, #84	; 0x54
    244e:	1852      	adds	r2, r2, r1
    2450:	3401      	adds	r4, #1
    2452:	602b      	str	r3, [r5, #0]
    2454:	60eb      	str	r3, [r5, #12]
    2456:	60ab      	str	r3, [r5, #8]
    2458:	7013      	strb	r3, [r2, #0]
    245a:	65ab      	str	r3, [r5, #88]	; 0x58
    245c:	7821      	ldrb	r1, [r4, #0]
    245e:	2205      	movs	r2, #5
    2460:	4862      	ldr	r0, [pc, #392]	; (25ec <_vfiprintf_r+0x21c>)
    2462:	f000 fb15 	bl	2a90 <memchr>
    2466:	1c63      	adds	r3, r4, #1
    2468:	469c      	mov	ip, r3
    246a:	2800      	cmp	r0, #0
    246c:	d135      	bne.n	24da <_vfiprintf_r+0x10a>
    246e:	6829      	ldr	r1, [r5, #0]
    2470:	06cb      	lsls	r3, r1, #27
    2472:	d504      	bpl.n	247e <_vfiprintf_r+0xae>
    2474:	2353      	movs	r3, #83	; 0x53
    2476:	aa02      	add	r2, sp, #8
    2478:	3020      	adds	r0, #32
    247a:	189b      	adds	r3, r3, r2
    247c:	7018      	strb	r0, [r3, #0]
    247e:	070b      	lsls	r3, r1, #28
    2480:	d504      	bpl.n	248c <_vfiprintf_r+0xbc>
    2482:	2353      	movs	r3, #83	; 0x53
    2484:	202b      	movs	r0, #43	; 0x2b
    2486:	aa02      	add	r2, sp, #8
    2488:	189b      	adds	r3, r3, r2
    248a:	7018      	strb	r0, [r3, #0]
    248c:	7823      	ldrb	r3, [r4, #0]
    248e:	2b2a      	cmp	r3, #42	; 0x2a
    2490:	d02c      	beq.n	24ec <_vfiprintf_r+0x11c>
    2492:	2000      	movs	r0, #0
    2494:	210a      	movs	r1, #10
    2496:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2498:	7822      	ldrb	r2, [r4, #0]
    249a:	3a30      	subs	r2, #48	; 0x30
    249c:	2a09      	cmp	r2, #9
    249e:	d800      	bhi.n	24a2 <_vfiprintf_r+0xd2>
    24a0:	e06b      	b.n	257a <_vfiprintf_r+0x1aa>
    24a2:	2800      	cmp	r0, #0
    24a4:	d02a      	beq.n	24fc <_vfiprintf_r+0x12c>
    24a6:	9309      	str	r3, [sp, #36]	; 0x24
    24a8:	e028      	b.n	24fc <_vfiprintf_r+0x12c>
    24aa:	4b51      	ldr	r3, [pc, #324]	; (25f0 <_vfiprintf_r+0x220>)
    24ac:	429f      	cmp	r7, r3
    24ae:	d101      	bne.n	24b4 <_vfiprintf_r+0xe4>
    24b0:	68b7      	ldr	r7, [r6, #8]
    24b2:	e79e      	b.n	23f2 <_vfiprintf_r+0x22>
    24b4:	4b4f      	ldr	r3, [pc, #316]	; (25f4 <_vfiprintf_r+0x224>)
    24b6:	429f      	cmp	r7, r3
    24b8:	d19b      	bne.n	23f2 <_vfiprintf_r+0x22>
    24ba:	68f7      	ldr	r7, [r6, #12]
    24bc:	e799      	b.n	23f2 <_vfiprintf_r+0x22>
    24be:	0039      	movs	r1, r7
    24c0:	0030      	movs	r0, r6
    24c2:	f7ff fc45 	bl	1d50 <__swsetup_r>
    24c6:	2800      	cmp	r0, #0
    24c8:	d099      	beq.n	23fe <_vfiprintf_r+0x2e>
    24ca:	2001      	movs	r0, #1
    24cc:	4240      	negs	r0, r0
    24ce:	b01f      	add	sp, #124	; 0x7c
    24d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24d2:	2b25      	cmp	r3, #37	; 0x25
    24d4:	d09f      	beq.n	2416 <_vfiprintf_r+0x46>
    24d6:	3401      	adds	r4, #1
    24d8:	e79a      	b.n	2410 <_vfiprintf_r+0x40>
    24da:	4b44      	ldr	r3, [pc, #272]	; (25ec <_vfiprintf_r+0x21c>)
    24dc:	6829      	ldr	r1, [r5, #0]
    24de:	1ac0      	subs	r0, r0, r3
    24e0:	2301      	movs	r3, #1
    24e2:	4083      	lsls	r3, r0
    24e4:	430b      	orrs	r3, r1
    24e6:	602b      	str	r3, [r5, #0]
    24e8:	4664      	mov	r4, ip
    24ea:	e7b7      	b.n	245c <_vfiprintf_r+0x8c>
    24ec:	9b05      	ldr	r3, [sp, #20]
    24ee:	1d18      	adds	r0, r3, #4
    24f0:	681b      	ldr	r3, [r3, #0]
    24f2:	9005      	str	r0, [sp, #20]
    24f4:	2b00      	cmp	r3, #0
    24f6:	db3a      	blt.n	256e <_vfiprintf_r+0x19e>
    24f8:	9309      	str	r3, [sp, #36]	; 0x24
    24fa:	4664      	mov	r4, ip
    24fc:	7823      	ldrb	r3, [r4, #0]
    24fe:	2b2e      	cmp	r3, #46	; 0x2e
    2500:	d10b      	bne.n	251a <_vfiprintf_r+0x14a>
    2502:	7863      	ldrb	r3, [r4, #1]
    2504:	1c62      	adds	r2, r4, #1
    2506:	2b2a      	cmp	r3, #42	; 0x2a
    2508:	d13f      	bne.n	258a <_vfiprintf_r+0x1ba>
    250a:	9b05      	ldr	r3, [sp, #20]
    250c:	3402      	adds	r4, #2
    250e:	1d1a      	adds	r2, r3, #4
    2510:	681b      	ldr	r3, [r3, #0]
    2512:	9205      	str	r2, [sp, #20]
    2514:	2b00      	cmp	r3, #0
    2516:	db35      	blt.n	2584 <_vfiprintf_r+0x1b4>
    2518:	9307      	str	r3, [sp, #28]
    251a:	7821      	ldrb	r1, [r4, #0]
    251c:	2203      	movs	r2, #3
    251e:	4836      	ldr	r0, [pc, #216]	; (25f8 <_vfiprintf_r+0x228>)
    2520:	f000 fab6 	bl	2a90 <memchr>
    2524:	2800      	cmp	r0, #0
    2526:	d007      	beq.n	2538 <_vfiprintf_r+0x168>
    2528:	4b33      	ldr	r3, [pc, #204]	; (25f8 <_vfiprintf_r+0x228>)
    252a:	682a      	ldr	r2, [r5, #0]
    252c:	1ac0      	subs	r0, r0, r3
    252e:	2340      	movs	r3, #64	; 0x40
    2530:	4083      	lsls	r3, r0
    2532:	4313      	orrs	r3, r2
    2534:	602b      	str	r3, [r5, #0]
    2536:	3401      	adds	r4, #1
    2538:	7821      	ldrb	r1, [r4, #0]
    253a:	1c63      	adds	r3, r4, #1
    253c:	2206      	movs	r2, #6
    253e:	482f      	ldr	r0, [pc, #188]	; (25fc <_vfiprintf_r+0x22c>)
    2540:	9302      	str	r3, [sp, #8]
    2542:	7629      	strb	r1, [r5, #24]
    2544:	f000 faa4 	bl	2a90 <memchr>
    2548:	2800      	cmp	r0, #0
    254a:	d044      	beq.n	25d6 <_vfiprintf_r+0x206>
    254c:	4b2c      	ldr	r3, [pc, #176]	; (2600 <_vfiprintf_r+0x230>)
    254e:	2b00      	cmp	r3, #0
    2550:	d12f      	bne.n	25b2 <_vfiprintf_r+0x1e2>
    2552:	6829      	ldr	r1, [r5, #0]
    2554:	9b05      	ldr	r3, [sp, #20]
    2556:	2207      	movs	r2, #7
    2558:	05c9      	lsls	r1, r1, #23
    255a:	d528      	bpl.n	25ae <_vfiprintf_r+0x1de>
    255c:	189b      	adds	r3, r3, r2
    255e:	4393      	bics	r3, r2
    2560:	3308      	adds	r3, #8
    2562:	9305      	str	r3, [sp, #20]
    2564:	696b      	ldr	r3, [r5, #20]
    2566:	9a03      	ldr	r2, [sp, #12]
    2568:	189b      	adds	r3, r3, r2
    256a:	616b      	str	r3, [r5, #20]
    256c:	e74f      	b.n	240e <_vfiprintf_r+0x3e>
    256e:	425b      	negs	r3, r3
    2570:	60eb      	str	r3, [r5, #12]
    2572:	2302      	movs	r3, #2
    2574:	430b      	orrs	r3, r1
    2576:	602b      	str	r3, [r5, #0]
    2578:	e7bf      	b.n	24fa <_vfiprintf_r+0x12a>
    257a:	434b      	muls	r3, r1
    257c:	3401      	adds	r4, #1
    257e:	189b      	adds	r3, r3, r2
    2580:	2001      	movs	r0, #1
    2582:	e789      	b.n	2498 <_vfiprintf_r+0xc8>
    2584:	2301      	movs	r3, #1
    2586:	425b      	negs	r3, r3
    2588:	e7c6      	b.n	2518 <_vfiprintf_r+0x148>
    258a:	2300      	movs	r3, #0
    258c:	0014      	movs	r4, r2
    258e:	200a      	movs	r0, #10
    2590:	001a      	movs	r2, r3
    2592:	606b      	str	r3, [r5, #4]
    2594:	7821      	ldrb	r1, [r4, #0]
    2596:	3930      	subs	r1, #48	; 0x30
    2598:	2909      	cmp	r1, #9
    259a:	d903      	bls.n	25a4 <_vfiprintf_r+0x1d4>
    259c:	2b00      	cmp	r3, #0
    259e:	d0bc      	beq.n	251a <_vfiprintf_r+0x14a>
    25a0:	9207      	str	r2, [sp, #28]
    25a2:	e7ba      	b.n	251a <_vfiprintf_r+0x14a>
    25a4:	4342      	muls	r2, r0
    25a6:	3401      	adds	r4, #1
    25a8:	1852      	adds	r2, r2, r1
    25aa:	2301      	movs	r3, #1
    25ac:	e7f2      	b.n	2594 <_vfiprintf_r+0x1c4>
    25ae:	3307      	adds	r3, #7
    25b0:	e7d5      	b.n	255e <_vfiprintf_r+0x18e>
    25b2:	ab05      	add	r3, sp, #20
    25b4:	9300      	str	r3, [sp, #0]
    25b6:	003a      	movs	r2, r7
    25b8:	4b12      	ldr	r3, [pc, #72]	; (2604 <_vfiprintf_r+0x234>)
    25ba:	0029      	movs	r1, r5
    25bc:	0030      	movs	r0, r6
    25be:	e000      	b.n	25c2 <_vfiprintf_r+0x1f2>
    25c0:	bf00      	nop
    25c2:	9003      	str	r0, [sp, #12]
    25c4:	9b03      	ldr	r3, [sp, #12]
    25c6:	3301      	adds	r3, #1
    25c8:	d1cc      	bne.n	2564 <_vfiprintf_r+0x194>
    25ca:	89bb      	ldrh	r3, [r7, #12]
    25cc:	065b      	lsls	r3, r3, #25
    25ce:	d500      	bpl.n	25d2 <_vfiprintf_r+0x202>
    25d0:	e77b      	b.n	24ca <_vfiprintf_r+0xfa>
    25d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    25d4:	e77b      	b.n	24ce <_vfiprintf_r+0xfe>
    25d6:	ab05      	add	r3, sp, #20
    25d8:	9300      	str	r3, [sp, #0]
    25da:	003a      	movs	r2, r7
    25dc:	4b09      	ldr	r3, [pc, #36]	; (2604 <_vfiprintf_r+0x234>)
    25de:	0029      	movs	r1, r5
    25e0:	0030      	movs	r0, r6
    25e2:	f000 f87f 	bl	26e4 <_printf_i>
    25e6:	e7ec      	b.n	25c2 <_vfiprintf_r+0x1f2>
    25e8:	00002c4c 	.word	0x00002c4c
    25ec:	00002c8c 	.word	0x00002c8c
    25f0:	00002c6c 	.word	0x00002c6c
    25f4:	00002c2c 	.word	0x00002c2c
    25f8:	00002c92 	.word	0x00002c92
    25fc:	00002c96 	.word	0x00002c96
    2600:	00000000 	.word	0x00000000
    2604:	000023ab 	.word	0x000023ab

00002608 <_printf_common>:
    2608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    260a:	0015      	movs	r5, r2
    260c:	9301      	str	r3, [sp, #4]
    260e:	688a      	ldr	r2, [r1, #8]
    2610:	690b      	ldr	r3, [r1, #16]
    2612:	9000      	str	r0, [sp, #0]
    2614:	000c      	movs	r4, r1
    2616:	4293      	cmp	r3, r2
    2618:	da00      	bge.n	261c <_printf_common+0x14>
    261a:	0013      	movs	r3, r2
    261c:	0022      	movs	r2, r4
    261e:	602b      	str	r3, [r5, #0]
    2620:	3243      	adds	r2, #67	; 0x43
    2622:	7812      	ldrb	r2, [r2, #0]
    2624:	2a00      	cmp	r2, #0
    2626:	d001      	beq.n	262c <_printf_common+0x24>
    2628:	3301      	adds	r3, #1
    262a:	602b      	str	r3, [r5, #0]
    262c:	6823      	ldr	r3, [r4, #0]
    262e:	069b      	lsls	r3, r3, #26
    2630:	d502      	bpl.n	2638 <_printf_common+0x30>
    2632:	682b      	ldr	r3, [r5, #0]
    2634:	3302      	adds	r3, #2
    2636:	602b      	str	r3, [r5, #0]
    2638:	2706      	movs	r7, #6
    263a:	6823      	ldr	r3, [r4, #0]
    263c:	401f      	ands	r7, r3
    263e:	d027      	beq.n	2690 <_printf_common+0x88>
    2640:	0023      	movs	r3, r4
    2642:	3343      	adds	r3, #67	; 0x43
    2644:	781b      	ldrb	r3, [r3, #0]
    2646:	1e5a      	subs	r2, r3, #1
    2648:	4193      	sbcs	r3, r2
    264a:	6822      	ldr	r2, [r4, #0]
    264c:	0692      	lsls	r2, r2, #26
    264e:	d430      	bmi.n	26b2 <_printf_common+0xaa>
    2650:	0022      	movs	r2, r4
    2652:	9901      	ldr	r1, [sp, #4]
    2654:	3243      	adds	r2, #67	; 0x43
    2656:	9800      	ldr	r0, [sp, #0]
    2658:	9e08      	ldr	r6, [sp, #32]
    265a:	47b0      	blx	r6
    265c:	1c43      	adds	r3, r0, #1
    265e:	d025      	beq.n	26ac <_printf_common+0xa4>
    2660:	2306      	movs	r3, #6
    2662:	6820      	ldr	r0, [r4, #0]
    2664:	682a      	ldr	r2, [r5, #0]
    2666:	68e1      	ldr	r1, [r4, #12]
    2668:	4003      	ands	r3, r0
    266a:	2500      	movs	r5, #0
    266c:	2b04      	cmp	r3, #4
    266e:	d103      	bne.n	2678 <_printf_common+0x70>
    2670:	1a8d      	subs	r5, r1, r2
    2672:	43eb      	mvns	r3, r5
    2674:	17db      	asrs	r3, r3, #31
    2676:	401d      	ands	r5, r3
    2678:	68a3      	ldr	r3, [r4, #8]
    267a:	6922      	ldr	r2, [r4, #16]
    267c:	4293      	cmp	r3, r2
    267e:	dd01      	ble.n	2684 <_printf_common+0x7c>
    2680:	1a9b      	subs	r3, r3, r2
    2682:	18ed      	adds	r5, r5, r3
    2684:	2700      	movs	r7, #0
    2686:	42bd      	cmp	r5, r7
    2688:	d120      	bne.n	26cc <_printf_common+0xc4>
    268a:	2000      	movs	r0, #0
    268c:	e010      	b.n	26b0 <_printf_common+0xa8>
    268e:	3701      	adds	r7, #1
    2690:	68e3      	ldr	r3, [r4, #12]
    2692:	682a      	ldr	r2, [r5, #0]
    2694:	1a9b      	subs	r3, r3, r2
    2696:	429f      	cmp	r7, r3
    2698:	dad2      	bge.n	2640 <_printf_common+0x38>
    269a:	0022      	movs	r2, r4
    269c:	2301      	movs	r3, #1
    269e:	3219      	adds	r2, #25
    26a0:	9901      	ldr	r1, [sp, #4]
    26a2:	9800      	ldr	r0, [sp, #0]
    26a4:	9e08      	ldr	r6, [sp, #32]
    26a6:	47b0      	blx	r6
    26a8:	1c43      	adds	r3, r0, #1
    26aa:	d1f0      	bne.n	268e <_printf_common+0x86>
    26ac:	2001      	movs	r0, #1
    26ae:	4240      	negs	r0, r0
    26b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    26b2:	2030      	movs	r0, #48	; 0x30
    26b4:	18e1      	adds	r1, r4, r3
    26b6:	3143      	adds	r1, #67	; 0x43
    26b8:	7008      	strb	r0, [r1, #0]
    26ba:	0021      	movs	r1, r4
    26bc:	1c5a      	adds	r2, r3, #1
    26be:	3145      	adds	r1, #69	; 0x45
    26c0:	7809      	ldrb	r1, [r1, #0]
    26c2:	18a2      	adds	r2, r4, r2
    26c4:	3243      	adds	r2, #67	; 0x43
    26c6:	3302      	adds	r3, #2
    26c8:	7011      	strb	r1, [r2, #0]
    26ca:	e7c1      	b.n	2650 <_printf_common+0x48>
    26cc:	0022      	movs	r2, r4
    26ce:	2301      	movs	r3, #1
    26d0:	321a      	adds	r2, #26
    26d2:	9901      	ldr	r1, [sp, #4]
    26d4:	9800      	ldr	r0, [sp, #0]
    26d6:	9e08      	ldr	r6, [sp, #32]
    26d8:	47b0      	blx	r6
    26da:	1c43      	adds	r3, r0, #1
    26dc:	d0e6      	beq.n	26ac <_printf_common+0xa4>
    26de:	3701      	adds	r7, #1
    26e0:	e7d1      	b.n	2686 <_printf_common+0x7e>
	...

000026e4 <_printf_i>:
    26e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26e6:	b08b      	sub	sp, #44	; 0x2c
    26e8:	9206      	str	r2, [sp, #24]
    26ea:	000a      	movs	r2, r1
    26ec:	3243      	adds	r2, #67	; 0x43
    26ee:	9307      	str	r3, [sp, #28]
    26f0:	9005      	str	r0, [sp, #20]
    26f2:	9204      	str	r2, [sp, #16]
    26f4:	7e0a      	ldrb	r2, [r1, #24]
    26f6:	000c      	movs	r4, r1
    26f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    26fa:	2a6e      	cmp	r2, #110	; 0x6e
    26fc:	d100      	bne.n	2700 <_printf_i+0x1c>
    26fe:	e08f      	b.n	2820 <_printf_i+0x13c>
    2700:	d817      	bhi.n	2732 <_printf_i+0x4e>
    2702:	2a63      	cmp	r2, #99	; 0x63
    2704:	d02c      	beq.n	2760 <_printf_i+0x7c>
    2706:	d808      	bhi.n	271a <_printf_i+0x36>
    2708:	2a00      	cmp	r2, #0
    270a:	d100      	bne.n	270e <_printf_i+0x2a>
    270c:	e099      	b.n	2842 <_printf_i+0x15e>
    270e:	2a58      	cmp	r2, #88	; 0x58
    2710:	d054      	beq.n	27bc <_printf_i+0xd8>
    2712:	0026      	movs	r6, r4
    2714:	3642      	adds	r6, #66	; 0x42
    2716:	7032      	strb	r2, [r6, #0]
    2718:	e029      	b.n	276e <_printf_i+0x8a>
    271a:	2a64      	cmp	r2, #100	; 0x64
    271c:	d001      	beq.n	2722 <_printf_i+0x3e>
    271e:	2a69      	cmp	r2, #105	; 0x69
    2720:	d1f7      	bne.n	2712 <_printf_i+0x2e>
    2722:	6821      	ldr	r1, [r4, #0]
    2724:	681a      	ldr	r2, [r3, #0]
    2726:	0608      	lsls	r0, r1, #24
    2728:	d523      	bpl.n	2772 <_printf_i+0x8e>
    272a:	1d11      	adds	r1, r2, #4
    272c:	6019      	str	r1, [r3, #0]
    272e:	6815      	ldr	r5, [r2, #0]
    2730:	e025      	b.n	277e <_printf_i+0x9a>
    2732:	2a73      	cmp	r2, #115	; 0x73
    2734:	d100      	bne.n	2738 <_printf_i+0x54>
    2736:	e088      	b.n	284a <_printf_i+0x166>
    2738:	d808      	bhi.n	274c <_printf_i+0x68>
    273a:	2a6f      	cmp	r2, #111	; 0x6f
    273c:	d029      	beq.n	2792 <_printf_i+0xae>
    273e:	2a70      	cmp	r2, #112	; 0x70
    2740:	d1e7      	bne.n	2712 <_printf_i+0x2e>
    2742:	2220      	movs	r2, #32
    2744:	6809      	ldr	r1, [r1, #0]
    2746:	430a      	orrs	r2, r1
    2748:	6022      	str	r2, [r4, #0]
    274a:	e003      	b.n	2754 <_printf_i+0x70>
    274c:	2a75      	cmp	r2, #117	; 0x75
    274e:	d020      	beq.n	2792 <_printf_i+0xae>
    2750:	2a78      	cmp	r2, #120	; 0x78
    2752:	d1de      	bne.n	2712 <_printf_i+0x2e>
    2754:	0022      	movs	r2, r4
    2756:	2178      	movs	r1, #120	; 0x78
    2758:	3245      	adds	r2, #69	; 0x45
    275a:	7011      	strb	r1, [r2, #0]
    275c:	4a6c      	ldr	r2, [pc, #432]	; (2910 <_printf_i+0x22c>)
    275e:	e030      	b.n	27c2 <_printf_i+0xde>
    2760:	000e      	movs	r6, r1
    2762:	681a      	ldr	r2, [r3, #0]
    2764:	3642      	adds	r6, #66	; 0x42
    2766:	1d11      	adds	r1, r2, #4
    2768:	6019      	str	r1, [r3, #0]
    276a:	6813      	ldr	r3, [r2, #0]
    276c:	7033      	strb	r3, [r6, #0]
    276e:	2301      	movs	r3, #1
    2770:	e079      	b.n	2866 <_printf_i+0x182>
    2772:	0649      	lsls	r1, r1, #25
    2774:	d5d9      	bpl.n	272a <_printf_i+0x46>
    2776:	1d11      	adds	r1, r2, #4
    2778:	6019      	str	r1, [r3, #0]
    277a:	2300      	movs	r3, #0
    277c:	5ed5      	ldrsh	r5, [r2, r3]
    277e:	2d00      	cmp	r5, #0
    2780:	da03      	bge.n	278a <_printf_i+0xa6>
    2782:	232d      	movs	r3, #45	; 0x2d
    2784:	9a04      	ldr	r2, [sp, #16]
    2786:	426d      	negs	r5, r5
    2788:	7013      	strb	r3, [r2, #0]
    278a:	4b62      	ldr	r3, [pc, #392]	; (2914 <_printf_i+0x230>)
    278c:	270a      	movs	r7, #10
    278e:	9303      	str	r3, [sp, #12]
    2790:	e02f      	b.n	27f2 <_printf_i+0x10e>
    2792:	6820      	ldr	r0, [r4, #0]
    2794:	6819      	ldr	r1, [r3, #0]
    2796:	0605      	lsls	r5, r0, #24
    2798:	d503      	bpl.n	27a2 <_printf_i+0xbe>
    279a:	1d08      	adds	r0, r1, #4
    279c:	6018      	str	r0, [r3, #0]
    279e:	680d      	ldr	r5, [r1, #0]
    27a0:	e005      	b.n	27ae <_printf_i+0xca>
    27a2:	0640      	lsls	r0, r0, #25
    27a4:	d5f9      	bpl.n	279a <_printf_i+0xb6>
    27a6:	680d      	ldr	r5, [r1, #0]
    27a8:	1d08      	adds	r0, r1, #4
    27aa:	6018      	str	r0, [r3, #0]
    27ac:	b2ad      	uxth	r5, r5
    27ae:	4b59      	ldr	r3, [pc, #356]	; (2914 <_printf_i+0x230>)
    27b0:	2708      	movs	r7, #8
    27b2:	9303      	str	r3, [sp, #12]
    27b4:	2a6f      	cmp	r2, #111	; 0x6f
    27b6:	d018      	beq.n	27ea <_printf_i+0x106>
    27b8:	270a      	movs	r7, #10
    27ba:	e016      	b.n	27ea <_printf_i+0x106>
    27bc:	3145      	adds	r1, #69	; 0x45
    27be:	700a      	strb	r2, [r1, #0]
    27c0:	4a54      	ldr	r2, [pc, #336]	; (2914 <_printf_i+0x230>)
    27c2:	9203      	str	r2, [sp, #12]
    27c4:	681a      	ldr	r2, [r3, #0]
    27c6:	6821      	ldr	r1, [r4, #0]
    27c8:	1d10      	adds	r0, r2, #4
    27ca:	6018      	str	r0, [r3, #0]
    27cc:	6815      	ldr	r5, [r2, #0]
    27ce:	0608      	lsls	r0, r1, #24
    27d0:	d522      	bpl.n	2818 <_printf_i+0x134>
    27d2:	07cb      	lsls	r3, r1, #31
    27d4:	d502      	bpl.n	27dc <_printf_i+0xf8>
    27d6:	2320      	movs	r3, #32
    27d8:	4319      	orrs	r1, r3
    27da:	6021      	str	r1, [r4, #0]
    27dc:	2710      	movs	r7, #16
    27de:	2d00      	cmp	r5, #0
    27e0:	d103      	bne.n	27ea <_printf_i+0x106>
    27e2:	2320      	movs	r3, #32
    27e4:	6822      	ldr	r2, [r4, #0]
    27e6:	439a      	bics	r2, r3
    27e8:	6022      	str	r2, [r4, #0]
    27ea:	0023      	movs	r3, r4
    27ec:	2200      	movs	r2, #0
    27ee:	3343      	adds	r3, #67	; 0x43
    27f0:	701a      	strb	r2, [r3, #0]
    27f2:	6863      	ldr	r3, [r4, #4]
    27f4:	60a3      	str	r3, [r4, #8]
    27f6:	2b00      	cmp	r3, #0
    27f8:	db5c      	blt.n	28b4 <_printf_i+0x1d0>
    27fa:	2204      	movs	r2, #4
    27fc:	6821      	ldr	r1, [r4, #0]
    27fe:	4391      	bics	r1, r2
    2800:	6021      	str	r1, [r4, #0]
    2802:	2d00      	cmp	r5, #0
    2804:	d158      	bne.n	28b8 <_printf_i+0x1d4>
    2806:	9e04      	ldr	r6, [sp, #16]
    2808:	2b00      	cmp	r3, #0
    280a:	d064      	beq.n	28d6 <_printf_i+0x1f2>
    280c:	0026      	movs	r6, r4
    280e:	9b03      	ldr	r3, [sp, #12]
    2810:	3642      	adds	r6, #66	; 0x42
    2812:	781b      	ldrb	r3, [r3, #0]
    2814:	7033      	strb	r3, [r6, #0]
    2816:	e05e      	b.n	28d6 <_printf_i+0x1f2>
    2818:	0648      	lsls	r0, r1, #25
    281a:	d5da      	bpl.n	27d2 <_printf_i+0xee>
    281c:	b2ad      	uxth	r5, r5
    281e:	e7d8      	b.n	27d2 <_printf_i+0xee>
    2820:	6809      	ldr	r1, [r1, #0]
    2822:	681a      	ldr	r2, [r3, #0]
    2824:	0608      	lsls	r0, r1, #24
    2826:	d505      	bpl.n	2834 <_printf_i+0x150>
    2828:	1d11      	adds	r1, r2, #4
    282a:	6019      	str	r1, [r3, #0]
    282c:	6813      	ldr	r3, [r2, #0]
    282e:	6962      	ldr	r2, [r4, #20]
    2830:	601a      	str	r2, [r3, #0]
    2832:	e006      	b.n	2842 <_printf_i+0x15e>
    2834:	0649      	lsls	r1, r1, #25
    2836:	d5f7      	bpl.n	2828 <_printf_i+0x144>
    2838:	1d11      	adds	r1, r2, #4
    283a:	6019      	str	r1, [r3, #0]
    283c:	6813      	ldr	r3, [r2, #0]
    283e:	8aa2      	ldrh	r2, [r4, #20]
    2840:	801a      	strh	r2, [r3, #0]
    2842:	2300      	movs	r3, #0
    2844:	9e04      	ldr	r6, [sp, #16]
    2846:	6123      	str	r3, [r4, #16]
    2848:	e054      	b.n	28f4 <_printf_i+0x210>
    284a:	681a      	ldr	r2, [r3, #0]
    284c:	1d11      	adds	r1, r2, #4
    284e:	6019      	str	r1, [r3, #0]
    2850:	6816      	ldr	r6, [r2, #0]
    2852:	2100      	movs	r1, #0
    2854:	6862      	ldr	r2, [r4, #4]
    2856:	0030      	movs	r0, r6
    2858:	f000 f91a 	bl	2a90 <memchr>
    285c:	2800      	cmp	r0, #0
    285e:	d001      	beq.n	2864 <_printf_i+0x180>
    2860:	1b80      	subs	r0, r0, r6
    2862:	6060      	str	r0, [r4, #4]
    2864:	6863      	ldr	r3, [r4, #4]
    2866:	6123      	str	r3, [r4, #16]
    2868:	2300      	movs	r3, #0
    286a:	9a04      	ldr	r2, [sp, #16]
    286c:	7013      	strb	r3, [r2, #0]
    286e:	e041      	b.n	28f4 <_printf_i+0x210>
    2870:	6923      	ldr	r3, [r4, #16]
    2872:	0032      	movs	r2, r6
    2874:	9906      	ldr	r1, [sp, #24]
    2876:	9805      	ldr	r0, [sp, #20]
    2878:	9d07      	ldr	r5, [sp, #28]
    287a:	47a8      	blx	r5
    287c:	1c43      	adds	r3, r0, #1
    287e:	d043      	beq.n	2908 <_printf_i+0x224>
    2880:	6823      	ldr	r3, [r4, #0]
    2882:	2500      	movs	r5, #0
    2884:	079b      	lsls	r3, r3, #30
    2886:	d40f      	bmi.n	28a8 <_printf_i+0x1c4>
    2888:	9b09      	ldr	r3, [sp, #36]	; 0x24
    288a:	68e0      	ldr	r0, [r4, #12]
    288c:	4298      	cmp	r0, r3
    288e:	da3d      	bge.n	290c <_printf_i+0x228>
    2890:	0018      	movs	r0, r3
    2892:	e03b      	b.n	290c <_printf_i+0x228>
    2894:	0022      	movs	r2, r4
    2896:	2301      	movs	r3, #1
    2898:	3219      	adds	r2, #25
    289a:	9906      	ldr	r1, [sp, #24]
    289c:	9805      	ldr	r0, [sp, #20]
    289e:	9e07      	ldr	r6, [sp, #28]
    28a0:	47b0      	blx	r6
    28a2:	1c43      	adds	r3, r0, #1
    28a4:	d030      	beq.n	2908 <_printf_i+0x224>
    28a6:	3501      	adds	r5, #1
    28a8:	68e3      	ldr	r3, [r4, #12]
    28aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    28ac:	1a9b      	subs	r3, r3, r2
    28ae:	429d      	cmp	r5, r3
    28b0:	dbf0      	blt.n	2894 <_printf_i+0x1b0>
    28b2:	e7e9      	b.n	2888 <_printf_i+0x1a4>
    28b4:	2d00      	cmp	r5, #0
    28b6:	d0a9      	beq.n	280c <_printf_i+0x128>
    28b8:	9e04      	ldr	r6, [sp, #16]
    28ba:	0028      	movs	r0, r5
    28bc:	0039      	movs	r1, r7
    28be:	f7ff f80b 	bl	18d8 <__aeabi_uidivmod>
    28c2:	9b03      	ldr	r3, [sp, #12]
    28c4:	3e01      	subs	r6, #1
    28c6:	5c5b      	ldrb	r3, [r3, r1]
    28c8:	0028      	movs	r0, r5
    28ca:	7033      	strb	r3, [r6, #0]
    28cc:	0039      	movs	r1, r7
    28ce:	f7fe ff7d 	bl	17cc <__udivsi3>
    28d2:	1e05      	subs	r5, r0, #0
    28d4:	d1f1      	bne.n	28ba <_printf_i+0x1d6>
    28d6:	2f08      	cmp	r7, #8
    28d8:	d109      	bne.n	28ee <_printf_i+0x20a>
    28da:	6823      	ldr	r3, [r4, #0]
    28dc:	07db      	lsls	r3, r3, #31
    28de:	d506      	bpl.n	28ee <_printf_i+0x20a>
    28e0:	6863      	ldr	r3, [r4, #4]
    28e2:	6922      	ldr	r2, [r4, #16]
    28e4:	4293      	cmp	r3, r2
    28e6:	dc02      	bgt.n	28ee <_printf_i+0x20a>
    28e8:	2330      	movs	r3, #48	; 0x30
    28ea:	3e01      	subs	r6, #1
    28ec:	7033      	strb	r3, [r6, #0]
    28ee:	9b04      	ldr	r3, [sp, #16]
    28f0:	1b9b      	subs	r3, r3, r6
    28f2:	6123      	str	r3, [r4, #16]
    28f4:	9b07      	ldr	r3, [sp, #28]
    28f6:	aa09      	add	r2, sp, #36	; 0x24
    28f8:	9300      	str	r3, [sp, #0]
    28fa:	0021      	movs	r1, r4
    28fc:	9b06      	ldr	r3, [sp, #24]
    28fe:	9805      	ldr	r0, [sp, #20]
    2900:	f7ff fe82 	bl	2608 <_printf_common>
    2904:	1c43      	adds	r3, r0, #1
    2906:	d1b3      	bne.n	2870 <_printf_i+0x18c>
    2908:	2001      	movs	r0, #1
    290a:	4240      	negs	r0, r0
    290c:	b00b      	add	sp, #44	; 0x2c
    290e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2910:	00002cae 	.word	0x00002cae
    2914:	00002c9d 	.word	0x00002c9d

00002918 <_sbrk_r>:
    2918:	2300      	movs	r3, #0
    291a:	b570      	push	{r4, r5, r6, lr}
    291c:	4c06      	ldr	r4, [pc, #24]	; (2938 <_sbrk_r+0x20>)
    291e:	0005      	movs	r5, r0
    2920:	0008      	movs	r0, r1
    2922:	6023      	str	r3, [r4, #0]
    2924:	f7fe fab0 	bl	e88 <_sbrk>
    2928:	1c43      	adds	r3, r0, #1
    292a:	d103      	bne.n	2934 <_sbrk_r+0x1c>
    292c:	6823      	ldr	r3, [r4, #0]
    292e:	2b00      	cmp	r3, #0
    2930:	d000      	beq.n	2934 <_sbrk_r+0x1c>
    2932:	602b      	str	r3, [r5, #0]
    2934:	bd70      	pop	{r4, r5, r6, pc}
    2936:	46c0      	nop			; (mov r8, r8)
    2938:	20000254 	.word	0x20000254

0000293c <__sread>:
    293c:	b570      	push	{r4, r5, r6, lr}
    293e:	000c      	movs	r4, r1
    2940:	250e      	movs	r5, #14
    2942:	5f49      	ldrsh	r1, [r1, r5]
    2944:	f000 f8b2 	bl	2aac <_read_r>
    2948:	2800      	cmp	r0, #0
    294a:	db03      	blt.n	2954 <__sread+0x18>
    294c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    294e:	181b      	adds	r3, r3, r0
    2950:	6563      	str	r3, [r4, #84]	; 0x54
    2952:	bd70      	pop	{r4, r5, r6, pc}
    2954:	89a3      	ldrh	r3, [r4, #12]
    2956:	4a02      	ldr	r2, [pc, #8]	; (2960 <__sread+0x24>)
    2958:	4013      	ands	r3, r2
    295a:	81a3      	strh	r3, [r4, #12]
    295c:	e7f9      	b.n	2952 <__sread+0x16>
    295e:	46c0      	nop			; (mov r8, r8)
    2960:	ffffefff 	.word	0xffffefff

00002964 <__swrite>:
    2964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2966:	001f      	movs	r7, r3
    2968:	898b      	ldrh	r3, [r1, #12]
    296a:	0005      	movs	r5, r0
    296c:	000c      	movs	r4, r1
    296e:	0016      	movs	r6, r2
    2970:	05db      	lsls	r3, r3, #23
    2972:	d505      	bpl.n	2980 <__swrite+0x1c>
    2974:	230e      	movs	r3, #14
    2976:	5ec9      	ldrsh	r1, [r1, r3]
    2978:	2200      	movs	r2, #0
    297a:	2302      	movs	r3, #2
    297c:	f000 f874 	bl	2a68 <_lseek_r>
    2980:	89a3      	ldrh	r3, [r4, #12]
    2982:	4a05      	ldr	r2, [pc, #20]	; (2998 <__swrite+0x34>)
    2984:	0028      	movs	r0, r5
    2986:	4013      	ands	r3, r2
    2988:	81a3      	strh	r3, [r4, #12]
    298a:	0032      	movs	r2, r6
    298c:	230e      	movs	r3, #14
    298e:	5ee1      	ldrsh	r1, [r4, r3]
    2990:	003b      	movs	r3, r7
    2992:	f000 f81f 	bl	29d4 <_write_r>
    2996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2998:	ffffefff 	.word	0xffffefff

0000299c <__sseek>:
    299c:	b570      	push	{r4, r5, r6, lr}
    299e:	000c      	movs	r4, r1
    29a0:	250e      	movs	r5, #14
    29a2:	5f49      	ldrsh	r1, [r1, r5]
    29a4:	f000 f860 	bl	2a68 <_lseek_r>
    29a8:	89a3      	ldrh	r3, [r4, #12]
    29aa:	1c42      	adds	r2, r0, #1
    29ac:	d103      	bne.n	29b6 <__sseek+0x1a>
    29ae:	4a05      	ldr	r2, [pc, #20]	; (29c4 <__sseek+0x28>)
    29b0:	4013      	ands	r3, r2
    29b2:	81a3      	strh	r3, [r4, #12]
    29b4:	bd70      	pop	{r4, r5, r6, pc}
    29b6:	2280      	movs	r2, #128	; 0x80
    29b8:	0152      	lsls	r2, r2, #5
    29ba:	4313      	orrs	r3, r2
    29bc:	81a3      	strh	r3, [r4, #12]
    29be:	6560      	str	r0, [r4, #84]	; 0x54
    29c0:	e7f8      	b.n	29b4 <__sseek+0x18>
    29c2:	46c0      	nop			; (mov r8, r8)
    29c4:	ffffefff 	.word	0xffffefff

000029c8 <__sclose>:
    29c8:	b510      	push	{r4, lr}
    29ca:	230e      	movs	r3, #14
    29cc:	5ec9      	ldrsh	r1, [r1, r3]
    29ce:	f000 f815 	bl	29fc <_close_r>
    29d2:	bd10      	pop	{r4, pc}

000029d4 <_write_r>:
    29d4:	b570      	push	{r4, r5, r6, lr}
    29d6:	0005      	movs	r5, r0
    29d8:	0008      	movs	r0, r1
    29da:	0011      	movs	r1, r2
    29dc:	2200      	movs	r2, #0
    29de:	4c06      	ldr	r4, [pc, #24]	; (29f8 <_write_r+0x24>)
    29e0:	6022      	str	r2, [r4, #0]
    29e2:	001a      	movs	r2, r3
    29e4:	f7fe feba 	bl	175c <_write>
    29e8:	1c43      	adds	r3, r0, #1
    29ea:	d103      	bne.n	29f4 <_write_r+0x20>
    29ec:	6823      	ldr	r3, [r4, #0]
    29ee:	2b00      	cmp	r3, #0
    29f0:	d000      	beq.n	29f4 <_write_r+0x20>
    29f2:	602b      	str	r3, [r5, #0]
    29f4:	bd70      	pop	{r4, r5, r6, pc}
    29f6:	46c0      	nop			; (mov r8, r8)
    29f8:	20000254 	.word	0x20000254

000029fc <_close_r>:
    29fc:	2300      	movs	r3, #0
    29fe:	b570      	push	{r4, r5, r6, lr}
    2a00:	4c06      	ldr	r4, [pc, #24]	; (2a1c <_close_r+0x20>)
    2a02:	0005      	movs	r5, r0
    2a04:	0008      	movs	r0, r1
    2a06:	6023      	str	r3, [r4, #0]
    2a08:	f7fe fa50 	bl	eac <_close>
    2a0c:	1c43      	adds	r3, r0, #1
    2a0e:	d103      	bne.n	2a18 <_close_r+0x1c>
    2a10:	6823      	ldr	r3, [r4, #0]
    2a12:	2b00      	cmp	r3, #0
    2a14:	d000      	beq.n	2a18 <_close_r+0x1c>
    2a16:	602b      	str	r3, [r5, #0]
    2a18:	bd70      	pop	{r4, r5, r6, pc}
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	20000254 	.word	0x20000254

00002a20 <_fstat_r>:
    2a20:	2300      	movs	r3, #0
    2a22:	b570      	push	{r4, r5, r6, lr}
    2a24:	4c06      	ldr	r4, [pc, #24]	; (2a40 <_fstat_r+0x20>)
    2a26:	0005      	movs	r5, r0
    2a28:	0008      	movs	r0, r1
    2a2a:	0011      	movs	r1, r2
    2a2c:	6023      	str	r3, [r4, #0]
    2a2e:	f7fe fa40 	bl	eb2 <_fstat>
    2a32:	1c43      	adds	r3, r0, #1
    2a34:	d103      	bne.n	2a3e <_fstat_r+0x1e>
    2a36:	6823      	ldr	r3, [r4, #0]
    2a38:	2b00      	cmp	r3, #0
    2a3a:	d000      	beq.n	2a3e <_fstat_r+0x1e>
    2a3c:	602b      	str	r3, [r5, #0]
    2a3e:	bd70      	pop	{r4, r5, r6, pc}
    2a40:	20000254 	.word	0x20000254

00002a44 <_isatty_r>:
    2a44:	2300      	movs	r3, #0
    2a46:	b570      	push	{r4, r5, r6, lr}
    2a48:	4c06      	ldr	r4, [pc, #24]	; (2a64 <_isatty_r+0x20>)
    2a4a:	0005      	movs	r5, r0
    2a4c:	0008      	movs	r0, r1
    2a4e:	6023      	str	r3, [r4, #0]
    2a50:	f7fe fa34 	bl	ebc <_isatty>
    2a54:	1c43      	adds	r3, r0, #1
    2a56:	d103      	bne.n	2a60 <_isatty_r+0x1c>
    2a58:	6823      	ldr	r3, [r4, #0]
    2a5a:	2b00      	cmp	r3, #0
    2a5c:	d000      	beq.n	2a60 <_isatty_r+0x1c>
    2a5e:	602b      	str	r3, [r5, #0]
    2a60:	bd70      	pop	{r4, r5, r6, pc}
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	20000254 	.word	0x20000254

00002a68 <_lseek_r>:
    2a68:	b570      	push	{r4, r5, r6, lr}
    2a6a:	0005      	movs	r5, r0
    2a6c:	0008      	movs	r0, r1
    2a6e:	0011      	movs	r1, r2
    2a70:	2200      	movs	r2, #0
    2a72:	4c06      	ldr	r4, [pc, #24]	; (2a8c <_lseek_r+0x24>)
    2a74:	6022      	str	r2, [r4, #0]
    2a76:	001a      	movs	r2, r3
    2a78:	f7fe fa22 	bl	ec0 <_lseek>
    2a7c:	1c43      	adds	r3, r0, #1
    2a7e:	d103      	bne.n	2a88 <_lseek_r+0x20>
    2a80:	6823      	ldr	r3, [r4, #0]
    2a82:	2b00      	cmp	r3, #0
    2a84:	d000      	beq.n	2a88 <_lseek_r+0x20>
    2a86:	602b      	str	r3, [r5, #0]
    2a88:	bd70      	pop	{r4, r5, r6, pc}
    2a8a:	46c0      	nop			; (mov r8, r8)
    2a8c:	20000254 	.word	0x20000254

00002a90 <memchr>:
    2a90:	b2c9      	uxtb	r1, r1
    2a92:	1882      	adds	r2, r0, r2
    2a94:	4290      	cmp	r0, r2
    2a96:	d101      	bne.n	2a9c <memchr+0xc>
    2a98:	2000      	movs	r0, #0
    2a9a:	4770      	bx	lr
    2a9c:	7803      	ldrb	r3, [r0, #0]
    2a9e:	428b      	cmp	r3, r1
    2aa0:	d0fb      	beq.n	2a9a <memchr+0xa>
    2aa2:	3001      	adds	r0, #1
    2aa4:	e7f6      	b.n	2a94 <memchr+0x4>

00002aa6 <__malloc_lock>:
    2aa6:	4770      	bx	lr

00002aa8 <__malloc_unlock>:
    2aa8:	4770      	bx	lr
	...

00002aac <_read_r>:
    2aac:	b570      	push	{r4, r5, r6, lr}
    2aae:	0005      	movs	r5, r0
    2ab0:	0008      	movs	r0, r1
    2ab2:	0011      	movs	r1, r2
    2ab4:	2200      	movs	r2, #0
    2ab6:	4c06      	ldr	r4, [pc, #24]	; (2ad0 <_read_r+0x24>)
    2ab8:	6022      	str	r2, [r4, #0]
    2aba:	001a      	movs	r2, r3
    2abc:	f7fe fe6a 	bl	1794 <_read>
    2ac0:	1c43      	adds	r3, r0, #1
    2ac2:	d103      	bne.n	2acc <_read_r+0x20>
    2ac4:	6823      	ldr	r3, [r4, #0]
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	d000      	beq.n	2acc <_read_r+0x20>
    2aca:	602b      	str	r3, [r5, #0]
    2acc:	bd70      	pop	{r4, r5, r6, pc}
    2ace:	46c0      	nop			; (mov r8, r8)
    2ad0:	20000254 	.word	0x20000254
    2ad4:	656c6449 	.word	0x656c6449
    2ad8:	00000000 	.word	0x00000000
    2adc:	682f2e2e 	.word	0x682f2e2e
    2ae0:	732f6c61 	.word	0x732f6c61
    2ae4:	682f6372 	.word	0x682f6372
    2ae8:	635f6c61 	.word	0x635f6c61
    2aec:	6e656c61 	.word	0x6e656c61
    2af0:	2e726164 	.word	0x2e726164
    2af4:	00000063 	.word	0x00000063
    2af8:	682f2e2e 	.word	0x682f2e2e
    2afc:	732f6c61 	.word	0x732f6c61
    2b00:	682f6372 	.word	0x682f6372
    2b04:	755f6c61 	.word	0x755f6c61
    2b08:	74726173 	.word	0x74726173
    2b0c:	7973615f 	.word	0x7973615f
    2b10:	632e636e 	.word	0x632e636e
    2b14:	00000000 	.word	0x00000000
    2b18:	682f2e2e 	.word	0x682f2e2e
    2b1c:	752f6c61 	.word	0x752f6c61
    2b20:	736c6974 	.word	0x736c6974
    2b24:	6372732f 	.word	0x6372732f
    2b28:	6974752f 	.word	0x6974752f
    2b2c:	725f736c 	.word	0x725f736c
    2b30:	62676e69 	.word	0x62676e69
    2b34:	65666675 	.word	0x65666675
    2b38:	00632e72 	.word	0x00632e72

00002b3c <_map>:
    2b3c:	0000000f 0000000f 682f2e2e 652f6c70     ........../hpl/e
    2b4c:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    2b5c:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    2b6c:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
    2b7c:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    2b8c:	0000632e 65656c53 676e6970 6c644920     .c..Sleeping Idl
    2b9c:	00000065 0a0d0a0d 3d3d2023 3d3d3d3d     e.......# ======
    2bac:	3d3d3d3d 00000d3d 2e302e31 00000030     =====...1.0.0...
    2bbc:	756d2023 5f62696c 6e696c73 2520796b     # mulib_slinky %
    2bcc:	73203a73 68206565 73707474 672f2f3a     s: see https://g
    2bdc:	75687469 6f632e62 64722f6d 726f6f70     ithub.com/rdpoor
    2bec:	6c756d2f 0a0d6269 00000000 74747562     /mulib......butt
    2bfc:	70206e6f 73736572 61206465 6c252074     on pressed at %l
    2c0c:	000a0d75 74747542 49206e6f 7265746e     u...Button Inter
    2c1c:	74707572 00000000 0044454c              rupt....LED.

00002c28 <_global_impure_ptr>:
    2c28:	20000004                                ... 

00002c2c <__sf_fake_stderr>:
	...

00002c4c <__sf_fake_stdin>:
	...

00002c6c <__sf_fake_stdout>:
	...
    2c8c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2c9c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2cac:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2cbc:	00006665                                ef..

00002cc0 <_init>:
    2cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cc2:	46c0      	nop			; (mov r8, r8)
    2cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2cc6:	bc08      	pop	{r3}
    2cc8:	469e      	mov	lr, r3
    2cca:	4770      	bx	lr

00002ccc <__init_array_start>:
    2ccc:	000000dd 	.word	0x000000dd

00002cd0 <_fini>:
    2cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cd2:	46c0      	nop			; (mov r8, r8)
    2cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2cd6:	bc08      	pop	{r3}
    2cd8:	469e      	mov	lr, r3
    2cda:	4770      	bx	lr

00002cdc <__fini_array_start>:
    2cdc:	000000b5 	.word	0x000000b5
